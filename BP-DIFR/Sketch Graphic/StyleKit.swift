//
//  StyleKit.swift
//
//  Created on Sep 5, 2018.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class StyleKit: NSObject {
    
    
    //MARK: - Canvas Drawings
    
    /// UI Kit
    
    class func drawGlyphsTabBar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 558), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 558), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 558)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        /// _Glyphs / Tab Bar / Activity
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    /// Symbols
    
    class func draw_GlyphsTabBarHeart2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 12, y: 21.91))
        icon.addCurve(to: CGPoint(x: 12, y: 2.7), controlPoint1: CGPoint(x: 34.63, y: 6.68), controlPoint2: CGPoint(x: 19.72, y: -5.65))
        icon.addCurve(to: CGPoint(x: 12, y: 21.91), controlPoint1: CGPoint(x: 4.28, y: -5.65), controlPoint2: CGPoint(x: -10.63, y: 6.68))
        icon.close()
        context.saveGState()
        context.translateBy(x: 2, y: 3)
        icon.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 2, y: 3))
        icon.addClip()
        
        // Empty.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarFavorite2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 26.95, y: 9.64))
        icon.addCurve(to: CGPoint(x: 26.02, y: 8.96), controlPoint1: CGPoint(x: 26.81, y: 9.23), controlPoint2: CGPoint(x: 26.45, y: 8.96))
        icon.addLine(to: CGPoint(x: 17.18, y: 8.94))
        icon.addLine(to: CGPoint(x: 14.4, y: 0.67))
        icon.addCurve(to: CGPoint(x: 13.46, y: 0), controlPoint1: CGPoint(x: 14.26, y: 0.26), controlPoint2: CGPoint(x: 13.9, y: -0.02))
        icon.addCurve(to: CGPoint(x: 12.53, y: 0.69), controlPoint1: CGPoint(x: 13.03, y: 0.01), controlPoint2: CGPoint(x: 12.66, y: 0.28))
        icon.addLine(to: CGPoint(x: 9.92, y: 8.94))
        icon.addLine(to: CGPoint(x: 0.99, y: 8.96))
        icon.addCurve(to: CGPoint(x: 0.05, y: 9.64), controlPoint1: CGPoint(x: 0.55, y: 8.96), controlPoint2: CGPoint(x: 0.19, y: 9.23))
        icon.addCurve(to: CGPoint(x: 0.4, y: 10.75), controlPoint1: CGPoint(x: -0.08, y: 10.06), controlPoint2: CGPoint(x: 0.05, y: 10.49))
        icon.addLine(to: CGPoint(x: 7.4, y: 15.95))
        icon.addLine(to: CGPoint(x: 4.65, y: 24.7))
        icon.addCurve(to: CGPoint(x: 5.01, y: 25.81), controlPoint1: CGPoint(x: 4.52, y: 25.12), controlPoint2: CGPoint(x: 4.66, y: 25.55))
        icon.addCurve(to: CGPoint(x: 5.59, y: 26), controlPoint1: CGPoint(x: 5.19, y: 25.93), controlPoint2: CGPoint(x: 5.39, y: 26))
        icon.addCurve(to: CGPoint(x: 6.16, y: 25.81), controlPoint1: CGPoint(x: 5.79, y: 26), controlPoint2: CGPoint(x: 5.99, y: 25.94))
        icon.addLine(to: CGPoint(x: 13.54, y: 20.57))
        icon.addLine(to: CGPoint(x: 20.84, y: 25.81))
        icon.addCurve(to: CGPoint(x: 21.99, y: 25.81), controlPoint1: CGPoint(x: 21.19, y: 26.06), controlPoint2: CGPoint(x: 21.64, y: 26.06))
        icon.addCurve(to: CGPoint(x: 22.35, y: 24.7), controlPoint1: CGPoint(x: 22.34, y: 25.55), controlPoint2: CGPoint(x: 22.48, y: 25.12))
        icon.addLine(to: CGPoint(x: 19.6, y: 15.95))
        icon.addLine(to: CGPoint(x: 26.6, y: 10.75))
        icon.addCurve(to: CGPoint(x: 26.95, y: 9.64), controlPoint1: CGPoint(x: 26.95, y: 10.49), controlPoint2: CGPoint(x: 27.08, y: 10.06))
        context.saveGState()
        context.translateBy(x: 0.5, y: 1)
        icon.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 0.5, y: 1))
        icon.addClip()
        
        // Empty.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarHome2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 18.45, y: 5.37))
        icon.addLine(to: CGPoint(x: 18.45, y: 5.2))
        icon.addCurve(to: CGPoint(x: 19.84, y: 3.81), controlPoint1: CGPoint(x: 18.45, y: 4.43), controlPoint2: CGPoint(x: 19.06, y: 3.81))
        icon.addCurve(to: CGPoint(x: 21.22, y: 5.2), controlPoint1: CGPoint(x: 20.6, y: 3.81), controlPoint2: CGPoint(x: 21.22, y: 4.42))
        icon.addLine(to: CGPoint(x: 21.22, y: 7.83))
        icon.addLine(to: CGPoint(x: 23.42, y: 9.78))
        icon.addCurve(to: CGPoint(x: 22.93, y: 11.11), controlPoint1: CGPoint(x: 24.25, y: 10.52), controlPoint2: CGPoint(x: 24.03, y: 11.11))
        icon.addLine(to: CGPoint(x: 21.22, y: 11.11))
        icon.addLine(to: CGPoint(x: 21.22, y: 21.98))
        icon.addCurve(to: CGPoint(x: 20.23, y: 22.98), controlPoint1: CGPoint(x: 21.22, y: 22.53), controlPoint2: CGPoint(x: 20.77, y: 22.98))
        icon.addLine(to: CGPoint(x: 3.71, y: 22.98))
        icon.addCurve(to: CGPoint(x: 2.71, y: 21.98), controlPoint1: CGPoint(x: 3.16, y: 22.98), controlPoint2: CGPoint(x: 2.71, y: 22.54))
        icon.addLine(to: CGPoint(x: 2.71, y: 11.11))
        icon.addLine(to: CGPoint(x: 0.99, y: 11.11))
        icon.addCurve(to: CGPoint(x: 0.5, y: 9.78), controlPoint1: CGPoint(x: -0.11, y: 11.11), controlPoint2: CGPoint(x: -0.33, y: 10.52))
        icon.addLine(to: CGPoint(x: 11.21, y: 0.28))
        icon.addCurve(to: CGPoint(x: 12.72, y: 0.28), controlPoint1: CGPoint(x: 11.63, y: -0.09), controlPoint2: CGPoint(x: 12.3, y: -0.09))
        icon.addLine(to: CGPoint(x: 18.45, y: 5.37))
        icon.close()
        icon.move(to: CGPoint(x: 14.74, y: 13.4))
        icon.addLine(to: CGPoint(x: 14.74, y: 20.11))
        icon.addLine(to: CGPoint(x: 18.45, y: 20.11))
        icon.addLine(to: CGPoint(x: 18.45, y: 13.4))
        icon.addLine(to: CGPoint(x: 14.74, y: 13.4))
        icon.close()
        context.saveGState()
        context.translateBy(x: 2.04, y: 2.02)
        icon.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 2.04, y: 2.02))
        icon.addClip()
        
        // Empty.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarContacts2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 27.5, y: 18.75))
        icon.addLine(to: CGPoint(x: 9.9, y: 18.75))
        icon.addCurve(to: CGPoint(x: 10.93, y: 16), controlPoint1: CGPoint(x: 9.9, y: 18.75), controlPoint2: CGPoint(x: 9.85, y: 17.02))
        icon.addCurve(to: CGPoint(x: 13.61, y: 14.89), controlPoint1: CGPoint(x: 12.06, y: 14.92), controlPoint2: CGPoint(x: 13.61, y: 14.89))
        icon.addCurve(to: CGPoint(x: 16.79, y: 13.54), controlPoint1: CGPoint(x: 15.33, y: 14.79), controlPoint2: CGPoint(x: 16.79, y: 13.54))
        icon.addLine(to: CGPoint(x: 16.79, y: 12.12))
        icon.addCurve(to: CGPoint(x: 14, y: 10.78), controlPoint1: CGPoint(x: 16.79, y: 12.12), controlPoint2: CGPoint(x: 14.7, y: 11.52))
        icon.addCurve(to: CGPoint(x: 14.58, y: 9.16), controlPoint1: CGPoint(x: 14, y: 10.78), controlPoint2: CGPoint(x: 14.46, y: 9.59))
        icon.addCurve(to: CGPoint(x: 14.63, y: 7.3), controlPoint1: CGPoint(x: 14.7, y: 8.74), controlPoint2: CGPoint(x: 14.69, y: 8.19))
        icon.addCurve(to: CGPoint(x: 14.59, y: 3.93), controlPoint1: CGPoint(x: 14.58, y: 6.41), controlPoint2: CGPoint(x: 14.43, y: 4.77))
        icon.addCurve(to: CGPoint(x: 15.98, y: 1.34), controlPoint1: CGPoint(x: 14.75, y: 3.1), controlPoint2: CGPoint(x: 15.22, y: 1.76))
        icon.addCurve(to: CGPoint(x: 17.63, y: 1.13), controlPoint1: CGPoint(x: 16.74, y: 0.92), controlPoint2: CGPoint(x: 17.63, y: 1.13))
        icon.addCurve(to: CGPoint(x: 18.9, y: 0.57), controlPoint1: CGPoint(x: 17.63, y: 1.13), controlPoint2: CGPoint(x: 18.16, y: 0.73))
        icon.addCurve(to: CGPoint(x: 20.98, y: 0.94), controlPoint1: CGPoint(x: 19.48, y: 0.45), controlPoint2: CGPoint(x: 20.46, y: 0.58))
        icon.addCurve(to: CGPoint(x: 22.47, y: 2.92), controlPoint1: CGPoint(x: 21.49, y: 1.3), controlPoint2: CGPoint(x: 22.19, y: 1.96))
        icon.addCurve(to: CGPoint(x: 22.67, y: 6.22), controlPoint1: CGPoint(x: 22.78, y: 4.02), controlPoint2: CGPoint(x: 22.78, y: 5.33))
        icon.addCurve(to: CGPoint(x: 22.68, y: 7.69), controlPoint1: CGPoint(x: 22.6, y: 6.72), controlPoint2: CGPoint(x: 22.65, y: 7.3))
        icon.addCurve(to: CGPoint(x: 23.07, y: 9.45), controlPoint1: CGPoint(x: 22.71, y: 7.98), controlPoint2: CGPoint(x: 22.84, y: 8.75))
        icon.addCurve(to: CGPoint(x: 23.68, y: 10.87), controlPoint1: CGPoint(x: 23.33, y: 10.28), controlPoint2: CGPoint(x: 23.68, y: 10.87))
        icon.addCurve(to: CGPoint(x: 22.38, y: 11.76), controlPoint1: CGPoint(x: 23.68, y: 10.87), controlPoint2: CGPoint(x: 23.39, y: 11.43))
        icon.addCurve(to: CGPoint(x: 20.61, y: 12.12), controlPoint1: CGPoint(x: 21.3, y: 12.1), controlPoint2: CGPoint(x: 20.61, y: 12.12))
        icon.addLine(to: CGPoint(x: 20.61, y: 13.54))
        icon.addCurve(to: CGPoint(x: 23.79, y: 14.89), controlPoint1: CGPoint(x: 20.61, y: 13.54), controlPoint2: CGPoint(x: 22.07, y: 14.79))
        icon.addCurve(to: CGPoint(x: 26.47, y: 16), controlPoint1: CGPoint(x: 23.79, y: 14.89), controlPoint2: CGPoint(x: 25.33, y: 14.92))
        icon.addCurve(to: CGPoint(x: 27.5, y: 18.75), controlPoint1: CGPoint(x: 27.54, y: 17.02), controlPoint2: CGPoint(x: 27.5, y: 18.75))
        icon.close()
        icon.move(to: CGPoint(x: 10.38, y: 15.39))
        icon.addCurve(to: CGPoint(x: 9.09, y: 18.75), controlPoint1: CGPoint(x: 9.08, y: 16.62), controlPoint2: CGPoint(x: 9.09, y: 18.58))
        icon.addLine(to: CGPoint(x: 0, y: 18.75))
        icon.addCurve(to: CGPoint(x: 1.56, y: 14.99), controlPoint1: CGPoint(x: 0, y: 18.75), controlPoint2: CGPoint(x: -0.11, y: 15.96))
        icon.addCurve(to: CGPoint(x: 5.93, y: 13.57), controlPoint1: CGPoint(x: 3.51, y: 13.86), controlPoint2: CGPoint(x: 5.36, y: 13.76))
        icon.addCurve(to: CGPoint(x: 7.02, y: 12.46), controlPoint1: CGPoint(x: 6.46, y: 13.39), controlPoint2: CGPoint(x: 7.02, y: 13.21))
        icon.addCurve(to: CGPoint(x: 6.85, y: 11.51), controlPoint1: CGPoint(x: 7.02, y: 11.71), controlPoint2: CGPoint(x: 7.03, y: 11.61))
        icon.addCurve(to: CGPoint(x: 6.26, y: 10.78), controlPoint1: CGPoint(x: 6.51, y: 11.31), controlPoint2: CGPoint(x: 6.31, y: 11.02))
        icon.addCurve(to: CGPoint(x: 6.03, y: 8.99), controlPoint1: CGPoint(x: 6.18, y: 10.35), controlPoint2: CGPoint(x: 6.14, y: 9.14))
        icon.addCurve(to: CGPoint(x: 5.66, y: 8.61), controlPoint1: CGPoint(x: 5.92, y: 8.83), controlPoint2: CGPoint(x: 5.73, y: 8.96))
        icon.addCurve(to: CGPoint(x: 5.53, y: 7.81), controlPoint1: CGPoint(x: 5.6, y: 8.25), controlPoint2: CGPoint(x: 5.6, y: 7.94))
        icon.addCurve(to: CGPoint(x: 5.38, y: 6.52), controlPoint1: CGPoint(x: 5.47, y: 7.67), controlPoint2: CGPoint(x: 5.24, y: 6.82))
        icon.addCurve(to: CGPoint(x: 5.75, y: 6.23), controlPoint1: CGPoint(x: 5.5, y: 6.26), controlPoint2: CGPoint(x: 5.73, y: 6.39))
        icon.addCurve(to: CGPoint(x: 5.62, y: 2.79), controlPoint1: CGPoint(x: 5.77, y: 5.96), controlPoint2: CGPoint(x: 5.29, y: 3.73))
        icon.addCurve(to: CGPoint(x: 6.67, y: 1.45), controlPoint1: CGPoint(x: 5.96, y: 1.8), controlPoint2: CGPoint(x: 6.33, y: 1.67))
        icon.addCurve(to: CGPoint(x: 8.06, y: 0.23), controlPoint1: CGPoint(x: 7.02, y: 1.22), controlPoint2: CGPoint(x: 7.24, y: 0.66))
        icon.addCurve(to: CGPoint(x: 10.51, y: 0.23), controlPoint1: CGPoint(x: 8.89, y: -0.19), controlPoint2: CGPoint(x: 10.1, y: 0.06))
        icon.addCurve(to: CGPoint(x: 12.8, y: 1.74), controlPoint1: CGPoint(x: 10.92, y: 0.41), controlPoint2: CGPoint(x: 12.56, y: 0.88))
        icon.addCurve(to: CGPoint(x: 13.38, y: 2.79), controlPoint1: CGPoint(x: 12.81, y: 1.76), controlPoint2: CGPoint(x: 13.19, y: 2.25))
        icon.addCurve(to: CGPoint(x: 13.25, y: 6.23), controlPoint1: CGPoint(x: 13.71, y: 3.73), controlPoint2: CGPoint(x: 13.22, y: 5.96))
        icon.addCurve(to: CGPoint(x: 13.62, y: 6.52), controlPoint1: CGPoint(x: 13.27, y: 6.39), controlPoint2: CGPoint(x: 13.49, y: 6.26))
        icon.addCurve(to: CGPoint(x: 13.47, y: 7.81), controlPoint1: CGPoint(x: 13.76, y: 6.82), controlPoint2: CGPoint(x: 13.53, y: 7.67))
        icon.addCurve(to: CGPoint(x: 13.34, y: 8.61), controlPoint1: CGPoint(x: 13.4, y: 7.94), controlPoint2: CGPoint(x: 13.4, y: 8.25))
        icon.addCurve(to: CGPoint(x: 12.97, y: 8.99), controlPoint1: CGPoint(x: 13.27, y: 8.96), controlPoint2: CGPoint(x: 13.08, y: 8.83))
        icon.addCurve(to: CGPoint(x: 12.73, y: 10.78), controlPoint1: CGPoint(x: 12.86, y: 9.14), controlPoint2: CGPoint(x: 12.82, y: 10.35))
        icon.addCurve(to: CGPoint(x: 12.14, y: 11.51), controlPoint1: CGPoint(x: 12.69, y: 11.02), controlPoint2: CGPoint(x: 12.49, y: 11.31))
        icon.addCurve(to: CGPoint(x: 11.97, y: 12.46), controlPoint1: CGPoint(x: 11.96, y: 11.61), controlPoint2: CGPoint(x: 11.97, y: 11.71))
        icon.addCurve(to: CGPoint(x: 13.07, y: 13.57), controlPoint1: CGPoint(x: 11.97, y: 13.21), controlPoint2: CGPoint(x: 12.54, y: 13.39))
        icon.addCurve(to: CGPoint(x: 14.49, y: 13.87), controlPoint1: CGPoint(x: 13.32, y: 13.65), controlPoint2: CGPoint(x: 13.83, y: 13.72))
        icon.addCurve(to: CGPoint(x: 13.59, y: 14.06), controlPoint1: CGPoint(x: 14.2, y: 13.96), controlPoint2: CGPoint(x: 13.9, y: 14.04))
        icon.addCurve(to: CGPoint(x: 10.38, y: 15.39), controlPoint1: CGPoint(x: 13.52, y: 14.06), controlPoint2: CGPoint(x: 11.72, y: 14.11))
        icon.close()
        context.saveGState()
        context.translateBy(x: 0.25, y: 4.38)
        icon.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 0.25, y: 4.38))
        icon.addClip()
        
        // Empty.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarMessages2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 10.06, y: 20.54))
        icon.addCurve(to: CGPoint(x: 8.24, y: 20.76), controlPoint1: CGPoint(x: 9.37, y: 20.47), controlPoint2: CGPoint(x: 8.95, y: 20.54))
        icon.addCurve(to: CGPoint(x: 4.26, y: 22.16), controlPoint1: CGPoint(x: 7.39, y: 21.02), controlPoint2: CGPoint(x: 6.07, y: 22.16))
        icon.addCurve(to: CGPoint(x: 5.97, y: 19.6), controlPoint1: CGPoint(x: 4.16, y: 22.16), controlPoint2: CGPoint(x: 5.97, y: 20.7))
        icon.addCurve(to: CGPoint(x: 5.97, y: 19.21), controlPoint1: CGPoint(x: 5.97, y: 19.46), controlPoint2: CGPoint(x: 5.97, y: 19.33))
        icon.addCurve(to: CGPoint(x: 0, y: 10.37), controlPoint1: CGPoint(x: 2.39, y: 17.39), controlPoint2: CGPoint(x: 0, y: 14.11))
        icon.addCurve(to: CGPoint(x: 12.5, y: 0), controlPoint1: CGPoint(x: 0, y: 4.64), controlPoint2: CGPoint(x: 5.6, y: 0))
        icon.addCurve(to: CGPoint(x: 25, y: 10.37), controlPoint1: CGPoint(x: 19.4, y: 0), controlPoint2: CGPoint(x: 25, y: 4.64))
        icon.addCurve(to: CGPoint(x: 12.5, y: 20.74), controlPoint1: CGPoint(x: 25, y: 16.1), controlPoint2: CGPoint(x: 19.4, y: 20.74))
        icon.addCurve(to: CGPoint(x: 10.06, y: 20.54), controlPoint1: CGPoint(x: 11.67, y: 20.74), controlPoint2: CGPoint(x: 10.85, y: 20.67))
        icon.close()
        context.saveGState()
        context.translateBy(x: 1.5, y: 3)
        icon.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 1.5, y: 3))
        icon.addClip()
        
        // Empty.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarCompose2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 8.44, y: 15.28))
        icon.addLine(to: CGPoint(x: 18.98, y: 4.73))
        icon.addCurve(to: CGPoint(x: 18.63, y: 3.4), controlPoint1: CGPoint(x: 18.93, y: 4.06), controlPoint2: CGPoint(x: 18.81, y: 3.73))
        icon.addCurve(to: CGPoint(x: 17.6, y: 2.37), controlPoint1: CGPoint(x: 18.4, y: 2.95), controlPoint2: CGPoint(x: 18.05, y: 2.6))
        icon.addCurve(to: CGPoint(x: 16.27, y: 2.02), controlPoint1: CGPoint(x: 17.27, y: 2.19), controlPoint2: CGPoint(x: 16.94, y: 2.07))
        icon.addLine(to: CGPoint(x: 5.72, y: 12.56))
        icon.addCurve(to: CGPoint(x: 7.3, y: 13.71), controlPoint1: CGPoint(x: 6.23, y: 12.8), controlPoint2: CGPoint(x: 6.77, y: 13.18))
        icon.addCurve(to: CGPoint(x: 8.44, y: 15.28), controlPoint1: CGPoint(x: 7.83, y: 14.24), controlPoint2: CGPoint(x: 8.2, y: 14.77))
        icon.close()
        icon.move(to: CGPoint(x: 7.38, y: 16.34))
        icon.addCurve(to: CGPoint(x: 7.36, y: 16.28), controlPoint1: CGPoint(x: 7.37, y: 16.32), controlPoint2: CGPoint(x: 7.37, y: 16.3))
        icon.addCurve(to: CGPoint(x: 6.33, y: 14.67), controlPoint1: CGPoint(x: 7.18, y: 15.74), controlPoint2: CGPoint(x: 6.85, y: 15.19))
        icon.addCurve(to: CGPoint(x: 4.72, y: 13.64), controlPoint1: CGPoint(x: 5.81, y: 14.15), controlPoint2: CGPoint(x: 5.27, y: 13.82))
        icon.addCurve(to: CGPoint(x: 4.66, y: 13.62), controlPoint1: CGPoint(x: 4.7, y: 13.63), controlPoint2: CGPoint(x: 4.68, y: 13.63))
        icon.addLine(to: CGPoint(x: 4.37, y: 13.9))
        icon.addCurve(to: CGPoint(x: 4.01, y: 14.59), controlPoint1: CGPoint(x: 4.22, y: 14.06), controlPoint2: CGPoint(x: 4.05, y: 14.37))
        icon.addLine(to: CGPoint(x: 3.41, y: 17.59))
        icon.addLine(to: CGPoint(x: 6.41, y: 16.99))
        icon.addCurve(to: CGPoint(x: 7.1, y: 16.63), controlPoint1: CGPoint(x: 6.63, y: 16.95), controlPoint2: CGPoint(x: 6.94, y: 16.78))
        icon.addLine(to: CGPoint(x: 7.38, y: 16.34))
        icon.close()
        icon.move(to: CGPoint(x: 16.27, y: 2.02))
        icon.addLine(to: CGPoint(x: 17.75, y: 0.55))
        icon.addCurve(to: CGPoint(x: 20.44, y: 0.56), controlPoint1: CGPoint(x: 18.49, y: -0.18), controlPoint2: CGPoint(x: 19.7, y: -0.19))
        icon.addCurve(to: CGPoint(x: 20.45, y: 3.25), controlPoint1: CGPoint(x: 21.19, y: 1.31), controlPoint2: CGPoint(x: 21.19, y: 2.51))
        icon.addLine(to: CGPoint(x: 18.98, y: 4.73))
        icon.addCurve(to: CGPoint(x: 19, y: 5.5), controlPoint1: CGPoint(x: 18.99, y: 4.94), controlPoint2: CGPoint(x: 19, y: 5.2))
        icon.addLine(to: CGPoint(x: 19, y: 17.51))
        icon.addCurve(to: CGPoint(x: 18.63, y: 19.61), controlPoint1: CGPoint(x: 19, y: 18.72), controlPoint2: CGPoint(x: 18.87, y: 19.16))
        icon.addCurve(to: CGPoint(x: 17.6, y: 20.64), controlPoint1: CGPoint(x: 18.4, y: 20.05), controlPoint2: CGPoint(x: 18.05, y: 20.4))
        icon.addCurve(to: CGPoint(x: 15.5, y: 21), controlPoint1: CGPoint(x: 17.16, y: 20.88), controlPoint2: CGPoint(x: 16.72, y: 21))
        icon.addLine(to: CGPoint(x: 3.49, y: 21))
        icon.addCurve(to: CGPoint(x: 1.39, y: 20.64), controlPoint1: CGPoint(x: 2.28, y: 21), controlPoint2: CGPoint(x: 1.84, y: 20.88))
        icon.addCurve(to: CGPoint(x: 0.36, y: 19.61), controlPoint1: CGPoint(x: 0.95, y: 20.4), controlPoint2: CGPoint(x: 0.6, y: 20.05))
        icon.addCurve(to: CGPoint(x: 0, y: 17.51), controlPoint1: CGPoint(x: 0.13, y: 19.16), controlPoint2: CGPoint(x: 0, y: 18.72))
        icon.addLine(to: CGPoint(x: 0, y: 5.5))
        icon.addCurve(to: CGPoint(x: 0.36, y: 3.4), controlPoint1: CGPoint(x: 0, y: 4.28), controlPoint2: CGPoint(x: 0.13, y: 3.84))
        icon.addCurve(to: CGPoint(x: 1.39, y: 2.37), controlPoint1: CGPoint(x: 0.6, y: 2.95), controlPoint2: CGPoint(x: 0.95, y: 2.6))
        icon.addCurve(to: CGPoint(x: 3.49, y: 2), controlPoint1: CGPoint(x: 1.84, y: 2.13), controlPoint2: CGPoint(x: 2.28, y: 2))
        icon.addLine(to: CGPoint(x: 15.5, y: 2))
        icon.addCurve(to: CGPoint(x: 16.27, y: 2.02), controlPoint1: CGPoint(x: 15.8, y: 2), controlPoint2: CGPoint(x: 16.06, y: 2.01))
        icon.close()
        context.saveGState()
        context.translateBy(x: 4.5, y: 3)
        icon.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4.5, y: 3))
        icon.addClip()
        
        // Empty.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarDelete2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 12, y: 2))
        icon.addLine(to: CGPoint(x: 15, y: 2))
        icon.addCurve(to: CGPoint(x: 16, y: 3), controlPoint1: CGPoint(x: 15.55, y: 2), controlPoint2: CGPoint(x: 16, y: 2.45))
        icon.addLine(to: CGPoint(x: 0, y: 3))
        icon.addCurve(to: CGPoint(x: 1, y: 2), controlPoint1: CGPoint(x: 0, y: 2.45), controlPoint2: CGPoint(x: 0.45, y: 2))
        icon.addLine(to: CGPoint(x: 4, y: 2))
        icon.addCurve(to: CGPoint(x: 6, y: 0), controlPoint1: CGPoint(x: 4, y: 0.9), controlPoint2: CGPoint(x: 4.9, y: 0))
        icon.addLine(to: CGPoint(x: 10, y: 0))
        icon.addCurve(to: CGPoint(x: 12, y: 2), controlPoint1: CGPoint(x: 11.1, y: 0), controlPoint2: CGPoint(x: 12, y: 0.9))
        icon.close()
        icon.move(to: CGPoint(x: 0.95, y: 3.92))
        icon.addLine(to: CGPoint(x: 15.02, y: 3.92))
        icon.addLine(to: CGPoint(x: 14.32, y: 20.74))
        icon.addCurve(to: CGPoint(x: 13.05, y: 22), controlPoint1: CGPoint(x: 14.32, y: 20.74), controlPoint2: CGPoint(x: 14.05, y: 22))
        icon.addLine(to: CGPoint(x: 2.95, y: 22))
        icon.addCurve(to: CGPoint(x: 1.68, y: 20.74), controlPoint1: CGPoint(x: 1.95, y: 22), controlPoint2: CGPoint(x: 1.68, y: 20.74))
        icon.addLine(to: CGPoint(x: 0.95, y: 3.92))
        icon.close()
        icon.move(to: CGPoint(x: 11.9, y: 6))
        icon.addLine(to: CGPoint(x: 10.9, y: 6))
        icon.addLine(to: CGPoint(x: 10.4, y: 20.44))
        icon.addLine(to: CGPoint(x: 11.4, y: 20.44))
        icon.addLine(to: CGPoint(x: 11.9, y: 6))
        icon.close()
        icon.move(to: CGPoint(x: 5.5, y: 20.44))
        icon.addLine(to: CGPoint(x: 5, y: 6))
        icon.addLine(to: CGPoint(x: 4, y: 6))
        icon.addLine(to: CGPoint(x: 4.5, y: 20.44))
        icon.addLine(to: CGPoint(x: 5.5, y: 20.44))
        icon.close()
        icon.move(to: CGPoint(x: 7.5, y: 6))
        icon.addLine(to: CGPoint(x: 7.5, y: 20.44))
        icon.addLine(to: CGPoint(x: 8.5, y: 20.44))
        icon.addLine(to: CGPoint(x: 8.5, y: 6))
        icon.addLine(to: CGPoint(x: 7.5, y: 6))
        icon.close()
        context.saveGState()
        context.translateBy(x: 6, y: 3)
        icon.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 6, y: 3))
        icon.addClip()
        
        // Empty.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarActivity2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 7.94, y: 22.49))
        icon.addLine(to: CGPoint(x: 7.94, y: 21.86))
        icon.addLine(to: CGPoint(x: 12.94, y: 21.86))
        icon.addLine(to: CGPoint(x: 12.94, y: 22.49))
        icon.addCurve(to: CGPoint(x: 10.44, y: 25), controlPoint1: CGPoint(x: 12.94, y: 23.87), controlPoint2: CGPoint(x: 11.82, y: 25))
        icon.addCurve(to: CGPoint(x: 7.94, y: 22.49), controlPoint1: CGPoint(x: 9.06, y: 25), controlPoint2: CGPoint(x: 7.94, y: 23.87))
        icon.close()
        icon.move(to: CGPoint(x: 20.65, y: 18.87))
        icon.addCurve(to: CGPoint(x: 21, y: 19.61), controlPoint1: CGPoint(x: 20.86, y: 19.05), controlPoint2: CGPoint(x: 21, y: 19.31))
        icon.addCurve(to: CGPoint(x: 20.02, y: 20.6), controlPoint1: CGPoint(x: 21, y: 20.16), controlPoint2: CGPoint(x: 20.56, y: 20.6))
        icon.addCurve(to: CGPoint(x: 19.99, y: 20.59), controlPoint1: CGPoint(x: 20.01, y: 20.6), controlPoint2: CGPoint(x: 20, y: 20.59))
        icon.addCurve(to: CGPoint(x: 19.97, y: 20.6), controlPoint1: CGPoint(x: 19.98, y: 20.59), controlPoint2: CGPoint(x: 19.98, y: 20.6))
        icon.addLine(to: CGPoint(x: 11.39, y: 20.6))
        icon.addLine(to: CGPoint(x: 10.56, y: 20.6))
        icon.addLine(to: CGPoint(x: 0.99, y: 20.6))
        icon.addCurve(to: CGPoint(x: 0.98, y: 20.59), controlPoint1: CGPoint(x: 0.99, y: 20.6), controlPoint2: CGPoint(x: 0.98, y: 20.59))
        icon.addCurve(to: CGPoint(x: 0.98, y: 20.6), controlPoint1: CGPoint(x: 0.98, y: 20.59), controlPoint2: CGPoint(x: 0.98, y: 20.6))
        icon.addCurve(to: CGPoint(x: 0.95, y: 20.59), controlPoint1: CGPoint(x: 0.97, y: 20.6), controlPoint2: CGPoint(x: 0.96, y: 20.59))
        icon.addCurve(to: CGPoint(x: 0.77, y: 20.55), controlPoint1: CGPoint(x: 0.88, y: 20.59), controlPoint2: CGPoint(x: 0.83, y: 20.57))
        icon.addCurve(to: CGPoint(x: 0, y: 19.61), controlPoint1: CGPoint(x: 0.33, y: 20.45), controlPoint2: CGPoint(x: 0, y: 20.08))
        icon.addCurve(to: CGPoint(x: 0.14, y: 19.14), controlPoint1: CGPoint(x: 0, y: 19.44), controlPoint2: CGPoint(x: 0.06, y: 19.28))
        icon.addCurve(to: CGPoint(x: 1.85, y: 17.33), controlPoint1: CGPoint(x: 0.34, y: 18.67), controlPoint2: CGPoint(x: 1.03, y: 18.29))
        icon.addCurve(to: CGPoint(x: 3.66, y: 11.71), controlPoint1: CGPoint(x: 3.01, y: 15.96), controlPoint2: CGPoint(x: 3.66, y: 13.67))
        icon.addCurve(to: CGPoint(x: 3.67, y: 8.44), controlPoint1: CGPoint(x: 3.66, y: 11.71), controlPoint2: CGPoint(x: 3.66, y: 9.26))
        icon.addCurve(to: CGPoint(x: 8.41, y: 2.08), controlPoint1: CGPoint(x: 3.73, y: 5.41), controlPoint2: CGPoint(x: 5.66, y: 2.91))
        icon.addLine(to: CGPoint(x: 8.45, y: 2.08))
        icon.addCurve(to: CGPoint(x: 9.02, y: 1.92), controlPoint1: CGPoint(x: 8.63, y: 2.02), controlPoint2: CGPoint(x: 8.82, y: 1.96))
        icon.addLine(to: CGPoint(x: 9.02, y: 1.49))
        icon.addCurve(to: CGPoint(x: 10.51, y: 0), controlPoint1: CGPoint(x: 9.02, y: 0.67), controlPoint2: CGPoint(x: 9.69, y: 0))
        icon.addCurve(to: CGPoint(x: 11.99, y: 1.49), controlPoint1: CGPoint(x: 11.32, y: 0), controlPoint2: CGPoint(x: 11.99, y: 0.67))
        icon.addLine(to: CGPoint(x: 11.99, y: 1.93))
        icon.addCurve(to: CGPoint(x: 12.5, y: 2.08), controlPoint1: CGPoint(x: 12.16, y: 1.97), controlPoint2: CGPoint(x: 12.33, y: 2.03))
        icon.addLine(to: CGPoint(x: 12.55, y: 2.08))
        icon.addCurve(to: CGPoint(x: 17.28, y: 8.44), controlPoint1: CGPoint(x: 15.29, y: 2.91), controlPoint2: CGPoint(x: 17.22, y: 5.41))
        icon.addCurve(to: CGPoint(x: 17.3, y: 11.71), controlPoint1: CGPoint(x: 17.3, y: 9.26), controlPoint2: CGPoint(x: 17.3, y: 11.71))
        icon.addCurve(to: CGPoint(x: 19.11, y: 17.33), controlPoint1: CGPoint(x: 17.3, y: 13.67), controlPoint2: CGPoint(x: 17.95, y: 15.96))
        icon.addCurve(to: CGPoint(x: 20.65, y: 18.87), controlPoint1: CGPoint(x: 19.77, y: 18.11), controlPoint2: CGPoint(x: 20.34, y: 18.5))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3.5, y: 1.5)
        icon.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3.5, y: 1.5))
        icon.addClip()
        
        // Empty.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarSettings2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 13.5, y: 0))
        icon.addCurve(to: CGPoint(x: 12.46, y: 1.04), controlPoint1: CGPoint(x: 12.93, y: 0), controlPoint2: CGPoint(x: 12.46, y: 0.46))
        icon.addLine(to: CGPoint(x: 12.46, y: 1.22))
        icon.addCurve(to: CGPoint(x: 11.62, y: 2.24), controlPoint1: CGPoint(x: 12.46, y: 1.71), controlPoint2: CGPoint(x: 12.11, y: 2.16))
        icon.addCurve(to: CGPoint(x: 10.92, y: 2.37), controlPoint1: CGPoint(x: 11.38, y: 2.27), controlPoint2: CGPoint(x: 11.15, y: 2.32))
        icon.addCurve(to: CGPoint(x: 9.76, y: 1.75), controlPoint1: CGPoint(x: 10.43, y: 2.48), controlPoint2: CGPoint(x: 9.95, y: 2.21))
        icon.addLine(to: CGPoint(x: 9.69, y: 1.59))
        icon.addCurve(to: CGPoint(x: 8.33, y: 1.03), controlPoint1: CGPoint(x: 9.47, y: 1.06), controlPoint2: CGPoint(x: 8.86, y: 0.81))
        icon.addCurve(to: CGPoint(x: 7.77, y: 2.38), controlPoint1: CGPoint(x: 7.8, y: 1.25), controlPoint2: CGPoint(x: 7.55, y: 1.85))
        icon.addLine(to: CGPoint(x: 7.84, y: 2.55))
        icon.addCurve(to: CGPoint(x: 7.46, y: 3.81), controlPoint1: CGPoint(x: 8.03, y: 3.01), controlPoint2: CGPoint(x: 7.88, y: 3.55))
        icon.addCurve(to: CGPoint(x: 6.86, y: 4.21), controlPoint1: CGPoint(x: 7.25, y: 3.94), controlPoint2: CGPoint(x: 7.05, y: 4.07))
        icon.addCurve(to: CGPoint(x: 5.55, y: 4.08), controlPoint1: CGPoint(x: 6.46, y: 4.5), controlPoint2: CGPoint(x: 5.9, y: 4.43))
        icon.addLine(to: CGPoint(x: 5.42, y: 3.96))
        icon.addCurve(to: CGPoint(x: 3.96, y: 3.96), controlPoint1: CGPoint(x: 5.02, y: 3.55), controlPoint2: CGPoint(x: 4.36, y: 3.55))
        icon.addCurve(to: CGPoint(x: 3.96, y: 5.42), controlPoint1: CGPoint(x: 3.55, y: 4.36), controlPoint2: CGPoint(x: 3.55, y: 5.02))
        icon.addLine(to: CGPoint(x: 4.08, y: 5.55))
        icon.addCurve(to: CGPoint(x: 4.21, y: 6.86), controlPoint1: CGPoint(x: 4.43, y: 5.9), controlPoint2: CGPoint(x: 4.5, y: 6.46))
        icon.addCurve(to: CGPoint(x: 3.81, y: 7.46), controlPoint1: CGPoint(x: 4.07, y: 7.05), controlPoint2: CGPoint(x: 3.94, y: 7.25))
        icon.addCurve(to: CGPoint(x: 2.55, y: 7.84), controlPoint1: CGPoint(x: 3.55, y: 7.88), controlPoint2: CGPoint(x: 3.01, y: 8.03))
        icon.addLine(to: CGPoint(x: 2.38, y: 7.77))
        icon.addCurve(to: CGPoint(x: 1.03, y: 8.34), controlPoint1: CGPoint(x: 1.86, y: 7.55), controlPoint2: CGPoint(x: 1.25, y: 7.8))
        icon.addCurve(to: CGPoint(x: 1.59, y: 9.69), controlPoint1: CGPoint(x: 0.81, y: 8.86), controlPoint2: CGPoint(x: 1.06, y: 9.47))
        icon.addLine(to: CGPoint(x: 1.75, y: 9.76))
        icon.addCurve(to: CGPoint(x: 2.37, y: 10.92), controlPoint1: CGPoint(x: 2.21, y: 9.95), controlPoint2: CGPoint(x: 2.48, y: 10.43))
        icon.addCurve(to: CGPoint(x: 2.23, y: 11.62), controlPoint1: CGPoint(x: 2.32, y: 11.15), controlPoint2: CGPoint(x: 2.27, y: 11.38))
        icon.addCurve(to: CGPoint(x: 1.22, y: 12.46), controlPoint1: CGPoint(x: 2.16, y: 12.11), controlPoint2: CGPoint(x: 1.71, y: 12.46))
        icon.addLine(to: CGPoint(x: 1.04, y: 12.46))
        icon.addCurve(to: CGPoint(x: 0, y: 13.5), controlPoint1: CGPoint(x: 0.46, y: 12.46), controlPoint2: CGPoint(x: 0, y: 12.93))
        icon.addCurve(to: CGPoint(x: 1.04, y: 14.54), controlPoint1: CGPoint(x: 0, y: 14.07), controlPoint2: CGPoint(x: 0.46, y: 14.54))
        icon.addLine(to: CGPoint(x: 1.22, y: 14.54))
        icon.addCurve(to: CGPoint(x: 2.24, y: 15.38), controlPoint1: CGPoint(x: 1.71, y: 14.54), controlPoint2: CGPoint(x: 2.16, y: 14.89))
        icon.addCurve(to: CGPoint(x: 2.37, y: 16.08), controlPoint1: CGPoint(x: 2.27, y: 15.62), controlPoint2: CGPoint(x: 2.32, y: 15.85))
        icon.addCurve(to: CGPoint(x: 1.75, y: 17.24), controlPoint1: CGPoint(x: 2.48, y: 16.57), controlPoint2: CGPoint(x: 2.21, y: 17.05))
        icon.addLine(to: CGPoint(x: 1.59, y: 17.31))
        icon.addCurve(to: CGPoint(x: 1.03, y: 18.67), controlPoint1: CGPoint(x: 1.06, y: 17.53), controlPoint2: CGPoint(x: 0.81, y: 18.14))
        icon.addCurve(to: CGPoint(x: 2.38, y: 19.23), controlPoint1: CGPoint(x: 1.25, y: 19.2), controlPoint2: CGPoint(x: 1.85, y: 19.45))
        icon.addLine(to: CGPoint(x: 2.55, y: 19.16))
        icon.addCurve(to: CGPoint(x: 3.81, y: 19.54), controlPoint1: CGPoint(x: 3.01, y: 18.97), controlPoint2: CGPoint(x: 3.55, y: 19.12))
        icon.addCurve(to: CGPoint(x: 4.21, y: 20.14), controlPoint1: CGPoint(x: 3.94, y: 19.75), controlPoint2: CGPoint(x: 4.07, y: 19.95))
        icon.addCurve(to: CGPoint(x: 4.08, y: 21.45), controlPoint1: CGPoint(x: 4.5, y: 20.55), controlPoint2: CGPoint(x: 4.43, y: 21.1))
        icon.addLine(to: CGPoint(x: 3.96, y: 21.58))
        icon.addCurve(to: CGPoint(x: 3.96, y: 23.04), controlPoint1: CGPoint(x: 3.55, y: 21.98), controlPoint2: CGPoint(x: 3.55, y: 22.64))
        icon.addCurve(to: CGPoint(x: 5.42, y: 23.04), controlPoint1: CGPoint(x: 4.36, y: 23.45), controlPoint2: CGPoint(x: 5.02, y: 23.45))
        icon.addLine(to: CGPoint(x: 5.55, y: 22.92))
        icon.addCurve(to: CGPoint(x: 6.86, y: 22.79), controlPoint1: CGPoint(x: 5.9, y: 22.57), controlPoint2: CGPoint(x: 6.46, y: 22.5))
        icon.addCurve(to: CGPoint(x: 7.46, y: 23.19), controlPoint1: CGPoint(x: 7.06, y: 22.93), controlPoint2: CGPoint(x: 7.26, y: 23.06))
        icon.addCurve(to: CGPoint(x: 7.84, y: 24.45), controlPoint1: CGPoint(x: 7.88, y: 23.45), controlPoint2: CGPoint(x: 8.03, y: 23.99))
        icon.addLine(to: CGPoint(x: 7.77, y: 24.62))
        icon.addCurve(to: CGPoint(x: 8.34, y: 25.98), controlPoint1: CGPoint(x: 7.55, y: 25.15), controlPoint2: CGPoint(x: 7.81, y: 25.75))
        icon.addCurve(to: CGPoint(x: 9.69, y: 25.41), controlPoint1: CGPoint(x: 8.87, y: 26.19), controlPoint2: CGPoint(x: 9.47, y: 25.94))
        icon.addLine(to: CGPoint(x: 9.76, y: 25.25))
        icon.addCurve(to: CGPoint(x: 10.92, y: 24.63), controlPoint1: CGPoint(x: 9.95, y: 24.8), controlPoint2: CGPoint(x: 10.44, y: 24.52))
        icon.addCurve(to: CGPoint(x: 11.62, y: 24.77), controlPoint1: CGPoint(x: 11.15, y: 24.68), controlPoint2: CGPoint(x: 11.38, y: 24.73))
        icon.addCurve(to: CGPoint(x: 12.46, y: 25.78), controlPoint1: CGPoint(x: 12.11, y: 24.84), controlPoint2: CGPoint(x: 12.46, y: 25.29))
        icon.addLine(to: CGPoint(x: 12.46, y: 25.96))
        icon.addCurve(to: CGPoint(x: 13.5, y: 27), controlPoint1: CGPoint(x: 12.46, y: 26.54), controlPoint2: CGPoint(x: 12.93, y: 27))
        icon.addCurve(to: CGPoint(x: 14.54, y: 25.96), controlPoint1: CGPoint(x: 14.07, y: 27), controlPoint2: CGPoint(x: 14.54, y: 26.54))
        icon.addLine(to: CGPoint(x: 14.54, y: 25.78))
        icon.addCurve(to: CGPoint(x: 15.38, y: 24.76), controlPoint1: CGPoint(x: 14.54, y: 25.29), controlPoint2: CGPoint(x: 14.89, y: 24.84))
        icon.addCurve(to: CGPoint(x: 16.08, y: 24.63), controlPoint1: CGPoint(x: 15.62, y: 24.73), controlPoint2: CGPoint(x: 15.85, y: 24.68))
        icon.addCurve(to: CGPoint(x: 17.24, y: 25.25), controlPoint1: CGPoint(x: 16.57, y: 24.52), controlPoint2: CGPoint(x: 17.05, y: 24.79))
        icon.addLine(to: CGPoint(x: 17.31, y: 25.41))
        icon.addCurve(to: CGPoint(x: 18.67, y: 25.97), controlPoint1: CGPoint(x: 17.53, y: 25.94), controlPoint2: CGPoint(x: 18.14, y: 26.19))
        icon.addCurve(to: CGPoint(x: 19.23, y: 24.62), controlPoint1: CGPoint(x: 19.2, y: 25.75), controlPoint2: CGPoint(x: 19.45, y: 25.15))
        icon.addLine(to: CGPoint(x: 19.16, y: 24.45))
        icon.addCurve(to: CGPoint(x: 19.54, y: 23.19), controlPoint1: CGPoint(x: 18.97, y: 23.99), controlPoint2: CGPoint(x: 19.12, y: 23.45))
        icon.addCurve(to: CGPoint(x: 20.14, y: 22.79), controlPoint1: CGPoint(x: 19.75, y: 23.06), controlPoint2: CGPoint(x: 19.95, y: 22.93))
        icon.addCurve(to: CGPoint(x: 21.45, y: 22.92), controlPoint1: CGPoint(x: 20.55, y: 22.5), controlPoint2: CGPoint(x: 21.1, y: 22.57))
        icon.addLine(to: CGPoint(x: 21.58, y: 23.04))
        icon.addCurve(to: CGPoint(x: 23.04, y: 23.04), controlPoint1: CGPoint(x: 21.98, y: 23.45), controlPoint2: CGPoint(x: 22.64, y: 23.45))
        icon.addCurve(to: CGPoint(x: 23.04, y: 21.58), controlPoint1: CGPoint(x: 23.45, y: 22.64), controlPoint2: CGPoint(x: 23.45, y: 21.98))
        icon.addLine(to: CGPoint(x: 22.92, y: 21.45))
        icon.addCurve(to: CGPoint(x: 22.79, y: 20.14), controlPoint1: CGPoint(x: 22.57, y: 21.1), controlPoint2: CGPoint(x: 22.5, y: 20.54))
        icon.addCurve(to: CGPoint(x: 23.19, y: 19.54), controlPoint1: CGPoint(x: 22.93, y: 19.94), controlPoint2: CGPoint(x: 23.06, y: 19.74))
        icon.addCurve(to: CGPoint(x: 24.45, y: 19.16), controlPoint1: CGPoint(x: 23.45, y: 19.12), controlPoint2: CGPoint(x: 23.99, y: 18.97))
        icon.addLine(to: CGPoint(x: 24.62, y: 19.23))
        icon.addCurve(to: CGPoint(x: 25.98, y: 18.66), controlPoint1: CGPoint(x: 25.15, y: 19.45), controlPoint2: CGPoint(x: 25.75, y: 19.19))
        icon.addCurve(to: CGPoint(x: 25.41, y: 17.31), controlPoint1: CGPoint(x: 26.19, y: 18.13), controlPoint2: CGPoint(x: 25.94, y: 17.53))
        icon.addLine(to: CGPoint(x: 25.25, y: 17.24))
        icon.addCurve(to: CGPoint(x: 24.63, y: 16.08), controlPoint1: CGPoint(x: 24.8, y: 17.05), controlPoint2: CGPoint(x: 24.52, y: 16.56))
        icon.addCurve(to: CGPoint(x: 24.77, y: 15.38), controlPoint1: CGPoint(x: 24.68, y: 15.85), controlPoint2: CGPoint(x: 24.73, y: 15.62))
        icon.addCurve(to: CGPoint(x: 25.78, y: 14.54), controlPoint1: CGPoint(x: 24.84, y: 14.89), controlPoint2: CGPoint(x: 25.29, y: 14.54))
        icon.addLine(to: CGPoint(x: 25.96, y: 14.54))
        icon.addCurve(to: CGPoint(x: 27, y: 13.5), controlPoint1: CGPoint(x: 26.54, y: 14.54), controlPoint2: CGPoint(x: 27, y: 14.07))
        icon.addCurve(to: CGPoint(x: 25.96, y: 12.46), controlPoint1: CGPoint(x: 27, y: 12.93), controlPoint2: CGPoint(x: 26.54, y: 12.46))
        icon.addLine(to: CGPoint(x: 25.78, y: 12.46))
        icon.addCurve(to: CGPoint(x: 24.76, y: 11.62), controlPoint1: CGPoint(x: 25.29, y: 12.46), controlPoint2: CGPoint(x: 24.84, y: 12.11))
        icon.addCurve(to: CGPoint(x: 24.63, y: 10.92), controlPoint1: CGPoint(x: 24.73, y: 11.38), controlPoint2: CGPoint(x: 24.68, y: 11.15))
        icon.addCurve(to: CGPoint(x: 25.25, y: 9.76), controlPoint1: CGPoint(x: 24.52, y: 10.43), controlPoint2: CGPoint(x: 24.79, y: 9.95))
        icon.addLine(to: CGPoint(x: 25.41, y: 9.69))
        icon.addCurve(to: CGPoint(x: 25.97, y: 8.33), controlPoint1: CGPoint(x: 25.94, y: 9.47), controlPoint2: CGPoint(x: 26.19, y: 8.86))
        icon.addCurve(to: CGPoint(x: 24.62, y: 7.77), controlPoint1: CGPoint(x: 25.75, y: 7.8), controlPoint2: CGPoint(x: 25.15, y: 7.55))
        icon.addLine(to: CGPoint(x: 24.45, y: 7.84))
        icon.addCurve(to: CGPoint(x: 23.19, y: 7.46), controlPoint1: CGPoint(x: 23.99, y: 8.03), controlPoint2: CGPoint(x: 23.45, y: 7.88))
        icon.addCurve(to: CGPoint(x: 22.79, y: 6.86), controlPoint1: CGPoint(x: 23.06, y: 7.25), controlPoint2: CGPoint(x: 22.93, y: 7.05))
        icon.addCurve(to: CGPoint(x: 22.92, y: 5.55), controlPoint1: CGPoint(x: 22.5, y: 6.45), controlPoint2: CGPoint(x: 22.57, y: 5.9))
        icon.addLine(to: CGPoint(x: 23.04, y: 5.42))
        icon.addCurve(to: CGPoint(x: 23.04, y: 3.95), controlPoint1: CGPoint(x: 23.45, y: 5.02), controlPoint2: CGPoint(x: 23.45, y: 4.36))
        icon.addCurve(to: CGPoint(x: 21.58, y: 3.95), controlPoint1: CGPoint(x: 22.64, y: 3.55), controlPoint2: CGPoint(x: 21.98, y: 3.55))
        icon.addLine(to: CGPoint(x: 21.45, y: 4.08))
        icon.addCurve(to: CGPoint(x: 20.14, y: 4.21), controlPoint1: CGPoint(x: 21.1, y: 4.43), controlPoint2: CGPoint(x: 20.54, y: 4.5))
        icon.addCurve(to: CGPoint(x: 19.54, y: 3.81), controlPoint1: CGPoint(x: 19.94, y: 4.07), controlPoint2: CGPoint(x: 19.74, y: 3.94))
        icon.addCurve(to: CGPoint(x: 19.16, y: 2.55), controlPoint1: CGPoint(x: 19.12, y: 3.55), controlPoint2: CGPoint(x: 18.97, y: 3.01))
        icon.addLine(to: CGPoint(x: 19.23, y: 2.38))
        icon.addCurve(to: CGPoint(x: 18.66, y: 1.03), controlPoint1: CGPoint(x: 19.45, y: 1.86), controlPoint2: CGPoint(x: 19.2, y: 1.25))
        icon.addCurve(to: CGPoint(x: 17.31, y: 1.59), controlPoint1: CGPoint(x: 18.14, y: 0.81), controlPoint2: CGPoint(x: 17.53, y: 1.06))
        icon.addLine(to: CGPoint(x: 17.24, y: 1.75))
        icon.addCurve(to: CGPoint(x: 16.08, y: 2.37), controlPoint1: CGPoint(x: 17.05, y: 2.21), controlPoint2: CGPoint(x: 16.56, y: 2.48))
        icon.addCurve(to: CGPoint(x: 15.38, y: 2.23), controlPoint1: CGPoint(x: 15.85, y: 2.32), controlPoint2: CGPoint(x: 15.62, y: 2.27))
        icon.addCurve(to: CGPoint(x: 14.54, y: 1.22), controlPoint1: CGPoint(x: 14.89, y: 2.16), controlPoint2: CGPoint(x: 14.54, y: 1.71))
        icon.addLine(to: CGPoint(x: 14.54, y: 1.04))
        icon.addCurve(to: CGPoint(x: 13.5, y: 0), controlPoint1: CGPoint(x: 14.54, y: 0.46), controlPoint2: CGPoint(x: 14.07, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 13.5, y: 5.19))
        icon.addCurve(to: CGPoint(x: 21.74, y: 12.46), controlPoint1: CGPoint(x: 17.73, y: 5.19), controlPoint2: CGPoint(x: 21.22, y: 8.36))
        icon.addLine(to: CGPoint(x: 15.3, y: 12.46))
        icon.addCurve(to: CGPoint(x: 13.5, y: 11.42), controlPoint1: CGPoint(x: 14.93, y: 11.82), controlPoint2: CGPoint(x: 14.24, y: 11.42))
        icon.addLine(to: CGPoint(x: 13.5, y: 11.42))
        icon.addLine(to: CGPoint(x: 10.28, y: 5.84))
        icon.addCurve(to: CGPoint(x: 13.5, y: 5.19), controlPoint1: CGPoint(x: 11.27, y: 5.42), controlPoint2: CGPoint(x: 12.36, y: 5.19))
        icon.close()
        icon.move(to: CGPoint(x: 8.48, y: 6.89))
        icon.addLine(to: CGPoint(x: 11.7, y: 12.46))
        icon.addCurve(to: CGPoint(x: 11.42, y: 13.5), controlPoint1: CGPoint(x: 11.52, y: 12.78), controlPoint2: CGPoint(x: 11.42, y: 13.13))
        icon.addCurve(to: CGPoint(x: 11.7, y: 14.53), controlPoint1: CGPoint(x: 11.42, y: 13.86), controlPoint2: CGPoint(x: 11.52, y: 14.22))
        icon.addLine(to: CGPoint(x: 8.48, y: 20.11))
        icon.addCurve(to: CGPoint(x: 5.19, y: 13.5), controlPoint1: CGPoint(x: 6.49, y: 18.59), controlPoint2: CGPoint(x: 5.19, y: 16.2))
        icon.addCurve(to: CGPoint(x: 8.48, y: 6.89), controlPoint1: CGPoint(x: 5.19, y: 10.8), controlPoint2: CGPoint(x: 6.49, y: 8.41))
        icon.close()
        icon.move(to: CGPoint(x: 15.3, y: 14.54))
        icon.addLine(to: CGPoint(x: 21.74, y: 14.54))
        icon.addCurve(to: CGPoint(x: 13.5, y: 21.81), controlPoint1: CGPoint(x: 21.22, y: 18.64), controlPoint2: CGPoint(x: 17.73, y: 21.81))
        icon.addCurve(to: CGPoint(x: 10.28, y: 21.16), controlPoint1: CGPoint(x: 12.36, y: 21.81), controlPoint2: CGPoint(x: 11.27, y: 21.58))
        icon.addLine(to: CGPoint(x: 13.5, y: 15.58))
        icon.addLine(to: CGPoint(x: 13.5, y: 15.58))
        icon.addCurve(to: CGPoint(x: 15.3, y: 14.54), controlPoint1: CGPoint(x: 14.24, y: 15.58), controlPoint2: CGPoint(x: 14.93, y: 15.18))
        icon.close()
        context.saveGState()
        context.translateBy(x: 0.5, y: 0.5)
        icon.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 0.5, y: 0.5))
        icon.addClip()
        
        // Empty.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarProfile2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 21.1, y: 17.99))
        icon.addCurve(to: CGPoint(x: 17.55, y: 16.65), controlPoint1: CGPoint(x: 19.8, y: 17.24), controlPoint2: CGPoint(x: 18.54, y: 16.87))
        icon.addCurve(to: CGPoint(x: 17.55, y: 16.64), controlPoint1: CGPoint(x: 17.55, y: 16.65), controlPoint2: CGPoint(x: 17.55, y: 16.65))
        icon.addCurve(to: CGPoint(x: 17.27, y: 16.59), controlPoint1: CGPoint(x: 17.45, y: 16.62), controlPoint2: CGPoint(x: 17.36, y: 16.6))
        icon.addCurve(to: CGPoint(x: 17.09, y: 16.55), controlPoint1: CGPoint(x: 17.21, y: 16.57), controlPoint2: CGPoint(x: 17.15, y: 16.56))
        icon.addCurve(to: CGPoint(x: 15.83, y: 16.28), controlPoint1: CGPoint(x: 16.52, y: 16.43), controlPoint2: CGPoint(x: 16.08, y: 16.36))
        icon.addCurve(to: CGPoint(x: 14.51, y: 14.95), controlPoint1: CGPoint(x: 15.19, y: 16.07), controlPoint2: CGPoint(x: 14.51, y: 15.85))
        icon.addCurve(to: CGPoint(x: 14.71, y: 13.81), controlPoint1: CGPoint(x: 14.51, y: 14.05), controlPoint2: CGPoint(x: 14.49, y: 13.93))
        icon.addCurve(to: CGPoint(x: 15.43, y: 12.94), controlPoint1: CGPoint(x: 15.13, y: 13.58), controlPoint2: CGPoint(x: 15.37, y: 13.22))
        icon.addCurve(to: CGPoint(x: 15.71, y: 10.78), controlPoint1: CGPoint(x: 15.53, y: 12.42), controlPoint2: CGPoint(x: 15.58, y: 10.97))
        icon.addCurve(to: CGPoint(x: 16.16, y: 10.33), controlPoint1: CGPoint(x: 15.84, y: 10.59), controlPoint2: CGPoint(x: 16.08, y: 10.75))
        icon.addCurve(to: CGPoint(x: 16.31, y: 9.37), controlPoint1: CGPoint(x: 16.24, y: 9.9), controlPoint2: CGPoint(x: 16.24, y: 9.53))
        icon.addCurve(to: CGPoint(x: 16.5, y: 7.82), controlPoint1: CGPoint(x: 16.39, y: 9.21), controlPoint2: CGPoint(x: 16.67, y: 8.18))
        icon.addCurve(to: CGPoint(x: 16.05, y: 7.48), controlPoint1: CGPoint(x: 16.35, y: 7.51), controlPoint2: CGPoint(x: 16.07, y: 7.67))
        icon.addCurve(to: CGPoint(x: 16.21, y: 3.35), controlPoint1: CGPoint(x: 16.02, y: 7.16), controlPoint2: CGPoint(x: 16.61, y: 4.48))
        icon.addCurve(to: CGPoint(x: 15.51, y: 2.09), controlPoint1: CGPoint(x: 15.99, y: 2.7), controlPoint2: CGPoint(x: 15.51, y: 2.11))
        icon.addCurve(to: CGPoint(x: 12.73, y: 0.28), controlPoint1: CGPoint(x: 15.22, y: 1.05), controlPoint2: CGPoint(x: 13.23, y: 0.49))
        icon.addCurve(to: CGPoint(x: 9.77, y: 0.28), controlPoint1: CGPoint(x: 12.23, y: 0.07), controlPoint2: CGPoint(x: 10.77, y: -0.23))
        icon.addCurve(to: CGPoint(x: 8.08, y: 1.73), controlPoint1: CGPoint(x: 8.77, y: 0.79), controlPoint2: CGPoint(x: 8.5, y: 1.47))
        icon.addCurve(to: CGPoint(x: 6.81, y: 3.35), controlPoint1: CGPoint(x: 7.66, y: 2), controlPoint2: CGPoint(x: 7.22, y: 2.17))
        icon.addCurve(to: CGPoint(x: 6.96, y: 7.48), controlPoint1: CGPoint(x: 6.41, y: 4.48), controlPoint2: CGPoint(x: 7, y: 7.16))
        icon.addCurve(to: CGPoint(x: 6.52, y: 7.82), controlPoint1: CGPoint(x: 6.94, y: 7.67), controlPoint2: CGPoint(x: 6.67, y: 7.51))
        icon.addCurve(to: CGPoint(x: 6.7, y: 9.37), controlPoint1: CGPoint(x: 6.35, y: 8.18), controlPoint2: CGPoint(x: 6.62, y: 9.21))
        icon.addCurve(to: CGPoint(x: 6.86, y: 10.33), controlPoint1: CGPoint(x: 6.78, y: 9.53), controlPoint2: CGPoint(x: 6.78, y: 9.9))
        icon.addCurve(to: CGPoint(x: 7.3, y: 10.78), controlPoint1: CGPoint(x: 6.94, y: 10.75), controlPoint2: CGPoint(x: 7.17, y: 10.59))
        icon.addCurve(to: CGPoint(x: 7.59, y: 12.94), controlPoint1: CGPoint(x: 7.44, y: 10.97), controlPoint2: CGPoint(x: 7.49, y: 12.42))
        icon.addCurve(to: CGPoint(x: 8.3, y: 13.81), controlPoint1: CGPoint(x: 7.64, y: 13.22), controlPoint2: CGPoint(x: 7.89, y: 13.58))
        icon.addCurve(to: CGPoint(x: 8.51, y: 14.95), controlPoint1: CGPoint(x: 8.52, y: 13.93), controlPoint2: CGPoint(x: 8.51, y: 14.05))
        icon.addCurve(to: CGPoint(x: 7.18, y: 16.28), controlPoint1: CGPoint(x: 8.51, y: 15.85), controlPoint2: CGPoint(x: 7.82, y: 16.07))
        icon.addCurve(to: CGPoint(x: 1.9, y: 17.99), controlPoint1: CGPoint(x: 6.5, y: 16.51), controlPoint2: CGPoint(x: 4.25, y: 16.63))
        icon.addCurve(to: CGPoint(x: 0, y: 22.5), controlPoint1: CGPoint(x: -0.13, y: 19.15), controlPoint2: CGPoint(x: 0, y: 22.5))
        icon.addLine(to: CGPoint(x: 8.96, y: 22.5))
        icon.addLine(to: CGPoint(x: 11.01, y: 22.5))
        icon.addLine(to: CGPoint(x: 23, y: 22.5))
        icon.addCurve(to: CGPoint(x: 21.1, y: 17.99), controlPoint1: CGPoint(x: 23, y: 22.5), controlPoint2: CGPoint(x: 23.13, y: 19.15))
        context.saveGState()
        context.translateBy(x: 2.5, y: 3)
        icon.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 2.5, y: 3))
        icon.addClip()
        
        // Empty.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarBag2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 4.22, y: 6.33))
        icon.addLine(to: CGPoint(x: 4.22, y: 5.28))
        icon.addCurve(to: CGPoint(x: 9.5, y: 0), controlPoint1: CGPoint(x: 4.22, y: 2.36), controlPoint2: CGPoint(x: 6.59, y: 0))
        icon.addCurve(to: CGPoint(x: 14.78, y: 5.28), controlPoint1: CGPoint(x: 12.41, y: 0), controlPoint2: CGPoint(x: 14.78, y: 2.36))
        icon.addLine(to: CGPoint(x: 14.78, y: 6.33))
        icon.addLine(to: CGPoint(x: 16.44, y: 6.33))
        icon.addCurve(to: CGPoint(x: 17.98, y: 6.6), controlPoint1: CGPoint(x: 17.33, y: 6.33), controlPoint2: CGPoint(x: 17.65, y: 6.43))
        icon.addCurve(to: CGPoint(x: 18.73, y: 7.36), controlPoint1: CGPoint(x: 18.3, y: 6.77), controlPoint2: CGPoint(x: 18.56, y: 7.03))
        icon.addCurve(to: CGPoint(x: 19, y: 8.9), controlPoint1: CGPoint(x: 18.91, y: 7.68), controlPoint2: CGPoint(x: 19, y: 8.01))
        icon.addLine(to: CGPoint(x: 19, y: 21.71))
        icon.addCurve(to: CGPoint(x: 18.73, y: 23.25), controlPoint1: CGPoint(x: 19, y: 22.61), controlPoint2: CGPoint(x: 18.91, y: 22.93))
        icon.addCurve(to: CGPoint(x: 17.98, y: 24.01), controlPoint1: CGPoint(x: 18.56, y: 23.58), controlPoint2: CGPoint(x: 18.3, y: 23.84))
        icon.addCurve(to: CGPoint(x: 16.44, y: 24.28), controlPoint1: CGPoint(x: 17.65, y: 24.18), controlPoint2: CGPoint(x: 17.33, y: 24.28))
        icon.addLine(to: CGPoint(x: 2.56, y: 24.28))
        icon.addCurve(to: CGPoint(x: 1.02, y: 24.01), controlPoint1: CGPoint(x: 1.67, y: 24.28), controlPoint2: CGPoint(x: 1.35, y: 24.18))
        icon.addCurve(to: CGPoint(x: 0.27, y: 23.25), controlPoint1: CGPoint(x: 0.7, y: 23.84), controlPoint2: CGPoint(x: 0.44, y: 23.58))
        icon.addCurve(to: CGPoint(x: 0, y: 21.71), controlPoint1: CGPoint(x: 0.09, y: 22.93), controlPoint2: CGPoint(x: 0, y: 22.61))
        icon.addLine(to: CGPoint(x: 0, y: 8.9))
        icon.addCurve(to: CGPoint(x: 0.27, y: 7.36), controlPoint1: CGPoint(x: 0, y: 8.01), controlPoint2: CGPoint(x: 0.09, y: 7.68))
        icon.addCurve(to: CGPoint(x: 1.02, y: 6.6), controlPoint1: CGPoint(x: 0.44, y: 7.03), controlPoint2: CGPoint(x: 0.7, y: 6.77))
        icon.addCurve(to: CGPoint(x: 2.56, y: 6.33), controlPoint1: CGPoint(x: 1.35, y: 6.43), controlPoint2: CGPoint(x: 1.67, y: 6.33))
        icon.addLine(to: CGPoint(x: 4.22, y: 6.33))
        icon.close()
        icon.move(to: CGPoint(x: 12.67, y: 6.33))
        icon.addLine(to: CGPoint(x: 12.67, y: 5.28))
        icon.addCurve(to: CGPoint(x: 9.5, y: 2.11), controlPoint1: CGPoint(x: 12.67, y: 3.53), controlPoint2: CGPoint(x: 11.25, y: 2.11))
        icon.addCurve(to: CGPoint(x: 6.33, y: 5.28), controlPoint1: CGPoint(x: 7.75, y: 2.11), controlPoint2: CGPoint(x: 6.33, y: 3.53))
        icon.addLine(to: CGPoint(x: 6.33, y: 6.33))
        icon.addLine(to: CGPoint(x: 12.67, y: 6.33))
        icon.close()
        context.saveGState()
        context.translateBy(x: 4.5, y: 0.96)
        icon.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4.5, y: 0.96))
        icon.addClip()
        
        // Empty.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarBookmarks2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 1.46, y: 23.89))
        icon.addCurve(to: CGPoint(x: 0, y: 23), controlPoint1: CGPoint(x: 0.8, y: 24.23), controlPoint2: CGPoint(x: 0, y: 23.75))
        icon.addLine(to: CGPoint(x: 0, y: 1.93))
        icon.addCurve(to: CGPoint(x: 2.11, y: 0), controlPoint1: CGPoint(x: 0, y: 0.82), controlPoint2: CGPoint(x: 0.98, y: 0))
        icon.addLine(to: CGPoint(x: 15.89, y: 0))
        icon.addCurve(to: CGPoint(x: 18, y: 1.93), controlPoint1: CGPoint(x: 17.02, y: 0), controlPoint2: CGPoint(x: 18, y: 0.82))
        icon.addLine(to: CGPoint(x: 18, y: 23))
        icon.addCurve(to: CGPoint(x: 16.54, y: 23.89), controlPoint1: CGPoint(x: 18, y: 23.75), controlPoint2: CGPoint(x: 17.2, y: 24.23))
        icon.addLine(to: CGPoint(x: 9, y: 19.97))
        icon.addLine(to: CGPoint(x: 1.46, y: 23.89))
        icon.close()
        context.saveGState()
        context.translateBy(x: 5, y: 2)
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 5, y: 2))
        icon.addClip()
        
        // Empty.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarDiscover2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 11.5, y: 23))
        icon.addCurve(to: CGPoint(x: 0, y: 11.5), controlPoint1: CGPoint(x: 5.15, y: 23), controlPoint2: CGPoint(x: 0, y: 17.85))
        icon.addCurve(to: CGPoint(x: 11.5, y: 0), controlPoint1: CGPoint(x: 0, y: 5.15), controlPoint2: CGPoint(x: 5.15, y: 0))
        icon.addCurve(to: CGPoint(x: 23, y: 11.5), controlPoint1: CGPoint(x: 17.85, y: 0), controlPoint2: CGPoint(x: 23, y: 5.15))
        icon.addCurve(to: CGPoint(x: 11.5, y: 23), controlPoint1: CGPoint(x: 23, y: 17.85), controlPoint2: CGPoint(x: 17.85, y: 23))
        icon.close()
        icon.move(to: CGPoint(x: 9.97, y: 10.7))
        icon.addLine(to: CGPoint(x: 5.72, y: 17.12))
        icon.addCurve(to: CGPoint(x: 5.83, y: 17.23), controlPoint1: CGPoint(x: 5.67, y: 17.19), controlPoint2: CGPoint(x: 5.76, y: 17.27))
        icon.addLine(to: CGPoint(x: 12.36, y: 13.12))
        icon.addCurve(to: CGPoint(x: 12.38, y: 13.09), controlPoint1: CGPoint(x: 12.37, y: 13.11), controlPoint2: CGPoint(x: 12.37, y: 13.1))
        icon.addLine(to: CGPoint(x: 17.28, y: 5.89))
        icon.addCurve(to: CGPoint(x: 17.17, y: 5.77), controlPoint1: CGPoint(x: 17.33, y: 5.81), controlPoint2: CGPoint(x: 17.24, y: 5.72))
        icon.addLine(to: CGPoint(x: 9.99, y: 10.68))
        icon.addCurve(to: CGPoint(x: 9.97, y: 10.7), controlPoint1: CGPoint(x: 9.99, y: 10.68), controlPoint2: CGPoint(x: 9.98, y: 10.69))
        icon.close()
        icon.move(to: CGPoint(x: 10.48, y: 11.59))
        icon.addCurve(to: CGPoint(x: 10.51, y: 11.6), controlPoint1: CGPoint(x: 10.5, y: 11.58), controlPoint2: CGPoint(x: 10.51, y: 11.6))
        icon.addLine(to: CGPoint(x: 11.52, y: 12.64))
        icon.addCurve(to: CGPoint(x: 11.54, y: 12.67), controlPoint1: CGPoint(x: 11.52, y: 12.64), controlPoint2: CGPoint(x: 11.54, y: 12.65))
        icon.addCurve(to: CGPoint(x: 11.51, y: 12.7), controlPoint1: CGPoint(x: 11.54, y: 12.68), controlPoint2: CGPoint(x: 11.51, y: 12.7))
        icon.addLine(to: CGPoint(x: 8.07, y: 15.01))
        icon.addCurve(to: CGPoint(x: 8.06, y: 14.99), controlPoint1: CGPoint(x: 8.07, y: 15.01), controlPoint2: CGPoint(x: 8.05, y: 15))
        icon.addCurve(to: CGPoint(x: 10.44, y: 11.61), controlPoint1: CGPoint(x: 8.24, y: 14.72), controlPoint2: CGPoint(x: 10.18, y: 11.98))
        icon.addCurve(to: CGPoint(x: 10.48, y: 11.59), controlPoint1: CGPoint(x: 10.46, y: 11.58), controlPoint2: CGPoint(x: 10.47, y: 11.59))
        icon.close()
        context.saveGState()
        context.translateBy(x: 2.5, y: 2.5)
        icon.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 2.5, y: 2.5))
        icon.addClip()
        
        // Empty.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarCloud2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 20.18, y: 6.5))
        icon.addCurve(to: CGPoint(x: 13.73, y: 0), controlPoint1: CGPoint(x: 20.03, y: 2.88), controlPoint2: CGPoint(x: 17.21, y: 0))
        icon.addCurve(to: CGPoint(x: 7.89, y: 3.92), controlPoint1: CGPoint(x: 11.15, y: 0), controlPoint2: CGPoint(x: 8.92, y: 1.6))
        icon.addCurve(to: CGPoint(x: 6.11, y: 3.38), controlPoint1: CGPoint(x: 7.37, y: 3.58), controlPoint2: CGPoint(x: 6.77, y: 3.38))
        icon.addCurve(to: CGPoint(x: 2.69, y: 6.85), controlPoint1: CGPoint(x: 4.26, y: 3.38), controlPoint2: CGPoint(x: 2.76, y: 4.92))
        icon.addCurve(to: CGPoint(x: 0, y: 11.22), controlPoint1: CGPoint(x: 1.1, y: 7.6), controlPoint2: CGPoint(x: 0, y: 9.27))
        icon.addCurve(to: CGPoint(x: 4.55, y: 16), controlPoint1: CGPoint(x: 0, y: 13.86), controlPoint2: CGPoint(x: 2.04, y: 16))
        icon.addLine(to: CGPoint(x: 19.45, y: 16))
        icon.addCurve(to: CGPoint(x: 24, y: 11.22), controlPoint1: CGPoint(x: 21.96, y: 16), controlPoint2: CGPoint(x: 24, y: 13.86))
        icon.addCurve(to: CGPoint(x: 20.18, y: 6.5), controlPoint1: CGPoint(x: 24, y: 8.83), controlPoint2: CGPoint(x: 22.34, y: 6.86))
        context.saveGState()
        context.translateBy(x: 2, y: 6)
        icon.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 2, y: 6))
        icon.addClip()
        
        // Empty.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarToday2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 16.87, y: 20.77))
        icon.addLine(to: CGPoint(x: 16.87, y: 2.73))
        icon.addCurve(to: CGPoint(x: 15.81, y: 1.62), controlPoint1: CGPoint(x: 16.87, y: 2.12), controlPoint2: CGPoint(x: 16.39, y: 1.62))
        icon.addLine(to: CGPoint(x: 2.69, y: 1.62))
        icon.addCurve(to: CGPoint(x: 1.63, y: 2.73), controlPoint1: CGPoint(x: 2.11, y: 1.62), controlPoint2: CGPoint(x: 1.63, y: 2.12))
        icon.addLine(to: CGPoint(x: 1.63, y: 20.77))
        icon.addCurve(to: CGPoint(x: 2.69, y: 21.87), controlPoint1: CGPoint(x: 1.63, y: 21.38), controlPoint2: CGPoint(x: 2.11, y: 21.87))
        icon.addLine(to: CGPoint(x: 15.81, y: 21.87))
        icon.addCurve(to: CGPoint(x: 16.87, y: 20.77), controlPoint1: CGPoint(x: 16.39, y: 21.87), controlPoint2: CGPoint(x: 16.87, y: 21.38))
        icon.close()
        icon.move(to: CGPoint(x: 15.81, y: 0))
        icon.addCurve(to: CGPoint(x: 18.5, y: 2.78), controlPoint1: CGPoint(x: 17.3, y: 0), controlPoint2: CGPoint(x: 18.5, y: 1.25))
        icon.addLine(to: CGPoint(x: 18.5, y: 20.72))
        icon.addCurve(to: CGPoint(x: 15.81, y: 23.5), controlPoint1: CGPoint(x: 18.5, y: 22.25), controlPoint2: CGPoint(x: 17.3, y: 23.5))
        icon.addLine(to: CGPoint(x: 2.69, y: 23.5))
        icon.addCurve(to: CGPoint(x: 0, y: 20.72), controlPoint1: CGPoint(x: 1.2, y: 23.5), controlPoint2: CGPoint(x: 0, y: 22.25))
        icon.addLine(to: CGPoint(x: 0, y: 2.78))
        icon.addCurve(to: CGPoint(x: 2.69, y: 0), controlPoint1: CGPoint(x: 0, y: 1.25), controlPoint2: CGPoint(x: 1.2, y: 0))
        icon.addLine(to: CGPoint(x: 15.81, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 3.02, y: 20.29))
        icon.addLine(to: CGPoint(x: 15.48, y: 20.29))
        icon.addLine(to: CGPoint(x: 15.48, y: 6.92))
        icon.addLine(to: CGPoint(x: 3.02, y: 6.92))
        icon.addLine(to: CGPoint(x: 3.02, y: 20.29))
        icon.close()
        icon.move(to: CGPoint(x: 3.71, y: 4.61))
        icon.addLine(to: CGPoint(x: 9.25, y: 4.61))
        icon.addCurve(to: CGPoint(x: 9.94, y: 3.92), controlPoint1: CGPoint(x: 9.63, y: 4.61), controlPoint2: CGPoint(x: 9.94, y: 4.3))
        icon.addCurve(to: CGPoint(x: 9.25, y: 3.23), controlPoint1: CGPoint(x: 9.94, y: 3.54), controlPoint2: CGPoint(x: 9.63, y: 3.23))
        icon.addLine(to: CGPoint(x: 3.71, y: 3.23))
        icon.addCurve(to: CGPoint(x: 3.02, y: 3.92), controlPoint1: CGPoint(x: 3.33, y: 3.23), controlPoint2: CGPoint(x: 3.02, y: 3.54))
        icon.addCurve(to: CGPoint(x: 3.71, y: 4.61), controlPoint1: CGPoint(x: 3.02, y: 4.3), controlPoint2: CGPoint(x: 3.33, y: 4.61))
        icon.close()
        context.saveGState()
        context.translateBy(x: 4.75, y: 2)
        icon.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4.75, y: 2))
        icon.addClip()
        
        // Empty.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarLibrary2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 26.57, y: 6.35))
        icon.addCurve(to: CGPoint(x: 28, y: 7.79), controlPoint1: CGPoint(x: 27.36, y: 6.35), controlPoint2: CGPoint(x: 28, y: 7))
        icon.addLine(to: CGPoint(x: 28, y: 22.56))
        icon.addCurve(to: CGPoint(x: 26.57, y: 24), controlPoint1: CGPoint(x: 28, y: 23.36), controlPoint2: CGPoint(x: 27.36, y: 24))
        icon.addLine(to: CGPoint(x: 1.43, y: 24))
        icon.addCurve(to: CGPoint(x: 0, y: 22.56), controlPoint1: CGPoint(x: 0.64, y: 24), controlPoint2: CGPoint(x: 0, y: 23.36))
        icon.addLine(to: CGPoint(x: 0, y: 7.79))
        icon.addCurve(to: CGPoint(x: 1.43, y: 6.35), controlPoint1: CGPoint(x: 0, y: 7), controlPoint2: CGPoint(x: 0.64, y: 6.35))
        icon.addLine(to: CGPoint(x: 26.57, y: 6.35))
        icon.close()
        icon.move(to: CGPoint(x: 3.23, y: 4.56))
        icon.addCurve(to: CGPoint(x: 2.45, y: 3.79), controlPoint1: CGPoint(x: 2.8, y: 4.56), controlPoint2: CGPoint(x: 2.45, y: 4.22))
        icon.addCurve(to: CGPoint(x: 3.23, y: 3.01), controlPoint1: CGPoint(x: 2.45, y: 3.36), controlPoint2: CGPoint(x: 2.8, y: 3.01))
        icon.addLine(to: CGPoint(x: 24.84, y: 3.01))
        icon.addCurve(to: CGPoint(x: 25.61, y: 3.79), controlPoint1: CGPoint(x: 25.26, y: 3.01), controlPoint2: CGPoint(x: 25.61, y: 3.36))
        icon.addCurve(to: CGPoint(x: 24.84, y: 4.56), controlPoint1: CGPoint(x: 25.61, y: 4.22), controlPoint2: CGPoint(x: 25.26, y: 4.56))
        icon.addLine(to: CGPoint(x: 3.23, y: 4.56))
        icon.close()
        icon.move(to: CGPoint(x: 5.1, y: 1.56))
        icon.addCurve(to: CGPoint(x: 4.4, y: 0.85), controlPoint1: CGPoint(x: 4.71, y: 1.56), controlPoint2: CGPoint(x: 4.4, y: 1.24))
        icon.addLine(to: CGPoint(x: 4.4, y: 0.7))
        icon.addCurve(to: CGPoint(x: 5.1, y: 0), controlPoint1: CGPoint(x: 4.4, y: 0.31), controlPoint2: CGPoint(x: 4.71, y: 0))
        icon.addLine(to: CGPoint(x: 22.64, y: 0))
        icon.addCurve(to: CGPoint(x: 23.34, y: 0.7), controlPoint1: CGPoint(x: 23.02, y: 0), controlPoint2: CGPoint(x: 23.34, y: 0.31))
        icon.addLine(to: CGPoint(x: 23.34, y: 0.85))
        icon.addCurve(to: CGPoint(x: 22.64, y: 1.56), controlPoint1: CGPoint(x: 23.34, y: 1.24), controlPoint2: CGPoint(x: 23.02, y: 1.56))
        icon.addLine(to: CGPoint(x: 5.1, y: 1.56))
        icon.close()
        context.saveGState()
        context.translateBy(x: 0, y: 2)
        icon.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 0, y: 2))
        icon.addClip()
        
        // Empty.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarPhotos2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 26.71, y: 4.07))
        icon.addCurve(to: CGPoint(x: 28, y: 5.35), controlPoint1: CGPoint(x: 27.42, y: 4.07), controlPoint2: CGPoint(x: 28, y: 4.65))
        icon.addLine(to: CGPoint(x: 28, y: 19.72))
        icon.addCurve(to: CGPoint(x: 26.71, y: 21), controlPoint1: CGPoint(x: 28, y: 20.43), controlPoint2: CGPoint(x: 27.42, y: 21))
        icon.addLine(to: CGPoint(x: 5.74, y: 21))
        icon.addCurve(to: CGPoint(x: 4.45, y: 19.72), controlPoint1: CGPoint(x: 5.03, y: 21), controlPoint2: CGPoint(x: 4.45, y: 20.43))
        icon.addLine(to: CGPoint(x: 4.45, y: 5.35))
        icon.addCurve(to: CGPoint(x: 5.74, y: 4.07), controlPoint1: CGPoint(x: 4.45, y: 4.65), controlPoint2: CGPoint(x: 5.03, y: 4.07))
        icon.addLine(to: CGPoint(x: 26.71, y: 4.07))
        icon.close()
        icon.move(to: CGPoint(x: 23.55, y: 1.28))
        icon.addLine(to: CGPoint(x: 23.55, y: 2.64))
        icon.addLine(to: CGPoint(x: 4.14, y: 2.64))
        icon.addCurve(to: CGPoint(x: 2.85, y: 3.92), controlPoint1: CGPoint(x: 3.42, y: 2.64), controlPoint2: CGPoint(x: 2.85, y: 3.21))
        icon.addLine(to: CGPoint(x: 2.85, y: 16.93))
        icon.addLine(to: CGPoint(x: 1.29, y: 16.93))
        icon.addCurve(to: CGPoint(x: 0, y: 15.65), controlPoint1: CGPoint(x: 0.58, y: 16.93), controlPoint2: CGPoint(x: 0, y: 16.36))
        icon.addLine(to: CGPoint(x: 0, y: 1.28))
        icon.addCurve(to: CGPoint(x: 1.29, y: 0), controlPoint1: CGPoint(x: 0, y: 0.57), controlPoint2: CGPoint(x: 0.58, y: 0))
        icon.addLine(to: CGPoint(x: 22.26, y: 0))
        icon.addCurve(to: CGPoint(x: 23.55, y: 1.28), controlPoint1: CGPoint(x: 22.97, y: 0), controlPoint2: CGPoint(x: 23.55, y: 0.57))
        icon.close()
        context.saveGState()
        context.translateBy(x: 0, y: 3.5)
        icon.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 0, y: 3.5))
        icon.addClip()
        
        // Empty.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarFiles2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 24.56, y: 7.21))
        icon.addCurve(to: CGPoint(x: 24.97, y: 7.61), controlPoint1: CGPoint(x: 24.79, y: 7.21), controlPoint2: CGPoint(x: 24.97, y: 7.39))
        icon.addLine(to: CGPoint(x: 24.97, y: 20.2))
        icon.addCurve(to: CGPoint(x: 23.65, y: 21.5), controlPoint1: CGPoint(x: 24.97, y: 20.92), controlPoint2: CGPoint(x: 24.38, y: 21.5))
        icon.addLine(to: CGPoint(x: 1.31, y: 21.5))
        icon.addCurve(to: CGPoint(x: 0, y: 20.2), controlPoint1: CGPoint(x: 0.59, y: 21.5), controlPoint2: CGPoint(x: 0, y: 20.92))
        icon.addLine(to: CGPoint(x: 0, y: 7.61))
        icon.addCurve(to: CGPoint(x: 0.4, y: 7.21), controlPoint1: CGPoint(x: 0, y: 7.39), controlPoint2: CGPoint(x: 0.18, y: 7.21))
        icon.addLine(to: CGPoint(x: 24.56, y: 7.21))
        icon.close()
        icon.move(to: CGPoint(x: 23.19, y: 2.34))
        icon.addCurve(to: CGPoint(x: 25, y: 4.13), controlPoint1: CGPoint(x: 24.19, y: 2.34), controlPoint2: CGPoint(x: 25, y: 3.14))
        icon.addLine(to: CGPoint(x: 25, y: 5.77))
        icon.addLine(to: CGPoint(x: 0.03, y: 5.77))
        icon.addLine(to: CGPoint(x: 0.03, y: 3.38))
        icon.addLine(to: CGPoint(x: 0.03, y: 2.34))
        icon.addLine(to: CGPoint(x: 0.03, y: 1.81))
        icon.addCurve(to: CGPoint(x: 1.86, y: 0), controlPoint1: CGPoint(x: 0.03, y: 0.81), controlPoint2: CGPoint(x: 0.85, y: 0))
        icon.addLine(to: CGPoint(x: 7.83, y: 0))
        icon.addCurve(to: CGPoint(x: 8.75, y: 0.43), controlPoint1: CGPoint(x: 8.18, y: 0), controlPoint2: CGPoint(x: 8.52, y: 0.16))
        icon.addLine(to: CGPoint(x: 10.36, y: 2.34))
        icon.addLine(to: CGPoint(x: 23.19, y: 2.34))
        icon.close()
        context.saveGState()
        context.translateBy(x: 1.5, y: 3)
        icon.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 1.5, y: 3))
        icon.addClip()
        
        // Empty.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarCamera2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 9.64, y: 0))
        icon.addLine(to: CGPoint(x: 16.36, y: 0))
        icon.addCurve(to: CGPoint(x: 17.71, y: 0.67), controlPoint1: CGPoint(x: 16.82, y: 0), controlPoint2: CGPoint(x: 17.42, y: 0.3))
        icon.addLine(to: CGPoint(x: 19.55, y: 3.39))
        icon.addCurve(to: CGPoint(x: 20.35, y: 3.82), controlPoint1: CGPoint(x: 19.73, y: 3.66), controlPoint2: CGPoint(x: 20.03, y: 3.82))
        icon.addLine(to: CGPoint(x: 24.32, y: 3.82))
        icon.addCurve(to: CGPoint(x: 26, y: 5.51), controlPoint1: CGPoint(x: 25.25, y: 3.82), controlPoint2: CGPoint(x: 26, y: 4.57))
        icon.addLine(to: CGPoint(x: 26, y: 18.81))
        icon.addCurve(to: CGPoint(x: 24.32, y: 20.5), controlPoint1: CGPoint(x: 26, y: 19.74), controlPoint2: CGPoint(x: 25.25, y: 20.5))
        icon.addLine(to: CGPoint(x: 1.68, y: 20.5))
        icon.addCurve(to: CGPoint(x: 0, y: 18.81), controlPoint1: CGPoint(x: 0.75, y: 20.5), controlPoint2: CGPoint(x: 0, y: 19.74))
        icon.addLine(to: CGPoint(x: 0, y: 5.51))
        icon.addCurve(to: CGPoint(x: 1.68, y: 3.82), controlPoint1: CGPoint(x: 0, y: 4.57), controlPoint2: CGPoint(x: 0.75, y: 3.82))
        icon.addLine(to: CGPoint(x: 5.66, y: 3.82))
        icon.addCurve(to: CGPoint(x: 6.44, y: 3.41), controlPoint1: CGPoint(x: 5.97, y: 3.82), controlPoint2: CGPoint(x: 6.26, y: 3.66))
        icon.addLine(to: CGPoint(x: 8.29, y: 0.67))
        icon.addCurve(to: CGPoint(x: 9.64, y: 0), controlPoint1: CGPoint(x: 8.58, y: 0.3), controlPoint2: CGPoint(x: 9.18, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 19.29, y: 5.94))
        icon.addCurve(to: CGPoint(x: 20.13, y: 6.78), controlPoint1: CGPoint(x: 19.29, y: 6.4), controlPoint2: CGPoint(x: 19.67, y: 6.78))
        icon.addCurve(to: CGPoint(x: 20.97, y: 5.94), controlPoint1: CGPoint(x: 20.59, y: 6.78), controlPoint2: CGPoint(x: 20.97, y: 6.4))
        icon.addCurve(to: CGPoint(x: 20.13, y: 5.09), controlPoint1: CGPoint(x: 20.97, y: 5.47), controlPoint2: CGPoint(x: 20.59, y: 5.09))
        icon.addCurve(to: CGPoint(x: 19.29, y: 5.94), controlPoint1: CGPoint(x: 19.67, y: 5.09), controlPoint2: CGPoint(x: 19.29, y: 5.47))
        icon.close()
        icon.move(to: CGPoint(x: 6.82, y: 11.76))
        icon.addCurve(to: CGPoint(x: 13, y: 18), controlPoint1: CGPoint(x: 6.82, y: 15.2), controlPoint2: CGPoint(x: 9.59, y: 18))
        icon.addCurve(to: CGPoint(x: 19.18, y: 11.76), controlPoint1: CGPoint(x: 16.41, y: 18), controlPoint2: CGPoint(x: 19.18, y: 15.2))
        icon.addCurve(to: CGPoint(x: 13, y: 5.51), controlPoint1: CGPoint(x: 19.18, y: 8.31), controlPoint2: CGPoint(x: 16.41, y: 5.51))
        icon.addCurve(to: CGPoint(x: 6.82, y: 11.76), controlPoint1: CGPoint(x: 9.59, y: 5.51), controlPoint2: CGPoint(x: 6.82, y: 8.31))
        icon.close()
        icon.move(to: CGPoint(x: 2.52, y: 0.85))
        icon.addLine(to: CGPoint(x: 4.19, y: 0.85))
        icon.addCurve(to: CGPoint(x: 5.03, y: 1.7), controlPoint1: CGPoint(x: 4.66, y: 0.85), controlPoint2: CGPoint(x: 5.03, y: 1.23))
        icon.addLine(to: CGPoint(x: 5.03, y: 2.54))
        icon.addLine(to: CGPoint(x: 1.68, y: 2.54))
        icon.addLine(to: CGPoint(x: 1.68, y: 1.7))
        icon.addCurve(to: CGPoint(x: 2.52, y: 0.85), controlPoint1: CGPoint(x: 1.68, y: 1.23), controlPoint2: CGPoint(x: 2.05, y: 0.85))
        icon.close()
        icon.move(to: CGPoint(x: 7.95, y: 11.76))
        icon.addCurve(to: CGPoint(x: 13, y: 6.65), controlPoint1: CGPoint(x: 7.95, y: 8.94), controlPoint2: CGPoint(x: 10.21, y: 6.65))
        icon.addCurve(to: CGPoint(x: 18.05, y: 11.76), controlPoint1: CGPoint(x: 15.79, y: 6.65), controlPoint2: CGPoint(x: 18.05, y: 8.94))
        icon.addCurve(to: CGPoint(x: 13, y: 16.87), controlPoint1: CGPoint(x: 18.05, y: 14.58), controlPoint2: CGPoint(x: 15.79, y: 16.87))
        icon.addCurve(to: CGPoint(x: 7.95, y: 11.76), controlPoint1: CGPoint(x: 10.21, y: 16.87), controlPoint2: CGPoint(x: 7.95, y: 14.58))
        icon.close()
        context.saveGState()
        context.translateBy(x: 1, y: 4)
        icon.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 1, y: 4))
        icon.addClip()
        
        // Empty.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarTickets2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 2, y: 3)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 12.51, y: 4.78))
            icon.addCurve(to: CGPoint(x: 22.95, y: 4.78), controlPoint1: CGPoint(x: 15.99, y: 4.78), controlPoint2: CGPoint(x: 19.47, y: 4.78))
            icon.addCurve(to: CGPoint(x: 24.74, y: 5.74), controlPoint1: CGPoint(x: 23.73, y: 4.78), controlPoint2: CGPoint(x: 24.33, y: 5.07))
            icon.addCurve(to: CGPoint(x: 25, y: 6.76), controlPoint1: CGPoint(x: 24.92, y: 6.05), controlPoint2: CGPoint(x: 25, y: 6.4))
            icon.addCurve(to: CGPoint(x: 25, y: 10.56), controlPoint1: CGPoint(x: 25, y: 8.02), controlPoint2: CGPoint(x: 24.99, y: 9.29))
            icon.addCurve(to: CGPoint(x: 24.86, y: 10.75), controlPoint1: CGPoint(x: 25, y: 10.67), controlPoint2: CGPoint(x: 24.96, y: 10.71))
            icon.addCurve(to: CGPoint(x: 23.08, y: 13.36), controlPoint1: CGPoint(x: 23.77, y: 11.2), controlPoint2: CGPoint(x: 23.08, y: 12.22))
            icon.addCurve(to: CGPoint(x: 24.88, y: 16.03), controlPoint1: CGPoint(x: 23.08, y: 14.55), controlPoint2: CGPoint(x: 23.75, y: 15.56))
            icon.addCurve(to: CGPoint(x: 25, y: 16.2), controlPoint1: CGPoint(x: 24.96, y: 16.07), controlPoint2: CGPoint(x: 25, y: 16.1))
            icon.addCurve(to: CGPoint(x: 24.99, y: 20.1), controlPoint1: CGPoint(x: 24.99, y: 17.5), controlPoint2: CGPoint(x: 25.01, y: 18.8))
            icon.addCurve(to: CGPoint(x: 23.04, y: 22), controlPoint1: CGPoint(x: 24.97, y: 21.2), controlPoint2: CGPoint(x: 24.14, y: 21.99))
            icon.addCurve(to: CGPoint(x: 20.77, y: 22), controlPoint1: CGPoint(x: 22.29, y: 22), controlPoint2: CGPoint(x: 21.53, y: 22))
            icon.addCurve(to: CGPoint(x: 2.03, y: 22), controlPoint1: CGPoint(x: 14.53, y: 22), controlPoint2: CGPoint(x: 8.28, y: 22))
            icon.addCurve(to: CGPoint(x: 0.18, y: 20.86), controlPoint1: CGPoint(x: 1.18, y: 22), controlPoint2: CGPoint(x: 0.53, y: 21.64))
            icon.addCurve(to: CGPoint(x: 0.01, y: 20.04), controlPoint1: CGPoint(x: 0.07, y: 20.61), controlPoint2: CGPoint(x: 0.02, y: 20.32))
            icon.addCurve(to: CGPoint(x: 0, y: 16.22), controlPoint1: CGPoint(x: -0, y: 18.77), controlPoint2: CGPoint(x: 0.01, y: 17.5))
            icon.addCurve(to: CGPoint(x: 0.15, y: 16.02), controlPoint1: CGPoint(x: 0, y: 16.11), controlPoint2: CGPoint(x: 0.05, y: 16.06))
            icon.addCurve(to: CGPoint(x: 1.91, y: 13.25), controlPoint1: CGPoint(x: 1.29, y: 15.54), controlPoint2: CGPoint(x: 1.98, y: 14.48))
            icon.addCurve(to: CGPoint(x: 0.17, y: 10.77), controlPoint1: CGPoint(x: 1.85, y: 12.08), controlPoint2: CGPoint(x: 1.24, y: 11.25))
            icon.addCurve(to: CGPoint(x: 0, y: 10.51), controlPoint1: CGPoint(x: 0.05, y: 10.71), controlPoint2: CGPoint(x: 0, y: 10.65))
            icon.addCurve(to: CGPoint(x: 0, y: 6.79), controlPoint1: CGPoint(x: 0.01, y: 9.27), controlPoint2: CGPoint(x: 0.03, y: 8.03))
            icon.addCurve(to: CGPoint(x: 2.03, y: 4.78), controlPoint1: CGPoint(x: -0.02, y: 5.72), controlPoint2: CGPoint(x: 0.81, y: 4.77))
            icon.addCurve(to: CGPoint(x: 12.51, y: 4.78), controlPoint1: CGPoint(x: 5.52, y: 4.79), controlPoint2: CGPoint(x: 9.01, y: 4.78))
            icon.addLine(to: CGPoint(x: 12.51, y: 4.78))
            icon.close()
            icon.move(to: CGPoint(x: 2.75, y: 2.84))
            icon.addCurve(to: CGPoint(x: 4.06, y: 2.64), controlPoint1: CGPoint(x: 3.19, y: 2.77), controlPoint2: CGPoint(x: 3.63, y: 2.71))
            icon.addCurve(to: CGPoint(x: 8.43, y: 1.99), controlPoint1: CGPoint(x: 5.52, y: 2.42), controlPoint2: CGPoint(x: 6.98, y: 2.21))
            icon.addCurve(to: CGPoint(x: 13, y: 1.31), controlPoint1: CGPoint(x: 9.95, y: 1.76), controlPoint2: CGPoint(x: 11.48, y: 1.54))
            icon.addCurve(to: CGPoint(x: 17.78, y: 0.59), controlPoint1: CGPoint(x: 14.59, y: 1.07), controlPoint2: CGPoint(x: 16.18, y: 0.83))
            icon.addCurve(to: CGPoint(x: 21.59, y: 0.02), controlPoint1: CGPoint(x: 19.05, y: 0.4), controlPoint2: CGPoint(x: 20.31, y: 0.2))
            icon.addCurve(to: CGPoint(x: 23.85, y: 1.81), controlPoint1: CGPoint(x: 22.71, y: -0.14), controlPoint2: CGPoint(x: 23.7, y: 0.57))
            icon.addCurve(to: CGPoint(x: 24, y: 2.86), controlPoint1: CGPoint(x: 23.89, y: 2.16), controlPoint2: CGPoint(x: 23.95, y: 2.5))
            icon.addLine(to: CGPoint(x: 2.76, y: 2.86))
            icon.addCurve(to: CGPoint(x: 2.75, y: 2.84), controlPoint1: CGPoint(x: 2.76, y: 2.85), controlPoint2: CGPoint(x: 2.75, y: 2.85))
            icon.close()
            context.saveGState()
            context.translateBy(x: 0.5, y: 0)
            icon.usesEvenOddFillRule = true
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarHotel2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 2, y: 3)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 24.15, y: 19.62))
            icon.addLine(to: CGPoint(x: 1.85, y: 19.62))
            icon.addCurve(to: CGPoint(x: 1.86, y: 20.43), controlPoint1: CGPoint(x: 1.85, y: 19.9), controlPoint2: CGPoint(x: 1.85, y: 20.16))
            icon.addCurve(to: CGPoint(x: 1.66, y: 21.13), controlPoint1: CGPoint(x: 1.86, y: 20.69), controlPoint2: CGPoint(x: 1.82, y: 20.93))
            icon.addCurve(to: CGPoint(x: 0.65, y: 21.45), controlPoint1: CGPoint(x: 1.41, y: 21.44), controlPoint2: CGPoint(x: 1.02, y: 21.57))
            icon.addCurve(to: CGPoint(x: 0, y: 20.59), controlPoint1: CGPoint(x: 0.28, y: 21.33), controlPoint2: CGPoint(x: 0.01, y: 20.99))
            icon.addCurve(to: CGPoint(x: 0, y: 17.9), controlPoint1: CGPoint(x: -0, y: 19.7), controlPoint2: CGPoint(x: 0, y: 18.8))
            icon.addCurve(to: CGPoint(x: 0, y: 10.35), controlPoint1: CGPoint(x: 0, y: 15.38), controlPoint2: CGPoint(x: 0, y: 12.86))
            icon.addCurve(to: CGPoint(x: 0.67, y: 9.37), controlPoint1: CGPoint(x: 0, y: 9.84), controlPoint2: CGPoint(x: 0.24, y: 9.5))
            icon.addCurve(to: CGPoint(x: 1.85, y: 10.17), controlPoint1: CGPoint(x: 1.22, y: 9.2), controlPoint2: CGPoint(x: 1.79, y: 9.58))
            icon.addCurve(to: CGPoint(x: 1.86, y: 10.27), controlPoint1: CGPoint(x: 1.85, y: 10.2), controlPoint2: CGPoint(x: 1.86, y: 10.23))
            icon.addLine(to: CGPoint(x: 24.13, y: 10.27))
            icon.addCurve(to: CGPoint(x: 24.17, y: 10.05), controlPoint1: CGPoint(x: 24.15, y: 10.19), controlPoint2: CGPoint(x: 24.15, y: 10.12))
            icon.addCurve(to: CGPoint(x: 25.2, y: 9.34), controlPoint1: CGPoint(x: 24.29, y: 9.58), controlPoint2: CGPoint(x: 24.71, y: 9.29))
            icon.addCurve(to: CGPoint(x: 26, y: 10.24), controlPoint1: CGPoint(x: 25.63, y: 9.38), controlPoint2: CGPoint(x: 25.99, y: 9.78))
            icon.addCurve(to: CGPoint(x: 26, y: 12.77), controlPoint1: CGPoint(x: 26, y: 11.08), controlPoint2: CGPoint(x: 26, y: 11.93))
            icon.addCurve(to: CGPoint(x: 26, y: 20.5), controlPoint1: CGPoint(x: 26, y: 15.35), controlPoint2: CGPoint(x: 26, y: 17.93))
            icon.addCurve(to: CGPoint(x: 25.23, y: 21.48), controlPoint1: CGPoint(x: 26, y: 21.02), controlPoint2: CGPoint(x: 25.7, y: 21.39))
            icon.addCurve(to: CGPoint(x: 24.16, y: 20.67), controlPoint1: CGPoint(x: 24.73, y: 21.59), controlPoint2: CGPoint(x: 24.19, y: 21.19))
            icon.addCurve(to: CGPoint(x: 24.15, y: 19.81), controlPoint1: CGPoint(x: 24.14, y: 20.38), controlPoint2: CGPoint(x: 24.15, y: 20.1))
            icon.addCurve(to: CGPoint(x: 24.15, y: 19.62), controlPoint1: CGPoint(x: 24.15, y: 19.75), controlPoint2: CGPoint(x: 24.15, y: 19.69))
            icon.close()
            icon.move(to: CGPoint(x: 24.14, y: 8.4))
            icon.addLine(to: CGPoint(x: 22.29, y: 8.4))
            icon.addCurve(to: CGPoint(x: 22.29, y: 6.77), controlPoint1: CGPoint(x: 22.29, y: 7.85), controlPoint2: CGPoint(x: 22.29, y: 7.31))
            icon.addCurve(to: CGPoint(x: 22.28, y: 6.45), controlPoint1: CGPoint(x: 22.29, y: 6.67), controlPoint2: CGPoint(x: 22.29, y: 6.56))
            icon.addCurve(to: CGPoint(x: 21.3, y: 5.61), controlPoint1: CGPoint(x: 22.22, y: 5.94), controlPoint2: CGPoint(x: 21.83, y: 5.61))
            icon.addCurve(to: CGPoint(x: 16.52, y: 5.61), controlPoint1: CGPoint(x: 19.71, y: 5.61), controlPoint2: CGPoint(x: 18.11, y: 5.61))
            icon.addCurve(to: CGPoint(x: 14.94, y: 5.6), controlPoint1: CGPoint(x: 15.99, y: 5.61), controlPoint2: CGPoint(x: 15.46, y: 5.62))
            icon.addCurve(to: CGPoint(x: 13.93, y: 6.61), controlPoint1: CGPoint(x: 14.34, y: 5.58), controlPoint2: CGPoint(x: 13.9, y: 6.06))
            icon.addCurve(to: CGPoint(x: 13.93, y: 8.4), controlPoint1: CGPoint(x: 13.95, y: 7.2), controlPoint2: CGPoint(x: 13.93, y: 7.79))
            icon.addLine(to: CGPoint(x: 12.07, y: 8.4))
            icon.addLine(to: CGPoint(x: 12.07, y: 8.22))
            icon.addCurve(to: CGPoint(x: 12.07, y: 6.6), controlPoint1: CGPoint(x: 12.07, y: 7.68), controlPoint2: CGPoint(x: 12.07, y: 7.14))
            icon.addCurve(to: CGPoint(x: 11.08, y: 5.61), controlPoint1: CGPoint(x: 12.06, y: 5.99), controlPoint2: CGPoint(x: 11.68, y: 5.61))
            icon.addCurve(to: CGPoint(x: 4.71, y: 5.61), controlPoint1: CGPoint(x: 8.95, y: 5.61), controlPoint2: CGPoint(x: 6.83, y: 5.61))
            icon.addCurve(to: CGPoint(x: 3.71, y: 6.61), controlPoint1: CGPoint(x: 4.1, y: 5.61), controlPoint2: CGPoint(x: 3.71, y: 6))
            icon.addCurve(to: CGPoint(x: 3.71, y: 8.22), controlPoint1: CGPoint(x: 3.71, y: 7.15), controlPoint2: CGPoint(x: 3.71, y: 7.68))
            icon.addLine(to: CGPoint(x: 3.71, y: 8.4))
            icon.addLine(to: CGPoint(x: 1.86, y: 8.4))
            icon.addCurve(to: CGPoint(x: 1.85, y: 8.23), controlPoint1: CGPoint(x: 1.86, y: 8.34), controlPoint2: CGPoint(x: 1.85, y: 8.29))
            icon.addCurve(to: CGPoint(x: 1.85, y: 1.94), controlPoint1: CGPoint(x: 1.85, y: 6.14), controlPoint2: CGPoint(x: 1.85, y: 4.04))
            icon.addCurve(to: CGPoint(x: 3.09, y: 0.12), controlPoint1: CGPoint(x: 1.86, y: 1.08), controlPoint2: CGPoint(x: 2.32, y: 0.39))
            icon.addCurve(to: CGPoint(x: 3.77, y: 0), controlPoint1: CGPoint(x: 3.3, y: 0.04), controlPoint2: CGPoint(x: 3.54, y: 0))
            icon.addCurve(to: CGPoint(x: 15.36, y: 0), controlPoint1: CGPoint(x: 7.63, y: -0), controlPoint2: CGPoint(x: 11.5, y: 0))
            icon.addCurve(to: CGPoint(x: 22.23, y: 0), controlPoint1: CGPoint(x: 17.65, y: 0), controlPoint2: CGPoint(x: 19.94, y: -0))
            icon.addCurve(to: CGPoint(x: 24.11, y: 1.54), controlPoint1: CGPoint(x: 23.19, y: 0), controlPoint2: CGPoint(x: 23.94, y: 0.62))
            icon.addCurve(to: CGPoint(x: 24.14, y: 1.98), controlPoint1: CGPoint(x: 24.13, y: 1.68), controlPoint2: CGPoint(x: 24.14, y: 1.83))
            icon.addCurve(to: CGPoint(x: 24.15, y: 8.23), controlPoint1: CGPoint(x: 24.15, y: 4.06), controlPoint2: CGPoint(x: 24.15, y: 6.15))
            icon.addCurve(to: CGPoint(x: 24.14, y: 8.4), controlPoint1: CGPoint(x: 24.15, y: 8.29), controlPoint2: CGPoint(x: 24.14, y: 8.34))
            icon.close()
            context.saveGState()
            icon.usesEvenOddFillRule = true
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarFlame2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 6, y: 2)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 7.2, y: 0))
            icon.addCurve(to: CGPoint(x: 6.3, y: 0.92), controlPoint1: CGPoint(x: 6.7, y: 0), controlPoint2: CGPoint(x: 6.3, y: 0.41))
            icon.addCurve(to: CGPoint(x: 0, y: 15.69), controlPoint1: CGPoint(x: 6.3, y: 5.59), controlPoint2: CGPoint(x: 0, y: 9.23))
            icon.addCurve(to: CGPoint(x: 7.01, y: 23.98), controlPoint1: CGPoint(x: 0, y: 20.6), controlPoint2: CGPoint(x: 5.19, y: 23.78))
            icon.addCurve(to: CGPoint(x: 7.2, y: 24), controlPoint1: CGPoint(x: 7.07, y: 23.99), controlPoint2: CGPoint(x: 7.14, y: 24))
            icon.addCurve(to: CGPoint(x: 8.1, y: 23.08), controlPoint1: CGPoint(x: 7.7, y: 24), controlPoint2: CGPoint(x: 8.1, y: 23.59))
            icon.addCurve(to: CGPoint(x: 7.77, y: 22.36), controlPoint1: CGPoint(x: 8.1, y: 22.8), controlPoint2: CGPoint(x: 7.98, y: 22.54))
            icon.addCurve(to: CGPoint(x: 7.77, y: 22.36), controlPoint1: CGPoint(x: 7.77, y: 22.36), controlPoint2: CGPoint(x: 7.77, y: 22.36))
            icon.addCurve(to: CGPoint(x: 5.4, y: 17.9), controlPoint1: CGPoint(x: 6.95, y: 21.68), controlPoint2: CGPoint(x: 5.4, y: 19.7))
            icon.addCurve(to: CGPoint(x: 8.1, y: 13.85), controlPoint1: CGPoint(x: 5.4, y: 14.94), controlPoint2: CGPoint(x: 8.1, y: 13.85))
            icon.addCurve(to: CGPoint(x: 12.62, y: 23.28), controlPoint1: CGPoint(x: 6.56, y: 18.31), controlPoint2: CGPoint(x: 11.6, y: 18.85))
            icon.addLine(to: CGPoint(x: 12.62, y: 23.28))
            icon.addCurve(to: CGPoint(x: 13.5, y: 24), controlPoint1: CGPoint(x: 12.71, y: 23.7), controlPoint2: CGPoint(x: 13.08, y: 24))
            icon.addCurve(to: CGPoint(x: 14.03, y: 23.82), controlPoint1: CGPoint(x: 13.69, y: 24), controlPoint2: CGPoint(x: 13.87, y: 23.94))
            icon.addCurve(to: CGPoint(x: 14.07, y: 23.78), controlPoint1: CGPoint(x: 14.04, y: 23.81), controlPoint2: CGPoint(x: 14.06, y: 23.8))
            icon.addCurve(to: CGPoint(x: 18, y: 15.69), controlPoint1: CGPoint(x: 14.22, y: 23.69), controlPoint2: CGPoint(x: 18, y: 21.13))
            icon.addCurve(to: CGPoint(x: 16.14, y: 7.98), controlPoint1: CGPoint(x: 18, y: 13.48), controlPoint2: CGPoint(x: 16.92, y: 9.67))
            icon.addCurve(to: CGPoint(x: 16.14, y: 7.97), controlPoint1: CGPoint(x: 16.14, y: 7.98), controlPoint2: CGPoint(x: 16.14, y: 7.97))
            icon.addCurve(to: CGPoint(x: 16.14, y: 7.97), controlPoint1: CGPoint(x: 16.14, y: 7.97), controlPoint2: CGPoint(x: 16.14, y: 7.97))
            icon.addCurve(to: CGPoint(x: 15.3, y: 7.39), controlPoint1: CGPoint(x: 16, y: 7.62), controlPoint2: CGPoint(x: 15.67, y: 7.39))
            icon.addCurve(to: CGPoint(x: 14.41, y: 8.14), controlPoint1: CGPoint(x: 14.87, y: 7.39), controlPoint2: CGPoint(x: 14.49, y: 7.7))
            icon.addCurve(to: CGPoint(x: 14.41, y: 8.14), controlPoint1: CGPoint(x: 14.41, y: 8.14), controlPoint2: CGPoint(x: 14.41, y: 8.14))
            icon.addCurve(to: CGPoint(x: 12.6, y: 11.08), controlPoint1: CGPoint(x: 14.41, y: 8.15), controlPoint2: CGPoint(x: 14, y: 10.04))
            icon.addCurve(to: CGPoint(x: 7.92, y: 0.38), controlPoint1: CGPoint(x: 12.6, y: 6.73), controlPoint2: CGPoint(x: 9.54, y: 2.24))
            icon.addCurve(to: CGPoint(x: 7.85, y: 0.28), controlPoint1: CGPoint(x: 7.9, y: 0.34), controlPoint2: CGPoint(x: 7.87, y: 0.31))
            icon.addCurve(to: CGPoint(x: 7.2, y: 0), controlPoint1: CGPoint(x: 7.68, y: 0.1), controlPoint2: CGPoint(x: 7.44, y: 0))
            context.saveGState()
            icon.usesEvenOddFillRule = true
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarFlame(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 7.2, y: 0))
        icon.addCurve(to: CGPoint(x: 6.3, y: 0.92), controlPoint1: CGPoint(x: 6.7, y: 0), controlPoint2: CGPoint(x: 6.3, y: 0.41))
        icon.addCurve(to: CGPoint(x: 0, y: 15.69), controlPoint1: CGPoint(x: 6.3, y: 5.59), controlPoint2: CGPoint(x: 0, y: 9.23))
        icon.addCurve(to: CGPoint(x: 7.01, y: 23.98), controlPoint1: CGPoint(x: 0, y: 20.6), controlPoint2: CGPoint(x: 5.19, y: 23.78))
        icon.addCurve(to: CGPoint(x: 7.2, y: 24), controlPoint1: CGPoint(x: 7.07, y: 23.99), controlPoint2: CGPoint(x: 7.14, y: 24))
        icon.addCurve(to: CGPoint(x: 8.1, y: 23.08), controlPoint1: CGPoint(x: 7.7, y: 24), controlPoint2: CGPoint(x: 8.1, y: 23.59))
        icon.addCurve(to: CGPoint(x: 7.77, y: 22.36), controlPoint1: CGPoint(x: 8.1, y: 22.8), controlPoint2: CGPoint(x: 7.98, y: 22.54))
        icon.addCurve(to: CGPoint(x: 7.77, y: 22.36), controlPoint1: CGPoint(x: 7.77, y: 22.36), controlPoint2: CGPoint(x: 7.77, y: 22.36))
        icon.addCurve(to: CGPoint(x: 5.4, y: 17.9), controlPoint1: CGPoint(x: 6.95, y: 21.68), controlPoint2: CGPoint(x: 5.4, y: 19.7))
        icon.addCurve(to: CGPoint(x: 8.1, y: 13.85), controlPoint1: CGPoint(x: 5.4, y: 14.94), controlPoint2: CGPoint(x: 8.1, y: 13.85))
        icon.addCurve(to: CGPoint(x: 12.62, y: 23.28), controlPoint1: CGPoint(x: 6.56, y: 18.31), controlPoint2: CGPoint(x: 11.6, y: 18.85))
        icon.addLine(to: CGPoint(x: 12.62, y: 23.28))
        icon.addCurve(to: CGPoint(x: 13.5, y: 24), controlPoint1: CGPoint(x: 12.71, y: 23.7), controlPoint2: CGPoint(x: 13.08, y: 24))
        icon.addCurve(to: CGPoint(x: 14.03, y: 23.82), controlPoint1: CGPoint(x: 13.69, y: 24), controlPoint2: CGPoint(x: 13.87, y: 23.94))
        icon.addCurve(to: CGPoint(x: 14.07, y: 23.78), controlPoint1: CGPoint(x: 14.04, y: 23.81), controlPoint2: CGPoint(x: 14.06, y: 23.8))
        icon.addCurve(to: CGPoint(x: 18, y: 15.69), controlPoint1: CGPoint(x: 14.22, y: 23.69), controlPoint2: CGPoint(x: 18, y: 21.13))
        icon.addCurve(to: CGPoint(x: 16.14, y: 7.98), controlPoint1: CGPoint(x: 18, y: 13.48), controlPoint2: CGPoint(x: 16.92, y: 9.67))
        icon.addCurve(to: CGPoint(x: 16.14, y: 7.97), controlPoint1: CGPoint(x: 16.14, y: 7.98), controlPoint2: CGPoint(x: 16.14, y: 7.97))
        icon.addCurve(to: CGPoint(x: 16.14, y: 7.97), controlPoint1: CGPoint(x: 16.14, y: 7.97), controlPoint2: CGPoint(x: 16.14, y: 7.97))
        icon.addCurve(to: CGPoint(x: 15.3, y: 7.39), controlPoint1: CGPoint(x: 16, y: 7.62), controlPoint2: CGPoint(x: 15.67, y: 7.39))
        icon.addCurve(to: CGPoint(x: 14.41, y: 8.14), controlPoint1: CGPoint(x: 14.87, y: 7.39), controlPoint2: CGPoint(x: 14.49, y: 7.7))
        icon.addCurve(to: CGPoint(x: 14.41, y: 8.14), controlPoint1: CGPoint(x: 14.41, y: 8.14), controlPoint2: CGPoint(x: 14.41, y: 8.14))
        icon.addCurve(to: CGPoint(x: 12.6, y: 11.08), controlPoint1: CGPoint(x: 14.41, y: 8.15), controlPoint2: CGPoint(x: 14, y: 10.04))
        icon.addCurve(to: CGPoint(x: 7.92, y: 0.38), controlPoint1: CGPoint(x: 12.6, y: 6.73), controlPoint2: CGPoint(x: 9.54, y: 2.24))
        icon.addCurve(to: CGPoint(x: 7.85, y: 0.28), controlPoint1: CGPoint(x: 7.9, y: 0.34), controlPoint2: CGPoint(x: 7.87, y: 0.31))
        icon.addCurve(to: CGPoint(x: 7.2, y: 0), controlPoint1: CGPoint(x: 7.68, y: 0.1), controlPoint2: CGPoint(x: 7.44, y: 0))
        context.saveGState()
        context.translateBy(x: 5, y: 2)
        icon.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarHotel(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 24.15, y: 19.62))
        icon.addLine(to: CGPoint(x: 1.85, y: 19.62))
        icon.addCurve(to: CGPoint(x: 1.86, y: 20.43), controlPoint1: CGPoint(x: 1.85, y: 19.9), controlPoint2: CGPoint(x: 1.85, y: 20.16))
        icon.addCurve(to: CGPoint(x: 1.66, y: 21.13), controlPoint1: CGPoint(x: 1.86, y: 20.69), controlPoint2: CGPoint(x: 1.82, y: 20.93))
        icon.addCurve(to: CGPoint(x: 0.65, y: 21.45), controlPoint1: CGPoint(x: 1.41, y: 21.44), controlPoint2: CGPoint(x: 1.02, y: 21.57))
        icon.addCurve(to: CGPoint(x: 0, y: 20.59), controlPoint1: CGPoint(x: 0.28, y: 21.33), controlPoint2: CGPoint(x: 0.01, y: 20.99))
        icon.addCurve(to: CGPoint(x: 0, y: 17.9), controlPoint1: CGPoint(x: -0, y: 19.7), controlPoint2: CGPoint(x: 0, y: 18.8))
        icon.addCurve(to: CGPoint(x: 0, y: 10.35), controlPoint1: CGPoint(x: 0, y: 15.38), controlPoint2: CGPoint(x: 0, y: 12.86))
        icon.addCurve(to: CGPoint(x: 0.67, y: 9.37), controlPoint1: CGPoint(x: 0, y: 9.84), controlPoint2: CGPoint(x: 0.24, y: 9.5))
        icon.addCurve(to: CGPoint(x: 1.85, y: 10.17), controlPoint1: CGPoint(x: 1.22, y: 9.2), controlPoint2: CGPoint(x: 1.79, y: 9.58))
        icon.addCurve(to: CGPoint(x: 1.86, y: 10.27), controlPoint1: CGPoint(x: 1.85, y: 10.2), controlPoint2: CGPoint(x: 1.86, y: 10.23))
        icon.addLine(to: CGPoint(x: 24.13, y: 10.27))
        icon.addCurve(to: CGPoint(x: 24.17, y: 10.05), controlPoint1: CGPoint(x: 24.15, y: 10.19), controlPoint2: CGPoint(x: 24.15, y: 10.12))
        icon.addCurve(to: CGPoint(x: 25.2, y: 9.34), controlPoint1: CGPoint(x: 24.29, y: 9.58), controlPoint2: CGPoint(x: 24.71, y: 9.29))
        icon.addCurve(to: CGPoint(x: 26, y: 10.24), controlPoint1: CGPoint(x: 25.63, y: 9.38), controlPoint2: CGPoint(x: 25.99, y: 9.78))
        icon.addCurve(to: CGPoint(x: 26, y: 12.77), controlPoint1: CGPoint(x: 26, y: 11.08), controlPoint2: CGPoint(x: 26, y: 11.93))
        icon.addCurve(to: CGPoint(x: 26, y: 20.5), controlPoint1: CGPoint(x: 26, y: 15.35), controlPoint2: CGPoint(x: 26, y: 17.93))
        icon.addCurve(to: CGPoint(x: 25.23, y: 21.48), controlPoint1: CGPoint(x: 26, y: 21.02), controlPoint2: CGPoint(x: 25.7, y: 21.39))
        icon.addCurve(to: CGPoint(x: 24.16, y: 20.67), controlPoint1: CGPoint(x: 24.73, y: 21.59), controlPoint2: CGPoint(x: 24.19, y: 21.19))
        icon.addCurve(to: CGPoint(x: 24.15, y: 19.81), controlPoint1: CGPoint(x: 24.14, y: 20.38), controlPoint2: CGPoint(x: 24.15, y: 20.1))
        icon.addCurve(to: CGPoint(x: 24.15, y: 19.62), controlPoint1: CGPoint(x: 24.15, y: 19.75), controlPoint2: CGPoint(x: 24.15, y: 19.69))
        icon.close()
        icon.move(to: CGPoint(x: 24.14, y: 8.4))
        icon.addLine(to: CGPoint(x: 22.29, y: 8.4))
        icon.addCurve(to: CGPoint(x: 22.29, y: 6.77), controlPoint1: CGPoint(x: 22.29, y: 7.85), controlPoint2: CGPoint(x: 22.29, y: 7.31))
        icon.addCurve(to: CGPoint(x: 22.28, y: 6.45), controlPoint1: CGPoint(x: 22.29, y: 6.67), controlPoint2: CGPoint(x: 22.29, y: 6.56))
        icon.addCurve(to: CGPoint(x: 21.3, y: 5.61), controlPoint1: CGPoint(x: 22.22, y: 5.94), controlPoint2: CGPoint(x: 21.83, y: 5.61))
        icon.addCurve(to: CGPoint(x: 16.52, y: 5.61), controlPoint1: CGPoint(x: 19.71, y: 5.61), controlPoint2: CGPoint(x: 18.11, y: 5.61))
        icon.addCurve(to: CGPoint(x: 14.94, y: 5.6), controlPoint1: CGPoint(x: 15.99, y: 5.61), controlPoint2: CGPoint(x: 15.46, y: 5.62))
        icon.addCurve(to: CGPoint(x: 13.93, y: 6.61), controlPoint1: CGPoint(x: 14.34, y: 5.58), controlPoint2: CGPoint(x: 13.9, y: 6.06))
        icon.addCurve(to: CGPoint(x: 13.93, y: 8.4), controlPoint1: CGPoint(x: 13.95, y: 7.2), controlPoint2: CGPoint(x: 13.93, y: 7.79))
        icon.addLine(to: CGPoint(x: 12.07, y: 8.4))
        icon.addLine(to: CGPoint(x: 12.07, y: 8.22))
        icon.addCurve(to: CGPoint(x: 12.07, y: 6.6), controlPoint1: CGPoint(x: 12.07, y: 7.68), controlPoint2: CGPoint(x: 12.07, y: 7.14))
        icon.addCurve(to: CGPoint(x: 11.08, y: 5.61), controlPoint1: CGPoint(x: 12.06, y: 5.99), controlPoint2: CGPoint(x: 11.68, y: 5.61))
        icon.addCurve(to: CGPoint(x: 4.71, y: 5.61), controlPoint1: CGPoint(x: 8.95, y: 5.61), controlPoint2: CGPoint(x: 6.83, y: 5.61))
        icon.addCurve(to: CGPoint(x: 3.71, y: 6.61), controlPoint1: CGPoint(x: 4.1, y: 5.61), controlPoint2: CGPoint(x: 3.71, y: 6))
        icon.addCurve(to: CGPoint(x: 3.71, y: 8.22), controlPoint1: CGPoint(x: 3.71, y: 7.15), controlPoint2: CGPoint(x: 3.71, y: 7.68))
        icon.addLine(to: CGPoint(x: 3.71, y: 8.4))
        icon.addLine(to: CGPoint(x: 1.86, y: 8.4))
        icon.addCurve(to: CGPoint(x: 1.85, y: 8.23), controlPoint1: CGPoint(x: 1.86, y: 8.34), controlPoint2: CGPoint(x: 1.85, y: 8.29))
        icon.addCurve(to: CGPoint(x: 1.85, y: 1.94), controlPoint1: CGPoint(x: 1.85, y: 6.14), controlPoint2: CGPoint(x: 1.85, y: 4.04))
        icon.addCurve(to: CGPoint(x: 3.09, y: 0.12), controlPoint1: CGPoint(x: 1.86, y: 1.08), controlPoint2: CGPoint(x: 2.32, y: 0.39))
        icon.addCurve(to: CGPoint(x: 3.77, y: 0), controlPoint1: CGPoint(x: 3.3, y: 0.04), controlPoint2: CGPoint(x: 3.54, y: 0))
        icon.addCurve(to: CGPoint(x: 15.36, y: 0), controlPoint1: CGPoint(x: 7.63, y: -0), controlPoint2: CGPoint(x: 11.5, y: 0))
        icon.addCurve(to: CGPoint(x: 22.23, y: 0), controlPoint1: CGPoint(x: 17.65, y: 0), controlPoint2: CGPoint(x: 19.94, y: -0))
        icon.addCurve(to: CGPoint(x: 24.11, y: 1.54), controlPoint1: CGPoint(x: 23.19, y: 0), controlPoint2: CGPoint(x: 23.94, y: 0.62))
        icon.addCurve(to: CGPoint(x: 24.14, y: 1.98), controlPoint1: CGPoint(x: 24.13, y: 1.68), controlPoint2: CGPoint(x: 24.14, y: 1.83))
        icon.addCurve(to: CGPoint(x: 24.15, y: 8.23), controlPoint1: CGPoint(x: 24.15, y: 4.06), controlPoint2: CGPoint(x: 24.15, y: 6.15))
        icon.addCurve(to: CGPoint(x: 24.14, y: 8.4), controlPoint1: CGPoint(x: 24.15, y: 8.29), controlPoint2: CGPoint(x: 24.14, y: 8.34))
        icon.close()
        context.saveGState()
        context.translateBy(x: 1, y: 3)
        icon.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarTickets(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 12.51, y: 4.78))
        icon.addCurve(to: CGPoint(x: 22.95, y: 4.78), controlPoint1: CGPoint(x: 15.99, y: 4.78), controlPoint2: CGPoint(x: 19.47, y: 4.78))
        icon.addCurve(to: CGPoint(x: 24.74, y: 5.74), controlPoint1: CGPoint(x: 23.73, y: 4.78), controlPoint2: CGPoint(x: 24.33, y: 5.07))
        icon.addCurve(to: CGPoint(x: 25, y: 6.76), controlPoint1: CGPoint(x: 24.92, y: 6.05), controlPoint2: CGPoint(x: 25, y: 6.4))
        icon.addCurve(to: CGPoint(x: 25, y: 10.56), controlPoint1: CGPoint(x: 25, y: 8.02), controlPoint2: CGPoint(x: 24.99, y: 9.29))
        icon.addCurve(to: CGPoint(x: 24.86, y: 10.75), controlPoint1: CGPoint(x: 25, y: 10.67), controlPoint2: CGPoint(x: 24.96, y: 10.71))
        icon.addCurve(to: CGPoint(x: 23.08, y: 13.36), controlPoint1: CGPoint(x: 23.77, y: 11.2), controlPoint2: CGPoint(x: 23.08, y: 12.22))
        icon.addCurve(to: CGPoint(x: 24.88, y: 16.03), controlPoint1: CGPoint(x: 23.08, y: 14.55), controlPoint2: CGPoint(x: 23.75, y: 15.56))
        icon.addCurve(to: CGPoint(x: 25, y: 16.2), controlPoint1: CGPoint(x: 24.96, y: 16.07), controlPoint2: CGPoint(x: 25, y: 16.1))
        icon.addCurve(to: CGPoint(x: 24.99, y: 20.1), controlPoint1: CGPoint(x: 24.99, y: 17.5), controlPoint2: CGPoint(x: 25.01, y: 18.8))
        icon.addCurve(to: CGPoint(x: 23.04, y: 22), controlPoint1: CGPoint(x: 24.97, y: 21.2), controlPoint2: CGPoint(x: 24.14, y: 21.99))
        icon.addCurve(to: CGPoint(x: 20.77, y: 22), controlPoint1: CGPoint(x: 22.29, y: 22), controlPoint2: CGPoint(x: 21.53, y: 22))
        icon.addCurve(to: CGPoint(x: 2.03, y: 22), controlPoint1: CGPoint(x: 14.53, y: 22), controlPoint2: CGPoint(x: 8.28, y: 22))
        icon.addCurve(to: CGPoint(x: 0.18, y: 20.86), controlPoint1: CGPoint(x: 1.18, y: 22), controlPoint2: CGPoint(x: 0.53, y: 21.64))
        icon.addCurve(to: CGPoint(x: 0.01, y: 20.04), controlPoint1: CGPoint(x: 0.07, y: 20.61), controlPoint2: CGPoint(x: 0.02, y: 20.32))
        icon.addCurve(to: CGPoint(x: 0, y: 16.22), controlPoint1: CGPoint(x: -0, y: 18.77), controlPoint2: CGPoint(x: 0.01, y: 17.5))
        icon.addCurve(to: CGPoint(x: 0.15, y: 16.02), controlPoint1: CGPoint(x: 0, y: 16.11), controlPoint2: CGPoint(x: 0.05, y: 16.06))
        icon.addCurve(to: CGPoint(x: 1.91, y: 13.25), controlPoint1: CGPoint(x: 1.29, y: 15.54), controlPoint2: CGPoint(x: 1.98, y: 14.48))
        icon.addCurve(to: CGPoint(x: 0.17, y: 10.77), controlPoint1: CGPoint(x: 1.85, y: 12.08), controlPoint2: CGPoint(x: 1.24, y: 11.25))
        icon.addCurve(to: CGPoint(x: 0, y: 10.51), controlPoint1: CGPoint(x: 0.05, y: 10.71), controlPoint2: CGPoint(x: 0, y: 10.65))
        icon.addCurve(to: CGPoint(x: 0, y: 6.79), controlPoint1: CGPoint(x: 0.01, y: 9.27), controlPoint2: CGPoint(x: 0.03, y: 8.03))
        icon.addCurve(to: CGPoint(x: 2.03, y: 4.78), controlPoint1: CGPoint(x: -0.02, y: 5.72), controlPoint2: CGPoint(x: 0.81, y: 4.77))
        icon.addCurve(to: CGPoint(x: 12.51, y: 4.78), controlPoint1: CGPoint(x: 5.52, y: 4.79), controlPoint2: CGPoint(x: 9.01, y: 4.78))
        icon.addLine(to: CGPoint(x: 12.51, y: 4.78))
        icon.close()
        icon.move(to: CGPoint(x: 2.75, y: 2.84))
        icon.addCurve(to: CGPoint(x: 4.06, y: 2.64), controlPoint1: CGPoint(x: 3.19, y: 2.77), controlPoint2: CGPoint(x: 3.63, y: 2.71))
        icon.addCurve(to: CGPoint(x: 8.43, y: 1.99), controlPoint1: CGPoint(x: 5.52, y: 2.42), controlPoint2: CGPoint(x: 6.98, y: 2.21))
        icon.addCurve(to: CGPoint(x: 13, y: 1.31), controlPoint1: CGPoint(x: 9.95, y: 1.76), controlPoint2: CGPoint(x: 11.48, y: 1.54))
        icon.addCurve(to: CGPoint(x: 17.78, y: 0.59), controlPoint1: CGPoint(x: 14.59, y: 1.07), controlPoint2: CGPoint(x: 16.18, y: 0.83))
        icon.addCurve(to: CGPoint(x: 21.59, y: 0.02), controlPoint1: CGPoint(x: 19.05, y: 0.4), controlPoint2: CGPoint(x: 20.31, y: 0.2))
        icon.addCurve(to: CGPoint(x: 23.85, y: 1.81), controlPoint1: CGPoint(x: 22.71, y: -0.14), controlPoint2: CGPoint(x: 23.7, y: 0.57))
        icon.addCurve(to: CGPoint(x: 24, y: 2.86), controlPoint1: CGPoint(x: 23.89, y: 2.16), controlPoint2: CGPoint(x: 23.95, y: 2.5))
        icon.addLine(to: CGPoint(x: 2.76, y: 2.86))
        icon.addCurve(to: CGPoint(x: 2.75, y: 2.84), controlPoint1: CGPoint(x: 2.76, y: 2.85), controlPoint2: CGPoint(x: 2.75, y: 2.85))
        icon.close()
        context.saveGState()
        context.translateBy(x: 1.5, y: 3)
        icon.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarAddFriend2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 22.43, y: 10.84))
        icon.addLine(to: CGPoint(x: 25.29, y: 10.84))
        icon.addCurve(to: CGPoint(x: 26.04, y: 11.59), controlPoint1: CGPoint(x: 25.71, y: 10.84), controlPoint2: CGPoint(x: 26.04, y: 11.17))
        icon.addLine(to: CGPoint(x: 26.04, y: 12.04))
        icon.addCurve(to: CGPoint(x: 25.29, y: 12.79), controlPoint1: CGPoint(x: 26.04, y: 12.45), controlPoint2: CGPoint(x: 25.71, y: 12.79))
        icon.addLine(to: CGPoint(x: 22.43, y: 12.79))
        icon.addLine(to: CGPoint(x: 22.43, y: 15.66))
        icon.addCurve(to: CGPoint(x: 21.68, y: 16.41), controlPoint1: CGPoint(x: 22.43, y: 16.07), controlPoint2: CGPoint(x: 22.09, y: 16.41))
        icon.addLine(to: CGPoint(x: 21.23, y: 16.41))
        icon.addCurve(to: CGPoint(x: 20.48, y: 15.66), controlPoint1: CGPoint(x: 20.81, y: 16.41), controlPoint2: CGPoint(x: 20.48, y: 16.07))
        icon.addLine(to: CGPoint(x: 20.48, y: 12.79))
        icon.addLine(to: CGPoint(x: 17.61, y: 12.79))
        icon.addCurve(to: CGPoint(x: 16.86, y: 12.04), controlPoint1: CGPoint(x: 17.19, y: 12.79), controlPoint2: CGPoint(x: 16.86, y: 12.45))
        icon.addLine(to: CGPoint(x: 16.86, y: 11.59))
        icon.addCurve(to: CGPoint(x: 17.61, y: 10.84), controlPoint1: CGPoint(x: 16.86, y: 11.17), controlPoint2: CGPoint(x: 17.19, y: 10.84))
        icon.addLine(to: CGPoint(x: 20.48, y: 10.84))
        icon.addLine(to: CGPoint(x: 20.48, y: 7.97))
        icon.addCurve(to: CGPoint(x: 21.23, y: 7.22), controlPoint1: CGPoint(x: 20.48, y: 7.55), controlPoint2: CGPoint(x: 20.81, y: 7.22))
        icon.addLine(to: CGPoint(x: 21.68, y: 7.22))
        icon.addCurve(to: CGPoint(x: 22.43, y: 7.97), controlPoint1: CGPoint(x: 22.09, y: 7.22), controlPoint2: CGPoint(x: 22.43, y: 7.55))
        icon.addLine(to: CGPoint(x: 22.43, y: 10.84))
        icon.close()
        icon.move(to: CGPoint(x: 7.38, y: 0.65))
        icon.addCurve(to: CGPoint(x: 10.12, y: 0), controlPoint1: CGPoint(x: 8.26, y: 0.2), controlPoint2: CGPoint(x: 9.18, y: 0))
        icon.addCurve(to: CGPoint(x: 11.52, y: 0.14), controlPoint1: CGPoint(x: 10.58, y: 0), controlPoint2: CGPoint(x: 11.05, y: 0.05))
        icon.addCurve(to: CGPoint(x: 12.78, y: 0.85), controlPoint1: CGPoint(x: 12.01, y: 0.24), controlPoint2: CGPoint(x: 12.46, y: 0.44))
        icon.addCurve(to: CGPoint(x: 13.13, y: 1.06), controlPoint1: CGPoint(x: 12.87, y: 0.97), controlPoint2: CGPoint(x: 12.97, y: 1.03))
        icon.addCurve(to: CGPoint(x: 15.22, y: 2.82), controlPoint1: CGPoint(x: 14.14, y: 1.26), controlPoint2: CGPoint(x: 14.85, y: 1.84))
        icon.addCurve(to: CGPoint(x: 15.54, y: 4.57), controlPoint1: CGPoint(x: 15.44, y: 3.38), controlPoint2: CGPoint(x: 15.52, y: 3.97))
        icon.addCurve(to: CGPoint(x: 14.99, y: 8.09), controlPoint1: CGPoint(x: 15.56, y: 5.77), controlPoint2: CGPoint(x: 15.34, y: 6.94))
        icon.addCurve(to: CGPoint(x: 15.04, y: 8.31), controlPoint1: CGPoint(x: 14.96, y: 8.18), controlPoint2: CGPoint(x: 14.96, y: 8.24))
        icon.addCurve(to: CGPoint(x: 15.36, y: 8.85), controlPoint1: CGPoint(x: 15.22, y: 8.44), controlPoint2: CGPoint(x: 15.33, y: 8.63))
        icon.addCurve(to: CGPoint(x: 14.96, y: 10.69), controlPoint1: CGPoint(x: 15.48, y: 9.52), controlPoint2: CGPoint(x: 15.34, y: 10.13))
        icon.addCurve(to: CGPoint(x: 14.48, y: 11.04), controlPoint1: CGPoint(x: 14.85, y: 10.87), controlPoint2: CGPoint(x: 14.69, y: 10.99))
        icon.addCurve(to: CGPoint(x: 14.37, y: 11.17), controlPoint1: CGPoint(x: 14.44, y: 11.05), controlPoint2: CGPoint(x: 14.39, y: 11.12))
        icon.addCurve(to: CGPoint(x: 14, y: 12.5), controlPoint1: CGPoint(x: 14.25, y: 11.61), controlPoint2: CGPoint(x: 14.16, y: 12.07))
        icon.addCurve(to: CGPoint(x: 13.13, y: 14.08), controlPoint1: CGPoint(x: 13.8, y: 13.01), controlPoint2: CGPoint(x: 13.56, y: 13.72))
        icon.addCurve(to: CGPoint(x: 13.1, y: 14.2), controlPoint1: CGPoint(x: 13.1, y: 14.11), controlPoint2: CGPoint(x: 13.1, y: 14.16))
        icon.addCurve(to: CGPoint(x: 13.1, y: 15.92), controlPoint1: CGPoint(x: 13.1, y: 14.75), controlPoint2: CGPoint(x: 13.1, y: 15.36))
        icon.addCurve(to: CGPoint(x: 13.9, y: 16.82), controlPoint1: CGPoint(x: 13.16, y: 16.16), controlPoint2: CGPoint(x: 13.4, y: 16.56))
        icon.addCurve(to: CGPoint(x: 15.12, y: 17.15), controlPoint1: CGPoint(x: 14.36, y: 17.05), controlPoint2: CGPoint(x: 14.73, y: 17.13))
        icon.addCurve(to: CGPoint(x: 18.2, y: 18.08), controlPoint1: CGPoint(x: 16.6, y: 17.3), controlPoint2: CGPoint(x: 17.62, y: 17.6))
        icon.addCurve(to: CGPoint(x: 19.81, y: 21), controlPoint1: CGPoint(x: 19.01, y: 18.75), controlPoint2: CGPoint(x: 19.55, y: 19.73))
        icon.addLine(to: CGPoint(x: 13, y: 21))
        icon.addLine(to: CGPoint(x: 6.81, y: 21))
        icon.addLine(to: CGPoint(x: 0, y: 21))
        icon.addCurve(to: CGPoint(x: 1.61, y: 18.08), controlPoint1: CGPoint(x: 0.26, y: 19.73), controlPoint2: CGPoint(x: 0.79, y: 18.75))
        icon.addCurve(to: CGPoint(x: 5.78, y: 17.08), controlPoint1: CGPoint(x: 2.32, y: 17.5), controlPoint2: CGPoint(x: 3.71, y: 17.16))
        icon.addCurve(to: CGPoint(x: 6.84, y: 16.79), controlPoint1: CGPoint(x: 6.14, y: 17.06), controlPoint2: CGPoint(x: 6.49, y: 16.97))
        icon.addCurve(to: CGPoint(x: 7.57, y: 15.92), controlPoint1: CGPoint(x: 7.34, y: 16.53), controlPoint2: CGPoint(x: 7.5, y: 16.17))
        icon.addCurve(to: CGPoint(x: 7.59, y: 14.2), controlPoint1: CGPoint(x: 7.56, y: 15.33), controlPoint2: CGPoint(x: 7.58, y: 14.79))
        icon.addCurve(to: CGPoint(x: 7.5, y: 14.05), controlPoint1: CGPoint(x: 7.6, y: 14.08), controlPoint2: CGPoint(x: 7.57, y: 14.14))
        icon.addCurve(to: CGPoint(x: 6.65, y: 12.72), controlPoint1: CGPoint(x: 7.48, y: 14.02), controlPoint2: CGPoint(x: 7.02, y: 13.6))
        icon.addCurve(to: CGPoint(x: 6.25, y: 11.19), controlPoint1: CGPoint(x: 6.48, y: 12.31), controlPoint2: CGPoint(x: 6.33, y: 11.8))
        icon.addCurve(to: CGPoint(x: 6.14, y: 11.04), controlPoint1: CGPoint(x: 6.24, y: 11.13), controlPoint2: CGPoint(x: 6.19, y: 11.05))
        icon.addCurve(to: CGPoint(x: 5.59, y: 10.6), controlPoint1: CGPoint(x: 5.9, y: 10.97), controlPoint2: CGPoint(x: 5.73, y: 10.81))
        icon.addCurve(to: CGPoint(x: 5.23, y: 9.41), controlPoint1: CGPoint(x: 5.36, y: 10.24), controlPoint2: CGPoint(x: 5.28, y: 9.83))
        icon.addCurve(to: CGPoint(x: 5.62, y: 8.26), controlPoint1: CGPoint(x: 5.19, y: 8.97), controlPoint2: CGPoint(x: 5.27, y: 8.57))
        icon.addCurve(to: CGPoint(x: 5.65, y: 8.1), controlPoint1: CGPoint(x: 5.65, y: 8.23), controlPoint2: CGPoint(x: 5.66, y: 8.15))
        icon.addCurve(to: CGPoint(x: 5.31, y: 6.38), controlPoint1: CGPoint(x: 5.54, y: 7.53), controlPoint2: CGPoint(x: 5.4, y: 6.96))
        icon.addCurve(to: CGPoint(x: 5.33, y: 3.56), controlPoint1: CGPoint(x: 5.17, y: 5.44), controlPoint2: CGPoint(x: 5.15, y: 4.5))
        icon.addCurve(to: CGPoint(x: 7.38, y: 0.65), controlPoint1: CGPoint(x: 5.58, y: 2.27), controlPoint2: CGPoint(x: 6.2, y: 1.24))
        icon.close()
        context.saveGState()
        context.translateBy(x: 1, y: 4)
        icon.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarWallet2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 2.88, y: 0))
        icon.addCurve(to: CGPoint(x: 0, y: 2.86), controlPoint1: CGPoint(x: 1.3, y: 0), controlPoint2: CGPoint(x: 0, y: 1.29))
        icon.addLine(to: CGPoint(x: 0, y: 18.14))
        icon.addCurve(to: CGPoint(x: 2.88, y: 21), controlPoint1: CGPoint(x: 0, y: 19.72), controlPoint2: CGPoint(x: 1.29, y: 21))
        icon.addLine(to: CGPoint(x: 22.12, y: 21))
        icon.addCurve(to: CGPoint(x: 25, y: 18.14), controlPoint1: CGPoint(x: 23.71, y: 21), controlPoint2: CGPoint(x: 25, y: 19.72))
        icon.addLine(to: CGPoint(x: 25, y: 2.86))
        icon.addCurve(to: CGPoint(x: 22.12, y: 0), controlPoint1: CGPoint(x: 25, y: 1.29), controlPoint2: CGPoint(x: 23.7, y: 0))
        icon.addLine(to: CGPoint(x: 2.88, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 2.88, y: 1.91))
        icon.addLine(to: CGPoint(x: 22.12, y: 1.91))
        icon.addCurve(to: CGPoint(x: 23.08, y: 2.86), controlPoint1: CGPoint(x: 22.66, y: 1.91), controlPoint2: CGPoint(x: 23.08, y: 2.32))
        icon.addLine(to: CGPoint(x: 23.08, y: 4))
        icon.addCurve(to: CGPoint(x: 22.12, y: 3.82), controlPoint1: CGPoint(x: 22.77, y: 3.89), controlPoint2: CGPoint(x: 22.45, y: 3.82))
        icon.addLine(to: CGPoint(x: 2.88, y: 3.82))
        icon.addCurve(to: CGPoint(x: 1.92, y: 4), controlPoint1: CGPoint(x: 2.55, y: 3.82), controlPoint2: CGPoint(x: 2.23, y: 3.89))
        icon.addLine(to: CGPoint(x: 1.92, y: 2.86))
        icon.addCurve(to: CGPoint(x: 2.88, y: 1.91), controlPoint1: CGPoint(x: 1.92, y: 2.32), controlPoint2: CGPoint(x: 2.34, y: 1.91))
        icon.close()
        icon.move(to: CGPoint(x: 2.88, y: 5.73))
        icon.addLine(to: CGPoint(x: 22.12, y: 5.73))
        icon.addCurve(to: CGPoint(x: 23.08, y: 6.68), controlPoint1: CGPoint(x: 22.66, y: 5.73), controlPoint2: CGPoint(x: 23.08, y: 6.14))
        icon.addLine(to: CGPoint(x: 23.08, y: 7.81))
        icon.addCurve(to: CGPoint(x: 22.12, y: 7.64), controlPoint1: CGPoint(x: 22.77, y: 7.71), controlPoint2: CGPoint(x: 22.45, y: 7.64))
        icon.addLine(to: CGPoint(x: 2.88, y: 7.64))
        icon.addCurve(to: CGPoint(x: 1.92, y: 7.81), controlPoint1: CGPoint(x: 2.55, y: 7.64), controlPoint2: CGPoint(x: 2.23, y: 7.71))
        icon.addLine(to: CGPoint(x: 1.92, y: 6.68))
        icon.addCurve(to: CGPoint(x: 2.88, y: 5.73), controlPoint1: CGPoint(x: 1.92, y: 6.14), controlPoint2: CGPoint(x: 2.34, y: 5.73))
        icon.close()
        icon.move(to: CGPoint(x: 2.88, y: 9.54))
        icon.addLine(to: CGPoint(x: 22.12, y: 9.54))
        icon.addCurve(to: CGPoint(x: 23.08, y: 10.5), controlPoint1: CGPoint(x: 22.66, y: 9.54), controlPoint2: CGPoint(x: 23.08, y: 9.96))
        icon.addLine(to: CGPoint(x: 23.08, y: 11.46))
        icon.addLine(to: CGPoint(x: 18.27, y: 11.46))
        icon.addCurve(to: CGPoint(x: 15.49, y: 13.16), controlPoint1: CGPoint(x: 17.09, y: 11.46), controlPoint2: CGPoint(x: 16.01, y: 12.12))
        icon.addLine(to: CGPoint(x: 15.28, y: 13.57))
        icon.addCurve(to: CGPoint(x: 12.5, y: 15.27), controlPoint1: CGPoint(x: 14.76, y: 14.61), controlPoint2: CGPoint(x: 13.68, y: 15.27))
        icon.addCurve(to: CGPoint(x: 9.72, y: 13.57), controlPoint1: CGPoint(x: 11.32, y: 15.27), controlPoint2: CGPoint(x: 10.24, y: 14.61))
        icon.addLine(to: CGPoint(x: 9.51, y: 13.16))
        icon.addCurve(to: CGPoint(x: 6.73, y: 11.46), controlPoint1: CGPoint(x: 8.99, y: 12.12), controlPoint2: CGPoint(x: 7.91, y: 11.46))
        icon.addLine(to: CGPoint(x: 1.92, y: 11.46))
        icon.addLine(to: CGPoint(x: 1.92, y: 10.5))
        icon.addCurve(to: CGPoint(x: 2.88, y: 9.54), controlPoint1: CGPoint(x: 1.92, y: 9.96), controlPoint2: CGPoint(x: 2.34, y: 9.54))
        icon.close()
        context.saveGState()
        context.translateBy(x: 1.5, y: 3.5)
        icon.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 1.5, y: 3.5))
        icon.addClip()
        
        // Empty.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarCalendar2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 2.8, y: 1.5))
        icon.addLine(to: CGPoint(x: 21.2, y: 1.5))
        icon.addCurve(to: CGPoint(x: 22.47, y: 2.75), controlPoint1: CGPoint(x: 21.9, y: 1.5), controlPoint2: CGPoint(x: 22.47, y: 2.06))
        icon.addLine(to: CGPoint(x: 22.47, y: 7))
        icon.addLine(to: CGPoint(x: 1.53, y: 7))
        icon.addLine(to: CGPoint(x: 1.53, y: 2.75))
        icon.addCurve(to: CGPoint(x: 2.8, y: 1.5), controlPoint1: CGPoint(x: 1.53, y: 2.06), controlPoint2: CGPoint(x: 2.1, y: 1.5))
        icon.move(to: CGPoint(x: 21.2, y: 0))
        icon.addCurve(to: CGPoint(x: 24, y: 2.75), controlPoint1: CGPoint(x: 22.75, y: 0), controlPoint2: CGPoint(x: 24, y: 1.23))
        icon.addLine(to: CGPoint(x: 24, y: 20.25))
        icon.addCurve(to: CGPoint(x: 21.2, y: 23), controlPoint1: CGPoint(x: 24, y: 21.77), controlPoint2: CGPoint(x: 22.75, y: 23))
        icon.addLine(to: CGPoint(x: 2.8, y: 23))
        icon.addCurve(to: CGPoint(x: 0, y: 20.25), controlPoint1: CGPoint(x: 1.25, y: 23), controlPoint2: CGPoint(x: 0, y: 21.77))
        icon.addLine(to: CGPoint(x: 0, y: 2.75))
        icon.addCurve(to: CGPoint(x: 2.8, y: 0), controlPoint1: CGPoint(x: 0, y: 1.23), controlPoint2: CGPoint(x: 1.25, y: 0))
        icon.addLine(to: CGPoint(x: 21.2, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 7.87, y: 12))
        icon.addCurve(to: CGPoint(x: 8.87, y: 11), controlPoint1: CGPoint(x: 8.42, y: 12), controlPoint2: CGPoint(x: 8.87, y: 11.55))
        icon.addCurve(to: CGPoint(x: 7.87, y: 10), controlPoint1: CGPoint(x: 8.87, y: 10.45), controlPoint2: CGPoint(x: 8.42, y: 10))
        icon.addCurve(to: CGPoint(x: 6.87, y: 11), controlPoint1: CGPoint(x: 7.32, y: 10), controlPoint2: CGPoint(x: 6.87, y: 10.45))
        icon.addCurve(to: CGPoint(x: 7.87, y: 12), controlPoint1: CGPoint(x: 6.87, y: 11.55), controlPoint2: CGPoint(x: 7.32, y: 12))
        icon.close()
        icon.move(to: CGPoint(x: 7.87, y: 15.5))
        icon.addCurve(to: CGPoint(x: 8.87, y: 14.5), controlPoint1: CGPoint(x: 8.42, y: 15.5), controlPoint2: CGPoint(x: 8.87, y: 15.05))
        icon.addCurve(to: CGPoint(x: 7.87, y: 13.5), controlPoint1: CGPoint(x: 8.87, y: 13.95), controlPoint2: CGPoint(x: 8.42, y: 13.5))
        icon.addCurve(to: CGPoint(x: 6.87, y: 14.5), controlPoint1: CGPoint(x: 7.32, y: 13.5), controlPoint2: CGPoint(x: 6.87, y: 13.95))
        icon.addCurve(to: CGPoint(x: 7.87, y: 15.5), controlPoint1: CGPoint(x: 6.87, y: 15.05), controlPoint2: CGPoint(x: 7.32, y: 15.5))
        icon.close()
        icon.move(to: CGPoint(x: 7.87, y: 19))
        icon.addCurve(to: CGPoint(x: 8.87, y: 18), controlPoint1: CGPoint(x: 8.42, y: 19), controlPoint2: CGPoint(x: 8.87, y: 18.55))
        icon.addCurve(to: CGPoint(x: 7.87, y: 17), controlPoint1: CGPoint(x: 8.87, y: 17.45), controlPoint2: CGPoint(x: 8.42, y: 17))
        icon.addCurve(to: CGPoint(x: 6.87, y: 18), controlPoint1: CGPoint(x: 7.32, y: 17), controlPoint2: CGPoint(x: 6.87, y: 17.45))
        icon.addCurve(to: CGPoint(x: 7.87, y: 19), controlPoint1: CGPoint(x: 6.87, y: 18.55), controlPoint2: CGPoint(x: 7.32, y: 19))
        icon.close()
        icon.move(to: CGPoint(x: 3.75, y: 15.5))
        icon.addCurve(to: CGPoint(x: 4.75, y: 14.5), controlPoint1: CGPoint(x: 4.3, y: 15.5), controlPoint2: CGPoint(x: 4.75, y: 15.05))
        icon.addCurve(to: CGPoint(x: 3.75, y: 13.5), controlPoint1: CGPoint(x: 4.75, y: 13.95), controlPoint2: CGPoint(x: 4.3, y: 13.5))
        icon.addCurve(to: CGPoint(x: 2.75, y: 14.5), controlPoint1: CGPoint(x: 3.2, y: 13.5), controlPoint2: CGPoint(x: 2.75, y: 13.95))
        icon.addCurve(to: CGPoint(x: 3.75, y: 15.5), controlPoint1: CGPoint(x: 2.75, y: 15.05), controlPoint2: CGPoint(x: 3.2, y: 15.5))
        icon.close()
        icon.move(to: CGPoint(x: 3.75, y: 12))
        icon.addCurve(to: CGPoint(x: 4.75, y: 11), controlPoint1: CGPoint(x: 4.3, y: 12), controlPoint2: CGPoint(x: 4.75, y: 11.55))
        icon.addCurve(to: CGPoint(x: 3.75, y: 10), controlPoint1: CGPoint(x: 4.75, y: 10.45), controlPoint2: CGPoint(x: 4.3, y: 10))
        icon.addCurve(to: CGPoint(x: 2.75, y: 11), controlPoint1: CGPoint(x: 3.2, y: 10), controlPoint2: CGPoint(x: 2.75, y: 10.45))
        icon.addCurve(to: CGPoint(x: 3.75, y: 12), controlPoint1: CGPoint(x: 2.75, y: 11.55), controlPoint2: CGPoint(x: 3.2, y: 12))
        icon.close()
        icon.move(to: CGPoint(x: 3.75, y: 19))
        icon.addCurve(to: CGPoint(x: 4.75, y: 18), controlPoint1: CGPoint(x: 4.3, y: 19), controlPoint2: CGPoint(x: 4.75, y: 18.55))
        icon.addCurve(to: CGPoint(x: 3.75, y: 17), controlPoint1: CGPoint(x: 4.75, y: 17.45), controlPoint2: CGPoint(x: 4.3, y: 17))
        icon.addCurve(to: CGPoint(x: 2.75, y: 18), controlPoint1: CGPoint(x: 3.2, y: 17), controlPoint2: CGPoint(x: 2.75, y: 17.45))
        icon.addCurve(to: CGPoint(x: 3.75, y: 19), controlPoint1: CGPoint(x: 2.75, y: 18.55), controlPoint2: CGPoint(x: 3.2, y: 19))
        icon.close()
        icon.move(to: CGPoint(x: 12, y: 12))
        icon.addCurve(to: CGPoint(x: 13, y: 11), controlPoint1: CGPoint(x: 12.55, y: 12), controlPoint2: CGPoint(x: 13, y: 11.55))
        icon.addCurve(to: CGPoint(x: 12, y: 10), controlPoint1: CGPoint(x: 13, y: 10.45), controlPoint2: CGPoint(x: 12.55, y: 10))
        icon.addCurve(to: CGPoint(x: 11, y: 11), controlPoint1: CGPoint(x: 11.45, y: 10), controlPoint2: CGPoint(x: 11, y: 10.45))
        icon.addCurve(to: CGPoint(x: 12, y: 12), controlPoint1: CGPoint(x: 11, y: 11.55), controlPoint2: CGPoint(x: 11.45, y: 12))
        icon.close()
        icon.move(to: CGPoint(x: 12, y: 15.5))
        icon.addCurve(to: CGPoint(x: 13, y: 14.5), controlPoint1: CGPoint(x: 12.55, y: 15.5), controlPoint2: CGPoint(x: 13, y: 15.05))
        icon.addCurve(to: CGPoint(x: 12, y: 13.5), controlPoint1: CGPoint(x: 13, y: 13.95), controlPoint2: CGPoint(x: 12.55, y: 13.5))
        icon.addCurve(to: CGPoint(x: 11, y: 14.5), controlPoint1: CGPoint(x: 11.45, y: 13.5), controlPoint2: CGPoint(x: 11, y: 13.95))
        icon.addCurve(to: CGPoint(x: 12, y: 15.5), controlPoint1: CGPoint(x: 11, y: 15.05), controlPoint2: CGPoint(x: 11.45, y: 15.5))
        icon.close()
        icon.move(to: CGPoint(x: 12, y: 19))
        icon.addCurve(to: CGPoint(x: 13, y: 18), controlPoint1: CGPoint(x: 12.55, y: 19), controlPoint2: CGPoint(x: 13, y: 18.55))
        icon.addCurve(to: CGPoint(x: 12, y: 17), controlPoint1: CGPoint(x: 13, y: 17.45), controlPoint2: CGPoint(x: 12.55, y: 17))
        icon.addCurve(to: CGPoint(x: 11, y: 18), controlPoint1: CGPoint(x: 11.45, y: 17), controlPoint2: CGPoint(x: 11, y: 17.45))
        icon.addCurve(to: CGPoint(x: 12, y: 19), controlPoint1: CGPoint(x: 11, y: 18.55), controlPoint2: CGPoint(x: 11.45, y: 19))
        icon.close()
        icon.move(to: CGPoint(x: 16.13, y: 12))
        icon.addCurve(to: CGPoint(x: 17.13, y: 11), controlPoint1: CGPoint(x: 16.68, y: 12), controlPoint2: CGPoint(x: 17.13, y: 11.55))
        icon.addCurve(to: CGPoint(x: 16.13, y: 10), controlPoint1: CGPoint(x: 17.13, y: 10.45), controlPoint2: CGPoint(x: 16.68, y: 10))
        icon.addCurve(to: CGPoint(x: 15.13, y: 11), controlPoint1: CGPoint(x: 15.58, y: 10), controlPoint2: CGPoint(x: 15.13, y: 10.45))
        icon.addCurve(to: CGPoint(x: 16.13, y: 12), controlPoint1: CGPoint(x: 15.13, y: 11.55), controlPoint2: CGPoint(x: 15.58, y: 12))
        icon.close()
        icon.move(to: CGPoint(x: 16.13, y: 19))
        icon.addCurve(to: CGPoint(x: 17.13, y: 18), controlPoint1: CGPoint(x: 16.68, y: 19), controlPoint2: CGPoint(x: 17.13, y: 18.55))
        icon.addCurve(to: CGPoint(x: 16.13, y: 17), controlPoint1: CGPoint(x: 17.13, y: 17.45), controlPoint2: CGPoint(x: 16.68, y: 17))
        icon.addCurve(to: CGPoint(x: 15.13, y: 18), controlPoint1: CGPoint(x: 15.58, y: 17), controlPoint2: CGPoint(x: 15.13, y: 17.45))
        icon.addCurve(to: CGPoint(x: 16.13, y: 19), controlPoint1: CGPoint(x: 15.13, y: 18.55), controlPoint2: CGPoint(x: 15.58, y: 19))
        icon.close()
        icon.move(to: CGPoint(x: 20.25, y: 12))
        icon.addCurve(to: CGPoint(x: 21.25, y: 11), controlPoint1: CGPoint(x: 20.8, y: 12), controlPoint2: CGPoint(x: 21.25, y: 11.55))
        icon.addCurve(to: CGPoint(x: 20.25, y: 10), controlPoint1: CGPoint(x: 21.25, y: 10.45), controlPoint2: CGPoint(x: 20.8, y: 10))
        icon.addCurve(to: CGPoint(x: 19.25, y: 11), controlPoint1: CGPoint(x: 19.7, y: 10), controlPoint2: CGPoint(x: 19.25, y: 10.45))
        icon.addCurve(to: CGPoint(x: 20.25, y: 12), controlPoint1: CGPoint(x: 19.25, y: 11.55), controlPoint2: CGPoint(x: 19.7, y: 12))
        icon.close()
        icon.move(to: CGPoint(x: 20.25, y: 15.5))
        icon.addCurve(to: CGPoint(x: 21.25, y: 14.5), controlPoint1: CGPoint(x: 20.8, y: 15.5), controlPoint2: CGPoint(x: 21.25, y: 15.05))
        icon.addCurve(to: CGPoint(x: 20.25, y: 13.5), controlPoint1: CGPoint(x: 21.25, y: 13.95), controlPoint2: CGPoint(x: 20.8, y: 13.5))
        icon.addCurve(to: CGPoint(x: 19.25, y: 14.5), controlPoint1: CGPoint(x: 19.7, y: 13.5), controlPoint2: CGPoint(x: 19.25, y: 13.95))
        icon.addCurve(to: CGPoint(x: 20.25, y: 15.5), controlPoint1: CGPoint(x: 19.25, y: 15.05), controlPoint2: CGPoint(x: 19.7, y: 15.5))
        icon.close()
        icon.move(to: CGPoint(x: 16.12, y: 15.9))
        icon.addCurve(to: CGPoint(x: 17.52, y: 14.5), controlPoint1: CGPoint(x: 16.89, y: 15.9), controlPoint2: CGPoint(x: 17.52, y: 15.27))
        icon.addCurve(to: CGPoint(x: 16.12, y: 13.1), controlPoint1: CGPoint(x: 17.52, y: 13.73), controlPoint2: CGPoint(x: 16.89, y: 13.1))
        icon.addCurve(to: CGPoint(x: 14.72, y: 14.5), controlPoint1: CGPoint(x: 15.35, y: 13.1), controlPoint2: CGPoint(x: 14.72, y: 13.73))
        icon.addCurve(to: CGPoint(x: 16.12, y: 15.9), controlPoint1: CGPoint(x: 14.72, y: 15.27), controlPoint2: CGPoint(x: 15.35, y: 15.9))
        icon.close()
        context.saveGState()
        context.translateBy(x: 2, y: 2.5)
        icon.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 2, y: 2.5))
        icon.addClip()
        
        // Empty.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarTasks2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 2, y: 0))
        icon.addLine(to: CGPoint(x: 21, y: 0))
        icon.addCurve(to: CGPoint(x: 23, y: 2), controlPoint1: CGPoint(x: 22.1, y: 0), controlPoint2: CGPoint(x: 23, y: 0.9))
        icon.addLine(to: CGPoint(x: 23, y: 21))
        icon.addCurve(to: CGPoint(x: 21, y: 23), controlPoint1: CGPoint(x: 23, y: 22.1), controlPoint2: CGPoint(x: 22.1, y: 23))
        icon.addLine(to: CGPoint(x: 2, y: 23))
        icon.addCurve(to: CGPoint(x: 0, y: 21), controlPoint1: CGPoint(x: 0.9, y: 23), controlPoint2: CGPoint(x: 0, y: 22.1))
        icon.addLine(to: CGPoint(x: 0, y: 2))
        icon.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 8.85, y: 4.8))
        icon.addCurve(to: CGPoint(x: 8, y: 5.65), controlPoint1: CGPoint(x: 8.38, y: 4.8), controlPoint2: CGPoint(x: 8, y: 5.18))
        icon.addCurve(to: CGPoint(x: 8.85, y: 6.5), controlPoint1: CGPoint(x: 8, y: 6.12), controlPoint2: CGPoint(x: 8.38, y: 6.5))
        icon.addLine(to: CGPoint(x: 19.15, y: 6.5))
        icon.addCurve(to: CGPoint(x: 20, y: 5.65), controlPoint1: CGPoint(x: 19.62, y: 6.5), controlPoint2: CGPoint(x: 20, y: 6.12))
        icon.addCurve(to: CGPoint(x: 19.15, y: 4.8), controlPoint1: CGPoint(x: 20, y: 5.18), controlPoint2: CGPoint(x: 19.62, y: 4.8))
        icon.addLine(to: CGPoint(x: 8.85, y: 4.8))
        icon.close()
        icon.move(to: CGPoint(x: 8.85, y: 10.8))
        icon.addCurve(to: CGPoint(x: 8, y: 11.65), controlPoint1: CGPoint(x: 8.38, y: 10.8), controlPoint2: CGPoint(x: 8, y: 11.18))
        icon.addCurve(to: CGPoint(x: 8.85, y: 12.5), controlPoint1: CGPoint(x: 8, y: 12.12), controlPoint2: CGPoint(x: 8.38, y: 12.5))
        icon.addLine(to: CGPoint(x: 19.15, y: 12.5))
        icon.addCurve(to: CGPoint(x: 20, y: 11.65), controlPoint1: CGPoint(x: 19.62, y: 12.5), controlPoint2: CGPoint(x: 20, y: 12.12))
        icon.addCurve(to: CGPoint(x: 19.15, y: 10.8), controlPoint1: CGPoint(x: 20, y: 11.18), controlPoint2: CGPoint(x: 19.62, y: 10.8))
        icon.addLine(to: CGPoint(x: 8.85, y: 10.8))
        icon.close()
        icon.move(to: CGPoint(x: 8.85, y: 16.8))
        icon.addCurve(to: CGPoint(x: 8, y: 17.65), controlPoint1: CGPoint(x: 8.38, y: 16.8), controlPoint2: CGPoint(x: 8, y: 17.18))
        icon.addCurve(to: CGPoint(x: 8.85, y: 18.5), controlPoint1: CGPoint(x: 8, y: 18.12), controlPoint2: CGPoint(x: 8.38, y: 18.5))
        icon.addLine(to: CGPoint(x: 19.15, y: 18.5))
        icon.addCurve(to: CGPoint(x: 20, y: 17.65), controlPoint1: CGPoint(x: 19.62, y: 18.5), controlPoint2: CGPoint(x: 20, y: 18.12))
        icon.addCurve(to: CGPoint(x: 19.15, y: 16.8), controlPoint1: CGPoint(x: 20, y: 17.18), controlPoint2: CGPoint(x: 19.62, y: 16.8))
        icon.addLine(to: CGPoint(x: 8.85, y: 16.8))
        icon.close()
        icon.move(to: CGPoint(x: 4.25, y: 6.7))
        icon.addCurve(to: CGPoint(x: 5.5, y: 5.45), controlPoint1: CGPoint(x: 4.94, y: 6.7), controlPoint2: CGPoint(x: 5.5, y: 6.14))
        icon.addCurve(to: CGPoint(x: 4.25, y: 4.2), controlPoint1: CGPoint(x: 5.5, y: 4.76), controlPoint2: CGPoint(x: 4.94, y: 4.2))
        icon.addCurve(to: CGPoint(x: 3, y: 5.45), controlPoint1: CGPoint(x: 3.56, y: 4.2), controlPoint2: CGPoint(x: 3, y: 4.76))
        icon.addCurve(to: CGPoint(x: 4.25, y: 6.7), controlPoint1: CGPoint(x: 3, y: 6.14), controlPoint2: CGPoint(x: 3.56, y: 6.7))
        icon.close()
        icon.move(to: CGPoint(x: 4.25, y: 12.7))
        icon.addCurve(to: CGPoint(x: 5.5, y: 11.45), controlPoint1: CGPoint(x: 4.94, y: 12.7), controlPoint2: CGPoint(x: 5.5, y: 12.14))
        icon.addCurve(to: CGPoint(x: 4.25, y: 10.2), controlPoint1: CGPoint(x: 5.5, y: 10.76), controlPoint2: CGPoint(x: 4.94, y: 10.2))
        icon.addCurve(to: CGPoint(x: 3, y: 11.45), controlPoint1: CGPoint(x: 3.56, y: 10.2), controlPoint2: CGPoint(x: 3, y: 10.76))
        icon.addCurve(to: CGPoint(x: 4.25, y: 12.7), controlPoint1: CGPoint(x: 3, y: 12.14), controlPoint2: CGPoint(x: 3.56, y: 12.7))
        icon.close()
        icon.move(to: CGPoint(x: 4.25, y: 18.7))
        icon.addCurve(to: CGPoint(x: 5.5, y: 17.45), controlPoint1: CGPoint(x: 4.94, y: 18.7), controlPoint2: CGPoint(x: 5.5, y: 18.14))
        icon.addCurve(to: CGPoint(x: 4.25, y: 16.2), controlPoint1: CGPoint(x: 5.5, y: 16.76), controlPoint2: CGPoint(x: 4.94, y: 16.2))
        icon.addCurve(to: CGPoint(x: 3, y: 17.45), controlPoint1: CGPoint(x: 3.56, y: 16.2), controlPoint2: CGPoint(x: 3, y: 16.76))
        icon.addCurve(to: CGPoint(x: 4.25, y: 18.7), controlPoint1: CGPoint(x: 3, y: 18.14), controlPoint2: CGPoint(x: 3.56, y: 18.7))
        icon.close()
        context.saveGState()
        context.translateBy(x: 2.5, y: 2.5)
        icon.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 2.5, y: 2.5))
        icon.addClip()
        
        // Empty.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarTrend2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 3.72, y: 0))
        icon.addCurve(to: CGPoint(x: 2.8, y: 0.76), controlPoint1: CGPoint(x: 3.26, y: 0), controlPoint2: CGPoint(x: 2.88, y: 0.32))
        icon.addLine(to: CGPoint(x: 0.03, y: 12.68))
        icon.addCurve(to: CGPoint(x: 0, y: 12.92), controlPoint1: CGPoint(x: 0.01, y: 12.76), controlPoint2: CGPoint(x: 0, y: 12.84))
        icon.addCurve(to: CGPoint(x: 0.93, y: 13.84), controlPoint1: CGPoint(x: 0, y: 13.43), controlPoint2: CGPoint(x: 0.42, y: 13.85))
        icon.addLine(to: CGPoint(x: 6.04, y: 13.84))
        icon.addLine(to: CGPoint(x: 4.66, y: 22.89))
        icon.addCurve(to: CGPoint(x: 4.64, y: 23.08), controlPoint1: CGPoint(x: 4.65, y: 22.95), controlPoint2: CGPoint(x: 4.64, y: 23.01))
        icon.addCurve(to: CGPoint(x: 5.57, y: 24), controlPoint1: CGPoint(x: 4.64, y: 23.59), controlPoint2: CGPoint(x: 5.06, y: 24))
        icon.addCurve(to: CGPoint(x: 6.39, y: 23.51), controlPoint1: CGPoint(x: 5.91, y: 24), controlPoint2: CGPoint(x: 6.23, y: 23.81))
        icon.addLine(to: CGPoint(x: 12.82, y: 11.62))
        icon.addCurve(to: CGPoint(x: 13, y: 11.08), controlPoint1: CGPoint(x: 12.92, y: 11.45), controlPoint2: CGPoint(x: 13, y: 11.28))
        icon.addCurve(to: CGPoint(x: 12.07, y: 10.15), controlPoint1: CGPoint(x: 13, y: 10.57), controlPoint2: CGPoint(x: 12.58, y: 10.15))
        icon.addLine(to: CGPoint(x: 6.96, y: 10.15))
        icon.addLine(to: CGPoint(x: 10.13, y: 1.3))
        icon.addCurve(to: CGPoint(x: 10.21, y: 0.92), controlPoint1: CGPoint(x: 10.19, y: 1.18), controlPoint2: CGPoint(x: 10.21, y: 1.05))
        icon.addCurve(to: CGPoint(x: 9.28, y: 0), controlPoint1: CGPoint(x: 10.21, y: 0.41), controlPoint2: CGPoint(x: 9.8, y: 0))
        icon.addLine(to: CGPoint(x: 3.72, y: 0))
        icon.close()
        context.saveGState()
        context.translateBy(x: 7.5, y: 2)
        icon.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 7.5, y: 2))
        icon.addClip()
        
        // Empty.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarSearch2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 17.03, y: 16.23))
        icon.addLine(to: CGPoint(x: 22.67, y: 21.87))
        icon.addCurve(to: CGPoint(x: 22.67, y: 23.63), controlPoint1: CGPoint(x: 23.16, y: 22.36), controlPoint2: CGPoint(x: 23.16, y: 23.15))
        icon.addCurve(to: CGPoint(x: 20.91, y: 23.63), controlPoint1: CGPoint(x: 22.18, y: 24.12), controlPoint2: CGPoint(x: 21.4, y: 24.12))
        icon.addLine(to: CGPoint(x: 15.17, y: 17.9))
        icon.addCurve(to: CGPoint(x: 9.71, y: 19.59), controlPoint1: CGPoint(x: 13.62, y: 18.97), controlPoint2: CGPoint(x: 11.74, y: 19.59))
        icon.addCurve(to: CGPoint(x: 0, y: 9.8), controlPoint1: CGPoint(x: 4.35, y: 19.59), controlPoint2: CGPoint(x: 0, y: 15.21))
        icon.addCurve(to: CGPoint(x: 9.71, y: 0), controlPoint1: CGPoint(x: 0, y: 4.39), controlPoint2: CGPoint(x: 4.35, y: 0))
        icon.addCurve(to: CGPoint(x: 19.42, y: 9.8), controlPoint1: CGPoint(x: 15.07, y: 0), controlPoint2: CGPoint(x: 19.42, y: 4.39))
        icon.addCurve(to: CGPoint(x: 17.03, y: 16.23), controlPoint1: CGPoint(x: 19.42, y: 12.26), controlPoint2: CGPoint(x: 18.52, y: 14.51))
        icon.close()
        icon.move(to: CGPoint(x: 9.71, y: 17.08))
        icon.addCurve(to: CGPoint(x: 16.93, y: 9.8), controlPoint1: CGPoint(x: 13.7, y: 17.08), controlPoint2: CGPoint(x: 16.93, y: 13.82))
        icon.addCurve(to: CGPoint(x: 9.71, y: 2.51), controlPoint1: CGPoint(x: 16.93, y: 5.77), controlPoint2: CGPoint(x: 13.7, y: 2.51))
        icon.addCurve(to: CGPoint(x: 2.49, y: 9.8), controlPoint1: CGPoint(x: 5.72, y: 2.51), controlPoint2: CGPoint(x: 2.49, y: 5.77))
        icon.addCurve(to: CGPoint(x: 9.71, y: 17.08), controlPoint1: CGPoint(x: 2.49, y: 13.82), controlPoint2: CGPoint(x: 5.72, y: 17.08))
        icon.close()
        context.saveGState()
        context.translateBy(x: 2.25, y: 1.75)
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 2.25, y: 1.75))
        icon.addClip()
        
        // Empty.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarCalls2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 1.6, y: 8.08))
        icon.addCurve(to: CGPoint(x: 0, y: 3.13), controlPoint1: CGPoint(x: 0.44, y: 5.97), controlPoint2: CGPoint(x: 0, y: 4.27))
        icon.addCurve(to: CGPoint(x: 0.57, y: 1.39), controlPoint1: CGPoint(x: 0, y: 1.98), controlPoint2: CGPoint(x: 0.28, y: 1.65))
        icon.addCurve(to: CGPoint(x: 2.36, y: 0.18), controlPoint1: CGPoint(x: 0.85, y: 1.12), controlPoint2: CGPoint(x: 2.14, y: 0.33))
        icon.addCurve(to: CGPoint(x: 3.94, y: 0.5), controlPoint1: CGPoint(x: 2.58, y: 0.03), controlPoint2: CGPoint(x: 3.42, y: -0.26))
        icon.addCurve(to: CGPoint(x: 6.14, y: 3.78), controlPoint1: CGPoint(x: 4.47, y: 1.26), controlPoint2: CGPoint(x: 5.46, y: 2.77))
        icon.addCurve(to: CGPoint(x: 6.08, y: 6.21), controlPoint1: CGPoint(x: 7.21, y: 5.21), controlPoint2: CGPoint(x: 6.36, y: 5.84))
        icon.addCurve(to: CGPoint(x: 5.29, y: 7.92), controlPoint1: CGPoint(x: 5.58, y: 6.9), controlPoint2: CGPoint(x: 5.29, y: 7.08))
        icon.addCurve(to: CGPoint(x: 8.23, y: 11.78), controlPoint1: CGPoint(x: 5.29, y: 8.77), controlPoint2: CGPoint(x: 7.66, y: 11.19))
        icon.addCurve(to: CGPoint(x: 11.89, y: 14.55), controlPoint1: CGPoint(x: 8.79, y: 12.37), controlPoint2: CGPoint(x: 11.15, y: 14.44))
        icon.addCurve(to: CGPoint(x: 13.82, y: 13.69), controlPoint1: CGPoint(x: 12.63, y: 14.67), controlPoint2: CGPoint(x: 13.61, y: 13.88))
        icon.addCurve(to: CGPoint(x: 15.99, y: 13.76), controlPoint1: CGPoint(x: 14.89, y: 12.87), controlPoint2: CGPoint(x: 15.49, y: 13.49))
        icon.addCurve(to: CGPoint(x: 19.39, y: 15.88), controlPoint1: CGPoint(x: 16.48, y: 14.03), controlPoint2: CGPoint(x: 18.7, y: 15.41))
        icon.addCurve(to: CGPoint(x: 20, y: 17.07), controlPoint1: CGPoint(x: 20.04, y: 16.35), controlPoint2: CGPoint(x: 20, y: 17.07))
        icon.addCurve(to: CGPoint(x: 18.5, y: 19.45), controlPoint1: CGPoint(x: 20, y: 17.07), controlPoint2: CGPoint(x: 18.66, y: 19.19))
        icon.addCurve(to: CGPoint(x: 16.72, y: 20), controlPoint1: CGPoint(x: 18.3, y: 19.75), controlPoint2: CGPoint(x: 17.81, y: 20))
        icon.addCurve(to: CGPoint(x: 11.67, y: 18.27), controlPoint1: CGPoint(x: 15.62, y: 20), controlPoint2: CGPoint(x: 14.45, y: 19.8))
        icon.addCurve(to: CGPoint(x: 6.1, y: 13.92), controlPoint1: CGPoint(x: 9.4, y: 17.02), controlPoint2: CGPoint(x: 7.23, y: 15.06))
        icon.addCurve(to: CGPoint(x: 1.6, y: 8.08), controlPoint1: CGPoint(x: 4.92, y: 12.77), controlPoint2: CGPoint(x: 2.93, y: 10.48))
        icon.close()
        context.saveGState()
        context.translateBy(x: 4, y: 4)
        icon.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4, y: 4))
        icon.addClip()
        
        // Empty.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarPlan2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 9, y: 0))
        icon.addCurve(to: CGPoint(x: 8.01, y: 1), controlPoint1: CGPoint(x: 8.45, y: 0), controlPoint2: CGPoint(x: 8.01, y: 0.45))
        icon.addLine(to: CGPoint(x: 8.01, y: 18))
        icon.addLine(to: CGPoint(x: 12, y: 18))
        icon.addLine(to: CGPoint(x: 12, y: 1))
        icon.addCurve(to: CGPoint(x: 11, y: 0), controlPoint1: CGPoint(x: 12, y: 0.45), controlPoint2: CGPoint(x: 11.55, y: 0))
        icon.addLine(to: CGPoint(x: 9, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 3.01, y: 2))
        icon.addCurve(to: CGPoint(x: 2.01, y: 3), controlPoint1: CGPoint(x: 2.46, y: 2), controlPoint2: CGPoint(x: 2.01, y: 2.45))
        icon.addLine(to: CGPoint(x: 2.01, y: 18))
        icon.addLine(to: CGPoint(x: 6.01, y: 18))
        icon.addLine(to: CGPoint(x: 6.01, y: 3))
        icon.addCurve(to: CGPoint(x: 5.01, y: 2), controlPoint1: CGPoint(x: 6.01, y: 2.45), controlPoint2: CGPoint(x: 5.56, y: 2))
        icon.addLine(to: CGPoint(x: 3.01, y: 2))
        icon.close()
        icon.move(to: CGPoint(x: 20.99, y: 4))
        icon.addCurve(to: CGPoint(x: 19.99, y: 5), controlPoint1: CGPoint(x: 20.44, y: 4), controlPoint2: CGPoint(x: 19.99, y: 4.45))
        icon.addLine(to: CGPoint(x: 19.99, y: 18))
        icon.addLine(to: CGPoint(x: 23.99, y: 18))
        icon.addLine(to: CGPoint(x: 23.99, y: 5))
        icon.addCurve(to: CGPoint(x: 22.99, y: 4), controlPoint1: CGPoint(x: 23.99, y: 4.45), controlPoint2: CGPoint(x: 23.54, y: 4))
        icon.addLine(to: CGPoint(x: 20.99, y: 4))
        icon.close()
        icon.move(to: CGPoint(x: 15, y: 6))
        icon.addCurve(to: CGPoint(x: 14, y: 7), controlPoint1: CGPoint(x: 14.45, y: 6), controlPoint2: CGPoint(x: 14, y: 6.45))
        icon.addLine(to: CGPoint(x: 14, y: 18))
        icon.addLine(to: CGPoint(x: 17.99, y: 18))
        icon.addLine(to: CGPoint(x: 17.99, y: 7))
        icon.addCurve(to: CGPoint(x: 17, y: 6), controlPoint1: CGPoint(x: 17.99, y: 6.45), controlPoint2: CGPoint(x: 17.55, y: 6))
        icon.addLine(to: CGPoint(x: 15, y: 6))
        icon.close()
        icon.move(to: CGPoint(x: 1.01, y: 20))
        icon.addCurve(to: CGPoint(x: 0.14, y: 20.5), controlPoint1: CGPoint(x: 0.65, y: 19.99), controlPoint2: CGPoint(x: 0.32, y: 20.18))
        icon.addCurve(to: CGPoint(x: 0.14, y: 21.5), controlPoint1: CGPoint(x: -0.05, y: 20.81), controlPoint2: CGPoint(x: -0.05, y: 21.19))
        icon.addCurve(to: CGPoint(x: 1.01, y: 22), controlPoint1: CGPoint(x: 0.32, y: 21.82), controlPoint2: CGPoint(x: 0.65, y: 22.01))
        icon.addLine(to: CGPoint(x: 24.99, y: 22))
        icon.addCurve(to: CGPoint(x: 25.86, y: 21.5), controlPoint1: CGPoint(x: 25.35, y: 22.01), controlPoint2: CGPoint(x: 25.68, y: 21.82))
        icon.addCurve(to: CGPoint(x: 25.86, y: 20.5), controlPoint1: CGPoint(x: 26.05, y: 21.19), controlPoint2: CGPoint(x: 26.05, y: 20.81))
        icon.addCurve(to: CGPoint(x: 24.99, y: 20), controlPoint1: CGPoint(x: 25.68, y: 20.18), controlPoint2: CGPoint(x: 25.35, y: 19.99))
        icon.addLine(to: CGPoint(x: 1.01, y: 20))
        icon.close()
        context.saveGState()
        context.translateBy(x: 1, y: 3)
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 1, y: 3))
        icon.addClip()
        
        // Empty.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarPay2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 16.35, y: 0))
        icon.addCurve(to: CGPoint(x: 10.99, y: 2.19), controlPoint1: CGPoint(x: 14.26, y: 0), controlPoint2: CGPoint(x: 12.37, y: 0.84))
        icon.addCurve(to: CGPoint(x: 14.92, y: 3.99), controlPoint1: CGPoint(x: 12.44, y: 2.52), controlPoint2: CGPoint(x: 13.77, y: 3.14))
        icon.addCurve(to: CGPoint(x: 15.38, y: 3.84), controlPoint1: CGPoint(x: 15.07, y: 3.94), controlPoint2: CGPoint(x: 15.22, y: 3.88))
        icon.addLine(to: CGPoint(x: 15.38, y: 2.88))
        icon.addLine(to: CGPoint(x: 17.31, y: 2.88))
        icon.addLine(to: CGPoint(x: 17.31, y: 3.85))
        icon.addCurve(to: CGPoint(x: 19.35, y: 6.08), controlPoint1: CGPoint(x: 18.53, y: 4.14), controlPoint2: CGPoint(x: 19.32, y: 4.96))
        icon.addLine(to: CGPoint(x: 17.58, y: 6.08))
        icon.addCurve(to: CGPoint(x: 16.36, y: 5.17), controlPoint1: CGPoint(x: 17.54, y: 5.54), controlPoint2: CGPoint(x: 17.04, y: 5.17))
        icon.addCurve(to: CGPoint(x: 16.28, y: 5.19), controlPoint1: CGPoint(x: 16.33, y: 5.17), controlPoint2: CGPoint(x: 16.31, y: 5.18))
        icon.addCurve(to: CGPoint(x: 17.72, y: 7.08), controlPoint1: CGPoint(x: 16.83, y: 5.76), controlPoint2: CGPoint(x: 17.31, y: 6.39))
        icon.addCurve(to: CGPoint(x: 19.43, y: 8.6), controlPoint1: CGPoint(x: 18.72, y: 7.34), controlPoint2: CGPoint(x: 19.26, y: 7.83))
        icon.addCurve(to: CGPoint(x: 23.02, y: 11.49), controlPoint1: CGPoint(x: 20.85, y: 9.26), controlPoint2: CGPoint(x: 22.08, y: 10.25))
        icon.addCurve(to: CGPoint(x: 24.04, y: 7.69), controlPoint1: CGPoint(x: 23.67, y: 10.37), controlPoint2: CGPoint(x: 24.04, y: 9.08))
        icon.addCurve(to: CGPoint(x: 16.35, y: 0), controlPoint1: CGPoint(x: 24.04, y: 3.44), controlPoint2: CGPoint(x: 20.59, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 8.65, y: 3.85))
        icon.addCurve(to: CGPoint(x: 0, y: 12.5), controlPoint1: CGPoint(x: 3.87, y: 3.85), controlPoint2: CGPoint(x: 0, y: 7.72))
        icon.addCurve(to: CGPoint(x: 8.65, y: 21.15), controlPoint1: CGPoint(x: 0, y: 17.28), controlPoint2: CGPoint(x: 3.87, y: 21.15))
        icon.addCurve(to: CGPoint(x: 17.31, y: 12.5), controlPoint1: CGPoint(x: 13.43, y: 21.15), controlPoint2: CGPoint(x: 17.31, y: 17.28))
        icon.addCurve(to: CGPoint(x: 8.65, y: 3.85), controlPoint1: CGPoint(x: 17.31, y: 7.72), controlPoint2: CGPoint(x: 13.43, y: 3.85))
        icon.close()
        icon.move(to: CGPoint(x: 7.69, y: 7.69))
        icon.addLine(to: CGPoint(x: 9.62, y: 7.69))
        icon.addLine(to: CGPoint(x: 9.62, y: 8.66))
        icon.addCurve(to: CGPoint(x: 11.66, y: 10.88), controlPoint1: CGPoint(x: 10.84, y: 8.94), controlPoint2: CGPoint(x: 11.63, y: 9.77))
        icon.addLine(to: CGPoint(x: 9.89, y: 10.88))
        icon.addCurve(to: CGPoint(x: 8.67, y: 9.98), controlPoint1: CGPoint(x: 9.85, y: 10.35), controlPoint2: CGPoint(x: 9.35, y: 9.98))
        icon.addCurve(to: CGPoint(x: 7.56, y: 10.8), controlPoint1: CGPoint(x: 8, y: 9.98), controlPoint2: CGPoint(x: 7.56, y: 10.3))
        icon.addCurve(to: CGPoint(x: 8.68, y: 11.61), controlPoint1: CGPoint(x: 7.56, y: 11.21), controlPoint2: CGPoint(x: 7.89, y: 11.45))
        icon.addLine(to: CGPoint(x: 9.65, y: 11.79))
        icon.addCurve(to: CGPoint(x: 11.8, y: 13.95), controlPoint1: CGPoint(x: 11.14, y: 12.08), controlPoint2: CGPoint(x: 11.8, y: 12.75))
        icon.addCurve(to: CGPoint(x: 9.62, y: 16.36), controlPoint1: CGPoint(x: 11.8, y: 15.23), controlPoint2: CGPoint(x: 10.99, y: 16.09))
        icon.addLine(to: CGPoint(x: 9.62, y: 17.31))
        icon.addLine(to: CGPoint(x: 7.69, y: 17.31))
        icon.addLine(to: CGPoint(x: 7.69, y: 16.37))
        icon.addCurve(to: CGPoint(x: 5.51, y: 14.12), controlPoint1: CGPoint(x: 6.35, y: 16.11), controlPoint2: CGPoint(x: 5.53, y: 15.31))
        icon.addLine(to: CGPoint(x: 7.33, y: 14.12))
        icon.addCurve(to: CGPoint(x: 8.71, y: 15.01), controlPoint1: CGPoint(x: 7.38, y: 14.66), controlPoint2: CGPoint(x: 7.92, y: 15.01))
        icon.addCurve(to: CGPoint(x: 9.92, y: 14.17), controlPoint1: CGPoint(x: 9.43, y: 15.01), controlPoint2: CGPoint(x: 9.92, y: 14.67))
        icon.addCurve(to: CGPoint(x: 8.73, y: 13.36), controlPoint1: CGPoint(x: 9.92, y: 13.76), controlPoint2: CGPoint(x: 9.59, y: 13.53))
        icon.addLine(to: CGPoint(x: 7.74, y: 13.16))
        icon.addCurve(to: CGPoint(x: 5.66, y: 10.97), controlPoint1: CGPoint(x: 6.37, y: 12.9), controlPoint2: CGPoint(x: 5.66, y: 12.15))
        icon.addCurve(to: CGPoint(x: 7.69, y: 8.65), controlPoint1: CGPoint(x: 5.66, y: 9.78), controlPoint2: CGPoint(x: 6.44, y: 8.93))
        icon.addLine(to: CGPoint(x: 7.69, y: 7.69))
        icon.close()
        icon.move(to: CGPoint(x: 19.04, y: 10.54))
        icon.addCurve(to: CGPoint(x: 19.23, y: 12.5), controlPoint1: CGPoint(x: 19.16, y: 11.17), controlPoint2: CGPoint(x: 19.23, y: 11.83))
        icon.addCurve(to: CGPoint(x: 18.04, y: 17.36), controlPoint1: CGPoint(x: 19.23, y: 14.25), controlPoint2: CGPoint(x: 18.8, y: 15.91))
        icon.addCurve(to: CGPoint(x: 18.53, y: 18.75), controlPoint1: CGPoint(x: 18.37, y: 17.71), controlPoint2: CGPoint(x: 18.53, y: 18.17))
        icon.addCurve(to: CGPoint(x: 16.35, y: 21.17), controlPoint1: CGPoint(x: 18.53, y: 20.04), controlPoint2: CGPoint(x: 17.72, y: 20.89))
        icon.addLine(to: CGPoint(x: 16.35, y: 22.12))
        icon.addLine(to: CGPoint(x: 14.42, y: 22.12))
        icon.addLine(to: CGPoint(x: 14.42, y: 21.35))
        icon.addCurve(to: CGPoint(x: 10.17, y: 22.95), controlPoint1: CGPoint(x: 13.17, y: 22.18), controlPoint2: CGPoint(x: 11.72, y: 22.73))
        icon.addCurve(to: CGPoint(x: 15.38, y: 25), controlPoint1: CGPoint(x: 11.54, y: 24.22), controlPoint2: CGPoint(x: 13.37, y: 25))
        icon.addCurve(to: CGPoint(x: 23.08, y: 17.31), controlPoint1: CGPoint(x: 19.63, y: 25), controlPoint2: CGPoint(x: 23.08, y: 21.56))
        icon.addCurve(to: CGPoint(x: 19.04, y: 10.54), controlPoint1: CGPoint(x: 23.08, y: 14.38), controlPoint2: CGPoint(x: 21.44, y: 11.84))
        icon.close()
        context.saveGState()
        context.translateBy(x: 1.5, y: 1)
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 1.5, y: 1))
        icon.addClip()
        
        // Empty.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarExchange2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 7.85, y: 0))
        icon.addCurve(to: CGPoint(x: 0, y: 7.85), controlPoint1: CGPoint(x: 3.51, y: 0), controlPoint2: CGPoint(x: 0, y: 3.51))
        icon.addCurve(to: CGPoint(x: 6.49, y: 15.57), controlPoint1: CGPoint(x: 0, y: 11.72), controlPoint2: CGPoint(x: 2.8, y: 14.92))
        icon.addCurve(to: CGPoint(x: 7.53, y: 11.75), controlPoint1: CGPoint(x: 6.57, y: 14.2), controlPoint2: CGPoint(x: 6.94, y: 12.91))
        icon.addCurve(to: CGPoint(x: 4.67, y: 9.13), controlPoint1: CGPoint(x: 5.98, y: 11.41), controlPoint2: CGPoint(x: 5.02, y: 10.52))
        icon.addLine(to: CGPoint(x: 3.76, y: 9.13))
        icon.addLine(to: CGPoint(x: 3.76, y: 8.21))
        icon.addLine(to: CGPoint(x: 4.54, y: 8.21))
        icon.addCurve(to: CGPoint(x: 4.52, y: 7.85), controlPoint1: CGPoint(x: 4.53, y: 8.1), controlPoint2: CGPoint(x: 4.52, y: 7.98))
        icon.addCurve(to: CGPoint(x: 4.53, y: 7.54), controlPoint1: CGPoint(x: 4.52, y: 7.74), controlPoint2: CGPoint(x: 4.53, y: 7.64))
        icon.addLine(to: CGPoint(x: 3.76, y: 7.54))
        icon.addLine(to: CGPoint(x: 3.76, y: 6.63))
        icon.addLine(to: CGPoint(x: 4.66, y: 6.63))
        icon.addCurve(to: CGPoint(x: 8.99, y: 3.79), controlPoint1: CGPoint(x: 5.08, y: 4.81), controlPoint2: CGPoint(x: 6.54, y: 3.79))
        icon.addCurve(to: CGPoint(x: 10.05, y: 3.89), controlPoint1: CGPoint(x: 9.39, y: 3.79), controlPoint2: CGPoint(x: 9.8, y: 3.83))
        icon.addLine(to: CGPoint(x: 10.05, y: 5.48))
        icon.addCurve(to: CGPoint(x: 9.03, y: 5.41), controlPoint1: CGPoint(x: 9.77, y: 5.43), controlPoint2: CGPoint(x: 9.45, y: 5.41))
        icon.addCurve(to: CGPoint(x: 6.76, y: 6.63), controlPoint1: CGPoint(x: 7.93, y: 5.41), controlPoint2: CGPoint(x: 7.14, y: 5.84))
        icon.addLine(to: CGPoint(x: 9.63, y: 6.63))
        icon.addLine(to: CGPoint(x: 9.63, y: 7.54))
        icon.addLine(to: CGPoint(x: 6.52, y: 7.54))
        icon.addCurve(to: CGPoint(x: 6.5, y: 7.84), controlPoint1: CGPoint(x: 6.5, y: 7.64), controlPoint2: CGPoint(x: 6.5, y: 7.74))
        icon.addCurve(to: CGPoint(x: 6.52, y: 8.21), controlPoint1: CGPoint(x: 6.5, y: 7.97), controlPoint2: CGPoint(x: 6.5, y: 8.09))
        icon.addLine(to: CGPoint(x: 9.63, y: 8.21))
        icon.addLine(to: CGPoint(x: 9.63, y: 9))
        icon.addCurve(to: CGPoint(x: 15.57, y: 6.49), controlPoint1: CGPoint(x: 11.22, y: 7.55), controlPoint2: CGPoint(x: 13.28, y: 6.63))
        icon.addCurve(to: CGPoint(x: 7.85, y: 0), controlPoint1: CGPoint(x: 14.92, y: 2.81), controlPoint2: CGPoint(x: 11.72, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 20.31, y: 0))
        icon.addLine(to: CGPoint(x: 17.54, y: 2.77))
        icon.addLine(to: CGPoint(x: 20.31, y: 5.54))
        icon.addLine(to: CGPoint(x: 20.31, y: 3.69))
        icon.addLine(to: CGPoint(x: 23.08, y: 3.69))
        icon.addLine(to: CGPoint(x: 23.08, y: 1.85))
        icon.addLine(to: CGPoint(x: 20.31, y: 1.85))
        icon.addLine(to: CGPoint(x: 20.31, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 16.15, y: 8.31))
        icon.addCurve(to: CGPoint(x: 8.31, y: 16.15), controlPoint1: CGPoint(x: 11.82, y: 8.31), controlPoint2: CGPoint(x: 8.31, y: 11.82))
        icon.addCurve(to: CGPoint(x: 16.15, y: 24), controlPoint1: CGPoint(x: 8.31, y: 20.49), controlPoint2: CGPoint(x: 11.82, y: 24))
        icon.addCurve(to: CGPoint(x: 24, y: 16.15), controlPoint1: CGPoint(x: 20.49, y: 24), controlPoint2: CGPoint(x: 24, y: 20.49))
        icon.addCurve(to: CGPoint(x: 16.15, y: 8.31), controlPoint1: CGPoint(x: 24, y: 11.82), controlPoint2: CGPoint(x: 20.49, y: 8.31))
        icon.close()
        icon.move(to: CGPoint(x: 6.8, y: 9.13))
        icon.addCurve(to: CGPoint(x: 8.49, y: 10.23), controlPoint1: CGPoint(x: 7.12, y: 9.75), controlPoint2: CGPoint(x: 7.71, y: 10.12))
        icon.addCurve(to: CGPoint(x: 9.48, y: 9.13), controlPoint1: CGPoint(x: 8.79, y: 9.84), controlPoint2: CGPoint(x: 9.13, y: 9.47))
        icon.addLine(to: CGPoint(x: 6.8, y: 9.13))
        icon.close()
        icon.move(to: CGPoint(x: 15.69, y: 11.08))
        icon.addLine(to: CGPoint(x: 16.62, y: 11.08))
        icon.addLine(to: CGPoint(x: 16.62, y: 12.03))
        icon.addCurve(to: CGPoint(x: 19.3, y: 14.46), controlPoint1: CGPoint(x: 18.2, y: 12.19), controlPoint2: CGPoint(x: 19.27, y: 13.13))
        icon.addLine(to: CGPoint(x: 17.45, y: 14.46))
        icon.addCurve(to: CGPoint(x: 16.17, y: 13.51), controlPoint1: CGPoint(x: 17.41, y: 13.9), controlPoint2: CGPoint(x: 16.88, y: 13.51))
        icon.addCurve(to: CGPoint(x: 15, y: 14.37), controlPoint1: CGPoint(x: 15.47, y: 13.51), controlPoint2: CGPoint(x: 15, y: 13.85))
        icon.addCurve(to: CGPoint(x: 16.18, y: 15.22), controlPoint1: CGPoint(x: 15, y: 14.8), controlPoint2: CGPoint(x: 15.35, y: 15.05))
        icon.addLine(to: CGPoint(x: 17.2, y: 15.41))
        icon.addCurve(to: CGPoint(x: 19.45, y: 17.67), controlPoint1: CGPoint(x: 18.76, y: 15.71), controlPoint2: CGPoint(x: 19.45, y: 16.42))
        icon.addCurve(to: CGPoint(x: 16.62, y: 20.28), controlPoint1: CGPoint(x: 19.45, y: 19.18), controlPoint2: CGPoint(x: 18.39, y: 20.13))
        icon.addLine(to: CGPoint(x: 16.62, y: 21.23))
        icon.addLine(to: CGPoint(x: 15.69, y: 21.23))
        icon.addLine(to: CGPoint(x: 15.69, y: 20.28))
        icon.addCurve(to: CGPoint(x: 12.85, y: 17.85), controlPoint1: CGPoint(x: 13.96, y: 20.15), controlPoint2: CGPoint(x: 12.88, y: 19.25))
        icon.addLine(to: CGPoint(x: 14.76, y: 17.85))
        icon.addCurve(to: CGPoint(x: 16.22, y: 18.79), controlPoint1: CGPoint(x: 14.81, y: 18.42), controlPoint2: CGPoint(x: 15.39, y: 18.79))
        icon.addCurve(to: CGPoint(x: 17.48, y: 17.91), controlPoint1: CGPoint(x: 16.97, y: 18.79), controlPoint2: CGPoint(x: 17.48, y: 18.43))
        icon.addCurve(to: CGPoint(x: 16.23, y: 17.06), controlPoint1: CGPoint(x: 17.48, y: 17.47), controlPoint2: CGPoint(x: 17.13, y: 17.24))
        icon.addLine(to: CGPoint(x: 15.2, y: 16.85))
        icon.addCurve(to: CGPoint(x: 13.01, y: 14.55), controlPoint1: CGPoint(x: 13.75, y: 16.58), controlPoint2: CGPoint(x: 13.01, y: 15.79))
        icon.addCurve(to: CGPoint(x: 15.69, y: 12.03), controlPoint1: CGPoint(x: 13.01, y: 13.14), controlPoint2: CGPoint(x: 14.06, y: 12.18))
        icon.addLine(to: CGPoint(x: 15.69, y: 11.08))
        icon.close()
        icon.move(to: CGPoint(x: 3.69, y: 17.54))
        icon.addLine(to: CGPoint(x: 3.69, y: 19.38))
        icon.addLine(to: CGPoint(x: 0.92, y: 19.38))
        icon.addLine(to: CGPoint(x: 0.92, y: 21.23))
        icon.addLine(to: CGPoint(x: 3.69, y: 21.23))
        icon.addLine(to: CGPoint(x: 3.69, y: 23.08))
        icon.addLine(to: CGPoint(x: 6.46, y: 20.31))
        icon.addLine(to: CGPoint(x: 3.69, y: 17.54))
        icon.close()
        context.saveGState()
        context.translateBy(x: 2, y: 2)
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 2, y: 2))
        icon.addClip()
        
        // Empty.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarCollection2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 0, y: 2))
        icon.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.89, y: 0))
        icon.addLine(to: CGPoint(x: 8, y: 0))
        icon.addCurve(to: CGPoint(x: 10, y: 2), controlPoint1: CGPoint(x: 9.1, y: 0), controlPoint2: CGPoint(x: 10, y: 0.89))
        icon.addLine(to: CGPoint(x: 10, y: 8))
        icon.addCurve(to: CGPoint(x: 8, y: 10), controlPoint1: CGPoint(x: 10, y: 9.1), controlPoint2: CGPoint(x: 9.11, y: 10))
        icon.addLine(to: CGPoint(x: 2, y: 10))
        icon.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 0.9, y: 10), controlPoint2: CGPoint(x: 0, y: 9.11))
        icon.addLine(to: CGPoint(x: 0, y: 2))
        icon.close()
        icon.move(to: CGPoint(x: 12, y: 2))
        icon.addCurve(to: CGPoint(x: 14, y: 0), controlPoint1: CGPoint(x: 12, y: 0.9), controlPoint2: CGPoint(x: 12.89, y: 0))
        icon.addLine(to: CGPoint(x: 20, y: 0))
        icon.addCurve(to: CGPoint(x: 22, y: 2), controlPoint1: CGPoint(x: 21.1, y: 0), controlPoint2: CGPoint(x: 22, y: 0.89))
        icon.addLine(to: CGPoint(x: 22, y: 8))
        icon.addCurve(to: CGPoint(x: 20, y: 10), controlPoint1: CGPoint(x: 22, y: 9.1), controlPoint2: CGPoint(x: 21.11, y: 10))
        icon.addLine(to: CGPoint(x: 14, y: 10))
        icon.addCurve(to: CGPoint(x: 12, y: 8), controlPoint1: CGPoint(x: 12.9, y: 10), controlPoint2: CGPoint(x: 12, y: 9.11))
        icon.addLine(to: CGPoint(x: 12, y: 2))
        icon.close()
        icon.move(to: CGPoint(x: 12, y: 14))
        icon.addCurve(to: CGPoint(x: 14, y: 12), controlPoint1: CGPoint(x: 12, y: 12.9), controlPoint2: CGPoint(x: 12.89, y: 12))
        icon.addLine(to: CGPoint(x: 20, y: 12))
        icon.addCurve(to: CGPoint(x: 22, y: 14), controlPoint1: CGPoint(x: 21.1, y: 12), controlPoint2: CGPoint(x: 22, y: 12.89))
        icon.addLine(to: CGPoint(x: 22, y: 20))
        icon.addCurve(to: CGPoint(x: 20, y: 22), controlPoint1: CGPoint(x: 22, y: 21.1), controlPoint2: CGPoint(x: 21.11, y: 22))
        icon.addLine(to: CGPoint(x: 14, y: 22))
        icon.addCurve(to: CGPoint(x: 12, y: 20), controlPoint1: CGPoint(x: 12.9, y: 22), controlPoint2: CGPoint(x: 12, y: 21.11))
        icon.addLine(to: CGPoint(x: 12, y: 14))
        icon.close()
        icon.move(to: CGPoint(x: 0, y: 14))
        icon.addCurve(to: CGPoint(x: 2, y: 12), controlPoint1: CGPoint(x: 0, y: 12.9), controlPoint2: CGPoint(x: 0.89, y: 12))
        icon.addLine(to: CGPoint(x: 8, y: 12))
        icon.addCurve(to: CGPoint(x: 10, y: 14), controlPoint1: CGPoint(x: 9.1, y: 12), controlPoint2: CGPoint(x: 10, y: 12.89))
        icon.addLine(to: CGPoint(x: 10, y: 20))
        icon.addCurve(to: CGPoint(x: 8, y: 22), controlPoint1: CGPoint(x: 10, y: 21.1), controlPoint2: CGPoint(x: 9.11, y: 22))
        icon.addLine(to: CGPoint(x: 2, y: 22))
        icon.addCurve(to: CGPoint(x: 0, y: 20), controlPoint1: CGPoint(x: 0.9, y: 22), controlPoint2: CGPoint(x: 0, y: 21.11))
        icon.addLine(to: CGPoint(x: 0, y: 14))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3, y: 3)
        icon.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3, y: 3))
        icon.addClip()
        
        // Empty.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarBook2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 21.79, y: 0))
        icon.addCurve(to: CGPoint(x: 27.69, y: 2.31), controlPoint1: CGPoint(x: 24.17, y: 0), controlPoint2: CGPoint(x: 26.3, y: 0.9))
        icon.addCurve(to: CGPoint(x: 28, y: 3.09), controlPoint1: CGPoint(x: 28, y: 2.62), controlPoint2: CGPoint(x: 28, y: 3.09))
        icon.addLine(to: CGPoint(x: 28, y: 9.85))
        icon.addLine(to: CGPoint(x: 28, y: 20.18))
        icon.addCurve(to: CGPoint(x: 27.59, y: 20.39), controlPoint1: CGPoint(x: 28.03, y: 20.36), controlPoint2: CGPoint(x: 27.73, y: 20.53))
        icon.addCurve(to: CGPoint(x: 26.11, y: 19.32), controlPoint1: CGPoint(x: 27.16, y: 19.98), controlPoint2: CGPoint(x: 26.66, y: 19.62))
        icon.addCurve(to: CGPoint(x: 21.13, y: 17.94), controlPoint1: CGPoint(x: 24.69, y: 18.45), controlPoint2: CGPoint(x: 22.98, y: 17.94))
        icon.addCurve(to: CGPoint(x: 21.01, y: 17.95), controlPoint1: CGPoint(x: 21.09, y: 17.94), controlPoint2: CGPoint(x: 21.05, y: 17.95))
        icon.addCurve(to: CGPoint(x: 20.9, y: 17.94), controlPoint1: CGPoint(x: 20.98, y: 17.95), controlPoint2: CGPoint(x: 20.94, y: 17.94))
        icon.addCurve(to: CGPoint(x: 19.54, y: 18.08), controlPoint1: CGPoint(x: 20.44, y: 17.94), controlPoint2: CGPoint(x: 19.98, y: 17.99))
        icon.addCurve(to: CGPoint(x: 14.66, y: 22.43), controlPoint1: CGPoint(x: 17.14, y: 18.55), controlPoint2: CGPoint(x: 15.26, y: 20.25))
        icon.addCurve(to: CGPoint(x: 14.65, y: 22.46), controlPoint1: CGPoint(x: 14.66, y: 22.44), controlPoint2: CGPoint(x: 14.65, y: 22.46))
        icon.addCurve(to: CGPoint(x: 14.57, y: 22.46), controlPoint1: CGPoint(x: 14.65, y: 22.5), controlPoint2: CGPoint(x: 14.58, y: 22.52))
        icon.addLine(to: CGPoint(x: 14.57, y: 8.25))
        icon.addLine(to: CGPoint(x: 14.57, y: 4.8))
        icon.addCurve(to: CGPoint(x: 14.92, y: 3.52), controlPoint1: CGPoint(x: 14.57, y: 4.15), controlPoint2: CGPoint(x: 14.87, y: 3.61))
        icon.addCurve(to: CGPoint(x: 21.79, y: 0), controlPoint1: CGPoint(x: 16.15, y: 1.44), controlPoint2: CGPoint(x: 18.76, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 6.21, y: 0))
        icon.addCurve(to: CGPoint(x: 13.08, y: 3.52), controlPoint1: CGPoint(x: 9.24, y: 0), controlPoint2: CGPoint(x: 11.85, y: 1.44))
        icon.addCurve(to: CGPoint(x: 13.43, y: 4.8), controlPoint1: CGPoint(x: 13.13, y: 3.61), controlPoint2: CGPoint(x: 13.43, y: 4.15))
        icon.addLine(to: CGPoint(x: 13.43, y: 8.25))
        icon.addLine(to: CGPoint(x: 13.43, y: 22.46))
        icon.addCurve(to: CGPoint(x: 13.35, y: 22.46), controlPoint1: CGPoint(x: 13.42, y: 22.52), controlPoint2: CGPoint(x: 13.35, y: 22.5))
        icon.addCurve(to: CGPoint(x: 13.34, y: 22.43), controlPoint1: CGPoint(x: 13.35, y: 22.46), controlPoint2: CGPoint(x: 13.34, y: 22.44))
        icon.addCurve(to: CGPoint(x: 8.46, y: 18.08), controlPoint1: CGPoint(x: 12.74, y: 20.25), controlPoint2: CGPoint(x: 10.86, y: 18.55))
        icon.addCurve(to: CGPoint(x: 7.1, y: 17.94), controlPoint1: CGPoint(x: 8.02, y: 17.99), controlPoint2: CGPoint(x: 7.56, y: 17.94))
        icon.addCurve(to: CGPoint(x: 6.99, y: 17.95), controlPoint1: CGPoint(x: 7.06, y: 17.94), controlPoint2: CGPoint(x: 7.02, y: 17.95))
        icon.addCurve(to: CGPoint(x: 6.87, y: 17.94), controlPoint1: CGPoint(x: 6.95, y: 17.95), controlPoint2: CGPoint(x: 6.91, y: 17.94))
        icon.addCurve(to: CGPoint(x: 1.89, y: 19.32), controlPoint1: CGPoint(x: 5.02, y: 17.94), controlPoint2: CGPoint(x: 3.31, y: 18.45))
        icon.addCurve(to: CGPoint(x: 0.41, y: 20.39), controlPoint1: CGPoint(x: 1.34, y: 19.62), controlPoint2: CGPoint(x: 0.84, y: 19.98))
        icon.addCurve(to: CGPoint(x: 0, y: 20.18), controlPoint1: CGPoint(x: 0.27, y: 20.53), controlPoint2: CGPoint(x: -0.03, y: 20.36))
        icon.addLine(to: CGPoint(x: 0, y: 9.85))
        icon.addLine(to: CGPoint(x: 0, y: 3.09))
        icon.addCurve(to: CGPoint(x: 0.31, y: 2.31), controlPoint1: CGPoint(x: 0, y: 3.09), controlPoint2: CGPoint(x: 0, y: 2.62))
        icon.addCurve(to: CGPoint(x: 6.21, y: 0), controlPoint1: CGPoint(x: 1.7, y: 0.9), controlPoint2: CGPoint(x: 3.83, y: 0))
        icon.close()
        context.saveGState()
        context.translateBy(x: 0, y: 3)
        icon.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 0, y: 3))
        icon.addClip()
        
        // Empty.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarRecents2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 13.38, y: 14.64))
        icon.addLine(to: CGPoint(x: 6.23, y: 14.64))
        icon.addCurve(to: CGPoint(x: 5.52, y: 13.93), controlPoint1: CGPoint(x: 5.84, y: 14.64), controlPoint2: CGPoint(x: 5.52, y: 14.32))
        icon.addCurve(to: CGPoint(x: 6.23, y: 13.22), controlPoint1: CGPoint(x: 5.52, y: 13.54), controlPoint2: CGPoint(x: 5.84, y: 13.22))
        icon.addLine(to: CGPoint(x: 11.96, y: 13.22))
        icon.addLine(to: CGPoint(x: 11.96, y: 4.49))
        icon.addCurve(to: CGPoint(x: 12.67, y: 3.78), controlPoint1: CGPoint(x: 11.96, y: 4.1), controlPoint2: CGPoint(x: 12.27, y: 3.78))
        icon.addCurve(to: CGPoint(x: 13.38, y: 4.49), controlPoint1: CGPoint(x: 13.06, y: 3.78), controlPoint2: CGPoint(x: 13.38, y: 4.1))
        icon.addLine(to: CGPoint(x: 13.38, y: 14.64))
        icon.close()
        icon.move(to: CGPoint(x: 12.5, y: 0))
        icon.addCurve(to: CGPoint(x: 0, y: 12.5), controlPoint1: CGPoint(x: 5.6, y: 0), controlPoint2: CGPoint(x: 0, y: 5.6))
        icon.addCurve(to: CGPoint(x: 12.5, y: 25), controlPoint1: CGPoint(x: 0, y: 19.4), controlPoint2: CGPoint(x: 5.6, y: 25))
        icon.addCurve(to: CGPoint(x: 25, y: 12.5), controlPoint1: CGPoint(x: 19.4, y: 25), controlPoint2: CGPoint(x: 25, y: 19.4))
        icon.addCurve(to: CGPoint(x: 12.5, y: 0), controlPoint1: CGPoint(x: 25, y: 5.6), controlPoint2: CGPoint(x: 19.4, y: 0))
        icon.close()
        context.saveGState()
        context.translateBy(x: 1.5, y: 1.5)
        icon.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 1.5, y: 1.5))
        icon.addClip()
        
        // Empty.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarMap2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 6.76, y: 5.87))
        icon.addCurve(to: CGPoint(x: 11.4, y: 0.15), controlPoint1: CGPoint(x: 7.79, y: 3.77), controlPoint2: CGPoint(x: 9.35, y: 1.84))
        icon.addLine(to: CGPoint(x: 11.42, y: 6.68))
        icon.addCurve(to: CGPoint(x: 6.76, y: 5.87), controlPoint1: CGPoint(x: 9.74, y: 6.62), controlPoint2: CGPoint(x: 8.17, y: 6.34))
        icon.close()
        icon.move(to: CGPoint(x: 5.2, y: 6.52))
        icon.addCurve(to: CGPoint(x: 4.15, y: 11.44), controlPoint1: CGPoint(x: 4.59, y: 8.08), controlPoint2: CGPoint(x: 4.24, y: 9.74))
        icon.addLine(to: CGPoint(x: 0, y: 11.44))
        icon.addCurve(to: CGPoint(x: 2.31, y: 4.81), controlPoint1: CGPoint(x: 0.11, y: 9.04), controlPoint2: CGPoint(x: 0.91, y: 6.75))
        icon.addCurve(to: CGPoint(x: 5.2, y: 6.52), controlPoint1: CGPoint(x: 3.18, y: 5.49), controlPoint2: CGPoint(x: 4.15, y: 6.06))
        icon.close()
        icon.move(to: CGPoint(x: 9.75, y: 0.01))
        icon.addCurve(to: CGPoint(x: 5.66, y: 5.44), controlPoint1: CGPoint(x: 7.99, y: 1.64), controlPoint2: CGPoint(x: 6.61, y: 3.46))
        icon.addCurve(to: CGPoint(x: 3.03, y: 3.89), controlPoint1: CGPoint(x: 4.71, y: 5.03), controlPoint2: CGPoint(x: 3.82, y: 4.5))
        icon.addCurve(to: CGPoint(x: 9.75, y: 0.01), controlPoint1: CGPoint(x: 4.8, y: 1.87), controlPoint2: CGPoint(x: 7.17, y: 0.51))
        icon.close()
        icon.move(to: CGPoint(x: 11.42, y: 23.99))
        icon.addCurve(to: CGPoint(x: 6.69, y: 18.44), controlPoint1: CGPoint(x: 9.32, y: 22.46), controlPoint2: CGPoint(x: 7.73, y: 20.59))
        icon.addCurve(to: CGPoint(x: 11.42, y: 17.58), controlPoint1: CGPoint(x: 8.14, y: 17.93), controlPoint2: CGPoint(x: 9.73, y: 17.65))
        icon.addLine(to: CGPoint(x: 11.42, y: 23.99))
        icon.close()
        icon.move(to: CGPoint(x: 12.56, y: 0.15))
        icon.addCurve(to: CGPoint(x: 17.26, y: 5.91), controlPoint1: CGPoint(x: 14.66, y: 1.88), controlPoint2: CGPoint(x: 16.24, y: 3.82))
        icon.addCurve(to: CGPoint(x: 12.58, y: 6.69), controlPoint1: CGPoint(x: 15.82, y: 6.39), controlPoint2: CGPoint(x: 14.24, y: 6.65))
        icon.addLine(to: CGPoint(x: 12.56, y: 0.15))
        icon.close()
        icon.move(to: CGPoint(x: 5.59, y: 18.88))
        icon.addCurve(to: CGPoint(x: 9.53, y: 24), controlPoint1: CGPoint(x: 6.51, y: 20.81), controlPoint2: CGPoint(x: 7.83, y: 22.53))
        icon.addCurve(to: CGPoint(x: 3.14, y: 20.29), controlPoint1: CGPoint(x: 7.09, y: 23.48), controlPoint2: CGPoint(x: 4.84, y: 22.18))
        icon.addCurve(to: CGPoint(x: 5.59, y: 18.88), controlPoint1: CGPoint(x: 3.91, y: 19.74), controlPoint2: CGPoint(x: 4.73, y: 19.26))
        icon.close()
        icon.move(to: CGPoint(x: 6.22, y: 17.35))
        icon.addCurve(to: CGPoint(x: 5.29, y: 12.62), controlPoint1: CGPoint(x: 5.65, y: 15.86), controlPoint2: CGPoint(x: 5.34, y: 14.26))
        icon.addLine(to: CGPoint(x: 11.42, y: 12.62))
        icon.addLine(to: CGPoint(x: 11.42, y: 16.41))
        icon.addCurve(to: CGPoint(x: 6.22, y: 17.35), controlPoint1: CGPoint(x: 9.57, y: 16.47), controlPoint2: CGPoint(x: 7.82, y: 16.79))
        icon.close()
        icon.move(to: CGPoint(x: 4.13, y: 12.62))
        icon.addCurve(to: CGPoint(x: 5.12, y: 17.79), controlPoint1: CGPoint(x: 4.18, y: 14.43), controlPoint2: CGPoint(x: 4.51, y: 16.17))
        icon.addCurve(to: CGPoint(x: 2.4, y: 19.38), controlPoint1: CGPoint(x: 4.16, y: 18.22), controlPoint2: CGPoint(x: 3.25, y: 18.76))
        icon.addCurve(to: CGPoint(x: 0, y: 12.62), controlPoint1: CGPoint(x: 0.94, y: 17.42), controlPoint2: CGPoint(x: 0.11, y: 15.08))
        icon.addLine(to: CGPoint(x: 4.13, y: 12.62))
        icon.close()
        icon.move(to: CGPoint(x: 5.31, y: 11.44))
        icon.addCurve(to: CGPoint(x: 6.28, y: 6.95), controlPoint1: CGPoint(x: 5.39, y: 9.89), controlPoint2: CGPoint(x: 5.72, y: 8.38))
        icon.addCurve(to: CGPoint(x: 11.42, y: 7.86), controlPoint1: CGPoint(x: 7.84, y: 7.48), controlPoint2: CGPoint(x: 9.56, y: 7.79))
        icon.addLine(to: CGPoint(x: 11.42, y: 11.44))
        icon.addLine(to: CGPoint(x: 5.31, y: 11.44))
        icon.close()
        icon.move(to: CGPoint(x: 18.35, y: 5.5))
        icon.addCurve(to: CGPoint(x: 14.21, y: 0), controlPoint1: CGPoint(x: 17.39, y: 3.5), controlPoint2: CGPoint(x: 16, y: 1.65))
        icon.addCurve(to: CGPoint(x: 21.04, y: 3.96), controlPoint1: CGPoint(x: 16.85, y: 0.5), controlPoint2: CGPoint(x: 19.26, y: 1.89))
        icon.addCurve(to: CGPoint(x: 18.35, y: 5.5), controlPoint1: CGPoint(x: 20.2, y: 4.58), controlPoint2: CGPoint(x: 19.3, y: 5.1))
        icon.close()
        icon.move(to: CGPoint(x: 14.48, y: 24))
        icon.addCurve(to: CGPoint(x: 18.45, y: 18.78), controlPoint1: CGPoint(x: 16.2, y: 22.51), controlPoint2: CGPoint(x: 17.54, y: 20.75))
        icon.addCurve(to: CGPoint(x: 20.93, y: 20.21), controlPoint1: CGPoint(x: 19.34, y: 19.17), controlPoint2: CGPoint(x: 20.18, y: 19.65))
        icon.addCurve(to: CGPoint(x: 14.48, y: 24), controlPoint1: CGPoint(x: 19.23, y: 22.14), controlPoint2: CGPoint(x: 16.96, y: 23.47))
        icon.close()
        icon.move(to: CGPoint(x: 18.91, y: 17.69))
        icon.addCurve(to: CGPoint(x: 19.87, y: 12.62), controlPoint1: CGPoint(x: 19.5, y: 16.09), controlPoint2: CGPoint(x: 19.82, y: 14.38))
        icon.addLine(to: CGPoint(x: 24, y: 12.62))
        icon.addCurve(to: CGPoint(x: 21.66, y: 19.3), controlPoint1: CGPoint(x: 23.89, y: 15.04), controlPoint2: CGPoint(x: 23.08, y: 17.35))
        icon.addCurve(to: CGPoint(x: 18.91, y: 17.69), controlPoint1: CGPoint(x: 20.82, y: 18.66), controlPoint2: CGPoint(x: 19.89, y: 18.12))
        icon.close()
        icon.move(to: CGPoint(x: 12.58, y: 7.86))
        icon.addCurve(to: CGPoint(x: 17.73, y: 6.99), controlPoint1: CGPoint(x: 14.41, y: 7.82), controlPoint2: CGPoint(x: 16.14, y: 7.53))
        icon.addCurve(to: CGPoint(x: 18.69, y: 11.44), controlPoint1: CGPoint(x: 18.29, y: 8.41), controlPoint2: CGPoint(x: 18.61, y: 9.91))
        icon.addLine(to: CGPoint(x: 12.58, y: 11.44))
        icon.addLine(to: CGPoint(x: 12.58, y: 7.86))
        icon.close()
        icon.move(to: CGPoint(x: 19.84, y: 11.44))
        icon.addCurve(to: CGPoint(x: 18.82, y: 6.58), controlPoint1: CGPoint(x: 19.76, y: 9.76), controlPoint2: CGPoint(x: 19.42, y: 8.13))
        icon.addCurve(to: CGPoint(x: 21.75, y: 4.89), controlPoint1: CGPoint(x: 19.84, y: 6.14), controlPoint2: CGPoint(x: 20.83, y: 5.57))
        icon.addCurve(to: CGPoint(x: 24, y: 11.44), controlPoint1: CGPoint(x: 23.11, y: 6.82), controlPoint2: CGPoint(x: 23.89, y: 9.07))
        icon.addLine(to: CGPoint(x: 19.84, y: 11.44))
        icon.close()
        icon.move(to: CGPoint(x: 12.58, y: 16.4))
        icon.addLine(to: CGPoint(x: 12.58, y: 12.62))
        icon.addLine(to: CGPoint(x: 18.71, y: 12.62))
        icon.addCurve(to: CGPoint(x: 17.8, y: 17.27), controlPoint1: CGPoint(x: 18.67, y: 14.23), controlPoint2: CGPoint(x: 18.36, y: 15.79))
        icon.addCurve(to: CGPoint(x: 12.58, y: 16.4), controlPoint1: CGPoint(x: 16.22, y: 16.73), controlPoint2: CGPoint(x: 14.47, y: 16.44))
        icon.close()
        icon.move(to: CGPoint(x: 12.58, y: 17.57))
        icon.addCurve(to: CGPoint(x: 17.34, y: 18.35), controlPoint1: CGPoint(x: 14.3, y: 17.62), controlPoint2: CGPoint(x: 15.9, y: 17.88))
        icon.addCurve(to: CGPoint(x: 12.58, y: 23.96), controlPoint1: CGPoint(x: 16.3, y: 20.52), controlPoint2: CGPoint(x: 14.7, y: 22.41))
        icon.addLine(to: CGPoint(x: 12.58, y: 17.57))
        icon.close()
        context.saveGState()
        context.translateBy(x: 2, y: 2)
        icon.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 2, y: 2))
        icon.addClip()
        
        // Empty.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarAlbums2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 10.5, y: 12.61))
        icon.addCurve(to: CGPoint(x: 11.28, y: 11.77), controlPoint1: CGPoint(x: 10.55, y: 12.2), controlPoint2: CGPoint(x: 10.88, y: 11.83))
        icon.addLine(to: CGPoint(x: 14.5, y: 11.21))
        icon.addCurve(to: CGPoint(x: 15, y: 10.62), controlPoint1: CGPoint(x: 14.78, y: 11.16), controlPoint2: CGPoint(x: 15, y: 10.89))
        icon.addLine(to: CGPoint(x: 15, y: 8.41))
        icon.addCurve(to: CGPoint(x: 14.5, y: 8.02), controlPoint1: CGPoint(x: 15, y: 8.13), controlPoint2: CGPoint(x: 14.79, y: 7.95))
        icon.addLine(to: CGPoint(x: 10.98, y: 8.78))
        icon.addCurve(to: CGPoint(x: 10, y: 9.98), controlPoint1: CGPoint(x: 10.44, y: 8.89), controlPoint2: CGPoint(x: 10, y: 9.43))
        icon.addLine(to: CGPoint(x: 10, y: 15.4))
        icon.addCurve(to: CGPoint(x: 9.01, y: 16.55), controlPoint1: CGPoint(x: 10, y: 15.96), controlPoint2: CGPoint(x: 9.56, y: 16.47))
        icon.addLine(to: CGPoint(x: 7.29, y: 16.82))
        icon.addCurve(to: CGPoint(x: 6, y: 18.32), controlPoint1: CGPoint(x: 6.57, y: 16.93), controlPoint2: CGPoint(x: 6, y: 17.6))
        icon.addLine(to: CGPoint(x: 6, y: 18.51))
        icon.addCurve(to: CGPoint(x: 7.5, y: 20), controlPoint1: CGPoint(x: 6, y: 19.34), controlPoint2: CGPoint(x: 6.67, y: 20))
        icon.addLine(to: CGPoint(x: 8.25, y: 20))
        icon.addCurve(to: CGPoint(x: 10.5, y: 17.76), controlPoint1: CGPoint(x: 9.5, y: 20), controlPoint2: CGPoint(x: 10.5, y: 19))
        icon.addLine(to: CGPoint(x: 10.5, y: 12.61))
        icon.close()
        icon.move(to: CGPoint(x: 0, y: 4))
        icon.addLine(to: CGPoint(x: 20, y: 4))
        icon.addLine(to: CGPoint(x: 20, y: 24))
        icon.addLine(to: CGPoint(x: 0, y: 24))
        icon.addLine(to: CGPoint(x: 0, y: 4))
        icon.close()
        icon.move(to: CGPoint(x: 1, y: 2))
        icon.addLine(to: CGPoint(x: 19, y: 2))
        icon.addLine(to: CGPoint(x: 19, y: 3))
        icon.addLine(to: CGPoint(x: 1, y: 3))
        icon.addLine(to: CGPoint(x: 1, y: 2))
        icon.close()
        icon.move(to: CGPoint(x: 2, y: 0))
        icon.addLine(to: CGPoint(x: 18, y: 0))
        icon.addLine(to: CGPoint(x: 18, y: 1))
        icon.addLine(to: CGPoint(x: 2, y: 1))
        icon.addLine(to: CGPoint(x: 2, y: 0))
        icon.close()
        context.saveGState()
        context.translateBy(x: 4, y: 2)
        icon.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4, y: 2))
        icon.addClip()
        
        // Empty.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarMusic2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 17.04, y: 0.03))
        icon.addLine(to: CGPoint(x: 6.79, y: 1.93))
        icon.addCurve(to: CGPoint(x: 5.81, y: 3.11), controlPoint1: CGPoint(x: 6.25, y: 2.04), controlPoint2: CGPoint(x: 5.81, y: 2.57))
        icon.addLine(to: CGPoint(x: 5.79, y: 4.54))
        icon.addLine(to: CGPoint(x: 5.79, y: 16.62))
        icon.addCurve(to: CGPoint(x: 4.82, y: 17.79), controlPoint1: CGPoint(x: 5.79, y: 17.14), controlPoint2: CGPoint(x: 5.35, y: 17.67))
        icon.addLine(to: CGPoint(x: 2.25, y: 18.39))
        icon.addCurve(to: CGPoint(x: 0, y: 21.1), controlPoint1: CGPoint(x: 1.01, y: 18.66), controlPoint2: CGPoint(x: 0, y: 19.88))
        icon.addLine(to: CGPoint(x: 0, y: 21.32))
        icon.addCurve(to: CGPoint(x: 2.5, y: 23.72), controlPoint1: CGPoint(x: 0, y: 22.65), controlPoint2: CGPoint(x: 1.12, y: 23.72))
        icon.addLine(to: CGPoint(x: 3.46, y: 23.72))
        icon.addCurve(to: CGPoint(x: 7.1, y: 20.14), controlPoint1: CGPoint(x: 5.37, y: 23.72), controlPoint2: CGPoint(x: 7.1, y: 21.98))
        icon.addLine(to: CGPoint(x: 7.1, y: 11.8))
        icon.addLine(to: CGPoint(x: 7.12, y: 10.95))
        icon.addLine(to: CGPoint(x: 7.12, y: 8.02))
        icon.addCurve(to: CGPoint(x: 7.89, y: 7.1), controlPoint1: CGPoint(x: 7.12, y: 7.6), controlPoint2: CGPoint(x: 7.47, y: 7.19))
        icon.addLine(to: CGPoint(x: 16.68, y: 5.82))
        icon.addCurve(to: CGPoint(x: 17.37, y: 6.36), controlPoint1: CGPoint(x: 17.04, y: 5.75), controlPoint2: CGPoint(x: 17.37, y: 6.01))
        icon.addCurve(to: CGPoint(x: 17.37, y: 10.03), controlPoint1: CGPoint(x: 17.37, y: 6.36), controlPoint2: CGPoint(x: 17.37, y: 8.81))
        icon.addCurve(to: CGPoint(x: 17.37, y: 13.7), controlPoint1: CGPoint(x: 17.37, y: 11.25), controlPoint2: CGPoint(x: 17.37, y: 13.7))
        icon.addCurve(to: CGPoint(x: 16.4, y: 14.86), controlPoint1: CGPoint(x: 17.37, y: 14.22), controlPoint2: CGPoint(x: 16.94, y: 14.75))
        icon.addLine(to: CGPoint(x: 13.74, y: 15.51))
        icon.addCurve(to: CGPoint(x: 11.5, y: 18.2), controlPoint1: CGPoint(x: 12.51, y: 15.78), controlPoint2: CGPoint(x: 11.5, y: 16.99))
        icon.addLine(to: CGPoint(x: 11.5, y: 18.43))
        icon.addCurve(to: CGPoint(x: 14.01, y: 20.84), controlPoint1: CGPoint(x: 11.5, y: 19.76), controlPoint2: CGPoint(x: 12.62, y: 20.84))
        icon.addLine(to: CGPoint(x: 15, y: 20.84))
        icon.addCurve(to: CGPoint(x: 18.5, y: 17.48), controlPoint1: CGPoint(x: 16.94, y: 20.84), controlPoint2: CGPoint(x: 18.5, y: 19.33))
        icon.addLine(to: CGPoint(x: 18.5, y: 1.93))
        icon.addLine(to: CGPoint(x: 18.5, y: 1.65))
        icon.addLine(to: CGPoint(x: 18.5, y: 1.16))
        icon.addCurve(to: CGPoint(x: 17.35, y: 0), controlPoint1: CGPoint(x: 18.5, y: 0.47), controlPoint2: CGPoint(x: 18, y: 0))
        icon.addCurve(to: CGPoint(x: 17.04, y: 0.03), controlPoint1: CGPoint(x: 17.25, y: 0), controlPoint2: CGPoint(x: 17.04, y: 0.03))
        icon.close()
        context.saveGState()
        context.translateBy(x: 4.5, y: 2)
        icon.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4.5, y: 2))
        icon.addClip()
        
        // Empty.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarNavigation2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 10.79, y: 19.21))
        icon.addLine(to: CGPoint(x: 10.79, y: 9.47))
        icon.addCurve(to: CGPoint(x: 10.5, y: 9.18), controlPoint1: CGPoint(x: 10.79, y: 9.31), controlPoint2: CGPoint(x: 10.66, y: 9.18))
        icon.addLine(to: CGPoint(x: 0.29, y: 9.18))
        icon.addCurve(to: CGPoint(x: 0.17, y: 8.63), controlPoint1: CGPoint(x: -0.02, y: 9.18), controlPoint2: CGPoint(x: -0.11, y: 8.75))
        icon.addLine(to: CGPoint(x: 19.59, y: 0.03))
        icon.addCurve(to: CGPoint(x: 19.97, y: 0.41), controlPoint1: CGPoint(x: 19.84, y: -0.08), controlPoint2: CGPoint(x: 20.08, y: 0.17))
        icon.addLine(to: CGPoint(x: 11.34, y: 19.33))
        icon.addCurve(to: CGPoint(x: 10.79, y: 19.21), controlPoint1: CGPoint(x: 11.22, y: 19.61), controlPoint2: CGPoint(x: 10.79, y: 19.52))
        context.saveGState()
        context.translateBy(x: 3.5, y: 4.5)
        icon.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3.5, y: 4.5))
        icon.addClip()
        
        // Empty.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarMore2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 3.5, y: 7))
        icon.addCurve(to: CGPoint(x: 0, y: 3.5), controlPoint1: CGPoint(x: 1.57, y: 7), controlPoint2: CGPoint(x: 0, y: 5.43))
        icon.addCurve(to: CGPoint(x: 3.5, y: 0), controlPoint1: CGPoint(x: 0, y: 1.57), controlPoint2: CGPoint(x: 1.57, y: 0))
        icon.addCurve(to: CGPoint(x: 7, y: 3.5), controlPoint1: CGPoint(x: 5.43, y: 0), controlPoint2: CGPoint(x: 7, y: 1.57))
        icon.addCurve(to: CGPoint(x: 3.5, y: 7), controlPoint1: CGPoint(x: 7, y: 5.43), controlPoint2: CGPoint(x: 5.43, y: 7))
        icon.close()
        icon.move(to: CGPoint(x: 12.5, y: 7))
        icon.addCurve(to: CGPoint(x: 9, y: 3.5), controlPoint1: CGPoint(x: 10.57, y: 7), controlPoint2: CGPoint(x: 9, y: 5.43))
        icon.addCurve(to: CGPoint(x: 12.5, y: 0), controlPoint1: CGPoint(x: 9, y: 1.57), controlPoint2: CGPoint(x: 10.57, y: 0))
        icon.addCurve(to: CGPoint(x: 16, y: 3.5), controlPoint1: CGPoint(x: 14.43, y: 0), controlPoint2: CGPoint(x: 16, y: 1.57))
        icon.addCurve(to: CGPoint(x: 12.5, y: 7), controlPoint1: CGPoint(x: 16, y: 5.43), controlPoint2: CGPoint(x: 14.43, y: 7))
        icon.close()
        icon.move(to: CGPoint(x: 21.5, y: 7))
        icon.addCurve(to: CGPoint(x: 18, y: 3.5), controlPoint1: CGPoint(x: 19.57, y: 7), controlPoint2: CGPoint(x: 18, y: 5.43))
        icon.addCurve(to: CGPoint(x: 21.5, y: 0), controlPoint1: CGPoint(x: 18, y: 1.57), controlPoint2: CGPoint(x: 19.57, y: 0))
        icon.addCurve(to: CGPoint(x: 25, y: 3.5), controlPoint1: CGPoint(x: 23.43, y: 0), controlPoint2: CGPoint(x: 25, y: 1.57))
        icon.addCurve(to: CGPoint(x: 21.5, y: 7), controlPoint1: CGPoint(x: 25, y: 5.43), controlPoint2: CGPoint(x: 23.43, y: 7))
        icon.close()
        context.saveGState()
        context.translateBy(x: 2, y: 11)
        icon.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 2, y: 11))
        icon.addClip()
        
        // Empty.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarMail2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 25.93, y: 0.65))
        icon.addLine(to: CGPoint(x: 26, y: 0.65))
        icon.addLine(to: CGPoint(x: 26, y: 15.67))
        icon.addLine(to: CGPoint(x: 25.99, y: 15.67))
        icon.addLine(to: CGPoint(x: 18.45, y: 8.26))
        icon.addCurve(to: CGPoint(x: 25.93, y: 0.65), controlPoint1: CGPoint(x: 24.04, y: 2.61), controlPoint2: CGPoint(x: 25.52, y: 1.08))
        icon.close()
        icon.move(to: CGPoint(x: 7.3, y: 0))
        icon.addCurve(to: CGPoint(x: 25.25, y: 0.01), controlPoint1: CGPoint(x: 14, y: 0), controlPoint2: CGPoint(x: 23.47, y: 0.01))
        icon.addLine(to: CGPoint(x: 15.63, y: 9.7))
        icon.addCurve(to: CGPoint(x: 13, y: 10.8), controlPoint1: CGPoint(x: 14.93, y: 10.41), controlPoint2: CGPoint(x: 13.99, y: 10.8))
        icon.addCurve(to: CGPoint(x: 10.37, y: 9.7), controlPoint1: CGPoint(x: 12.01, y: 10.8), controlPoint2: CGPoint(x: 11.07, y: 10.41))
        icon.addLine(to: CGPoint(x: 0.74, y: 0.01))
        icon.addCurve(to: CGPoint(x: 7.3, y: 0), controlPoint1: CGPoint(x: 1.31, y: 0), controlPoint2: CGPoint(x: 2.95, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 7.55, y: 8.32))
        icon.addLine(to: CGPoint(x: 0.01, y: 15.73))
        icon.addLine(to: CGPoint(x: 0, y: 15.73))
        icon.addLine(to: CGPoint(x: 0, y: 0.72))
        icon.addLine(to: CGPoint(x: 0.08, y: 0.72))
        icon.addCurve(to: CGPoint(x: 7.55, y: 8.32), controlPoint1: CGPoint(x: 0.48, y: 1.14), controlPoint2: CGPoint(x: 1.96, y: 2.67))
        icon.close()
        icon.move(to: CGPoint(x: 25.35, y: 16.49))
        icon.addLine(to: CGPoint(x: 25.35, y: 16.5))
        icon.addLine(to: CGPoint(x: 25.35, y: 16.5))
        icon.addLine(to: CGPoint(x: 0.65, y: 16.5))
        icon.addLine(to: CGPoint(x: 0.65, y: 16.5))
        icon.addLine(to: CGPoint(x: 0.65, y: 16.49))
        icon.addLine(to: CGPoint(x: 8.18, y: 9.08))
        icon.addLine(to: CGPoint(x: 9.73, y: 10.64))
        icon.addCurve(to: CGPoint(x: 13, y: 12.01), controlPoint1: CGPoint(x: 10.6, y: 11.52), controlPoint2: CGPoint(x: 11.76, y: 12.01))
        icon.addLine(to: CGPoint(x: 13, y: 12.01))
        icon.addCurve(to: CGPoint(x: 16.27, y: 10.64), controlPoint1: CGPoint(x: 14.24, y: 12.01), controlPoint2: CGPoint(x: 15.4, y: 11.52))
        icon.addLine(to: CGPoint(x: 17.82, y: 9.08))
        icon.addLine(to: CGPoint(x: 25.35, y: 16.49))
        icon.close()
        context.saveGState()
        context.translateBy(x: 1, y: 6)
        icon.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 1, y: 6))
        icon.addClip()
        
        // Empty.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarAddNumber2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 17.54, y: 2.97))
        icon.addLine(to: CGPoint(x: 19.76, y: 2.97))
        icon.addCurve(to: CGPoint(x: 20.51, y: 3.72), controlPoint1: CGPoint(x: 20.18, y: 2.97), controlPoint2: CGPoint(x: 20.51, y: 3.31))
        icon.addLine(to: CGPoint(x: 20.51, y: 3.84))
        icon.addCurve(to: CGPoint(x: 19.76, y: 4.59), controlPoint1: CGPoint(x: 20.51, y: 4.26), controlPoint2: CGPoint(x: 20.18, y: 4.59))
        icon.addLine(to: CGPoint(x: 17.54, y: 4.59))
        icon.addLine(to: CGPoint(x: 17.54, y: 6.82))
        icon.addCurve(to: CGPoint(x: 16.79, y: 7.57), controlPoint1: CGPoint(x: 17.54, y: 7.23), controlPoint2: CGPoint(x: 17.2, y: 7.57))
        icon.addLine(to: CGPoint(x: 16.67, y: 7.57))
        icon.addCurve(to: CGPoint(x: 15.92, y: 6.82), controlPoint1: CGPoint(x: 16.26, y: 7.57), controlPoint2: CGPoint(x: 15.92, y: 7.23))
        icon.addLine(to: CGPoint(x: 15.92, y: 4.59))
        icon.addLine(to: CGPoint(x: 13.7, y: 4.59))
        icon.addCurve(to: CGPoint(x: 12.95, y: 3.84), controlPoint1: CGPoint(x: 13.28, y: 4.59), controlPoint2: CGPoint(x: 12.95, y: 4.26))
        icon.addLine(to: CGPoint(x: 12.95, y: 3.72))
        icon.addCurve(to: CGPoint(x: 13.7, y: 2.97), controlPoint1: CGPoint(x: 12.95, y: 3.31), controlPoint2: CGPoint(x: 13.28, y: 2.97))
        icon.addLine(to: CGPoint(x: 15.92, y: 2.97))
        icon.addLine(to: CGPoint(x: 15.92, y: 0.75))
        icon.addCurve(to: CGPoint(x: 16.67, y: 0), controlPoint1: CGPoint(x: 15.92, y: 0.34), controlPoint2: CGPoint(x: 16.26, y: 0))
        icon.addLine(to: CGPoint(x: 16.79, y: 0))
        icon.addCurve(to: CGPoint(x: 17.54, y: 0.75), controlPoint1: CGPoint(x: 17.2, y: 0), controlPoint2: CGPoint(x: 17.54, y: 0.34))
        icon.addLine(to: CGPoint(x: 17.54, y: 2.97))
        icon.close()
        icon.move(to: CGPoint(x: 1.6, y: 8.08))
        icon.addCurve(to: CGPoint(x: 0, y: 3.13), controlPoint1: CGPoint(x: 0.44, y: 5.97), controlPoint2: CGPoint(x: 0, y: 4.27))
        icon.addCurve(to: CGPoint(x: 0.57, y: 1.39), controlPoint1: CGPoint(x: 0, y: 1.98), controlPoint2: CGPoint(x: 0.28, y: 1.65))
        icon.addCurve(to: CGPoint(x: 2.35, y: 0.18), controlPoint1: CGPoint(x: 0.85, y: 1.12), controlPoint2: CGPoint(x: 2.14, y: 0.33))
        icon.addCurve(to: CGPoint(x: 3.93, y: 0.5), controlPoint1: CGPoint(x: 2.57, y: 0.03), controlPoint2: CGPoint(x: 3.41, y: -0.26))
        icon.addCurve(to: CGPoint(x: 6.12, y: 3.78), controlPoint1: CGPoint(x: 4.46, y: 1.26), controlPoint2: CGPoint(x: 5.44, y: 2.77))
        icon.addCurve(to: CGPoint(x: 6.07, y: 6.21), controlPoint1: CGPoint(x: 7.19, y: 5.21), controlPoint2: CGPoint(x: 6.34, y: 5.84))
        icon.addCurve(to: CGPoint(x: 5.27, y: 7.92), controlPoint1: CGPoint(x: 5.56, y: 6.9), controlPoint2: CGPoint(x: 5.27, y: 7.08))
        icon.addCurve(to: CGPoint(x: 8.2, y: 11.78), controlPoint1: CGPoint(x: 5.27, y: 8.77), controlPoint2: CGPoint(x: 7.63, y: 11.19))
        icon.addCurve(to: CGPoint(x: 11.85, y: 14.55), controlPoint1: CGPoint(x: 8.76, y: 12.37), controlPoint2: CGPoint(x: 11.12, y: 14.44))
        icon.addCurve(to: CGPoint(x: 13.78, y: 13.69), controlPoint1: CGPoint(x: 12.58, y: 14.67), controlPoint2: CGPoint(x: 13.57, y: 13.88))
        icon.addCurve(to: CGPoint(x: 15.94, y: 13.76), controlPoint1: CGPoint(x: 14.84, y: 12.87), controlPoint2: CGPoint(x: 15.44, y: 13.49))
        icon.addCurve(to: CGPoint(x: 19.33, y: 15.88), controlPoint1: CGPoint(x: 16.43, y: 14.03), controlPoint2: CGPoint(x: 18.64, y: 15.41))
        icon.addCurve(to: CGPoint(x: 19.94, y: 17.07), controlPoint1: CGPoint(x: 19.98, y: 16.35), controlPoint2: CGPoint(x: 19.94, y: 17.07))
        icon.addCurve(to: CGPoint(x: 18.44, y: 19.45), controlPoint1: CGPoint(x: 19.94, y: 17.07), controlPoint2: CGPoint(x: 18.6, y: 19.19))
        icon.addCurve(to: CGPoint(x: 16.66, y: 20), controlPoint1: CGPoint(x: 18.24, y: 19.75), controlPoint2: CGPoint(x: 17.75, y: 20))
        icon.addCurve(to: CGPoint(x: 11.64, y: 18.27), controlPoint1: CGPoint(x: 15.57, y: 20), controlPoint2: CGPoint(x: 14.41, y: 19.8))
        icon.addCurve(to: CGPoint(x: 6.08, y: 13.92), controlPoint1: CGPoint(x: 9.37, y: 17.02), controlPoint2: CGPoint(x: 7.21, y: 15.06))
        icon.addCurve(to: CGPoint(x: 1.6, y: 8.08), controlPoint1: CGPoint(x: 4.91, y: 12.77), controlPoint2: CGPoint(x: 2.92, y: 10.48))
        icon.close()
        context.saveGState()
        context.translateBy(x: 4, y: 4)
        icon.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarSample(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 3, y: 2)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 12, y: 24))
            icon.addCurve(to: CGPoint(x: 0, y: 12), controlPoint1: CGPoint(x: 5.37, y: 24), controlPoint2: CGPoint(x: 0, y: 18.63))
            icon.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 0, y: 5.37), controlPoint2: CGPoint(x: 5.37, y: 0))
            icon.addCurve(to: CGPoint(x: 24, y: 12), controlPoint1: CGPoint(x: 18.63, y: 0), controlPoint2: CGPoint(x: 24, y: 5.37))
            icon.addCurve(to: CGPoint(x: 12, y: 24), controlPoint1: CGPoint(x: 24, y: 18.63), controlPoint2: CGPoint(x: 18.63, y: 24))
            icon.close()
            icon.move(to: CGPoint(x: 12, y: 22))
            icon.addCurve(to: CGPoint(x: 22, y: 12), controlPoint1: CGPoint(x: 17.52, y: 22), controlPoint2: CGPoint(x: 22, y: 17.52))
            icon.addCurve(to: CGPoint(x: 12, y: 2), controlPoint1: CGPoint(x: 22, y: 6.48), controlPoint2: CGPoint(x: 17.52, y: 2))
            icon.addCurve(to: CGPoint(x: 2, y: 12), controlPoint1: CGPoint(x: 6.48, y: 2), controlPoint2: CGPoint(x: 2, y: 6.48))
            icon.addCurve(to: CGPoint(x: 12, y: 22), controlPoint1: CGPoint(x: 2, y: 17.52), controlPoint2: CGPoint(x: 6.48, y: 22))
            icon.close()
            context.saveGState()
            icon.usesEvenOddFillRule = true
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarHeart(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 3, y: 3)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 11.5, y: 21))
            icon.addCurve(to: CGPoint(x: 11.5, y: 2.59), controlPoint1: CGPoint(x: 33.18, y: 6.4), controlPoint2: CGPoint(x: 18.9, y: -5.42))
            icon.addCurve(to: CGPoint(x: 11.5, y: 21), controlPoint1: CGPoint(x: 4.1, y: -5.42), controlPoint2: CGPoint(x: -10.18, y: 6.4))
            icon.close()
            context.saveGState()
            context.translateBy(x: 0.5, y: 0)
            icon.usesEvenOddFillRule = true
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
            
            /// Icon (Outline Mask)
            context.saveGState()
            icon.apply(CGAffineTransform(translationX: 0.5, y: 0))
            icon.addClip()
            
            // Empty.
            
            context.restoreGState()
            // End Icon (Outline Mask)
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarFavorite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 1, y: 1)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 26.95, y: 9.64))
            icon.addCurve(to: CGPoint(x: 26.02, y: 8.96), controlPoint1: CGPoint(x: 26.81, y: 9.23), controlPoint2: CGPoint(x: 26.45, y: 8.96))
            icon.addLine(to: CGPoint(x: 17.18, y: 8.94))
            icon.addLine(to: CGPoint(x: 14.4, y: 0.67))
            icon.addCurve(to: CGPoint(x: 13.46, y: 0), controlPoint1: CGPoint(x: 14.26, y: 0.26), controlPoint2: CGPoint(x: 13.9, y: -0.02))
            icon.addCurve(to: CGPoint(x: 12.53, y: 0.69), controlPoint1: CGPoint(x: 13.03, y: 0.01), controlPoint2: CGPoint(x: 12.66, y: 0.28))
            icon.addLine(to: CGPoint(x: 9.92, y: 8.94))
            icon.addLine(to: CGPoint(x: 0.99, y: 8.96))
            icon.addCurve(to: CGPoint(x: 0.05, y: 9.64), controlPoint1: CGPoint(x: 0.55, y: 8.96), controlPoint2: CGPoint(x: 0.19, y: 9.23))
            icon.addCurve(to: CGPoint(x: 0.4, y: 10.75), controlPoint1: CGPoint(x: -0.08, y: 10.06), controlPoint2: CGPoint(x: 0.05, y: 10.49))
            icon.addLine(to: CGPoint(x: 7.4, y: 15.95))
            icon.addLine(to: CGPoint(x: 4.65, y: 24.7))
            icon.addCurve(to: CGPoint(x: 5.01, y: 25.81), controlPoint1: CGPoint(x: 4.52, y: 25.12), controlPoint2: CGPoint(x: 4.66, y: 25.55))
            icon.addCurve(to: CGPoint(x: 5.59, y: 26), controlPoint1: CGPoint(x: 5.19, y: 25.93), controlPoint2: CGPoint(x: 5.39, y: 26))
            icon.addCurve(to: CGPoint(x: 6.16, y: 25.81), controlPoint1: CGPoint(x: 5.79, y: 26), controlPoint2: CGPoint(x: 5.99, y: 25.94))
            icon.addLine(to: CGPoint(x: 13.54, y: 20.57))
            icon.addLine(to: CGPoint(x: 20.84, y: 25.81))
            icon.addCurve(to: CGPoint(x: 21.99, y: 25.81), controlPoint1: CGPoint(x: 21.19, y: 26.06), controlPoint2: CGPoint(x: 21.64, y: 26.06))
            icon.addCurve(to: CGPoint(x: 22.35, y: 24.7), controlPoint1: CGPoint(x: 22.34, y: 25.55), controlPoint2: CGPoint(x: 22.48, y: 25.12))
            icon.addLine(to: CGPoint(x: 19.6, y: 15.95))
            icon.addLine(to: CGPoint(x: 26.6, y: 10.75))
            icon.addCurve(to: CGPoint(x: 26.95, y: 9.64), controlPoint1: CGPoint(x: 26.95, y: 10.49), controlPoint2: CGPoint(x: 27.08, y: 10.06))
            context.saveGState()
            context.translateBy(x: 0.5, y: 0)
            icon.usesEvenOddFillRule = true
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarHome(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 3, y: 2)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 18.45, y: 5.37))
            icon.addLine(to: CGPoint(x: 18.45, y: 5.2))
            icon.addCurve(to: CGPoint(x: 19.84, y: 3.81), controlPoint1: CGPoint(x: 18.45, y: 4.43), controlPoint2: CGPoint(x: 19.06, y: 3.81))
            icon.addCurve(to: CGPoint(x: 21.22, y: 5.2), controlPoint1: CGPoint(x: 20.6, y: 3.81), controlPoint2: CGPoint(x: 21.22, y: 4.42))
            icon.addLine(to: CGPoint(x: 21.22, y: 7.83))
            icon.addLine(to: CGPoint(x: 23.42, y: 9.78))
            icon.addCurve(to: CGPoint(x: 22.93, y: 11.11), controlPoint1: CGPoint(x: 24.25, y: 10.52), controlPoint2: CGPoint(x: 24.03, y: 11.11))
            icon.addLine(to: CGPoint(x: 21.22, y: 11.11))
            icon.addLine(to: CGPoint(x: 21.22, y: 21.98))
            icon.addCurve(to: CGPoint(x: 20.23, y: 22.98), controlPoint1: CGPoint(x: 21.22, y: 22.53), controlPoint2: CGPoint(x: 20.77, y: 22.98))
            icon.addLine(to: CGPoint(x: 3.71, y: 22.98))
            icon.addCurve(to: CGPoint(x: 2.71, y: 21.98), controlPoint1: CGPoint(x: 3.16, y: 22.98), controlPoint2: CGPoint(x: 2.71, y: 22.54))
            icon.addLine(to: CGPoint(x: 2.71, y: 11.11))
            icon.addLine(to: CGPoint(x: 0.99, y: 11.11))
            icon.addCurve(to: CGPoint(x: 0.5, y: 9.78), controlPoint1: CGPoint(x: -0.11, y: 11.11), controlPoint2: CGPoint(x: -0.33, y: 10.52))
            icon.addLine(to: CGPoint(x: 11.21, y: 0.28))
            icon.addCurve(to: CGPoint(x: 12.72, y: 0.28), controlPoint1: CGPoint(x: 11.63, y: -0.09), controlPoint2: CGPoint(x: 12.3, y: -0.09))
            icon.addLine(to: CGPoint(x: 18.45, y: 5.37))
            icon.close()
            icon.move(to: CGPoint(x: 14.74, y: 13.4))
            icon.addLine(to: CGPoint(x: 14.74, y: 20.11))
            icon.addLine(to: CGPoint(x: 18.45, y: 20.11))
            icon.addLine(to: CGPoint(x: 18.45, y: 13.4))
            icon.addLine(to: CGPoint(x: 14.74, y: 13.4))
            icon.close()
            context.saveGState()
            context.translateBy(x: 0.04, y: 0.02)
            icon.usesEvenOddFillRule = true
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarContacts(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 1, y: 4)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 28, y: 19.09))
            icon.addLine(to: CGPoint(x: 10.08, y: 19.09))
            icon.addCurve(to: CGPoint(x: 11.12, y: 16.29), controlPoint1: CGPoint(x: 10.08, y: 19.09), controlPoint2: CGPoint(x: 10.03, y: 17.33))
            icon.addCurve(to: CGPoint(x: 13.85, y: 15.16), controlPoint1: CGPoint(x: 12.28, y: 15.19), controlPoint2: CGPoint(x: 13.85, y: 15.16))
            icon.addCurve(to: CGPoint(x: 17.09, y: 13.79), controlPoint1: CGPoint(x: 15.61, y: 15.06), controlPoint2: CGPoint(x: 17.09, y: 13.79))
            icon.addLine(to: CGPoint(x: 17.09, y: 12.34))
            icon.addCurve(to: CGPoint(x: 14.25, y: 10.97), controlPoint1: CGPoint(x: 17.09, y: 12.34), controlPoint2: CGPoint(x: 14.97, y: 11.72))
            icon.addCurve(to: CGPoint(x: 14.84, y: 9.33), controlPoint1: CGPoint(x: 14.25, y: 10.97), controlPoint2: CGPoint(x: 14.72, y: 9.76))
            icon.addCurve(to: CGPoint(x: 14.9, y: 7.44), controlPoint1: CGPoint(x: 14.96, y: 8.9), controlPoint2: CGPoint(x: 14.96, y: 8.34))
            icon.addCurve(to: CGPoint(x: 14.86, y: 4.01), controlPoint1: CGPoint(x: 14.85, y: 6.53), controlPoint2: CGPoint(x: 14.69, y: 4.85))
            icon.addCurve(to: CGPoint(x: 16.27, y: 1.36), controlPoint1: CGPoint(x: 15.02, y: 3.16), controlPoint2: CGPoint(x: 15.5, y: 1.79))
            icon.addCurve(to: CGPoint(x: 17.95, y: 1.15), controlPoint1: CGPoint(x: 17.04, y: 0.94), controlPoint2: CGPoint(x: 17.95, y: 1.15))
            icon.addCurve(to: CGPoint(x: 19.24, y: 0.58), controlPoint1: CGPoint(x: 17.95, y: 1.15), controlPoint2: CGPoint(x: 18.49, y: 0.75))
            icon.addCurve(to: CGPoint(x: 21.36, y: 0.95), controlPoint1: CGPoint(x: 19.83, y: 0.45), controlPoint2: CGPoint(x: 20.84, y: 0.59))
            icon.addCurve(to: CGPoint(x: 22.87, y: 2.98), controlPoint1: CGPoint(x: 21.88, y: 1.32), controlPoint2: CGPoint(x: 22.59, y: 1.99))
            icon.addCurve(to: CGPoint(x: 23.08, y: 6.34), controlPoint1: CGPoint(x: 23.19, y: 4.1), controlPoint2: CGPoint(x: 23.2, y: 5.43))
            icon.addCurve(to: CGPoint(x: 23.1, y: 7.83), controlPoint1: CGPoint(x: 23.01, y: 6.84), controlPoint2: CGPoint(x: 23.06, y: 7.43))
            icon.addCurve(to: CGPoint(x: 23.49, y: 9.63), controlPoint1: CGPoint(x: 23.12, y: 8.12), controlPoint2: CGPoint(x: 23.26, y: 8.91))
            icon.addCurve(to: CGPoint(x: 24.11, y: 11.07), controlPoint1: CGPoint(x: 23.75, y: 10.47), controlPoint2: CGPoint(x: 24.11, y: 11.07))
            icon.addCurve(to: CGPoint(x: 22.78, y: 11.97), controlPoint1: CGPoint(x: 24.11, y: 11.07), controlPoint2: CGPoint(x: 23.82, y: 11.64))
            icon.addCurve(to: CGPoint(x: 20.99, y: 12.34), controlPoint1: CGPoint(x: 21.68, y: 12.32), controlPoint2: CGPoint(x: 20.99, y: 12.34))
            icon.addLine(to: CGPoint(x: 20.99, y: 13.79))
            icon.addCurve(to: CGPoint(x: 24.22, y: 15.16), controlPoint1: CGPoint(x: 20.99, y: 13.79), controlPoint2: CGPoint(x: 22.47, y: 15.06))
            icon.addCurve(to: CGPoint(x: 26.95, y: 16.29), controlPoint1: CGPoint(x: 24.22, y: 15.16), controlPoint2: CGPoint(x: 25.79, y: 15.19))
            icon.addCurve(to: CGPoint(x: 28, y: 19.09), controlPoint1: CGPoint(x: 28.04, y: 17.33), controlPoint2: CGPoint(x: 28, y: 19.09))
            icon.close()
            icon.move(to: CGPoint(x: 10.57, y: 15.67))
            icon.addCurve(to: CGPoint(x: 9.26, y: 19.09), controlPoint1: CGPoint(x: 9.25, y: 16.93), controlPoint2: CGPoint(x: 9.25, y: 18.92))
            icon.addLine(to: CGPoint(x: 0, y: 19.09))
            icon.addCurve(to: CGPoint(x: 1.59, y: 15.26), controlPoint1: CGPoint(x: 0, y: 19.09), controlPoint2: CGPoint(x: -0.11, y: 16.25))
            icon.addCurve(to: CGPoint(x: 6.04, y: 13.81), controlPoint1: CGPoint(x: 3.58, y: 14.11), controlPoint2: CGPoint(x: 5.46, y: 14.01))
            icon.addCurve(to: CGPoint(x: 7.15, y: 12.68), controlPoint1: CGPoint(x: 6.57, y: 13.63), controlPoint2: CGPoint(x: 7.15, y: 13.45))
            icon.addCurve(to: CGPoint(x: 6.98, y: 11.72), controlPoint1: CGPoint(x: 7.15, y: 11.92), controlPoint2: CGPoint(x: 7.16, y: 11.82))
            icon.addCurve(to: CGPoint(x: 6.38, y: 10.98), controlPoint1: CGPoint(x: 6.63, y: 11.52), controlPoint2: CGPoint(x: 6.42, y: 11.22))
            icon.addCurve(to: CGPoint(x: 6.14, y: 9.15), controlPoint1: CGPoint(x: 6.29, y: 10.54), controlPoint2: CGPoint(x: 6.25, y: 9.31))
            icon.addCurve(to: CGPoint(x: 5.76, y: 8.76), controlPoint1: CGPoint(x: 6.03, y: 8.99), controlPoint2: CGPoint(x: 5.83, y: 9.13))
            icon.addCurve(to: CGPoint(x: 5.63, y: 7.95), controlPoint1: CGPoint(x: 5.7, y: 8.4), controlPoint2: CGPoint(x: 5.7, y: 8.09))
            icon.addCurve(to: CGPoint(x: 5.48, y: 6.64), controlPoint1: CGPoint(x: 5.57, y: 7.81), controlPoint2: CGPoint(x: 5.33, y: 6.94))
            icon.addCurve(to: CGPoint(x: 5.85, y: 6.34), controlPoint1: CGPoint(x: 5.6, y: 6.37), controlPoint2: CGPoint(x: 5.84, y: 6.51))
            icon.addCurve(to: CGPoint(x: 5.72, y: 2.84), controlPoint1: CGPoint(x: 5.88, y: 6.07), controlPoint2: CGPoint(x: 5.39, y: 3.8))
            icon.addCurve(to: CGPoint(x: 6.79, y: 1.47), controlPoint1: CGPoint(x: 6.07, y: 1.84), controlPoint2: CGPoint(x: 6.44, y: 1.7))
            icon.addCurve(to: CGPoint(x: 8.21, y: 0.24), controlPoint1: CGPoint(x: 7.15, y: 1.25), controlPoint2: CGPoint(x: 7.37, y: 0.67))
            icon.addCurve(to: CGPoint(x: 10.7, y: 0.24), controlPoint1: CGPoint(x: 9.05, y: -0.19), controlPoint2: CGPoint(x: 10.28, y: 0.06))
            icon.addCurve(to: CGPoint(x: 13.03, y: 1.78), controlPoint1: CGPoint(x: 11.12, y: 0.42), controlPoint2: CGPoint(x: 12.79, y: 0.89))
            icon.addCurve(to: CGPoint(x: 13.62, y: 2.84), controlPoint1: CGPoint(x: 13.04, y: 1.79), controlPoint2: CGPoint(x: 13.43, y: 2.29))
            icon.addCurve(to: CGPoint(x: 13.49, y: 6.34), controlPoint1: CGPoint(x: 13.96, y: 3.8), controlPoint2: CGPoint(x: 13.46, y: 6.07))
            icon.addCurve(to: CGPoint(x: 13.87, y: 6.64), controlPoint1: CGPoint(x: 13.51, y: 6.51), controlPoint2: CGPoint(x: 13.74, y: 6.37))
            icon.addCurve(to: CGPoint(x: 13.71, y: 7.95), controlPoint1: CGPoint(x: 14.01, y: 6.94), controlPoint2: CGPoint(x: 13.78, y: 7.81))
            icon.addCurve(to: CGPoint(x: 13.58, y: 8.76), controlPoint1: CGPoint(x: 13.64, y: 8.09), controlPoint2: CGPoint(x: 13.64, y: 8.4))
            icon.addCurve(to: CGPoint(x: 13.2, y: 9.15), controlPoint1: CGPoint(x: 13.51, y: 9.13), controlPoint2: CGPoint(x: 13.31, y: 8.99))
            icon.addCurve(to: CGPoint(x: 12.96, y: 10.98), controlPoint1: CGPoint(x: 13.09, y: 9.31), controlPoint2: CGPoint(x: 13.05, y: 10.54))
            icon.addCurve(to: CGPoint(x: 12.36, y: 11.72), controlPoint1: CGPoint(x: 12.92, y: 11.22), controlPoint2: CGPoint(x: 12.71, y: 11.52))
            icon.addCurve(to: CGPoint(x: 12.19, y: 12.68), controlPoint1: CGPoint(x: 12.18, y: 11.82), controlPoint2: CGPoint(x: 12.19, y: 11.92))
            icon.addCurve(to: CGPoint(x: 13.31, y: 13.81), controlPoint1: CGPoint(x: 12.19, y: 13.45), controlPoint2: CGPoint(x: 12.77, y: 13.63))
            icon.addCurve(to: CGPoint(x: 14.75, y: 14.12), controlPoint1: CGPoint(x: 13.56, y: 13.9), controlPoint2: CGPoint(x: 14.09, y: 13.97))
            icon.addCurve(to: CGPoint(x: 13.84, y: 14.31), controlPoint1: CGPoint(x: 14.46, y: 14.22), controlPoint2: CGPoint(x: 14.16, y: 14.3))
            icon.addCurve(to: CGPoint(x: 10.57, y: 15.67), controlPoint1: CGPoint(x: 13.76, y: 14.32), controlPoint2: CGPoint(x: 11.94, y: 14.36))
            icon.close()
            context.saveGState()
            icon.usesEvenOddFillRule = true
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarMessages(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 2, y: 3)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 10.06, y: 20.54))
            icon.addCurve(to: CGPoint(x: 8.24, y: 20.76), controlPoint1: CGPoint(x: 9.37, y: 20.47), controlPoint2: CGPoint(x: 8.95, y: 20.54))
            icon.addCurve(to: CGPoint(x: 4.26, y: 22.16), controlPoint1: CGPoint(x: 7.39, y: 21.02), controlPoint2: CGPoint(x: 6.07, y: 22.16))
            icon.addCurve(to: CGPoint(x: 5.97, y: 19.6), controlPoint1: CGPoint(x: 4.16, y: 22.16), controlPoint2: CGPoint(x: 5.97, y: 20.7))
            icon.addLine(to: CGPoint(x: 5.97, y: 19.21))
            icon.addCurve(to: CGPoint(x: 0, y: 10.37), controlPoint1: CGPoint(x: 2.39, y: 17.39), controlPoint2: CGPoint(x: 0, y: 14.11))
            icon.addCurve(to: CGPoint(x: 12.5, y: 0), controlPoint1: CGPoint(x: 0, y: 4.64), controlPoint2: CGPoint(x: 5.6, y: 0))
            icon.addCurve(to: CGPoint(x: 25, y: 10.37), controlPoint1: CGPoint(x: 19.4, y: 0), controlPoint2: CGPoint(x: 25, y: 4.64))
            icon.addCurve(to: CGPoint(x: 12.5, y: 20.74), controlPoint1: CGPoint(x: 25, y: 16.1), controlPoint2: CGPoint(x: 19.4, y: 20.74))
            icon.addCurve(to: CGPoint(x: 10.06, y: 20.54), controlPoint1: CGPoint(x: 11.67, y: 20.74), controlPoint2: CGPoint(x: 10.85, y: 20.67))
            icon.addLine(to: CGPoint(x: 10.06, y: 20.54))
            icon.close()
            context.saveGState()
            context.translateBy(x: 0.5, y: -0)
            icon.usesEvenOddFillRule = true
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarCompose(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 4, y: 2)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 8.44, y: 15.28))
            icon.addLine(to: CGPoint(x: 18.98, y: 4.73))
            icon.addCurve(to: CGPoint(x: 18.63, y: 3.4), controlPoint1: CGPoint(x: 18.93, y: 4.06), controlPoint2: CGPoint(x: 18.81, y: 3.73))
            icon.addCurve(to: CGPoint(x: 17.6, y: 2.37), controlPoint1: CGPoint(x: 18.4, y: 2.95), controlPoint2: CGPoint(x: 18.05, y: 2.6))
            icon.addCurve(to: CGPoint(x: 16.27, y: 2.02), controlPoint1: CGPoint(x: 17.27, y: 2.19), controlPoint2: CGPoint(x: 16.94, y: 2.07))
            icon.addLine(to: CGPoint(x: 5.72, y: 12.56))
            icon.addCurve(to: CGPoint(x: 7.3, y: 13.71), controlPoint1: CGPoint(x: 6.23, y: 12.8), controlPoint2: CGPoint(x: 6.77, y: 13.18))
            icon.addCurve(to: CGPoint(x: 8.44, y: 15.28), controlPoint1: CGPoint(x: 7.83, y: 14.24), controlPoint2: CGPoint(x: 8.2, y: 14.77))
            icon.close()
            icon.move(to: CGPoint(x: 7.38, y: 16.34))
            icon.addCurve(to: CGPoint(x: 7.36, y: 16.28), controlPoint1: CGPoint(x: 7.37, y: 16.32), controlPoint2: CGPoint(x: 7.37, y: 16.3))
            icon.addCurve(to: CGPoint(x: 6.33, y: 14.67), controlPoint1: CGPoint(x: 7.18, y: 15.74), controlPoint2: CGPoint(x: 6.85, y: 15.19))
            icon.addCurve(to: CGPoint(x: 4.72, y: 13.64), controlPoint1: CGPoint(x: 5.81, y: 14.15), controlPoint2: CGPoint(x: 5.27, y: 13.82))
            icon.addCurve(to: CGPoint(x: 4.66, y: 13.62), controlPoint1: CGPoint(x: 4.7, y: 13.63), controlPoint2: CGPoint(x: 4.68, y: 13.63))
            icon.addLine(to: CGPoint(x: 4.37, y: 13.9))
            icon.addCurve(to: CGPoint(x: 4.01, y: 14.59), controlPoint1: CGPoint(x: 4.22, y: 14.06), controlPoint2: CGPoint(x: 4.05, y: 14.37))
            icon.addLine(to: CGPoint(x: 3.41, y: 17.59))
            icon.addLine(to: CGPoint(x: 6.41, y: 16.99))
            icon.addCurve(to: CGPoint(x: 7.1, y: 16.63), controlPoint1: CGPoint(x: 6.63, y: 16.95), controlPoint2: CGPoint(x: 6.94, y: 16.78))
            icon.addLine(to: CGPoint(x: 7.38, y: 16.34))
            icon.close()
            icon.move(to: CGPoint(x: 16.27, y: 2.02))
            icon.addLine(to: CGPoint(x: 17.75, y: 0.55))
            icon.addCurve(to: CGPoint(x: 20.44, y: 0.56), controlPoint1: CGPoint(x: 18.49, y: -0.18), controlPoint2: CGPoint(x: 19.7, y: -0.19))
            icon.addCurve(to: CGPoint(x: 20.45, y: 3.25), controlPoint1: CGPoint(x: 21.19, y: 1.31), controlPoint2: CGPoint(x: 21.19, y: 2.51))
            icon.addLine(to: CGPoint(x: 18.98, y: 4.73))
            icon.addCurve(to: CGPoint(x: 19, y: 5.5), controlPoint1: CGPoint(x: 18.99, y: 4.94), controlPoint2: CGPoint(x: 19, y: 5.2))
            icon.addLine(to: CGPoint(x: 19, y: 17.51))
            icon.addCurve(to: CGPoint(x: 18.63, y: 19.61), controlPoint1: CGPoint(x: 19, y: 18.72), controlPoint2: CGPoint(x: 18.87, y: 19.16))
            icon.addCurve(to: CGPoint(x: 17.6, y: 20.64), controlPoint1: CGPoint(x: 18.4, y: 20.05), controlPoint2: CGPoint(x: 18.05, y: 20.4))
            icon.addCurve(to: CGPoint(x: 15.5, y: 21), controlPoint1: CGPoint(x: 17.16, y: 20.88), controlPoint2: CGPoint(x: 16.72, y: 21))
            icon.addLine(to: CGPoint(x: 3.49, y: 21))
            icon.addCurve(to: CGPoint(x: 1.39, y: 20.64), controlPoint1: CGPoint(x: 2.28, y: 21), controlPoint2: CGPoint(x: 1.84, y: 20.88))
            icon.addCurve(to: CGPoint(x: 0.36, y: 19.61), controlPoint1: CGPoint(x: 0.95, y: 20.4), controlPoint2: CGPoint(x: 0.6, y: 20.05))
            icon.addCurve(to: CGPoint(x: 0, y: 17.51), controlPoint1: CGPoint(x: 0.13, y: 19.16), controlPoint2: CGPoint(x: 0, y: 18.72))
            icon.addLine(to: CGPoint(x: 0, y: 5.5))
            icon.addCurve(to: CGPoint(x: 0.36, y: 3.4), controlPoint1: CGPoint(x: 0, y: 4.28), controlPoint2: CGPoint(x: 0.13, y: 3.84))
            icon.addCurve(to: CGPoint(x: 1.39, y: 2.37), controlPoint1: CGPoint(x: 0.6, y: 2.95), controlPoint2: CGPoint(x: 0.95, y: 2.6))
            icon.addCurve(to: CGPoint(x: 3.49, y: 2), controlPoint1: CGPoint(x: 1.84, y: 2.13), controlPoint2: CGPoint(x: 2.28, y: 2))
            icon.addLine(to: CGPoint(x: 15.5, y: 2))
            icon.addCurve(to: CGPoint(x: 16.27, y: 2.02), controlPoint1: CGPoint(x: 15.8, y: 2), controlPoint2: CGPoint(x: 16.06, y: 2.01))
            icon.close()
            context.saveGState()
            context.translateBy(x: 0.5, y: 1)
            icon.usesEvenOddFillRule = true
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarDelete(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 7, y: 3)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 12, y: 2))
            icon.addLine(to: CGPoint(x: 15, y: 2))
            icon.addCurve(to: CGPoint(x: 16, y: 3), controlPoint1: CGPoint(x: 15.55, y: 2), controlPoint2: CGPoint(x: 16, y: 2.45))
            icon.addLine(to: CGPoint(x: 0, y: 3))
            icon.addCurve(to: CGPoint(x: 1, y: 2), controlPoint1: CGPoint(x: 0, y: 2.45), controlPoint2: CGPoint(x: 0.45, y: 2))
            icon.addLine(to: CGPoint(x: 4, y: 2))
            icon.addCurve(to: CGPoint(x: 6, y: 0), controlPoint1: CGPoint(x: 4, y: 0.9), controlPoint2: CGPoint(x: 4.9, y: 0))
            icon.addLine(to: CGPoint(x: 10, y: 0))
            icon.addCurve(to: CGPoint(x: 12, y: 2), controlPoint1: CGPoint(x: 11.1, y: 0), controlPoint2: CGPoint(x: 12, y: 0.9))
            icon.close()
            icon.move(to: CGPoint(x: 0.95, y: 3.92))
            icon.addLine(to: CGPoint(x: 15.02, y: 3.92))
            icon.addLine(to: CGPoint(x: 14.32, y: 20.74))
            icon.addCurve(to: CGPoint(x: 13.05, y: 22), controlPoint1: CGPoint(x: 14.32, y: 20.74), controlPoint2: CGPoint(x: 14.05, y: 22))
            icon.addLine(to: CGPoint(x: 2.95, y: 22))
            icon.addCurve(to: CGPoint(x: 1.68, y: 20.74), controlPoint1: CGPoint(x: 1.95, y: 22), controlPoint2: CGPoint(x: 1.68, y: 20.74))
            icon.addLine(to: CGPoint(x: 0.95, y: 3.92))
            icon.close()
            icon.move(to: CGPoint(x: 11.9, y: 6))
            icon.addLine(to: CGPoint(x: 10.9, y: 6))
            icon.addLine(to: CGPoint(x: 10.4, y: 20.44))
            icon.addLine(to: CGPoint(x: 11.4, y: 20.44))
            icon.addLine(to: CGPoint(x: 11.9, y: 6))
            icon.close()
            icon.move(to: CGPoint(x: 5.5, y: 20.44))
            icon.addLine(to: CGPoint(x: 5, y: 6))
            icon.addLine(to: CGPoint(x: 4, y: 6))
            icon.addLine(to: CGPoint(x: 4.5, y: 20.44))
            icon.addLine(to: CGPoint(x: 5.5, y: 20.44))
            icon.close()
            icon.move(to: CGPoint(x: 7.5, y: 6))
            icon.addLine(to: CGPoint(x: 7.5, y: 20.44))
            icon.addLine(to: CGPoint(x: 8.5, y: 20.44))
            icon.addLine(to: CGPoint(x: 8.5, y: 6))
            icon.addLine(to: CGPoint(x: 7.5, y: 6))
            icon.close()
            context.saveGState()
            icon.usesEvenOddFillRule = true
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarActivity(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 4, y: 1)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 7.94, y: 22.49))
            icon.addLine(to: CGPoint(x: 7.94, y: 21.86))
            icon.addLine(to: CGPoint(x: 12.94, y: 21.86))
            icon.addLine(to: CGPoint(x: 12.94, y: 22.49))
            icon.addCurve(to: CGPoint(x: 10.44, y: 25), controlPoint1: CGPoint(x: 12.94, y: 23.87), controlPoint2: CGPoint(x: 11.82, y: 25))
            icon.addCurve(to: CGPoint(x: 7.94, y: 22.49), controlPoint1: CGPoint(x: 9.06, y: 25), controlPoint2: CGPoint(x: 7.94, y: 23.87))
            icon.close()
            icon.move(to: CGPoint(x: 20.65, y: 18.87))
            icon.addCurve(to: CGPoint(x: 21, y: 19.61), controlPoint1: CGPoint(x: 20.86, y: 19.05), controlPoint2: CGPoint(x: 21, y: 19.31))
            icon.addCurve(to: CGPoint(x: 20.02, y: 20.6), controlPoint1: CGPoint(x: 21, y: 20.16), controlPoint2: CGPoint(x: 20.56, y: 20.6))
            icon.addCurve(to: CGPoint(x: 19.99, y: 20.59), controlPoint1: CGPoint(x: 20.01, y: 20.6), controlPoint2: CGPoint(x: 20, y: 20.59))
            icon.addCurve(to: CGPoint(x: 19.97, y: 20.6), controlPoint1: CGPoint(x: 19.98, y: 20.59), controlPoint2: CGPoint(x: 19.98, y: 20.6))
            icon.addLine(to: CGPoint(x: 11.39, y: 20.6))
            icon.addLine(to: CGPoint(x: 10.56, y: 20.6))
            icon.addLine(to: CGPoint(x: 0.99, y: 20.6))
            icon.addCurve(to: CGPoint(x: 0.98, y: 20.59), controlPoint1: CGPoint(x: 0.99, y: 20.6), controlPoint2: CGPoint(x: 0.98, y: 20.59))
            icon.addCurve(to: CGPoint(x: 0.98, y: 20.6), controlPoint1: CGPoint(x: 0.98, y: 20.59), controlPoint2: CGPoint(x: 0.98, y: 20.6))
            icon.addCurve(to: CGPoint(x: 0.95, y: 20.59), controlPoint1: CGPoint(x: 0.97, y: 20.6), controlPoint2: CGPoint(x: 0.96, y: 20.59))
            icon.addCurve(to: CGPoint(x: 0.77, y: 20.55), controlPoint1: CGPoint(x: 0.88, y: 20.59), controlPoint2: CGPoint(x: 0.83, y: 20.57))
            icon.addCurve(to: CGPoint(x: 0, y: 19.61), controlPoint1: CGPoint(x: 0.33, y: 20.45), controlPoint2: CGPoint(x: 0, y: 20.08))
            icon.addCurve(to: CGPoint(x: 0.14, y: 19.14), controlPoint1: CGPoint(x: 0, y: 19.44), controlPoint2: CGPoint(x: 0.06, y: 19.28))
            icon.addCurve(to: CGPoint(x: 1.85, y: 17.33), controlPoint1: CGPoint(x: 0.34, y: 18.67), controlPoint2: CGPoint(x: 1.03, y: 18.29))
            icon.addCurve(to: CGPoint(x: 3.66, y: 11.71), controlPoint1: CGPoint(x: 3.01, y: 15.96), controlPoint2: CGPoint(x: 3.66, y: 13.67))
            icon.addCurve(to: CGPoint(x: 3.67, y: 8.44), controlPoint1: CGPoint(x: 3.66, y: 11.71), controlPoint2: CGPoint(x: 3.66, y: 9.26))
            icon.addCurve(to: CGPoint(x: 8.41, y: 2.08), controlPoint1: CGPoint(x: 3.73, y: 5.41), controlPoint2: CGPoint(x: 5.66, y: 2.91))
            icon.addLine(to: CGPoint(x: 8.45, y: 2.08))
            icon.addCurve(to: CGPoint(x: 9.02, y: 1.92), controlPoint1: CGPoint(x: 8.63, y: 2.02), controlPoint2: CGPoint(x: 8.82, y: 1.96))
            icon.addLine(to: CGPoint(x: 9.02, y: 1.49))
            icon.addCurve(to: CGPoint(x: 10.51, y: 0), controlPoint1: CGPoint(x: 9.02, y: 0.67), controlPoint2: CGPoint(x: 9.69, y: 0))
            icon.addCurve(to: CGPoint(x: 11.99, y: 1.49), controlPoint1: CGPoint(x: 11.32, y: 0), controlPoint2: CGPoint(x: 11.99, y: 0.67))
            icon.addLine(to: CGPoint(x: 11.99, y: 1.93))
            icon.addCurve(to: CGPoint(x: 12.5, y: 2.08), controlPoint1: CGPoint(x: 12.16, y: 1.97), controlPoint2: CGPoint(x: 12.33, y: 2.03))
            icon.addLine(to: CGPoint(x: 12.55, y: 2.08))
            icon.addCurve(to: CGPoint(x: 17.28, y: 8.44), controlPoint1: CGPoint(x: 15.29, y: 2.91), controlPoint2: CGPoint(x: 17.22, y: 5.41))
            icon.addCurve(to: CGPoint(x: 17.3, y: 11.71), controlPoint1: CGPoint(x: 17.3, y: 9.26), controlPoint2: CGPoint(x: 17.3, y: 11.71))
            icon.addCurve(to: CGPoint(x: 19.11, y: 17.33), controlPoint1: CGPoint(x: 17.3, y: 13.67), controlPoint2: CGPoint(x: 17.95, y: 15.96))
            icon.addCurve(to: CGPoint(x: 20.65, y: 18.87), controlPoint1: CGPoint(x: 19.77, y: 18.11), controlPoint2: CGPoint(x: 20.34, y: 18.5))
            icon.close()
            context.saveGState()
            context.translateBy(x: 0.5, y: 0.5)
            icon.usesEvenOddFillRule = true
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarSettings(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 1, y: 0)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 13.5, y: 0))
            icon.addCurve(to: CGPoint(x: 12.46, y: 1.04), controlPoint1: CGPoint(x: 12.93, y: 0), controlPoint2: CGPoint(x: 12.46, y: 0.46))
            icon.addLine(to: CGPoint(x: 12.46, y: 1.22))
            icon.addCurve(to: CGPoint(x: 11.62, y: 2.24), controlPoint1: CGPoint(x: 12.46, y: 1.71), controlPoint2: CGPoint(x: 12.11, y: 2.16))
            icon.addCurve(to: CGPoint(x: 10.92, y: 2.37), controlPoint1: CGPoint(x: 11.38, y: 2.27), controlPoint2: CGPoint(x: 11.15, y: 2.32))
            icon.addCurve(to: CGPoint(x: 9.76, y: 1.75), controlPoint1: CGPoint(x: 10.43, y: 2.48), controlPoint2: CGPoint(x: 9.95, y: 2.21))
            icon.addLine(to: CGPoint(x: 9.69, y: 1.59))
            icon.addCurve(to: CGPoint(x: 8.33, y: 1.03), controlPoint1: CGPoint(x: 9.47, y: 1.06), controlPoint2: CGPoint(x: 8.86, y: 0.81))
            icon.addCurve(to: CGPoint(x: 7.77, y: 2.38), controlPoint1: CGPoint(x: 7.8, y: 1.25), controlPoint2: CGPoint(x: 7.55, y: 1.85))
            icon.addLine(to: CGPoint(x: 7.84, y: 2.55))
            icon.addCurve(to: CGPoint(x: 7.46, y: 3.81), controlPoint1: CGPoint(x: 8.03, y: 3.01), controlPoint2: CGPoint(x: 7.88, y: 3.55))
            icon.addCurve(to: CGPoint(x: 6.86, y: 4.21), controlPoint1: CGPoint(x: 7.25, y: 3.94), controlPoint2: CGPoint(x: 7.05, y: 4.07))
            icon.addCurve(to: CGPoint(x: 5.55, y: 4.08), controlPoint1: CGPoint(x: 6.46, y: 4.5), controlPoint2: CGPoint(x: 5.9, y: 4.43))
            icon.addLine(to: CGPoint(x: 5.42, y: 3.96))
            icon.addCurve(to: CGPoint(x: 3.96, y: 3.96), controlPoint1: CGPoint(x: 5.02, y: 3.55), controlPoint2: CGPoint(x: 4.36, y: 3.55))
            icon.addCurve(to: CGPoint(x: 3.96, y: 5.42), controlPoint1: CGPoint(x: 3.55, y: 4.36), controlPoint2: CGPoint(x: 3.55, y: 5.02))
            icon.addLine(to: CGPoint(x: 4.08, y: 5.55))
            icon.addCurve(to: CGPoint(x: 4.21, y: 6.86), controlPoint1: CGPoint(x: 4.43, y: 5.9), controlPoint2: CGPoint(x: 4.5, y: 6.46))
            icon.addCurve(to: CGPoint(x: 3.81, y: 7.46), controlPoint1: CGPoint(x: 4.07, y: 7.05), controlPoint2: CGPoint(x: 3.94, y: 7.25))
            icon.addCurve(to: CGPoint(x: 2.55, y: 7.84), controlPoint1: CGPoint(x: 3.55, y: 7.88), controlPoint2: CGPoint(x: 3.01, y: 8.03))
            icon.addLine(to: CGPoint(x: 2.38, y: 7.77))
            icon.addCurve(to: CGPoint(x: 1.03, y: 8.34), controlPoint1: CGPoint(x: 1.86, y: 7.55), controlPoint2: CGPoint(x: 1.25, y: 7.8))
            icon.addCurve(to: CGPoint(x: 1.59, y: 9.69), controlPoint1: CGPoint(x: 0.81, y: 8.86), controlPoint2: CGPoint(x: 1.06, y: 9.47))
            icon.addLine(to: CGPoint(x: 1.75, y: 9.76))
            icon.addCurve(to: CGPoint(x: 2.37, y: 10.92), controlPoint1: CGPoint(x: 2.21, y: 9.95), controlPoint2: CGPoint(x: 2.48, y: 10.43))
            icon.addCurve(to: CGPoint(x: 2.23, y: 11.62), controlPoint1: CGPoint(x: 2.32, y: 11.15), controlPoint2: CGPoint(x: 2.27, y: 11.38))
            icon.addCurve(to: CGPoint(x: 1.22, y: 12.46), controlPoint1: CGPoint(x: 2.16, y: 12.11), controlPoint2: CGPoint(x: 1.71, y: 12.46))
            icon.addLine(to: CGPoint(x: 1.04, y: 12.46))
            icon.addCurve(to: CGPoint(x: 0, y: 13.5), controlPoint1: CGPoint(x: 0.46, y: 12.46), controlPoint2: CGPoint(x: 0, y: 12.93))
            icon.addCurve(to: CGPoint(x: 1.04, y: 14.54), controlPoint1: CGPoint(x: 0, y: 14.07), controlPoint2: CGPoint(x: 0.46, y: 14.54))
            icon.addLine(to: CGPoint(x: 1.22, y: 14.54))
            icon.addCurve(to: CGPoint(x: 2.24, y: 15.38), controlPoint1: CGPoint(x: 1.71, y: 14.54), controlPoint2: CGPoint(x: 2.16, y: 14.89))
            icon.addCurve(to: CGPoint(x: 2.37, y: 16.08), controlPoint1: CGPoint(x: 2.27, y: 15.62), controlPoint2: CGPoint(x: 2.32, y: 15.85))
            icon.addCurve(to: CGPoint(x: 1.75, y: 17.24), controlPoint1: CGPoint(x: 2.48, y: 16.57), controlPoint2: CGPoint(x: 2.21, y: 17.05))
            icon.addLine(to: CGPoint(x: 1.59, y: 17.31))
            icon.addCurve(to: CGPoint(x: 1.03, y: 18.67), controlPoint1: CGPoint(x: 1.06, y: 17.53), controlPoint2: CGPoint(x: 0.81, y: 18.14))
            icon.addCurve(to: CGPoint(x: 2.38, y: 19.23), controlPoint1: CGPoint(x: 1.25, y: 19.2), controlPoint2: CGPoint(x: 1.85, y: 19.45))
            icon.addLine(to: CGPoint(x: 2.55, y: 19.16))
            icon.addCurve(to: CGPoint(x: 3.81, y: 19.54), controlPoint1: CGPoint(x: 3.01, y: 18.97), controlPoint2: CGPoint(x: 3.55, y: 19.12))
            icon.addCurve(to: CGPoint(x: 4.21, y: 20.14), controlPoint1: CGPoint(x: 3.94, y: 19.75), controlPoint2: CGPoint(x: 4.07, y: 19.95))
            icon.addCurve(to: CGPoint(x: 4.08, y: 21.45), controlPoint1: CGPoint(x: 4.5, y: 20.55), controlPoint2: CGPoint(x: 4.43, y: 21.1))
            icon.addLine(to: CGPoint(x: 3.96, y: 21.58))
            icon.addCurve(to: CGPoint(x: 3.96, y: 23.04), controlPoint1: CGPoint(x: 3.55, y: 21.98), controlPoint2: CGPoint(x: 3.55, y: 22.64))
            icon.addCurve(to: CGPoint(x: 5.42, y: 23.04), controlPoint1: CGPoint(x: 4.36, y: 23.45), controlPoint2: CGPoint(x: 5.02, y: 23.45))
            icon.addLine(to: CGPoint(x: 5.55, y: 22.92))
            icon.addCurve(to: CGPoint(x: 6.86, y: 22.79), controlPoint1: CGPoint(x: 5.9, y: 22.57), controlPoint2: CGPoint(x: 6.46, y: 22.5))
            icon.addCurve(to: CGPoint(x: 7.46, y: 23.19), controlPoint1: CGPoint(x: 7.06, y: 22.93), controlPoint2: CGPoint(x: 7.26, y: 23.06))
            icon.addCurve(to: CGPoint(x: 7.84, y: 24.45), controlPoint1: CGPoint(x: 7.88, y: 23.45), controlPoint2: CGPoint(x: 8.03, y: 23.99))
            icon.addLine(to: CGPoint(x: 7.77, y: 24.62))
            icon.addCurve(to: CGPoint(x: 8.34, y: 25.98), controlPoint1: CGPoint(x: 7.55, y: 25.15), controlPoint2: CGPoint(x: 7.81, y: 25.75))
            icon.addCurve(to: CGPoint(x: 9.69, y: 25.41), controlPoint1: CGPoint(x: 8.87, y: 26.19), controlPoint2: CGPoint(x: 9.47, y: 25.94))
            icon.addLine(to: CGPoint(x: 9.76, y: 25.25))
            icon.addCurve(to: CGPoint(x: 10.92, y: 24.63), controlPoint1: CGPoint(x: 9.95, y: 24.8), controlPoint2: CGPoint(x: 10.44, y: 24.52))
            icon.addCurve(to: CGPoint(x: 11.62, y: 24.77), controlPoint1: CGPoint(x: 11.15, y: 24.68), controlPoint2: CGPoint(x: 11.38, y: 24.73))
            icon.addCurve(to: CGPoint(x: 12.46, y: 25.78), controlPoint1: CGPoint(x: 12.11, y: 24.84), controlPoint2: CGPoint(x: 12.46, y: 25.29))
            icon.addLine(to: CGPoint(x: 12.46, y: 25.96))
            icon.addCurve(to: CGPoint(x: 13.5, y: 27), controlPoint1: CGPoint(x: 12.46, y: 26.54), controlPoint2: CGPoint(x: 12.93, y: 27))
            icon.addCurve(to: CGPoint(x: 14.54, y: 25.96), controlPoint1: CGPoint(x: 14.07, y: 27), controlPoint2: CGPoint(x: 14.54, y: 26.54))
            icon.addLine(to: CGPoint(x: 14.54, y: 25.78))
            icon.addCurve(to: CGPoint(x: 15.38, y: 24.76), controlPoint1: CGPoint(x: 14.54, y: 25.29), controlPoint2: CGPoint(x: 14.89, y: 24.84))
            icon.addCurve(to: CGPoint(x: 16.08, y: 24.63), controlPoint1: CGPoint(x: 15.62, y: 24.73), controlPoint2: CGPoint(x: 15.85, y: 24.68))
            icon.addCurve(to: CGPoint(x: 17.24, y: 25.25), controlPoint1: CGPoint(x: 16.57, y: 24.52), controlPoint2: CGPoint(x: 17.05, y: 24.79))
            icon.addLine(to: CGPoint(x: 17.31, y: 25.41))
            icon.addCurve(to: CGPoint(x: 18.67, y: 25.97), controlPoint1: CGPoint(x: 17.53, y: 25.94), controlPoint2: CGPoint(x: 18.14, y: 26.19))
            icon.addCurve(to: CGPoint(x: 19.23, y: 24.62), controlPoint1: CGPoint(x: 19.2, y: 25.75), controlPoint2: CGPoint(x: 19.45, y: 25.15))
            icon.addLine(to: CGPoint(x: 19.16, y: 24.45))
            icon.addCurve(to: CGPoint(x: 19.54, y: 23.19), controlPoint1: CGPoint(x: 18.97, y: 23.99), controlPoint2: CGPoint(x: 19.12, y: 23.45))
            icon.addCurve(to: CGPoint(x: 20.14, y: 22.79), controlPoint1: CGPoint(x: 19.75, y: 23.06), controlPoint2: CGPoint(x: 19.95, y: 22.93))
            icon.addCurve(to: CGPoint(x: 21.45, y: 22.92), controlPoint1: CGPoint(x: 20.55, y: 22.5), controlPoint2: CGPoint(x: 21.1, y: 22.57))
            icon.addLine(to: CGPoint(x: 21.58, y: 23.04))
            icon.addCurve(to: CGPoint(x: 23.04, y: 23.04), controlPoint1: CGPoint(x: 21.98, y: 23.45), controlPoint2: CGPoint(x: 22.64, y: 23.45))
            icon.addCurve(to: CGPoint(x: 23.04, y: 21.58), controlPoint1: CGPoint(x: 23.45, y: 22.64), controlPoint2: CGPoint(x: 23.45, y: 21.98))
            icon.addLine(to: CGPoint(x: 22.92, y: 21.45))
            icon.addCurve(to: CGPoint(x: 22.79, y: 20.14), controlPoint1: CGPoint(x: 22.57, y: 21.1), controlPoint2: CGPoint(x: 22.5, y: 20.54))
            icon.addCurve(to: CGPoint(x: 23.19, y: 19.54), controlPoint1: CGPoint(x: 22.93, y: 19.94), controlPoint2: CGPoint(x: 23.06, y: 19.74))
            icon.addCurve(to: CGPoint(x: 24.45, y: 19.16), controlPoint1: CGPoint(x: 23.45, y: 19.12), controlPoint2: CGPoint(x: 23.99, y: 18.97))
            icon.addLine(to: CGPoint(x: 24.62, y: 19.23))
            icon.addCurve(to: CGPoint(x: 25.98, y: 18.66), controlPoint1: CGPoint(x: 25.15, y: 19.45), controlPoint2: CGPoint(x: 25.75, y: 19.19))
            icon.addCurve(to: CGPoint(x: 25.41, y: 17.31), controlPoint1: CGPoint(x: 26.19, y: 18.13), controlPoint2: CGPoint(x: 25.94, y: 17.53))
            icon.addLine(to: CGPoint(x: 25.25, y: 17.24))
            icon.addCurve(to: CGPoint(x: 24.63, y: 16.08), controlPoint1: CGPoint(x: 24.8, y: 17.05), controlPoint2: CGPoint(x: 24.52, y: 16.56))
            icon.addCurve(to: CGPoint(x: 24.77, y: 15.38), controlPoint1: CGPoint(x: 24.68, y: 15.85), controlPoint2: CGPoint(x: 24.73, y: 15.62))
            icon.addCurve(to: CGPoint(x: 25.78, y: 14.54), controlPoint1: CGPoint(x: 24.84, y: 14.89), controlPoint2: CGPoint(x: 25.29, y: 14.54))
            icon.addLine(to: CGPoint(x: 25.96, y: 14.54))
            icon.addCurve(to: CGPoint(x: 27, y: 13.5), controlPoint1: CGPoint(x: 26.54, y: 14.54), controlPoint2: CGPoint(x: 27, y: 14.07))
            icon.addCurve(to: CGPoint(x: 25.96, y: 12.46), controlPoint1: CGPoint(x: 27, y: 12.93), controlPoint2: CGPoint(x: 26.54, y: 12.46))
            icon.addLine(to: CGPoint(x: 25.78, y: 12.46))
            icon.addCurve(to: CGPoint(x: 24.76, y: 11.62), controlPoint1: CGPoint(x: 25.29, y: 12.46), controlPoint2: CGPoint(x: 24.84, y: 12.11))
            icon.addCurve(to: CGPoint(x: 24.63, y: 10.92), controlPoint1: CGPoint(x: 24.73, y: 11.38), controlPoint2: CGPoint(x: 24.68, y: 11.15))
            icon.addCurve(to: CGPoint(x: 25.25, y: 9.76), controlPoint1: CGPoint(x: 24.52, y: 10.43), controlPoint2: CGPoint(x: 24.79, y: 9.95))
            icon.addLine(to: CGPoint(x: 25.41, y: 9.69))
            icon.addCurve(to: CGPoint(x: 25.97, y: 8.33), controlPoint1: CGPoint(x: 25.94, y: 9.47), controlPoint2: CGPoint(x: 26.19, y: 8.86))
            icon.addCurve(to: CGPoint(x: 24.62, y: 7.77), controlPoint1: CGPoint(x: 25.75, y: 7.8), controlPoint2: CGPoint(x: 25.15, y: 7.55))
            icon.addLine(to: CGPoint(x: 24.45, y: 7.84))
            icon.addCurve(to: CGPoint(x: 23.19, y: 7.46), controlPoint1: CGPoint(x: 23.99, y: 8.03), controlPoint2: CGPoint(x: 23.45, y: 7.88))
            icon.addCurve(to: CGPoint(x: 22.79, y: 6.86), controlPoint1: CGPoint(x: 23.06, y: 7.25), controlPoint2: CGPoint(x: 22.93, y: 7.05))
            icon.addCurve(to: CGPoint(x: 22.92, y: 5.55), controlPoint1: CGPoint(x: 22.5, y: 6.45), controlPoint2: CGPoint(x: 22.57, y: 5.9))
            icon.addLine(to: CGPoint(x: 23.04, y: 5.42))
            icon.addCurve(to: CGPoint(x: 23.04, y: 3.95), controlPoint1: CGPoint(x: 23.45, y: 5.02), controlPoint2: CGPoint(x: 23.45, y: 4.36))
            icon.addCurve(to: CGPoint(x: 21.58, y: 3.95), controlPoint1: CGPoint(x: 22.64, y: 3.55), controlPoint2: CGPoint(x: 21.98, y: 3.55))
            icon.addLine(to: CGPoint(x: 21.45, y: 4.08))
            icon.addCurve(to: CGPoint(x: 20.14, y: 4.21), controlPoint1: CGPoint(x: 21.1, y: 4.43), controlPoint2: CGPoint(x: 20.54, y: 4.5))
            icon.addCurve(to: CGPoint(x: 19.54, y: 3.81), controlPoint1: CGPoint(x: 19.94, y: 4.07), controlPoint2: CGPoint(x: 19.74, y: 3.94))
            icon.addCurve(to: CGPoint(x: 19.16, y: 2.55), controlPoint1: CGPoint(x: 19.12, y: 3.55), controlPoint2: CGPoint(x: 18.97, y: 3.01))
            icon.addLine(to: CGPoint(x: 19.23, y: 2.38))
            icon.addCurve(to: CGPoint(x: 18.66, y: 1.03), controlPoint1: CGPoint(x: 19.45, y: 1.86), controlPoint2: CGPoint(x: 19.2, y: 1.25))
            icon.addCurve(to: CGPoint(x: 17.31, y: 1.59), controlPoint1: CGPoint(x: 18.14, y: 0.81), controlPoint2: CGPoint(x: 17.53, y: 1.06))
            icon.addLine(to: CGPoint(x: 17.24, y: 1.75))
            icon.addCurve(to: CGPoint(x: 16.08, y: 2.37), controlPoint1: CGPoint(x: 17.05, y: 2.21), controlPoint2: CGPoint(x: 16.56, y: 2.48))
            icon.addCurve(to: CGPoint(x: 15.38, y: 2.23), controlPoint1: CGPoint(x: 15.85, y: 2.32), controlPoint2: CGPoint(x: 15.62, y: 2.27))
            icon.addCurve(to: CGPoint(x: 14.54, y: 1.22), controlPoint1: CGPoint(x: 14.89, y: 2.16), controlPoint2: CGPoint(x: 14.54, y: 1.71))
            icon.addLine(to: CGPoint(x: 14.54, y: 1.04))
            icon.addCurve(to: CGPoint(x: 13.5, y: 0), controlPoint1: CGPoint(x: 14.54, y: 0.46), controlPoint2: CGPoint(x: 14.07, y: 0))
            icon.close()
            icon.move(to: CGPoint(x: 13.5, y: 5.19))
            icon.addCurve(to: CGPoint(x: 21.74, y: 12.46), controlPoint1: CGPoint(x: 17.73, y: 5.19), controlPoint2: CGPoint(x: 21.22, y: 8.36))
            icon.addLine(to: CGPoint(x: 15.3, y: 12.46))
            icon.addCurve(to: CGPoint(x: 13.5, y: 11.42), controlPoint1: CGPoint(x: 14.93, y: 11.82), controlPoint2: CGPoint(x: 14.24, y: 11.42))
            icon.addLine(to: CGPoint(x: 13.5, y: 11.42))
            icon.addLine(to: CGPoint(x: 10.28, y: 5.84))
            icon.addCurve(to: CGPoint(x: 13.5, y: 5.19), controlPoint1: CGPoint(x: 11.27, y: 5.42), controlPoint2: CGPoint(x: 12.36, y: 5.19))
            icon.close()
            icon.move(to: CGPoint(x: 8.48, y: 6.89))
            icon.addLine(to: CGPoint(x: 11.7, y: 12.46))
            icon.addCurve(to: CGPoint(x: 11.42, y: 13.5), controlPoint1: CGPoint(x: 11.52, y: 12.78), controlPoint2: CGPoint(x: 11.42, y: 13.13))
            icon.addCurve(to: CGPoint(x: 11.7, y: 14.53), controlPoint1: CGPoint(x: 11.42, y: 13.86), controlPoint2: CGPoint(x: 11.52, y: 14.22))
            icon.addLine(to: CGPoint(x: 8.48, y: 20.11))
            icon.addCurve(to: CGPoint(x: 5.19, y: 13.5), controlPoint1: CGPoint(x: 6.49, y: 18.59), controlPoint2: CGPoint(x: 5.19, y: 16.2))
            icon.addCurve(to: CGPoint(x: 8.48, y: 6.89), controlPoint1: CGPoint(x: 5.19, y: 10.8), controlPoint2: CGPoint(x: 6.49, y: 8.41))
            icon.close()
            icon.move(to: CGPoint(x: 15.3, y: 14.54))
            icon.addLine(to: CGPoint(x: 21.74, y: 14.54))
            icon.addCurve(to: CGPoint(x: 13.5, y: 21.81), controlPoint1: CGPoint(x: 21.22, y: 18.64), controlPoint2: CGPoint(x: 17.73, y: 21.81))
            icon.addCurve(to: CGPoint(x: 10.28, y: 21.16), controlPoint1: CGPoint(x: 12.36, y: 21.81), controlPoint2: CGPoint(x: 11.27, y: 21.58))
            icon.addLine(to: CGPoint(x: 13.5, y: 15.58))
            icon.addLine(to: CGPoint(x: 13.5, y: 15.58))
            icon.addCurve(to: CGPoint(x: 15.3, y: 14.54), controlPoint1: CGPoint(x: 14.24, y: 15.58), controlPoint2: CGPoint(x: 14.93, y: 15.18))
            icon.close()
            context.saveGState()
            context.translateBy(x: 0.5, y: 0.5)
            icon.usesEvenOddFillRule = true
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarProfile(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 3, y: 3)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 21.1, y: 17.99))
            icon.addCurve(to: CGPoint(x: 17.55, y: 16.65), controlPoint1: CGPoint(x: 19.8, y: 17.24), controlPoint2: CGPoint(x: 18.54, y: 16.87))
            icon.addCurve(to: CGPoint(x: 17.55, y: 16.64), controlPoint1: CGPoint(x: 17.55, y: 16.65), controlPoint2: CGPoint(x: 17.55, y: 16.65))
            icon.addCurve(to: CGPoint(x: 17.27, y: 16.59), controlPoint1: CGPoint(x: 17.45, y: 16.62), controlPoint2: CGPoint(x: 17.36, y: 16.6))
            icon.addCurve(to: CGPoint(x: 17.09, y: 16.55), controlPoint1: CGPoint(x: 17.21, y: 16.57), controlPoint2: CGPoint(x: 17.15, y: 16.56))
            icon.addCurve(to: CGPoint(x: 15.83, y: 16.28), controlPoint1: CGPoint(x: 16.52, y: 16.43), controlPoint2: CGPoint(x: 16.08, y: 16.36))
            icon.addCurve(to: CGPoint(x: 14.51, y: 14.95), controlPoint1: CGPoint(x: 15.19, y: 16.07), controlPoint2: CGPoint(x: 14.51, y: 15.85))
            icon.addCurve(to: CGPoint(x: 14.71, y: 13.81), controlPoint1: CGPoint(x: 14.51, y: 14.05), controlPoint2: CGPoint(x: 14.49, y: 13.93))
            icon.addCurve(to: CGPoint(x: 15.43, y: 12.94), controlPoint1: CGPoint(x: 15.13, y: 13.58), controlPoint2: CGPoint(x: 15.37, y: 13.22))
            icon.addCurve(to: CGPoint(x: 15.71, y: 10.78), controlPoint1: CGPoint(x: 15.53, y: 12.42), controlPoint2: CGPoint(x: 15.58, y: 10.97))
            icon.addCurve(to: CGPoint(x: 16.16, y: 10.33), controlPoint1: CGPoint(x: 15.84, y: 10.59), controlPoint2: CGPoint(x: 16.08, y: 10.75))
            icon.addCurve(to: CGPoint(x: 16.31, y: 9.37), controlPoint1: CGPoint(x: 16.24, y: 9.9), controlPoint2: CGPoint(x: 16.24, y: 9.53))
            icon.addCurve(to: CGPoint(x: 16.5, y: 7.82), controlPoint1: CGPoint(x: 16.39, y: 9.21), controlPoint2: CGPoint(x: 16.67, y: 8.18))
            icon.addCurve(to: CGPoint(x: 16.05, y: 7.48), controlPoint1: CGPoint(x: 16.35, y: 7.51), controlPoint2: CGPoint(x: 16.07, y: 7.67))
            icon.addCurve(to: CGPoint(x: 16.21, y: 3.35), controlPoint1: CGPoint(x: 16.02, y: 7.16), controlPoint2: CGPoint(x: 16.61, y: 4.48))
            icon.addCurve(to: CGPoint(x: 15.51, y: 2.09), controlPoint1: CGPoint(x: 15.99, y: 2.7), controlPoint2: CGPoint(x: 15.51, y: 2.11))
            icon.addCurve(to: CGPoint(x: 12.73, y: 0.28), controlPoint1: CGPoint(x: 15.22, y: 1.05), controlPoint2: CGPoint(x: 13.23, y: 0.49))
            icon.addCurve(to: CGPoint(x: 9.77, y: 0.28), controlPoint1: CGPoint(x: 12.23, y: 0.07), controlPoint2: CGPoint(x: 10.77, y: -0.23))
            icon.addCurve(to: CGPoint(x: 8.08, y: 1.73), controlPoint1: CGPoint(x: 8.77, y: 0.79), controlPoint2: CGPoint(x: 8.5, y: 1.47))
            icon.addCurve(to: CGPoint(x: 6.81, y: 3.35), controlPoint1: CGPoint(x: 7.66, y: 2), controlPoint2: CGPoint(x: 7.22, y: 2.17))
            icon.addCurve(to: CGPoint(x: 6.96, y: 7.48), controlPoint1: CGPoint(x: 6.41, y: 4.48), controlPoint2: CGPoint(x: 7, y: 7.16))
            icon.addCurve(to: CGPoint(x: 6.52, y: 7.82), controlPoint1: CGPoint(x: 6.94, y: 7.67), controlPoint2: CGPoint(x: 6.67, y: 7.51))
            icon.addCurve(to: CGPoint(x: 6.7, y: 9.37), controlPoint1: CGPoint(x: 6.35, y: 8.18), controlPoint2: CGPoint(x: 6.62, y: 9.21))
            icon.addCurve(to: CGPoint(x: 6.86, y: 10.33), controlPoint1: CGPoint(x: 6.78, y: 9.53), controlPoint2: CGPoint(x: 6.78, y: 9.9))
            icon.addCurve(to: CGPoint(x: 7.3, y: 10.78), controlPoint1: CGPoint(x: 6.94, y: 10.75), controlPoint2: CGPoint(x: 7.17, y: 10.59))
            icon.addCurve(to: CGPoint(x: 7.59, y: 12.94), controlPoint1: CGPoint(x: 7.44, y: 10.97), controlPoint2: CGPoint(x: 7.49, y: 12.42))
            icon.addCurve(to: CGPoint(x: 8.3, y: 13.81), controlPoint1: CGPoint(x: 7.64, y: 13.22), controlPoint2: CGPoint(x: 7.89, y: 13.58))
            icon.addCurve(to: CGPoint(x: 8.51, y: 14.95), controlPoint1: CGPoint(x: 8.52, y: 13.93), controlPoint2: CGPoint(x: 8.51, y: 14.05))
            icon.addCurve(to: CGPoint(x: 7.18, y: 16.28), controlPoint1: CGPoint(x: 8.51, y: 15.85), controlPoint2: CGPoint(x: 7.82, y: 16.07))
            icon.addCurve(to: CGPoint(x: 1.9, y: 17.99), controlPoint1: CGPoint(x: 6.5, y: 16.51), controlPoint2: CGPoint(x: 4.25, y: 16.63))
            icon.addCurve(to: CGPoint(x: 0, y: 22.5), controlPoint1: CGPoint(x: -0.13, y: 19.15), controlPoint2: CGPoint(x: 0, y: 22.5))
            icon.addLine(to: CGPoint(x: 8.96, y: 22.5))
            icon.addLine(to: CGPoint(x: 11.01, y: 22.5))
            icon.addLine(to: CGPoint(x: 23, y: 22.5))
            icon.addCurve(to: CGPoint(x: 21.1, y: 17.99), controlPoint1: CGPoint(x: 23, y: 22.5), controlPoint2: CGPoint(x: 23.13, y: 19.15))
            context.saveGState()
            context.translateBy(x: 0.5, y: 0)
            icon.usesEvenOddFillRule = true
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarBag(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 5, y: 0)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 4.22, y: 6.33))
            icon.addLine(to: CGPoint(x: 4.22, y: 5.28))
            icon.addCurve(to: CGPoint(x: 9.5, y: 0), controlPoint1: CGPoint(x: 4.22, y: 2.36), controlPoint2: CGPoint(x: 6.59, y: 0))
            icon.addCurve(to: CGPoint(x: 14.78, y: 5.28), controlPoint1: CGPoint(x: 12.41, y: 0), controlPoint2: CGPoint(x: 14.78, y: 2.36))
            icon.addLine(to: CGPoint(x: 14.78, y: 6.33))
            icon.addLine(to: CGPoint(x: 16.44, y: 6.33))
            icon.addCurve(to: CGPoint(x: 17.98, y: 6.6), controlPoint1: CGPoint(x: 17.33, y: 6.33), controlPoint2: CGPoint(x: 17.65, y: 6.43))
            icon.addCurve(to: CGPoint(x: 18.73, y: 7.36), controlPoint1: CGPoint(x: 18.3, y: 6.77), controlPoint2: CGPoint(x: 18.56, y: 7.03))
            icon.addCurve(to: CGPoint(x: 19, y: 8.9), controlPoint1: CGPoint(x: 18.91, y: 7.68), controlPoint2: CGPoint(x: 19, y: 8.01))
            icon.addLine(to: CGPoint(x: 19, y: 21.71))
            icon.addCurve(to: CGPoint(x: 18.73, y: 23.25), controlPoint1: CGPoint(x: 19, y: 22.61), controlPoint2: CGPoint(x: 18.91, y: 22.93))
            icon.addCurve(to: CGPoint(x: 17.98, y: 24.01), controlPoint1: CGPoint(x: 18.56, y: 23.58), controlPoint2: CGPoint(x: 18.3, y: 23.84))
            icon.addCurve(to: CGPoint(x: 16.44, y: 24.28), controlPoint1: CGPoint(x: 17.65, y: 24.18), controlPoint2: CGPoint(x: 17.33, y: 24.28))
            icon.addLine(to: CGPoint(x: 2.56, y: 24.28))
            icon.addCurve(to: CGPoint(x: 1.02, y: 24.01), controlPoint1: CGPoint(x: 1.67, y: 24.28), controlPoint2: CGPoint(x: 1.35, y: 24.18))
            icon.addCurve(to: CGPoint(x: 0.27, y: 23.25), controlPoint1: CGPoint(x: 0.7, y: 23.84), controlPoint2: CGPoint(x: 0.44, y: 23.58))
            icon.addCurve(to: CGPoint(x: 0, y: 21.71), controlPoint1: CGPoint(x: 0.09, y: 22.93), controlPoint2: CGPoint(x: 0, y: 22.61))
            icon.addLine(to: CGPoint(x: 0, y: 8.9))
            icon.addCurve(to: CGPoint(x: 0.27, y: 7.36), controlPoint1: CGPoint(x: 0, y: 8.01), controlPoint2: CGPoint(x: 0.09, y: 7.68))
            icon.addCurve(to: CGPoint(x: 1.02, y: 6.6), controlPoint1: CGPoint(x: 0.44, y: 7.03), controlPoint2: CGPoint(x: 0.7, y: 6.77))
            icon.addCurve(to: CGPoint(x: 2.56, y: 6.33), controlPoint1: CGPoint(x: 1.35, y: 6.43), controlPoint2: CGPoint(x: 1.67, y: 6.33))
            icon.addLine(to: CGPoint(x: 4.22, y: 6.33))
            icon.close()
            icon.move(to: CGPoint(x: 12.67, y: 6.33))
            icon.addLine(to: CGPoint(x: 12.67, y: 5.28))
            icon.addCurve(to: CGPoint(x: 9.5, y: 2.11), controlPoint1: CGPoint(x: 12.67, y: 3.53), controlPoint2: CGPoint(x: 11.25, y: 2.11))
            icon.addCurve(to: CGPoint(x: 6.33, y: 5.28), controlPoint1: CGPoint(x: 7.75, y: 2.11), controlPoint2: CGPoint(x: 6.33, y: 3.53))
            icon.addLine(to: CGPoint(x: 6.33, y: 6.33))
            icon.addLine(to: CGPoint(x: 12.67, y: 6.33))
            icon.close()
            context.saveGState()
            context.translateBy(x: 0.5, y: 0.96)
            icon.usesEvenOddFillRule = true
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarBookmarks(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 6, y: 2)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 1.46, y: 23.89))
            icon.addCurve(to: CGPoint(x: 0, y: 23), controlPoint1: CGPoint(x: 0.8, y: 24.23), controlPoint2: CGPoint(x: 0, y: 23.75))
            icon.addLine(to: CGPoint(x: 0, y: 1.93))
            icon.addCurve(to: CGPoint(x: 2.11, y: 0), controlPoint1: CGPoint(x: 0, y: 0.82), controlPoint2: CGPoint(x: 0.98, y: 0))
            icon.addLine(to: CGPoint(x: 15.89, y: 0))
            icon.addCurve(to: CGPoint(x: 18, y: 1.93), controlPoint1: CGPoint(x: 17.02, y: 0), controlPoint2: CGPoint(x: 18, y: 0.82))
            icon.addLine(to: CGPoint(x: 18, y: 23))
            icon.addCurve(to: CGPoint(x: 16.54, y: 23.89), controlPoint1: CGPoint(x: 18, y: 23.75), controlPoint2: CGPoint(x: 17.2, y: 24.23))
            icon.addLine(to: CGPoint(x: 9, y: 19.97))
            icon.addLine(to: CGPoint(x: 1.46, y: 23.89))
            icon.close()
            context.saveGState()
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarDiscover(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 3, y: 2)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 11.5, y: 23))
            icon.addCurve(to: CGPoint(x: 0, y: 11.5), controlPoint1: CGPoint(x: 5.15, y: 23), controlPoint2: CGPoint(x: 0, y: 17.85))
            icon.addCurve(to: CGPoint(x: 11.5, y: 0), controlPoint1: CGPoint(x: 0, y: 5.15), controlPoint2: CGPoint(x: 5.15, y: 0))
            icon.addCurve(to: CGPoint(x: 23, y: 11.5), controlPoint1: CGPoint(x: 17.85, y: 0), controlPoint2: CGPoint(x: 23, y: 5.15))
            icon.addCurve(to: CGPoint(x: 11.5, y: 23), controlPoint1: CGPoint(x: 23, y: 17.85), controlPoint2: CGPoint(x: 17.85, y: 23))
            icon.close()
            icon.move(to: CGPoint(x: 9.97, y: 10.7))
            icon.addLine(to: CGPoint(x: 5.72, y: 17.12))
            icon.addCurve(to: CGPoint(x: 5.83, y: 17.23), controlPoint1: CGPoint(x: 5.67, y: 17.19), controlPoint2: CGPoint(x: 5.76, y: 17.27))
            icon.addLine(to: CGPoint(x: 12.36, y: 13.12))
            icon.addCurve(to: CGPoint(x: 12.38, y: 13.09), controlPoint1: CGPoint(x: 12.37, y: 13.11), controlPoint2: CGPoint(x: 12.37, y: 13.1))
            icon.addLine(to: CGPoint(x: 17.28, y: 5.89))
            icon.addCurve(to: CGPoint(x: 17.17, y: 5.77), controlPoint1: CGPoint(x: 17.33, y: 5.81), controlPoint2: CGPoint(x: 17.24, y: 5.72))
            icon.addLine(to: CGPoint(x: 9.99, y: 10.68))
            icon.addCurve(to: CGPoint(x: 9.97, y: 10.7), controlPoint1: CGPoint(x: 9.99, y: 10.68), controlPoint2: CGPoint(x: 9.98, y: 10.69))
            icon.close()
            icon.move(to: CGPoint(x: 10.48, y: 11.59))
            icon.addCurve(to: CGPoint(x: 10.51, y: 11.6), controlPoint1: CGPoint(x: 10.5, y: 11.58), controlPoint2: CGPoint(x: 10.51, y: 11.6))
            icon.addLine(to: CGPoint(x: 11.52, y: 12.64))
            icon.addCurve(to: CGPoint(x: 11.54, y: 12.67), controlPoint1: CGPoint(x: 11.52, y: 12.64), controlPoint2: CGPoint(x: 11.54, y: 12.65))
            icon.addCurve(to: CGPoint(x: 11.51, y: 12.7), controlPoint1: CGPoint(x: 11.54, y: 12.68), controlPoint2: CGPoint(x: 11.51, y: 12.7))
            icon.addLine(to: CGPoint(x: 8.07, y: 15.01))
            icon.addCurve(to: CGPoint(x: 8.06, y: 14.99), controlPoint1: CGPoint(x: 8.07, y: 15.01), controlPoint2: CGPoint(x: 8.05, y: 15))
            icon.addCurve(to: CGPoint(x: 10.44, y: 11.61), controlPoint1: CGPoint(x: 8.24, y: 14.72), controlPoint2: CGPoint(x: 10.18, y: 11.98))
            icon.addCurve(to: CGPoint(x: 10.48, y: 11.59), controlPoint1: CGPoint(x: 10.46, y: 11.58), controlPoint2: CGPoint(x: 10.47, y: 11.59))
            icon.close()
            context.saveGState()
            context.translateBy(x: 0.5, y: 0.5)
            icon.usesEvenOddFillRule = true
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarCloud(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 3, y: 6)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 20.18, y: 6.5))
            icon.addCurve(to: CGPoint(x: 13.73, y: 0), controlPoint1: CGPoint(x: 20.03, y: 2.88), controlPoint2: CGPoint(x: 17.21, y: 0))
            icon.addCurve(to: CGPoint(x: 7.89, y: 3.92), controlPoint1: CGPoint(x: 11.15, y: 0), controlPoint2: CGPoint(x: 8.92, y: 1.6))
            icon.addCurve(to: CGPoint(x: 6.11, y: 3.38), controlPoint1: CGPoint(x: 7.37, y: 3.58), controlPoint2: CGPoint(x: 6.77, y: 3.38))
            icon.addCurve(to: CGPoint(x: 2.69, y: 6.85), controlPoint1: CGPoint(x: 4.26, y: 3.38), controlPoint2: CGPoint(x: 2.76, y: 4.92))
            icon.addCurve(to: CGPoint(x: 0, y: 11.22), controlPoint1: CGPoint(x: 1.1, y: 7.6), controlPoint2: CGPoint(x: 0, y: 9.27))
            icon.addCurve(to: CGPoint(x: 4.55, y: 16), controlPoint1: CGPoint(x: 0, y: 13.86), controlPoint2: CGPoint(x: 2.04, y: 16))
            icon.addLine(to: CGPoint(x: 19.45, y: 16))
            icon.addCurve(to: CGPoint(x: 24, y: 11.22), controlPoint1: CGPoint(x: 21.96, y: 16), controlPoint2: CGPoint(x: 24, y: 13.86))
            icon.addCurve(to: CGPoint(x: 20.18, y: 6.5), controlPoint1: CGPoint(x: 24, y: 8.83), controlPoint2: CGPoint(x: 22.34, y: 6.86))
            context.saveGState()
            icon.usesEvenOddFillRule = true
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarToday(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 5, y: 2)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 16.87, y: 20.77))
            icon.addLine(to: CGPoint(x: 16.87, y: 2.73))
            icon.addCurve(to: CGPoint(x: 15.81, y: 1.62), controlPoint1: CGPoint(x: 16.87, y: 2.12), controlPoint2: CGPoint(x: 16.39, y: 1.62))
            icon.addLine(to: CGPoint(x: 2.69, y: 1.62))
            icon.addCurve(to: CGPoint(x: 1.63, y: 2.73), controlPoint1: CGPoint(x: 2.11, y: 1.62), controlPoint2: CGPoint(x: 1.63, y: 2.12))
            icon.addLine(to: CGPoint(x: 1.63, y: 20.77))
            icon.addCurve(to: CGPoint(x: 2.69, y: 21.87), controlPoint1: CGPoint(x: 1.63, y: 21.38), controlPoint2: CGPoint(x: 2.11, y: 21.87))
            icon.addLine(to: CGPoint(x: 15.81, y: 21.87))
            icon.addCurve(to: CGPoint(x: 16.87, y: 20.77), controlPoint1: CGPoint(x: 16.39, y: 21.87), controlPoint2: CGPoint(x: 16.87, y: 21.38))
            icon.close()
            icon.move(to: CGPoint(x: 15.81, y: 0))
            icon.addCurve(to: CGPoint(x: 18.5, y: 2.78), controlPoint1: CGPoint(x: 17.3, y: 0), controlPoint2: CGPoint(x: 18.5, y: 1.25))
            icon.addLine(to: CGPoint(x: 18.5, y: 20.72))
            icon.addCurve(to: CGPoint(x: 15.81, y: 23.5), controlPoint1: CGPoint(x: 18.5, y: 22.25), controlPoint2: CGPoint(x: 17.3, y: 23.5))
            icon.addLine(to: CGPoint(x: 2.69, y: 23.5))
            icon.addCurve(to: CGPoint(x: 0, y: 20.72), controlPoint1: CGPoint(x: 1.2, y: 23.5), controlPoint2: CGPoint(x: 0, y: 22.25))
            icon.addLine(to: CGPoint(x: 0, y: 2.78))
            icon.addCurve(to: CGPoint(x: 2.69, y: 0), controlPoint1: CGPoint(x: 0, y: 1.25), controlPoint2: CGPoint(x: 1.2, y: 0))
            icon.addLine(to: CGPoint(x: 15.81, y: 0))
            icon.close()
            icon.move(to: CGPoint(x: 3.02, y: 20.29))
            icon.addLine(to: CGPoint(x: 3.02, y: 6.92))
            icon.addLine(to: CGPoint(x: 15.48, y: 6.92))
            icon.addLine(to: CGPoint(x: 15.48, y: 20.29))
            icon.addLine(to: CGPoint(x: 3.02, y: 20.29))
            icon.close()
            icon.move(to: CGPoint(x: 3.71, y: 4.61))
            icon.addCurve(to: CGPoint(x: 3.02, y: 3.92), controlPoint1: CGPoint(x: 3.33, y: 4.61), controlPoint2: CGPoint(x: 3.02, y: 4.3))
            icon.addCurve(to: CGPoint(x: 3.71, y: 3.23), controlPoint1: CGPoint(x: 3.02, y: 3.54), controlPoint2: CGPoint(x: 3.33, y: 3.23))
            icon.addLine(to: CGPoint(x: 9.25, y: 3.23))
            icon.addCurve(to: CGPoint(x: 9.94, y: 3.92), controlPoint1: CGPoint(x: 9.63, y: 3.23), controlPoint2: CGPoint(x: 9.94, y: 3.54))
            icon.addCurve(to: CGPoint(x: 9.25, y: 4.61), controlPoint1: CGPoint(x: 9.94, y: 4.3), controlPoint2: CGPoint(x: 9.63, y: 4.61))
            icon.addLine(to: CGPoint(x: 3.71, y: 4.61))
            icon.close()
            context.saveGState()
            context.translateBy(x: 0.75, y: 0.75)
            icon.usesEvenOddFillRule = true
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarLibrary(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 1, y: 2)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 26.57, y: 6.35))
            icon.addCurve(to: CGPoint(x: 28, y: 7.79), controlPoint1: CGPoint(x: 27.36, y: 6.35), controlPoint2: CGPoint(x: 28, y: 7))
            icon.addLine(to: CGPoint(x: 28, y: 22.56))
            icon.addCurve(to: CGPoint(x: 26.57, y: 24), controlPoint1: CGPoint(x: 28, y: 23.36), controlPoint2: CGPoint(x: 27.36, y: 24))
            icon.addLine(to: CGPoint(x: 1.43, y: 24))
            icon.addCurve(to: CGPoint(x: 0, y: 22.56), controlPoint1: CGPoint(x: 0.64, y: 24), controlPoint2: CGPoint(x: 0, y: 23.36))
            icon.addLine(to: CGPoint(x: 0, y: 7.79))
            icon.addCurve(to: CGPoint(x: 1.43, y: 6.35), controlPoint1: CGPoint(x: 0, y: 7), controlPoint2: CGPoint(x: 0.64, y: 6.35))
            icon.addLine(to: CGPoint(x: 26.57, y: 6.35))
            icon.close()
            icon.move(to: CGPoint(x: 3.23, y: 4.56))
            icon.addCurve(to: CGPoint(x: 2.45, y: 3.79), controlPoint1: CGPoint(x: 2.8, y: 4.56), controlPoint2: CGPoint(x: 2.45, y: 4.22))
            icon.addCurve(to: CGPoint(x: 3.23, y: 3.01), controlPoint1: CGPoint(x: 2.45, y: 3.36), controlPoint2: CGPoint(x: 2.8, y: 3.01))
            icon.addLine(to: CGPoint(x: 24.84, y: 3.01))
            icon.addCurve(to: CGPoint(x: 25.61, y: 3.79), controlPoint1: CGPoint(x: 25.26, y: 3.01), controlPoint2: CGPoint(x: 25.61, y: 3.36))
            icon.addCurve(to: CGPoint(x: 24.84, y: 4.56), controlPoint1: CGPoint(x: 25.61, y: 4.22), controlPoint2: CGPoint(x: 25.26, y: 4.56))
            icon.addLine(to: CGPoint(x: 3.23, y: 4.56))
            icon.close()
            icon.move(to: CGPoint(x: 5.1, y: 1.56))
            icon.addCurve(to: CGPoint(x: 4.4, y: 0.85), controlPoint1: CGPoint(x: 4.71, y: 1.56), controlPoint2: CGPoint(x: 4.4, y: 1.24))
            icon.addLine(to: CGPoint(x: 4.4, y: 0.7))
            icon.addCurve(to: CGPoint(x: 5.1, y: 0), controlPoint1: CGPoint(x: 4.4, y: 0.31), controlPoint2: CGPoint(x: 4.71, y: 0))
            icon.addLine(to: CGPoint(x: 22.64, y: 0))
            icon.addCurve(to: CGPoint(x: 23.34, y: 0.7), controlPoint1: CGPoint(x: 23.02, y: 0), controlPoint2: CGPoint(x: 23.34, y: 0.31))
            icon.addLine(to: CGPoint(x: 23.34, y: 0.85))
            icon.addCurve(to: CGPoint(x: 22.64, y: 1.56), controlPoint1: CGPoint(x: 23.34, y: 1.24), controlPoint2: CGPoint(x: 23.02, y: 1.56))
            icon.addLine(to: CGPoint(x: 5.1, y: 1.56))
            icon.close()
            context.saveGState()
            icon.usesEvenOddFillRule = true
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarPhotos(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 1, y: 3)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 26.71, y: 4.07))
            icon.addCurve(to: CGPoint(x: 28, y: 5.35), controlPoint1: CGPoint(x: 27.42, y: 4.07), controlPoint2: CGPoint(x: 28, y: 4.65))
            icon.addLine(to: CGPoint(x: 28, y: 19.72))
            icon.addCurve(to: CGPoint(x: 26.71, y: 21), controlPoint1: CGPoint(x: 28, y: 20.43), controlPoint2: CGPoint(x: 27.42, y: 21))
            icon.addLine(to: CGPoint(x: 5.74, y: 21))
            icon.addCurve(to: CGPoint(x: 4.45, y: 19.72), controlPoint1: CGPoint(x: 5.03, y: 21), controlPoint2: CGPoint(x: 4.45, y: 20.43))
            icon.addLine(to: CGPoint(x: 4.45, y: 5.35))
            icon.addCurve(to: CGPoint(x: 5.74, y: 4.07), controlPoint1: CGPoint(x: 4.45, y: 4.65), controlPoint2: CGPoint(x: 5.03, y: 4.07))
            icon.addLine(to: CGPoint(x: 26.71, y: 4.07))
            icon.close()
            icon.move(to: CGPoint(x: 23.55, y: 1.28))
            icon.addLine(to: CGPoint(x: 23.55, y: 2.64))
            icon.addLine(to: CGPoint(x: 4.14, y: 2.64))
            icon.addCurve(to: CGPoint(x: 2.85, y: 3.92), controlPoint1: CGPoint(x: 3.42, y: 2.64), controlPoint2: CGPoint(x: 2.85, y: 3.21))
            icon.addLine(to: CGPoint(x: 2.85, y: 16.93))
            icon.addLine(to: CGPoint(x: 1.29, y: 16.93))
            icon.addCurve(to: CGPoint(x: 0, y: 15.65), controlPoint1: CGPoint(x: 0.58, y: 16.93), controlPoint2: CGPoint(x: 0, y: 16.36))
            icon.addLine(to: CGPoint(x: 0, y: 1.28))
            icon.addCurve(to: CGPoint(x: 1.29, y: 0), controlPoint1: CGPoint(x: 0, y: 0.57), controlPoint2: CGPoint(x: 0.58, y: 0))
            icon.addLine(to: CGPoint(x: 22.26, y: 0))
            icon.addCurve(to: CGPoint(x: 23.55, y: 1.28), controlPoint1: CGPoint(x: 22.97, y: 0), controlPoint2: CGPoint(x: 23.55, y: 0.57))
            icon.close()
            context.saveGState()
            context.translateBy(x: 0, y: 0.5)
            icon.usesEvenOddFillRule = true
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarFiles(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 2, y: 3)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 24.56, y: 7.21))
            icon.addCurve(to: CGPoint(x: 24.97, y: 7.61), controlPoint1: CGPoint(x: 24.79, y: 7.21), controlPoint2: CGPoint(x: 24.97, y: 7.39))
            icon.addLine(to: CGPoint(x: 24.97, y: 20.2))
            icon.addCurve(to: CGPoint(x: 23.65, y: 21.5), controlPoint1: CGPoint(x: 24.97, y: 20.92), controlPoint2: CGPoint(x: 24.38, y: 21.5))
            icon.addLine(to: CGPoint(x: 1.31, y: 21.5))
            icon.addCurve(to: CGPoint(x: 0, y: 20.2), controlPoint1: CGPoint(x: 0.59, y: 21.5), controlPoint2: CGPoint(x: 0, y: 20.92))
            icon.addLine(to: CGPoint(x: 0, y: 7.61))
            icon.addCurve(to: CGPoint(x: 0.4, y: 7.21), controlPoint1: CGPoint(x: 0, y: 7.39), controlPoint2: CGPoint(x: 0.18, y: 7.21))
            icon.addLine(to: CGPoint(x: 24.56, y: 7.21))
            icon.close()
            icon.move(to: CGPoint(x: 23.19, y: 2.34))
            icon.addCurve(to: CGPoint(x: 25, y: 4.13), controlPoint1: CGPoint(x: 24.19, y: 2.34), controlPoint2: CGPoint(x: 25, y: 3.14))
            icon.addLine(to: CGPoint(x: 25, y: 5.77))
            icon.addLine(to: CGPoint(x: 0.03, y: 5.77))
            icon.addLine(to: CGPoint(x: 0.03, y: 3.38))
            icon.addLine(to: CGPoint(x: 0.03, y: 2.34))
            icon.addLine(to: CGPoint(x: 0.03, y: 1.81))
            icon.addCurve(to: CGPoint(x: 1.86, y: 0), controlPoint1: CGPoint(x: 0.03, y: 0.81), controlPoint2: CGPoint(x: 0.85, y: 0))
            icon.addLine(to: CGPoint(x: 7.83, y: 0))
            icon.addCurve(to: CGPoint(x: 8.75, y: 0.43), controlPoint1: CGPoint(x: 8.18, y: 0), controlPoint2: CGPoint(x: 8.52, y: 0.16))
            icon.addLine(to: CGPoint(x: 10.36, y: 2.34))
            icon.addLine(to: CGPoint(x: 23.19, y: 2.34))
            icon.close()
            context.saveGState()
            context.translateBy(x: 0.5, y: 0)
            icon.usesEvenOddFillRule = true
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarCamera(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 2, y: 4)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 9.64, y: 0))
            icon.addLine(to: CGPoint(x: 16.36, y: 0))
            icon.addCurve(to: CGPoint(x: 17.71, y: 0.67), controlPoint1: CGPoint(x: 16.82, y: 0), controlPoint2: CGPoint(x: 17.42, y: 0.3))
            icon.addLine(to: CGPoint(x: 19.55, y: 3.39))
            icon.addCurve(to: CGPoint(x: 20.35, y: 3.82), controlPoint1: CGPoint(x: 19.73, y: 3.66), controlPoint2: CGPoint(x: 20.03, y: 3.82))
            icon.addLine(to: CGPoint(x: 24.32, y: 3.82))
            icon.addCurve(to: CGPoint(x: 26, y: 5.51), controlPoint1: CGPoint(x: 25.25, y: 3.82), controlPoint2: CGPoint(x: 26, y: 4.57))
            icon.addLine(to: CGPoint(x: 26, y: 18.81))
            icon.addCurve(to: CGPoint(x: 24.32, y: 20.5), controlPoint1: CGPoint(x: 26, y: 19.74), controlPoint2: CGPoint(x: 25.25, y: 20.5))
            icon.addLine(to: CGPoint(x: 1.68, y: 20.5))
            icon.addCurve(to: CGPoint(x: 0, y: 18.81), controlPoint1: CGPoint(x: 0.75, y: 20.5), controlPoint2: CGPoint(x: 0, y: 19.74))
            icon.addLine(to: CGPoint(x: 0, y: 5.51))
            icon.addCurve(to: CGPoint(x: 1.68, y: 3.82), controlPoint1: CGPoint(x: 0, y: 4.57), controlPoint2: CGPoint(x: 0.75, y: 3.82))
            icon.addLine(to: CGPoint(x: 5.66, y: 3.82))
            icon.addCurve(to: CGPoint(x: 6.44, y: 3.41), controlPoint1: CGPoint(x: 5.97, y: 3.82), controlPoint2: CGPoint(x: 6.26, y: 3.66))
            icon.addLine(to: CGPoint(x: 8.29, y: 0.67))
            icon.addCurve(to: CGPoint(x: 9.64, y: 0), controlPoint1: CGPoint(x: 8.58, y: 0.3), controlPoint2: CGPoint(x: 9.18, y: 0))
            icon.close()
            icon.move(to: CGPoint(x: 19.29, y: 5.94))
            icon.addCurve(to: CGPoint(x: 20.13, y: 6.78), controlPoint1: CGPoint(x: 19.29, y: 6.4), controlPoint2: CGPoint(x: 19.67, y: 6.78))
            icon.addCurve(to: CGPoint(x: 20.97, y: 5.94), controlPoint1: CGPoint(x: 20.59, y: 6.78), controlPoint2: CGPoint(x: 20.97, y: 6.4))
            icon.addCurve(to: CGPoint(x: 20.13, y: 5.09), controlPoint1: CGPoint(x: 20.97, y: 5.47), controlPoint2: CGPoint(x: 20.59, y: 5.09))
            icon.addCurve(to: CGPoint(x: 19.29, y: 5.94), controlPoint1: CGPoint(x: 19.67, y: 5.09), controlPoint2: CGPoint(x: 19.29, y: 5.47))
            icon.close()
            icon.move(to: CGPoint(x: 6.82, y: 11.76))
            icon.addCurve(to: CGPoint(x: 13, y: 18), controlPoint1: CGPoint(x: 6.82, y: 15.2), controlPoint2: CGPoint(x: 9.59, y: 18))
            icon.addCurve(to: CGPoint(x: 19.18, y: 11.76), controlPoint1: CGPoint(x: 16.41, y: 18), controlPoint2: CGPoint(x: 19.18, y: 15.2))
            icon.addCurve(to: CGPoint(x: 13, y: 5.51), controlPoint1: CGPoint(x: 19.18, y: 8.31), controlPoint2: CGPoint(x: 16.41, y: 5.51))
            icon.addCurve(to: CGPoint(x: 6.82, y: 11.76), controlPoint1: CGPoint(x: 9.59, y: 5.51), controlPoint2: CGPoint(x: 6.82, y: 8.31))
            icon.close()
            icon.move(to: CGPoint(x: 2.52, y: 0.85))
            icon.addLine(to: CGPoint(x: 4.19, y: 0.85))
            icon.addCurve(to: CGPoint(x: 5.03, y: 1.7), controlPoint1: CGPoint(x: 4.66, y: 0.85), controlPoint2: CGPoint(x: 5.03, y: 1.23))
            icon.addLine(to: CGPoint(x: 5.03, y: 2.54))
            icon.addLine(to: CGPoint(x: 1.68, y: 2.54))
            icon.addLine(to: CGPoint(x: 1.68, y: 1.7))
            icon.addCurve(to: CGPoint(x: 2.52, y: 0.85), controlPoint1: CGPoint(x: 1.68, y: 1.23), controlPoint2: CGPoint(x: 2.05, y: 0.85))
            icon.close()
            icon.move(to: CGPoint(x: 7.95, y: 11.76))
            icon.addCurve(to: CGPoint(x: 13, y: 6.65), controlPoint1: CGPoint(x: 7.95, y: 8.94), controlPoint2: CGPoint(x: 10.21, y: 6.65))
            icon.addCurve(to: CGPoint(x: 18.05, y: 11.76), controlPoint1: CGPoint(x: 15.79, y: 6.65), controlPoint2: CGPoint(x: 18.05, y: 8.94))
            icon.addCurve(to: CGPoint(x: 13, y: 16.87), controlPoint1: CGPoint(x: 18.05, y: 14.58), controlPoint2: CGPoint(x: 15.79, y: 16.87))
            icon.addCurve(to: CGPoint(x: 7.95, y: 11.76), controlPoint1: CGPoint(x: 10.21, y: 16.87), controlPoint2: CGPoint(x: 7.95, y: 14.58))
            icon.close()
            context.saveGState()
            icon.usesEvenOddFillRule = true
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarAddFriend(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 2, y: 4)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 22.43, y: 10.84))
            icon.addLine(to: CGPoint(x: 25.29, y: 10.84))
            icon.addCurve(to: CGPoint(x: 26.04, y: 11.59), controlPoint1: CGPoint(x: 25.71, y: 10.84), controlPoint2: CGPoint(x: 26.04, y: 11.17))
            icon.addLine(to: CGPoint(x: 26.04, y: 12.04))
            icon.addCurve(to: CGPoint(x: 25.29, y: 12.79), controlPoint1: CGPoint(x: 26.04, y: 12.45), controlPoint2: CGPoint(x: 25.71, y: 12.79))
            icon.addLine(to: CGPoint(x: 22.43, y: 12.79))
            icon.addLine(to: CGPoint(x: 22.43, y: 15.66))
            icon.addCurve(to: CGPoint(x: 21.68, y: 16.41), controlPoint1: CGPoint(x: 22.43, y: 16.07), controlPoint2: CGPoint(x: 22.09, y: 16.41))
            icon.addLine(to: CGPoint(x: 21.23, y: 16.41))
            icon.addCurve(to: CGPoint(x: 20.48, y: 15.66), controlPoint1: CGPoint(x: 20.81, y: 16.41), controlPoint2: CGPoint(x: 20.48, y: 16.07))
            icon.addLine(to: CGPoint(x: 20.48, y: 12.79))
            icon.addLine(to: CGPoint(x: 17.61, y: 12.79))
            icon.addCurve(to: CGPoint(x: 16.86, y: 12.04), controlPoint1: CGPoint(x: 17.19, y: 12.79), controlPoint2: CGPoint(x: 16.86, y: 12.45))
            icon.addLine(to: CGPoint(x: 16.86, y: 11.59))
            icon.addCurve(to: CGPoint(x: 17.61, y: 10.84), controlPoint1: CGPoint(x: 16.86, y: 11.17), controlPoint2: CGPoint(x: 17.19, y: 10.84))
            icon.addLine(to: CGPoint(x: 20.48, y: 10.84))
            icon.addLine(to: CGPoint(x: 20.48, y: 7.97))
            icon.addCurve(to: CGPoint(x: 21.23, y: 7.22), controlPoint1: CGPoint(x: 20.48, y: 7.55), controlPoint2: CGPoint(x: 20.81, y: 7.22))
            icon.addLine(to: CGPoint(x: 21.68, y: 7.22))
            icon.addCurve(to: CGPoint(x: 22.43, y: 7.97), controlPoint1: CGPoint(x: 22.09, y: 7.22), controlPoint2: CGPoint(x: 22.43, y: 7.55))
            icon.addLine(to: CGPoint(x: 22.43, y: 10.84))
            icon.close()
            icon.move(to: CGPoint(x: 7.38, y: 0.65))
            icon.addCurve(to: CGPoint(x: 10.12, y: 0), controlPoint1: CGPoint(x: 8.26, y: 0.2), controlPoint2: CGPoint(x: 9.18, y: 0))
            icon.addCurve(to: CGPoint(x: 11.52, y: 0.14), controlPoint1: CGPoint(x: 10.58, y: 0), controlPoint2: CGPoint(x: 11.05, y: 0.05))
            icon.addCurve(to: CGPoint(x: 12.78, y: 0.85), controlPoint1: CGPoint(x: 12.01, y: 0.24), controlPoint2: CGPoint(x: 12.46, y: 0.44))
            icon.addCurve(to: CGPoint(x: 13.13, y: 1.06), controlPoint1: CGPoint(x: 12.87, y: 0.97), controlPoint2: CGPoint(x: 12.97, y: 1.03))
            icon.addCurve(to: CGPoint(x: 15.22, y: 2.82), controlPoint1: CGPoint(x: 14.14, y: 1.26), controlPoint2: CGPoint(x: 14.85, y: 1.84))
            icon.addCurve(to: CGPoint(x: 15.54, y: 4.57), controlPoint1: CGPoint(x: 15.44, y: 3.38), controlPoint2: CGPoint(x: 15.52, y: 3.97))
            icon.addCurve(to: CGPoint(x: 14.99, y: 8.09), controlPoint1: CGPoint(x: 15.56, y: 5.77), controlPoint2: CGPoint(x: 15.34, y: 6.94))
            icon.addCurve(to: CGPoint(x: 15.04, y: 8.31), controlPoint1: CGPoint(x: 14.96, y: 8.18), controlPoint2: CGPoint(x: 14.96, y: 8.24))
            icon.addCurve(to: CGPoint(x: 15.36, y: 8.85), controlPoint1: CGPoint(x: 15.22, y: 8.44), controlPoint2: CGPoint(x: 15.33, y: 8.63))
            icon.addCurve(to: CGPoint(x: 14.96, y: 10.69), controlPoint1: CGPoint(x: 15.48, y: 9.52), controlPoint2: CGPoint(x: 15.34, y: 10.13))
            icon.addCurve(to: CGPoint(x: 14.48, y: 11.04), controlPoint1: CGPoint(x: 14.85, y: 10.87), controlPoint2: CGPoint(x: 14.69, y: 10.99))
            icon.addCurve(to: CGPoint(x: 14.37, y: 11.17), controlPoint1: CGPoint(x: 14.44, y: 11.05), controlPoint2: CGPoint(x: 14.39, y: 11.12))
            icon.addCurve(to: CGPoint(x: 14, y: 12.5), controlPoint1: CGPoint(x: 14.25, y: 11.61), controlPoint2: CGPoint(x: 14.16, y: 12.07))
            icon.addCurve(to: CGPoint(x: 13.13, y: 14.08), controlPoint1: CGPoint(x: 13.8, y: 13.01), controlPoint2: CGPoint(x: 13.56, y: 13.72))
            icon.addCurve(to: CGPoint(x: 13.1, y: 14.2), controlPoint1: CGPoint(x: 13.1, y: 14.11), controlPoint2: CGPoint(x: 13.1, y: 14.16))
            icon.addCurve(to: CGPoint(x: 13.1, y: 15.92), controlPoint1: CGPoint(x: 13.1, y: 14.75), controlPoint2: CGPoint(x: 13.1, y: 15.36))
            icon.addCurve(to: CGPoint(x: 13.9, y: 16.82), controlPoint1: CGPoint(x: 13.16, y: 16.16), controlPoint2: CGPoint(x: 13.4, y: 16.56))
            icon.addCurve(to: CGPoint(x: 15.12, y: 17.15), controlPoint1: CGPoint(x: 14.36, y: 17.05), controlPoint2: CGPoint(x: 14.73, y: 17.13))
            icon.addCurve(to: CGPoint(x: 18.2, y: 18.08), controlPoint1: CGPoint(x: 16.6, y: 17.3), controlPoint2: CGPoint(x: 17.62, y: 17.6))
            icon.addCurve(to: CGPoint(x: 19.81, y: 21), controlPoint1: CGPoint(x: 19.01, y: 18.75), controlPoint2: CGPoint(x: 19.55, y: 19.73))
            icon.addLine(to: CGPoint(x: 13, y: 21))
            icon.addLine(to: CGPoint(x: 6.81, y: 21))
            icon.addLine(to: CGPoint(x: 0, y: 21))
            icon.addCurve(to: CGPoint(x: 1.61, y: 18.08), controlPoint1: CGPoint(x: 0.26, y: 19.73), controlPoint2: CGPoint(x: 0.79, y: 18.75))
            icon.addCurve(to: CGPoint(x: 5.78, y: 17.08), controlPoint1: CGPoint(x: 2.32, y: 17.5), controlPoint2: CGPoint(x: 3.71, y: 17.16))
            icon.addCurve(to: CGPoint(x: 6.84, y: 16.79), controlPoint1: CGPoint(x: 6.14, y: 17.06), controlPoint2: CGPoint(x: 6.49, y: 16.97))
            icon.addCurve(to: CGPoint(x: 7.57, y: 15.92), controlPoint1: CGPoint(x: 7.34, y: 16.53), controlPoint2: CGPoint(x: 7.5, y: 16.17))
            icon.addCurve(to: CGPoint(x: 7.59, y: 14.2), controlPoint1: CGPoint(x: 7.56, y: 15.33), controlPoint2: CGPoint(x: 7.58, y: 14.79))
            icon.addCurve(to: CGPoint(x: 7.5, y: 14.05), controlPoint1: CGPoint(x: 7.6, y: 14.08), controlPoint2: CGPoint(x: 7.57, y: 14.14))
            icon.addCurve(to: CGPoint(x: 6.65, y: 12.72), controlPoint1: CGPoint(x: 7.48, y: 14.02), controlPoint2: CGPoint(x: 7.02, y: 13.6))
            icon.addCurve(to: CGPoint(x: 6.25, y: 11.19), controlPoint1: CGPoint(x: 6.48, y: 12.31), controlPoint2: CGPoint(x: 6.33, y: 11.8))
            icon.addCurve(to: CGPoint(x: 6.14, y: 11.04), controlPoint1: CGPoint(x: 6.24, y: 11.13), controlPoint2: CGPoint(x: 6.19, y: 11.05))
            icon.addCurve(to: CGPoint(x: 5.59, y: 10.6), controlPoint1: CGPoint(x: 5.9, y: 10.97), controlPoint2: CGPoint(x: 5.73, y: 10.81))
            icon.addCurve(to: CGPoint(x: 5.23, y: 9.41), controlPoint1: CGPoint(x: 5.36, y: 10.24), controlPoint2: CGPoint(x: 5.28, y: 9.83))
            icon.addCurve(to: CGPoint(x: 5.62, y: 8.26), controlPoint1: CGPoint(x: 5.19, y: 8.97), controlPoint2: CGPoint(x: 5.27, y: 8.57))
            icon.addCurve(to: CGPoint(x: 5.65, y: 8.1), controlPoint1: CGPoint(x: 5.65, y: 8.23), controlPoint2: CGPoint(x: 5.66, y: 8.15))
            icon.addCurve(to: CGPoint(x: 5.31, y: 6.38), controlPoint1: CGPoint(x: 5.54, y: 7.53), controlPoint2: CGPoint(x: 5.4, y: 6.96))
            icon.addCurve(to: CGPoint(x: 5.33, y: 3.56), controlPoint1: CGPoint(x: 5.17, y: 5.44), controlPoint2: CGPoint(x: 5.15, y: 4.5))
            icon.addCurve(to: CGPoint(x: 7.38, y: 0.65), controlPoint1: CGPoint(x: 5.58, y: 2.27), controlPoint2: CGPoint(x: 6.2, y: 1.24))
            icon.close()
            context.saveGState()
            icon.usesEvenOddFillRule = true
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarWallet(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 2, y: 3)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 2.88, y: 0))
            icon.addCurve(to: CGPoint(x: 0, y: 2.86), controlPoint1: CGPoint(x: 1.3, y: 0), controlPoint2: CGPoint(x: 0, y: 1.29))
            icon.addLine(to: CGPoint(x: 0, y: 18.14))
            icon.addCurve(to: CGPoint(x: 2.88, y: 21), controlPoint1: CGPoint(x: 0, y: 19.72), controlPoint2: CGPoint(x: 1.29, y: 21))
            icon.addLine(to: CGPoint(x: 22.12, y: 21))
            icon.addCurve(to: CGPoint(x: 25, y: 18.14), controlPoint1: CGPoint(x: 23.71, y: 21), controlPoint2: CGPoint(x: 25, y: 19.72))
            icon.addLine(to: CGPoint(x: 25, y: 2.86))
            icon.addCurve(to: CGPoint(x: 22.12, y: 0), controlPoint1: CGPoint(x: 25, y: 1.29), controlPoint2: CGPoint(x: 23.7, y: 0))
            icon.addLine(to: CGPoint(x: 2.88, y: 0))
            icon.close()
            icon.move(to: CGPoint(x: 2.88, y: 1.91))
            icon.addLine(to: CGPoint(x: 22.12, y: 1.91))
            icon.addCurve(to: CGPoint(x: 23.08, y: 2.86), controlPoint1: CGPoint(x: 22.66, y: 1.91), controlPoint2: CGPoint(x: 23.08, y: 2.32))
            icon.addLine(to: CGPoint(x: 23.08, y: 4))
            icon.addCurve(to: CGPoint(x: 22.12, y: 3.82), controlPoint1: CGPoint(x: 22.77, y: 3.89), controlPoint2: CGPoint(x: 22.45, y: 3.82))
            icon.addLine(to: CGPoint(x: 2.88, y: 3.82))
            icon.addCurve(to: CGPoint(x: 1.92, y: 4), controlPoint1: CGPoint(x: 2.55, y: 3.82), controlPoint2: CGPoint(x: 2.23, y: 3.89))
            icon.addLine(to: CGPoint(x: 1.92, y: 2.86))
            icon.addCurve(to: CGPoint(x: 2.88, y: 1.91), controlPoint1: CGPoint(x: 1.92, y: 2.32), controlPoint2: CGPoint(x: 2.34, y: 1.91))
            icon.close()
            icon.move(to: CGPoint(x: 2.88, y: 5.73))
            icon.addLine(to: CGPoint(x: 22.12, y: 5.73))
            icon.addCurve(to: CGPoint(x: 23.08, y: 6.68), controlPoint1: CGPoint(x: 22.66, y: 5.73), controlPoint2: CGPoint(x: 23.08, y: 6.14))
            icon.addLine(to: CGPoint(x: 23.08, y: 7.81))
            icon.addCurve(to: CGPoint(x: 22.12, y: 7.64), controlPoint1: CGPoint(x: 22.77, y: 7.71), controlPoint2: CGPoint(x: 22.45, y: 7.64))
            icon.addLine(to: CGPoint(x: 2.88, y: 7.64))
            icon.addCurve(to: CGPoint(x: 1.92, y: 7.81), controlPoint1: CGPoint(x: 2.55, y: 7.64), controlPoint2: CGPoint(x: 2.23, y: 7.71))
            icon.addLine(to: CGPoint(x: 1.92, y: 6.68))
            icon.addCurve(to: CGPoint(x: 2.88, y: 5.73), controlPoint1: CGPoint(x: 1.92, y: 6.14), controlPoint2: CGPoint(x: 2.34, y: 5.73))
            icon.close()
            icon.move(to: CGPoint(x: 2.88, y: 9.54))
            icon.addLine(to: CGPoint(x: 22.12, y: 9.54))
            icon.addCurve(to: CGPoint(x: 23.08, y: 10.5), controlPoint1: CGPoint(x: 22.66, y: 9.54), controlPoint2: CGPoint(x: 23.08, y: 9.96))
            icon.addLine(to: CGPoint(x: 23.08, y: 11.46))
            icon.addLine(to: CGPoint(x: 18.27, y: 11.46))
            icon.addCurve(to: CGPoint(x: 15.49, y: 13.16), controlPoint1: CGPoint(x: 17.09, y: 11.46), controlPoint2: CGPoint(x: 16.01, y: 12.12))
            icon.addLine(to: CGPoint(x: 15.28, y: 13.57))
            icon.addCurve(to: CGPoint(x: 12.5, y: 15.27), controlPoint1: CGPoint(x: 14.76, y: 14.61), controlPoint2: CGPoint(x: 13.68, y: 15.27))
            icon.addCurve(to: CGPoint(x: 9.72, y: 13.57), controlPoint1: CGPoint(x: 11.32, y: 15.27), controlPoint2: CGPoint(x: 10.24, y: 14.61))
            icon.addLine(to: CGPoint(x: 9.51, y: 13.16))
            icon.addCurve(to: CGPoint(x: 6.73, y: 11.46), controlPoint1: CGPoint(x: 8.99, y: 12.12), controlPoint2: CGPoint(x: 7.91, y: 11.46))
            icon.addLine(to: CGPoint(x: 1.92, y: 11.46))
            icon.addLine(to: CGPoint(x: 1.92, y: 10.5))
            icon.addCurve(to: CGPoint(x: 2.88, y: 9.54), controlPoint1: CGPoint(x: 1.92, y: 9.96), controlPoint2: CGPoint(x: 2.34, y: 9.54))
            icon.close()
            context.saveGState()
            context.translateBy(x: 0.5, y: 0.5)
            icon.usesEvenOddFillRule = true
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarCalendar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 3, y: 2)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 2.8, y: 1.5))
            icon.addLine(to: CGPoint(x: 21.2, y: 1.5))
            icon.addCurve(to: CGPoint(x: 22.47, y: 2.75), controlPoint1: CGPoint(x: 21.9, y: 1.5), controlPoint2: CGPoint(x: 22.47, y: 2.06))
            icon.addLine(to: CGPoint(x: 22.47, y: 7))
            icon.addLine(to: CGPoint(x: 1.53, y: 7))
            icon.addLine(to: CGPoint(x: 1.53, y: 2.75))
            icon.addCurve(to: CGPoint(x: 2.8, y: 1.5), controlPoint1: CGPoint(x: 1.53, y: 2.06), controlPoint2: CGPoint(x: 2.1, y: 1.5))
            icon.move(to: CGPoint(x: 21.2, y: 0))
            icon.addCurve(to: CGPoint(x: 24, y: 2.75), controlPoint1: CGPoint(x: 22.75, y: 0), controlPoint2: CGPoint(x: 24, y: 1.23))
            icon.addLine(to: CGPoint(x: 24, y: 20.25))
            icon.addCurve(to: CGPoint(x: 21.2, y: 23), controlPoint1: CGPoint(x: 24, y: 21.77), controlPoint2: CGPoint(x: 22.75, y: 23))
            icon.addLine(to: CGPoint(x: 2.8, y: 23))
            icon.addCurve(to: CGPoint(x: 0, y: 20.25), controlPoint1: CGPoint(x: 1.25, y: 23), controlPoint2: CGPoint(x: 0, y: 21.77))
            icon.addLine(to: CGPoint(x: 0, y: 2.75))
            icon.addCurve(to: CGPoint(x: 2.8, y: 0), controlPoint1: CGPoint(x: 0, y: 1.23), controlPoint2: CGPoint(x: 1.25, y: 0))
            icon.addLine(to: CGPoint(x: 21.2, y: 0))
            icon.close()
            icon.move(to: CGPoint(x: 7.87, y: 12))
            icon.addCurve(to: CGPoint(x: 8.87, y: 11), controlPoint1: CGPoint(x: 8.42, y: 12), controlPoint2: CGPoint(x: 8.87, y: 11.55))
            icon.addCurve(to: CGPoint(x: 7.87, y: 10), controlPoint1: CGPoint(x: 8.87, y: 10.45), controlPoint2: CGPoint(x: 8.42, y: 10))
            icon.addCurve(to: CGPoint(x: 6.87, y: 11), controlPoint1: CGPoint(x: 7.32, y: 10), controlPoint2: CGPoint(x: 6.87, y: 10.45))
            icon.addCurve(to: CGPoint(x: 7.87, y: 12), controlPoint1: CGPoint(x: 6.87, y: 11.55), controlPoint2: CGPoint(x: 7.32, y: 12))
            icon.close()
            icon.move(to: CGPoint(x: 7.87, y: 15.5))
            icon.addCurve(to: CGPoint(x: 8.87, y: 14.5), controlPoint1: CGPoint(x: 8.42, y: 15.5), controlPoint2: CGPoint(x: 8.87, y: 15.05))
            icon.addCurve(to: CGPoint(x: 7.87, y: 13.5), controlPoint1: CGPoint(x: 8.87, y: 13.95), controlPoint2: CGPoint(x: 8.42, y: 13.5))
            icon.addCurve(to: CGPoint(x: 6.87, y: 14.5), controlPoint1: CGPoint(x: 7.32, y: 13.5), controlPoint2: CGPoint(x: 6.87, y: 13.95))
            icon.addCurve(to: CGPoint(x: 7.87, y: 15.5), controlPoint1: CGPoint(x: 6.87, y: 15.05), controlPoint2: CGPoint(x: 7.32, y: 15.5))
            icon.close()
            icon.move(to: CGPoint(x: 7.87, y: 19))
            icon.addCurve(to: CGPoint(x: 8.87, y: 18), controlPoint1: CGPoint(x: 8.42, y: 19), controlPoint2: CGPoint(x: 8.87, y: 18.55))
            icon.addCurve(to: CGPoint(x: 7.87, y: 17), controlPoint1: CGPoint(x: 8.87, y: 17.45), controlPoint2: CGPoint(x: 8.42, y: 17))
            icon.addCurve(to: CGPoint(x: 6.87, y: 18), controlPoint1: CGPoint(x: 7.32, y: 17), controlPoint2: CGPoint(x: 6.87, y: 17.45))
            icon.addCurve(to: CGPoint(x: 7.87, y: 19), controlPoint1: CGPoint(x: 6.87, y: 18.55), controlPoint2: CGPoint(x: 7.32, y: 19))
            icon.close()
            icon.move(to: CGPoint(x: 3.75, y: 15.5))
            icon.addCurve(to: CGPoint(x: 4.75, y: 14.5), controlPoint1: CGPoint(x: 4.3, y: 15.5), controlPoint2: CGPoint(x: 4.75, y: 15.05))
            icon.addCurve(to: CGPoint(x: 3.75, y: 13.5), controlPoint1: CGPoint(x: 4.75, y: 13.95), controlPoint2: CGPoint(x: 4.3, y: 13.5))
            icon.addCurve(to: CGPoint(x: 2.75, y: 14.5), controlPoint1: CGPoint(x: 3.2, y: 13.5), controlPoint2: CGPoint(x: 2.75, y: 13.95))
            icon.addCurve(to: CGPoint(x: 3.75, y: 15.5), controlPoint1: CGPoint(x: 2.75, y: 15.05), controlPoint2: CGPoint(x: 3.2, y: 15.5))
            icon.close()
            icon.move(to: CGPoint(x: 3.75, y: 12))
            icon.addCurve(to: CGPoint(x: 4.75, y: 11), controlPoint1: CGPoint(x: 4.3, y: 12), controlPoint2: CGPoint(x: 4.75, y: 11.55))
            icon.addCurve(to: CGPoint(x: 3.75, y: 10), controlPoint1: CGPoint(x: 4.75, y: 10.45), controlPoint2: CGPoint(x: 4.3, y: 10))
            icon.addCurve(to: CGPoint(x: 2.75, y: 11), controlPoint1: CGPoint(x: 3.2, y: 10), controlPoint2: CGPoint(x: 2.75, y: 10.45))
            icon.addCurve(to: CGPoint(x: 3.75, y: 12), controlPoint1: CGPoint(x: 2.75, y: 11.55), controlPoint2: CGPoint(x: 3.2, y: 12))
            icon.close()
            icon.move(to: CGPoint(x: 3.75, y: 19))
            icon.addCurve(to: CGPoint(x: 4.75, y: 18), controlPoint1: CGPoint(x: 4.3, y: 19), controlPoint2: CGPoint(x: 4.75, y: 18.55))
            icon.addCurve(to: CGPoint(x: 3.75, y: 17), controlPoint1: CGPoint(x: 4.75, y: 17.45), controlPoint2: CGPoint(x: 4.3, y: 17))
            icon.addCurve(to: CGPoint(x: 2.75, y: 18), controlPoint1: CGPoint(x: 3.2, y: 17), controlPoint2: CGPoint(x: 2.75, y: 17.45))
            icon.addCurve(to: CGPoint(x: 3.75, y: 19), controlPoint1: CGPoint(x: 2.75, y: 18.55), controlPoint2: CGPoint(x: 3.2, y: 19))
            icon.close()
            icon.move(to: CGPoint(x: 12, y: 12))
            icon.addCurve(to: CGPoint(x: 13, y: 11), controlPoint1: CGPoint(x: 12.55, y: 12), controlPoint2: CGPoint(x: 13, y: 11.55))
            icon.addCurve(to: CGPoint(x: 12, y: 10), controlPoint1: CGPoint(x: 13, y: 10.45), controlPoint2: CGPoint(x: 12.55, y: 10))
            icon.addCurve(to: CGPoint(x: 11, y: 11), controlPoint1: CGPoint(x: 11.45, y: 10), controlPoint2: CGPoint(x: 11, y: 10.45))
            icon.addCurve(to: CGPoint(x: 12, y: 12), controlPoint1: CGPoint(x: 11, y: 11.55), controlPoint2: CGPoint(x: 11.45, y: 12))
            icon.close()
            icon.move(to: CGPoint(x: 12, y: 15.5))
            icon.addCurve(to: CGPoint(x: 13, y: 14.5), controlPoint1: CGPoint(x: 12.55, y: 15.5), controlPoint2: CGPoint(x: 13, y: 15.05))
            icon.addCurve(to: CGPoint(x: 12, y: 13.5), controlPoint1: CGPoint(x: 13, y: 13.95), controlPoint2: CGPoint(x: 12.55, y: 13.5))
            icon.addCurve(to: CGPoint(x: 11, y: 14.5), controlPoint1: CGPoint(x: 11.45, y: 13.5), controlPoint2: CGPoint(x: 11, y: 13.95))
            icon.addCurve(to: CGPoint(x: 12, y: 15.5), controlPoint1: CGPoint(x: 11, y: 15.05), controlPoint2: CGPoint(x: 11.45, y: 15.5))
            icon.close()
            icon.move(to: CGPoint(x: 12, y: 19))
            icon.addCurve(to: CGPoint(x: 13, y: 18), controlPoint1: CGPoint(x: 12.55, y: 19), controlPoint2: CGPoint(x: 13, y: 18.55))
            icon.addCurve(to: CGPoint(x: 12, y: 17), controlPoint1: CGPoint(x: 13, y: 17.45), controlPoint2: CGPoint(x: 12.55, y: 17))
            icon.addCurve(to: CGPoint(x: 11, y: 18), controlPoint1: CGPoint(x: 11.45, y: 17), controlPoint2: CGPoint(x: 11, y: 17.45))
            icon.addCurve(to: CGPoint(x: 12, y: 19), controlPoint1: CGPoint(x: 11, y: 18.55), controlPoint2: CGPoint(x: 11.45, y: 19))
            icon.close()
            icon.move(to: CGPoint(x: 16.13, y: 12))
            icon.addCurve(to: CGPoint(x: 17.13, y: 11), controlPoint1: CGPoint(x: 16.68, y: 12), controlPoint2: CGPoint(x: 17.13, y: 11.55))
            icon.addCurve(to: CGPoint(x: 16.13, y: 10), controlPoint1: CGPoint(x: 17.13, y: 10.45), controlPoint2: CGPoint(x: 16.68, y: 10))
            icon.addCurve(to: CGPoint(x: 15.13, y: 11), controlPoint1: CGPoint(x: 15.58, y: 10), controlPoint2: CGPoint(x: 15.13, y: 10.45))
            icon.addCurve(to: CGPoint(x: 16.13, y: 12), controlPoint1: CGPoint(x: 15.13, y: 11.55), controlPoint2: CGPoint(x: 15.58, y: 12))
            icon.close()
            icon.move(to: CGPoint(x: 16.13, y: 19))
            icon.addCurve(to: CGPoint(x: 17.13, y: 18), controlPoint1: CGPoint(x: 16.68, y: 19), controlPoint2: CGPoint(x: 17.13, y: 18.55))
            icon.addCurve(to: CGPoint(x: 16.13, y: 17), controlPoint1: CGPoint(x: 17.13, y: 17.45), controlPoint2: CGPoint(x: 16.68, y: 17))
            icon.addCurve(to: CGPoint(x: 15.13, y: 18), controlPoint1: CGPoint(x: 15.58, y: 17), controlPoint2: CGPoint(x: 15.13, y: 17.45))
            icon.addCurve(to: CGPoint(x: 16.13, y: 19), controlPoint1: CGPoint(x: 15.13, y: 18.55), controlPoint2: CGPoint(x: 15.58, y: 19))
            icon.close()
            icon.move(to: CGPoint(x: 20.25, y: 12))
            icon.addCurve(to: CGPoint(x: 21.25, y: 11), controlPoint1: CGPoint(x: 20.8, y: 12), controlPoint2: CGPoint(x: 21.25, y: 11.55))
            icon.addCurve(to: CGPoint(x: 20.25, y: 10), controlPoint1: CGPoint(x: 21.25, y: 10.45), controlPoint2: CGPoint(x: 20.8, y: 10))
            icon.addCurve(to: CGPoint(x: 19.25, y: 11), controlPoint1: CGPoint(x: 19.7, y: 10), controlPoint2: CGPoint(x: 19.25, y: 10.45))
            icon.addCurve(to: CGPoint(x: 20.25, y: 12), controlPoint1: CGPoint(x: 19.25, y: 11.55), controlPoint2: CGPoint(x: 19.7, y: 12))
            icon.close()
            icon.move(to: CGPoint(x: 20.25, y: 15.5))
            icon.addCurve(to: CGPoint(x: 21.25, y: 14.5), controlPoint1: CGPoint(x: 20.8, y: 15.5), controlPoint2: CGPoint(x: 21.25, y: 15.05))
            icon.addCurve(to: CGPoint(x: 20.25, y: 13.5), controlPoint1: CGPoint(x: 21.25, y: 13.95), controlPoint2: CGPoint(x: 20.8, y: 13.5))
            icon.addCurve(to: CGPoint(x: 19.25, y: 14.5), controlPoint1: CGPoint(x: 19.7, y: 13.5), controlPoint2: CGPoint(x: 19.25, y: 13.95))
            icon.addCurve(to: CGPoint(x: 20.25, y: 15.5), controlPoint1: CGPoint(x: 19.25, y: 15.05), controlPoint2: CGPoint(x: 19.7, y: 15.5))
            icon.close()
            icon.move(to: CGPoint(x: 16.12, y: 15.9))
            icon.addCurve(to: CGPoint(x: 17.52, y: 14.5), controlPoint1: CGPoint(x: 16.89, y: 15.9), controlPoint2: CGPoint(x: 17.52, y: 15.27))
            icon.addCurve(to: CGPoint(x: 16.12, y: 13.1), controlPoint1: CGPoint(x: 17.52, y: 13.73), controlPoint2: CGPoint(x: 16.89, y: 13.1))
            icon.addCurve(to: CGPoint(x: 14.72, y: 14.5), controlPoint1: CGPoint(x: 15.35, y: 13.1), controlPoint2: CGPoint(x: 14.72, y: 13.73))
            icon.addCurve(to: CGPoint(x: 16.12, y: 15.9), controlPoint1: CGPoint(x: 14.72, y: 15.27), controlPoint2: CGPoint(x: 15.35, y: 15.9))
            icon.close()
            context.saveGState()
            context.translateBy(x: 0, y: 0.5)
            icon.usesEvenOddFillRule = true
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarTasks(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 4, y: 3)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 2, y: 0))
            icon.addLine(to: CGPoint(x: 21, y: 0))
            icon.addCurve(to: CGPoint(x: 23, y: 2), controlPoint1: CGPoint(x: 22.1, y: 0), controlPoint2: CGPoint(x: 23, y: 0.9))
            icon.addLine(to: CGPoint(x: 23, y: 21))
            icon.addCurve(to: CGPoint(x: 21, y: 23), controlPoint1: CGPoint(x: 23, y: 22.1), controlPoint2: CGPoint(x: 22.1, y: 23))
            icon.addLine(to: CGPoint(x: 2, y: 23))
            icon.addCurve(to: CGPoint(x: 0, y: 21), controlPoint1: CGPoint(x: 0.9, y: 23), controlPoint2: CGPoint(x: 0, y: 22.1))
            icon.addLine(to: CGPoint(x: 0, y: 2))
            icon.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
            icon.close()
            icon.move(to: CGPoint(x: 8.85, y: 4.8))
            icon.addCurve(to: CGPoint(x: 8, y: 5.65), controlPoint1: CGPoint(x: 8.38, y: 4.8), controlPoint2: CGPoint(x: 8, y: 5.18))
            icon.addCurve(to: CGPoint(x: 8.85, y: 6.5), controlPoint1: CGPoint(x: 8, y: 6.12), controlPoint2: CGPoint(x: 8.38, y: 6.5))
            icon.addLine(to: CGPoint(x: 19.15, y: 6.5))
            icon.addCurve(to: CGPoint(x: 20, y: 5.65), controlPoint1: CGPoint(x: 19.62, y: 6.5), controlPoint2: CGPoint(x: 20, y: 6.12))
            icon.addCurve(to: CGPoint(x: 19.15, y: 4.8), controlPoint1: CGPoint(x: 20, y: 5.18), controlPoint2: CGPoint(x: 19.62, y: 4.8))
            icon.addLine(to: CGPoint(x: 8.85, y: 4.8))
            icon.close()
            icon.move(to: CGPoint(x: 8.85, y: 10.8))
            icon.addCurve(to: CGPoint(x: 8, y: 11.65), controlPoint1: CGPoint(x: 8.38, y: 10.8), controlPoint2: CGPoint(x: 8, y: 11.18))
            icon.addCurve(to: CGPoint(x: 8.85, y: 12.5), controlPoint1: CGPoint(x: 8, y: 12.12), controlPoint2: CGPoint(x: 8.38, y: 12.5))
            icon.addLine(to: CGPoint(x: 19.15, y: 12.5))
            icon.addCurve(to: CGPoint(x: 20, y: 11.65), controlPoint1: CGPoint(x: 19.62, y: 12.5), controlPoint2: CGPoint(x: 20, y: 12.12))
            icon.addCurve(to: CGPoint(x: 19.15, y: 10.8), controlPoint1: CGPoint(x: 20, y: 11.18), controlPoint2: CGPoint(x: 19.62, y: 10.8))
            icon.addLine(to: CGPoint(x: 8.85, y: 10.8))
            icon.close()
            icon.move(to: CGPoint(x: 8.85, y: 16.8))
            icon.addCurve(to: CGPoint(x: 8, y: 17.65), controlPoint1: CGPoint(x: 8.38, y: 16.8), controlPoint2: CGPoint(x: 8, y: 17.18))
            icon.addCurve(to: CGPoint(x: 8.85, y: 18.5), controlPoint1: CGPoint(x: 8, y: 18.12), controlPoint2: CGPoint(x: 8.38, y: 18.5))
            icon.addLine(to: CGPoint(x: 19.15, y: 18.5))
            icon.addCurve(to: CGPoint(x: 20, y: 17.65), controlPoint1: CGPoint(x: 19.62, y: 18.5), controlPoint2: CGPoint(x: 20, y: 18.12))
            icon.addCurve(to: CGPoint(x: 19.15, y: 16.8), controlPoint1: CGPoint(x: 20, y: 17.18), controlPoint2: CGPoint(x: 19.62, y: 16.8))
            icon.addLine(to: CGPoint(x: 8.85, y: 16.8))
            icon.close()
            icon.move(to: CGPoint(x: 4.25, y: 6.7))
            icon.addCurve(to: CGPoint(x: 5.5, y: 5.45), controlPoint1: CGPoint(x: 4.94, y: 6.7), controlPoint2: CGPoint(x: 5.5, y: 6.14))
            icon.addCurve(to: CGPoint(x: 4.25, y: 4.2), controlPoint1: CGPoint(x: 5.5, y: 4.76), controlPoint2: CGPoint(x: 4.94, y: 4.2))
            icon.addCurve(to: CGPoint(x: 3, y: 5.45), controlPoint1: CGPoint(x: 3.56, y: 4.2), controlPoint2: CGPoint(x: 3, y: 4.76))
            icon.addCurve(to: CGPoint(x: 4.25, y: 6.7), controlPoint1: CGPoint(x: 3, y: 6.14), controlPoint2: CGPoint(x: 3.56, y: 6.7))
            icon.close()
            icon.move(to: CGPoint(x: 4.25, y: 12.7))
            icon.addCurve(to: CGPoint(x: 5.5, y: 11.45), controlPoint1: CGPoint(x: 4.94, y: 12.7), controlPoint2: CGPoint(x: 5.5, y: 12.14))
            icon.addCurve(to: CGPoint(x: 4.25, y: 10.2), controlPoint1: CGPoint(x: 5.5, y: 10.76), controlPoint2: CGPoint(x: 4.94, y: 10.2))
            icon.addCurve(to: CGPoint(x: 3, y: 11.45), controlPoint1: CGPoint(x: 3.56, y: 10.2), controlPoint2: CGPoint(x: 3, y: 10.76))
            icon.addCurve(to: CGPoint(x: 4.25, y: 12.7), controlPoint1: CGPoint(x: 3, y: 12.14), controlPoint2: CGPoint(x: 3.56, y: 12.7))
            icon.close()
            icon.move(to: CGPoint(x: 4.25, y: 18.7))
            icon.addCurve(to: CGPoint(x: 5.5, y: 17.45), controlPoint1: CGPoint(x: 4.94, y: 18.7), controlPoint2: CGPoint(x: 5.5, y: 18.14))
            icon.addCurve(to: CGPoint(x: 4.25, y: 16.2), controlPoint1: CGPoint(x: 5.5, y: 16.76), controlPoint2: CGPoint(x: 4.94, y: 16.2))
            icon.addCurve(to: CGPoint(x: 3, y: 17.45), controlPoint1: CGPoint(x: 3.56, y: 16.2), controlPoint2: CGPoint(x: 3, y: 16.76))
            icon.addCurve(to: CGPoint(x: 4.25, y: 18.7), controlPoint1: CGPoint(x: 3, y: 18.14), controlPoint2: CGPoint(x: 3.56, y: 18.7))
            icon.close()
            context.saveGState()
            icon.usesEvenOddFillRule = true
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarTrend(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 8, y: 2)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 3.72, y: 0))
            icon.addCurve(to: CGPoint(x: 2.8, y: 0.76), controlPoint1: CGPoint(x: 3.26, y: 0), controlPoint2: CGPoint(x: 2.88, y: 0.32))
            icon.addLine(to: CGPoint(x: 0.03, y: 12.68))
            icon.addCurve(to: CGPoint(x: 0, y: 12.92), controlPoint1: CGPoint(x: 0.01, y: 12.76), controlPoint2: CGPoint(x: 0, y: 12.84))
            icon.addCurve(to: CGPoint(x: 0.93, y: 13.84), controlPoint1: CGPoint(x: 0, y: 13.43), controlPoint2: CGPoint(x: 0.42, y: 13.85))
            icon.addLine(to: CGPoint(x: 6.04, y: 13.84))
            icon.addLine(to: CGPoint(x: 4.66, y: 22.89))
            icon.addCurve(to: CGPoint(x: 4.64, y: 23.08), controlPoint1: CGPoint(x: 4.65, y: 22.95), controlPoint2: CGPoint(x: 4.64, y: 23.01))
            icon.addCurve(to: CGPoint(x: 5.57, y: 24), controlPoint1: CGPoint(x: 4.64, y: 23.59), controlPoint2: CGPoint(x: 5.06, y: 24))
            icon.addCurve(to: CGPoint(x: 6.39, y: 23.51), controlPoint1: CGPoint(x: 5.91, y: 24), controlPoint2: CGPoint(x: 6.23, y: 23.81))
            icon.addLine(to: CGPoint(x: 12.82, y: 11.62))
            icon.addCurve(to: CGPoint(x: 13, y: 11.08), controlPoint1: CGPoint(x: 12.92, y: 11.45), controlPoint2: CGPoint(x: 13, y: 11.28))
            icon.addCurve(to: CGPoint(x: 12.07, y: 10.15), controlPoint1: CGPoint(x: 13, y: 10.57), controlPoint2: CGPoint(x: 12.58, y: 10.15))
            icon.addLine(to: CGPoint(x: 6.96, y: 10.15))
            icon.addLine(to: CGPoint(x: 10.13, y: 1.3))
            icon.addCurve(to: CGPoint(x: 10.21, y: 0.92), controlPoint1: CGPoint(x: 10.19, y: 1.18), controlPoint2: CGPoint(x: 10.21, y: 1.05))
            icon.addCurve(to: CGPoint(x: 9.28, y: 0), controlPoint1: CGPoint(x: 10.21, y: 0.41), controlPoint2: CGPoint(x: 9.8, y: 0))
            icon.addLine(to: CGPoint(x: 3.72, y: 0))
            icon.close()
            context.saveGState()
            context.translateBy(x: 0.5, y: 0)
            icon.usesEvenOddFillRule = true
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
            
            /// Icon (Outline Mask)
            context.saveGState()
            icon.apply(CGAffineTransform(translationX: 0.5, y: 0))
            icon.addClip()
            
            // Empty.
            
            context.restoreGState()
            // End Icon (Outline Mask)
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarSearch(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 3, y: 1)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 17.03, y: 16.23))
            icon.addLine(to: CGPoint(x: 22.67, y: 21.87))
            icon.addCurve(to: CGPoint(x: 22.67, y: 23.63), controlPoint1: CGPoint(x: 23.16, y: 22.36), controlPoint2: CGPoint(x: 23.16, y: 23.15))
            icon.addCurve(to: CGPoint(x: 20.91, y: 23.63), controlPoint1: CGPoint(x: 22.18, y: 24.12), controlPoint2: CGPoint(x: 21.4, y: 24.12))
            icon.addLine(to: CGPoint(x: 15.17, y: 17.9))
            icon.addCurve(to: CGPoint(x: 9.71, y: 19.59), controlPoint1: CGPoint(x: 13.62, y: 18.97), controlPoint2: CGPoint(x: 11.74, y: 19.59))
            icon.addCurve(to: CGPoint(x: 0, y: 9.8), controlPoint1: CGPoint(x: 4.35, y: 19.59), controlPoint2: CGPoint(x: 0, y: 15.21))
            icon.addCurve(to: CGPoint(x: 9.71, y: 0), controlPoint1: CGPoint(x: 0, y: 4.39), controlPoint2: CGPoint(x: 4.35, y: 0))
            icon.addCurve(to: CGPoint(x: 19.42, y: 9.8), controlPoint1: CGPoint(x: 15.07, y: 0), controlPoint2: CGPoint(x: 19.42, y: 4.39))
            icon.addCurve(to: CGPoint(x: 17.03, y: 16.23), controlPoint1: CGPoint(x: 19.42, y: 12.26), controlPoint2: CGPoint(x: 18.52, y: 14.51))
            icon.close()
            icon.move(to: CGPoint(x: 9.71, y: 17.08))
            icon.addCurve(to: CGPoint(x: 16.93, y: 9.8), controlPoint1: CGPoint(x: 13.7, y: 17.08), controlPoint2: CGPoint(x: 16.93, y: 13.82))
            icon.addCurve(to: CGPoint(x: 9.71, y: 2.51), controlPoint1: CGPoint(x: 16.93, y: 5.77), controlPoint2: CGPoint(x: 13.7, y: 2.51))
            icon.addCurve(to: CGPoint(x: 2.49, y: 9.8), controlPoint1: CGPoint(x: 5.72, y: 2.51), controlPoint2: CGPoint(x: 2.49, y: 5.77))
            icon.addCurve(to: CGPoint(x: 9.71, y: 17.08), controlPoint1: CGPoint(x: 2.49, y: 13.82), controlPoint2: CGPoint(x: 5.72, y: 17.08))
            icon.close()
            context.saveGState()
            context.translateBy(x: 0.25, y: 0.75)
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarCalls(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 5, y: 4)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 1.6, y: 8.08))
            icon.addCurve(to: CGPoint(x: 0, y: 3.13), controlPoint1: CGPoint(x: 0.44, y: 5.97), controlPoint2: CGPoint(x: 0, y: 4.27))
            icon.addCurve(to: CGPoint(x: 0.57, y: 1.39), controlPoint1: CGPoint(x: 0, y: 1.98), controlPoint2: CGPoint(x: 0.28, y: 1.65))
            icon.addCurve(to: CGPoint(x: 2.36, y: 0.18), controlPoint1: CGPoint(x: 0.85, y: 1.12), controlPoint2: CGPoint(x: 2.14, y: 0.33))
            icon.addCurve(to: CGPoint(x: 3.94, y: 0.5), controlPoint1: CGPoint(x: 2.58, y: 0.03), controlPoint2: CGPoint(x: 3.42, y: -0.26))
            icon.addCurve(to: CGPoint(x: 6.14, y: 3.78), controlPoint1: CGPoint(x: 4.47, y: 1.26), controlPoint2: CGPoint(x: 5.46, y: 2.77))
            icon.addCurve(to: CGPoint(x: 6.08, y: 6.21), controlPoint1: CGPoint(x: 7.21, y: 5.21), controlPoint2: CGPoint(x: 6.36, y: 5.84))
            icon.addCurve(to: CGPoint(x: 5.29, y: 7.92), controlPoint1: CGPoint(x: 5.58, y: 6.9), controlPoint2: CGPoint(x: 5.29, y: 7.08))
            icon.addCurve(to: CGPoint(x: 8.23, y: 11.78), controlPoint1: CGPoint(x: 5.29, y: 8.77), controlPoint2: CGPoint(x: 7.66, y: 11.19))
            icon.addCurve(to: CGPoint(x: 11.89, y: 14.55), controlPoint1: CGPoint(x: 8.79, y: 12.37), controlPoint2: CGPoint(x: 11.15, y: 14.44))
            icon.addCurve(to: CGPoint(x: 13.82, y: 13.69), controlPoint1: CGPoint(x: 12.63, y: 14.67), controlPoint2: CGPoint(x: 13.61, y: 13.88))
            icon.addCurve(to: CGPoint(x: 15.99, y: 13.76), controlPoint1: CGPoint(x: 14.89, y: 12.87), controlPoint2: CGPoint(x: 15.49, y: 13.49))
            icon.addCurve(to: CGPoint(x: 19.39, y: 15.88), controlPoint1: CGPoint(x: 16.48, y: 14.03), controlPoint2: CGPoint(x: 18.7, y: 15.41))
            icon.addCurve(to: CGPoint(x: 20, y: 17.07), controlPoint1: CGPoint(x: 20.04, y: 16.35), controlPoint2: CGPoint(x: 20, y: 17.07))
            icon.addCurve(to: CGPoint(x: 18.5, y: 19.45), controlPoint1: CGPoint(x: 20, y: 17.07), controlPoint2: CGPoint(x: 18.66, y: 19.19))
            icon.addCurve(to: CGPoint(x: 16.72, y: 20), controlPoint1: CGPoint(x: 18.3, y: 19.75), controlPoint2: CGPoint(x: 17.81, y: 20))
            icon.addCurve(to: CGPoint(x: 11.67, y: 18.27), controlPoint1: CGPoint(x: 15.62, y: 20), controlPoint2: CGPoint(x: 14.45, y: 19.8))
            icon.addCurve(to: CGPoint(x: 6.1, y: 13.92), controlPoint1: CGPoint(x: 9.4, y: 17.02), controlPoint2: CGPoint(x: 7.23, y: 15.06))
            icon.addCurve(to: CGPoint(x: 1.6, y: 8.08), controlPoint1: CGPoint(x: 4.92, y: 12.77), controlPoint2: CGPoint(x: 2.93, y: 10.48))
            icon.close()
            context.saveGState()
            icon.usesEvenOddFillRule = true
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarPlan(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 2, y: 3)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 9, y: 0))
            icon.addCurve(to: CGPoint(x: 8.01, y: 1), controlPoint1: CGPoint(x: 8.45, y: 0), controlPoint2: CGPoint(x: 8.01, y: 0.45))
            icon.addLine(to: CGPoint(x: 8.01, y: 18))
            icon.addLine(to: CGPoint(x: 12, y: 18))
            icon.addLine(to: CGPoint(x: 12, y: 1))
            icon.addCurve(to: CGPoint(x: 11, y: 0), controlPoint1: CGPoint(x: 12, y: 0.45), controlPoint2: CGPoint(x: 11.55, y: 0))
            icon.addLine(to: CGPoint(x: 9, y: 0))
            icon.close()
            icon.move(to: CGPoint(x: 3.01, y: 2))
            icon.addCurve(to: CGPoint(x: 2.01, y: 3), controlPoint1: CGPoint(x: 2.46, y: 2), controlPoint2: CGPoint(x: 2.01, y: 2.45))
            icon.addLine(to: CGPoint(x: 2.01, y: 18))
            icon.addLine(to: CGPoint(x: 6.01, y: 18))
            icon.addLine(to: CGPoint(x: 6.01, y: 3))
            icon.addCurve(to: CGPoint(x: 5.01, y: 2), controlPoint1: CGPoint(x: 6.01, y: 2.45), controlPoint2: CGPoint(x: 5.56, y: 2))
            icon.addLine(to: CGPoint(x: 3.01, y: 2))
            icon.close()
            icon.move(to: CGPoint(x: 20.99, y: 4))
            icon.addCurve(to: CGPoint(x: 19.99, y: 5), controlPoint1: CGPoint(x: 20.44, y: 4), controlPoint2: CGPoint(x: 19.99, y: 4.45))
            icon.addLine(to: CGPoint(x: 19.99, y: 18))
            icon.addLine(to: CGPoint(x: 23.99, y: 18))
            icon.addLine(to: CGPoint(x: 23.99, y: 5))
            icon.addCurve(to: CGPoint(x: 22.99, y: 4), controlPoint1: CGPoint(x: 23.99, y: 4.45), controlPoint2: CGPoint(x: 23.54, y: 4))
            icon.addLine(to: CGPoint(x: 20.99, y: 4))
            icon.close()
            icon.move(to: CGPoint(x: 15, y: 6))
            icon.addCurve(to: CGPoint(x: 14, y: 7), controlPoint1: CGPoint(x: 14.45, y: 6), controlPoint2: CGPoint(x: 14, y: 6.45))
            icon.addLine(to: CGPoint(x: 14, y: 18))
            icon.addLine(to: CGPoint(x: 17.99, y: 18))
            icon.addLine(to: CGPoint(x: 17.99, y: 7))
            icon.addCurve(to: CGPoint(x: 17, y: 6), controlPoint1: CGPoint(x: 17.99, y: 6.45), controlPoint2: CGPoint(x: 17.55, y: 6))
            icon.addLine(to: CGPoint(x: 15, y: 6))
            icon.close()
            icon.move(to: CGPoint(x: 1.01, y: 20))
            icon.addCurve(to: CGPoint(x: 0.14, y: 20.5), controlPoint1: CGPoint(x: 0.65, y: 19.99), controlPoint2: CGPoint(x: 0.32, y: 20.18))
            icon.addCurve(to: CGPoint(x: 0.14, y: 21.5), controlPoint1: CGPoint(x: -0.05, y: 20.81), controlPoint2: CGPoint(x: -0.05, y: 21.19))
            icon.addCurve(to: CGPoint(x: 1.01, y: 22), controlPoint1: CGPoint(x: 0.32, y: 21.82), controlPoint2: CGPoint(x: 0.65, y: 22.01))
            icon.addLine(to: CGPoint(x: 24.99, y: 22))
            icon.addCurve(to: CGPoint(x: 25.86, y: 21.5), controlPoint1: CGPoint(x: 25.35, y: 22.01), controlPoint2: CGPoint(x: 25.68, y: 21.82))
            icon.addCurve(to: CGPoint(x: 25.86, y: 20.5), controlPoint1: CGPoint(x: 26.05, y: 21.19), controlPoint2: CGPoint(x: 26.05, y: 20.81))
            icon.addCurve(to: CGPoint(x: 24.99, y: 20), controlPoint1: CGPoint(x: 25.68, y: 20.18), controlPoint2: CGPoint(x: 25.35, y: 19.99))
            icon.addLine(to: CGPoint(x: 1.01, y: 20))
            icon.close()
            context.saveGState()
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarPay(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 2, y: 1)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 16.35, y: 0))
            icon.addCurve(to: CGPoint(x: 10.99, y: 2.19), controlPoint1: CGPoint(x: 14.26, y: 0), controlPoint2: CGPoint(x: 12.37, y: 0.84))
            icon.addCurve(to: CGPoint(x: 14.92, y: 3.99), controlPoint1: CGPoint(x: 12.44, y: 2.52), controlPoint2: CGPoint(x: 13.77, y: 3.14))
            icon.addCurve(to: CGPoint(x: 15.38, y: 3.84), controlPoint1: CGPoint(x: 15.07, y: 3.94), controlPoint2: CGPoint(x: 15.22, y: 3.88))
            icon.addLine(to: CGPoint(x: 15.38, y: 2.88))
            icon.addLine(to: CGPoint(x: 17.31, y: 2.88))
            icon.addLine(to: CGPoint(x: 17.31, y: 3.85))
            icon.addCurve(to: CGPoint(x: 19.35, y: 6.08), controlPoint1: CGPoint(x: 18.53, y: 4.14), controlPoint2: CGPoint(x: 19.32, y: 4.96))
            icon.addLine(to: CGPoint(x: 17.58, y: 6.08))
            icon.addCurve(to: CGPoint(x: 16.36, y: 5.17), controlPoint1: CGPoint(x: 17.54, y: 5.54), controlPoint2: CGPoint(x: 17.04, y: 5.17))
            icon.addCurve(to: CGPoint(x: 16.28, y: 5.19), controlPoint1: CGPoint(x: 16.33, y: 5.17), controlPoint2: CGPoint(x: 16.31, y: 5.18))
            icon.addCurve(to: CGPoint(x: 17.72, y: 7.08), controlPoint1: CGPoint(x: 16.83, y: 5.76), controlPoint2: CGPoint(x: 17.31, y: 6.39))
            icon.addCurve(to: CGPoint(x: 19.43, y: 8.6), controlPoint1: CGPoint(x: 18.72, y: 7.34), controlPoint2: CGPoint(x: 19.26, y: 7.83))
            icon.addCurve(to: CGPoint(x: 23.02, y: 11.49), controlPoint1: CGPoint(x: 20.85, y: 9.26), controlPoint2: CGPoint(x: 22.08, y: 10.25))
            icon.addCurve(to: CGPoint(x: 24.04, y: 7.69), controlPoint1: CGPoint(x: 23.67, y: 10.37), controlPoint2: CGPoint(x: 24.04, y: 9.08))
            icon.addCurve(to: CGPoint(x: 16.35, y: 0), controlPoint1: CGPoint(x: 24.04, y: 3.44), controlPoint2: CGPoint(x: 20.59, y: 0))
            icon.close()
            icon.move(to: CGPoint(x: 8.65, y: 3.85))
            icon.addCurve(to: CGPoint(x: 0, y: 12.5), controlPoint1: CGPoint(x: 3.87, y: 3.85), controlPoint2: CGPoint(x: 0, y: 7.72))
            icon.addCurve(to: CGPoint(x: 8.65, y: 21.15), controlPoint1: CGPoint(x: 0, y: 17.28), controlPoint2: CGPoint(x: 3.87, y: 21.15))
            icon.addCurve(to: CGPoint(x: 17.31, y: 12.5), controlPoint1: CGPoint(x: 13.43, y: 21.15), controlPoint2: CGPoint(x: 17.31, y: 17.28))
            icon.addCurve(to: CGPoint(x: 8.65, y: 3.85), controlPoint1: CGPoint(x: 17.31, y: 7.72), controlPoint2: CGPoint(x: 13.43, y: 3.85))
            icon.close()
            icon.move(to: CGPoint(x: 7.69, y: 7.69))
            icon.addLine(to: CGPoint(x: 9.62, y: 7.69))
            icon.addLine(to: CGPoint(x: 9.62, y: 8.66))
            icon.addCurve(to: CGPoint(x: 11.66, y: 10.88), controlPoint1: CGPoint(x: 10.84, y: 8.94), controlPoint2: CGPoint(x: 11.63, y: 9.77))
            icon.addLine(to: CGPoint(x: 9.89, y: 10.88))
            icon.addCurve(to: CGPoint(x: 8.67, y: 9.98), controlPoint1: CGPoint(x: 9.85, y: 10.35), controlPoint2: CGPoint(x: 9.35, y: 9.98))
            icon.addCurve(to: CGPoint(x: 7.56, y: 10.8), controlPoint1: CGPoint(x: 8, y: 9.98), controlPoint2: CGPoint(x: 7.56, y: 10.3))
            icon.addCurve(to: CGPoint(x: 8.68, y: 11.61), controlPoint1: CGPoint(x: 7.56, y: 11.21), controlPoint2: CGPoint(x: 7.89, y: 11.45))
            icon.addLine(to: CGPoint(x: 9.65, y: 11.79))
            icon.addCurve(to: CGPoint(x: 11.8, y: 13.95), controlPoint1: CGPoint(x: 11.14, y: 12.08), controlPoint2: CGPoint(x: 11.8, y: 12.75))
            icon.addCurve(to: CGPoint(x: 9.62, y: 16.36), controlPoint1: CGPoint(x: 11.8, y: 15.23), controlPoint2: CGPoint(x: 10.99, y: 16.09))
            icon.addLine(to: CGPoint(x: 9.62, y: 17.31))
            icon.addLine(to: CGPoint(x: 7.69, y: 17.31))
            icon.addLine(to: CGPoint(x: 7.69, y: 16.37))
            icon.addCurve(to: CGPoint(x: 5.51, y: 14.12), controlPoint1: CGPoint(x: 6.35, y: 16.11), controlPoint2: CGPoint(x: 5.53, y: 15.31))
            icon.addLine(to: CGPoint(x: 7.33, y: 14.12))
            icon.addCurve(to: CGPoint(x: 8.71, y: 15.01), controlPoint1: CGPoint(x: 7.38, y: 14.66), controlPoint2: CGPoint(x: 7.92, y: 15.01))
            icon.addCurve(to: CGPoint(x: 9.92, y: 14.17), controlPoint1: CGPoint(x: 9.43, y: 15.01), controlPoint2: CGPoint(x: 9.92, y: 14.67))
            icon.addCurve(to: CGPoint(x: 8.73, y: 13.36), controlPoint1: CGPoint(x: 9.92, y: 13.76), controlPoint2: CGPoint(x: 9.59, y: 13.53))
            icon.addLine(to: CGPoint(x: 7.74, y: 13.16))
            icon.addCurve(to: CGPoint(x: 5.66, y: 10.97), controlPoint1: CGPoint(x: 6.37, y: 12.9), controlPoint2: CGPoint(x: 5.66, y: 12.15))
            icon.addCurve(to: CGPoint(x: 7.69, y: 8.65), controlPoint1: CGPoint(x: 5.66, y: 9.78), controlPoint2: CGPoint(x: 6.44, y: 8.93))
            icon.addLine(to: CGPoint(x: 7.69, y: 7.69))
            icon.close()
            icon.move(to: CGPoint(x: 19.04, y: 10.54))
            icon.addCurve(to: CGPoint(x: 19.23, y: 12.5), controlPoint1: CGPoint(x: 19.16, y: 11.17), controlPoint2: CGPoint(x: 19.23, y: 11.83))
            icon.addCurve(to: CGPoint(x: 18.04, y: 17.36), controlPoint1: CGPoint(x: 19.23, y: 14.25), controlPoint2: CGPoint(x: 18.8, y: 15.91))
            icon.addCurve(to: CGPoint(x: 18.53, y: 18.75), controlPoint1: CGPoint(x: 18.37, y: 17.71), controlPoint2: CGPoint(x: 18.53, y: 18.17))
            icon.addCurve(to: CGPoint(x: 16.35, y: 21.17), controlPoint1: CGPoint(x: 18.53, y: 20.04), controlPoint2: CGPoint(x: 17.72, y: 20.89))
            icon.addLine(to: CGPoint(x: 16.35, y: 22.12))
            icon.addLine(to: CGPoint(x: 14.42, y: 22.12))
            icon.addLine(to: CGPoint(x: 14.42, y: 21.35))
            icon.addCurve(to: CGPoint(x: 10.17, y: 22.95), controlPoint1: CGPoint(x: 13.17, y: 22.18), controlPoint2: CGPoint(x: 11.72, y: 22.73))
            icon.addCurve(to: CGPoint(x: 15.38, y: 25), controlPoint1: CGPoint(x: 11.54, y: 24.22), controlPoint2: CGPoint(x: 13.37, y: 25))
            icon.addCurve(to: CGPoint(x: 23.08, y: 17.31), controlPoint1: CGPoint(x: 19.63, y: 25), controlPoint2: CGPoint(x: 23.08, y: 21.56))
            icon.addCurve(to: CGPoint(x: 19.04, y: 10.54), controlPoint1: CGPoint(x: 23.08, y: 14.38), controlPoint2: CGPoint(x: 21.44, y: 11.84))
            icon.close()
            context.saveGState()
            context.translateBy(x: 0.5, y: 0)
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarExchange(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 3, y: 2)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 7.85, y: 0))
            icon.addCurve(to: CGPoint(x: 0, y: 7.85), controlPoint1: CGPoint(x: 3.51, y: 0), controlPoint2: CGPoint(x: 0, y: 3.51))
            icon.addCurve(to: CGPoint(x: 6.49, y: 15.57), controlPoint1: CGPoint(x: 0, y: 11.72), controlPoint2: CGPoint(x: 2.8, y: 14.92))
            icon.addCurve(to: CGPoint(x: 7.53, y: 11.75), controlPoint1: CGPoint(x: 6.57, y: 14.2), controlPoint2: CGPoint(x: 6.94, y: 12.91))
            icon.addCurve(to: CGPoint(x: 4.67, y: 9.13), controlPoint1: CGPoint(x: 5.98, y: 11.41), controlPoint2: CGPoint(x: 5.02, y: 10.52))
            icon.addLine(to: CGPoint(x: 3.76, y: 9.13))
            icon.addLine(to: CGPoint(x: 3.76, y: 8.21))
            icon.addLine(to: CGPoint(x: 4.54, y: 8.21))
            icon.addCurve(to: CGPoint(x: 4.52, y: 7.85), controlPoint1: CGPoint(x: 4.53, y: 8.1), controlPoint2: CGPoint(x: 4.52, y: 7.98))
            icon.addCurve(to: CGPoint(x: 4.53, y: 7.54), controlPoint1: CGPoint(x: 4.52, y: 7.74), controlPoint2: CGPoint(x: 4.53, y: 7.64))
            icon.addLine(to: CGPoint(x: 3.76, y: 7.54))
            icon.addLine(to: CGPoint(x: 3.76, y: 6.63))
            icon.addLine(to: CGPoint(x: 4.66, y: 6.63))
            icon.addCurve(to: CGPoint(x: 8.99, y: 3.79), controlPoint1: CGPoint(x: 5.08, y: 4.81), controlPoint2: CGPoint(x: 6.54, y: 3.79))
            icon.addCurve(to: CGPoint(x: 10.05, y: 3.89), controlPoint1: CGPoint(x: 9.39, y: 3.79), controlPoint2: CGPoint(x: 9.8, y: 3.83))
            icon.addLine(to: CGPoint(x: 10.05, y: 5.48))
            icon.addCurve(to: CGPoint(x: 9.03, y: 5.41), controlPoint1: CGPoint(x: 9.77, y: 5.43), controlPoint2: CGPoint(x: 9.45, y: 5.41))
            icon.addCurve(to: CGPoint(x: 6.76, y: 6.63), controlPoint1: CGPoint(x: 7.93, y: 5.41), controlPoint2: CGPoint(x: 7.14, y: 5.84))
            icon.addLine(to: CGPoint(x: 9.63, y: 6.63))
            icon.addLine(to: CGPoint(x: 9.63, y: 7.54))
            icon.addLine(to: CGPoint(x: 6.52, y: 7.54))
            icon.addCurve(to: CGPoint(x: 6.5, y: 7.84), controlPoint1: CGPoint(x: 6.5, y: 7.64), controlPoint2: CGPoint(x: 6.5, y: 7.74))
            icon.addCurve(to: CGPoint(x: 6.52, y: 8.21), controlPoint1: CGPoint(x: 6.5, y: 7.97), controlPoint2: CGPoint(x: 6.5, y: 8.09))
            icon.addLine(to: CGPoint(x: 9.63, y: 8.21))
            icon.addLine(to: CGPoint(x: 9.63, y: 9))
            icon.addCurve(to: CGPoint(x: 15.57, y: 6.49), controlPoint1: CGPoint(x: 11.22, y: 7.55), controlPoint2: CGPoint(x: 13.28, y: 6.63))
            icon.addCurve(to: CGPoint(x: 7.85, y: 0), controlPoint1: CGPoint(x: 14.92, y: 2.81), controlPoint2: CGPoint(x: 11.72, y: 0))
            icon.close()
            icon.move(to: CGPoint(x: 20.31, y: 0))
            icon.addLine(to: CGPoint(x: 17.54, y: 2.77))
            icon.addLine(to: CGPoint(x: 20.31, y: 5.54))
            icon.addLine(to: CGPoint(x: 20.31, y: 3.69))
            icon.addLine(to: CGPoint(x: 23.08, y: 3.69))
            icon.addLine(to: CGPoint(x: 23.08, y: 1.85))
            icon.addLine(to: CGPoint(x: 20.31, y: 1.85))
            icon.addLine(to: CGPoint(x: 20.31, y: 0))
            icon.close()
            icon.move(to: CGPoint(x: 16.15, y: 8.31))
            icon.addCurve(to: CGPoint(x: 8.31, y: 16.15), controlPoint1: CGPoint(x: 11.82, y: 8.31), controlPoint2: CGPoint(x: 8.31, y: 11.82))
            icon.addCurve(to: CGPoint(x: 16.15, y: 24), controlPoint1: CGPoint(x: 8.31, y: 20.49), controlPoint2: CGPoint(x: 11.82, y: 24))
            icon.addCurve(to: CGPoint(x: 24, y: 16.15), controlPoint1: CGPoint(x: 20.49, y: 24), controlPoint2: CGPoint(x: 24, y: 20.49))
            icon.addCurve(to: CGPoint(x: 16.15, y: 8.31), controlPoint1: CGPoint(x: 24, y: 11.82), controlPoint2: CGPoint(x: 20.49, y: 8.31))
            icon.close()
            icon.move(to: CGPoint(x: 6.8, y: 9.13))
            icon.addCurve(to: CGPoint(x: 8.49, y: 10.23), controlPoint1: CGPoint(x: 7.12, y: 9.75), controlPoint2: CGPoint(x: 7.71, y: 10.12))
            icon.addCurve(to: CGPoint(x: 9.48, y: 9.13), controlPoint1: CGPoint(x: 8.79, y: 9.84), controlPoint2: CGPoint(x: 9.13, y: 9.47))
            icon.addLine(to: CGPoint(x: 6.8, y: 9.13))
            icon.close()
            icon.move(to: CGPoint(x: 15.69, y: 11.08))
            icon.addLine(to: CGPoint(x: 16.62, y: 11.08))
            icon.addLine(to: CGPoint(x: 16.62, y: 12.03))
            icon.addCurve(to: CGPoint(x: 19.3, y: 14.46), controlPoint1: CGPoint(x: 18.2, y: 12.19), controlPoint2: CGPoint(x: 19.27, y: 13.13))
            icon.addLine(to: CGPoint(x: 17.45, y: 14.46))
            icon.addCurve(to: CGPoint(x: 16.17, y: 13.51), controlPoint1: CGPoint(x: 17.41, y: 13.9), controlPoint2: CGPoint(x: 16.88, y: 13.51))
            icon.addCurve(to: CGPoint(x: 15, y: 14.37), controlPoint1: CGPoint(x: 15.47, y: 13.51), controlPoint2: CGPoint(x: 15, y: 13.85))
            icon.addCurve(to: CGPoint(x: 16.18, y: 15.22), controlPoint1: CGPoint(x: 15, y: 14.8), controlPoint2: CGPoint(x: 15.35, y: 15.05))
            icon.addLine(to: CGPoint(x: 17.2, y: 15.41))
            icon.addCurve(to: CGPoint(x: 19.45, y: 17.67), controlPoint1: CGPoint(x: 18.76, y: 15.71), controlPoint2: CGPoint(x: 19.45, y: 16.42))
            icon.addCurve(to: CGPoint(x: 16.62, y: 20.28), controlPoint1: CGPoint(x: 19.45, y: 19.18), controlPoint2: CGPoint(x: 18.39, y: 20.13))
            icon.addLine(to: CGPoint(x: 16.62, y: 21.23))
            icon.addLine(to: CGPoint(x: 15.69, y: 21.23))
            icon.addLine(to: CGPoint(x: 15.69, y: 20.28))
            icon.addCurve(to: CGPoint(x: 12.85, y: 17.85), controlPoint1: CGPoint(x: 13.96, y: 20.15), controlPoint2: CGPoint(x: 12.88, y: 19.25))
            icon.addLine(to: CGPoint(x: 14.76, y: 17.85))
            icon.addCurve(to: CGPoint(x: 16.22, y: 18.79), controlPoint1: CGPoint(x: 14.81, y: 18.42), controlPoint2: CGPoint(x: 15.39, y: 18.79))
            icon.addCurve(to: CGPoint(x: 17.48, y: 17.91), controlPoint1: CGPoint(x: 16.97, y: 18.79), controlPoint2: CGPoint(x: 17.48, y: 18.43))
            icon.addCurve(to: CGPoint(x: 16.23, y: 17.06), controlPoint1: CGPoint(x: 17.48, y: 17.47), controlPoint2: CGPoint(x: 17.13, y: 17.24))
            icon.addLine(to: CGPoint(x: 15.2, y: 16.85))
            icon.addCurve(to: CGPoint(x: 13.01, y: 14.55), controlPoint1: CGPoint(x: 13.75, y: 16.58), controlPoint2: CGPoint(x: 13.01, y: 15.79))
            icon.addCurve(to: CGPoint(x: 15.69, y: 12.03), controlPoint1: CGPoint(x: 13.01, y: 13.14), controlPoint2: CGPoint(x: 14.06, y: 12.18))
            icon.addLine(to: CGPoint(x: 15.69, y: 11.08))
            icon.close()
            icon.move(to: CGPoint(x: 3.69, y: 17.54))
            icon.addLine(to: CGPoint(x: 3.69, y: 19.38))
            icon.addLine(to: CGPoint(x: 0.92, y: 19.38))
            icon.addLine(to: CGPoint(x: 0.92, y: 21.23))
            icon.addLine(to: CGPoint(x: 3.69, y: 21.23))
            icon.addLine(to: CGPoint(x: 3.69, y: 23.08))
            icon.addLine(to: CGPoint(x: 6.46, y: 20.31))
            icon.addLine(to: CGPoint(x: 3.69, y: 17.54))
            icon.close()
            context.saveGState()
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarCollection(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 4, y: 3)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 0, y: 2))
            icon.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.89, y: 0))
            icon.addLine(to: CGPoint(x: 8, y: 0))
            icon.addCurve(to: CGPoint(x: 10, y: 2), controlPoint1: CGPoint(x: 9.1, y: 0), controlPoint2: CGPoint(x: 10, y: 0.89))
            icon.addLine(to: CGPoint(x: 10, y: 8))
            icon.addCurve(to: CGPoint(x: 8, y: 10), controlPoint1: CGPoint(x: 10, y: 9.1), controlPoint2: CGPoint(x: 9.11, y: 10))
            icon.addLine(to: CGPoint(x: 2, y: 10))
            icon.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 0.9, y: 10), controlPoint2: CGPoint(x: 0, y: 9.11))
            icon.addLine(to: CGPoint(x: 0, y: 2))
            icon.close()
            icon.move(to: CGPoint(x: 12, y: 2))
            icon.addCurve(to: CGPoint(x: 14, y: 0), controlPoint1: CGPoint(x: 12, y: 0.9), controlPoint2: CGPoint(x: 12.89, y: 0))
            icon.addLine(to: CGPoint(x: 20, y: 0))
            icon.addCurve(to: CGPoint(x: 22, y: 2), controlPoint1: CGPoint(x: 21.1, y: 0), controlPoint2: CGPoint(x: 22, y: 0.89))
            icon.addLine(to: CGPoint(x: 22, y: 8))
            icon.addCurve(to: CGPoint(x: 20, y: 10), controlPoint1: CGPoint(x: 22, y: 9.1), controlPoint2: CGPoint(x: 21.11, y: 10))
            icon.addLine(to: CGPoint(x: 14, y: 10))
            icon.addCurve(to: CGPoint(x: 12, y: 8), controlPoint1: CGPoint(x: 12.9, y: 10), controlPoint2: CGPoint(x: 12, y: 9.11))
            icon.addLine(to: CGPoint(x: 12, y: 2))
            icon.close()
            icon.move(to: CGPoint(x: 12, y: 14))
            icon.addCurve(to: CGPoint(x: 14, y: 12), controlPoint1: CGPoint(x: 12, y: 12.9), controlPoint2: CGPoint(x: 12.89, y: 12))
            icon.addLine(to: CGPoint(x: 20, y: 12))
            icon.addCurve(to: CGPoint(x: 22, y: 14), controlPoint1: CGPoint(x: 21.1, y: 12), controlPoint2: CGPoint(x: 22, y: 12.89))
            icon.addLine(to: CGPoint(x: 22, y: 20))
            icon.addCurve(to: CGPoint(x: 20, y: 22), controlPoint1: CGPoint(x: 22, y: 21.1), controlPoint2: CGPoint(x: 21.11, y: 22))
            icon.addLine(to: CGPoint(x: 14, y: 22))
            icon.addCurve(to: CGPoint(x: 12, y: 20), controlPoint1: CGPoint(x: 12.9, y: 22), controlPoint2: CGPoint(x: 12, y: 21.11))
            icon.addLine(to: CGPoint(x: 12, y: 14))
            icon.close()
            icon.move(to: CGPoint(x: 0, y: 14))
            icon.addCurve(to: CGPoint(x: 2, y: 12), controlPoint1: CGPoint(x: 0, y: 12.9), controlPoint2: CGPoint(x: 0.89, y: 12))
            icon.addLine(to: CGPoint(x: 8, y: 12))
            icon.addCurve(to: CGPoint(x: 10, y: 14), controlPoint1: CGPoint(x: 9.1, y: 12), controlPoint2: CGPoint(x: 10, y: 12.89))
            icon.addLine(to: CGPoint(x: 10, y: 20))
            icon.addCurve(to: CGPoint(x: 8, y: 22), controlPoint1: CGPoint(x: 10, y: 21.1), controlPoint2: CGPoint(x: 9.11, y: 22))
            icon.addLine(to: CGPoint(x: 2, y: 22))
            icon.addCurve(to: CGPoint(x: 0, y: 20), controlPoint1: CGPoint(x: 0.9, y: 22), controlPoint2: CGPoint(x: 0, y: 21.11))
            icon.addLine(to: CGPoint(x: 0, y: 14))
            icon.close()
            context.saveGState()
            icon.usesEvenOddFillRule = true
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarBook(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 1, y: 3)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 21.79, y: 0))
            icon.addCurve(to: CGPoint(x: 27.69, y: 2.31), controlPoint1: CGPoint(x: 24.17, y: 0), controlPoint2: CGPoint(x: 26.3, y: 0.9))
            icon.addCurve(to: CGPoint(x: 28, y: 3.09), controlPoint1: CGPoint(x: 28, y: 2.62), controlPoint2: CGPoint(x: 28, y: 3.09))
            icon.addLine(to: CGPoint(x: 28, y: 9.85))
            icon.addLine(to: CGPoint(x: 28, y: 20.18))
            icon.addCurve(to: CGPoint(x: 27.59, y: 20.39), controlPoint1: CGPoint(x: 28.03, y: 20.36), controlPoint2: CGPoint(x: 27.73, y: 20.53))
            icon.addCurve(to: CGPoint(x: 26.11, y: 19.32), controlPoint1: CGPoint(x: 27.16, y: 19.98), controlPoint2: CGPoint(x: 26.66, y: 19.62))
            icon.addCurve(to: CGPoint(x: 21.13, y: 17.94), controlPoint1: CGPoint(x: 24.69, y: 18.45), controlPoint2: CGPoint(x: 22.98, y: 17.94))
            icon.addCurve(to: CGPoint(x: 21.01, y: 17.95), controlPoint1: CGPoint(x: 21.09, y: 17.94), controlPoint2: CGPoint(x: 21.05, y: 17.95))
            icon.addCurve(to: CGPoint(x: 20.9, y: 17.94), controlPoint1: CGPoint(x: 20.98, y: 17.95), controlPoint2: CGPoint(x: 20.94, y: 17.94))
            icon.addCurve(to: CGPoint(x: 19.54, y: 18.08), controlPoint1: CGPoint(x: 20.44, y: 17.94), controlPoint2: CGPoint(x: 19.98, y: 17.99))
            icon.addCurve(to: CGPoint(x: 14.66, y: 22.43), controlPoint1: CGPoint(x: 17.14, y: 18.55), controlPoint2: CGPoint(x: 15.26, y: 20.25))
            icon.addCurve(to: CGPoint(x: 14.65, y: 22.46), controlPoint1: CGPoint(x: 14.66, y: 22.44), controlPoint2: CGPoint(x: 14.65, y: 22.46))
            icon.addCurve(to: CGPoint(x: 14.57, y: 22.46), controlPoint1: CGPoint(x: 14.65, y: 22.5), controlPoint2: CGPoint(x: 14.58, y: 22.52))
            icon.addLine(to: CGPoint(x: 14.57, y: 8.25))
            icon.addLine(to: CGPoint(x: 14.57, y: 4.8))
            icon.addCurve(to: CGPoint(x: 14.92, y: 3.52), controlPoint1: CGPoint(x: 14.57, y: 4.15), controlPoint2: CGPoint(x: 14.87, y: 3.61))
            icon.addCurve(to: CGPoint(x: 21.79, y: 0), controlPoint1: CGPoint(x: 16.15, y: 1.44), controlPoint2: CGPoint(x: 18.76, y: 0))
            icon.close()
            icon.move(to: CGPoint(x: 6.21, y: 0))
            icon.addCurve(to: CGPoint(x: 13.08, y: 3.52), controlPoint1: CGPoint(x: 9.24, y: 0), controlPoint2: CGPoint(x: 11.85, y: 1.44))
            icon.addCurve(to: CGPoint(x: 13.43, y: 4.8), controlPoint1: CGPoint(x: 13.13, y: 3.61), controlPoint2: CGPoint(x: 13.43, y: 4.15))
            icon.addLine(to: CGPoint(x: 13.43, y: 8.25))
            icon.addLine(to: CGPoint(x: 13.43, y: 22.46))
            icon.addCurve(to: CGPoint(x: 13.35, y: 22.46), controlPoint1: CGPoint(x: 13.42, y: 22.52), controlPoint2: CGPoint(x: 13.35, y: 22.5))
            icon.addCurve(to: CGPoint(x: 13.34, y: 22.43), controlPoint1: CGPoint(x: 13.35, y: 22.46), controlPoint2: CGPoint(x: 13.34, y: 22.44))
            icon.addCurve(to: CGPoint(x: 8.46, y: 18.08), controlPoint1: CGPoint(x: 12.74, y: 20.25), controlPoint2: CGPoint(x: 10.86, y: 18.55))
            icon.addCurve(to: CGPoint(x: 7.1, y: 17.94), controlPoint1: CGPoint(x: 8.02, y: 17.99), controlPoint2: CGPoint(x: 7.56, y: 17.94))
            icon.addCurve(to: CGPoint(x: 6.99, y: 17.95), controlPoint1: CGPoint(x: 7.06, y: 17.94), controlPoint2: CGPoint(x: 7.02, y: 17.95))
            icon.addCurve(to: CGPoint(x: 6.87, y: 17.94), controlPoint1: CGPoint(x: 6.95, y: 17.95), controlPoint2: CGPoint(x: 6.91, y: 17.94))
            icon.addCurve(to: CGPoint(x: 1.89, y: 19.32), controlPoint1: CGPoint(x: 5.02, y: 17.94), controlPoint2: CGPoint(x: 3.31, y: 18.45))
            icon.addCurve(to: CGPoint(x: 0.41, y: 20.39), controlPoint1: CGPoint(x: 1.34, y: 19.62), controlPoint2: CGPoint(x: 0.84, y: 19.98))
            icon.addCurve(to: CGPoint(x: 0, y: 20.18), controlPoint1: CGPoint(x: 0.27, y: 20.53), controlPoint2: CGPoint(x: -0.03, y: 20.36))
            icon.addLine(to: CGPoint(x: 0, y: 9.85))
            icon.addLine(to: CGPoint(x: 0, y: 3.09))
            icon.addCurve(to: CGPoint(x: 0.31, y: 2.31), controlPoint1: CGPoint(x: 0, y: 3.09), controlPoint2: CGPoint(x: 0, y: 2.62))
            icon.addCurve(to: CGPoint(x: 6.21, y: 0), controlPoint1: CGPoint(x: 1.7, y: 0.9), controlPoint2: CGPoint(x: 3.83, y: 0))
            icon.close()
            context.saveGState()
            icon.usesEvenOddFillRule = true
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarRecents(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 2, y: 1)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 13.38, y: 14.64))
            icon.addLine(to: CGPoint(x: 6.23, y: 14.64))
            icon.addCurve(to: CGPoint(x: 5.52, y: 13.93), controlPoint1: CGPoint(x: 5.84, y: 14.64), controlPoint2: CGPoint(x: 5.52, y: 14.32))
            icon.addCurve(to: CGPoint(x: 6.23, y: 13.22), controlPoint1: CGPoint(x: 5.52, y: 13.54), controlPoint2: CGPoint(x: 5.84, y: 13.22))
            icon.addLine(to: CGPoint(x: 11.96, y: 13.22))
            icon.addLine(to: CGPoint(x: 11.96, y: 4.49))
            icon.addCurve(to: CGPoint(x: 12.67, y: 3.78), controlPoint1: CGPoint(x: 11.96, y: 4.1), controlPoint2: CGPoint(x: 12.27, y: 3.78))
            icon.addCurve(to: CGPoint(x: 13.38, y: 4.49), controlPoint1: CGPoint(x: 13.06, y: 3.78), controlPoint2: CGPoint(x: 13.38, y: 4.1))
            icon.addLine(to: CGPoint(x: 13.38, y: 14.64))
            icon.close()
            icon.move(to: CGPoint(x: 12.5, y: 0))
            icon.addCurve(to: CGPoint(x: 0, y: 12.5), controlPoint1: CGPoint(x: 5.6, y: 0), controlPoint2: CGPoint(x: 0, y: 5.6))
            icon.addCurve(to: CGPoint(x: 12.5, y: 25), controlPoint1: CGPoint(x: 0, y: 19.4), controlPoint2: CGPoint(x: 5.6, y: 25))
            icon.addCurve(to: CGPoint(x: 25, y: 12.5), controlPoint1: CGPoint(x: 19.4, y: 25), controlPoint2: CGPoint(x: 25, y: 19.4))
            icon.addCurve(to: CGPoint(x: 12.5, y: 0), controlPoint1: CGPoint(x: 25, y: 5.6), controlPoint2: CGPoint(x: 19.4, y: 0))
            icon.close()
            context.saveGState()
            context.translateBy(x: 0.5, y: 0.5)
            icon.usesEvenOddFillRule = true
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarMap(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 4, y: 2)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 6.76, y: 5.87))
            icon.addCurve(to: CGPoint(x: 11.4, y: 0.15), controlPoint1: CGPoint(x: 7.79, y: 3.77), controlPoint2: CGPoint(x: 9.35, y: 1.84))
            icon.addLine(to: CGPoint(x: 11.42, y: 6.68))
            icon.addCurve(to: CGPoint(x: 6.76, y: 5.87), controlPoint1: CGPoint(x: 9.74, y: 6.62), controlPoint2: CGPoint(x: 8.17, y: 6.34))
            icon.close()
            icon.move(to: CGPoint(x: 5.2, y: 6.52))
            icon.addCurve(to: CGPoint(x: 4.15, y: 11.44), controlPoint1: CGPoint(x: 4.59, y: 8.08), controlPoint2: CGPoint(x: 4.24, y: 9.74))
            icon.addLine(to: CGPoint(x: 0, y: 11.44))
            icon.addCurve(to: CGPoint(x: 2.31, y: 4.81), controlPoint1: CGPoint(x: 0.11, y: 9.04), controlPoint2: CGPoint(x: 0.91, y: 6.75))
            icon.addCurve(to: CGPoint(x: 5.2, y: 6.52), controlPoint1: CGPoint(x: 3.18, y: 5.49), controlPoint2: CGPoint(x: 4.15, y: 6.06))
            icon.close()
            icon.move(to: CGPoint(x: 9.75, y: 0.01))
            icon.addCurve(to: CGPoint(x: 5.66, y: 5.44), controlPoint1: CGPoint(x: 7.99, y: 1.64), controlPoint2: CGPoint(x: 6.61, y: 3.46))
            icon.addCurve(to: CGPoint(x: 3.03, y: 3.89), controlPoint1: CGPoint(x: 4.71, y: 5.03), controlPoint2: CGPoint(x: 3.82, y: 4.5))
            icon.addCurve(to: CGPoint(x: 9.75, y: 0.01), controlPoint1: CGPoint(x: 4.8, y: 1.87), controlPoint2: CGPoint(x: 7.17, y: 0.51))
            icon.close()
            icon.move(to: CGPoint(x: 11.42, y: 23.99))
            icon.addCurve(to: CGPoint(x: 6.69, y: 18.44), controlPoint1: CGPoint(x: 9.32, y: 22.46), controlPoint2: CGPoint(x: 7.73, y: 20.59))
            icon.addCurve(to: CGPoint(x: 11.42, y: 17.58), controlPoint1: CGPoint(x: 8.14, y: 17.93), controlPoint2: CGPoint(x: 9.73, y: 17.65))
            icon.addLine(to: CGPoint(x: 11.42, y: 23.99))
            icon.close()
            icon.move(to: CGPoint(x: 12.56, y: 0.15))
            icon.addCurve(to: CGPoint(x: 17.26, y: 5.91), controlPoint1: CGPoint(x: 14.66, y: 1.88), controlPoint2: CGPoint(x: 16.24, y: 3.82))
            icon.addCurve(to: CGPoint(x: 12.58, y: 6.69), controlPoint1: CGPoint(x: 15.82, y: 6.39), controlPoint2: CGPoint(x: 14.24, y: 6.65))
            icon.addLine(to: CGPoint(x: 12.56, y: 0.15))
            icon.close()
            icon.move(to: CGPoint(x: 5.59, y: 18.88))
            icon.addCurve(to: CGPoint(x: 9.53, y: 24), controlPoint1: CGPoint(x: 6.51, y: 20.81), controlPoint2: CGPoint(x: 7.83, y: 22.53))
            icon.addCurve(to: CGPoint(x: 3.14, y: 20.29), controlPoint1: CGPoint(x: 7.09, y: 23.48), controlPoint2: CGPoint(x: 4.84, y: 22.18))
            icon.addCurve(to: CGPoint(x: 5.59, y: 18.88), controlPoint1: CGPoint(x: 3.91, y: 19.74), controlPoint2: CGPoint(x: 4.73, y: 19.26))
            icon.close()
            icon.move(to: CGPoint(x: 6.22, y: 17.35))
            icon.addCurve(to: CGPoint(x: 5.29, y: 12.62), controlPoint1: CGPoint(x: 5.65, y: 15.86), controlPoint2: CGPoint(x: 5.34, y: 14.26))
            icon.addLine(to: CGPoint(x: 11.42, y: 12.62))
            icon.addLine(to: CGPoint(x: 11.42, y: 16.41))
            icon.addCurve(to: CGPoint(x: 6.22, y: 17.35), controlPoint1: CGPoint(x: 9.57, y: 16.47), controlPoint2: CGPoint(x: 7.82, y: 16.79))
            icon.close()
            icon.move(to: CGPoint(x: 4.13, y: 12.62))
            icon.addCurve(to: CGPoint(x: 5.12, y: 17.79), controlPoint1: CGPoint(x: 4.18, y: 14.43), controlPoint2: CGPoint(x: 4.51, y: 16.17))
            icon.addCurve(to: CGPoint(x: 2.4, y: 19.38), controlPoint1: CGPoint(x: 4.16, y: 18.22), controlPoint2: CGPoint(x: 3.25, y: 18.76))
            icon.addCurve(to: CGPoint(x: 0, y: 12.62), controlPoint1: CGPoint(x: 0.94, y: 17.42), controlPoint2: CGPoint(x: 0.11, y: 15.08))
            icon.addLine(to: CGPoint(x: 4.13, y: 12.62))
            icon.close()
            icon.move(to: CGPoint(x: 5.31, y: 11.44))
            icon.addCurve(to: CGPoint(x: 6.28, y: 6.95), controlPoint1: CGPoint(x: 5.39, y: 9.89), controlPoint2: CGPoint(x: 5.72, y: 8.38))
            icon.addCurve(to: CGPoint(x: 11.42, y: 7.86), controlPoint1: CGPoint(x: 7.84, y: 7.48), controlPoint2: CGPoint(x: 9.56, y: 7.79))
            icon.addLine(to: CGPoint(x: 11.42, y: 11.44))
            icon.addLine(to: CGPoint(x: 5.31, y: 11.44))
            icon.close()
            icon.move(to: CGPoint(x: 18.35, y: 5.5))
            icon.addCurve(to: CGPoint(x: 14.21, y: 0), controlPoint1: CGPoint(x: 17.39, y: 3.5), controlPoint2: CGPoint(x: 16, y: 1.65))
            icon.addCurve(to: CGPoint(x: 21.04, y: 3.96), controlPoint1: CGPoint(x: 16.85, y: 0.5), controlPoint2: CGPoint(x: 19.26, y: 1.89))
            icon.addCurve(to: CGPoint(x: 18.35, y: 5.5), controlPoint1: CGPoint(x: 20.2, y: 4.58), controlPoint2: CGPoint(x: 19.3, y: 5.1))
            icon.close()
            icon.move(to: CGPoint(x: 14.48, y: 24))
            icon.addCurve(to: CGPoint(x: 18.45, y: 18.78), controlPoint1: CGPoint(x: 16.2, y: 22.51), controlPoint2: CGPoint(x: 17.54, y: 20.75))
            icon.addCurve(to: CGPoint(x: 20.93, y: 20.21), controlPoint1: CGPoint(x: 19.34, y: 19.17), controlPoint2: CGPoint(x: 20.18, y: 19.65))
            icon.addCurve(to: CGPoint(x: 14.48, y: 24), controlPoint1: CGPoint(x: 19.23, y: 22.14), controlPoint2: CGPoint(x: 16.96, y: 23.47))
            icon.close()
            icon.move(to: CGPoint(x: 18.91, y: 17.69))
            icon.addCurve(to: CGPoint(x: 19.87, y: 12.62), controlPoint1: CGPoint(x: 19.5, y: 16.09), controlPoint2: CGPoint(x: 19.82, y: 14.38))
            icon.addLine(to: CGPoint(x: 24, y: 12.62))
            icon.addCurve(to: CGPoint(x: 21.66, y: 19.3), controlPoint1: CGPoint(x: 23.89, y: 15.04), controlPoint2: CGPoint(x: 23.08, y: 17.35))
            icon.addCurve(to: CGPoint(x: 18.91, y: 17.69), controlPoint1: CGPoint(x: 20.82, y: 18.66), controlPoint2: CGPoint(x: 19.89, y: 18.12))
            icon.close()
            icon.move(to: CGPoint(x: 12.58, y: 7.86))
            icon.addCurve(to: CGPoint(x: 17.73, y: 6.99), controlPoint1: CGPoint(x: 14.41, y: 7.82), controlPoint2: CGPoint(x: 16.14, y: 7.53))
            icon.addCurve(to: CGPoint(x: 18.69, y: 11.44), controlPoint1: CGPoint(x: 18.29, y: 8.41), controlPoint2: CGPoint(x: 18.61, y: 9.91))
            icon.addLine(to: CGPoint(x: 12.58, y: 11.44))
            icon.addLine(to: CGPoint(x: 12.58, y: 7.86))
            icon.close()
            icon.move(to: CGPoint(x: 19.84, y: 11.44))
            icon.addCurve(to: CGPoint(x: 18.82, y: 6.58), controlPoint1: CGPoint(x: 19.76, y: 9.76), controlPoint2: CGPoint(x: 19.42, y: 8.13))
            icon.addCurve(to: CGPoint(x: 21.75, y: 4.89), controlPoint1: CGPoint(x: 19.84, y: 6.14), controlPoint2: CGPoint(x: 20.83, y: 5.57))
            icon.addCurve(to: CGPoint(x: 24, y: 11.44), controlPoint1: CGPoint(x: 23.11, y: 6.82), controlPoint2: CGPoint(x: 23.89, y: 9.07))
            icon.addLine(to: CGPoint(x: 19.84, y: 11.44))
            icon.close()
            icon.move(to: CGPoint(x: 12.58, y: 16.4))
            icon.addLine(to: CGPoint(x: 12.58, y: 12.62))
            icon.addLine(to: CGPoint(x: 18.71, y: 12.62))
            icon.addCurve(to: CGPoint(x: 17.8, y: 17.27), controlPoint1: CGPoint(x: 18.67, y: 14.23), controlPoint2: CGPoint(x: 18.36, y: 15.79))
            icon.addCurve(to: CGPoint(x: 12.58, y: 16.4), controlPoint1: CGPoint(x: 16.22, y: 16.73), controlPoint2: CGPoint(x: 14.47, y: 16.44))
            icon.close()
            icon.move(to: CGPoint(x: 12.58, y: 17.57))
            icon.addCurve(to: CGPoint(x: 17.34, y: 18.35), controlPoint1: CGPoint(x: 14.3, y: 17.62), controlPoint2: CGPoint(x: 15.9, y: 17.88))
            icon.addCurve(to: CGPoint(x: 12.58, y: 23.96), controlPoint1: CGPoint(x: 16.3, y: 20.52), controlPoint2: CGPoint(x: 14.7, y: 22.41))
            icon.addLine(to: CGPoint(x: 12.58, y: 17.57))
            icon.close()
            context.saveGState()
            icon.usesEvenOddFillRule = true
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarAlbums(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 4, y: 2)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 10.5, y: 12.61))
            icon.addCurve(to: CGPoint(x: 11.28, y: 11.77), controlPoint1: CGPoint(x: 10.55, y: 12.2), controlPoint2: CGPoint(x: 10.88, y: 11.83))
            icon.addLine(to: CGPoint(x: 14.5, y: 11.21))
            icon.addCurve(to: CGPoint(x: 15, y: 10.62), controlPoint1: CGPoint(x: 14.78, y: 11.16), controlPoint2: CGPoint(x: 15, y: 10.89))
            icon.addLine(to: CGPoint(x: 15, y: 8.41))
            icon.addCurve(to: CGPoint(x: 14.5, y: 8.02), controlPoint1: CGPoint(x: 15, y: 8.13), controlPoint2: CGPoint(x: 14.79, y: 7.95))
            icon.addLine(to: CGPoint(x: 10.98, y: 8.78))
            icon.addCurve(to: CGPoint(x: 10, y: 9.98), controlPoint1: CGPoint(x: 10.44, y: 8.89), controlPoint2: CGPoint(x: 10, y: 9.43))
            icon.addLine(to: CGPoint(x: 10, y: 15.4))
            icon.addCurve(to: CGPoint(x: 9.01, y: 16.55), controlPoint1: CGPoint(x: 10, y: 15.96), controlPoint2: CGPoint(x: 9.56, y: 16.47))
            icon.addLine(to: CGPoint(x: 7.29, y: 16.82))
            icon.addCurve(to: CGPoint(x: 6, y: 18.32), controlPoint1: CGPoint(x: 6.57, y: 16.93), controlPoint2: CGPoint(x: 6, y: 17.6))
            icon.addLine(to: CGPoint(x: 6, y: 18.51))
            icon.addCurve(to: CGPoint(x: 7.5, y: 20), controlPoint1: CGPoint(x: 6, y: 19.34), controlPoint2: CGPoint(x: 6.67, y: 20))
            icon.addLine(to: CGPoint(x: 8.25, y: 20))
            icon.addCurve(to: CGPoint(x: 10.5, y: 17.76), controlPoint1: CGPoint(x: 9.5, y: 20), controlPoint2: CGPoint(x: 10.5, y: 19))
            icon.addLine(to: CGPoint(x: 10.5, y: 12.61))
            icon.close()
            icon.move(to: CGPoint(x: 0, y: 4))
            icon.addLine(to: CGPoint(x: 20, y: 4))
            icon.addLine(to: CGPoint(x: 20, y: 24))
            icon.addLine(to: CGPoint(x: 0, y: 24))
            icon.addLine(to: CGPoint(x: 0, y: 4))
            icon.close()
            icon.move(to: CGPoint(x: 1, y: 2))
            icon.addLine(to: CGPoint(x: 19, y: 2))
            icon.addLine(to: CGPoint(x: 19, y: 3))
            icon.addLine(to: CGPoint(x: 1, y: 3))
            icon.addLine(to: CGPoint(x: 1, y: 2))
            icon.close()
            icon.move(to: CGPoint(x: 2, y: 0))
            icon.addLine(to: CGPoint(x: 18, y: 0))
            icon.addLine(to: CGPoint(x: 18, y: 1))
            icon.addLine(to: CGPoint(x: 2, y: 1))
            icon.addLine(to: CGPoint(x: 2, y: 0))
            icon.close()
            context.saveGState()
            icon.usesEvenOddFillRule = true
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarMusic(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 4, y: 2)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 17.04, y: 0.03))
            icon.addLine(to: CGPoint(x: 6.79, y: 1.93))
            icon.addCurve(to: CGPoint(x: 5.81, y: 3.11), controlPoint1: CGPoint(x: 6.25, y: 2.04), controlPoint2: CGPoint(x: 5.81, y: 2.57))
            icon.addLine(to: CGPoint(x: 5.79, y: 4.54))
            icon.addLine(to: CGPoint(x: 5.79, y: 16.62))
            icon.addCurve(to: CGPoint(x: 4.82, y: 17.79), controlPoint1: CGPoint(x: 5.79, y: 17.14), controlPoint2: CGPoint(x: 5.35, y: 17.67))
            icon.addLine(to: CGPoint(x: 2.25, y: 18.39))
            icon.addCurve(to: CGPoint(x: 0, y: 21.1), controlPoint1: CGPoint(x: 1.01, y: 18.66), controlPoint2: CGPoint(x: 0, y: 19.88))
            icon.addLine(to: CGPoint(x: 0, y: 21.32))
            icon.addCurve(to: CGPoint(x: 2.5, y: 23.72), controlPoint1: CGPoint(x: 0, y: 22.65), controlPoint2: CGPoint(x: 1.12, y: 23.72))
            icon.addLine(to: CGPoint(x: 3.46, y: 23.72))
            icon.addCurve(to: CGPoint(x: 7.1, y: 20.14), controlPoint1: CGPoint(x: 5.37, y: 23.72), controlPoint2: CGPoint(x: 7.1, y: 21.98))
            icon.addLine(to: CGPoint(x: 7.1, y: 11.8))
            icon.addLine(to: CGPoint(x: 7.12, y: 10.95))
            icon.addLine(to: CGPoint(x: 7.12, y: 8.02))
            icon.addCurve(to: CGPoint(x: 7.89, y: 7.1), controlPoint1: CGPoint(x: 7.12, y: 7.6), controlPoint2: CGPoint(x: 7.47, y: 7.19))
            icon.addLine(to: CGPoint(x: 16.68, y: 5.82))
            icon.addCurve(to: CGPoint(x: 17.37, y: 6.36), controlPoint1: CGPoint(x: 17.04, y: 5.75), controlPoint2: CGPoint(x: 17.37, y: 6.01))
            icon.addCurve(to: CGPoint(x: 17.37, y: 10.03), controlPoint1: CGPoint(x: 17.37, y: 6.36), controlPoint2: CGPoint(x: 17.37, y: 8.81))
            icon.addCurve(to: CGPoint(x: 17.37, y: 13.7), controlPoint1: CGPoint(x: 17.37, y: 11.25), controlPoint2: CGPoint(x: 17.37, y: 13.7))
            icon.addCurve(to: CGPoint(x: 16.4, y: 14.86), controlPoint1: CGPoint(x: 17.37, y: 14.22), controlPoint2: CGPoint(x: 16.94, y: 14.75))
            icon.addLine(to: CGPoint(x: 13.74, y: 15.51))
            icon.addCurve(to: CGPoint(x: 11.5, y: 18.2), controlPoint1: CGPoint(x: 12.51, y: 15.78), controlPoint2: CGPoint(x: 11.5, y: 16.99))
            icon.addLine(to: CGPoint(x: 11.5, y: 18.43))
            icon.addCurve(to: CGPoint(x: 14.01, y: 20.84), controlPoint1: CGPoint(x: 11.5, y: 19.76), controlPoint2: CGPoint(x: 12.62, y: 20.84))
            icon.addLine(to: CGPoint(x: 15, y: 20.84))
            icon.addCurve(to: CGPoint(x: 18.5, y: 17.48), controlPoint1: CGPoint(x: 16.94, y: 20.84), controlPoint2: CGPoint(x: 18.5, y: 19.33))
            icon.addLine(to: CGPoint(x: 18.5, y: 1.93))
            icon.addLine(to: CGPoint(x: 18.5, y: 1.65))
            icon.addLine(to: CGPoint(x: 18.5, y: 1.16))
            icon.addCurve(to: CGPoint(x: 17.35, y: 0), controlPoint1: CGPoint(x: 18.5, y: 0.47), controlPoint2: CGPoint(x: 18, y: 0))
            icon.addCurve(to: CGPoint(x: 17.04, y: 0.03), controlPoint1: CGPoint(x: 17.25, y: 0), controlPoint2: CGPoint(x: 17.04, y: 0.03))
            icon.close()
            context.saveGState()
            context.translateBy(x: 0.5, y: 0)
            icon.usesEvenOddFillRule = true
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarNavigation(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 4, y: 4)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 10.79, y: 19.21))
            icon.addLine(to: CGPoint(x: 10.79, y: 9.47))
            icon.addCurve(to: CGPoint(x: 10.5, y: 9.18), controlPoint1: CGPoint(x: 10.79, y: 9.31), controlPoint2: CGPoint(x: 10.66, y: 9.18))
            icon.addLine(to: CGPoint(x: 0.29, y: 9.18))
            icon.addCurve(to: CGPoint(x: 0.17, y: 8.63), controlPoint1: CGPoint(x: -0.02, y: 9.18), controlPoint2: CGPoint(x: -0.11, y: 8.75))
            icon.addLine(to: CGPoint(x: 19.59, y: 0.03))
            icon.addCurve(to: CGPoint(x: 19.97, y: 0.41), controlPoint1: CGPoint(x: 19.84, y: -0.08), controlPoint2: CGPoint(x: 20.08, y: 0.17))
            icon.addLine(to: CGPoint(x: 11.34, y: 19.33))
            icon.addCurve(to: CGPoint(x: 10.79, y: 19.21), controlPoint1: CGPoint(x: 11.22, y: 19.61), controlPoint2: CGPoint(x: 10.79, y: 19.52))
            context.saveGState()
            context.translateBy(x: 0.5, y: 0.5)
            icon.usesEvenOddFillRule = true
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarMore(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 3, y: 11)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 3.5, y: 7))
            icon.addCurve(to: CGPoint(x: 0, y: 3.5), controlPoint1: CGPoint(x: 1.57, y: 7), controlPoint2: CGPoint(x: 0, y: 5.43))
            icon.addCurve(to: CGPoint(x: 3.5, y: 0), controlPoint1: CGPoint(x: 0, y: 1.57), controlPoint2: CGPoint(x: 1.57, y: 0))
            icon.addCurve(to: CGPoint(x: 7, y: 3.5), controlPoint1: CGPoint(x: 5.43, y: 0), controlPoint2: CGPoint(x: 7, y: 1.57))
            icon.addCurve(to: CGPoint(x: 3.5, y: 7), controlPoint1: CGPoint(x: 7, y: 5.43), controlPoint2: CGPoint(x: 5.43, y: 7))
            icon.close()
            icon.move(to: CGPoint(x: 12.5, y: 7))
            icon.addCurve(to: CGPoint(x: 9, y: 3.5), controlPoint1: CGPoint(x: 10.57, y: 7), controlPoint2: CGPoint(x: 9, y: 5.43))
            icon.addCurve(to: CGPoint(x: 12.5, y: 0), controlPoint1: CGPoint(x: 9, y: 1.57), controlPoint2: CGPoint(x: 10.57, y: 0))
            icon.addCurve(to: CGPoint(x: 16, y: 3.5), controlPoint1: CGPoint(x: 14.43, y: 0), controlPoint2: CGPoint(x: 16, y: 1.57))
            icon.addCurve(to: CGPoint(x: 12.5, y: 7), controlPoint1: CGPoint(x: 16, y: 5.43), controlPoint2: CGPoint(x: 14.43, y: 7))
            icon.close()
            icon.move(to: CGPoint(x: 21.5, y: 7))
            icon.addCurve(to: CGPoint(x: 18, y: 3.5), controlPoint1: CGPoint(x: 19.57, y: 7), controlPoint2: CGPoint(x: 18, y: 5.43))
            icon.addCurve(to: CGPoint(x: 21.5, y: 0), controlPoint1: CGPoint(x: 18, y: 1.57), controlPoint2: CGPoint(x: 19.57, y: 0))
            icon.addCurve(to: CGPoint(x: 25, y: 3.5), controlPoint1: CGPoint(x: 23.43, y: 0), controlPoint2: CGPoint(x: 25, y: 1.57))
            icon.addCurve(to: CGPoint(x: 21.5, y: 7), controlPoint1: CGPoint(x: 25, y: 5.43), controlPoint2: CGPoint(x: 23.43, y: 7))
            icon.close()
            context.saveGState()
            icon.usesEvenOddFillRule = true
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarMail(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 2, y: 6)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 25.93, y: 0.65))
            icon.addLine(to: CGPoint(x: 26, y: 0.65))
            icon.addLine(to: CGPoint(x: 26, y: 15.67))
            icon.addLine(to: CGPoint(x: 25.99, y: 15.67))
            icon.addLine(to: CGPoint(x: 18.45, y: 8.26))
            icon.addCurve(to: CGPoint(x: 25.93, y: 0.65), controlPoint1: CGPoint(x: 24.04, y: 2.61), controlPoint2: CGPoint(x: 25.52, y: 1.08))
            icon.close()
            icon.move(to: CGPoint(x: 7.3, y: 0))
            icon.addCurve(to: CGPoint(x: 25.25, y: 0.01), controlPoint1: CGPoint(x: 14, y: 0), controlPoint2: CGPoint(x: 23.47, y: 0.01))
            icon.addLine(to: CGPoint(x: 15.63, y: 9.7))
            icon.addCurve(to: CGPoint(x: 13, y: 10.8), controlPoint1: CGPoint(x: 14.93, y: 10.41), controlPoint2: CGPoint(x: 13.99, y: 10.8))
            icon.addCurve(to: CGPoint(x: 10.37, y: 9.7), controlPoint1: CGPoint(x: 12.01, y: 10.8), controlPoint2: CGPoint(x: 11.07, y: 10.41))
            icon.addLine(to: CGPoint(x: 0.74, y: 0.01))
            icon.addCurve(to: CGPoint(x: 7.3, y: 0), controlPoint1: CGPoint(x: 1.31, y: 0), controlPoint2: CGPoint(x: 2.95, y: 0))
            icon.close()
            icon.move(to: CGPoint(x: 7.55, y: 8.32))
            icon.addLine(to: CGPoint(x: 0.01, y: 15.73))
            icon.addLine(to: CGPoint(x: 0, y: 15.73))
            icon.addLine(to: CGPoint(x: 0, y: 0.72))
            icon.addLine(to: CGPoint(x: 0.08, y: 0.72))
            icon.addCurve(to: CGPoint(x: 7.55, y: 8.32), controlPoint1: CGPoint(x: 0.48, y: 1.14), controlPoint2: CGPoint(x: 1.96, y: 2.67))
            icon.close()
            icon.move(to: CGPoint(x: 25.35, y: 16.49))
            icon.addLine(to: CGPoint(x: 25.35, y: 16.5))
            icon.addLine(to: CGPoint(x: 25.35, y: 16.5))
            icon.addLine(to: CGPoint(x: 0.65, y: 16.5))
            icon.addLine(to: CGPoint(x: 0.65, y: 16.5))
            icon.addLine(to: CGPoint(x: 0.65, y: 16.49))
            icon.addLine(to: CGPoint(x: 8.18, y: 9.08))
            icon.addLine(to: CGPoint(x: 9.73, y: 10.64))
            icon.addCurve(to: CGPoint(x: 13, y: 12.01), controlPoint1: CGPoint(x: 10.6, y: 11.52), controlPoint2: CGPoint(x: 11.76, y: 12.01))
            icon.addLine(to: CGPoint(x: 13, y: 12.01))
            icon.addCurve(to: CGPoint(x: 16.27, y: 10.64), controlPoint1: CGPoint(x: 14.24, y: 12.01), controlPoint2: CGPoint(x: 15.4, y: 11.52))
            icon.addLine(to: CGPoint(x: 17.82, y: 9.08))
            icon.addLine(to: CGPoint(x: 25.35, y: 16.49))
            icon.close()
            context.saveGState()
            icon.usesEvenOddFillRule = true
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBarAddNumber(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 28)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 4, y: 4)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 17.54, y: 2.97))
            icon.addLine(to: CGPoint(x: 19.76, y: 2.97))
            icon.addCurve(to: CGPoint(x: 20.51, y: 3.72), controlPoint1: CGPoint(x: 20.18, y: 2.97), controlPoint2: CGPoint(x: 20.51, y: 3.31))
            icon.addLine(to: CGPoint(x: 20.51, y: 3.84))
            icon.addCurve(to: CGPoint(x: 19.76, y: 4.59), controlPoint1: CGPoint(x: 20.51, y: 4.26), controlPoint2: CGPoint(x: 20.18, y: 4.59))
            icon.addLine(to: CGPoint(x: 17.54, y: 4.59))
            icon.addLine(to: CGPoint(x: 17.54, y: 6.82))
            icon.addCurve(to: CGPoint(x: 16.79, y: 7.57), controlPoint1: CGPoint(x: 17.54, y: 7.23), controlPoint2: CGPoint(x: 17.2, y: 7.57))
            icon.addLine(to: CGPoint(x: 16.67, y: 7.57))
            icon.addCurve(to: CGPoint(x: 15.92, y: 6.82), controlPoint1: CGPoint(x: 16.26, y: 7.57), controlPoint2: CGPoint(x: 15.92, y: 7.23))
            icon.addLine(to: CGPoint(x: 15.92, y: 4.59))
            icon.addLine(to: CGPoint(x: 13.7, y: 4.59))
            icon.addCurve(to: CGPoint(x: 12.95, y: 3.84), controlPoint1: CGPoint(x: 13.28, y: 4.59), controlPoint2: CGPoint(x: 12.95, y: 4.26))
            icon.addLine(to: CGPoint(x: 12.95, y: 3.72))
            icon.addCurve(to: CGPoint(x: 13.7, y: 2.97), controlPoint1: CGPoint(x: 12.95, y: 3.31), controlPoint2: CGPoint(x: 13.28, y: 2.97))
            icon.addLine(to: CGPoint(x: 15.92, y: 2.97))
            icon.addLine(to: CGPoint(x: 15.92, y: 0.75))
            icon.addCurve(to: CGPoint(x: 16.67, y: 0), controlPoint1: CGPoint(x: 15.92, y: 0.34), controlPoint2: CGPoint(x: 16.26, y: 0))
            icon.addLine(to: CGPoint(x: 16.79, y: 0))
            icon.addCurve(to: CGPoint(x: 17.54, y: 0.75), controlPoint1: CGPoint(x: 17.2, y: 0), controlPoint2: CGPoint(x: 17.54, y: 0.34))
            icon.addLine(to: CGPoint(x: 17.54, y: 2.97))
            icon.close()
            icon.move(to: CGPoint(x: 1.6, y: 8.08))
            icon.addCurve(to: CGPoint(x: 0, y: 3.13), controlPoint1: CGPoint(x: 0.44, y: 5.97), controlPoint2: CGPoint(x: 0, y: 4.27))
            icon.addCurve(to: CGPoint(x: 0.57, y: 1.39), controlPoint1: CGPoint(x: 0, y: 1.98), controlPoint2: CGPoint(x: 0.28, y: 1.65))
            icon.addCurve(to: CGPoint(x: 2.35, y: 0.18), controlPoint1: CGPoint(x: 0.85, y: 1.12), controlPoint2: CGPoint(x: 2.14, y: 0.33))
            icon.addCurve(to: CGPoint(x: 3.93, y: 0.5), controlPoint1: CGPoint(x: 2.57, y: 0.03), controlPoint2: CGPoint(x: 3.41, y: -0.26))
            icon.addCurve(to: CGPoint(x: 6.12, y: 3.78), controlPoint1: CGPoint(x: 4.46, y: 1.26), controlPoint2: CGPoint(x: 5.44, y: 2.77))
            icon.addCurve(to: CGPoint(x: 6.07, y: 6.21), controlPoint1: CGPoint(x: 7.19, y: 5.21), controlPoint2: CGPoint(x: 6.34, y: 5.84))
            icon.addCurve(to: CGPoint(x: 5.27, y: 7.92), controlPoint1: CGPoint(x: 5.56, y: 6.9), controlPoint2: CGPoint(x: 5.27, y: 7.08))
            icon.addCurve(to: CGPoint(x: 8.2, y: 11.78), controlPoint1: CGPoint(x: 5.27, y: 8.77), controlPoint2: CGPoint(x: 7.63, y: 11.19))
            icon.addCurve(to: CGPoint(x: 11.85, y: 14.55), controlPoint1: CGPoint(x: 8.76, y: 12.37), controlPoint2: CGPoint(x: 11.12, y: 14.44))
            icon.addCurve(to: CGPoint(x: 13.78, y: 13.69), controlPoint1: CGPoint(x: 12.58, y: 14.67), controlPoint2: CGPoint(x: 13.57, y: 13.88))
            icon.addCurve(to: CGPoint(x: 15.94, y: 13.76), controlPoint1: CGPoint(x: 14.84, y: 12.87), controlPoint2: CGPoint(x: 15.44, y: 13.49))
            icon.addCurve(to: CGPoint(x: 19.33, y: 15.88), controlPoint1: CGPoint(x: 16.43, y: 14.03), controlPoint2: CGPoint(x: 18.64, y: 15.41))
            icon.addCurve(to: CGPoint(x: 19.94, y: 17.07), controlPoint1: CGPoint(x: 19.98, y: 16.35), controlPoint2: CGPoint(x: 19.94, y: 17.07))
            icon.addCurve(to: CGPoint(x: 18.44, y: 19.45), controlPoint1: CGPoint(x: 19.94, y: 17.07), controlPoint2: CGPoint(x: 18.6, y: 19.19))
            icon.addCurve(to: CGPoint(x: 16.66, y: 20), controlPoint1: CGPoint(x: 18.24, y: 19.75), controlPoint2: CGPoint(x: 17.75, y: 20))
            icon.addCurve(to: CGPoint(x: 11.64, y: 18.27), controlPoint1: CGPoint(x: 15.57, y: 20), controlPoint2: CGPoint(x: 14.41, y: 19.8))
            icon.addCurve(to: CGPoint(x: 6.08, y: 13.92), controlPoint1: CGPoint(x: 9.37, y: 17.02), controlPoint2: CGPoint(x: 7.21, y: 15.06))
            icon.addCurve(to: CGPoint(x: 1.6, y: 8.08), controlPoint1: CGPoint(x: 4.91, y: 12.77), controlPoint2: CGPoint(x: 2.92, y: 10.48))
            icon.close()
            context.saveGState()
            context.translateBy(x: 0.5, y: 0)
            icon.usesEvenOddFillRule = true
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_GlyphsNavToolbarSample(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)
        
        /// Oval
        let oval = UIBezierPath()
        oval.move(to: CGPoint(x: 11, y: 21))
        oval.addCurve(to: CGPoint(x: 21, y: 11), controlPoint1: CGPoint(x: 16.52, y: 21), controlPoint2: CGPoint(x: 21, y: 16.52))
        oval.addCurve(to: CGPoint(x: 11, y: 1), controlPoint1: CGPoint(x: 21, y: 5.48), controlPoint2: CGPoint(x: 16.52, y: 1))
        oval.addCurve(to: CGPoint(x: 1, y: 11), controlPoint1: CGPoint(x: 5.48, y: 1), controlPoint2: CGPoint(x: 1, y: 5.48))
        oval.addCurve(to: CGPoint(x: 11, y: 21), controlPoint1: CGPoint(x: 1, y: 16.52), controlPoint2: CGPoint(x: 5.48, y: 21))
        oval.close()
        oval.move(to: CGPoint(x: 11, y: 22))
        oval.addCurve(to: CGPoint(x: 0, y: 11), controlPoint1: CGPoint(x: 4.92, y: 22), controlPoint2: CGPoint(x: 0, y: 17.08))
        oval.addCurve(to: CGPoint(x: 11, y: 0), controlPoint1: CGPoint(x: 0, y: 4.92), controlPoint2: CGPoint(x: 4.92, y: 0))
        oval.addCurve(to: CGPoint(x: 22, y: 11), controlPoint1: CGPoint(x: 17.08, y: 0), controlPoint2: CGPoint(x: 22, y: 4.92))
        oval.addCurve(to: CGPoint(x: 11, y: 22), controlPoint1: CGPoint(x: 22, y: 17.08), controlPoint2: CGPoint(x: 17.08, y: 22))
        oval.close()
        context.saveGState()
        context.translateBy(x: 4, y: 4)
        context.restoreGState()
        
        /// Oval (Outline Mask)
        context.saveGState()
        oval.apply(CGAffineTransform(translationX: 4, y: 4))
        oval.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Oval (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsNavToolbarAdd(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 8, y: 8))
        icon.addLine(to: CGPoint(x: 8, y: 1))
        icon.addCurve(to: CGPoint(x: 9, y: 0), controlPoint1: CGPoint(x: 8, y: 0.45), controlPoint2: CGPoint(x: 8.45, y: 0))
        icon.addCurve(to: CGPoint(x: 10, y: 1), controlPoint1: CGPoint(x: 9.55, y: 0), controlPoint2: CGPoint(x: 10, y: 0.45))
        icon.addLine(to: CGPoint(x: 10, y: 8))
        icon.addLine(to: CGPoint(x: 17, y: 8))
        icon.addCurve(to: CGPoint(x: 18, y: 9), controlPoint1: CGPoint(x: 17.55, y: 8), controlPoint2: CGPoint(x: 18, y: 8.45))
        icon.addCurve(to: CGPoint(x: 17, y: 10), controlPoint1: CGPoint(x: 18, y: 9.55), controlPoint2: CGPoint(x: 17.55, y: 10))
        icon.addLine(to: CGPoint(x: 10, y: 10))
        icon.addLine(to: CGPoint(x: 10, y: 17))
        icon.addCurve(to: CGPoint(x: 9, y: 18), controlPoint1: CGPoint(x: 10, y: 17.55), controlPoint2: CGPoint(x: 9.55, y: 18))
        icon.addCurve(to: CGPoint(x: 8, y: 17), controlPoint1: CGPoint(x: 8.45, y: 18), controlPoint2: CGPoint(x: 8, y: 17.55))
        icon.addLine(to: CGPoint(x: 8, y: 10))
        icon.addLine(to: CGPoint(x: 1, y: 10))
        icon.addCurve(to: CGPoint(x: 0, y: 9), controlPoint1: CGPoint(x: 0.45, y: 10), controlPoint2: CGPoint(x: 0, y: 9.55))
        icon.addCurve(to: CGPoint(x: 1, y: 8), controlPoint1: CGPoint(x: 0, y: 8.45), controlPoint2: CGPoint(x: 0.45, y: 8))
        icon.addLine(to: CGPoint(x: 8, y: 8))
        icon.close()
        context.saveGState()
        context.translateBy(x: 6, y: 6)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 6, y: 6))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsNavToolbarClose(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 5.24, y: 6.66))
        icon.addLine(to: CGPoint(x: 0.29, y: 1.71))
        icon.addCurve(to: CGPoint(x: 0.29, y: 0.29), controlPoint1: CGPoint(x: -0.1, y: 1.32), controlPoint2: CGPoint(x: -0.1, y: 0.68))
        icon.addCurve(to: CGPoint(x: 1.71, y: 0.29), controlPoint1: CGPoint(x: 0.68, y: -0.1), controlPoint2: CGPoint(x: 1.32, y: -0.1))
        icon.addLine(to: CGPoint(x: 6.66, y: 5.24))
        icon.addLine(to: CGPoint(x: 11.61, y: 0.29))
        icon.addCurve(to: CGPoint(x: 13.02, y: 0.29), controlPoint1: CGPoint(x: 12, y: -0.1), controlPoint2: CGPoint(x: 12.63, y: -0.1))
        icon.addCurve(to: CGPoint(x: 13.02, y: 1.71), controlPoint1: CGPoint(x: 13.41, y: 0.68), controlPoint2: CGPoint(x: 13.41, y: 1.32))
        icon.addLine(to: CGPoint(x: 8.07, y: 6.66))
        icon.addLine(to: CGPoint(x: 13.02, y: 11.61))
        icon.addCurve(to: CGPoint(x: 13.02, y: 13.02), controlPoint1: CGPoint(x: 13.41, y: 12), controlPoint2: CGPoint(x: 13.41, y: 12.63))
        icon.addCurve(to: CGPoint(x: 11.61, y: 13.02), controlPoint1: CGPoint(x: 12.63, y: 13.41), controlPoint2: CGPoint(x: 12, y: 13.41))
        icon.addLine(to: CGPoint(x: 6.66, y: 8.07))
        icon.addLine(to: CGPoint(x: 1.71, y: 13.02))
        icon.addCurve(to: CGPoint(x: 0.29, y: 13.02), controlPoint1: CGPoint(x: 1.32, y: 13.41), controlPoint2: CGPoint(x: 0.68, y: 13.41))
        icon.addCurve(to: CGPoint(x: 0.29, y: 11.61), controlPoint1: CGPoint(x: -0.1, y: 12.63), controlPoint2: CGPoint(x: -0.1, y: 12))
        icon.addLine(to: CGPoint(x: 5.24, y: 6.66))
        icon.close()
        context.saveGState()
        context.translateBy(x: 8.34, y: 8.34)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 8.34, y: 8.34))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsNavToolbarRemove(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 1, y: 0))
        icon.addLine(to: CGPoint(x: 17, y: 0))
        icon.addCurve(to: CGPoint(x: 18, y: 1), controlPoint1: CGPoint(x: 17.55, y: 0), controlPoint2: CGPoint(x: 18, y: 0.45))
        icon.addLine(to: CGPoint(x: 18, y: 1))
        icon.addCurve(to: CGPoint(x: 17, y: 2), controlPoint1: CGPoint(x: 18, y: 1.55), controlPoint2: CGPoint(x: 17.55, y: 2))
        icon.addLine(to: CGPoint(x: 1, y: 2))
        icon.addCurve(to: CGPoint(x: 0, y: 1), controlPoint1: CGPoint(x: 0.45, y: 2), controlPoint2: CGPoint(x: 0, y: 1.55))
        icon.addLine(to: CGPoint(x: 0, y: 1))
        icon.addCurve(to: CGPoint(x: 1, y: 0), controlPoint1: CGPoint(x: 0, y: 0.45), controlPoint2: CGPoint(x: 0.45, y: 0))
        icon.close()
        context.saveGState()
        context.translateBy(x: 6, y: 14)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 6, y: 14))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsNavToolbarArrowUp(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)
        
        /// Arrow
        let arrow = UIBezierPath()
        arrow.move(to: CGPoint(x: 2.23, y: 8.85))
        arrow.addLine(to: CGPoint(x: 9.44, y: 16.28))
        arrow.addCurve(to: CGPoint(x: 9.44, y: 17.43), controlPoint1: CGPoint(x: 9.75, y: 16.6), controlPoint2: CGPoint(x: 9.75, y: 17.11))
        arrow.addCurve(to: CGPoint(x: 8.35, y: 17.44), controlPoint1: CGPoint(x: 9.15, y: 17.73), controlPoint2: CGPoint(x: 8.66, y: 17.74))
        arrow.addCurve(to: CGPoint(x: 8.33, y: 17.43), controlPoint1: CGPoint(x: 8.34, y: 17.44), controlPoint2: CGPoint(x: 8.34, y: 17.43))
        arrow.addLine(to: CGPoint(x: 1.12, y: 9.99))
        arrow.addLine(to: CGPoint(x: 1.11, y: 10))
        arrow.addLine(to: CGPoint(x: 0, y: 8.85))
        arrow.addLine(to: CGPoint(x: 0, y: 8.85))
        arrow.addLine(to: CGPoint(x: 0, y: 8.84))
        arrow.addLine(to: CGPoint(x: 1.11, y: 7.7))
        arrow.addLine(to: CGPoint(x: 1.11, y: 7.7))
        arrow.addLine(to: CGPoint(x: 8.36, y: 0.24))
        arrow.addCurve(to: CGPoint(x: 9.46, y: 0.22), controlPoint1: CGPoint(x: 8.66, y: -0.07), controlPoint2: CGPoint(x: 9.15, y: -0.08))
        arrow.addCurve(to: CGPoint(x: 9.48, y: 0.24), controlPoint1: CGPoint(x: 9.46, y: 0.22), controlPoint2: CGPoint(x: 9.47, y: 0.23))
        arrow.addCurve(to: CGPoint(x: 9.48, y: 1.38), controlPoint1: CGPoint(x: 9.79, y: 0.56), controlPoint2: CGPoint(x: 9.79, y: 1.06))
        arrow.addLine(to: CGPoint(x: 2.23, y: 8.85))
        arrow.close()
        context.saveGState()
        context.translateBy(x: 15, y: 15)
        context.scaleBy(x: -1, y: 1)
        context.rotate(by: 450 * CGFloat.pi/180)
        context.translateBy(x: -5, y: -9)
        context.restoreGState()
        
        /// Arrow (Outline Mask)
        context.saveGState()
        arrow.apply(CGAffineTransform(translationX: 15, y: 15))
        arrow.apply(CGAffineTransform(scaleX: -1, y: 1))
        arrow.apply(CGAffineTransform(rotationAngle: 450 * CGFloat.pi/180))
        arrow.apply(CGAffineTransform(translationX: -5, y: -9))
        arrow.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Arrow (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsNavToolbarArrowDown(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)
        
        /// Arrow
        let arrow = UIBezierPath()
        arrow.move(to: CGPoint(x: 2.22, y: 8.69))
        arrow.addLine(to: CGPoint(x: 9.41, y: 15.98))
        arrow.addCurve(to: CGPoint(x: 9.41, y: 17.11), controlPoint1: CGPoint(x: 9.72, y: 16.3), controlPoint2: CGPoint(x: 9.72, y: 16.8))
        arrow.addCurve(to: CGPoint(x: 8.31, y: 17.12), controlPoint1: CGPoint(x: 9.11, y: 17.41), controlPoint2: CGPoint(x: 8.62, y: 17.42))
        arrow.addCurve(to: CGPoint(x: 8.31, y: 17.11), controlPoint1: CGPoint(x: 8.31, y: 17.11), controlPoint2: CGPoint(x: 8.31, y: 17.11))
        arrow.addLine(to: CGPoint(x: 1.11, y: 9.81))
        arrow.addLine(to: CGPoint(x: 1.11, y: 9.81))
        arrow.addLine(to: CGPoint(x: 0, y: 8.69))
        arrow.addLine(to: CGPoint(x: 0, y: 8.68))
        arrow.addLine(to: CGPoint(x: 0, y: 8.68))
        arrow.addLine(to: CGPoint(x: 1.11, y: 7.56))
        arrow.addLine(to: CGPoint(x: 1.11, y: 7.56))
        arrow.addLine(to: CGPoint(x: 8.33, y: 0.23))
        arrow.addCurve(to: CGPoint(x: 9.44, y: 0.22), controlPoint1: CGPoint(x: 8.64, y: -0.07), controlPoint2: CGPoint(x: 9.13, y: -0.08))
        arrow.addCurve(to: CGPoint(x: 9.44, y: 0.23), controlPoint1: CGPoint(x: 9.44, y: 0.23), controlPoint2: CGPoint(x: 9.44, y: 0.23))
        arrow.addCurve(to: CGPoint(x: 9.44, y: 1.36), controlPoint1: CGPoint(x: 9.75, y: 0.54), controlPoint2: CGPoint(x: 9.75, y: 1.05))
        arrow.addLine(to: CGPoint(x: 2.22, y: 8.69))
        arrow.close()
        context.saveGState()
        context.translateBy(x: 15, y: 15)
        context.rotate(by: 270 * CGFloat.pi/180)
        context.translateBy(x: -5, y: -9)
        context.restoreGState()
        
        /// Arrow (Outline Mask)
        context.saveGState()
        arrow.apply(CGAffineTransform(translationX: 15, y: 15))
        arrow.apply(CGAffineTransform(rotationAngle: 270 * CGFloat.pi/180))
        arrow.apply(CGAffineTransform(translationX: -5, y: -9))
        arrow.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Arrow (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsNavToolbarList(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 5.25, y: 0.5))
        icon.addLine(to: CGPoint(x: 20.25, y: 0.5))
        icon.addCurve(to: CGPoint(x: 21, y: 1.25), controlPoint1: CGPoint(x: 20.66, y: 0.5), controlPoint2: CGPoint(x: 21, y: 0.84))
        icon.addCurve(to: CGPoint(x: 20.25, y: 2), controlPoint1: CGPoint(x: 21, y: 1.66), controlPoint2: CGPoint(x: 20.66, y: 2))
        icon.addLine(to: CGPoint(x: 5.25, y: 2))
        icon.addCurve(to: CGPoint(x: 4.5, y: 1.25), controlPoint1: CGPoint(x: 4.84, y: 2), controlPoint2: CGPoint(x: 4.5, y: 1.66))
        icon.addCurve(to: CGPoint(x: 5.25, y: 0.5), controlPoint1: CGPoint(x: 4.5, y: 0.84), controlPoint2: CGPoint(x: 4.84, y: 0.5))
        icon.close()
        icon.move(to: CGPoint(x: 1.25, y: 2.5))
        icon.addCurve(to: CGPoint(x: 0, y: 1.25), controlPoint1: CGPoint(x: 0.56, y: 2.5), controlPoint2: CGPoint(x: 0, y: 1.94))
        icon.addCurve(to: CGPoint(x: 1.25, y: 0), controlPoint1: CGPoint(x: 0, y: 0.56), controlPoint2: CGPoint(x: 0.56, y: 0))
        icon.addCurve(to: CGPoint(x: 2.5, y: 1.25), controlPoint1: CGPoint(x: 1.94, y: 0), controlPoint2: CGPoint(x: 2.5, y: 0.56))
        icon.addCurve(to: CGPoint(x: 1.25, y: 2.5), controlPoint1: CGPoint(x: 2.5, y: 1.94), controlPoint2: CGPoint(x: 1.94, y: 2.5))
        icon.close()
        icon.move(to: CGPoint(x: 1.25, y: 8))
        icon.addCurve(to: CGPoint(x: 0, y: 6.75), controlPoint1: CGPoint(x: 0.56, y: 8), controlPoint2: CGPoint(x: 0, y: 7.44))
        icon.addCurve(to: CGPoint(x: 1.25, y: 5.5), controlPoint1: CGPoint(x: 0, y: 6.06), controlPoint2: CGPoint(x: 0.56, y: 5.5))
        icon.addCurve(to: CGPoint(x: 2.5, y: 6.75), controlPoint1: CGPoint(x: 1.94, y: 5.5), controlPoint2: CGPoint(x: 2.5, y: 6.06))
        icon.addCurve(to: CGPoint(x: 1.25, y: 8), controlPoint1: CGPoint(x: 2.5, y: 7.44), controlPoint2: CGPoint(x: 1.94, y: 8))
        icon.close()
        icon.move(to: CGPoint(x: 5.25, y: 6))
        icon.addLine(to: CGPoint(x: 20.25, y: 6))
        icon.addCurve(to: CGPoint(x: 21, y: 6.75), controlPoint1: CGPoint(x: 20.66, y: 6), controlPoint2: CGPoint(x: 21, y: 6.34))
        icon.addCurve(to: CGPoint(x: 20.25, y: 7.5), controlPoint1: CGPoint(x: 21, y: 7.16), controlPoint2: CGPoint(x: 20.66, y: 7.5))
        icon.addLine(to: CGPoint(x: 5.25, y: 7.5))
        icon.addCurve(to: CGPoint(x: 4.5, y: 6.75), controlPoint1: CGPoint(x: 4.84, y: 7.5), controlPoint2: CGPoint(x: 4.5, y: 7.16))
        icon.addCurve(to: CGPoint(x: 5.25, y: 6), controlPoint1: CGPoint(x: 4.5, y: 6.34), controlPoint2: CGPoint(x: 4.84, y: 6))
        icon.close()
        icon.move(to: CGPoint(x: 5.25, y: 11.5))
        icon.addLine(to: CGPoint(x: 20.25, y: 11.5))
        icon.addCurve(to: CGPoint(x: 21, y: 12.25), controlPoint1: CGPoint(x: 20.66, y: 11.5), controlPoint2: CGPoint(x: 21, y: 11.84))
        icon.addCurve(to: CGPoint(x: 20.25, y: 13), controlPoint1: CGPoint(x: 21, y: 12.66), controlPoint2: CGPoint(x: 20.66, y: 13))
        icon.addLine(to: CGPoint(x: 5.25, y: 13))
        icon.addCurve(to: CGPoint(x: 4.5, y: 12.25), controlPoint1: CGPoint(x: 4.84, y: 13), controlPoint2: CGPoint(x: 4.5, y: 12.66))
        icon.addCurve(to: CGPoint(x: 5.25, y: 11.5), controlPoint1: CGPoint(x: 4.5, y: 11.84), controlPoint2: CGPoint(x: 4.84, y: 11.5))
        icon.close()
        icon.move(to: CGPoint(x: 1.25, y: 13.5))
        icon.addCurve(to: CGPoint(x: 0, y: 12.25), controlPoint1: CGPoint(x: 0.56, y: 13.5), controlPoint2: CGPoint(x: 0, y: 12.94))
        icon.addCurve(to: CGPoint(x: 1.25, y: 11), controlPoint1: CGPoint(x: 0, y: 11.56), controlPoint2: CGPoint(x: 0.56, y: 11))
        icon.addCurve(to: CGPoint(x: 2.5, y: 12.25), controlPoint1: CGPoint(x: 1.94, y: 11), controlPoint2: CGPoint(x: 2.5, y: 11.56))
        icon.addCurve(to: CGPoint(x: 1.25, y: 13.5), controlPoint1: CGPoint(x: 2.5, y: 12.94), controlPoint2: CGPoint(x: 1.94, y: 13.5))
        icon.close()
        context.saveGState()
        context.translateBy(x: 4.5, y: 8)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4.5, y: 8))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsNavToolbarMore(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 2, y: 4))
        icon.addCurve(to: CGPoint(x: 0, y: 2), controlPoint1: CGPoint(x: 0.9, y: 4), controlPoint2: CGPoint(x: 0, y: 3.1))
        icon.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
        icon.addCurve(to: CGPoint(x: 4, y: 2), controlPoint1: CGPoint(x: 3.1, y: 0), controlPoint2: CGPoint(x: 4, y: 0.9))
        icon.addCurve(to: CGPoint(x: 2, y: 4), controlPoint1: CGPoint(x: 4, y: 3.1), controlPoint2: CGPoint(x: 3.1, y: 4))
        icon.close()
        icon.move(to: CGPoint(x: 10, y: 4))
        icon.addCurve(to: CGPoint(x: 8, y: 2), controlPoint1: CGPoint(x: 8.9, y: 4), controlPoint2: CGPoint(x: 8, y: 3.1))
        icon.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 8, y: 0.9), controlPoint2: CGPoint(x: 8.9, y: 0))
        icon.addCurve(to: CGPoint(x: 12, y: 2), controlPoint1: CGPoint(x: 11.1, y: 0), controlPoint2: CGPoint(x: 12, y: 0.9))
        icon.addCurve(to: CGPoint(x: 10, y: 4), controlPoint1: CGPoint(x: 12, y: 3.1), controlPoint2: CGPoint(x: 11.1, y: 4))
        icon.close()
        icon.move(to: CGPoint(x: 18, y: 4))
        icon.addCurve(to: CGPoint(x: 20, y: 2), controlPoint1: CGPoint(x: 19.1, y: 4), controlPoint2: CGPoint(x: 20, y: 3.1))
        icon.addCurve(to: CGPoint(x: 18, y: 0), controlPoint1: CGPoint(x: 20, y: 0.9), controlPoint2: CGPoint(x: 19.1, y: 0))
        icon.addCurve(to: CGPoint(x: 16, y: 2), controlPoint1: CGPoint(x: 16.9, y: 0), controlPoint2: CGPoint(x: 16, y: 0.9))
        icon.addCurve(to: CGPoint(x: 18, y: 4), controlPoint1: CGPoint(x: 16, y: 3.1), controlPoint2: CGPoint(x: 16.9, y: 4))
        icon.close()
        context.saveGState()
        context.translateBy(x: 5, y: 13)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 5, y: 13))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsNavToolbarDone(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 8.5, y: 16.43))
        icon.addLine(to: CGPoint(x: 22.84, y: 2.09))
        icon.addCurve(to: CGPoint(x: 22.84, y: 0.36), controlPoint1: CGPoint(x: 23.32, y: 1.61), controlPoint2: CGPoint(x: 23.32, y: 0.83))
        icon.addCurve(to: CGPoint(x: 21.12, y: 0.36), controlPoint1: CGPoint(x: 22.37, y: -0.12), controlPoint2: CGPoint(x: 21.59, y: -0.12))
        icon.addLine(to: CGPoint(x: 8.5, y: 12.98))
        icon.addLine(to: CGPoint(x: 2.09, y: 6.56))
        icon.addCurve(to: CGPoint(x: 0.36, y: 6.56), controlPoint1: CGPoint(x: 1.61, y: 6.09), controlPoint2: CGPoint(x: 0.83, y: 6.09))
        icon.addCurve(to: CGPoint(x: 0.36, y: 8.29), controlPoint1: CGPoint(x: -0.12, y: 7.04), controlPoint2: CGPoint(x: -0.12, y: 7.81))
        icon.addLine(to: CGPoint(x: 8.5, y: 16.43))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3.4, y: 7)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3.4, y: 7))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsNavToolbarLike(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 20.37, y: 3.32))
        icon.addCurve(to: CGPoint(x: 10.91, y: 19.23), controlPoint1: CGPoint(x: 22.46, y: 7.69), controlPoint2: CGPoint(x: 19.36, y: 13.66))
        icon.addLine(to: CGPoint(x: 10.5, y: 19.5))
        icon.addLine(to: CGPoint(x: 10.09, y: 19.23))
        icon.addCurve(to: CGPoint(x: 0.63, y: 3.32), controlPoint1: CGPoint(x: 1.64, y: 13.66), controlPoint2: CGPoint(x: -1.46, y: 7.69))
        icon.addCurve(to: CGPoint(x: 10.5, y: 1.81), controlPoint1: CGPoint(x: 2.4, y: -0.37), controlPoint2: CGPoint(x: 7.25, y: -1.15))
        icon.addCurve(to: CGPoint(x: 20.37, y: 3.32), controlPoint1: CGPoint(x: 13.75, y: -1.15), controlPoint2: CGPoint(x: 18.6, y: -0.37))
        icon.close()
        icon.move(to: CGPoint(x: 19.03, y: 3.97))
        icon.addCurve(to: CGPoint(x: 11.05, y: 3.36), controlPoint1: CGPoint(x: 17.62, y: 1.03), controlPoint2: CGPoint(x: 13.59, y: 0.54))
        icon.addLine(to: CGPoint(x: 10.5, y: 3.97))
        icon.addLine(to: CGPoint(x: 9.95, y: 3.36))
        icon.addCurve(to: CGPoint(x: 1.97, y: 3.97), controlPoint1: CGPoint(x: 7.41, y: 0.54), controlPoint2: CGPoint(x: 3.38, y: 1.03))
        icon.addCurve(to: CGPoint(x: 10.5, y: 17.71), controlPoint1: CGPoint(x: 0.3, y: 7.45), controlPoint2: CGPoint(x: 2.91, y: 12.59))
        icon.addCurve(to: CGPoint(x: 19.03, y: 3.97), controlPoint1: CGPoint(x: 18.09, y: 12.59), controlPoint2: CGPoint(x: 20.7, y: 7.45))
        icon.close()
        context.saveGState()
        context.translateBy(x: 4.5, y: 5.5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4.5, y: 5.5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsNavToolbarDelete(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 5.94, y: 2.69))
        icon.addLine(to: CGPoint(x: 5.94, y: 2.09))
        icon.addCurve(to: CGPoint(x: 6.67, y: 1.49), controlPoint1: CGPoint(x: 5.94, y: 1.76), controlPoint2: CGPoint(x: 6.27, y: 1.49))
        icon.addLine(to: CGPoint(x: 10.83, y: 1.49))
        icon.addCurve(to: CGPoint(x: 11.57, y: 2.09), controlPoint1: CGPoint(x: 11.23, y: 1.49), controlPoint2: CGPoint(x: 11.57, y: 1.76))
        icon.addLine(to: CGPoint(x: 11.57, y: 2.69))
        icon.addLine(to: CGPoint(x: 5.94, y: 2.69))
        icon.close()
        icon.move(to: CGPoint(x: 14.93, y: 4.18))
        icon.addCurve(to: CGPoint(x: 14.24, y: 20.88), controlPoint1: CGPoint(x: 14.84, y: 6.44), controlPoint2: CGPoint(x: 14.3, y: 20.25))
        icon.addCurve(to: CGPoint(x: 13.99, y: 21.51), controlPoint1: CGPoint(x: 14.2, y: 21.25), controlPoint2: CGPoint(x: 14.06, y: 21.43))
        icon.addLine(to: CGPoint(x: 3.51, y: 21.51))
        icon.addCurve(to: CGPoint(x: 3.26, y: 20.88), controlPoint1: CGPoint(x: 3.44, y: 21.43), controlPoint2: CGPoint(x: 3.3, y: 21.25))
        icon.addCurve(to: CGPoint(x: 2.5, y: 4.18), controlPoint1: CGPoint(x: 3.2, y: 20.25), controlPoint2: CGPoint(x: 2.6, y: 6.45))
        icon.addLine(to: CGPoint(x: 14.93, y: 4.18))
        icon.close()
        icon.move(to: CGPoint(x: 13.05, y: 2.69))
        icon.addLine(to: CGPoint(x: 17.5, y: 2.69))
        icon.addLine(to: CGPoint(x: 17.5, y: 4.18))
        icon.addLine(to: CGPoint(x: 16.45, y: 4.18))
        icon.addLine(to: CGPoint(x: 15.72, y: 21.37))
        icon.addCurve(to: CGPoint(x: 14.09, y: 23), controlPoint1: CGPoint(x: 15.7, y: 21.48), controlPoint2: CGPoint(x: 15.37, y: 23))
        icon.addLine(to: CGPoint(x: 3.41, y: 23))
        icon.addCurve(to: CGPoint(x: 1.79, y: 21.42), controlPoint1: CGPoint(x: 2.13, y: 23), controlPoint2: CGPoint(x: 1.8, y: 21.48))
        icon.addLine(to: CGPoint(x: 1.01, y: 4.18))
        icon.addLine(to: CGPoint(x: 0, y: 4.18))
        icon.addLine(to: CGPoint(x: 0, y: 2.69))
        icon.addLine(to: CGPoint(x: 4.45, y: 2.69))
        icon.addLine(to: CGPoint(x: 4.45, y: 2.09))
        icon.addCurve(to: CGPoint(x: 6.53, y: 0), controlPoint1: CGPoint(x: 4.45, y: 0.94), controlPoint2: CGPoint(x: 5.38, y: 0))
        icon.addLine(to: CGPoint(x: 10.97, y: 0))
        icon.addCurve(to: CGPoint(x: 13.05, y: 2.09), controlPoint1: CGPoint(x: 12.12, y: 0), controlPoint2: CGPoint(x: 13.05, y: 0.94))
        icon.addLine(to: CGPoint(x: 13.05, y: 2.69))
        icon.close()
        icon.move(to: CGPoint(x: 12.75, y: 5.38))
        icon.addLine(to: CGPoint(x: 11.26, y: 5.38))
        icon.addLine(to: CGPoint(x: 10.8, y: 20.31))
        icon.addLine(to: CGPoint(x: 12.29, y: 20.31))
        icon.addLine(to: CGPoint(x: 12.75, y: 5.38))
        icon.close()
        icon.move(to: CGPoint(x: 8.01, y: 20.31))
        icon.addLine(to: CGPoint(x: 9.49, y: 20.31))
        icon.addLine(to: CGPoint(x: 9.49, y: 5.38))
        icon.addLine(to: CGPoint(x: 8.01, y: 5.38))
        icon.addLine(to: CGPoint(x: 8.01, y: 20.31))
        icon.close()
        icon.move(to: CGPoint(x: 6.7, y: 20.31))
        icon.addLine(to: CGPoint(x: 6.24, y: 5.38))
        icon.addLine(to: CGPoint(x: 4.75, y: 5.38))
        icon.addLine(to: CGPoint(x: 5.21, y: 20.31))
        icon.addLine(to: CGPoint(x: 6.7, y: 20.31))
        icon.close()
        context.saveGState()
        context.translateBy(x: 6.2, y: 4)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 6.2, y: 4))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsNavToolbarSearch(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 13.72, y: 12.68))
        icon.addCurve(to: CGPoint(x: 13.83, y: 12.77), controlPoint1: CGPoint(x: 13.76, y: 12.71), controlPoint2: CGPoint(x: 13.8, y: 12.74))
        icon.addLine(to: CGPoint(x: 19.78, y: 18.72))
        icon.addCurve(to: CGPoint(x: 19.78, y: 19.78), controlPoint1: CGPoint(x: 20.07, y: 19.01), controlPoint2: CGPoint(x: 20.07, y: 19.49))
        icon.addCurve(to: CGPoint(x: 18.72, y: 19.78), controlPoint1: CGPoint(x: 19.49, y: 20.07), controlPoint2: CGPoint(x: 19.01, y: 20.07))
        icon.addLine(to: CGPoint(x: 12.77, y: 13.83))
        icon.addCurve(to: CGPoint(x: 12.68, y: 13.72), controlPoint1: CGPoint(x: 12.74, y: 13.8), controlPoint2: CGPoint(x: 12.71, y: 13.76))
        icon.addCurve(to: CGPoint(x: 7.75, y: 15.49), controlPoint1: CGPoint(x: 11.34, y: 14.82), controlPoint2: CGPoint(x: 9.62, y: 15.49))
        icon.addCurve(to: CGPoint(x: 0, y: 7.75), controlPoint1: CGPoint(x: 3.47, y: 15.49), controlPoint2: CGPoint(x: 0, y: 12.02))
        icon.addCurve(to: CGPoint(x: 7.75, y: 0), controlPoint1: CGPoint(x: 0, y: 3.47), controlPoint2: CGPoint(x: 3.47, y: 0))
        icon.addCurve(to: CGPoint(x: 15.49, y: 7.75), controlPoint1: CGPoint(x: 12.02, y: 0), controlPoint2: CGPoint(x: 15.49, y: 3.47))
        icon.addCurve(to: CGPoint(x: 13.72, y: 12.68), controlPoint1: CGPoint(x: 15.49, y: 9.62), controlPoint2: CGPoint(x: 14.82, y: 11.34))
        icon.close()
        icon.move(to: CGPoint(x: 7.75, y: 13.99))
        icon.addCurve(to: CGPoint(x: 13.99, y: 7.75), controlPoint1: CGPoint(x: 11.19, y: 13.99), controlPoint2: CGPoint(x: 13.99, y: 11.19))
        icon.addCurve(to: CGPoint(x: 7.75, y: 1.5), controlPoint1: CGPoint(x: 13.99, y: 4.3), controlPoint2: CGPoint(x: 11.19, y: 1.5))
        icon.addCurve(to: CGPoint(x: 1.5, y: 7.75), controlPoint1: CGPoint(x: 4.3, y: 1.5), controlPoint2: CGPoint(x: 1.5, y: 4.3))
        icon.addCurve(to: CGPoint(x: 7.75, y: 13.99), controlPoint1: CGPoint(x: 1.5, y: 11.19), controlPoint2: CGPoint(x: 4.3, y: 13.99))
        icon.close()
        context.saveGState()
        context.translateBy(x: 5, y: 5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 5, y: 5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsNavToolbarDownload(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 12.24, y: 22.31))
        icon.addCurve(to: CGPoint(x: 12.17, y: 22.35), controlPoint1: CGPoint(x: 12.22, y: 22.32), controlPoint2: CGPoint(x: 12.19, y: 22.34))
        icon.addLine(to: CGPoint(x: 12.11, y: 22.39))
        icon.addCurve(to: CGPoint(x: 12.04, y: 22.44), controlPoint1: CGPoint(x: 12.08, y: 22.41), controlPoint2: CGPoint(x: 12.05, y: 22.43))
        icon.addCurve(to: CGPoint(x: 11.46, y: 22.44), controlPoint1: CGPoint(x: 11.84, y: 22.52), controlPoint2: CGPoint(x: 11.66, y: 22.52))
        icon.addCurve(to: CGPoint(x: 11.4, y: 22.4), controlPoint1: CGPoint(x: 11.45, y: 22.44), controlPoint2: CGPoint(x: 11.43, y: 22.42))
        icon.addLine(to: CGPoint(x: 11.34, y: 22.36))
        icon.addCurve(to: CGPoint(x: 11.23, y: 22.29), controlPoint1: CGPoint(x: 11.32, y: 22.34), controlPoint2: CGPoint(x: 11.29, y: 22.33))
        icon.addLine(to: CGPoint(x: 8.1, y: 19.33))
        icon.addCurve(to: CGPoint(x: 7.87, y: 18.81), controlPoint1: CGPoint(x: 7.96, y: 19.19), controlPoint2: CGPoint(x: 7.88, y: 19.01))
        icon.addCurve(to: CGPoint(x: 8.08, y: 18.29), controlPoint1: CGPoint(x: 7.87, y: 18.62), controlPoint2: CGPoint(x: 7.94, y: 18.43))
        icon.addCurve(to: CGPoint(x: 8.62, y: 18.06), controlPoint1: CGPoint(x: 8.23, y: 18.14), controlPoint2: CGPoint(x: 8.43, y: 18.06))
        icon.addCurve(to: CGPoint(x: 9.15, y: 18.27), controlPoint1: CGPoint(x: 8.81, y: 18.06), controlPoint2: CGPoint(x: 9, y: 18.13))
        icon.addLine(to: CGPoint(x: 11, y: 20.02))
        icon.addLine(to: CGPoint(x: 11, y: 8.92))
        icon.addCurve(to: CGPoint(x: 11.75, y: 8.18), controlPoint1: CGPoint(x: 11, y: 8.51), controlPoint2: CGPoint(x: 11.33, y: 8.18))
        icon.addCurve(to: CGPoint(x: 12.5, y: 8.92), controlPoint1: CGPoint(x: 12.16, y: 8.18), controlPoint2: CGPoint(x: 12.5, y: 8.51))
        icon.addLine(to: CGPoint(x: 12.5, y: 20.02))
        icon.addLine(to: CGPoint(x: 14.36, y: 18.27))
        icon.addCurve(to: CGPoint(x: 15.42, y: 18.29), controlPoint1: CGPoint(x: 14.65, y: 17.98), controlPoint2: CGPoint(x: 15.13, y: 17.99))
        icon.addCurve(to: CGPoint(x: 15.63, y: 18.81), controlPoint1: CGPoint(x: 15.56, y: 18.43), controlPoint2: CGPoint(x: 15.63, y: 18.62))
        icon.addCurve(to: CGPoint(x: 15.4, y: 19.33), controlPoint1: CGPoint(x: 15.62, y: 19.01), controlPoint2: CGPoint(x: 15.54, y: 19.19))
        icon.addLine(to: CGPoint(x: 12.24, y: 22.31))
        icon.close()
        icon.move(to: CGPoint(x: 23.5, y: 10.12))
        icon.addCurve(to: CGPoint(x: 17.49, y: 16.04), controlPoint1: CGPoint(x: 23.5, y: 13.39), controlPoint2: CGPoint(x: 20.81, y: 16.04))
        icon.addLine(to: CGPoint(x: 16.02, y: 16.04))
        icon.addLine(to: CGPoint(x: 16.02, y: 14.57))
        icon.addLine(to: CGPoint(x: 17.49, y: 14.57))
        icon.addCurve(to: CGPoint(x: 22, y: 10.12), controlPoint1: CGPoint(x: 19.98, y: 14.57), controlPoint2: CGPoint(x: 22, y: 12.57))
        icon.addCurve(to: CGPoint(x: 18.5, y: 5.79), controlPoint1: CGPoint(x: 22, y: 8.04), controlPoint2: CGPoint(x: 20.54, y: 6.25))
        icon.addCurve(to: CGPoint(x: 13.24, y: 1.47), controlPoint1: CGPoint(x: 18.03, y: 3.28), controlPoint2: CGPoint(x: 15.84, y: 1.47))
        icon.addCurve(to: CGPoint(x: 8.52, y: 4.28), controlPoint1: CGPoint(x: 11.27, y: 1.47), controlPoint2: CGPoint(x: 9.44, y: 2.57))
        icon.addCurve(to: CGPoint(x: 7.28, y: 3.99), controlPoint1: CGPoint(x: 8.13, y: 4.09), controlPoint2: CGPoint(x: 7.71, y: 3.99))
        icon.addCurve(to: CGPoint(x: 4.48, y: 6.67), controlPoint1: CGPoint(x: 5.77, y: 3.99), controlPoint2: CGPoint(x: 4.53, y: 5.18))
        icon.addCurve(to: CGPoint(x: 1.5, y: 10.54), controlPoint1: CGPoint(x: 2.72, y: 7.15), controlPoint2: CGPoint(x: 1.5, y: 8.72))
        icon.addCurve(to: CGPoint(x: 5.58, y: 14.57), controlPoint1: CGPoint(x: 1.5, y: 12.76), controlPoint2: CGPoint(x: 3.33, y: 14.57))
        icon.addLine(to: CGPoint(x: 7.51, y: 14.57))
        icon.addLine(to: CGPoint(x: 7.51, y: 16.04))
        icon.addLine(to: CGPoint(x: 5.58, y: 16.04))
        icon.addCurve(to: CGPoint(x: 0, y: 10.54), controlPoint1: CGPoint(x: 2.5, y: 16.04), controlPoint2: CGPoint(x: 0, y: 13.57))
        icon.addCurve(to: CGPoint(x: 3.05, y: 5.64), controlPoint1: CGPoint(x: 0, y: 8.45), controlPoint2: CGPoint(x: 1.17, y: 6.57))
        icon.addLine(to: CGPoint(x: 3.14, y: 5.59))
        icon.addLine(to: CGPoint(x: 3.18, y: 5.49))
        icon.addCurve(to: CGPoint(x: 7.28, y: 2.52), controlPoint1: CGPoint(x: 3.74, y: 3.71), controlPoint2: CGPoint(x: 5.4, y: 2.52))
        icon.addCurve(to: CGPoint(x: 7.74, y: 2.54), controlPoint1: CGPoint(x: 7.44, y: 2.52), controlPoint2: CGPoint(x: 7.59, y: 2.53))
        icon.addLine(to: CGPoint(x: 7.88, y: 2.56))
        icon.addLine(to: CGPoint(x: 7.96, y: 2.46))
        icon.addCurve(to: CGPoint(x: 13.24, y: 0), controlPoint1: CGPoint(x: 9.28, y: 0.89), controlPoint2: CGPoint(x: 11.2, y: 0))
        icon.addCurve(to: CGPoint(x: 19.71, y: 4.53), controlPoint1: CGPoint(x: 16.16, y: 0), controlPoint2: CGPoint(x: 18.76, y: 1.82))
        icon.addLine(to: CGPoint(x: 19.75, y: 4.63))
        icon.addLine(to: CGPoint(x: 19.85, y: 4.68))
        icon.addCurve(to: CGPoint(x: 23.5, y: 10.12), controlPoint1: CGPoint(x: 22.07, y: 5.61), controlPoint2: CGPoint(x: 23.5, y: 7.74))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3.5, y: 4)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3.5, y: 4))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsNavToolbarFont(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 7.88, y: 15.45))
        icon.addLine(to: CGPoint(x: 7.97, y: 15.51))
        icon.addLine(to: CGPoint(x: 9.06, y: 17.94))
        icon.addCurve(to: CGPoint(x: 9.86, y: 18.25), controlPoint1: CGPoint(x: 9.2, y: 18.25), controlPoint2: CGPoint(x: 9.56, y: 18.38))
        icon.addCurve(to: CGPoint(x: 10.17, y: 17.44), controlPoint1: CGPoint(x: 10.17, y: 18.11), controlPoint2: CGPoint(x: 10.31, y: 17.75))
        icon.addLine(to: CGPoint(x: 6.02, y: 8.15))
        icon.addCurve(to: CGPoint(x: 4.21, y: 8.13), controlPoint1: CGPoint(x: 5.67, y: 7.4), controlPoint2: CGPoint(x: 4.56, y: 7.4))
        icon.addLine(to: CGPoint(x: 0.05, y: 17.44))
        icon.addCurve(to: CGPoint(x: 0.36, y: 18.25), controlPoint1: CGPoint(x: -0.08, y: 17.75), controlPoint2: CGPoint(x: 0.05, y: 18.11))
        icon.addCurve(to: CGPoint(x: 1.17, y: 17.94), controlPoint1: CGPoint(x: 0.67, y: 18.38), controlPoint2: CGPoint(x: 1.03, y: 18.25))
        icon.addLine(to: CGPoint(x: 2.25, y: 15.51))
        icon.addLine(to: CGPoint(x: 2.34, y: 15.45))
        icon.addLine(to: CGPoint(x: 7.88, y: 15.45))
        icon.close()
        icon.move(to: CGPoint(x: 7.34, y: 14.09))
        icon.addLine(to: CGPoint(x: 7.25, y: 14.23))
        icon.addLine(to: CGPoint(x: 2.98, y: 14.23))
        icon.addLine(to: CGPoint(x: 2.89, y: 14.09))
        icon.addLine(to: CGPoint(x: 5.02, y: 9.32))
        icon.addLine(to: CGPoint(x: 5.2, y: 9.32))
        icon.addLine(to: CGPoint(x: 7.34, y: 14.09))
        icon.close()
        icon.move(to: CGPoint(x: 22.98, y: 12.61))
        icon.addLine(to: CGPoint(x: 23.07, y: 12.67))
        icon.addLine(to: CGPoint(x: 25.12, y: 17.91))
        icon.addCurve(to: CGPoint(x: 25.91, y: 18.26), controlPoint1: CGPoint(x: 25.24, y: 18.23), controlPoint2: CGPoint(x: 25.6, y: 18.38))
        icon.addCurve(to: CGPoint(x: 26.26, y: 17.47), controlPoint1: CGPoint(x: 26.23, y: 18.13), controlPoint2: CGPoint(x: 26.38, y: 17.78))
        icon.addLine(to: CGPoint(x: 19.72, y: 0.75))
        icon.addCurve(to: CGPoint(x: 17.49, y: 0.74), controlPoint1: CGPoint(x: 19.31, y: -0.25), controlPoint2: CGPoint(x: 17.89, y: -0.25))
        icon.addLine(to: CGPoint(x: 10.94, y: 17.47))
        icon.addCurve(to: CGPoint(x: 11.29, y: 18.26), controlPoint1: CGPoint(x: 10.82, y: 17.78), controlPoint2: CGPoint(x: 10.97, y: 18.13))
        icon.addCurve(to: CGPoint(x: 12.08, y: 17.91), controlPoint1: CGPoint(x: 11.6, y: 18.38), controlPoint2: CGPoint(x: 11.96, y: 18.23))
        icon.addLine(to: CGPoint(x: 14.13, y: 12.67))
        icon.addLine(to: CGPoint(x: 14.22, y: 12.61))
        icon.addLine(to: CGPoint(x: 22.98, y: 12.61))
        icon.close()
        icon.move(to: CGPoint(x: 22.51, y: 11.25))
        icon.addLine(to: CGPoint(x: 22.42, y: 11.38))
        icon.addLine(to: CGPoint(x: 14.78, y: 11.38))
        icon.addLine(to: CGPoint(x: 14.69, y: 11.25))
        icon.addLine(to: CGPoint(x: 18.51, y: 1.48))
        icon.addLine(to: CGPoint(x: 18.69, y: 1.48))
        icon.addLine(to: CGPoint(x: 22.51, y: 11.25))
        icon.close()
        context.saveGState()
        context.translateBy(x: 2, y: 6)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 2, y: 6))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsNavToolbarEdit(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 22, y: 1.39))
        icon.addCurve(to: CGPoint(x: 21.79, y: 1.89), controlPoint1: CGPoint(x: 22, y: 1.58), controlPoint2: CGPoint(x: 21.93, y: 1.75))
        icon.addCurve(to: CGPoint(x: 21.3, y: 2.39), controlPoint1: CGPoint(x: 21.59, y: 2.09), controlPoint2: CGPoint(x: 21.42, y: 2.26))
        icon.addLine(to: CGPoint(x: 19.6, y: 0.7))
        icon.addCurve(to: CGPoint(x: 20.09, y: 0.21), controlPoint1: CGPoint(x: 19.72, y: 0.58), controlPoint2: CGPoint(x: 19.89, y: 0.4))
        icon.addCurve(to: CGPoint(x: 21.09, y: 0.2), controlPoint1: CGPoint(x: 20.36, y: -0.07), controlPoint2: CGPoint(x: 20.82, y: -0.07))
        icon.addLine(to: CGPoint(x: 21.79, y: 0.9))
        icon.addCurve(to: CGPoint(x: 22, y: 1.39), controlPoint1: CGPoint(x: 21.93, y: 1.03), controlPoint2: CGPoint(x: 22, y: 1.2))
        icon.close()
        icon.move(to: CGPoint(x: 0, y: 4.94))
        icon.addCurve(to: CGPoint(x: 2.62, y: 2.3), controlPoint1: CGPoint(x: 0, y: 3.48), controlPoint2: CGPoint(x: 1.18, y: 2.3))
        icon.addLine(to: CGPoint(x: 14.85, y: 2.3))
        icon.addLine(to: CGPoint(x: 13.42, y: 3.72))
        icon.addLine(to: CGPoint(x: 2.62, y: 3.72))
        icon.addCurve(to: CGPoint(x: 1.41, y: 4.94), controlPoint1: CGPoint(x: 1.96, y: 3.72), controlPoint2: CGPoint(x: 1.41, y: 4.27))
        icon.addLine(to: CGPoint(x: 1.41, y: 19.37))
        icon.addCurve(to: CGPoint(x: 2.62, y: 20.58), controlPoint1: CGPoint(x: 1.41, y: 20.04), controlPoint2: CGPoint(x: 1.96, y: 20.58))
        icon.addLine(to: CGPoint(x: 17.01, y: 20.58))
        icon.addCurve(to: CGPoint(x: 18.21, y: 19.37), controlPoint1: CGPoint(x: 17.67, y: 20.58), controlPoint2: CGPoint(x: 18.21, y: 20.04))
        icon.addLine(to: CGPoint(x: 18.21, y: 8.75))
        icon.addLine(to: CGPoint(x: 19.63, y: 7.35))
        icon.addLine(to: CGPoint(x: 19.63, y: 19.37))
        icon.addCurve(to: CGPoint(x: 17.01, y: 22), controlPoint1: CGPoint(x: 19.63, y: 20.82), controlPoint2: CGPoint(x: 18.45, y: 22))
        icon.addLine(to: CGPoint(x: 2.62, y: 22))
        icon.addCurve(to: CGPoint(x: 0, y: 19.37), controlPoint1: CGPoint(x: 1.18, y: 22), controlPoint2: CGPoint(x: 0, y: 20.82))
        icon.addLine(to: CGPoint(x: 0, y: 4.94))
        icon.close()
        icon.move(to: CGPoint(x: 8.77, y: 11.49))
        icon.addLine(to: CGPoint(x: 19.1, y: 1.19))
        icon.addLine(to: CGPoint(x: 20.8, y: 2.88))
        icon.addLine(to: CGPoint(x: 10.47, y: 13.17))
        icon.addLine(to: CGPoint(x: 8.16, y: 13.77))
        icon.addLine(to: CGPoint(x: 8.77, y: 11.49))
        icon.close()
        context.saveGState()
        context.translateBy(x: 4, y: 4)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4, y: 4))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsNavToolbarShare(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 8.27, y: 0.17))
        icon.addLine(to: CGPoint(x: 12.03, y: 3.99))
        icon.addCurve(to: CGPoint(x: 12.03, y: 4.95), controlPoint1: CGPoint(x: 12.29, y: 4.25), controlPoint2: CGPoint(x: 12.29, y: 4.68))
        icon.addCurve(to: CGPoint(x: 11.57, y: 5.14), controlPoint1: CGPoint(x: 11.91, y: 5.07), controlPoint2: CGPoint(x: 11.74, y: 5.14))
        icon.addCurve(to: CGPoint(x: 11.1, y: 4.95), controlPoint1: CGPoint(x: 11.39, y: 5.14), controlPoint2: CGPoint(x: 11.22, y: 5.07))
        icon.addLine(to: CGPoint(x: 8.57, y: 2.38))
        icon.addLine(to: CGPoint(x: 8.57, y: 16.08))
        icon.addCurve(to: CGPoint(x: 7.91, y: 16.75), controlPoint1: CGPoint(x: 8.57, y: 16.45), controlPoint2: CGPoint(x: 8.27, y: 16.75))
        icon.addCurve(to: CGPoint(x: 7.25, y: 16.08), controlPoint1: CGPoint(x: 7.55, y: 16.75), controlPoint2: CGPoint(x: 7.25, y: 16.45))
        icon.addLine(to: CGPoint(x: 7.25, y: 2.41))
        icon.addLine(to: CGPoint(x: 4.75, y: 4.95))
        icon.addCurve(to: CGPoint(x: 3.82, y: 4.95), controlPoint1: CGPoint(x: 4.5, y: 5.2), controlPoint2: CGPoint(x: 4.07, y: 5.2))
        icon.addCurve(to: CGPoint(x: 3.82, y: 3.99), controlPoint1: CGPoint(x: 3.56, y: 4.68), controlPoint2: CGPoint(x: 3.56, y: 4.25))
        icon.addLine(to: CGPoint(x: 7.58, y: 0.17))
        icon.addCurve(to: CGPoint(x: 8.27, y: 0.17), controlPoint1: CGPoint(x: 7.8, y: -0.06), controlPoint2: CGPoint(x: 8.05, y: -0.05))
        icon.move(to: CGPoint(x: 15.85, y: 9.73))
        icon.addLine(to: CGPoint(x: 15.85, y: 22.41))
        icon.addCurve(to: CGPoint(x: 14.26, y: 24), controlPoint1: CGPoint(x: 15.85, y: 23.29), controlPoint2: CGPoint(x: 15.14, y: 24))
        icon.addLine(to: CGPoint(x: 1.58, y: 24))
        icon.addCurve(to: CGPoint(x: 0, y: 22.41), controlPoint1: CGPoint(x: 0.71, y: 24), controlPoint2: CGPoint(x: 0, y: 23.29))
        icon.addLine(to: CGPoint(x: 0, y: 9.73))
        icon.addCurve(to: CGPoint(x: 1.58, y: 8.15), controlPoint1: CGPoint(x: 0, y: 8.86), controlPoint2: CGPoint(x: 0.71, y: 8.15))
        icon.addLine(to: CGPoint(x: 4.97, y: 8.15))
        icon.addLine(to: CGPoint(x: 4.97, y: 9.51))
        icon.addLine(to: CGPoint(x: 2.19, y: 9.51))
        icon.addCurve(to: CGPoint(x: 1.36, y: 10.34), controlPoint1: CGPoint(x: 1.73, y: 9.51), controlPoint2: CGPoint(x: 1.36, y: 9.88))
        icon.addLine(to: CGPoint(x: 1.36, y: 21.81))
        icon.addCurve(to: CGPoint(x: 2.19, y: 22.64), controlPoint1: CGPoint(x: 1.36, y: 22.27), controlPoint2: CGPoint(x: 1.73, y: 22.64))
        icon.addLine(to: CGPoint(x: 13.66, y: 22.64))
        icon.addCurve(to: CGPoint(x: 14.49, y: 21.81), controlPoint1: CGPoint(x: 14.12, y: 22.64), controlPoint2: CGPoint(x: 14.49, y: 22.27))
        icon.addLine(to: CGPoint(x: 14.49, y: 10.34))
        icon.addCurve(to: CGPoint(x: 13.66, y: 9.51), controlPoint1: CGPoint(x: 14.49, y: 9.88), controlPoint2: CGPoint(x: 14.12, y: 9.51))
        icon.addLine(to: CGPoint(x: 10.87, y: 9.51))
        icon.addLine(to: CGPoint(x: 10.87, y: 8.15))
        icon.addLine(to: CGPoint(x: 14.26, y: 8.15))
        icon.addCurve(to: CGPoint(x: 15.85, y: 9.73), controlPoint1: CGPoint(x: 15.14, y: 8.15), controlPoint2: CGPoint(x: 15.85, y: 8.86))
        context.saveGState()
        context.translateBy(x: 7.1, y: 2)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 7.1, y: 2))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsNavToolbarPhoto(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 6.04, y: 4.21))
        icon.addLine(to: CGPoint(x: 23.67, y: 4.21))
        icon.addCurve(to: CGPoint(x: 25.5, y: 6.05), controlPoint1: CGPoint(x: 24.68, y: 4.21), controlPoint2: CGPoint(x: 25.5, y: 5.03))
        icon.addLine(to: CGPoint(x: 25.5, y: 18.16))
        icon.addCurve(to: CGPoint(x: 23.67, y: 20), controlPoint1: CGPoint(x: 25.5, y: 19.18), controlPoint2: CGPoint(x: 24.68, y: 20))
        icon.addLine(to: CGPoint(x: 6.04, y: 20))
        icon.addCurve(to: CGPoint(x: 4.2, y: 18.16), controlPoint1: CGPoint(x: 5.02, y: 20), controlPoint2: CGPoint(x: 4.2, y: 19.18))
        icon.addLine(to: CGPoint(x: 4.2, y: 6.05))
        icon.addCurve(to: CGPoint(x: 6.04, y: 4.21), controlPoint1: CGPoint(x: 4.2, y: 5.03), controlPoint2: CGPoint(x: 5.02, y: 4.21))
        icon.close()
        icon.move(to: CGPoint(x: 6.04, y: 5.72))
        icon.addCurve(to: CGPoint(x: 5.7, y: 6.05), controlPoint1: CGPoint(x: 5.85, y: 5.72), controlPoint2: CGPoint(x: 5.7, y: 5.87))
        icon.addLine(to: CGPoint(x: 5.7, y: 18.16))
        icon.addCurve(to: CGPoint(x: 6.04, y: 18.49), controlPoint1: CGPoint(x: 5.7, y: 18.35), controlPoint2: CGPoint(x: 5.85, y: 18.49))
        icon.addLine(to: CGPoint(x: 23.67, y: 18.49))
        icon.addCurve(to: CGPoint(x: 24, y: 18.16), controlPoint1: CGPoint(x: 23.85, y: 18.49), controlPoint2: CGPoint(x: 24, y: 18.35))
        icon.addLine(to: CGPoint(x: 24, y: 6.05))
        icon.addCurve(to: CGPoint(x: 23.67, y: 5.72), controlPoint1: CGPoint(x: 24, y: 5.87), controlPoint2: CGPoint(x: 23.85, y: 5.72))
        icon.addLine(to: CGPoint(x: 6.04, y: 5.72))
        icon.close()
        icon.move(to: CGPoint(x: 21.3, y: 2.96))
        icon.addLine(to: CGPoint(x: 19.8, y: 2.96))
        icon.addLine(to: CGPoint(x: 19.8, y: 1.83))
        icon.addCurve(to: CGPoint(x: 19.46, y: 1.51), controlPoint1: CGPoint(x: 19.8, y: 1.65), controlPoint2: CGPoint(x: 19.65, y: 1.51))
        icon.addLine(to: CGPoint(x: 1.83, y: 1.51))
        icon.addCurve(to: CGPoint(x: 1.5, y: 1.83), controlPoint1: CGPoint(x: 1.65, y: 1.51), controlPoint2: CGPoint(x: 1.5, y: 1.65))
        icon.addLine(to: CGPoint(x: 1.5, y: 13.95))
        icon.addCurve(to: CGPoint(x: 1.83, y: 14.28), controlPoint1: CGPoint(x: 1.5, y: 14.13), controlPoint2: CGPoint(x: 1.65, y: 14.28))
        icon.addLine(to: CGPoint(x: 2.85, y: 14.28))
        icon.addLine(to: CGPoint(x: 2.85, y: 15.79))
        icon.addLine(to: CGPoint(x: 1.83, y: 15.79))
        icon.addCurve(to: CGPoint(x: 0, y: 13.95), controlPoint1: CGPoint(x: 0.82, y: 15.79), controlPoint2: CGPoint(x: 0, y: 14.96))
        icon.addLine(to: CGPoint(x: 0, y: 1.83))
        icon.addCurve(to: CGPoint(x: 1.83, y: 0), controlPoint1: CGPoint(x: 0, y: 0.82), controlPoint2: CGPoint(x: 0.82, y: 0))
        icon.addLine(to: CGPoint(x: 19.46, y: 0))
        icon.addCurve(to: CGPoint(x: 21.3, y: 1.83), controlPoint1: CGPoint(x: 20.48, y: 0), controlPoint2: CGPoint(x: 21.3, y: 0.82))
        icon.addLine(to: CGPoint(x: 21.3, y: 2.96))
        icon.close()
        context.saveGState()
        context.translateBy(x: 2.3, y: 5.5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 2.3, y: 5.5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsNavToolbarBag(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 2.56, y: 7.5))
        icon.addCurve(to: CGPoint(x: 1.73, y: 7.59), controlPoint1: CGPoint(x: 1.98, y: 7.5), controlPoint2: CGPoint(x: 1.85, y: 7.52))
        icon.addCurve(to: CGPoint(x: 1.59, y: 7.73), controlPoint1: CGPoint(x: 1.67, y: 7.62), controlPoint2: CGPoint(x: 1.62, y: 7.67))
        icon.addCurve(to: CGPoint(x: 1.5, y: 8.56), controlPoint1: CGPoint(x: 1.52, y: 7.85), controlPoint2: CGPoint(x: 1.5, y: 7.98))
        icon.addLine(to: CGPoint(x: 1.5, y: 20.44))
        icon.addCurve(to: CGPoint(x: 1.59, y: 21.27), controlPoint1: CGPoint(x: 1.5, y: 21.02), controlPoint2: CGPoint(x: 1.52, y: 21.15))
        icon.addCurve(to: CGPoint(x: 1.73, y: 21.41), controlPoint1: CGPoint(x: 1.62, y: 21.33), controlPoint2: CGPoint(x: 1.67, y: 21.38))
        icon.addCurve(to: CGPoint(x: 2.56, y: 21.5), controlPoint1: CGPoint(x: 1.85, y: 21.48), controlPoint2: CGPoint(x: 1.98, y: 21.5))
        icon.addLine(to: CGPoint(x: 15.44, y: 21.5))
        icon.addCurve(to: CGPoint(x: 16.27, y: 21.41), controlPoint1: CGPoint(x: 16.02, y: 21.5), controlPoint2: CGPoint(x: 16.15, y: 21.48))
        icon.addCurve(to: CGPoint(x: 16.41, y: 21.27), controlPoint1: CGPoint(x: 16.33, y: 21.38), controlPoint2: CGPoint(x: 16.38, y: 21.33))
        icon.addCurve(to: CGPoint(x: 16.5, y: 20.44), controlPoint1: CGPoint(x: 16.48, y: 21.15), controlPoint2: CGPoint(x: 16.5, y: 21.02))
        icon.addLine(to: CGPoint(x: 16.5, y: 8.56))
        icon.addCurve(to: CGPoint(x: 16.41, y: 7.73), controlPoint1: CGPoint(x: 16.5, y: 7.98), controlPoint2: CGPoint(x: 16.48, y: 7.85))
        icon.addCurve(to: CGPoint(x: 16.27, y: 7.59), controlPoint1: CGPoint(x: 16.38, y: 7.67), controlPoint2: CGPoint(x: 16.33, y: 7.62))
        icon.addCurve(to: CGPoint(x: 15.44, y: 7.5), controlPoint1: CGPoint(x: 16.15, y: 7.52), controlPoint2: CGPoint(x: 16.02, y: 7.5))
        icon.addLine(to: CGPoint(x: 2.56, y: 7.5))
        icon.close()
        icon.move(to: CGPoint(x: 4, y: 6))
        icon.addLine(to: CGPoint(x: 4, y: 5))
        icon.addCurve(to: CGPoint(x: 9, y: 0), controlPoint1: CGPoint(x: 4, y: 2.24), controlPoint2: CGPoint(x: 6.24, y: 0))
        icon.addCurve(to: CGPoint(x: 14, y: 5), controlPoint1: CGPoint(x: 11.76, y: 0), controlPoint2: CGPoint(x: 14, y: 2.24))
        icon.addLine(to: CGPoint(x: 14, y: 6))
        icon.addLine(to: CGPoint(x: 15.44, y: 6))
        icon.addCurve(to: CGPoint(x: 16.98, y: 6.27), controlPoint1: CGPoint(x: 16.33, y: 6), controlPoint2: CGPoint(x: 16.65, y: 6.09))
        icon.addCurve(to: CGPoint(x: 17.73, y: 7.02), controlPoint1: CGPoint(x: 17.3, y: 6.44), controlPoint2: CGPoint(x: 17.56, y: 6.7))
        icon.addCurve(to: CGPoint(x: 18, y: 8.56), controlPoint1: CGPoint(x: 17.91, y: 7.35), controlPoint2: CGPoint(x: 18, y: 7.67))
        icon.addLine(to: CGPoint(x: 18, y: 20.44))
        icon.addCurve(to: CGPoint(x: 17.73, y: 21.98), controlPoint1: CGPoint(x: 18, y: 21.33), controlPoint2: CGPoint(x: 17.91, y: 21.65))
        icon.addCurve(to: CGPoint(x: 16.98, y: 22.73), controlPoint1: CGPoint(x: 17.56, y: 22.3), controlPoint2: CGPoint(x: 17.3, y: 22.56))
        icon.addCurve(to: CGPoint(x: 15.44, y: 23), controlPoint1: CGPoint(x: 16.65, y: 22.91), controlPoint2: CGPoint(x: 16.33, y: 23))
        icon.addLine(to: CGPoint(x: 2.56, y: 23))
        icon.addCurve(to: CGPoint(x: 1.02, y: 22.73), controlPoint1: CGPoint(x: 1.67, y: 23), controlPoint2: CGPoint(x: 1.35, y: 22.91))
        icon.addCurve(to: CGPoint(x: 0.27, y: 21.98), controlPoint1: CGPoint(x: 0.7, y: 22.56), controlPoint2: CGPoint(x: 0.44, y: 22.3))
        icon.addCurve(to: CGPoint(x: 0, y: 20.44), controlPoint1: CGPoint(x: 0.09, y: 21.65), controlPoint2: CGPoint(x: 0, y: 21.33))
        icon.addLine(to: CGPoint(x: 0, y: 8.56))
        icon.addCurve(to: CGPoint(x: 0.27, y: 7.02), controlPoint1: CGPoint(x: 0, y: 7.67), controlPoint2: CGPoint(x: 0.09, y: 7.35))
        icon.addCurve(to: CGPoint(x: 1.02, y: 6.27), controlPoint1: CGPoint(x: 0.44, y: 6.7), controlPoint2: CGPoint(x: 0.7, y: 6.44))
        icon.addCurve(to: CGPoint(x: 2.56, y: 6), controlPoint1: CGPoint(x: 1.35, y: 6.09), controlPoint2: CGPoint(x: 1.67, y: 6))
        icon.addLine(to: CGPoint(x: 4, y: 6))
        icon.close()
        icon.move(to: CGPoint(x: 12.5, y: 5))
        icon.addCurve(to: CGPoint(x: 9, y: 1.5), controlPoint1: CGPoint(x: 12.5, y: 3.07), controlPoint2: CGPoint(x: 10.93, y: 1.5))
        icon.addCurve(to: CGPoint(x: 5.5, y: 5), controlPoint1: CGPoint(x: 7.07, y: 1.5), controlPoint2: CGPoint(x: 5.5, y: 3.07))
        icon.addLine(to: CGPoint(x: 5.5, y: 6.01))
        icon.addLine(to: CGPoint(x: 12.5, y: 6.01))
        icon.addLine(to: CGPoint(x: 12.5, y: 5))
        icon.close()
        context.saveGState()
        context.translateBy(x: 6, y: 4)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 6, y: 4))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsNavToolbarFavorite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 18.02, y: 8.48))
        icon.addCurve(to: CGPoint(x: 15.99, y: 8.49), controlPoint1: CGPoint(x: 17.37, y: 8.48), controlPoint2: CGPoint(x: 16.69, y: 8.49))
        icon.addCurve(to: CGPoint(x: 14.34, y: 8.49), controlPoint1: CGPoint(x: 15.41, y: 8.49), controlPoint2: CGPoint(x: 15.04, y: 8.49))
        icon.addCurve(to: CGPoint(x: 13.68, y: 8.49), controlPoint1: CGPoint(x: 13.81, y: 8.49), controlPoint2: CGPoint(x: 13.81, y: 8.49))
        icon.addLine(to: CGPoint(x: 13.18, y: 8.49))
        icon.addLine(to: CGPoint(x: 13.03, y: 8.01))
        icon.addLine(to: CGPoint(x: 11.03, y: 1.71))
        icon.addLine(to: CGPoint(x: 8.86, y: 8.49))
        icon.addLine(to: CGPoint(x: 8.36, y: 8.48))
        icon.addCurve(to: CGPoint(x: 7.7, y: 8.48), controlPoint1: CGPoint(x: 8.24, y: 8.48), controlPoint2: CGPoint(x: 8.24, y: 8.48))
        icon.addCurve(to: CGPoint(x: 6.04, y: 8.48), controlPoint1: CGPoint(x: 6.99, y: 8.48), controlPoint2: CGPoint(x: 6.99, y: 8.48))
        icon.addCurve(to: CGPoint(x: 4.03, y: 8.48), controlPoint1: CGPoint(x: 5.07, y: 8.48), controlPoint2: CGPoint(x: 5.07, y: 8.48))
        icon.addCurve(to: CGPoint(x: 1.79, y: 8.48), controlPoint1: CGPoint(x: 3.18, y: 8.48), controlPoint2: CGPoint(x: 2.43, y: 8.48))
        icon.addCurve(to: CGPoint(x: 1.87, y: 8.54), controlPoint1: CGPoint(x: 1.82, y: 8.5), controlPoint2: CGPoint(x: 1.85, y: 8.52))
        icon.addLine(to: CGPoint(x: 7.52, y: 12.67))
        icon.addLine(to: CGPoint(x: 7.37, y: 13.15))
        icon.addLine(to: CGPoint(x: 5.42, y: 19.16))
        icon.addCurve(to: CGPoint(x: 5.31, y: 19.47), controlPoint1: CGPoint(x: 5.39, y: 19.22), controlPoint2: CGPoint(x: 5.35, y: 19.33))
        icon.addCurve(to: CGPoint(x: 5.4, y: 19.41), controlPoint1: CGPoint(x: 5.34, y: 19.45), controlPoint2: CGPoint(x: 5.37, y: 19.43))
        icon.addCurve(to: CGPoint(x: 7.11, y: 18.14), controlPoint1: CGPoint(x: 5.89, y: 19.04), controlPoint2: CGPoint(x: 6.46, y: 18.62))
        icon.addCurve(to: CGPoint(x: 9.52, y: 16.36), controlPoint1: CGPoint(x: 7.88, y: 17.57), controlPoint2: CGPoint(x: 8.7, y: 16.97))
        icon.addCurve(to: CGPoint(x: 10.61, y: 15.56), controlPoint1: CGPoint(x: 10.39, y: 15.72), controlPoint2: CGPoint(x: 10.39, y: 15.72))
        icon.addLine(to: CGPoint(x: 11.02, y: 15.25))
        icon.addLine(to: CGPoint(x: 11.43, y: 15.56))
        icon.addCurve(to: CGPoint(x: 11.72, y: 15.78), controlPoint1: CGPoint(x: 11.48, y: 15.6), controlPoint2: CGPoint(x: 11.48, y: 15.6))
        icon.addCurve(to: CGPoint(x: 12.48, y: 16.35), controlPoint1: CGPoint(x: 11.95, y: 15.95), controlPoint2: CGPoint(x: 12.2, y: 16.14))
        icon.addCurve(to: CGPoint(x: 14.81, y: 18.09), controlPoint1: CGPoint(x: 13.27, y: 16.95), controlPoint2: CGPoint(x: 14.06, y: 17.54))
        icon.addCurve(to: CGPoint(x: 14.96, y: 18.2), controlPoint1: CGPoint(x: 14.89, y: 18.15), controlPoint2: CGPoint(x: 14.89, y: 18.15))
        icon.addCurve(to: CGPoint(x: 16.5, y: 19.32), controlPoint1: CGPoint(x: 15.53, y: 18.62), controlPoint2: CGPoint(x: 16.05, y: 19))
        icon.addCurve(to: CGPoint(x: 16.72, y: 19.47), controlPoint1: CGPoint(x: 16.58, y: 19.38), controlPoint2: CGPoint(x: 16.65, y: 19.43))
        icon.addCurve(to: CGPoint(x: 16.61, y: 19.19), controlPoint1: CGPoint(x: 16.69, y: 19.38), controlPoint2: CGPoint(x: 16.65, y: 19.29))
        icon.addLine(to: CGPoint(x: 14.52, y: 12.68))
        icon.addLine(to: CGPoint(x: 20.25, y: 8.48))
        icon.addCurve(to: CGPoint(x: 18.02, y: 8.48), controlPoint1: CGPoint(x: 19.59, y: 8.48), controlPoint2: CGPoint(x: 18.85, y: 8.48))
        icon.close()
        icon.move(to: CGPoint(x: 1.39, y: 8.11))
        icon.addCurve(to: CGPoint(x: 1.38, y: 8.09), controlPoint1: CGPoint(x: 1.39, y: 8.1), controlPoint2: CGPoint(x: 1.38, y: 8.09))
        icon.addCurve(to: CGPoint(x: 1.39, y: 8.09), controlPoint1: CGPoint(x: 1.38, y: 8.09), controlPoint2: CGPoint(x: 1.38, y: 8.09))
        icon.addLine(to: CGPoint(x: 1.39, y: 8.11))
        icon.close()
        icon.move(to: CGPoint(x: 10.9, y: 1.35))
        icon.addCurve(to: CGPoint(x: 10.9, y: 1.34), controlPoint1: CGPoint(x: 10.9, y: 1.35), controlPoint2: CGPoint(x: 10.9, y: 1.34))
        icon.addCurve(to: CGPoint(x: 10.9, y: 1.35), controlPoint1: CGPoint(x: 10.9, y: 1.34), controlPoint2: CGPoint(x: 10.9, y: 1.34))
        icon.close()
        icon.move(to: CGPoint(x: 20.61, y: 8.13))
        icon.addCurve(to: CGPoint(x: 20.62, y: 8.11), controlPoint1: CGPoint(x: 20.62, y: 8.12), controlPoint2: CGPoint(x: 20.62, y: 8.11))
        icon.addCurve(to: CGPoint(x: 20.62, y: 8.11), controlPoint1: CGPoint(x: 20.62, y: 8.11), controlPoint2: CGPoint(x: 20.62, y: 8.11))
        icon.addLine(to: CGPoint(x: 20.61, y: 8.13))
        icon.close()
        icon.move(to: CGPoint(x: 21.1, y: 9.56))
        icon.addLine(to: CGPoint(x: 16.13, y: 13.2))
        icon.addLine(to: CGPoint(x: 17.89, y: 18.7))
        icon.addCurve(to: CGPoint(x: 18.06, y: 19.13), controlPoint1: CGPoint(x: 17.94, y: 18.8), controlPoint2: CGPoint(x: 18, y: 18.95))
        icon.addCurve(to: CGPoint(x: 18.17, y: 19.56), controlPoint1: CGPoint(x: 18.1, y: 19.28), controlPoint2: CGPoint(x: 18.14, y: 19.42))
        icon.addCurve(to: CGPoint(x: 17.7, y: 21.01), controlPoint1: CGPoint(x: 18.31, y: 20.21), controlPoint2: CGPoint(x: 18.25, y: 20.73))
        icon.addCurve(to: CGPoint(x: 15.7, y: 20.44), controlPoint1: CGPoint(x: 17.17, y: 21.28), controlPoint2: CGPoint(x: 16.56, y: 21.05))
        icon.addCurve(to: CGPoint(x: 14.15, y: 19.31), controlPoint1: CGPoint(x: 15.24, y: 20.11), controlPoint2: CGPoint(x: 14.72, y: 19.73))
        icon.addCurve(to: CGPoint(x: 14, y: 19.2), controlPoint1: CGPoint(x: 14.07, y: 19.25), controlPoint2: CGPoint(x: 14.07, y: 19.25))
        icon.addCurve(to: CGPoint(x: 11.65, y: 17.45), controlPoint1: CGPoint(x: 13.25, y: 18.64), controlPoint2: CGPoint(x: 12.45, y: 18.04))
        icon.addCurve(to: CGPoint(x: 11.01, y: 16.97), controlPoint1: CGPoint(x: 11.42, y: 17.28), controlPoint2: CGPoint(x: 11.21, y: 17.11))
        icon.addCurve(to: CGPoint(x: 10.33, y: 17.47), controlPoint1: CGPoint(x: 10.87, y: 17.07), controlPoint2: CGPoint(x: 10.66, y: 17.22))
        icon.addCurve(to: CGPoint(x: 7.92, y: 19.24), controlPoint1: CGPoint(x: 9.51, y: 18.07), controlPoint2: CGPoint(x: 8.69, y: 18.68))
        icon.addCurve(to: CGPoint(x: 6.21, y: 20.51), controlPoint1: CGPoint(x: 7.28, y: 19.72), controlPoint2: CGPoint(x: 6.7, y: 20.15))
        icon.addCurve(to: CGPoint(x: 4.27, y: 20.97), controlPoint1: CGPoint(x: 5.4, y: 21.11), controlPoint2: CGPoint(x: 4.79, y: 21.32))
        icon.addCurve(to: CGPoint(x: 3.87, y: 19.54), controlPoint1: CGPoint(x: 3.8, y: 20.66), controlPoint2: CGPoint(x: 3.75, y: 20.17))
        icon.addCurve(to: CGPoint(x: 3.99, y: 19.09), controlPoint1: CGPoint(x: 3.9, y: 19.4), controlPoint2: CGPoint(x: 3.94, y: 19.24))
        icon.addCurve(to: CGPoint(x: 4.13, y: 18.69), controlPoint1: CGPoint(x: 4.05, y: 18.9), controlPoint2: CGPoint(x: 4.11, y: 18.74))
        icon.addLine(to: CGPoint(x: 5.91, y: 13.19))
        icon.addLine(to: CGPoint(x: 1.08, y: 9.66))
        icon.addCurve(to: CGPoint(x: 0.62, y: 9.29), controlPoint1: CGPoint(x: 0.96, y: 9.58), controlPoint2: CGPoint(x: 0.79, y: 9.45))
        icon.addCurve(to: CGPoint(x: 0.21, y: 8.8), controlPoint1: CGPoint(x: 0.45, y: 9.13), controlPoint2: CGPoint(x: 0.31, y: 8.97))
        icon.addCurve(to: CGPoint(x: 1.79, y: 7.11), controlPoint1: CGPoint(x: -0.4, y: 7.8), controlPoint2: CGPoint(x: 0.37, y: 7.11))
        icon.addCurve(to: CGPoint(x: 4.03, y: 7.11), controlPoint1: CGPoint(x: 2.43, y: 7.11), controlPoint2: CGPoint(x: 3.18, y: 7.11))
        icon.addCurve(to: CGPoint(x: 6.04, y: 7.11), controlPoint1: CGPoint(x: 5.07, y: 7.11), controlPoint2: CGPoint(x: 5.07, y: 7.11))
        icon.addCurve(to: CGPoint(x: 7.7, y: 7.11), controlPoint1: CGPoint(x: 6.99, y: 7.11), controlPoint2: CGPoint(x: 6.99, y: 7.11))
        icon.addCurve(to: CGPoint(x: 7.86, y: 7.11), controlPoint1: CGPoint(x: 7.76, y: 7.11), controlPoint2: CGPoint(x: 7.81, y: 7.11))
        icon.addLine(to: CGPoint(x: 9.8, y: 1.06))
        icon.addCurve(to: CGPoint(x: 10.02, y: 0.59), controlPoint1: CGPoint(x: 9.83, y: 0.93), controlPoint2: CGPoint(x: 9.9, y: 0.76))
        icon.addCurve(to: CGPoint(x: 11.03, y: 0), controlPoint1: CGPoint(x: 10.25, y: 0.24), controlPoint2: CGPoint(x: 10.58, y: 0))
        icon.addCurve(to: CGPoint(x: 12.07, y: 0.63), controlPoint1: CGPoint(x: 11.5, y: 0), controlPoint2: CGPoint(x: 11.85, y: 0.26))
        icon.addCurve(to: CGPoint(x: 12.27, y: 1.08), controlPoint1: CGPoint(x: 12.19, y: 0.82), controlPoint2: CGPoint(x: 12.25, y: 0.99))
        icon.addLine(to: CGPoint(x: 14.19, y: 7.12))
        icon.addCurve(to: CGPoint(x: 14.34, y: 7.12), controlPoint1: CGPoint(x: 14.23, y: 7.12), controlPoint2: CGPoint(x: 14.28, y: 7.12))
        icon.addCurve(to: CGPoint(x: 15.99, y: 7.11), controlPoint1: CGPoint(x: 15.04, y: 7.12), controlPoint2: CGPoint(x: 15.41, y: 7.12))
        icon.addCurve(to: CGPoint(x: 18.01, y: 7.11), controlPoint1: CGPoint(x: 16.69, y: 7.11), controlPoint2: CGPoint(x: 17.37, y: 7.11))
        icon.addCurve(to: CGPoint(x: 20.21, y: 7.11), controlPoint1: CGPoint(x: 18.85, y: 7.11), controlPoint2: CGPoint(x: 19.59, y: 7.11))
        icon.addCurve(to: CGPoint(x: 21.86, y: 8.7), controlPoint1: CGPoint(x: 21.56, y: 7.11), controlPoint2: CGPoint(x: 22.33, y: 7.72))
        icon.addCurve(to: CGPoint(x: 21.49, y: 9.22), controlPoint1: CGPoint(x: 21.78, y: 8.88), controlPoint2: CGPoint(x: 21.65, y: 9.05))
        icon.addCurve(to: CGPoint(x: 21.1, y: 9.56), controlPoint1: CGPoint(x: 21.34, y: 9.37), controlPoint2: CGPoint(x: 21.21, y: 9.48))
        icon.addLine(to: CGPoint(x: 20.69, y: 9.01))
        icon.addLine(to: CGPoint(x: 21.1, y: 9.56))
        icon.close()
        context.saveGState()
        context.translateBy(x: 4, y: 4)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4, y: 4))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsNavToolbarSettings(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 12.46, y: 10.33))
        icon.addLine(to: CGPoint(x: 12.39, y: 10.21))
        icon.addCurve(to: CGPoint(x: 11.03, y: 9.43), controlPoint1: CGPoint(x: 12.11, y: 9.73), controlPoint2: CGPoint(x: 11.59, y: 9.43))
        icon.addLine(to: CGPoint(x: 10.9, y: 9.43))
        icon.addLine(to: CGPoint(x: 10.82, y: 9.31))
        icon.addLine(to: CGPoint(x: 7.89, y: 4.22))
        icon.addLine(to: CGPoint(x: 8.14, y: 4.12))
        icon.addCurve(to: CGPoint(x: 11.03, y: 3.54), controlPoint1: CGPoint(x: 9.06, y: 3.73), controlPoint2: CGPoint(x: 10.03, y: 3.54))
        icon.addCurve(to: CGPoint(x: 18.43, y: 10.07), controlPoint1: CGPoint(x: 14.79, y: 3.54), controlPoint2: CGPoint(x: 17.97, y: 6.34))
        icon.addLine(to: CGPoint(x: 18.47, y: 10.33))
        icon.addLine(to: CGPoint(x: 12.46, y: 10.33))
        icon.close()
        icon.move(to: CGPoint(x: 18.43, y: 11.93))
        icon.addCurve(to: CGPoint(x: 11.03, y: 18.46), controlPoint1: CGPoint(x: 17.97, y: 15.66), controlPoint2: CGPoint(x: 14.79, y: 18.46))
        icon.addCurve(to: CGPoint(x: 8.14, y: 17.88), controlPoint1: CGPoint(x: 10.03, y: 18.46), controlPoint2: CGPoint(x: 9.06, y: 18.27))
        icon.addLine(to: CGPoint(x: 7.89, y: 17.78))
        icon.addLine(to: CGPoint(x: 10.89, y: 12.57))
        icon.addLine(to: CGPoint(x: 11.03, y: 12.57))
        icon.addCurve(to: CGPoint(x: 12.39, y: 11.79), controlPoint1: CGPoint(x: 11.59, y: 12.57), controlPoint2: CGPoint(x: 12.11, y: 12.27))
        icon.addLine(to: CGPoint(x: 12.46, y: 11.67))
        icon.addLine(to: CGPoint(x: 18.47, y: 11.67))
        icon.addLine(to: CGPoint(x: 18.43, y: 11.93))
        icon.close()
        icon.move(to: CGPoint(x: 6.73, y: 17.1))
        icon.addLine(to: CGPoint(x: 6.52, y: 16.94))
        icon.addCurve(to: CGPoint(x: 3.57, y: 11), controlPoint1: CGPoint(x: 4.64, y: 15.51), controlPoint2: CGPoint(x: 3.57, y: 13.35))
        icon.addCurve(to: CGPoint(x: 6.52, y: 5.06), controlPoint1: CGPoint(x: 3.57, y: 8.65), controlPoint2: CGPoint(x: 4.64, y: 6.49))
        icon.addLine(to: CGPoint(x: 6.74, y: 4.9))
        icon.addLine(to: CGPoint(x: 9.74, y: 10.1))
        icon.addLine(to: CGPoint(x: 9.67, y: 10.21))
        icon.addCurve(to: CGPoint(x: 9.46, y: 11), controlPoint1: CGPoint(x: 9.53, y: 10.45), controlPoint2: CGPoint(x: 9.46, y: 10.73))
        icon.addCurve(to: CGPoint(x: 9.67, y: 11.78), controlPoint1: CGPoint(x: 9.46, y: 11.27), controlPoint2: CGPoint(x: 9.53, y: 11.54))
        icon.addLine(to: CGPoint(x: 9.74, y: 11.9))
        icon.addLine(to: CGPoint(x: 6.73, y: 17.1))
        icon.close()
        icon.move(to: CGPoint(x: 20.18, y: 12.53))
        icon.addCurve(to: CGPoint(x: 21.01, y: 11.85), controlPoint1: CGPoint(x: 20.24, y: 12.13), controlPoint2: CGPoint(x: 20.6, y: 11.85))
        icon.addLine(to: CGPoint(x: 21.15, y: 11.85))
        icon.addCurve(to: CGPoint(x: 22, y: 11), controlPoint1: CGPoint(x: 21.62, y: 11.85), controlPoint2: CGPoint(x: 22, y: 11.47))
        icon.addCurve(to: CGPoint(x: 21.15, y: 10.15), controlPoint1: CGPoint(x: 22, y: 10.53), controlPoint2: CGPoint(x: 21.62, y: 10.15))
        icon.addLine(to: CGPoint(x: 21.01, y: 10.15))
        icon.addCurve(to: CGPoint(x: 20.18, y: 9.47), controlPoint1: CGPoint(x: 20.6, y: 10.15), controlPoint2: CGPoint(x: 20.24, y: 9.87))
        icon.addCurve(to: CGPoint(x: 20.07, y: 8.89), controlPoint1: CGPoint(x: 20.15, y: 9.28), controlPoint2: CGPoint(x: 20.11, y: 9.08))
        icon.addCurve(to: CGPoint(x: 20.57, y: 7.95), controlPoint1: CGPoint(x: 19.98, y: 8.5), controlPoint2: CGPoint(x: 20.2, y: 8.11))
        icon.addLine(to: CGPoint(x: 20.7, y: 7.89))
        icon.addCurve(to: CGPoint(x: 21.16, y: 6.79), controlPoint1: CGPoint(x: 21.14, y: 7.72), controlPoint2: CGPoint(x: 21.34, y: 7.22))
        icon.addCurve(to: CGPoint(x: 20.06, y: 6.33), controlPoint1: CGPoint(x: 20.98, y: 6.36), controlPoint2: CGPoint(x: 20.49, y: 6.15))
        icon.addLine(to: CGPoint(x: 19.92, y: 6.39))
        icon.addCurve(to: CGPoint(x: 18.89, y: 6.08), controlPoint1: CGPoint(x: 19.55, y: 6.54), controlPoint2: CGPoint(x: 19.11, y: 6.42))
        icon.addCurve(to: CGPoint(x: 18.57, y: 5.59), controlPoint1: CGPoint(x: 18.79, y: 5.91), controlPoint2: CGPoint(x: 18.68, y: 5.75))
        icon.addCurve(to: CGPoint(x: 18.67, y: 4.52), controlPoint1: CGPoint(x: 18.33, y: 5.26), controlPoint2: CGPoint(x: 18.39, y: 4.8))
        icon.addLine(to: CGPoint(x: 18.78, y: 4.42))
        icon.addCurve(to: CGPoint(x: 18.78, y: 3.22), controlPoint1: CGPoint(x: 19.11, y: 4.09), controlPoint2: CGPoint(x: 19.11, y: 3.55))
        icon.addCurve(to: CGPoint(x: 17.58, y: 3.22), controlPoint1: CGPoint(x: 18.45, y: 2.89), controlPoint2: CGPoint(x: 17.91, y: 2.89))
        icon.addLine(to: CGPoint(x: 17.48, y: 3.33))
        icon.addCurve(to: CGPoint(x: 16.41, y: 3.43), controlPoint1: CGPoint(x: 17.19, y: 3.61), controlPoint2: CGPoint(x: 16.74, y: 3.67))
        icon.addCurve(to: CGPoint(x: 15.92, y: 3.11), controlPoint1: CGPoint(x: 16.25, y: 3.32), controlPoint2: CGPoint(x: 16.09, y: 3.21))
        icon.addCurve(to: CGPoint(x: 15.61, y: 2.08), controlPoint1: CGPoint(x: 15.58, y: 2.89), controlPoint2: CGPoint(x: 15.46, y: 2.45))
        icon.addLine(to: CGPoint(x: 15.67, y: 1.94))
        icon.addCurve(to: CGPoint(x: 15.21, y: 0.84), controlPoint1: CGPoint(x: 15.84, y: 1.51), controlPoint2: CGPoint(x: 15.64, y: 1.01))
        icon.addCurve(to: CGPoint(x: 14.1, y: 1.3), controlPoint1: CGPoint(x: 14.78, y: 0.66), controlPoint2: CGPoint(x: 14.28, y: 0.86))
        icon.addLine(to: CGPoint(x: 14.05, y: 1.43))
        icon.addCurve(to: CGPoint(x: 13.1, y: 1.93), controlPoint1: CGPoint(x: 13.89, y: 1.8), controlPoint2: CGPoint(x: 13.5, y: 2.02))
        icon.addCurve(to: CGPoint(x: 12.53, y: 1.82), controlPoint1: CGPoint(x: 12.91, y: 1.89), controlPoint2: CGPoint(x: 12.72, y: 1.85))
        icon.addCurve(to: CGPoint(x: 11.85, y: 0.99), controlPoint1: CGPoint(x: 12.13, y: 1.76), controlPoint2: CGPoint(x: 11.85, y: 1.4))
        icon.addLine(to: CGPoint(x: 11.85, y: 0.85))
        icon.addCurve(to: CGPoint(x: 11, y: 0), controlPoint1: CGPoint(x: 11.85, y: 0.38), controlPoint2: CGPoint(x: 11.47, y: 0))
        icon.addCurve(to: CGPoint(x: 10.15, y: 0.85), controlPoint1: CGPoint(x: 10.53, y: 0), controlPoint2: CGPoint(x: 10.15, y: 0.38))
        icon.addLine(to: CGPoint(x: 10.15, y: 0.99))
        icon.addCurve(to: CGPoint(x: 9.47, y: 1.82), controlPoint1: CGPoint(x: 10.15, y: 1.4), controlPoint2: CGPoint(x: 9.87, y: 1.76))
        icon.addCurve(to: CGPoint(x: 8.89, y: 1.93), controlPoint1: CGPoint(x: 9.28, y: 1.85), controlPoint2: CGPoint(x: 9.08, y: 1.89))
        icon.addCurve(to: CGPoint(x: 7.95, y: 1.43), controlPoint1: CGPoint(x: 8.5, y: 2.02), controlPoint2: CGPoint(x: 8.11, y: 1.8))
        icon.addLine(to: CGPoint(x: 7.89, y: 1.3))
        icon.addCurve(to: CGPoint(x: 6.79, y: 0.84), controlPoint1: CGPoint(x: 7.72, y: 0.86), controlPoint2: CGPoint(x: 7.22, y: 0.66))
        icon.addCurve(to: CGPoint(x: 6.33, y: 1.94), controlPoint1: CGPoint(x: 6.36, y: 1.02), controlPoint2: CGPoint(x: 6.15, y: 1.51))
        icon.addLine(to: CGPoint(x: 6.39, y: 2.08))
        icon.addCurve(to: CGPoint(x: 6.08, y: 3.11), controlPoint1: CGPoint(x: 6.54, y: 2.45), controlPoint2: CGPoint(x: 6.42, y: 2.89))
        icon.addCurve(to: CGPoint(x: 5.59, y: 3.43), controlPoint1: CGPoint(x: 5.91, y: 3.21), controlPoint2: CGPoint(x: 5.75, y: 3.32))
        icon.addCurve(to: CGPoint(x: 4.52, y: 3.33), controlPoint1: CGPoint(x: 5.26, y: 3.67), controlPoint2: CGPoint(x: 4.81, y: 3.61))
        icon.addLine(to: CGPoint(x: 4.42, y: 3.22))
        icon.addCurve(to: CGPoint(x: 3.22, y: 3.22), controlPoint1: CGPoint(x: 4.09, y: 2.89), controlPoint2: CGPoint(x: 3.55, y: 2.89))
        icon.addCurve(to: CGPoint(x: 3.22, y: 4.42), controlPoint1: CGPoint(x: 2.89, y: 3.55), controlPoint2: CGPoint(x: 2.89, y: 4.09))
        icon.addLine(to: CGPoint(x: 3.33, y: 4.52))
        icon.addCurve(to: CGPoint(x: 3.43, y: 5.59), controlPoint1: CGPoint(x: 3.61, y: 4.81), controlPoint2: CGPoint(x: 3.67, y: 5.26))
        icon.addCurve(to: CGPoint(x: 3.11, y: 6.08), controlPoint1: CGPoint(x: 3.32, y: 5.75), controlPoint2: CGPoint(x: 3.21, y: 5.91))
        icon.addCurve(to: CGPoint(x: 2.08, y: 6.39), controlPoint1: CGPoint(x: 2.89, y: 6.42), controlPoint2: CGPoint(x: 2.45, y: 6.54))
        icon.addLine(to: CGPoint(x: 1.94, y: 6.33))
        icon.addCurve(to: CGPoint(x: 0.84, y: 6.79), controlPoint1: CGPoint(x: 1.51, y: 6.16), controlPoint2: CGPoint(x: 1.02, y: 6.36))
        icon.addCurve(to: CGPoint(x: 1.3, y: 7.9), controlPoint1: CGPoint(x: 0.66, y: 7.22), controlPoint2: CGPoint(x: 0.86, y: 7.72))
        icon.addLine(to: CGPoint(x: 1.43, y: 7.95))
        icon.addCurve(to: CGPoint(x: 1.93, y: 8.89), controlPoint1: CGPoint(x: 1.8, y: 8.11), controlPoint2: CGPoint(x: 2.02, y: 8.5))
        icon.addCurve(to: CGPoint(x: 1.82, y: 9.47), controlPoint1: CGPoint(x: 1.89, y: 9.08), controlPoint2: CGPoint(x: 1.85, y: 9.28))
        icon.addCurve(to: CGPoint(x: 0.99, y: 10.15), controlPoint1: CGPoint(x: 1.76, y: 9.87), controlPoint2: CGPoint(x: 1.4, y: 10.15))
        icon.addLine(to: CGPoint(x: 0.85, y: 10.15))
        icon.addCurve(to: CGPoint(x: 0, y: 11), controlPoint1: CGPoint(x: 0.38, y: 10.15), controlPoint2: CGPoint(x: 0, y: 10.53))
        icon.addCurve(to: CGPoint(x: 0.85, y: 11.85), controlPoint1: CGPoint(x: 0, y: 11.47), controlPoint2: CGPoint(x: 0.38, y: 11.85))
        icon.addLine(to: CGPoint(x: 0.99, y: 11.85))
        icon.addCurve(to: CGPoint(x: 1.82, y: 12.53), controlPoint1: CGPoint(x: 1.4, y: 11.85), controlPoint2: CGPoint(x: 1.76, y: 12.13))
        icon.addCurve(to: CGPoint(x: 1.93, y: 13.11), controlPoint1: CGPoint(x: 1.85, y: 12.72), controlPoint2: CGPoint(x: 1.89, y: 12.92))
        icon.addCurve(to: CGPoint(x: 1.43, y: 14.05), controlPoint1: CGPoint(x: 2.02, y: 13.5), controlPoint2: CGPoint(x: 1.8, y: 13.9))
        icon.addLine(to: CGPoint(x: 1.3, y: 14.11))
        icon.addCurve(to: CGPoint(x: 0.84, y: 15.21), controlPoint1: CGPoint(x: 0.87, y: 14.28), controlPoint2: CGPoint(x: 0.66, y: 14.78))
        icon.addCurve(to: CGPoint(x: 1.94, y: 15.67), controlPoint1: CGPoint(x: 1.02, y: 15.64), controlPoint2: CGPoint(x: 1.51, y: 15.85))
        icon.addLine(to: CGPoint(x: 2.08, y: 15.61))
        icon.addCurve(to: CGPoint(x: 3.11, y: 15.92), controlPoint1: CGPoint(x: 2.45, y: 15.46), controlPoint2: CGPoint(x: 2.89, y: 15.58))
        icon.addCurve(to: CGPoint(x: 3.43, y: 16.41), controlPoint1: CGPoint(x: 3.21, y: 16.09), controlPoint2: CGPoint(x: 3.32, y: 16.25))
        icon.addCurve(to: CGPoint(x: 3.33, y: 17.48), controlPoint1: CGPoint(x: 3.67, y: 16.74), controlPoint2: CGPoint(x: 3.61, y: 17.2))
        icon.addLine(to: CGPoint(x: 3.22, y: 17.58))
        icon.addCurve(to: CGPoint(x: 3.22, y: 18.78), controlPoint1: CGPoint(x: 2.89, y: 17.91), controlPoint2: CGPoint(x: 2.89, y: 18.45))
        icon.addCurve(to: CGPoint(x: 4.42, y: 18.78), controlPoint1: CGPoint(x: 3.55, y: 19.11), controlPoint2: CGPoint(x: 4.09, y: 19.11))
        icon.addLine(to: CGPoint(x: 4.52, y: 18.68))
        icon.addCurve(to: CGPoint(x: 5.59, y: 18.57), controlPoint1: CGPoint(x: 4.81, y: 18.39), controlPoint2: CGPoint(x: 5.26, y: 18.34))
        icon.addCurve(to: CGPoint(x: 6.08, y: 18.9), controlPoint1: CGPoint(x: 5.75, y: 18.68), controlPoint2: CGPoint(x: 5.91, y: 18.79))
        icon.addCurve(to: CGPoint(x: 6.39, y: 19.92), controlPoint1: CGPoint(x: 6.42, y: 19.11), controlPoint2: CGPoint(x: 6.55, y: 19.55))
        icon.addLine(to: CGPoint(x: 6.33, y: 20.06))
        icon.addCurve(to: CGPoint(x: 6.79, y: 21.17), controlPoint1: CGPoint(x: 6.16, y: 20.49), controlPoint2: CGPoint(x: 6.36, y: 20.98))
        icon.addCurve(to: CGPoint(x: 7.9, y: 20.71), controlPoint1: CGPoint(x: 7.23, y: 21.34), controlPoint2: CGPoint(x: 7.72, y: 21.14))
        icon.addLine(to: CGPoint(x: 7.95, y: 20.57))
        icon.addCurve(to: CGPoint(x: 8.9, y: 20.07), controlPoint1: CGPoint(x: 8.11, y: 20.2), controlPoint2: CGPoint(x: 8.5, y: 19.98))
        icon.addCurve(to: CGPoint(x: 9.47, y: 20.18), controlPoint1: CGPoint(x: 9.09, y: 20.11), controlPoint2: CGPoint(x: 9.28, y: 20.15))
        icon.addCurve(to: CGPoint(x: 10.15, y: 21.01), controlPoint1: CGPoint(x: 9.87, y: 20.24), controlPoint2: CGPoint(x: 10.15, y: 20.6))
        icon.addLine(to: CGPoint(x: 10.15, y: 21.15))
        icon.addCurve(to: CGPoint(x: 11, y: 22), controlPoint1: CGPoint(x: 10.15, y: 21.62), controlPoint2: CGPoint(x: 10.53, y: 22))
        icon.addCurve(to: CGPoint(x: 11.85, y: 21.15), controlPoint1: CGPoint(x: 11.47, y: 22), controlPoint2: CGPoint(x: 11.85, y: 21.62))
        icon.addLine(to: CGPoint(x: 11.85, y: 21.01))
        icon.addCurve(to: CGPoint(x: 12.53, y: 20.18), controlPoint1: CGPoint(x: 11.85, y: 20.6), controlPoint2: CGPoint(x: 12.13, y: 20.24))
        icon.addCurve(to: CGPoint(x: 13.11, y: 20.07), controlPoint1: CGPoint(x: 12.72, y: 20.15), controlPoint2: CGPoint(x: 12.92, y: 20.11))
        icon.addCurve(to: CGPoint(x: 14.05, y: 20.57), controlPoint1: CGPoint(x: 13.5, y: 19.98), controlPoint2: CGPoint(x: 13.9, y: 20.2))
        icon.addLine(to: CGPoint(x: 14.11, y: 20.7))
        icon.addCurve(to: CGPoint(x: 15.21, y: 21.16), controlPoint1: CGPoint(x: 14.28, y: 21.13), controlPoint2: CGPoint(x: 14.78, y: 21.34))
        icon.addCurve(to: CGPoint(x: 15.67, y: 20.06), controlPoint1: CGPoint(x: 15.64, y: 20.98), controlPoint2: CGPoint(x: 15.85, y: 20.49))
        icon.addLine(to: CGPoint(x: 15.61, y: 19.92))
        icon.addCurve(to: CGPoint(x: 15.92, y: 18.89), controlPoint1: CGPoint(x: 15.46, y: 19.55), controlPoint2: CGPoint(x: 15.58, y: 19.11))
        icon.addCurve(to: CGPoint(x: 16.41, y: 18.57), controlPoint1: CGPoint(x: 16.09, y: 18.79), controlPoint2: CGPoint(x: 16.25, y: 18.68))
        icon.addCurve(to: CGPoint(x: 17.48, y: 18.67), controlPoint1: CGPoint(x: 16.74, y: 18.33), controlPoint2: CGPoint(x: 17.2, y: 18.39))
        icon.addLine(to: CGPoint(x: 17.58, y: 18.78))
        icon.addCurve(to: CGPoint(x: 18.78, y: 18.78), controlPoint1: CGPoint(x: 17.91, y: 19.11), controlPoint2: CGPoint(x: 18.45, y: 19.11))
        icon.addCurve(to: CGPoint(x: 18.78, y: 17.58), controlPoint1: CGPoint(x: 19.11, y: 18.45), controlPoint2: CGPoint(x: 19.11, y: 17.91))
        icon.addLine(to: CGPoint(x: 18.68, y: 17.48))
        icon.addCurve(to: CGPoint(x: 18.57, y: 16.41), controlPoint1: CGPoint(x: 18.39, y: 17.19), controlPoint2: CGPoint(x: 18.34, y: 16.74))
        icon.addCurve(to: CGPoint(x: 18.9, y: 15.92), controlPoint1: CGPoint(x: 18.68, y: 16.25), controlPoint2: CGPoint(x: 18.79, y: 16.09))
        icon.addCurve(to: CGPoint(x: 19.92, y: 15.61), controlPoint1: CGPoint(x: 19.11, y: 15.58), controlPoint2: CGPoint(x: 19.55, y: 15.45))
        icon.addLine(to: CGPoint(x: 20.06, y: 15.67))
        icon.addCurve(to: CGPoint(x: 21.17, y: 15.21), controlPoint1: CGPoint(x: 20.49, y: 15.84), controlPoint2: CGPoint(x: 20.99, y: 15.64))
        icon.addCurve(to: CGPoint(x: 20.71, y: 14.1), controlPoint1: CGPoint(x: 21.34, y: 14.78), controlPoint2: CGPoint(x: 21.14, y: 14.28))
        icon.addLine(to: CGPoint(x: 20.57, y: 14.05))
        icon.addCurve(to: CGPoint(x: 20.07, y: 13.1), controlPoint1: CGPoint(x: 20.2, y: 13.89), controlPoint2: CGPoint(x: 19.98, y: 13.5))
        icon.addCurve(to: CGPoint(x: 20.18, y: 12.53), controlPoint1: CGPoint(x: 20.11, y: 12.91), controlPoint2: CGPoint(x: 20.15, y: 12.72))
        icon.close()
        context.saveGState()
        context.translateBy(x: 4, y: 4)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4, y: 4))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsNavToolbarProfile(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 4.83, y: 18.35))
        icon.addLine(to: CGPoint(x: 4.84, y: 18.2))
        icon.addCurve(to: CGPoint(x: 5.89, y: 16.3), controlPoint1: CGPoint(x: 5.01, y: 17.37), controlPoint2: CGPoint(x: 5.36, y: 16.74))
        icon.addCurve(to: CGPoint(x: 7.91, y: 15.7), controlPoint1: CGPoint(x: 6.27, y: 16), controlPoint2: CGPoint(x: 6.94, y: 15.8))
        icon.addCurve(to: CGPoint(x: 8.71, y: 15.49), controlPoint1: CGPoint(x: 8.16, y: 15.69), controlPoint2: CGPoint(x: 8.41, y: 15.64))
        icon.addCurve(to: CGPoint(x: 9.23, y: 14.9), controlPoint1: CGPoint(x: 9.04, y: 15.32), controlPoint2: CGPoint(x: 9.19, y: 15.06))
        icon.addCurve(to: CGPoint(x: 9.23, y: 13.83), controlPoint1: CGPoint(x: 9.23, y: 14.55), controlPoint2: CGPoint(x: 9.23, y: 13.83))
        icon.addCurve(to: CGPoint(x: 9.16, y: 13.74), controlPoint1: CGPoint(x: 9.23, y: 13.77), controlPoint2: CGPoint(x: 9.21, y: 13.8))
        icon.addCurve(to: CGPoint(x: 8.61, y: 12.88), controlPoint1: CGPoint(x: 9.15, y: 13.73), controlPoint2: CGPoint(x: 8.85, y: 13.45))
        icon.addCurve(to: CGPoint(x: 8.35, y: 11.89), controlPoint1: CGPoint(x: 8.5, y: 12.62), controlPoint2: CGPoint(x: 8.4, y: 12.29))
        icon.addCurve(to: CGPoint(x: 8.28, y: 11.8), controlPoint1: CGPoint(x: 8.34, y: 11.86), controlPoint2: CGPoint(x: 8.31, y: 11.81))
        icon.addCurve(to: CGPoint(x: 7.92, y: 11.52), controlPoint1: CGPoint(x: 8.12, y: 11.75), controlPoint2: CGPoint(x: 8.01, y: 11.65))
        icon.addCurve(to: CGPoint(x: 7.68, y: 10.75), controlPoint1: CGPoint(x: 7.77, y: 11.28), controlPoint2: CGPoint(x: 7.71, y: 11.02))
        icon.addCurve(to: CGPoint(x: 7.94, y: 10), controlPoint1: CGPoint(x: 7.65, y: 10.46), controlPoint2: CGPoint(x: 7.71, y: 10.2))
        icon.addCurve(to: CGPoint(x: 7.95, y: 9.9), controlPoint1: CGPoint(x: 7.96, y: 9.98), controlPoint2: CGPoint(x: 7.96, y: 9.93))
        icon.addCurve(to: CGPoint(x: 7.74, y: 8.79), controlPoint1: CGPoint(x: 7.88, y: 9.53), controlPoint2: CGPoint(x: 7.8, y: 9.16))
        icon.addCurve(to: CGPoint(x: 7.75, y: 6.96), controlPoint1: CGPoint(x: 7.65, y: 8.18), controlPoint2: CGPoint(x: 7.63, y: 7.57))
        icon.addCurve(to: CGPoint(x: 9.09, y: 5.08), controlPoint1: CGPoint(x: 7.91, y: 6.13), controlPoint2: CGPoint(x: 8.31, y: 5.46))
        icon.addCurve(to: CGPoint(x: 10.87, y: 4.66), controlPoint1: CGPoint(x: 9.66, y: 4.8), controlPoint2: CGPoint(x: 10.26, y: 4.66))
        icon.addCurve(to: CGPoint(x: 11.79, y: 4.76), controlPoint1: CGPoint(x: 11.18, y: 4.66), controlPoint2: CGPoint(x: 11.48, y: 4.7))
        icon.addCurve(to: CGPoint(x: 12.61, y: 5.21), controlPoint1: CGPoint(x: 12.11, y: 4.82), controlPoint2: CGPoint(x: 12.4, y: 4.95))
        icon.addCurve(to: CGPoint(x: 12.84, y: 5.35), controlPoint1: CGPoint(x: 12.67, y: 5.29), controlPoint2: CGPoint(x: 12.73, y: 5.33))
        icon.addCurve(to: CGPoint(x: 14.2, y: 6.48), controlPoint1: CGPoint(x: 13.5, y: 5.48), controlPoint2: CGPoint(x: 13.96, y: 5.85))
        icon.addCurve(to: CGPoint(x: 14.41, y: 7.62), controlPoint1: CGPoint(x: 14.35, y: 6.85), controlPoint2: CGPoint(x: 14.4, y: 7.23))
        icon.addCurve(to: CGPoint(x: 14.05, y: 9.89), controlPoint1: CGPoint(x: 14.42, y: 8.4), controlPoint2: CGPoint(x: 14.28, y: 9.15))
        icon.addCurve(to: CGPoint(x: 14.09, y: 10.03), controlPoint1: CGPoint(x: 14.03, y: 9.95), controlPoint2: CGPoint(x: 14.03, y: 9.99))
        icon.addCurve(to: CGPoint(x: 14.3, y: 10.38), controlPoint1: CGPoint(x: 14.2, y: 10.12), controlPoint2: CGPoint(x: 14.27, y: 10.24))
        icon.addCurve(to: CGPoint(x: 14.04, y: 11.57), controlPoint1: CGPoint(x: 14.37, y: 10.81), controlPoint2: CGPoint(x: 14.28, y: 11.21))
        icon.addCurve(to: CGPoint(x: 13.72, y: 11.8), controlPoint1: CGPoint(x: 13.96, y: 11.69), controlPoint2: CGPoint(x: 13.86, y: 11.77))
        icon.addCurve(to: CGPoint(x: 13.65, y: 11.88), controlPoint1: CGPoint(x: 13.69, y: 11.81), controlPoint2: CGPoint(x: 13.66, y: 11.85))
        icon.addCurve(to: CGPoint(x: 13.4, y: 12.74), controlPoint1: CGPoint(x: 13.57, y: 12.17), controlPoint2: CGPoint(x: 13.51, y: 12.46))
        icon.addCurve(to: CGPoint(x: 12.84, y: 13.77), controlPoint1: CGPoint(x: 13.28, y: 13.07), controlPoint2: CGPoint(x: 13.12, y: 13.53))
        icon.addCurve(to: CGPoint(x: 12.82, y: 13.83), controlPoint1: CGPoint(x: 12.82, y: 13.78), controlPoint2: CGPoint(x: 12.82, y: 13.8))
        icon.addCurve(to: CGPoint(x: 12.82, y: 14.9), controlPoint1: CGPoint(x: 12.82, y: 14.17), controlPoint2: CGPoint(x: 12.82, y: 14.55))
        icon.addCurve(to: CGPoint(x: 13.34, y: 15.49), controlPoint1: CGPoint(x: 12.86, y: 15.06), controlPoint2: CGPoint(x: 13.01, y: 15.32))
        icon.addCurve(to: CGPoint(x: 14.14, y: 15.7), controlPoint1: CGPoint(x: 13.64, y: 15.64), controlPoint2: CGPoint(x: 13.89, y: 15.69))
        icon.addCurve(to: CGPoint(x: 16.15, y: 16.3), controlPoint1: CGPoint(x: 15.11, y: 15.8), controlPoint2: CGPoint(x: 15.78, y: 16))
        icon.addCurve(to: CGPoint(x: 17.21, y: 18.2), controlPoint1: CGPoint(x: 16.69, y: 16.74), controlPoint2: CGPoint(x: 17.04, y: 17.37))
        icon.addLine(to: CGPoint(x: 17.22, y: 18.31))
        icon.addCurve(to: CGPoint(x: 20.6, y: 11), controlPoint1: CGPoint(x: 19.29, y: 16.55), controlPoint2: CGPoint(x: 20.6, y: 13.93))
        icon.addCurve(to: CGPoint(x: 11, y: 1.4), controlPoint1: CGPoint(x: 20.6, y: 5.7), controlPoint2: CGPoint(x: 16.3, y: 1.4))
        icon.addCurve(to: CGPoint(x: 1.4, y: 11), controlPoint1: CGPoint(x: 5.7, y: 1.4), controlPoint2: CGPoint(x: 1.4, y: 5.7))
        icon.addCurve(to: CGPoint(x: 4.83, y: 18.35), controlPoint1: CGPoint(x: 1.4, y: 13.95), controlPoint2: CGPoint(x: 2.73, y: 16.59))
        icon.close()
        icon.move(to: CGPoint(x: 11, y: 22))
        icon.addCurve(to: CGPoint(x: 0, y: 11), controlPoint1: CGPoint(x: 4.92, y: 22), controlPoint2: CGPoint(x: 0, y: 17.08))
        icon.addCurve(to: CGPoint(x: 11, y: 0), controlPoint1: CGPoint(x: 0, y: 4.92), controlPoint2: CGPoint(x: 4.92, y: 0))
        icon.addCurve(to: CGPoint(x: 22, y: 11), controlPoint1: CGPoint(x: 17.08, y: 0), controlPoint2: CGPoint(x: 22, y: 4.92))
        icon.addCurve(to: CGPoint(x: 11, y: 22), controlPoint1: CGPoint(x: 22, y: 17.08), controlPoint2: CGPoint(x: 17.08, y: 22))
        icon.close()
        context.saveGState()
        context.translateBy(x: 4, y: 4)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4, y: 4))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsNavToolbarRecents(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 11, y: 1.5))
        icon.addCurve(to: CGPoint(x: 1.5, y: 11), controlPoint1: CGPoint(x: 5.75, y: 1.5), controlPoint2: CGPoint(x: 1.5, y: 5.75))
        icon.addCurve(to: CGPoint(x: 11, y: 20.5), controlPoint1: CGPoint(x: 1.5, y: 16.25), controlPoint2: CGPoint(x: 5.75, y: 20.5))
        icon.addCurve(to: CGPoint(x: 20.5, y: 11), controlPoint1: CGPoint(x: 16.25, y: 20.5), controlPoint2: CGPoint(x: 20.5, y: 16.25))
        icon.addCurve(to: CGPoint(x: 11, y: 1.5), controlPoint1: CGPoint(x: 20.5, y: 5.75), controlPoint2: CGPoint(x: 16.25, y: 1.5))
        icon.close()
        icon.move(to: CGPoint(x: 11, y: 0))
        icon.addCurve(to: CGPoint(x: 22, y: 11), controlPoint1: CGPoint(x: 17.07, y: 0), controlPoint2: CGPoint(x: 22, y: 4.93))
        icon.addCurve(to: CGPoint(x: 11, y: 22), controlPoint1: CGPoint(x: 22, y: 17.07), controlPoint2: CGPoint(x: 17.07, y: 22))
        icon.addCurve(to: CGPoint(x: 0, y: 11), controlPoint1: CGPoint(x: 4.92, y: 22), controlPoint2: CGPoint(x: 0, y: 17.07))
        icon.addCurve(to: CGPoint(x: 11, y: 0), controlPoint1: CGPoint(x: 0, y: 4.93), controlPoint2: CGPoint(x: 4.92, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 10.57, y: 4.39))
        icon.addLine(to: CGPoint(x: 10.57, y: 11.37))
        icon.addLine(to: CGPoint(x: 6.09, y: 11.37))
        icon.addCurve(to: CGPoint(x: 5.25, y: 12.21), controlPoint1: CGPoint(x: 5.62, y: 11.37), controlPoint2: CGPoint(x: 5.25, y: 11.74))
        icon.addCurve(to: CGPoint(x: 6.09, y: 13.04), controlPoint1: CGPoint(x: 5.25, y: 12.67), controlPoint2: CGPoint(x: 5.62, y: 13.04))
        icon.addLine(to: CGPoint(x: 12.25, y: 13.04))
        icon.addLine(to: CGPoint(x: 12.25, y: 4.39))
        icon.addCurve(to: CGPoint(x: 11.41, y: 3.55), controlPoint1: CGPoint(x: 12.25, y: 3.93), controlPoint2: CGPoint(x: 11.88, y: 3.55))
        icon.addCurve(to: CGPoint(x: 10.57, y: 4.39), controlPoint1: CGPoint(x: 10.95, y: 3.55), controlPoint2: CGPoint(x: 10.57, y: 3.93))
        icon.close()
        context.saveGState()
        context.translateBy(x: 4, y: 4)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4, y: 4))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsNavToolbarQuestion(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 11, y: 20.5))
        icon.addCurve(to: CGPoint(x: 20.5, y: 11), controlPoint1: CGPoint(x: 16.25, y: 20.5), controlPoint2: CGPoint(x: 20.5, y: 16.25))
        icon.addCurve(to: CGPoint(x: 11, y: 1.5), controlPoint1: CGPoint(x: 20.5, y: 5.75), controlPoint2: CGPoint(x: 16.25, y: 1.5))
        icon.addCurve(to: CGPoint(x: 1.5, y: 11), controlPoint1: CGPoint(x: 5.75, y: 1.5), controlPoint2: CGPoint(x: 1.5, y: 5.75))
        icon.addCurve(to: CGPoint(x: 11, y: 20.5), controlPoint1: CGPoint(x: 1.5, y: 16.25), controlPoint2: CGPoint(x: 5.75, y: 20.5))
        icon.close()
        icon.move(to: CGPoint(x: 11, y: 22))
        icon.addCurve(to: CGPoint(x: 0, y: 11), controlPoint1: CGPoint(x: 4.92, y: 22), controlPoint2: CGPoint(x: 0, y: 17.08))
        icon.addCurve(to: CGPoint(x: 11, y: 0), controlPoint1: CGPoint(x: 0, y: 4.92), controlPoint2: CGPoint(x: 4.92, y: 0))
        icon.addCurve(to: CGPoint(x: 22, y: 11), controlPoint1: CGPoint(x: 17.08, y: 0), controlPoint2: CGPoint(x: 22, y: 4.92))
        icon.addCurve(to: CGPoint(x: 11, y: 22), controlPoint1: CGPoint(x: 22, y: 17.08), controlPoint2: CGPoint(x: 17.08, y: 22))
        icon.close()
        icon.move(to: CGPoint(x: 7.28, y: 8.26))
        icon.addLine(to: CGPoint(x: 8.97, y: 8.26))
        icon.addCurve(to: CGPoint(x: 10.9, y: 6.5), controlPoint1: CGPoint(x: 9.04, y: 7.18), controlPoint2: CGPoint(x: 9.77, y: 6.5))
        icon.addCurve(to: CGPoint(x: 12.74, y: 8.1), controlPoint1: CGPoint(x: 12.02, y: 6.5), controlPoint2: CGPoint(x: 12.74, y: 7.18))
        icon.addCurve(to: CGPoint(x: 11.4, y: 10.01), controlPoint1: CGPoint(x: 12.74, y: 8.94), controlPoint2: CGPoint(x: 12.39, y: 9.42))
        icon.addCurve(to: CGPoint(x: 9.83, y: 12.57), controlPoint1: CGPoint(x: 10.28, y: 10.68), controlPoint2: CGPoint(x: 9.79, y: 11.42))
        icon.addLine(to: CGPoint(x: 9.84, y: 13.22))
        icon.addLine(to: CGPoint(x: 11.53, y: 13.22))
        icon.addLine(to: CGPoint(x: 11.53, y: 12.72))
        icon.addCurve(to: CGPoint(x: 12.88, y: 10.83), controlPoint1: CGPoint(x: 11.53, y: 11.88), controlPoint2: CGPoint(x: 11.83, y: 11.45))
        icon.addCurve(to: CGPoint(x: 14.59, y: 8.03), controlPoint1: CGPoint(x: 13.96, y: 10.18), controlPoint2: CGPoint(x: 14.59, y: 9.29))
        icon.addCurve(to: CGPoint(x: 10.99, y: 5), controlPoint1: CGPoint(x: 14.59, y: 6.28), controlPoint2: CGPoint(x: 13.14, y: 5))
        icon.addCurve(to: CGPoint(x: 7.28, y: 8.26), controlPoint1: CGPoint(x: 8.62, y: 5), controlPoint2: CGPoint(x: 7.35, y: 6.4))
        icon.close()
        icon.move(to: CGPoint(x: 10.69, y: 17))
        icon.addCurve(to: CGPoint(x: 11.77, y: 15.95), controlPoint1: CGPoint(x: 11.3, y: 17), controlPoint2: CGPoint(x: 11.77, y: 16.54))
        icon.addCurve(to: CGPoint(x: 10.69, y: 14.89), controlPoint1: CGPoint(x: 11.77, y: 15.35), controlPoint2: CGPoint(x: 11.3, y: 14.89))
        icon.addCurve(to: CGPoint(x: 9.62, y: 15.95), controlPoint1: CGPoint(x: 10.1, y: 14.89), controlPoint2: CGPoint(x: 9.62, y: 15.35))
        icon.addCurve(to: CGPoint(x: 10.69, y: 17), controlPoint1: CGPoint(x: 9.62, y: 16.54), controlPoint2: CGPoint(x: 10.1, y: 17))
        icon.close()
        context.saveGState()
        context.translateBy(x: 4, y: 4)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4, y: 4))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsNavToolbarInfo(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 11, y: 22))
        icon.addCurve(to: CGPoint(x: 0, y: 11), controlPoint1: CGPoint(x: 4.92, y: 22), controlPoint2: CGPoint(x: 0, y: 17.08))
        icon.addCurve(to: CGPoint(x: 11, y: 0), controlPoint1: CGPoint(x: 0, y: 4.92), controlPoint2: CGPoint(x: 4.92, y: 0))
        icon.addCurve(to: CGPoint(x: 22, y: 11), controlPoint1: CGPoint(x: 17.08, y: 0), controlPoint2: CGPoint(x: 22, y: 4.92))
        icon.addCurve(to: CGPoint(x: 11, y: 22), controlPoint1: CGPoint(x: 22, y: 17.08), controlPoint2: CGPoint(x: 17.08, y: 22))
        icon.close()
        icon.move(to: CGPoint(x: 11, y: 20.5))
        icon.addCurve(to: CGPoint(x: 20.5, y: 11), controlPoint1: CGPoint(x: 16.25, y: 20.5), controlPoint2: CGPoint(x: 20.5, y: 16.25))
        icon.addCurve(to: CGPoint(x: 11, y: 1.5), controlPoint1: CGPoint(x: 20.5, y: 5.75), controlPoint2: CGPoint(x: 16.25, y: 1.5))
        icon.addCurve(to: CGPoint(x: 1.5, y: 11), controlPoint1: CGPoint(x: 5.75, y: 1.5), controlPoint2: CGPoint(x: 1.5, y: 5.75))
        icon.addCurve(to: CGPoint(x: 11, y: 20.5), controlPoint1: CGPoint(x: 1.5, y: 16.25), controlPoint2: CGPoint(x: 5.75, y: 20.5))
        icon.close()
        icon.move(to: CGPoint(x: 10.77, y: 6.8))
        icon.addCurve(to: CGPoint(x: 9.62, y: 5.65), controlPoint1: CGPoint(x: 10.13, y: 6.8), controlPoint2: CGPoint(x: 9.62, y: 6.29))
        icon.addCurve(to: CGPoint(x: 10.77, y: 4.5), controlPoint1: CGPoint(x: 9.62, y: 5.01), controlPoint2: CGPoint(x: 10.13, y: 4.5))
        icon.addCurve(to: CGPoint(x: 11.92, y: 5.65), controlPoint1: CGPoint(x: 11.41, y: 4.5), controlPoint2: CGPoint(x: 11.92, y: 5.01))
        icon.addCurve(to: CGPoint(x: 10.77, y: 6.8), controlPoint1: CGPoint(x: 11.92, y: 6.29), controlPoint2: CGPoint(x: 11.41, y: 6.8))
        icon.close()
        icon.move(to: CGPoint(x: 9.16, y: 16))
        icon.addLine(to: CGPoint(x: 9.16, y: 15.54))
        icon.addLine(to: CGPoint(x: 10.08, y: 15.54))
        icon.addLine(to: CGPoint(x: 10.08, y: 8.64))
        icon.addLine(to: CGPoint(x: 9.16, y: 8.64))
        icon.addLine(to: CGPoint(x: 9.16, y: 8.18))
        icon.addLine(to: CGPoint(x: 10.08, y: 8.18))
        icon.addLine(to: CGPoint(x: 11.92, y: 8.18))
        icon.addLine(to: CGPoint(x: 11.92, y: 8.64))
        icon.addLine(to: CGPoint(x: 11.92, y: 15.54))
        icon.addLine(to: CGPoint(x: 12.84, y: 15.54))
        icon.addLine(to: CGPoint(x: 12.84, y: 16))
        icon.addLine(to: CGPoint(x: 9.16, y: 16))
        icon.close()
        context.saveGState()
        context.translateBy(x: 4, y: 4)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4, y: 4))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsNavToolbarRefresh(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 25.76, y: 8.88))
        icon.addCurve(to: CGPoint(x: 25.67, y: 9.94), controlPoint1: CGPoint(x: 26.03, y: 9.2), controlPoint2: CGPoint(x: 25.99, y: 9.67))
        icon.addLine(to: CGPoint(x: 21.49, y: 13.45))
        icon.addLine(to: CGPoint(x: 18.12, y: 9.15))
        icon.addCurve(to: CGPoint(x: 18.25, y: 8.09), controlPoint1: CGPoint(x: 17.87, y: 8.82), controlPoint2: CGPoint(x: 17.92, y: 8.35))
        icon.addCurve(to: CGPoint(x: 19.3, y: 8.22), controlPoint1: CGPoint(x: 18.58, y: 7.84), controlPoint2: CGPoint(x: 19.05, y: 7.9))
        icon.addLine(to: CGPoint(x: 21.06, y: 10.47))
        icon.addCurve(to: CGPoint(x: 21.09, y: 9.32), controlPoint1: CGPoint(x: 21.09, y: 10.08), controlPoint2: CGPoint(x: 21.11, y: 9.7))
        icon.addCurve(to: CGPoint(x: 12.42, y: 1.51), controlPoint1: CGPoint(x: 20.85, y: 4.78), controlPoint2: CGPoint(x: 16.96, y: 1.26))
        icon.addCurve(to: CGPoint(x: 6.63, y: 4.33), controlPoint1: CGPoint(x: 10.17, y: 1.63), controlPoint2: CGPoint(x: 8.11, y: 2.63))
        icon.addCurve(to: CGPoint(x: 5.57, y: 4.4), controlPoint1: CGPoint(x: 6.36, y: 4.64), controlPoint2: CGPoint(x: 5.88, y: 4.67))
        icon.addCurve(to: CGPoint(x: 5.5, y: 3.34), controlPoint1: CGPoint(x: 5.26, y: 4.13), controlPoint2: CGPoint(x: 5.23, y: 3.66))
        icon.addCurve(to: CGPoint(x: 12.34, y: 0.01), controlPoint1: CGPoint(x: 7.25, y: 1.34), controlPoint2: CGPoint(x: 9.68, y: 0.15))
        icon.addCurve(to: CGPoint(x: 22.58, y: 9.24), controlPoint1: CGPoint(x: 17.69, y: -0.26), controlPoint2: CGPoint(x: 22.3, y: 3.87))
        icon.addCurve(to: CGPoint(x: 22.55, y: 10.6), controlPoint1: CGPoint(x: 22.61, y: 9.69), controlPoint2: CGPoint(x: 22.59, y: 10.15))
        icon.addLine(to: CGPoint(x: 24.71, y: 8.79))
        icon.addCurve(to: CGPoint(x: 25.76, y: 8.88), controlPoint1: CGPoint(x: 25.03, y: 8.52), controlPoint2: CGPoint(x: 25.5, y: 8.57))
        icon.close()
        icon.move(to: CGPoint(x: 19.19, y: 16.17))
        icon.addCurve(to: CGPoint(x: 20.25, y: 16.09), controlPoint1: CGPoint(x: 19.46, y: 15.85), controlPoint2: CGPoint(x: 19.93, y: 15.82))
        icon.addCurve(to: CGPoint(x: 20.32, y: 17.15), controlPoint1: CGPoint(x: 20.56, y: 16.37), controlPoint2: CGPoint(x: 20.59, y: 16.84))
        icon.addCurve(to: CGPoint(x: 13.48, y: 20.48), controlPoint1: CGPoint(x: 18.57, y: 19.16), controlPoint2: CGPoint(x: 16.14, y: 20.34))
        icon.addCurve(to: CGPoint(x: 12.96, y: 20.49), controlPoint1: CGPoint(x: 13.31, y: 20.49), controlPoint2: CGPoint(x: 13.13, y: 20.49))
        icon.addCurve(to: CGPoint(x: 3.23, y: 11.25), controlPoint1: CGPoint(x: 7.82, y: 20.49), controlPoint2: CGPoint(x: 3.5, y: 16.45))
        icon.addCurve(to: CGPoint(x: 3.25, y: 9.99), controlPoint1: CGPoint(x: 3.21, y: 10.83), controlPoint2: CGPoint(x: 3.22, y: 10.41))
        icon.addLine(to: CGPoint(x: 1.27, y: 11.9))
        icon.addCurve(to: CGPoint(x: 0.21, y: 11.88), controlPoint1: CGPoint(x: 0.97, y: 12.19), controlPoint2: CGPoint(x: 0.5, y: 12.18))
        icon.addCurve(to: CGPoint(x: 0.23, y: 10.82), controlPoint1: CGPoint(x: -0.08, y: 11.59), controlPoint2: CGPoint(x: -0.07, y: 11.11))
        icon.addLine(to: CGPoint(x: 4.16, y: 7.03))
        icon.addLine(to: CGPoint(x: 7.82, y: 11.09))
        icon.addCurve(to: CGPoint(x: 7.76, y: 12.15), controlPoint1: CGPoint(x: 8.09, y: 11.4), controlPoint2: CGPoint(x: 8.07, y: 11.87))
        icon.addCurve(to: CGPoint(x: 7.26, y: 12.34), controlPoint1: CGPoint(x: 7.62, y: 12.28), controlPoint2: CGPoint(x: 7.44, y: 12.34))
        icon.addCurve(to: CGPoint(x: 6.7, y: 12.09), controlPoint1: CGPoint(x: 7.06, y: 12.34), controlPoint2: CGPoint(x: 6.85, y: 12.26))
        icon.addLine(to: CGPoint(x: 4.77, y: 9.95))
        icon.addCurve(to: CGPoint(x: 4.73, y: 11.18), controlPoint1: CGPoint(x: 4.73, y: 10.36), controlPoint2: CGPoint(x: 4.71, y: 10.77))
        icon.addCurve(to: CGPoint(x: 13.4, y: 18.98), controlPoint1: CGPoint(x: 4.97, y: 15.72), controlPoint2: CGPoint(x: 8.86, y: 19.22))
        icon.addCurve(to: CGPoint(x: 19.19, y: 16.17), controlPoint1: CGPoint(x: 15.65, y: 18.87), controlPoint2: CGPoint(x: 17.71, y: 17.86))
        icon.close()
        context.saveGState()
        context.translateBy(x: 2, y: 5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 2, y: 5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsNavToolbarBookmark(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 11.5, y: 17.07))
        icon.addLine(to: CGPoint(x: 11.5, y: 2.9))
        icon.addCurve(to: CGPoint(x: 10, y: 1.45), controlPoint1: CGPoint(x: 11.5, y: 2.1), controlPoint2: CGPoint(x: 10.83, y: 1.45))
        icon.addLine(to: CGPoint(x: 3, y: 1.45))
        icon.addCurve(to: CGPoint(x: 1.5, y: 2.9), controlPoint1: CGPoint(x: 2.17, y: 1.45), controlPoint2: CGPoint(x: 1.5, y: 2.1))
        icon.addLine(to: CGPoint(x: 1.5, y: 17.07))
        icon.addLine(to: CGPoint(x: 6.49, y: 12.92))
        icon.addLine(to: CGPoint(x: 11.5, y: 17.07))
        icon.close()
        icon.move(to: CGPoint(x: 3, y: 0))
        icon.addLine(to: CGPoint(x: 10, y: 0))
        icon.addCurve(to: CGPoint(x: 13, y: 2.9), controlPoint1: CGPoint(x: 11.66, y: 0), controlPoint2: CGPoint(x: 13, y: 1.3))
        icon.addLine(to: CGPoint(x: 13, y: 19.81))
        icon.addCurve(to: CGPoint(x: 12.8, y: 20), controlPoint1: CGPoint(x: 13, y: 19.91), controlPoint2: CGPoint(x: 12.91, y: 20))
        icon.addCurve(to: CGPoint(x: 12.67, y: 19.95), controlPoint1: CGPoint(x: 12.75, y: 20), controlPoint2: CGPoint(x: 12.71, y: 19.98))
        icon.addLine(to: CGPoint(x: 6.49, y: 14.83))
        icon.addLine(to: CGPoint(x: 0.33, y: 19.95))
        icon.addCurve(to: CGPoint(x: 0.05, y: 19.93), controlPoint1: CGPoint(x: 0.25, y: 20.02), controlPoint2: CGPoint(x: 0.12, y: 20.01))
        icon.addCurve(to: CGPoint(x: 0, y: 19.81), controlPoint1: CGPoint(x: 0.02, y: 19.9), controlPoint2: CGPoint(x: 0, y: 19.85))
        icon.addLine(to: CGPoint(x: 0, y: 2.9))
        icon.addCurve(to: CGPoint(x: 3, y: 0), controlPoint1: CGPoint(x: 0, y: 1.3), controlPoint2: CGPoint(x: 1.34, y: 0))
        icon.close()
        context.saveGState()
        context.translateBy(x: 8.5, y: 5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 8.5, y: 5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsNavToolbarBook(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 11.75, y: 4.43))
        icon.addLine(to: CGPoint(x: 11.75, y: 20.05))
        icon.addCurve(to: CGPoint(x: 8.24, y: 18.73), controlPoint1: CGPoint(x: 10.87, y: 19.17), controlPoint2: CGPoint(x: 9.7, y: 18.73))
        icon.addCurve(to: CGPoint(x: 1.51, y: 20.88), controlPoint1: CGPoint(x: 5.79, y: 18.73), controlPoint2: CGPoint(x: 3.1, y: 19.99))
        icon.addLine(to: CGPoint(x: 1.51, y: 4.24))
        icon.addCurve(to: CGPoint(x: 6.47, y: 1.52), controlPoint1: CGPoint(x: 1.51, y: 2.84), controlPoint2: CGPoint(x: 3.92, y: 1.52))
        icon.addCurve(to: CGPoint(x: 11.75, y: 4.43), controlPoint1: CGPoint(x: 8.81, y: 1.52), controlPoint2: CGPoint(x: 10.73, y: 2.58))
        icon.close()
        icon.move(to: CGPoint(x: 23.49, y: 20.88))
        icon.addCurve(to: CGPoint(x: 16.76, y: 18.73), controlPoint1: CGPoint(x: 21.9, y: 19.99), controlPoint2: CGPoint(x: 19.21, y: 18.73))
        icon.addCurve(to: CGPoint(x: 13.26, y: 20.05), controlPoint1: CGPoint(x: 15.3, y: 18.73), controlPoint2: CGPoint(x: 14.13, y: 19.17))
        icon.addLine(to: CGPoint(x: 13.26, y: 4.43))
        icon.addCurve(to: CGPoint(x: 18.54, y: 1.52), controlPoint1: CGPoint(x: 14.28, y: 2.58), controlPoint2: CGPoint(x: 16.2, y: 1.52))
        icon.addCurve(to: CGPoint(x: 23.49, y: 4.24), controlPoint1: CGPoint(x: 21.08, y: 1.52), controlPoint2: CGPoint(x: 23.49, y: 2.84))
        icon.addLine(to: CGPoint(x: 23.49, y: 20.88))
        icon.close()
        icon.move(to: CGPoint(x: 22.9, y: 1.14))
        icon.addCurve(to: CGPoint(x: 18.54, y: 0), controlPoint1: CGPoint(x: 21.68, y: 0.41), controlPoint2: CGPoint(x: 20.09, y: 0))
        icon.addCurve(to: CGPoint(x: 12.5, y: 2.83), controlPoint1: CGPoint(x: 16.01, y: 0), controlPoint2: CGPoint(x: 13.88, y: 1))
        icon.addCurve(to: CGPoint(x: 6.46, y: 0), controlPoint1: CGPoint(x: 11.12, y: 1), controlPoint2: CGPoint(x: 8.99, y: 0))
        icon.addCurve(to: CGPoint(x: 0, y: 4.24), controlPoint1: CGPoint(x: 3.34, y: 0), controlPoint2: CGPoint(x: 0, y: 1.7))
        icon.addLine(to: CGPoint(x: 0, y: 22.22))
        icon.addCurve(to: CGPoint(x: 0.4, y: 22.88), controlPoint1: CGPoint(x: 0, y: 22.49), controlPoint2: CGPoint(x: 0.15, y: 22.75))
        icon.addCurve(to: CGPoint(x: 1.17, y: 22.85), controlPoint1: CGPoint(x: 0.65, y: 23.02), controlPoint2: CGPoint(x: 0.94, y: 23))
        icon.addCurve(to: CGPoint(x: 8.24, y: 20.25), controlPoint1: CGPoint(x: 1.34, y: 22.74), controlPoint2: CGPoint(x: 5.19, y: 20.25))
        icon.addCurve(to: CGPoint(x: 11.76, y: 23.39), controlPoint1: CGPoint(x: 10.2, y: 20.25), controlPoint2: CGPoint(x: 11.32, y: 21.25))
        icon.addLine(to: CGPoint(x: 11.78, y: 23.45))
        icon.addCurve(to: CGPoint(x: 11.83, y: 23.58), controlPoint1: CGPoint(x: 11.79, y: 23.49), controlPoint2: CGPoint(x: 11.81, y: 23.53))
        icon.addCurve(to: CGPoint(x: 11.9, y: 23.69), controlPoint1: CGPoint(x: 11.85, y: 23.62), controlPoint2: CGPoint(x: 11.88, y: 23.66))
        icon.addCurve(to: CGPoint(x: 11.98, y: 23.79), controlPoint1: CGPoint(x: 11.93, y: 23.73), controlPoint2: CGPoint(x: 11.95, y: 23.76))
        icon.addCurve(to: CGPoint(x: 12.09, y: 23.87), controlPoint1: CGPoint(x: 12.02, y: 23.82), controlPoint2: CGPoint(x: 12.05, y: 23.85))
        icon.addCurve(to: CGPoint(x: 12.2, y: 23.93), controlPoint1: CGPoint(x: 12.13, y: 23.9), controlPoint2: CGPoint(x: 12.16, y: 23.92))
        icon.addCurve(to: CGPoint(x: 12.33, y: 23.97), controlPoint1: CGPoint(x: 12.25, y: 23.95), controlPoint2: CGPoint(x: 12.3, y: 23.97))
        icon.addLine(to: CGPoint(x: 12.5, y: 24))
        icon.addLine(to: CGPoint(x: 12.58, y: 24))
        icon.addCurve(to: CGPoint(x: 12.67, y: 23.97), controlPoint1: CGPoint(x: 12.62, y: 23.99), controlPoint2: CGPoint(x: 12.65, y: 23.98))
        icon.addCurve(to: CGPoint(x: 12.8, y: 23.93), controlPoint1: CGPoint(x: 12.71, y: 23.97), controlPoint2: CGPoint(x: 12.76, y: 23.95))
        icon.addCurve(to: CGPoint(x: 12.91, y: 23.87), controlPoint1: CGPoint(x: 12.84, y: 23.92), controlPoint2: CGPoint(x: 12.87, y: 23.9))
        icon.addCurve(to: CGPoint(x: 13.02, y: 23.79), controlPoint1: CGPoint(x: 12.95, y: 23.85), controlPoint2: CGPoint(x: 12.98, y: 23.82))
        icon.addCurve(to: CGPoint(x: 13.09, y: 23.7), controlPoint1: CGPoint(x: 13.05, y: 23.76), controlPoint2: CGPoint(x: 13.07, y: 23.73))
        icon.addCurve(to: CGPoint(x: 13.17, y: 23.57), controlPoint1: CGPoint(x: 13.12, y: 23.66), controlPoint2: CGPoint(x: 13.15, y: 23.62))
        icon.addCurve(to: CGPoint(x: 13.21, y: 23.48), controlPoint1: CGPoint(x: 13.19, y: 23.53), controlPoint2: CGPoint(x: 13.21, y: 23.49))
        icon.addLine(to: CGPoint(x: 13.24, y: 23.39))
        icon.addCurve(to: CGPoint(x: 16.76, y: 20.25), controlPoint1: CGPoint(x: 13.68, y: 21.25), controlPoint2: CGPoint(x: 14.8, y: 20.25))
        icon.addCurve(to: CGPoint(x: 23.83, y: 22.85), controlPoint1: CGPoint(x: 19.88, y: 20.25), controlPoint2: CGPoint(x: 23.79, y: 22.82))
        icon.addCurve(to: CGPoint(x: 24.6, y: 22.88), controlPoint1: CGPoint(x: 24.06, y: 23), controlPoint2: CGPoint(x: 24.35, y: 23.02))
        icon.addCurve(to: CGPoint(x: 25, y: 22.22), controlPoint1: CGPoint(x: 24.85, y: 22.75), controlPoint2: CGPoint(x: 25, y: 22.49))
        icon.addLine(to: CGPoint(x: 25, y: 4.24))
        icon.addCurve(to: CGPoint(x: 22.9, y: 1.14), controlPoint1: CGPoint(x: 25, y: 3.05), controlPoint2: CGPoint(x: 24.25, y: 1.94))
        icon.close()
        context.saveGState()
        context.translateBy(x: 2.5, y: 3)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 2.5, y: 3))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsNavToolbarChat(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 4.14, y: 18.91))
        icon.addLine(to: CGPoint(x: 8.06, y: 17.81))
        icon.addLine(to: CGPoint(x: 8.27, y: 17.87))
        icon.addCurve(to: CGPoint(x: 12.15, y: 18.45), controlPoint1: CGPoint(x: 9.5, y: 18.25), controlPoint2: CGPoint(x: 10.8, y: 18.45))
        icon.addCurve(to: CGPoint(x: 22.8, y: 9.98), controlPoint1: CGPoint(x: 18.06, y: 18.45), controlPoint2: CGPoint(x: 22.8, y: 14.62))
        icon.addCurve(to: CGPoint(x: 12.15, y: 1.5), controlPoint1: CGPoint(x: 22.8, y: 5.33), controlPoint2: CGPoint(x: 18.06, y: 1.5))
        icon.addCurve(to: CGPoint(x: 1.5, y: 9.98), controlPoint1: CGPoint(x: 6.24, y: 1.5), controlPoint2: CGPoint(x: 1.5, y: 5.33))
        icon.addCurve(to: CGPoint(x: 4.81, y: 16.11), controlPoint1: CGPoint(x: 1.5, y: 12.31), controlPoint2: CGPoint(x: 2.7, y: 14.51))
        icon.addLine(to: CGPoint(x: 5.29, y: 16.48))
        icon.addLine(to: CGPoint(x: 4.14, y: 18.91))
        icon.close()
        icon.move(to: CGPoint(x: 1.36, y: 21.24))
        icon.addLine(to: CGPoint(x: 3.42, y: 16.92))
        icon.addCurve(to: CGPoint(x: 0, y: 9.98), controlPoint1: CGPoint(x: 1.25, y: 15.08), controlPoint2: CGPoint(x: 0, y: 12.62))
        icon.addCurve(to: CGPoint(x: 12.15, y: 0), controlPoint1: CGPoint(x: 0, y: 4.43), controlPoint2: CGPoint(x: 5.47, y: 0))
        icon.addCurve(to: CGPoint(x: 24.3, y: 9.98), controlPoint1: CGPoint(x: 18.83, y: 0), controlPoint2: CGPoint(x: 24.3, y: 4.43))
        icon.addCurve(to: CGPoint(x: 12.15, y: 19.95), controlPoint1: CGPoint(x: 24.3, y: 15.53), controlPoint2: CGPoint(x: 18.83, y: 19.95))
        icon.addCurve(to: CGPoint(x: 8.04, y: 19.37), controlPoint1: CGPoint(x: 10.73, y: 19.95), controlPoint2: CGPoint(x: 9.35, y: 19.75))
        icon.addLine(to: CGPoint(x: 1.36, y: 21.24))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3, y: 4.25)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3, y: 4.25))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsNavToolbarLocate(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 13.96, y: 8.6))
        icon.addLine(to: CGPoint(x: 13.96, y: 15.93))
        icon.addLine(to: CGPoint(x: 19.2, y: 2.93))
        icon.addLine(to: CGPoint(x: 6.86, y: 8.6))
        icon.addLine(to: CGPoint(x: 13.96, y: 8.6))
        icon.close()
        icon.move(to: CGPoint(x: 12.46, y: 10.1))
        icon.addLine(to: CGPoint(x: 0, y: 10.1))
        icon.addLine(to: CGPoint(x: 22, y: 0))
        icon.addLine(to: CGPoint(x: 12.46, y: 23.63))
        icon.addLine(to: CGPoint(x: 12.46, y: 10.1))
        icon.close()
        context.saveGState()
        context.translateBy(x: 4, y: 3.5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4, y: 3.5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsNavToolbarReply(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 13.52, y: 11.33))
        icon.addCurve(to: CGPoint(x: 22.49, y: 16.72), controlPoint1: CGPoint(x: 17.21, y: 11.33), controlPoint2: CGPoint(x: 20.59, y: 13.38))
        icon.addCurve(to: CGPoint(x: 12.58, y: 7.38), controlPoint1: CGPoint(x: 22.27, y: 11.54), controlPoint2: CGPoint(x: 17.91, y: 7.38))
        icon.addLine(to: CGPoint(x: 11.41, y: 7.38))
        icon.addLine(to: CGPoint(x: 11.41, y: 3.01))
        icon.addLine(to: CGPoint(x: 2.5, y: 9.73))
        icon.addLine(to: CGPoint(x: 11.41, y: 16.37))
        icon.addLine(to: CGPoint(x: 11.41, y: 11.36))
        icon.addLine(to: CGPoint(x: 12.15, y: 11.35))
        icon.addCurve(to: CGPoint(x: 13.52, y: 11.33), controlPoint1: CGPoint(x: 12.15, y: 11.35), controlPoint2: CGPoint(x: 13.01, y: 11.33))
        icon.move(to: CGPoint(x: 22.93, y: 21.78))
        icon.addCurve(to: CGPoint(x: 22.21, y: 19.56), controlPoint1: CGPoint(x: 22.93, y: 21.78), controlPoint2: CGPoint(x: 22.6, y: 20.6))
        icon.addCurve(to: CGPoint(x: 21.51, y: 17.98), controlPoint1: CGPoint(x: 21.93, y: 18.84), controlPoint2: CGPoint(x: 21.61, y: 18.18))
        icon.addCurve(to: CGPoint(x: 13.52, y: 12.83), controlPoint1: CGPoint(x: 19.94, y: 14.79), controlPoint2: CGPoint(x: 16.86, y: 12.83))
        icon.addCurve(to: CGPoint(x: 12.91, y: 12.84), controlPoint1: CGPoint(x: 13.34, y: 12.83), controlPoint2: CGPoint(x: 13.12, y: 12.83))
        icon.addLine(to: CGPoint(x: 12.91, y: 19.36))
        icon.addLine(to: CGPoint(x: 0, y: 9.74))
        icon.addLine(to: CGPoint(x: 12.91, y: 0))
        icon.addLine(to: CGPoint(x: 12.91, y: 5.89))
        icon.addCurve(to: CGPoint(x: 24, y: 17.14), controlPoint1: CGPoint(x: 19.05, y: 6.06), controlPoint2: CGPoint(x: 24, y: 11.04))
        icon.addCurve(to: CGPoint(x: 23.72, y: 19.67), controlPoint1: CGPoint(x: 24, y: 18.4), controlPoint2: CGPoint(x: 23.8, y: 19.35))
        icon.addCurve(to: CGPoint(x: 23.4, y: 20.66), controlPoint1: CGPoint(x: 23.65, y: 19.92), controlPoint2: CGPoint(x: 23.54, y: 20.3))
        icon.addCurve(to: CGPoint(x: 22.93, y: 21.78), controlPoint1: CGPoint(x: 23.18, y: 21.24), controlPoint2: CGPoint(x: 22.93, y: 21.78))
        context.saveGState()
        context.translateBy(x: 3, y: 4)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3, y: 4))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsNavToolbarCalendar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 19.61, y: 0))
        icon.addCurve(to: CGPoint(x: 22, y: 2.38), controlPoint1: CGPoint(x: 20.93, y: 0), controlPoint2: CGPoint(x: 22, y: 1.07))
        icon.addLine(to: CGPoint(x: 22, y: 17.62))
        icon.addCurve(to: CGPoint(x: 19.61, y: 20), controlPoint1: CGPoint(x: 22, y: 18.93), controlPoint2: CGPoint(x: 20.93, y: 20))
        icon.addLine(to: CGPoint(x: 2.39, y: 20))
        icon.addCurve(to: CGPoint(x: 0, y: 17.62), controlPoint1: CGPoint(x: 1.07, y: 20), controlPoint2: CGPoint(x: 0, y: 18.93))
        icon.addLine(to: CGPoint(x: 0, y: 2.38))
        icon.addCurve(to: CGPoint(x: 2.39, y: 0), controlPoint1: CGPoint(x: 0, y: 1.07), controlPoint2: CGPoint(x: 1.07, y: 0))
        icon.addLine(to: CGPoint(x: 19.61, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 20.57, y: 17.14))
        icon.addLine(to: CGPoint(x: 20.57, y: 6.19))
        icon.addLine(to: CGPoint(x: 1.43, y: 6.19))
        icon.addLine(to: CGPoint(x: 1.43, y: 17.14))
        icon.addCurve(to: CGPoint(x: 2.87, y: 18.57), controlPoint1: CGPoint(x: 1.43, y: 17.93), controlPoint2: CGPoint(x: 2.08, y: 18.57))
        icon.addLine(to: CGPoint(x: 19.13, y: 18.57))
        icon.addCurve(to: CGPoint(x: 20.57, y: 17.14), controlPoint1: CGPoint(x: 19.92, y: 18.57), controlPoint2: CGPoint(x: 20.57, y: 17.93))
        icon.close()
        icon.move(to: CGPoint(x: 7.33, y: 10.08))
        icon.addCurve(to: CGPoint(x: 6.42, y: 9.17), controlPoint1: CGPoint(x: 6.83, y: 10.08), controlPoint2: CGPoint(x: 6.42, y: 9.67))
        icon.addCurve(to: CGPoint(x: 7.33, y: 8.25), controlPoint1: CGPoint(x: 6.42, y: 8.66), controlPoint2: CGPoint(x: 6.83, y: 8.25))
        icon.addCurve(to: CGPoint(x: 8.25, y: 9.17), controlPoint1: CGPoint(x: 7.84, y: 8.25), controlPoint2: CGPoint(x: 8.25, y: 8.66))
        icon.addCurve(to: CGPoint(x: 7.33, y: 10.08), controlPoint1: CGPoint(x: 8.25, y: 9.67), controlPoint2: CGPoint(x: 7.84, y: 10.08))
        icon.close()
        icon.move(to: CGPoint(x: 7.33, y: 13.29))
        icon.addCurve(to: CGPoint(x: 6.42, y: 12.38), controlPoint1: CGPoint(x: 6.83, y: 13.29), controlPoint2: CGPoint(x: 6.42, y: 12.88))
        icon.addCurve(to: CGPoint(x: 7.33, y: 11.46), controlPoint1: CGPoint(x: 6.42, y: 11.87), controlPoint2: CGPoint(x: 6.83, y: 11.46))
        icon.addCurve(to: CGPoint(x: 8.25, y: 12.38), controlPoint1: CGPoint(x: 7.84, y: 11.46), controlPoint2: CGPoint(x: 8.25, y: 11.87))
        icon.addCurve(to: CGPoint(x: 7.33, y: 13.29), controlPoint1: CGPoint(x: 8.25, y: 12.88), controlPoint2: CGPoint(x: 7.84, y: 13.29))
        icon.close()
        icon.move(to: CGPoint(x: 7.33, y: 16.5))
        icon.addCurve(to: CGPoint(x: 6.42, y: 15.58), controlPoint1: CGPoint(x: 6.83, y: 16.5), controlPoint2: CGPoint(x: 6.42, y: 16.09))
        icon.addCurve(to: CGPoint(x: 7.33, y: 14.67), controlPoint1: CGPoint(x: 6.42, y: 15.08), controlPoint2: CGPoint(x: 6.83, y: 14.67))
        icon.addCurve(to: CGPoint(x: 8.25, y: 15.58), controlPoint1: CGPoint(x: 7.84, y: 14.67), controlPoint2: CGPoint(x: 8.25, y: 15.08))
        icon.addCurve(to: CGPoint(x: 7.33, y: 16.5), controlPoint1: CGPoint(x: 8.25, y: 16.09), controlPoint2: CGPoint(x: 7.84, y: 16.5))
        icon.close()
        icon.move(to: CGPoint(x: 3.67, y: 13.29))
        icon.addCurve(to: CGPoint(x: 2.75, y: 12.38), controlPoint1: CGPoint(x: 3.16, y: 13.29), controlPoint2: CGPoint(x: 2.75, y: 12.88))
        icon.addCurve(to: CGPoint(x: 3.67, y: 11.46), controlPoint1: CGPoint(x: 2.75, y: 11.87), controlPoint2: CGPoint(x: 3.16, y: 11.46))
        icon.addCurve(to: CGPoint(x: 4.58, y: 12.38), controlPoint1: CGPoint(x: 4.17, y: 11.46), controlPoint2: CGPoint(x: 4.58, y: 11.87))
        icon.addCurve(to: CGPoint(x: 3.67, y: 13.29), controlPoint1: CGPoint(x: 4.58, y: 12.88), controlPoint2: CGPoint(x: 4.17, y: 13.29))
        icon.close()
        icon.move(to: CGPoint(x: 3.67, y: 16.5))
        icon.addCurve(to: CGPoint(x: 2.75, y: 15.58), controlPoint1: CGPoint(x: 3.16, y: 16.5), controlPoint2: CGPoint(x: 2.75, y: 16.09))
        icon.addCurve(to: CGPoint(x: 3.67, y: 14.67), controlPoint1: CGPoint(x: 2.75, y: 15.08), controlPoint2: CGPoint(x: 3.16, y: 14.67))
        icon.addCurve(to: CGPoint(x: 4.58, y: 15.58), controlPoint1: CGPoint(x: 4.17, y: 14.67), controlPoint2: CGPoint(x: 4.58, y: 15.08))
        icon.addCurve(to: CGPoint(x: 3.67, y: 16.5), controlPoint1: CGPoint(x: 4.58, y: 16.09), controlPoint2: CGPoint(x: 4.17, y: 16.5))
        icon.close()
        icon.move(to: CGPoint(x: 11, y: 10.08))
        icon.addCurve(to: CGPoint(x: 10.08, y: 9.17), controlPoint1: CGPoint(x: 10.49, y: 10.08), controlPoint2: CGPoint(x: 10.08, y: 9.67))
        icon.addCurve(to: CGPoint(x: 11, y: 8.25), controlPoint1: CGPoint(x: 10.08, y: 8.66), controlPoint2: CGPoint(x: 10.49, y: 8.25))
        icon.addCurve(to: CGPoint(x: 11.92, y: 9.17), controlPoint1: CGPoint(x: 11.51, y: 8.25), controlPoint2: CGPoint(x: 11.92, y: 8.66))
        icon.addCurve(to: CGPoint(x: 11, y: 10.08), controlPoint1: CGPoint(x: 11.92, y: 9.67), controlPoint2: CGPoint(x: 11.51, y: 10.08))
        icon.close()
        icon.move(to: CGPoint(x: 11, y: 13.29))
        icon.addCurve(to: CGPoint(x: 10.08, y: 12.38), controlPoint1: CGPoint(x: 10.49, y: 13.29), controlPoint2: CGPoint(x: 10.08, y: 12.88))
        icon.addCurve(to: CGPoint(x: 11, y: 11.46), controlPoint1: CGPoint(x: 10.08, y: 11.87), controlPoint2: CGPoint(x: 10.49, y: 11.46))
        icon.addCurve(to: CGPoint(x: 11.92, y: 12.38), controlPoint1: CGPoint(x: 11.51, y: 11.46), controlPoint2: CGPoint(x: 11.92, y: 11.87))
        icon.addCurve(to: CGPoint(x: 11, y: 13.29), controlPoint1: CGPoint(x: 11.92, y: 12.88), controlPoint2: CGPoint(x: 11.51, y: 13.29))
        icon.close()
        icon.move(to: CGPoint(x: 14.67, y: 13.75))
        icon.addCurve(to: CGPoint(x: 13.29, y: 12.38), controlPoint1: CGPoint(x: 13.91, y: 13.75), controlPoint2: CGPoint(x: 13.29, y: 13.13))
        icon.addCurve(to: CGPoint(x: 14.67, y: 11), controlPoint1: CGPoint(x: 13.29, y: 11.62), controlPoint2: CGPoint(x: 13.91, y: 11))
        icon.addCurve(to: CGPoint(x: 16.04, y: 12.38), controlPoint1: CGPoint(x: 15.43, y: 11), controlPoint2: CGPoint(x: 16.04, y: 11.62))
        icon.addCurve(to: CGPoint(x: 14.67, y: 13.75), controlPoint1: CGPoint(x: 16.04, y: 13.13), controlPoint2: CGPoint(x: 15.43, y: 13.75))
        icon.close()
        icon.move(to: CGPoint(x: 11, y: 16.5))
        icon.addCurve(to: CGPoint(x: 10.08, y: 15.58), controlPoint1: CGPoint(x: 10.49, y: 16.5), controlPoint2: CGPoint(x: 10.08, y: 16.09))
        icon.addCurve(to: CGPoint(x: 11, y: 14.67), controlPoint1: CGPoint(x: 10.08, y: 15.08), controlPoint2: CGPoint(x: 10.49, y: 14.67))
        icon.addCurve(to: CGPoint(x: 11.92, y: 15.58), controlPoint1: CGPoint(x: 11.51, y: 14.67), controlPoint2: CGPoint(x: 11.92, y: 15.08))
        icon.addCurve(to: CGPoint(x: 11, y: 16.5), controlPoint1: CGPoint(x: 11.92, y: 16.09), controlPoint2: CGPoint(x: 11.51, y: 16.5))
        icon.close()
        icon.move(to: CGPoint(x: 14.67, y: 10.08))
        icon.addCurve(to: CGPoint(x: 13.75, y: 9.17), controlPoint1: CGPoint(x: 14.16, y: 10.08), controlPoint2: CGPoint(x: 13.75, y: 9.67))
        icon.addCurve(to: CGPoint(x: 14.67, y: 8.25), controlPoint1: CGPoint(x: 13.75, y: 8.66), controlPoint2: CGPoint(x: 14.16, y: 8.25))
        icon.addCurve(to: CGPoint(x: 15.58, y: 9.17), controlPoint1: CGPoint(x: 15.17, y: 8.25), controlPoint2: CGPoint(x: 15.58, y: 8.66))
        icon.addCurve(to: CGPoint(x: 14.67, y: 10.08), controlPoint1: CGPoint(x: 15.58, y: 9.67), controlPoint2: CGPoint(x: 15.17, y: 10.08))
        icon.close()
        icon.move(to: CGPoint(x: 14.67, y: 16.5))
        icon.addCurve(to: CGPoint(x: 13.75, y: 15.58), controlPoint1: CGPoint(x: 14.16, y: 16.5), controlPoint2: CGPoint(x: 13.75, y: 16.09))
        icon.addCurve(to: CGPoint(x: 14.67, y: 14.67), controlPoint1: CGPoint(x: 13.75, y: 15.08), controlPoint2: CGPoint(x: 14.16, y: 14.67))
        icon.addCurve(to: CGPoint(x: 15.58, y: 15.58), controlPoint1: CGPoint(x: 15.17, y: 14.67), controlPoint2: CGPoint(x: 15.58, y: 15.08))
        icon.addCurve(to: CGPoint(x: 14.67, y: 16.5), controlPoint1: CGPoint(x: 15.58, y: 16.09), controlPoint2: CGPoint(x: 15.17, y: 16.5))
        icon.close()
        icon.move(to: CGPoint(x: 18.33, y: 10.08))
        icon.addCurve(to: CGPoint(x: 17.42, y: 9.17), controlPoint1: CGPoint(x: 17.83, y: 10.08), controlPoint2: CGPoint(x: 17.42, y: 9.67))
        icon.addCurve(to: CGPoint(x: 18.33, y: 8.25), controlPoint1: CGPoint(x: 17.42, y: 8.66), controlPoint2: CGPoint(x: 17.83, y: 8.25))
        icon.addCurve(to: CGPoint(x: 19.25, y: 9.17), controlPoint1: CGPoint(x: 18.84, y: 8.25), controlPoint2: CGPoint(x: 19.25, y: 8.66))
        icon.addCurve(to: CGPoint(x: 18.33, y: 10.08), controlPoint1: CGPoint(x: 19.25, y: 9.67), controlPoint2: CGPoint(x: 18.84, y: 10.08))
        icon.close()
        icon.move(to: CGPoint(x: 18.33, y: 13.29))
        icon.addCurve(to: CGPoint(x: 17.42, y: 12.38), controlPoint1: CGPoint(x: 17.83, y: 13.29), controlPoint2: CGPoint(x: 17.42, y: 12.88))
        icon.addCurve(to: CGPoint(x: 18.33, y: 11.46), controlPoint1: CGPoint(x: 17.42, y: 11.87), controlPoint2: CGPoint(x: 17.83, y: 11.46))
        icon.addCurve(to: CGPoint(x: 19.25, y: 12.38), controlPoint1: CGPoint(x: 18.84, y: 11.46), controlPoint2: CGPoint(x: 19.25, y: 11.87))
        icon.addCurve(to: CGPoint(x: 18.33, y: 13.29), controlPoint1: CGPoint(x: 19.25, y: 12.88), controlPoint2: CGPoint(x: 18.84, y: 13.29))
        icon.close()
        context.saveGState()
        context.translateBy(x: 4, y: 5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4, y: 5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsNavToolbarTasks(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 20.57, y: 17.14))
        icon.addCurve(to: CGPoint(x: 19.13, y: 18.57), controlPoint1: CGPoint(x: 20.57, y: 17.93), controlPoint2: CGPoint(x: 19.92, y: 18.57))
        icon.addLine(to: CGPoint(x: 2.87, y: 18.57))
        icon.addCurve(to: CGPoint(x: 1.43, y: 17.14), controlPoint1: CGPoint(x: 2.08, y: 18.57), controlPoint2: CGPoint(x: 1.43, y: 17.93))
        icon.addLine(to: CGPoint(x: 1.43, y: 6.19))
        icon.addLine(to: CGPoint(x: 20.57, y: 6.19))
        icon.addLine(to: CGPoint(x: 20.57, y: 17.14))
        icon.close()
        icon.move(to: CGPoint(x: 19.61, y: 0))
        icon.addCurve(to: CGPoint(x: 22, y: 2.38), controlPoint1: CGPoint(x: 20.93, y: 0), controlPoint2: CGPoint(x: 22, y: 1.07))
        icon.addLine(to: CGPoint(x: 22, y: 17.62))
        icon.addCurve(to: CGPoint(x: 19.61, y: 20), controlPoint1: CGPoint(x: 22, y: 18.93), controlPoint2: CGPoint(x: 20.93, y: 20))
        icon.addLine(to: CGPoint(x: 2.39, y: 20))
        icon.addCurve(to: CGPoint(x: 0, y: 17.62), controlPoint1: CGPoint(x: 1.07, y: 20), controlPoint2: CGPoint(x: 0, y: 18.93))
        icon.addLine(to: CGPoint(x: 0, y: 2.38))
        icon.addCurve(to: CGPoint(x: 2.39, y: 0), controlPoint1: CGPoint(x: 0, y: 1.07), controlPoint2: CGPoint(x: 1.07, y: 0))
        icon.addLine(to: CGPoint(x: 19.61, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 6.84, y: 12.95))
        icon.addLine(to: CGPoint(x: 18.03, y: 12.95))
        icon.addCurve(to: CGPoint(x: 18.65, y: 12.33), controlPoint1: CGPoint(x: 18.37, y: 12.95), controlPoint2: CGPoint(x: 18.65, y: 12.68))
        icon.addCurve(to: CGPoint(x: 18.03, y: 11.71), controlPoint1: CGPoint(x: 18.65, y: 11.99), controlPoint2: CGPoint(x: 18.37, y: 11.71))
        icon.addLine(to: CGPoint(x: 6.84, y: 11.71))
        icon.addCurve(to: CGPoint(x: 6.22, y: 12.33), controlPoint1: CGPoint(x: 6.5, y: 11.71), controlPoint2: CGPoint(x: 6.22, y: 11.99))
        icon.addCurve(to: CGPoint(x: 6.84, y: 12.95), controlPoint1: CGPoint(x: 6.22, y: 12.68), controlPoint2: CGPoint(x: 6.5, y: 12.95))
        icon.close()
        icon.move(to: CGPoint(x: 6.84, y: 16.48))
        icon.addLine(to: CGPoint(x: 18.03, y: 16.48))
        icon.addCurve(to: CGPoint(x: 18.65, y: 15.86), controlPoint1: CGPoint(x: 18.37, y: 16.48), controlPoint2: CGPoint(x: 18.65, y: 16.2))
        icon.addCurve(to: CGPoint(x: 18.03, y: 15.24), controlPoint1: CGPoint(x: 18.65, y: 15.52), controlPoint2: CGPoint(x: 18.37, y: 15.24))
        icon.addLine(to: CGPoint(x: 6.84, y: 15.24))
        icon.addCurve(to: CGPoint(x: 6.22, y: 15.86), controlPoint1: CGPoint(x: 6.5, y: 15.24), controlPoint2: CGPoint(x: 6.22, y: 15.52))
        icon.addCurve(to: CGPoint(x: 6.84, y: 16.48), controlPoint1: CGPoint(x: 6.22, y: 16.2), controlPoint2: CGPoint(x: 6.5, y: 16.48))
        icon.close()
        icon.move(to: CGPoint(x: 6.84, y: 9.33))
        icon.addLine(to: CGPoint(x: 18.03, y: 9.33))
        icon.addCurve(to: CGPoint(x: 18.65, y: 8.71), controlPoint1: CGPoint(x: 18.37, y: 9.33), controlPoint2: CGPoint(x: 18.65, y: 9.06))
        icon.addCurve(to: CGPoint(x: 18.03, y: 8.1), controlPoint1: CGPoint(x: 18.65, y: 8.37), controlPoint2: CGPoint(x: 18.37, y: 8.1))
        icon.addLine(to: CGPoint(x: 6.84, y: 8.1))
        icon.addCurve(to: CGPoint(x: 6.22, y: 8.71), controlPoint1: CGPoint(x: 6.5, y: 8.1), controlPoint2: CGPoint(x: 6.22, y: 8.37))
        icon.addCurve(to: CGPoint(x: 6.84, y: 9.33), controlPoint1: CGPoint(x: 6.22, y: 9.06), controlPoint2: CGPoint(x: 6.5, y: 9.33))
        icon.close()
        icon.move(to: CGPoint(x: 3.83, y: 9.71))
        icon.addCurve(to: CGPoint(x: 4.78, y: 8.76), controlPoint1: CGPoint(x: 4.35, y: 9.71), controlPoint2: CGPoint(x: 4.78, y: 9.29))
        icon.addCurve(to: CGPoint(x: 3.83, y: 7.81), controlPoint1: CGPoint(x: 4.78, y: 8.24), controlPoint2: CGPoint(x: 4.35, y: 7.81))
        icon.addCurve(to: CGPoint(x: 2.87, y: 8.76), controlPoint1: CGPoint(x: 3.3, y: 7.81), controlPoint2: CGPoint(x: 2.87, y: 8.24))
        icon.addCurve(to: CGPoint(x: 3.83, y: 9.71), controlPoint1: CGPoint(x: 2.87, y: 9.29), controlPoint2: CGPoint(x: 3.3, y: 9.71))
        icon.close()
        icon.move(to: CGPoint(x: 3.83, y: 16.86))
        icon.addCurve(to: CGPoint(x: 4.78, y: 15.9), controlPoint1: CGPoint(x: 4.35, y: 16.86), controlPoint2: CGPoint(x: 4.78, y: 16.43))
        icon.addCurve(to: CGPoint(x: 3.83, y: 14.95), controlPoint1: CGPoint(x: 4.78, y: 15.38), controlPoint2: CGPoint(x: 4.35, y: 14.95))
        icon.addCurve(to: CGPoint(x: 2.87, y: 15.9), controlPoint1: CGPoint(x: 3.3, y: 14.95), controlPoint2: CGPoint(x: 2.87, y: 15.38))
        icon.addCurve(to: CGPoint(x: 3.83, y: 16.86), controlPoint1: CGPoint(x: 2.87, y: 16.43), controlPoint2: CGPoint(x: 3.3, y: 16.86))
        icon.close()
        icon.move(to: CGPoint(x: 3.83, y: 13.33))
        icon.addCurve(to: CGPoint(x: 4.78, y: 12.38), controlPoint1: CGPoint(x: 4.35, y: 13.33), controlPoint2: CGPoint(x: 4.78, y: 12.91))
        icon.addCurve(to: CGPoint(x: 3.83, y: 11.43), controlPoint1: CGPoint(x: 4.78, y: 11.86), controlPoint2: CGPoint(x: 4.35, y: 11.43))
        icon.addCurve(to: CGPoint(x: 2.87, y: 12.38), controlPoint1: CGPoint(x: 3.3, y: 11.43), controlPoint2: CGPoint(x: 2.87, y: 11.86))
        icon.addCurve(to: CGPoint(x: 3.83, y: 13.33), controlPoint1: CGPoint(x: 2.87, y: 12.91), controlPoint2: CGPoint(x: 3.3, y: 13.33))
        icon.close()
        context.saveGState()
        context.translateBy(x: 4, y: 5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4, y: 5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsNavToolbarChange(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 13.5, y: 0))
        icon.addCurve(to: CGPoint(x: 6.49, y: 2.64), controlPoint1: CGPoint(x: 10.83, y: 0), controlPoint2: CGPoint(x: 8.37, y: 0.99))
        icon.addCurve(to: CGPoint(x: 6.16, y: 3.51), controlPoint1: CGPoint(x: 6.23, y: 2.84), controlPoint2: CGPoint(x: 6.1, y: 3.18))
        icon.addCurve(to: CGPoint(x: 6.76, y: 4.22), controlPoint1: CGPoint(x: 6.22, y: 3.84), controlPoint2: CGPoint(x: 6.45, y: 4.11))
        icon.addCurve(to: CGPoint(x: 7.66, y: 4.03), controlPoint1: CGPoint(x: 7.07, y: 4.33), controlPoint2: CGPoint(x: 7.41, y: 4.25))
        icon.addCurve(to: CGPoint(x: 13.5, y: 1.83), controlPoint1: CGPoint(x: 9.23, y: 2.66), controlPoint2: CGPoint(x: 11.26, y: 1.83))
        icon.addCurve(to: CGPoint(x: 22.46, y: 10.08), controlPoint1: CGPoint(x: 18.18, y: 1.83), controlPoint2: CGPoint(x: 22.01, y: 5.44))
        icon.addLine(to: CGPoint(x: 19.8, y: 10.08))
        icon.addLine(to: CGPoint(x: 23.4, y: 15.58))
        icon.addLine(to: CGPoint(x: 27, y: 10.08))
        icon.addLine(to: CGPoint(x: 24.25, y: 10.08))
        icon.addCurve(to: CGPoint(x: 13.5, y: 0), controlPoint1: CGPoint(x: 23.79, y: 4.45), controlPoint2: CGPoint(x: 19.15, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 3.6, y: 6.42))
        icon.addLine(to: CGPoint(x: 7.2, y: 11.92))
        icon.addLine(to: CGPoint(x: 4.54, y: 11.92))
        icon.addCurve(to: CGPoint(x: 13.5, y: 20.17), controlPoint1: CGPoint(x: 4.99, y: 16.56), controlPoint2: CGPoint(x: 8.82, y: 20.17))
        icon.addCurve(to: CGPoint(x: 19.34, y: 17.97), controlPoint1: CGPoint(x: 15.74, y: 20.17), controlPoint2: CGPoint(x: 17.77, y: 19.34))
        icon.addCurve(to: CGPoint(x: 20.24, y: 17.78), controlPoint1: CGPoint(x: 19.59, y: 17.75), controlPoint2: CGPoint(x: 19.93, y: 17.67))
        icon.addCurve(to: CGPoint(x: 20.84, y: 18.49), controlPoint1: CGPoint(x: 20.55, y: 17.89), controlPoint2: CGPoint(x: 20.78, y: 18.16))
        icon.addCurve(to: CGPoint(x: 20.51, y: 19.36), controlPoint1: CGPoint(x: 20.9, y: 18.82), controlPoint2: CGPoint(x: 20.77, y: 19.16))
        icon.addCurve(to: CGPoint(x: 13.5, y: 22), controlPoint1: CGPoint(x: 18.63, y: 21.01), controlPoint2: CGPoint(x: 16.17, y: 22))
        icon.addCurve(to: CGPoint(x: 2.75, y: 11.92), controlPoint1: CGPoint(x: 7.85, y: 22), controlPoint2: CGPoint(x: 3.21, y: 17.55))
        icon.addLine(to: CGPoint(x: 0, y: 11.92))
        icon.addLine(to: CGPoint(x: 3.6, y: 6.42))
        icon.close()
        icon.move(to: CGPoint(x: 13.5, y: 14.5))
        icon.addCurve(to: CGPoint(x: 10, y: 11), controlPoint1: CGPoint(x: 11.57, y: 14.5), controlPoint2: CGPoint(x: 10, y: 12.93))
        icon.addCurve(to: CGPoint(x: 13.5, y: 7.5), controlPoint1: CGPoint(x: 10, y: 9.07), controlPoint2: CGPoint(x: 11.57, y: 7.5))
        icon.addCurve(to: CGPoint(x: 17, y: 11), controlPoint1: CGPoint(x: 15.43, y: 7.5), controlPoint2: CGPoint(x: 17, y: 9.07))
        icon.addCurve(to: CGPoint(x: 13.5, y: 14.5), controlPoint1: CGPoint(x: 17, y: 12.93), controlPoint2: CGPoint(x: 15.43, y: 14.5))
        icon.close()
        context.saveGState()
        context.translateBy(x: 1.5, y: 4)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 1.5, y: 4))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsNavToolbarPodcast(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 1.53, y: 16.96))
        icon.addLine(to: CGPoint(x: 0, y: 16.96))
        icon.addLine(to: CGPoint(x: 0, y: 9.87))
        icon.addCurve(to: CGPoint(x: 9.98, y: 0), controlPoint1: CGPoint(x: 0, y: 4.42), controlPoint2: CGPoint(x: 4.47, y: 0))
        icon.addLine(to: CGPoint(x: 12.02, y: 0))
        icon.addCurve(to: CGPoint(x: 22, y: 9.87), controlPoint1: CGPoint(x: 17.53, y: 0), controlPoint2: CGPoint(x: 22, y: 4.42))
        icon.addLine(to: CGPoint(x: 22, y: 16.96))
        icon.addLine(to: CGPoint(x: 20.47, y: 16.96))
        icon.addLine(to: CGPoint(x: 20.47, y: 9.87))
        icon.addCurve(to: CGPoint(x: 12.02, y: 1.52), controlPoint1: CGPoint(x: 20.47, y: 5.26), controlPoint2: CGPoint(x: 16.69, y: 1.52))
        icon.addLine(to: CGPoint(x: 9.98, y: 1.52))
        icon.addCurve(to: CGPoint(x: 1.53, y: 9.87), controlPoint1: CGPoint(x: 5.31, y: 1.52), controlPoint2: CGPoint(x: 1.53, y: 5.26))
        icon.addLine(to: CGPoint(x: 1.53, y: 16.96))
        icon.close()
        icon.move(to: CGPoint(x: 18.66, y: 20))
        icon.addLine(to: CGPoint(x: 16.67, y: 20))
        icon.addCurve(to: CGPoint(x: 15.09, y: 18.45), controlPoint1: CGPoint(x: 15.8, y: 20), controlPoint2: CGPoint(x: 15.09, y: 19.3))
        icon.addLine(to: CGPoint(x: 15.09, y: 13.45))
        icon.addCurve(to: CGPoint(x: 16.67, y: 11.9), controlPoint1: CGPoint(x: 15.09, y: 12.59), controlPoint2: CGPoint(x: 15.8, y: 11.9))
        icon.addLine(to: CGPoint(x: 18.66, y: 11.9))
        icon.addCurve(to: CGPoint(x: 19.19, y: 12.42), controlPoint1: CGPoint(x: 18.95, y: 11.9), controlPoint2: CGPoint(x: 19.19, y: 12.13))
        icon.addLine(to: CGPoint(x: 19.19, y: 19.48))
        icon.addCurve(to: CGPoint(x: 18.66, y: 20), controlPoint1: CGPoint(x: 19.19, y: 19.77), controlPoint2: CGPoint(x: 18.95, y: 20))
        icon.close()
        icon.move(to: CGPoint(x: 3.34, y: 20))
        icon.addCurve(to: CGPoint(x: 2.81, y: 19.48), controlPoint1: CGPoint(x: 3.05, y: 20), controlPoint2: CGPoint(x: 2.81, y: 19.77))
        icon.addLine(to: CGPoint(x: 2.81, y: 12.42))
        icon.addCurve(to: CGPoint(x: 3.34, y: 11.9), controlPoint1: CGPoint(x: 2.81, y: 12.13), controlPoint2: CGPoint(x: 3.05, y: 11.9))
        icon.addLine(to: CGPoint(x: 5.33, y: 11.9))
        icon.addCurve(to: CGPoint(x: 6.91, y: 13.45), controlPoint1: CGPoint(x: 6.2, y: 11.9), controlPoint2: CGPoint(x: 6.91, y: 12.59))
        icon.addLine(to: CGPoint(x: 6.91, y: 18.45))
        icon.addCurve(to: CGPoint(x: 5.33, y: 20), controlPoint1: CGPoint(x: 6.91, y: 19.3), controlPoint2: CGPoint(x: 6.2, y: 20))
        icon.addLine(to: CGPoint(x: 3.34, y: 20))
        icon.close()
        icon.move(to: CGPoint(x: 6.91, y: 3.8))
        icon.addLine(to: CGPoint(x: 14.07, y: 3.8))
        icon.addLine(to: CGPoint(x: 14.07, y: 4.81))
        icon.addLine(to: CGPoint(x: 6.91, y: 4.81))
        icon.addLine(to: CGPoint(x: 6.91, y: 3.8))
        icon.close()
        icon.move(to: CGPoint(x: 6.91, y: 7.85))
        icon.addLine(to: CGPoint(x: 15.09, y: 7.85))
        icon.addLine(to: CGPoint(x: 15.09, y: 8.86))
        icon.addLine(to: CGPoint(x: 6.91, y: 8.86))
        icon.addLine(to: CGPoint(x: 6.91, y: 7.85))
        icon.close()
        icon.move(to: CGPoint(x: 6.91, y: 5.82))
        icon.addLine(to: CGPoint(x: 15.09, y: 5.82))
        icon.addLine(to: CGPoint(x: 15.09, y: 6.84))
        icon.addLine(to: CGPoint(x: 6.91, y: 6.84))
        icon.addLine(to: CGPoint(x: 6.91, y: 5.82))
        icon.close()
        icon.move(to: CGPoint(x: 6.91, y: 9.87))
        icon.addLine(to: CGPoint(x: 14.07, y: 9.87))
        icon.addLine(to: CGPoint(x: 14.07, y: 10.89))
        icon.addLine(to: CGPoint(x: 6.91, y: 10.89))
        icon.addLine(to: CGPoint(x: 6.91, y: 9.87))
        icon.close()
        context.saveGState()
        context.translateBy(x: 4, y: 5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4, y: 5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsQuickActionSample(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 12, y: 24))
        icon.addCurve(to: CGPoint(x: 0, y: 12), controlPoint1: CGPoint(x: 5.37, y: 24), controlPoint2: CGPoint(x: 0, y: 18.63))
        icon.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 0, y: 5.37), controlPoint2: CGPoint(x: 5.37, y: 0))
        icon.addCurve(to: CGPoint(x: 24, y: 12), controlPoint1: CGPoint(x: 18.63, y: 0), controlPoint2: CGPoint(x: 24, y: 5.37))
        icon.addCurve(to: CGPoint(x: 12, y: 24), controlPoint1: CGPoint(x: 24, y: 18.63), controlPoint2: CGPoint(x: 18.63, y: 24))
        icon.close()
        icon.move(to: CGPoint(x: 12, y: 22))
        icon.addCurve(to: CGPoint(x: 22, y: 12), controlPoint1: CGPoint(x: 17.52, y: 22), controlPoint2: CGPoint(x: 22, y: 17.52))
        icon.addCurve(to: CGPoint(x: 12, y: 2), controlPoint1: CGPoint(x: 22, y: 6.48), controlPoint2: CGPoint(x: 17.52, y: 2))
        icon.addCurve(to: CGPoint(x: 2, y: 12), controlPoint1: CGPoint(x: 6.48, y: 2), controlPoint2: CGPoint(x: 2, y: 6.48))
        icon.addCurve(to: CGPoint(x: 12, y: 22), controlPoint1: CGPoint(x: 2, y: 17.52), controlPoint2: CGPoint(x: 6.48, y: 22))
        icon.close()
        context.saveGState()
        context.translateBy(x: 6, y: 6)
        icon.usesEvenOddFillRule = true
        UIColor(white: 1, alpha: 0).setFill()
        icon.fill()
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 6, y: 6))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsQuickActionAdd2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 12.5, y: 9.5))
        icon.addLine(to: CGPoint(x: 20.5, y: 9.5))
        icon.addCurve(to: CGPoint(x: 22, y: 11), controlPoint1: CGPoint(x: 21.33, y: 9.5), controlPoint2: CGPoint(x: 22, y: 10.17))
        icon.addCurve(to: CGPoint(x: 20.5, y: 12.5), controlPoint1: CGPoint(x: 22, y: 11.83), controlPoint2: CGPoint(x: 21.33, y: 12.5))
        icon.addLine(to: CGPoint(x: 12.5, y: 12.5))
        icon.addLine(to: CGPoint(x: 12.5, y: 20.5))
        icon.addCurve(to: CGPoint(x: 11, y: 22), controlPoint1: CGPoint(x: 12.5, y: 21.33), controlPoint2: CGPoint(x: 11.83, y: 22))
        icon.addCurve(to: CGPoint(x: 9.5, y: 20.5), controlPoint1: CGPoint(x: 10.17, y: 22), controlPoint2: CGPoint(x: 9.5, y: 21.33))
        icon.addLine(to: CGPoint(x: 9.5, y: 12.5))
        icon.addLine(to: CGPoint(x: 1.5, y: 12.5))
        icon.addCurve(to: CGPoint(x: 0, y: 11), controlPoint1: CGPoint(x: 0.67, y: 12.5), controlPoint2: CGPoint(x: 0, y: 11.83))
        icon.addCurve(to: CGPoint(x: 1.5, y: 9.5), controlPoint1: CGPoint(x: 0, y: 10.17), controlPoint2: CGPoint(x: 0.67, y: 9.5))
        icon.addLine(to: CGPoint(x: 9.5, y: 9.5))
        icon.addLine(to: CGPoint(x: 9.5, y: 1.5))
        icon.addCurve(to: CGPoint(x: 11, y: 0), controlPoint1: CGPoint(x: 9.5, y: 0.67), controlPoint2: CGPoint(x: 10.17, y: 0))
        icon.addCurve(to: CGPoint(x: 12.5, y: 1.5), controlPoint1: CGPoint(x: 11.83, y: 0), controlPoint2: CGPoint(x: 12.5, y: 0.67))
        icon.addLine(to: CGPoint(x: 12.5, y: 9.5))
        icon.close()
        context.saveGState()
        context.translateBy(x: 7, y: 7)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 7, y: 7))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsQuickActionClose(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 12.5, y: 9.5))
        icon.addLine(to: CGPoint(x: 20.5, y: 9.5))
        icon.addCurve(to: CGPoint(x: 22, y: 11), controlPoint1: CGPoint(x: 21.33, y: 9.5), controlPoint2: CGPoint(x: 22, y: 10.17))
        icon.addCurve(to: CGPoint(x: 20.5, y: 12.5), controlPoint1: CGPoint(x: 22, y: 11.83), controlPoint2: CGPoint(x: 21.33, y: 12.5))
        icon.addLine(to: CGPoint(x: 12.5, y: 12.5))
        icon.addLine(to: CGPoint(x: 12.5, y: 20.5))
        icon.addCurve(to: CGPoint(x: 11, y: 22), controlPoint1: CGPoint(x: 12.5, y: 21.33), controlPoint2: CGPoint(x: 11.83, y: 22))
        icon.addCurve(to: CGPoint(x: 9.5, y: 20.5), controlPoint1: CGPoint(x: 10.17, y: 22), controlPoint2: CGPoint(x: 9.5, y: 21.33))
        icon.addLine(to: CGPoint(x: 9.5, y: 12.5))
        icon.addLine(to: CGPoint(x: 1.5, y: 12.5))
        icon.addCurve(to: CGPoint(x: 0, y: 11), controlPoint1: CGPoint(x: 0.67, y: 12.5), controlPoint2: CGPoint(x: 0, y: 11.83))
        icon.addCurve(to: CGPoint(x: 1.5, y: 9.5), controlPoint1: CGPoint(x: 0, y: 10.17), controlPoint2: CGPoint(x: 0.67, y: 9.5))
        icon.addLine(to: CGPoint(x: 9.5, y: 9.5))
        icon.addLine(to: CGPoint(x: 9.5, y: 1.5))
        icon.addCurve(to: CGPoint(x: 11, y: 0), controlPoint1: CGPoint(x: 9.5, y: 0.67), controlPoint2: CGPoint(x: 10.17, y: 0))
        icon.addCurve(to: CGPoint(x: 12.5, y: 1.5), controlPoint1: CGPoint(x: 11.83, y: 0), controlPoint2: CGPoint(x: 12.5, y: 0.67))
        icon.addLine(to: CGPoint(x: 12.5, y: 9.5))
        icon.close()
        context.saveGState()
        context.translateBy(x: 18, y: 18)
        context.rotate(by: 315 * CGFloat.pi/180)
        context.translateBy(x: -11, y: -11)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 18, y: 18))
        icon.apply(CGAffineTransform(rotationAngle: 315 * CGFloat.pi/180))
        icon.apply(CGAffineTransform(translationX: -11, y: -11))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsQuickActionTask(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 12.5, y: 25))
        icon.addCurve(to: CGPoint(x: 0, y: 12.5), controlPoint1: CGPoint(x: 5.6, y: 25), controlPoint2: CGPoint(x: 0, y: 19.4))
        icon.addCurve(to: CGPoint(x: 12.5, y: 0), controlPoint1: CGPoint(x: 0, y: 5.6), controlPoint2: CGPoint(x: 5.6, y: 0))
        icon.addCurve(to: CGPoint(x: 25, y: 12.5), controlPoint1: CGPoint(x: 19.4, y: 0), controlPoint2: CGPoint(x: 25, y: 5.6))
        icon.addCurve(to: CGPoint(x: 12.5, y: 25), controlPoint1: CGPoint(x: 25, y: 19.4), controlPoint2: CGPoint(x: 19.4, y: 25))
        icon.close()
        icon.move(to: CGPoint(x: 12.5, y: 23))
        icon.addCurve(to: CGPoint(x: 23, y: 12.5), controlPoint1: CGPoint(x: 18.3, y: 23), controlPoint2: CGPoint(x: 23, y: 18.3))
        icon.addCurve(to: CGPoint(x: 12.5, y: 2), controlPoint1: CGPoint(x: 23, y: 6.7), controlPoint2: CGPoint(x: 18.3, y: 2))
        icon.addCurve(to: CGPoint(x: 2, y: 12.5), controlPoint1: CGPoint(x: 6.7, y: 2), controlPoint2: CGPoint(x: 2, y: 6.7))
        icon.addCurve(to: CGPoint(x: 12.5, y: 23), controlPoint1: CGPoint(x: 2, y: 18.3), controlPoint2: CGPoint(x: 6.7, y: 23))
        icon.close()
        icon.move(to: CGPoint(x: 18.52, y: 8.85))
        icon.addCurve(to: CGPoint(x: 18.52, y: 9.44), controlPoint1: CGPoint(x: 18.68, y: 9.02), controlPoint2: CGPoint(x: 18.68, y: 9.28))
        icon.addLine(to: CGPoint(x: 10.22, y: 17.79))
        icon.addLine(to: CGPoint(x: 6.47, y: 14.01))
        icon.addCurve(to: CGPoint(x: 6.47, y: 13.42), controlPoint1: CGPoint(x: 6.31, y: 13.85), controlPoint2: CGPoint(x: 6.31, y: 13.59))
        icon.addLine(to: CGPoint(x: 7.3, y: 12.59))
        icon.addCurve(to: CGPoint(x: 7.88, y: 12.58), controlPoint1: CGPoint(x: 7.46, y: 12.43), controlPoint2: CGPoint(x: 7.72, y: 12.43))
        icon.addLine(to: CGPoint(x: 10.23, y: 14.98))
        icon.addLine(to: CGPoint(x: 17.12, y: 8))
        icon.addCurve(to: CGPoint(x: 17.69, y: 8.01), controlPoint1: CGPoint(x: 17.28, y: 7.85), controlPoint2: CGPoint(x: 17.53, y: 7.85))
        icon.addLine(to: CGPoint(x: 18.52, y: 8.85))
        icon.close()
        context.saveGState()
        context.translateBy(x: 6, y: 6)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 6, y: 6))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsQuickActionBook(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 21.94, y: 18.44))
        icon.addCurve(to: CGPoint(x: 16.27, y: 17.17), controlPoint1: CGPoint(x: 19.77, y: 17.38), controlPoint2: CGPoint(x: 17.91, y: 16.97))
        icon.addCurve(to: CGPoint(x: 13.04, y: 18.64), controlPoint1: CGPoint(x: 15.07, y: 17.33), controlPoint2: CGPoint(x: 13.98, y: 17.82))
        icon.addCurve(to: CGPoint(x: 13.04, y: 3.94), controlPoint1: CGPoint(x: 12.92, y: 8.21), controlPoint2: CGPoint(x: 12.98, y: 4.8))
        icon.addCurve(to: CGPoint(x: 17.36, y: 2), controlPoint1: CGPoint(x: 14.11, y: 2.7), controlPoint2: CGPoint(x: 15.67, y: 2))
        icon.addCurve(to: CGPoint(x: 21.96, y: 4.3), controlPoint1: CGPoint(x: 19.2, y: 2), controlPoint2: CGPoint(x: 20.9, y: 2.85))
        icon.addCurve(to: CGPoint(x: 21.94, y: 18.44), controlPoint1: CGPoint(x: 21.99, y: 5.04), controlPoint2: CGPoint(x: 22.02, y: 7.98))
        icon.move(to: CGPoint(x: 10.96, y: 18.64))
        icon.addCurve(to: CGPoint(x: 7.73, y: 17.17), controlPoint1: CGPoint(x: 10.03, y: 17.82), controlPoint2: CGPoint(x: 8.93, y: 17.33))
        icon.addCurve(to: CGPoint(x: 2.06, y: 18.44), controlPoint1: CGPoint(x: 6.09, y: 16.97), controlPoint2: CGPoint(x: 4.23, y: 17.38))
        icon.addCurve(to: CGPoint(x: 2.04, y: 4.3), controlPoint1: CGPoint(x: 1.98, y: 7.98), controlPoint2: CGPoint(x: 2.01, y: 5.04))
        icon.addCurve(to: CGPoint(x: 6.64, y: 2), controlPoint1: CGPoint(x: 3.1, y: 2.85), controlPoint2: CGPoint(x: 4.8, y: 2))
        icon.addCurve(to: CGPoint(x: 10.96, y: 3.94), controlPoint1: CGPoint(x: 8.33, y: 2), controlPoint2: CGPoint(x: 9.89, y: 2.7))
        icon.addCurve(to: CGPoint(x: 10.96, y: 18.64), controlPoint1: CGPoint(x: 11.02, y: 4.8), controlPoint2: CGPoint(x: 11.08, y: 8.21))
        icon.move(to: CGPoint(x: 23.76, y: 3.39))
        icon.addCurve(to: CGPoint(x: 17.36, y: 0), controlPoint1: CGPoint(x: 22.35, y: 1.27), controlPoint2: CGPoint(x: 19.96, y: 0))
        icon.addCurve(to: CGPoint(x: 12, y: 2.14), controlPoint1: CGPoint(x: 15.32, y: 0), controlPoint2: CGPoint(x: 13.42, y: 0.77))
        icon.addCurve(to: CGPoint(x: 6.64, y: 0), controlPoint1: CGPoint(x: 10.58, y: 0.77), controlPoint2: CGPoint(x: 8.68, y: 0))
        icon.addCurve(to: CGPoint(x: 0.24, y: 3.39), controlPoint1: CGPoint(x: 4.04, y: 0), controlPoint2: CGPoint(x: 1.65, y: 1.27))
        icon.addCurve(to: CGPoint(x: 0.07, y: 19.11), controlPoint1: CGPoint(x: 0, y: 3.76), controlPoint2: CGPoint(x: -0.06, y: 3.85))
        icon.addCurve(to: CGPoint(x: 0.85, y: 20.46), controlPoint1: CGPoint(x: 0.07, y: 19.67), controlPoint2: CGPoint(x: 0.36, y: 20.17))
        icon.addCurve(to: CGPoint(x: 2.42, y: 20.5), controlPoint1: CGPoint(x: 1.34, y: 20.75), controlPoint2: CGPoint(x: 1.93, y: 20.76))
        icon.addCurve(to: CGPoint(x: 7.48, y: 19.15), controlPoint1: CGPoint(x: 4.44, y: 19.44), controlPoint2: CGPoint(x: 6.14, y: 18.98))
        icon.addCurve(to: CGPoint(x: 10.75, y: 21.49), controlPoint1: CGPoint(x: 8.77, y: 19.32), controlPoint2: CGPoint(x: 9.84, y: 20.08))
        icon.addCurve(to: CGPoint(x: 12, y: 22), controlPoint1: CGPoint(x: 10.97, y: 21.84), controlPoint2: CGPoint(x: 11.62, y: 22))
        icon.addCurve(to: CGPoint(x: 13.25, y: 21.49), controlPoint1: CGPoint(x: 12.43, y: 22), controlPoint2: CGPoint(x: 13.03, y: 21.84))
        icon.addCurve(to: CGPoint(x: 16.53, y: 19.15), controlPoint1: CGPoint(x: 14.16, y: 20.08), controlPoint2: CGPoint(x: 15.23, y: 19.32))
        icon.addCurve(to: CGPoint(x: 21.58, y: 20.5), controlPoint1: CGPoint(x: 17.86, y: 18.98), controlPoint2: CGPoint(x: 19.56, y: 19.44))
        icon.addCurve(to: CGPoint(x: 23.15, y: 20.46), controlPoint1: CGPoint(x: 22.07, y: 20.76), controlPoint2: CGPoint(x: 22.66, y: 20.75))
        icon.addCurve(to: CGPoint(x: 23.93, y: 19.11), controlPoint1: CGPoint(x: 23.64, y: 20.17), controlPoint2: CGPoint(x: 23.93, y: 19.67))
        icon.addCurve(to: CGPoint(x: 23.76, y: 3.39), controlPoint1: CGPoint(x: 24.06, y: 3.85), controlPoint2: CGPoint(x: 24, y: 3.76))
        context.saveGState()
        context.translateBy(x: 6, y: 7)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 6, y: 7))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsQuickActionShare(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 10.02, y: 0.26))
        icon.addLine(to: CGPoint(x: 14.23, y: 4.86))
        icon.addCurve(to: CGPoint(x: 14.23, y: 6.27), controlPoint1: CGPoint(x: 14.61, y: 5.25), controlPoint2: CGPoint(x: 14.61, y: 5.88))
        icon.addCurve(to: CGPoint(x: 12.84, y: 6.27), controlPoint1: CGPoint(x: 13.85, y: 6.66), controlPoint2: CGPoint(x: 13.23, y: 6.66))
        icon.addLine(to: CGPoint(x: 10.43, y: 3.49))
        icon.addLine(to: CGPoint(x: 10.43, y: 17.3))
        icon.addLine(to: CGPoint(x: 8.47, y: 17.3))
        icon.addLine(to: CGPoint(x: 8.47, y: 3.53))
        icon.addLine(to: CGPoint(x: 6.12, y: 6.27))
        icon.addCurve(to: CGPoint(x: 4.74, y: 6.27), controlPoint1: CGPoint(x: 5.74, y: 6.66), controlPoint2: CGPoint(x: 5.12, y: 6.66))
        icon.addCurve(to: CGPoint(x: 4.74, y: 4.86), controlPoint1: CGPoint(x: 4.35, y: 5.88), controlPoint2: CGPoint(x: 4.35, y: 5.25))
        icon.addLine(to: CGPoint(x: 8.91, y: 0.26))
        icon.addCurve(to: CGPoint(x: 9.46, y: 0), controlPoint1: CGPoint(x: 9.06, y: 0.11), controlPoint2: CGPoint(x: 9.26, y: 0))
        icon.addCurve(to: CGPoint(x: 10.02, y: 0.26), controlPoint1: CGPoint(x: 9.67, y: 0), controlPoint2: CGPoint(x: 9.87, y: 0.11))
        icon.close()
        icon.move(to: CGPoint(x: 12.7, y: 10))
        icon.addLine(to: CGPoint(x: 12.7, y: 8))
        icon.addLine(to: CGPoint(x: 16.21, y: 8))
        icon.addCurve(to: CGPoint(x: 19, y: 10.78), controlPoint1: CGPoint(x: 17.75, y: 8), controlPoint2: CGPoint(x: 19, y: 9.25))
        icon.addLine(to: CGPoint(x: 19, y: 23.72))
        icon.addCurve(to: CGPoint(x: 16.21, y: 26.5), controlPoint1: CGPoint(x: 19, y: 25.25), controlPoint2: CGPoint(x: 17.75, y: 26.5))
        icon.addLine(to: CGPoint(x: 2.79, y: 26.5))
        icon.addCurve(to: CGPoint(x: 0, y: 23.72), controlPoint1: CGPoint(x: 1.25, y: 26.5), controlPoint2: CGPoint(x: 0, y: 25.25))
        icon.addLine(to: CGPoint(x: 0, y: 10.78))
        icon.addCurve(to: CGPoint(x: 2.79, y: 8), controlPoint1: CGPoint(x: 0, y: 9.25), controlPoint2: CGPoint(x: 1.25, y: 8))
        icon.addLine(to: CGPoint(x: 6.37, y: 8))
        icon.addLine(to: CGPoint(x: 6.37, y: 10))
        icon.addLine(to: CGPoint(x: 2.79, y: 10))
        icon.addCurve(to: CGPoint(x: 2, y: 10.78), controlPoint1: CGPoint(x: 2.35, y: 10), controlPoint2: CGPoint(x: 2, y: 10.35))
        icon.addLine(to: CGPoint(x: 2, y: 23.72))
        icon.addCurve(to: CGPoint(x: 2.79, y: 24.5), controlPoint1: CGPoint(x: 2, y: 24.15), controlPoint2: CGPoint(x: 2.35, y: 24.5))
        icon.addLine(to: CGPoint(x: 16.21, y: 24.5))
        icon.addCurve(to: CGPoint(x: 17, y: 23.72), controlPoint1: CGPoint(x: 16.65, y: 24.5), controlPoint2: CGPoint(x: 17, y: 24.15))
        icon.addLine(to: CGPoint(x: 17, y: 10.78))
        icon.addCurve(to: CGPoint(x: 16.21, y: 10), controlPoint1: CGPoint(x: 17, y: 10.35), controlPoint2: CGPoint(x: 16.65, y: 10))
        icon.addLine(to: CGPoint(x: 12.7, y: 10))
        icon.close()
        context.saveGState()
        context.translateBy(x: 8.5, y: 4.5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 8.5, y: 4.5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsQuickActionDownload2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 10.02, y: 17.04))
        icon.addCurve(to: CGPoint(x: 9.46, y: 17.3), controlPoint1: CGPoint(x: 9.87, y: 17.19), controlPoint2: CGPoint(x: 9.67, y: 17.3))
        icon.addCurve(to: CGPoint(x: 8.91, y: 17.04), controlPoint1: CGPoint(x: 9.26, y: 17.3), controlPoint2: CGPoint(x: 9.06, y: 17.19))
        icon.addLine(to: CGPoint(x: 4.74, y: 12.44))
        icon.addCurve(to: CGPoint(x: 4.74, y: 11.03), controlPoint1: CGPoint(x: 4.35, y: 12.05), controlPoint2: CGPoint(x: 4.35, y: 11.42))
        icon.addCurve(to: CGPoint(x: 6.12, y: 11.03), controlPoint1: CGPoint(x: 5.12, y: 10.64), controlPoint2: CGPoint(x: 5.74, y: 10.64))
        icon.addLine(to: CGPoint(x: 8.47, y: 13.77))
        icon.addLine(to: CGPoint(x: 8.47, y: 0))
        icon.addLine(to: CGPoint(x: 10.43, y: 0))
        icon.addLine(to: CGPoint(x: 10.43, y: 13.81))
        icon.addLine(to: CGPoint(x: 12.84, y: 11.03))
        icon.addCurve(to: CGPoint(x: 14.23, y: 11.03), controlPoint1: CGPoint(x: 13.23, y: 10.64), controlPoint2: CGPoint(x: 13.85, y: 10.64))
        icon.addCurve(to: CGPoint(x: 14.23, y: 12.44), controlPoint1: CGPoint(x: 14.61, y: 11.42), controlPoint2: CGPoint(x: 14.61, y: 12.05))
        icon.addLine(to: CGPoint(x: 10.02, y: 17.04))
        icon.close()
        icon.move(to: CGPoint(x: 12.7, y: 8))
        icon.addLine(to: CGPoint(x: 12.7, y: 6))
        icon.addLine(to: CGPoint(x: 16.21, y: 6))
        icon.addCurve(to: CGPoint(x: 19, y: 8.78), controlPoint1: CGPoint(x: 17.75, y: 6), controlPoint2: CGPoint(x: 19, y: 7.25))
        icon.addLine(to: CGPoint(x: 19, y: 21.72))
        icon.addCurve(to: CGPoint(x: 16.21, y: 24.5), controlPoint1: CGPoint(x: 19, y: 23.25), controlPoint2: CGPoint(x: 17.75, y: 24.5))
        icon.addLine(to: CGPoint(x: 2.79, y: 24.5))
        icon.addCurve(to: CGPoint(x: 0, y: 21.72), controlPoint1: CGPoint(x: 1.25, y: 24.5), controlPoint2: CGPoint(x: 0, y: 23.25))
        icon.addLine(to: CGPoint(x: 0, y: 8.78))
        icon.addCurve(to: CGPoint(x: 2.79, y: 6), controlPoint1: CGPoint(x: 0, y: 7.25), controlPoint2: CGPoint(x: 1.25, y: 6))
        icon.addLine(to: CGPoint(x: 6.37, y: 6))
        icon.addLine(to: CGPoint(x: 6.37, y: 8))
        icon.addLine(to: CGPoint(x: 2.79, y: 8))
        icon.addCurve(to: CGPoint(x: 2, y: 8.78), controlPoint1: CGPoint(x: 2.35, y: 8), controlPoint2: CGPoint(x: 2, y: 8.35))
        icon.addLine(to: CGPoint(x: 2, y: 21.72))
        icon.addCurve(to: CGPoint(x: 2.79, y: 22.5), controlPoint1: CGPoint(x: 2, y: 22.15), controlPoint2: CGPoint(x: 2.35, y: 22.5))
        icon.addLine(to: CGPoint(x: 16.21, y: 22.5))
        icon.addCurve(to: CGPoint(x: 17, y: 21.72), controlPoint1: CGPoint(x: 16.65, y: 22.5), controlPoint2: CGPoint(x: 17, y: 22.15))
        icon.addLine(to: CGPoint(x: 17, y: 8.78))
        icon.addCurve(to: CGPoint(x: 16.21, y: 8), controlPoint1: CGPoint(x: 17, y: 8.35), controlPoint2: CGPoint(x: 16.65, y: 8))
        icon.addLine(to: CGPoint(x: 12.7, y: 8))
        icon.close()
        context.saveGState()
        context.translateBy(x: 8.5, y: 6)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 8.5, y: 6))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsQuickActionAdd(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 13.79, y: 4.7))
        icon.addCurve(to: CGPoint(x: 17.78, y: 8.65), controlPoint1: CGPoint(x: 15.99, y: 4.7), controlPoint2: CGPoint(x: 17.78, y: 6.47))
        icon.addLine(to: CGPoint(x: 17.78, y: 18.04))
        icon.addCurve(to: CGPoint(x: 13.79, y: 22), controlPoint1: CGPoint(x: 17.78, y: 20.23), controlPoint2: CGPoint(x: 15.99, y: 22))
        icon.addLine(to: CGPoint(x: 4, y: 22))
        icon.addCurve(to: CGPoint(x: 0, y: 18.04), controlPoint1: CGPoint(x: 1.79, y: 22), controlPoint2: CGPoint(x: 0, y: 20.23))
        icon.addLine(to: CGPoint(x: 0, y: 8.65))
        icon.addCurve(to: CGPoint(x: 4, y: 4.7), controlPoint1: CGPoint(x: 0, y: 6.47), controlPoint2: CGPoint(x: 1.79, y: 4.7))
        icon.addLine(to: CGPoint(x: 13.79, y: 4.7))
        icon.close()
        icon.move(to: CGPoint(x: 15.78, y: 18.04))
        icon.addLine(to: CGPoint(x: 15.78, y: 8.65))
        icon.addCurve(to: CGPoint(x: 13.79, y: 6.67), controlPoint1: CGPoint(x: 15.78, y: 7.56), controlPoint2: CGPoint(x: 14.89, y: 6.67))
        icon.addLine(to: CGPoint(x: 4, y: 6.67))
        icon.addCurve(to: CGPoint(x: 2, y: 8.65), controlPoint1: CGPoint(x: 2.89, y: 6.67), controlPoint2: CGPoint(x: 2, y: 7.56))
        icon.addLine(to: CGPoint(x: 2, y: 18.04))
        icon.addCurve(to: CGPoint(x: 4, y: 20.02), controlPoint1: CGPoint(x: 2, y: 19.14), controlPoint2: CGPoint(x: 2.89, y: 20.02))
        icon.addLine(to: CGPoint(x: 13.79, y: 20.02))
        icon.addCurve(to: CGPoint(x: 15.78, y: 18.04), controlPoint1: CGPoint(x: 14.89, y: 20.02), controlPoint2: CGPoint(x: 15.78, y: 19.14))
        icon.close()
        icon.move(to: CGPoint(x: 12.89, y: 12.61))
        icon.addCurve(to: CGPoint(x: 13.64, y: 13.35), controlPoint1: CGPoint(x: 13.3, y: 12.61), controlPoint2: CGPoint(x: 13.64, y: 12.94))
        icon.addCurve(to: CGPoint(x: 12.89, y: 14.09), controlPoint1: CGPoint(x: 13.64, y: 13.76), controlPoint2: CGPoint(x: 13.3, y: 14.09))
        icon.addLine(to: CGPoint(x: 9.64, y: 14.09))
        icon.addLine(to: CGPoint(x: 9.64, y: 17.3))
        icon.addCurve(to: CGPoint(x: 8.89, y: 18.04), controlPoint1: CGPoint(x: 9.64, y: 17.71), controlPoint2: CGPoint(x: 9.3, y: 18.04))
        icon.addCurve(to: CGPoint(x: 8.14, y: 17.3), controlPoint1: CGPoint(x: 8.48, y: 18.04), controlPoint2: CGPoint(x: 8.14, y: 17.71))
        icon.addLine(to: CGPoint(x: 8.14, y: 14.09))
        icon.addLine(to: CGPoint(x: 4.89, y: 14.09))
        icon.addCurve(to: CGPoint(x: 4.15, y: 13.35), controlPoint1: CGPoint(x: 4.48, y: 14.09), controlPoint2: CGPoint(x: 4.15, y: 13.76))
        icon.addCurve(to: CGPoint(x: 4.89, y: 12.61), controlPoint1: CGPoint(x: 4.15, y: 12.94), controlPoint2: CGPoint(x: 4.48, y: 12.61))
        icon.addLine(to: CGPoint(x: 8.14, y: 12.61))
        icon.addLine(to: CGPoint(x: 8.14, y: 9.39))
        icon.addCurve(to: CGPoint(x: 8.89, y: 8.65), controlPoint1: CGPoint(x: 8.14, y: 8.98), controlPoint2: CGPoint(x: 8.48, y: 8.65))
        icon.addCurve(to: CGPoint(x: 9.64, y: 9.39), controlPoint1: CGPoint(x: 9.3, y: 8.65), controlPoint2: CGPoint(x: 9.64, y: 8.98))
        icon.addLine(to: CGPoint(x: 9.64, y: 12.61))
        icon.addLine(to: CGPoint(x: 12.89, y: 12.61))
        icon.close()
        icon.move(to: CGPoint(x: 19, y: 0))
        icon.addCurve(to: CGPoint(x: 23, y: 3.96), controlPoint1: CGPoint(x: 21.21, y: 0), controlPoint2: CGPoint(x: 23, y: 1.77))
        icon.addLine(to: CGPoint(x: 23, y: 13.35))
        icon.addCurve(to: CGPoint(x: 19.21, y: 17.28), controlPoint1: CGPoint(x: 23, y: 15.46), controlPoint2: CGPoint(x: 21.32, y: 17.18))
        icon.addLine(to: CGPoint(x: 19.21, y: 15.31))
        icon.addCurve(to: CGPoint(x: 21, y: 13.35), controlPoint1: CGPoint(x: 20.21, y: 15.2), controlPoint2: CGPoint(x: 21, y: 14.37))
        icon.addLine(to: CGPoint(x: 21, y: 3.96))
        icon.addCurve(to: CGPoint(x: 19, y: 1.98), controlPoint1: CGPoint(x: 21, y: 2.86), controlPoint2: CGPoint(x: 20.11, y: 1.98))
        icon.addLine(to: CGPoint(x: 9.21, y: 1.98))
        icon.addCurve(to: CGPoint(x: 7.29, y: 3.46), controlPoint1: CGPoint(x: 8.29, y: 1.98), controlPoint2: CGPoint(x: 7.51, y: 2.61))
        icon.addLine(to: CGPoint(x: 5.27, y: 3.46))
        icon.addCurve(to: CGPoint(x: 9.21, y: 0), controlPoint1: CGPoint(x: 5.52, y: 1.51), controlPoint2: CGPoint(x: 7.18, y: 0))
        icon.addLine(to: CGPoint(x: 19, y: 0))
        icon.close()
        context.saveGState()
        context.translateBy(x: 6.5, y: 7)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 6.5, y: 7))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsQuickActionDownload(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 14.43, y: 18.34))
        icon.addCurve(to: CGPoint(x: 15.85, y: 18.36), controlPoint1: CGPoint(x: 14.83, y: 17.96), controlPoint2: CGPoint(x: 15.46, y: 17.97))
        icon.addCurve(to: CGPoint(x: 15.82, y: 19.76), controlPoint1: CGPoint(x: 16.23, y: 18.76), controlPoint2: CGPoint(x: 16.22, y: 19.38))
        icon.addLine(to: CGPoint(x: 12.71, y: 22.71))
        icon.addLine(to: CGPoint(x: 12.71, y: 22.71))
        icon.addLine(to: CGPoint(x: 12.69, y: 22.72))
        icon.addCurve(to: CGPoint(x: 12.56, y: 22.81), controlPoint1: CGPoint(x: 12.65, y: 22.76), controlPoint2: CGPoint(x: 12.6, y: 22.78))
        icon.addCurve(to: CGPoint(x: 12.38, y: 22.92), controlPoint1: CGPoint(x: 12.5, y: 22.85), controlPoint2: CGPoint(x: 12.45, y: 22.9))
        icon.addCurve(to: CGPoint(x: 12, y: 23), controlPoint1: CGPoint(x: 12.26, y: 22.97), controlPoint2: CGPoint(x: 12.13, y: 23))
        icon.addCurve(to: CGPoint(x: 11.62, y: 22.92), controlPoint1: CGPoint(x: 11.87, y: 23), controlPoint2: CGPoint(x: 11.74, y: 22.97))
        icon.addCurve(to: CGPoint(x: 11.45, y: 22.82), controlPoint1: CGPoint(x: 11.56, y: 22.9), controlPoint2: CGPoint(x: 11.51, y: 22.85))
        icon.addCurve(to: CGPoint(x: 11.31, y: 22.72), controlPoint1: CGPoint(x: 11.4, y: 22.79), controlPoint2: CGPoint(x: 11.35, y: 22.77))
        icon.addLine(to: CGPoint(x: 8.18, y: 19.76))
        icon.addCurve(to: CGPoint(x: 8.15, y: 18.36), controlPoint1: CGPoint(x: 7.78, y: 19.38), controlPoint2: CGPoint(x: 7.77, y: 18.76))
        icon.addCurve(to: CGPoint(x: 9.57, y: 18.34), controlPoint1: CGPoint(x: 8.53, y: 17.97), controlPoint2: CGPoint(x: 9.17, y: 17.96))
        icon.addLine(to: CGPoint(x: 11, y: 19.69))
        icon.addLine(to: CGPoint(x: 11, y: 9.17))
        icon.addCurve(to: CGPoint(x: 12, y: 8.18), controlPoint1: CGPoint(x: 11, y: 8.63), controlPoint2: CGPoint(x: 11.45, y: 8.18))
        icon.addCurve(to: CGPoint(x: 13, y: 9.17), controlPoint1: CGPoint(x: 12.55, y: 8.18), controlPoint2: CGPoint(x: 13, y: 8.63))
        icon.addLine(to: CGPoint(x: 13, y: 19.69))
        icon.addLine(to: CGPoint(x: 14.43, y: 18.34))
        icon.close()
        icon.move(to: CGPoint(x: 13.49, y: 0))
        icon.addCurve(to: CGPoint(x: 20.2, y: 4.7), controlPoint1: CGPoint(x: 16.58, y: 0), controlPoint2: CGPoint(x: 19.22, y: 1.91))
        icon.addCurve(to: CGPoint(x: 24, y: 10.37), controlPoint1: CGPoint(x: 22.46, y: 5.65), controlPoint2: CGPoint(x: 24, y: 7.86))
        icon.addCurve(to: CGPoint(x: 17.74, y: 16.54), controlPoint1: CGPoint(x: 24, y: 13.77), controlPoint2: CGPoint(x: 21.19, y: 16.54))
        icon.addLine(to: CGPoint(x: 16.02, y: 16.54))
        icon.addLine(to: CGPoint(x: 16.02, y: 14.57))
        icon.addLine(to: CGPoint(x: 17.74, y: 14.57))
        icon.addCurve(to: CGPoint(x: 22, y: 10.37), controlPoint1: CGPoint(x: 20.09, y: 14.57), controlPoint2: CGPoint(x: 22, y: 12.69))
        icon.addCurve(to: CGPoint(x: 18.53, y: 6.25), controlPoint1: CGPoint(x: 22, y: 8.32), controlPoint2: CGPoint(x: 20.5, y: 6.62))
        icon.addCurve(to: CGPoint(x: 13.49, y: 1.98), controlPoint1: CGPoint(x: 18.16, y: 3.83), controlPoint2: CGPoint(x: 16.05, y: 1.98))
        icon.addCurve(to: CGPoint(x: 8.87, y: 4.88), controlPoint1: CGPoint(x: 11.44, y: 1.98), controlPoint2: CGPoint(x: 9.69, y: 3.16))
        icon.addCurve(to: CGPoint(x: 7.53, y: 4.49), controlPoint1: CGPoint(x: 8.48, y: 4.64), controlPoint2: CGPoint(x: 8.03, y: 4.49))
        icon.addCurve(to: CGPoint(x: 4.98, y: 7.01), controlPoint1: CGPoint(x: 6.12, y: 4.49), controlPoint2: CGPoint(x: 4.98, y: 5.62))
        icon.addCurve(to: CGPoint(x: 4.99, y: 7.11), controlPoint1: CGPoint(x: 4.98, y: 7.05), controlPoint2: CGPoint(x: 4.99, y: 7.08))
        icon.addCurve(to: CGPoint(x: 2, y: 10.79), controlPoint1: CGPoint(x: 3.28, y: 7.49), controlPoint2: CGPoint(x: 2, y: 8.99))
        icon.addCurve(to: CGPoint(x: 5.83, y: 14.57), controlPoint1: CGPoint(x: 2, y: 12.87), controlPoint2: CGPoint(x: 3.72, y: 14.57))
        icon.addLine(to: CGPoint(x: 8.01, y: 14.57))
        icon.addLine(to: CGPoint(x: 8.01, y: 16.54))
        icon.addLine(to: CGPoint(x: 5.83, y: 16.54))
        icon.addCurve(to: CGPoint(x: 0, y: 10.79), controlPoint1: CGPoint(x: 2.62, y: 16.54), controlPoint2: CGPoint(x: 0, y: 13.96))
        icon.addCurve(to: CGPoint(x: 3.19, y: 5.66), controlPoint1: CGPoint(x: 0, y: 8.57), controlPoint2: CGPoint(x: 1.26, y: 6.62))
        icon.addCurve(to: CGPoint(x: 7.53, y: 2.52), controlPoint1: CGPoint(x: 3.77, y: 3.84), controlPoint2: CGPoint(x: 5.5, y: 2.52))
        icon.addCurve(to: CGPoint(x: 8.02, y: 2.54), controlPoint1: CGPoint(x: 7.7, y: 2.52), controlPoint2: CGPoint(x: 7.86, y: 2.53))
        icon.addCurve(to: CGPoint(x: 13.49, y: 0), controlPoint1: CGPoint(x: 9.35, y: 0.96), controlPoint2: CGPoint(x: 11.36, y: 0))
        icon.close()
        context.saveGState()
        context.translateBy(x: 6, y: 7)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 6, y: 7))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsQuickActionCamera(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 23, y: 18))
        icon.addCurve(to: CGPoint(x: 20, y: 21), controlPoint1: CGPoint(x: 23, y: 19.65), controlPoint2: CGPoint(x: 21.65, y: 21))
        icon.addLine(to: CGPoint(x: 5, y: 21))
        icon.addCurve(to: CGPoint(x: 2, y: 18), controlPoint1: CGPoint(x: 3.35, y: 21), controlPoint2: CGPoint(x: 2, y: 19.65))
        icon.addLine(to: CGPoint(x: 2, y: 8))
        icon.addCurve(to: CGPoint(x: 5, y: 5), controlPoint1: CGPoint(x: 2, y: 6.35), controlPoint2: CGPoint(x: 3.35, y: 5))
        icon.addLine(to: CGPoint(x: 5.4, y: 5))
        icon.addCurve(to: CGPoint(x: 7.6, y: 3.9), controlPoint1: CGPoint(x: 6.26, y: 5), controlPoint2: CGPoint(x: 7.08, y: 4.59))
        icon.addLine(to: CGPoint(x: 9.02, y: 2))
        icon.addLine(to: CGPoint(x: 15.98, y: 2))
        icon.addLine(to: CGPoint(x: 16.01, y: 2.02))
        icon.addLine(to: CGPoint(x: 17.42, y: 3.9))
        icon.addCurve(to: CGPoint(x: 19.61, y: 5), controlPoint1: CGPoint(x: 17.94, y: 4.59), controlPoint2: CGPoint(x: 18.75, y: 5))
        icon.addLine(to: CGPoint(x: 20, y: 5))
        icon.addCurve(to: CGPoint(x: 23, y: 8), controlPoint1: CGPoint(x: 21.65, y: 5), controlPoint2: CGPoint(x: 23, y: 6.35))
        icon.addLine(to: CGPoint(x: 23, y: 18))
        icon.close()
        icon.move(to: CGPoint(x: 20, y: 3))
        icon.addCurve(to: CGPoint(x: 25, y: 8), controlPoint1: CGPoint(x: 22.76, y: 3), controlPoint2: CGPoint(x: 25, y: 5.24))
        icon.addLine(to: CGPoint(x: 25, y: 18))
        icon.addCurve(to: CGPoint(x: 20, y: 23), controlPoint1: CGPoint(x: 25, y: 20.76), controlPoint2: CGPoint(x: 22.76, y: 23))
        icon.addLine(to: CGPoint(x: 5, y: 23))
        icon.addCurve(to: CGPoint(x: 0, y: 18), controlPoint1: CGPoint(x: 2.24, y: 23), controlPoint2: CGPoint(x: 0, y: 20.76))
        icon.addLine(to: CGPoint(x: 0, y: 8))
        icon.addCurve(to: CGPoint(x: 5, y: 3), controlPoint1: CGPoint(x: 0, y: 5.24), controlPoint2: CGPoint(x: 2.24, y: 3))
        icon.addLine(to: CGPoint(x: 5.4, y: 3))
        icon.addCurve(to: CGPoint(x: 5.99, y: 2.7), controlPoint1: CGPoint(x: 5.63, y: 3), controlPoint2: CGPoint(x: 5.85, y: 2.89))
        icon.addLine(to: CGPoint(x: 7.39, y: 0.82))
        icon.addCurve(to: CGPoint(x: 9.02, y: 0), controlPoint1: CGPoint(x: 7.77, y: 0.31), controlPoint2: CGPoint(x: 8.38, y: 0))
        icon.addLine(to: CGPoint(x: 15.98, y: 0))
        icon.addCurve(to: CGPoint(x: 17.61, y: 0.82), controlPoint1: CGPoint(x: 16.62, y: 0), controlPoint2: CGPoint(x: 17.23, y: 0.3))
        icon.addLine(to: CGPoint(x: 19.02, y: 2.71))
        icon.addCurve(to: CGPoint(x: 19.61, y: 3), controlPoint1: CGPoint(x: 19.16, y: 2.89), controlPoint2: CGPoint(x: 19.38, y: 3))
        icon.addLine(to: CGPoint(x: 20, y: 3))
        icon.close()
        icon.move(to: CGPoint(x: 12.5, y: 17))
        icon.addCurve(to: CGPoint(x: 8, y: 12.5), controlPoint1: CGPoint(x: 10.02, y: 17), controlPoint2: CGPoint(x: 8, y: 14.98))
        icon.addCurve(to: CGPoint(x: 12.5, y: 8), controlPoint1: CGPoint(x: 8, y: 10.02), controlPoint2: CGPoint(x: 10.02, y: 8))
        icon.addCurve(to: CGPoint(x: 17, y: 12.5), controlPoint1: CGPoint(x: 14.98, y: 8), controlPoint2: CGPoint(x: 17, y: 10.02))
        icon.addCurve(to: CGPoint(x: 12.5, y: 17), controlPoint1: CGPoint(x: 17, y: 14.98), controlPoint2: CGPoint(x: 14.98, y: 17))
        icon.close()
        icon.move(to: CGPoint(x: 12.5, y: 6))
        icon.addCurve(to: CGPoint(x: 6, y: 12.5), controlPoint1: CGPoint(x: 8.92, y: 6), controlPoint2: CGPoint(x: 6, y: 8.92))
        icon.addCurve(to: CGPoint(x: 12.5, y: 19), controlPoint1: CGPoint(x: 6, y: 16.08), controlPoint2: CGPoint(x: 8.92, y: 19))
        icon.addCurve(to: CGPoint(x: 19, y: 12.5), controlPoint1: CGPoint(x: 16.08, y: 19), controlPoint2: CGPoint(x: 19, y: 16.08))
        icon.addCurve(to: CGPoint(x: 12.5, y: 6), controlPoint1: CGPoint(x: 19, y: 8.92), controlPoint2: CGPoint(x: 16.08, y: 6))
        icon.close()
        context.saveGState()
        context.translateBy(x: 6, y: 7)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 6, y: 7))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsQuickActionCalendar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 19.61, y: 0))
        icon.addCurve(to: CGPoint(x: 22, y: 2.38), controlPoint1: CGPoint(x: 20.93, y: 0), controlPoint2: CGPoint(x: 22, y: 1.07))
        icon.addLine(to: CGPoint(x: 22, y: 17.62))
        icon.addCurve(to: CGPoint(x: 19.61, y: 20), controlPoint1: CGPoint(x: 22, y: 18.93), controlPoint2: CGPoint(x: 20.93, y: 20))
        icon.addLine(to: CGPoint(x: 2.39, y: 20))
        icon.addCurve(to: CGPoint(x: 0, y: 17.62), controlPoint1: CGPoint(x: 1.07, y: 20), controlPoint2: CGPoint(x: 0, y: 18.93))
        icon.addLine(to: CGPoint(x: 0, y: 2.38))
        icon.addCurve(to: CGPoint(x: 2.39, y: 0), controlPoint1: CGPoint(x: 0, y: 1.07), controlPoint2: CGPoint(x: 1.07, y: 0))
        icon.addLine(to: CGPoint(x: 19.61, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 20.57, y: 17.14))
        icon.addLine(to: CGPoint(x: 20.57, y: 6.19))
        icon.addLine(to: CGPoint(x: 1.43, y: 6.19))
        icon.addLine(to: CGPoint(x: 1.43, y: 17.14))
        icon.addCurve(to: CGPoint(x: 2.87, y: 18.57), controlPoint1: CGPoint(x: 1.43, y: 17.93), controlPoint2: CGPoint(x: 2.08, y: 18.57))
        icon.addLine(to: CGPoint(x: 19.13, y: 18.57))
        icon.addCurve(to: CGPoint(x: 20.57, y: 17.14), controlPoint1: CGPoint(x: 19.92, y: 18.57), controlPoint2: CGPoint(x: 20.57, y: 17.93))
        icon.close()
        icon.move(to: CGPoint(x: 7.33, y: 10.08))
        icon.addCurve(to: CGPoint(x: 6.42, y: 9.17), controlPoint1: CGPoint(x: 6.83, y: 10.08), controlPoint2: CGPoint(x: 6.42, y: 9.67))
        icon.addCurve(to: CGPoint(x: 7.33, y: 8.25), controlPoint1: CGPoint(x: 6.42, y: 8.66), controlPoint2: CGPoint(x: 6.83, y: 8.25))
        icon.addCurve(to: CGPoint(x: 8.25, y: 9.17), controlPoint1: CGPoint(x: 7.84, y: 8.25), controlPoint2: CGPoint(x: 8.25, y: 8.66))
        icon.addCurve(to: CGPoint(x: 7.33, y: 10.08), controlPoint1: CGPoint(x: 8.25, y: 9.67), controlPoint2: CGPoint(x: 7.84, y: 10.08))
        icon.close()
        icon.move(to: CGPoint(x: 7.33, y: 13.29))
        icon.addCurve(to: CGPoint(x: 6.42, y: 12.38), controlPoint1: CGPoint(x: 6.83, y: 13.29), controlPoint2: CGPoint(x: 6.42, y: 12.88))
        icon.addCurve(to: CGPoint(x: 7.33, y: 11.46), controlPoint1: CGPoint(x: 6.42, y: 11.87), controlPoint2: CGPoint(x: 6.83, y: 11.46))
        icon.addCurve(to: CGPoint(x: 8.25, y: 12.38), controlPoint1: CGPoint(x: 7.84, y: 11.46), controlPoint2: CGPoint(x: 8.25, y: 11.87))
        icon.addCurve(to: CGPoint(x: 7.33, y: 13.29), controlPoint1: CGPoint(x: 8.25, y: 12.88), controlPoint2: CGPoint(x: 7.84, y: 13.29))
        icon.close()
        icon.move(to: CGPoint(x: 7.33, y: 16.5))
        icon.addCurve(to: CGPoint(x: 6.42, y: 15.58), controlPoint1: CGPoint(x: 6.83, y: 16.5), controlPoint2: CGPoint(x: 6.42, y: 16.09))
        icon.addCurve(to: CGPoint(x: 7.33, y: 14.67), controlPoint1: CGPoint(x: 6.42, y: 15.08), controlPoint2: CGPoint(x: 6.83, y: 14.67))
        icon.addCurve(to: CGPoint(x: 8.25, y: 15.58), controlPoint1: CGPoint(x: 7.84, y: 14.67), controlPoint2: CGPoint(x: 8.25, y: 15.08))
        icon.addCurve(to: CGPoint(x: 7.33, y: 16.5), controlPoint1: CGPoint(x: 8.25, y: 16.09), controlPoint2: CGPoint(x: 7.84, y: 16.5))
        icon.close()
        icon.move(to: CGPoint(x: 3.67, y: 13.29))
        icon.addCurve(to: CGPoint(x: 2.75, y: 12.38), controlPoint1: CGPoint(x: 3.16, y: 13.29), controlPoint2: CGPoint(x: 2.75, y: 12.88))
        icon.addCurve(to: CGPoint(x: 3.67, y: 11.46), controlPoint1: CGPoint(x: 2.75, y: 11.87), controlPoint2: CGPoint(x: 3.16, y: 11.46))
        icon.addCurve(to: CGPoint(x: 4.58, y: 12.38), controlPoint1: CGPoint(x: 4.17, y: 11.46), controlPoint2: CGPoint(x: 4.58, y: 11.87))
        icon.addCurve(to: CGPoint(x: 3.67, y: 13.29), controlPoint1: CGPoint(x: 4.58, y: 12.88), controlPoint2: CGPoint(x: 4.17, y: 13.29))
        icon.close()
        icon.move(to: CGPoint(x: 3.67, y: 16.5))
        icon.addCurve(to: CGPoint(x: 2.75, y: 15.58), controlPoint1: CGPoint(x: 3.16, y: 16.5), controlPoint2: CGPoint(x: 2.75, y: 16.09))
        icon.addCurve(to: CGPoint(x: 3.67, y: 14.67), controlPoint1: CGPoint(x: 2.75, y: 15.08), controlPoint2: CGPoint(x: 3.16, y: 14.67))
        icon.addCurve(to: CGPoint(x: 4.58, y: 15.58), controlPoint1: CGPoint(x: 4.17, y: 14.67), controlPoint2: CGPoint(x: 4.58, y: 15.08))
        icon.addCurve(to: CGPoint(x: 3.67, y: 16.5), controlPoint1: CGPoint(x: 4.58, y: 16.09), controlPoint2: CGPoint(x: 4.17, y: 16.5))
        icon.close()
        icon.move(to: CGPoint(x: 11, y: 10.08))
        icon.addCurve(to: CGPoint(x: 10.08, y: 9.17), controlPoint1: CGPoint(x: 10.49, y: 10.08), controlPoint2: CGPoint(x: 10.08, y: 9.67))
        icon.addCurve(to: CGPoint(x: 11, y: 8.25), controlPoint1: CGPoint(x: 10.08, y: 8.66), controlPoint2: CGPoint(x: 10.49, y: 8.25))
        icon.addCurve(to: CGPoint(x: 11.92, y: 9.17), controlPoint1: CGPoint(x: 11.51, y: 8.25), controlPoint2: CGPoint(x: 11.92, y: 8.66))
        icon.addCurve(to: CGPoint(x: 11, y: 10.08), controlPoint1: CGPoint(x: 11.92, y: 9.67), controlPoint2: CGPoint(x: 11.51, y: 10.08))
        icon.close()
        icon.move(to: CGPoint(x: 11, y: 13.29))
        icon.addCurve(to: CGPoint(x: 10.08, y: 12.38), controlPoint1: CGPoint(x: 10.49, y: 13.29), controlPoint2: CGPoint(x: 10.08, y: 12.88))
        icon.addCurve(to: CGPoint(x: 11, y: 11.46), controlPoint1: CGPoint(x: 10.08, y: 11.87), controlPoint2: CGPoint(x: 10.49, y: 11.46))
        icon.addCurve(to: CGPoint(x: 11.92, y: 12.38), controlPoint1: CGPoint(x: 11.51, y: 11.46), controlPoint2: CGPoint(x: 11.92, y: 11.87))
        icon.addCurve(to: CGPoint(x: 11, y: 13.29), controlPoint1: CGPoint(x: 11.92, y: 12.88), controlPoint2: CGPoint(x: 11.51, y: 13.29))
        icon.close()
        icon.move(to: CGPoint(x: 14.67, y: 13.75))
        icon.addCurve(to: CGPoint(x: 13.29, y: 12.38), controlPoint1: CGPoint(x: 13.91, y: 13.75), controlPoint2: CGPoint(x: 13.29, y: 13.13))
        icon.addCurve(to: CGPoint(x: 14.67, y: 11), controlPoint1: CGPoint(x: 13.29, y: 11.62), controlPoint2: CGPoint(x: 13.91, y: 11))
        icon.addCurve(to: CGPoint(x: 16.04, y: 12.38), controlPoint1: CGPoint(x: 15.43, y: 11), controlPoint2: CGPoint(x: 16.04, y: 11.62))
        icon.addCurve(to: CGPoint(x: 14.67, y: 13.75), controlPoint1: CGPoint(x: 16.04, y: 13.13), controlPoint2: CGPoint(x: 15.43, y: 13.75))
        icon.close()
        icon.move(to: CGPoint(x: 11, y: 16.5))
        icon.addCurve(to: CGPoint(x: 10.08, y: 15.58), controlPoint1: CGPoint(x: 10.49, y: 16.5), controlPoint2: CGPoint(x: 10.08, y: 16.09))
        icon.addCurve(to: CGPoint(x: 11, y: 14.67), controlPoint1: CGPoint(x: 10.08, y: 15.08), controlPoint2: CGPoint(x: 10.49, y: 14.67))
        icon.addCurve(to: CGPoint(x: 11.92, y: 15.58), controlPoint1: CGPoint(x: 11.51, y: 14.67), controlPoint2: CGPoint(x: 11.92, y: 15.08))
        icon.addCurve(to: CGPoint(x: 11, y: 16.5), controlPoint1: CGPoint(x: 11.92, y: 16.09), controlPoint2: CGPoint(x: 11.51, y: 16.5))
        icon.close()
        icon.move(to: CGPoint(x: 14.67, y: 10.08))
        icon.addCurve(to: CGPoint(x: 13.75, y: 9.17), controlPoint1: CGPoint(x: 14.16, y: 10.08), controlPoint2: CGPoint(x: 13.75, y: 9.67))
        icon.addCurve(to: CGPoint(x: 14.67, y: 8.25), controlPoint1: CGPoint(x: 13.75, y: 8.66), controlPoint2: CGPoint(x: 14.16, y: 8.25))
        icon.addCurve(to: CGPoint(x: 15.58, y: 9.17), controlPoint1: CGPoint(x: 15.17, y: 8.25), controlPoint2: CGPoint(x: 15.58, y: 8.66))
        icon.addCurve(to: CGPoint(x: 14.67, y: 10.08), controlPoint1: CGPoint(x: 15.58, y: 9.67), controlPoint2: CGPoint(x: 15.17, y: 10.08))
        icon.close()
        icon.move(to: CGPoint(x: 14.67, y: 16.5))
        icon.addCurve(to: CGPoint(x: 13.75, y: 15.58), controlPoint1: CGPoint(x: 14.16, y: 16.5), controlPoint2: CGPoint(x: 13.75, y: 16.09))
        icon.addCurve(to: CGPoint(x: 14.67, y: 14.67), controlPoint1: CGPoint(x: 13.75, y: 15.08), controlPoint2: CGPoint(x: 14.16, y: 14.67))
        icon.addCurve(to: CGPoint(x: 15.58, y: 15.58), controlPoint1: CGPoint(x: 15.17, y: 14.67), controlPoint2: CGPoint(x: 15.58, y: 15.08))
        icon.addCurve(to: CGPoint(x: 14.67, y: 16.5), controlPoint1: CGPoint(x: 15.58, y: 16.09), controlPoint2: CGPoint(x: 15.17, y: 16.5))
        icon.close()
        icon.move(to: CGPoint(x: 18.33, y: 10.08))
        icon.addCurve(to: CGPoint(x: 17.42, y: 9.17), controlPoint1: CGPoint(x: 17.83, y: 10.08), controlPoint2: CGPoint(x: 17.42, y: 9.67))
        icon.addCurve(to: CGPoint(x: 18.33, y: 8.25), controlPoint1: CGPoint(x: 17.42, y: 8.66), controlPoint2: CGPoint(x: 17.83, y: 8.25))
        icon.addCurve(to: CGPoint(x: 19.25, y: 9.17), controlPoint1: CGPoint(x: 18.84, y: 8.25), controlPoint2: CGPoint(x: 19.25, y: 8.66))
        icon.addCurve(to: CGPoint(x: 18.33, y: 10.08), controlPoint1: CGPoint(x: 19.25, y: 9.67), controlPoint2: CGPoint(x: 18.84, y: 10.08))
        icon.close()
        icon.move(to: CGPoint(x: 18.33, y: 13.29))
        icon.addCurve(to: CGPoint(x: 17.42, y: 12.38), controlPoint1: CGPoint(x: 17.83, y: 13.29), controlPoint2: CGPoint(x: 17.42, y: 12.88))
        icon.addCurve(to: CGPoint(x: 18.33, y: 11.46), controlPoint1: CGPoint(x: 17.42, y: 11.87), controlPoint2: CGPoint(x: 17.83, y: 11.46))
        icon.addCurve(to: CGPoint(x: 19.25, y: 12.38), controlPoint1: CGPoint(x: 18.84, y: 11.46), controlPoint2: CGPoint(x: 19.25, y: 11.87))
        icon.addCurve(to: CGPoint(x: 18.33, y: 13.29), controlPoint1: CGPoint(x: 19.25, y: 12.88), controlPoint2: CGPoint(x: 18.84, y: 13.29))
        icon.close()
        context.saveGState()
        context.translateBy(x: 7, y: 8)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 7, y: 8))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsQuickActionTasks(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 20.57, y: 17.14))
        icon.addCurve(to: CGPoint(x: 19.13, y: 18.57), controlPoint1: CGPoint(x: 20.57, y: 17.93), controlPoint2: CGPoint(x: 19.92, y: 18.57))
        icon.addLine(to: CGPoint(x: 2.87, y: 18.57))
        icon.addCurve(to: CGPoint(x: 1.43, y: 17.14), controlPoint1: CGPoint(x: 2.08, y: 18.57), controlPoint2: CGPoint(x: 1.43, y: 17.93))
        icon.addLine(to: CGPoint(x: 1.43, y: 6.19))
        icon.addLine(to: CGPoint(x: 20.57, y: 6.19))
        icon.addLine(to: CGPoint(x: 20.57, y: 17.14))
        icon.close()
        icon.move(to: CGPoint(x: 19.61, y: 0))
        icon.addCurve(to: CGPoint(x: 22, y: 2.38), controlPoint1: CGPoint(x: 20.93, y: 0), controlPoint2: CGPoint(x: 22, y: 1.07))
        icon.addLine(to: CGPoint(x: 22, y: 17.62))
        icon.addCurve(to: CGPoint(x: 19.61, y: 20), controlPoint1: CGPoint(x: 22, y: 18.93), controlPoint2: CGPoint(x: 20.93, y: 20))
        icon.addLine(to: CGPoint(x: 2.39, y: 20))
        icon.addCurve(to: CGPoint(x: 0, y: 17.62), controlPoint1: CGPoint(x: 1.07, y: 20), controlPoint2: CGPoint(x: 0, y: 18.93))
        icon.addLine(to: CGPoint(x: 0, y: 2.38))
        icon.addCurve(to: CGPoint(x: 2.39, y: 0), controlPoint1: CGPoint(x: 0, y: 1.07), controlPoint2: CGPoint(x: 1.07, y: 0))
        icon.addLine(to: CGPoint(x: 19.61, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 6.84, y: 12.95))
        icon.addLine(to: CGPoint(x: 18.03, y: 12.95))
        icon.addCurve(to: CGPoint(x: 18.65, y: 12.33), controlPoint1: CGPoint(x: 18.37, y: 12.95), controlPoint2: CGPoint(x: 18.65, y: 12.68))
        icon.addCurve(to: CGPoint(x: 18.03, y: 11.71), controlPoint1: CGPoint(x: 18.65, y: 11.99), controlPoint2: CGPoint(x: 18.37, y: 11.71))
        icon.addLine(to: CGPoint(x: 6.84, y: 11.71))
        icon.addCurve(to: CGPoint(x: 6.22, y: 12.33), controlPoint1: CGPoint(x: 6.5, y: 11.71), controlPoint2: CGPoint(x: 6.22, y: 11.99))
        icon.addCurve(to: CGPoint(x: 6.84, y: 12.95), controlPoint1: CGPoint(x: 6.22, y: 12.68), controlPoint2: CGPoint(x: 6.5, y: 12.95))
        icon.close()
        icon.move(to: CGPoint(x: 6.84, y: 16.48))
        icon.addLine(to: CGPoint(x: 18.03, y: 16.48))
        icon.addCurve(to: CGPoint(x: 18.65, y: 15.86), controlPoint1: CGPoint(x: 18.37, y: 16.48), controlPoint2: CGPoint(x: 18.65, y: 16.2))
        icon.addCurve(to: CGPoint(x: 18.03, y: 15.24), controlPoint1: CGPoint(x: 18.65, y: 15.52), controlPoint2: CGPoint(x: 18.37, y: 15.24))
        icon.addLine(to: CGPoint(x: 6.84, y: 15.24))
        icon.addCurve(to: CGPoint(x: 6.22, y: 15.86), controlPoint1: CGPoint(x: 6.5, y: 15.24), controlPoint2: CGPoint(x: 6.22, y: 15.52))
        icon.addCurve(to: CGPoint(x: 6.84, y: 16.48), controlPoint1: CGPoint(x: 6.22, y: 16.2), controlPoint2: CGPoint(x: 6.5, y: 16.48))
        icon.close()
        icon.move(to: CGPoint(x: 6.84, y: 9.33))
        icon.addLine(to: CGPoint(x: 18.03, y: 9.33))
        icon.addCurve(to: CGPoint(x: 18.65, y: 8.71), controlPoint1: CGPoint(x: 18.37, y: 9.33), controlPoint2: CGPoint(x: 18.65, y: 9.06))
        icon.addCurve(to: CGPoint(x: 18.03, y: 8.1), controlPoint1: CGPoint(x: 18.65, y: 8.37), controlPoint2: CGPoint(x: 18.37, y: 8.1))
        icon.addLine(to: CGPoint(x: 6.84, y: 8.1))
        icon.addCurve(to: CGPoint(x: 6.22, y: 8.71), controlPoint1: CGPoint(x: 6.5, y: 8.1), controlPoint2: CGPoint(x: 6.22, y: 8.37))
        icon.addCurve(to: CGPoint(x: 6.84, y: 9.33), controlPoint1: CGPoint(x: 6.22, y: 9.06), controlPoint2: CGPoint(x: 6.5, y: 9.33))
        icon.close()
        icon.move(to: CGPoint(x: 3.83, y: 9.71))
        icon.addCurve(to: CGPoint(x: 4.78, y: 8.76), controlPoint1: CGPoint(x: 4.35, y: 9.71), controlPoint2: CGPoint(x: 4.78, y: 9.29))
        icon.addCurve(to: CGPoint(x: 3.83, y: 7.81), controlPoint1: CGPoint(x: 4.78, y: 8.24), controlPoint2: CGPoint(x: 4.35, y: 7.81))
        icon.addCurve(to: CGPoint(x: 2.87, y: 8.76), controlPoint1: CGPoint(x: 3.3, y: 7.81), controlPoint2: CGPoint(x: 2.87, y: 8.24))
        icon.addCurve(to: CGPoint(x: 3.83, y: 9.71), controlPoint1: CGPoint(x: 2.87, y: 9.29), controlPoint2: CGPoint(x: 3.3, y: 9.71))
        icon.close()
        icon.move(to: CGPoint(x: 3.83, y: 16.86))
        icon.addCurve(to: CGPoint(x: 4.78, y: 15.9), controlPoint1: CGPoint(x: 4.35, y: 16.86), controlPoint2: CGPoint(x: 4.78, y: 16.43))
        icon.addCurve(to: CGPoint(x: 3.83, y: 14.95), controlPoint1: CGPoint(x: 4.78, y: 15.38), controlPoint2: CGPoint(x: 4.35, y: 14.95))
        icon.addCurve(to: CGPoint(x: 2.87, y: 15.9), controlPoint1: CGPoint(x: 3.3, y: 14.95), controlPoint2: CGPoint(x: 2.87, y: 15.38))
        icon.addCurve(to: CGPoint(x: 3.83, y: 16.86), controlPoint1: CGPoint(x: 2.87, y: 16.43), controlPoint2: CGPoint(x: 3.3, y: 16.86))
        icon.close()
        icon.move(to: CGPoint(x: 3.83, y: 13.33))
        icon.addCurve(to: CGPoint(x: 4.78, y: 12.38), controlPoint1: CGPoint(x: 4.35, y: 13.33), controlPoint2: CGPoint(x: 4.78, y: 12.91))
        icon.addCurve(to: CGPoint(x: 3.83, y: 11.43), controlPoint1: CGPoint(x: 4.78, y: 11.86), controlPoint2: CGPoint(x: 4.35, y: 11.43))
        icon.addCurve(to: CGPoint(x: 2.87, y: 12.38), controlPoint1: CGPoint(x: 3.3, y: 11.43), controlPoint2: CGPoint(x: 2.87, y: 11.86))
        icon.addCurve(to: CGPoint(x: 3.83, y: 13.33), controlPoint1: CGPoint(x: 2.87, y: 12.91), controlPoint2: CGPoint(x: 3.3, y: 13.33))
        icon.close()
        context.saveGState()
        context.translateBy(x: 7, y: 8)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 7, y: 8))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsQuickActionSearch(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 17.47, y: 14.51))
        icon.addCurve(to: CGPoint(x: 17.74, y: 14.73), controlPoint1: CGPoint(x: 17.57, y: 14.57), controlPoint2: CGPoint(x: 17.65, y: 14.64))
        icon.addLine(to: CGPoint(x: 23.93, y: 20.92))
        icon.addCurve(to: CGPoint(x: 23.93, y: 23.48), controlPoint1: CGPoint(x: 24.63, y: 21.62), controlPoint2: CGPoint(x: 24.63, y: 22.77))
        icon.addCurve(to: CGPoint(x: 21.37, y: 23.48), controlPoint1: CGPoint(x: 23.22, y: 24.18), controlPoint2: CGPoint(x: 22.07, y: 24.18))
        icon.addLine(to: CGPoint(x: 15.18, y: 17.29))
        icon.addCurve(to: CGPoint(x: 14.99, y: 17.07), controlPoint1: CGPoint(x: 15.11, y: 17.22), controlPoint2: CGPoint(x: 15.05, y: 17.15))
        icon.addCurve(to: CGPoint(x: 9.5, y: 18.8), controlPoint1: CGPoint(x: 13.44, y: 18.16), controlPoint2: CGPoint(x: 11.54, y: 18.8))
        icon.addCurve(to: CGPoint(x: 0, y: 9.4), controlPoint1: CGPoint(x: 4.25, y: 18.8), controlPoint2: CGPoint(x: 0, y: 14.59))
        icon.addCurve(to: CGPoint(x: 9.5, y: 0), controlPoint1: CGPoint(x: 0, y: 4.21), controlPoint2: CGPoint(x: 4.25, y: 0))
        icon.addCurve(to: CGPoint(x: 18.99, y: 9.4), controlPoint1: CGPoint(x: 14.74, y: 0), controlPoint2: CGPoint(x: 18.99, y: 4.21))
        icon.addCurve(to: CGPoint(x: 17.47, y: 14.51), controlPoint1: CGPoint(x: 18.99, y: 11.28), controlPoint2: CGPoint(x: 18.43, y: 13.04))
        icon.close()
        icon.move(to: CGPoint(x: 9.5, y: 16.83))
        icon.addCurve(to: CGPoint(x: 16.99, y: 9.4), controlPoint1: CGPoint(x: 13.64, y: 16.83), controlPoint2: CGPoint(x: 16.99, y: 13.5))
        icon.addCurve(to: CGPoint(x: 9.5, y: 1.98), controlPoint1: CGPoint(x: 16.99, y: 5.3), controlPoint2: CGPoint(x: 13.64, y: 1.98))
        icon.addCurve(to: CGPoint(x: 2, y: 9.4), controlPoint1: CGPoint(x: 5.36, y: 1.98), controlPoint2: CGPoint(x: 2, y: 5.3))
        icon.addCurve(to: CGPoint(x: 9.5, y: 16.83), controlPoint1: CGPoint(x: 2, y: 13.5), controlPoint2: CGPoint(x: 5.36, y: 16.83))
        icon.close()
        context.saveGState()
        context.translateBy(x: 6, y: 6)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 6, y: 6))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsQuickActionMuted(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 21.44, y: 18.17))
        icon.addCurve(to: CGPoint(x: 22.88, y: 20.02), controlPoint1: CGPoint(x: 22.27, y: 18.38), controlPoint2: CGPoint(x: 22.88, y: 19.13))
        icon.addCurve(to: CGPoint(x: 20.98, y: 21.93), controlPoint1: CGPoint(x: 22.88, y: 21.07), controlPoint2: CGPoint(x: 22.03, y: 21.93))
        icon.addLine(to: CGPoint(x: 14.41, y: 21.93))
        icon.addCurve(to: CGPoint(x: 11.08, y: 24), controlPoint1: CGPoint(x: 13.8, y: 23.18), controlPoint2: CGPoint(x: 12.51, y: 24))
        icon.addCurve(to: CGPoint(x: 7.75, y: 21.93), controlPoint1: CGPoint(x: 9.64, y: 24), controlPoint2: CGPoint(x: 8.36, y: 23.18))
        icon.addLine(to: CGPoint(x: 1.91, y: 21.93))
        icon.addCurve(to: CGPoint(x: 0, y: 20.02), controlPoint1: CGPoint(x: 0.86, y: 21.93), controlPoint2: CGPoint(x: 0, y: 21.07))
        icon.addCurve(to: CGPoint(x: 1.45, y: 18.17), controlPoint1: CGPoint(x: 0, y: 19.13), controlPoint2: CGPoint(x: 0.62, y: 18.38))
        icon.addCurve(to: CGPoint(x: 3.81, y: 12.17), controlPoint1: CGPoint(x: 2.97, y: 16.54), controlPoint2: CGPoint(x: 3.81, y: 14.42))
        icon.addLine(to: CGPoint(x: 3.81, y: 9.54))
        icon.addCurve(to: CGPoint(x: 8.61, y: 2.45), controlPoint1: CGPoint(x: 3.81, y: 6.42), controlPoint2: CGPoint(x: 5.75, y: 3.6))
        icon.addCurve(to: CGPoint(x: 11.44, y: 0), controlPoint1: CGPoint(x: 8.81, y: 1.07), controlPoint2: CGPoint(x: 10, y: 0))
        icon.addCurve(to: CGPoint(x: 14.3, y: 2.86), controlPoint1: CGPoint(x: 13.02, y: 0), controlPoint2: CGPoint(x: 14.3, y: 1.28))
        icon.addLine(to: CGPoint(x: 14.3, y: 3.14))
        icon.addLine(to: CGPoint(x: 12.39, y: 3.14))
        icon.addLine(to: CGPoint(x: 12.39, y: 2.86))
        icon.addCurve(to: CGPoint(x: 11.44, y: 1.91), controlPoint1: CGPoint(x: 12.39, y: 2.33), controlPoint2: CGPoint(x: 11.97, y: 1.91))
        icon.addCurve(to: CGPoint(x: 10.49, y: 2.86), controlPoint1: CGPoint(x: 10.92, y: 1.91), controlPoint2: CGPoint(x: 10.49, y: 2.33))
        icon.addLine(to: CGPoint(x: 10.49, y: 3.85))
        icon.addLine(to: CGPoint(x: 9.81, y: 4.05))
        icon.addCurve(to: CGPoint(x: 5.72, y: 9.54), controlPoint1: CGPoint(x: 7.4, y: 4.77), controlPoint2: CGPoint(x: 5.72, y: 7.03))
        icon.addLine(to: CGPoint(x: 5.72, y: 12.17))
        icon.addCurve(to: CGPoint(x: 2.58, y: 19.74), controlPoint1: CGPoint(x: 5.72, y: 15.03), controlPoint2: CGPoint(x: 4.6, y: 17.72))
        icon.addLine(to: CGPoint(x: 2.3, y: 20.02))
        icon.addLine(to: CGPoint(x: 9.14, y: 20.02))
        icon.addLine(to: CGPoint(x: 9.33, y: 20.74))
        icon.addCurve(to: CGPoint(x: 11.08, y: 22.09), controlPoint1: CGPoint(x: 9.53, y: 21.54), controlPoint2: CGPoint(x: 10.25, y: 22.09))
        icon.addCurve(to: CGPoint(x: 12.83, y: 20.74), controlPoint1: CGPoint(x: 11.9, y: 22.09), controlPoint2: CGPoint(x: 12.62, y: 21.54))
        icon.addLine(to: CGPoint(x: 13.01, y: 20.02))
        icon.addLine(to: CGPoint(x: 20.58, y: 20.02))
        icon.addLine(to: CGPoint(x: 20.3, y: 19.74))
        icon.addCurve(to: CGPoint(x: 17.16, y: 12.17), controlPoint1: CGPoint(x: 18.28, y: 17.72), controlPoint2: CGPoint(x: 17.16, y: 15.03))
        icon.addLine(to: CGPoint(x: 19.07, y: 12.17))
        icon.addCurve(to: CGPoint(x: 21.44, y: 18.17), controlPoint1: CGPoint(x: 19.07, y: 14.42), controlPoint2: CGPoint(x: 19.91, y: 16.54))
        icon.close()
        icon.move(to: CGPoint(x: 11.77, y: 14.85))
        icon.addLine(to: CGPoint(x: 14.42, y: 14.85))
        icon.addLine(to: CGPoint(x: 14.42, y: 16.38))
        icon.addLine(to: CGPoint(x: 9.38, y: 16.38))
        icon.addLine(to: CGPoint(x: 9.38, y: 15.27))
        icon.addLine(to: CGPoint(x: 12.13, y: 11.92))
        icon.addLine(to: CGPoint(x: 9.42, y: 11.92))
        icon.addLine(to: CGPoint(x: 9.42, y: 10.39))
        icon.addLine(to: CGPoint(x: 14.36, y: 10.39))
        icon.addLine(to: CGPoint(x: 14.36, y: 11.6))
        icon.addLine(to: CGPoint(x: 11.77, y: 14.85))
        icon.close()
        icon.move(to: CGPoint(x: 18.28, y: 9.02))
        icon.addLine(to: CGPoint(x: 21.9, y: 9.02))
        icon.addLine(to: CGPoint(x: 21.9, y: 10.66))
        icon.addLine(to: CGPoint(x: 15.79, y: 10.66))
        icon.addLine(to: CGPoint(x: 15.79, y: 9.42))
        icon.addLine(to: CGPoint(x: 15.83, y: 9.37))
        icon.addLine(to: CGPoint(x: 19.48, y: 4.83))
        icon.addLine(to: CGPoint(x: 15.82, y: 4.83))
        icon.addLine(to: CGPoint(x: 15.82, y: 3.19))
        icon.addLine(to: CGPoint(x: 21.84, y: 3.19))
        icon.addLine(to: CGPoint(x: 21.84, y: 4.52))
        icon.addLine(to: CGPoint(x: 18.28, y: 9.02))
        icon.close()
        context.saveGState()
        context.translateBy(x: 6.5, y: 6)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 6.5, y: 6))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsQuickActionMail(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 2, y: 2))
        icon.addLine(to: CGPoint(x: 2, y: 16))
        icon.addLine(to: CGPoint(x: 24, y: 16))
        icon.addLine(to: CGPoint(x: 24, y: 2))
        icon.addLine(to: CGPoint(x: 2, y: 2))
        icon.close()
        icon.move(to: CGPoint(x: 2, y: 0))
        icon.addLine(to: CGPoint(x: 24, y: 0))
        icon.addCurve(to: CGPoint(x: 26, y: 2), controlPoint1: CGPoint(x: 25.1, y: 0), controlPoint2: CGPoint(x: 26, y: 0.9))
        icon.addLine(to: CGPoint(x: 26, y: 16))
        icon.addCurve(to: CGPoint(x: 24, y: 18), controlPoint1: CGPoint(x: 26, y: 17.1), controlPoint2: CGPoint(x: 25.1, y: 18))
        icon.addLine(to: CGPoint(x: 2, y: 18))
        icon.addCurve(to: CGPoint(x: 0, y: 16), controlPoint1: CGPoint(x: 0.9, y: 18), controlPoint2: CGPoint(x: 0, y: 17.1))
        icon.addLine(to: CGPoint(x: 0, y: 2))
        icon.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 17.94, y: 10.37))
        icon.addLine(to: CGPoint(x: 16.54, y: 11.78))
        icon.addCurve(to: CGPoint(x: 9.46, y: 11.78), controlPoint1: CGPoint(x: 14.58, y: 13.73), controlPoint2: CGPoint(x: 11.42, y: 13.73))
        icon.addLine(to: CGPoint(x: 8.07, y: 10.38))
        icon.addLine(to: CGPoint(x: 1.73, y: 16.69))
        icon.addLine(to: CGPoint(x: 0.32, y: 15.27))
        icon.addLine(to: CGPoint(x: 6.65, y: 8.97))
        icon.addLine(to: CGPoint(x: 0, y: 2.31))
        icon.addLine(to: CGPoint(x: 0, y: 2))
        icon.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
        icon.addLine(to: CGPoint(x: 24, y: 0))
        icon.addCurve(to: CGPoint(x: 26, y: 2), controlPoint1: CGPoint(x: 25.1, y: 0), controlPoint2: CGPoint(x: 26, y: 0.9))
        icon.addLine(to: CGPoint(x: 26, y: 2.31))
        icon.addLine(to: CGPoint(x: 19.36, y: 8.96))
        icon.addLine(to: CGPoint(x: 25.7, y: 15.27))
        icon.addLine(to: CGPoint(x: 24.28, y: 16.69))
        icon.addLine(to: CGPoint(x: 17.94, y: 10.37))
        icon.close()
        icon.move(to: CGPoint(x: 23.49, y: 2))
        icon.addLine(to: CGPoint(x: 2.51, y: 2))
        icon.addLine(to: CGPoint(x: 10.88, y: 10.36))
        icon.addCurve(to: CGPoint(x: 15.12, y: 10.36), controlPoint1: CGPoint(x: 12.05, y: 11.54), controlPoint2: CGPoint(x: 13.95, y: 11.54))
        icon.addLine(to: CGPoint(x: 23.49, y: 2))
        icon.close()
        context.saveGState()
        context.translateBy(x: 5, y: 9)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 5, y: 9))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsQuickActionEdit(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 18.26, y: 9.89))
        icon.addLine(to: CGPoint(x: 20.18, y: 7.99))
        icon.addLine(to: CGPoint(x: 20.18, y: 20.13))
        icon.addCurve(to: CGPoint(x: 17.3, y: 23), controlPoint1: CGPoint(x: 20.18, y: 21.71), controlPoint2: CGPoint(x: 18.89, y: 23))
        icon.addLine(to: CGPoint(x: 2.88, y: 23))
        icon.addCurve(to: CGPoint(x: 0, y: 20.13), controlPoint1: CGPoint(x: 1.29, y: 23), controlPoint2: CGPoint(x: 0, y: 21.71))
        icon.addLine(to: CGPoint(x: 0, y: 5.79))
        icon.addCurve(to: CGPoint(x: 2.88, y: 2.92), controlPoint1: CGPoint(x: 0, y: 4.21), controlPoint2: CGPoint(x: 1.29, y: 2.92))
        icon.addLine(to: CGPoint(x: 14.85, y: 2.92))
        icon.addLine(to: CGPoint(x: 12.91, y: 4.84))
        icon.addLine(to: CGPoint(x: 2.88, y: 4.84))
        icon.addCurve(to: CGPoint(x: 1.92, y: 5.79), controlPoint1: CGPoint(x: 2.35, y: 4.84), controlPoint2: CGPoint(x: 1.92, y: 5.27))
        icon.addLine(to: CGPoint(x: 1.92, y: 20.13))
        icon.addCurve(to: CGPoint(x: 2.88, y: 21.09), controlPoint1: CGPoint(x: 1.92, y: 20.66), controlPoint2: CGPoint(x: 2.35, y: 21.09))
        icon.addLine(to: CGPoint(x: 17.3, y: 21.09))
        icon.addCurve(to: CGPoint(x: 18.26, y: 20.13), controlPoint1: CGPoint(x: 17.83, y: 21.09), controlPoint2: CGPoint(x: 18.26, y: 20.66))
        icon.addLine(to: CGPoint(x: 18.26, y: 9.89))
        icon.close()
        icon.move(to: CGPoint(x: 8.84, y: 12.07))
        icon.addLine(to: CGPoint(x: 19.33, y: 1.62))
        icon.addLine(to: CGPoint(x: 21.37, y: 3.65))
        icon.addLine(to: CGPoint(x: 10.88, y: 14.09))
        icon.addLine(to: CGPoint(x: 8.1, y: 14.82))
        icon.addLine(to: CGPoint(x: 8.84, y: 12.07))
        icon.close()
        icon.move(to: CGPoint(x: 22.72, y: 2.3))
        icon.addLine(to: CGPoint(x: 22.72, y: 2.3))
        icon.addCurve(to: CGPoint(x: 22.05, y: 2.98), controlPoint1: CGPoint(x: 22.35, y: 2.67), controlPoint2: CGPoint(x: 22.05, y: 2.98))
        icon.addLine(to: CGPoint(x: 20.01, y: 0.95))
        icon.addCurve(to: CGPoint(x: 20.67, y: 0.28), controlPoint1: CGPoint(x: 20.01, y: 0.95), controlPoint2: CGPoint(x: 20.3, y: 0.65))
        icon.addLine(to: CGPoint(x: 20.68, y: 0.28))
        icon.addCurve(to: CGPoint(x: 22.03, y: 0.27), controlPoint1: CGPoint(x: 21.05, y: -0.09), controlPoint2: CGPoint(x: 21.65, y: -0.09))
        icon.addLine(to: CGPoint(x: 22.72, y: 0.96))
        icon.addCurve(to: CGPoint(x: 22.72, y: 2.3), controlPoint1: CGPoint(x: 23.09, y: 1.33), controlPoint2: CGPoint(x: 23.09, y: 1.93))
        icon.close()
        context.saveGState()
        context.translateBy(x: 7.5, y: 5.5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 7.5, y: 5.5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsQuickActionDelete(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 15.46, y: 22.89))
        icon.addCurve(to: CGPoint(x: 15.32, y: 23.35), controlPoint1: CGPoint(x: 15.43, y: 23.12), controlPoint2: CGPoint(x: 15.37, y: 23.27))
        icon.addLine(to: CGPoint(x: 4.18, y: 23.35))
        icon.addCurve(to: CGPoint(x: 4.04, y: 22.89), controlPoint1: CGPoint(x: 4.13, y: 23.27), controlPoint2: CGPoint(x: 4.07, y: 23.13))
        icon.addCurve(to: CGPoint(x: 3.23, y: 5.04), controlPoint1: CGPoint(x: 3.98, y: 22.29), controlPoint2: CGPoint(x: 3.43, y: 9.77))
        icon.addLine(to: CGPoint(x: 16.2, y: 5.04))
        icon.addCurve(to: CGPoint(x: 15.46, y: 22.89), controlPoint1: CGPoint(x: 16.05, y: 8.87), controlPoint2: CGPoint(x: 15.53, y: 22.27))
        icon.close()
        icon.move(to: CGPoint(x: 6.99, y: 2.34))
        icon.addCurve(to: CGPoint(x: 7.71, y: 1.75), controlPoint1: CGPoint(x: 6.99, y: 2.02), controlPoint2: CGPoint(x: 7.31, y: 1.75))
        icon.addLine(to: CGPoint(x: 11.79, y: 1.75))
        icon.addCurve(to: CGPoint(x: 12.51, y: 2.34), controlPoint1: CGPoint(x: 12.19, y: 1.75), controlPoint2: CGPoint(x: 12.51, y: 2.02))
        icon.addLine(to: CGPoint(x: 12.51, y: 2.93))
        icon.addLine(to: CGPoint(x: 6.99, y: 2.93))
        icon.addLine(to: CGPoint(x: 6.99, y: 2.34))
        icon.close()
        icon.move(to: CGPoint(x: 14.67, y: 2.92))
        icon.addLine(to: CGPoint(x: 19.5, y: 2.92))
        icon.addLine(to: CGPoint(x: 19.5, y: 5.04))
        icon.addLine(to: CGPoint(x: 18.35, y: 5.04))
        icon.addCurve(to: CGPoint(x: 17.57, y: 23.46), controlPoint1: CGPoint(x: 18.35, y: 5.04), controlPoint2: CGPoint(x: 17.98, y: 18.87))
        icon.addCurve(to: CGPoint(x: 15.55, y: 25.47), controlPoint1: CGPoint(x: 17.56, y: 23.52), controlPoint2: CGPoint(x: 17.19, y: 25.47))
        icon.addLine(to: CGPoint(x: 3.95, y: 25.47))
        icon.addCurve(to: CGPoint(x: 1.94, y: 23.56), controlPoint1: CGPoint(x: 2.35, y: 25.47), controlPoint2: CGPoint(x: 1.96, y: 23.63))
        icon.addLine(to: CGPoint(x: 1.11, y: 5.04))
        icon.addLine(to: CGPoint(x: 0, y: 5.04))
        icon.addLine(to: CGPoint(x: 0, y: 2.92))
        icon.addLine(to: CGPoint(x: 4.83, y: 2.92))
        icon.addLine(to: CGPoint(x: 4.83, y: 2.52))
        icon.addCurve(to: CGPoint(x: 7.34, y: 0), controlPoint1: CGPoint(x: 4.83, y: 1.13), controlPoint2: CGPoint(x: 5.95, y: 0))
        icon.addLine(to: CGPoint(x: 12.17, y: 0))
        icon.addCurve(to: CGPoint(x: 14.67, y: 2.52), controlPoint1: CGPoint(x: 13.55, y: 0), controlPoint2: CGPoint(x: 14.67, y: 1.13))
        icon.addLine(to: CGPoint(x: 14.67, y: 2.92))
        icon.close()
        icon.move(to: CGPoint(x: 14.25, y: 6.35))
        icon.addLine(to: CGPoint(x: 12.33, y: 6.35))
        icon.addLine(to: CGPoint(x: 11.82, y: 22.13))
        icon.addLine(to: CGPoint(x: 13.73, y: 22.13))
        icon.addLine(to: CGPoint(x: 14.25, y: 6.35))
        icon.close()
        icon.move(to: CGPoint(x: 8.79, y: 22.13))
        icon.addLine(to: CGPoint(x: 10.71, y: 22.13))
        icon.addLine(to: CGPoint(x: 10.71, y: 6.35))
        icon.addLine(to: CGPoint(x: 8.79, y: 6.35))
        icon.addLine(to: CGPoint(x: 8.79, y: 22.13))
        icon.close()
        icon.move(to: CGPoint(x: 5.76, y: 22.13))
        icon.addLine(to: CGPoint(x: 7.68, y: 22.13))
        icon.addLine(to: CGPoint(x: 7.17, y: 6.49))
        icon.addLine(to: CGPoint(x: 7.17, y: 6.35))
        icon.addLine(to: CGPoint(x: 5.25, y: 6.35))
        icon.addLine(to: CGPoint(x: 5.76, y: 21.99))
        icon.addLine(to: CGPoint(x: 5.76, y: 22.13))
        icon.close()
        context.saveGState()
        context.translateBy(x: 8, y: 5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 8, y: 5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsQuickActionBag(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 4.22, y: 6.26))
        icon.addLine(to: CGPoint(x: 4.22, y: 5.22))
        icon.addCurve(to: CGPoint(x: 9.5, y: 0), controlPoint1: CGPoint(x: 4.22, y: 2.34), controlPoint2: CGPoint(x: 6.59, y: 0))
        icon.addCurve(to: CGPoint(x: 14.78, y: 5.22), controlPoint1: CGPoint(x: 12.41, y: 0), controlPoint2: CGPoint(x: 14.78, y: 2.34))
        icon.addLine(to: CGPoint(x: 14.78, y: 6.26))
        icon.addLine(to: CGPoint(x: 16.44, y: 6.26))
        icon.addCurve(to: CGPoint(x: 17.98, y: 6.52), controlPoint1: CGPoint(x: 17.33, y: 6.26), controlPoint2: CGPoint(x: 17.65, y: 6.35))
        icon.addCurve(to: CGPoint(x: 18.73, y: 7.27), controlPoint1: CGPoint(x: 18.3, y: 6.7), controlPoint2: CGPoint(x: 18.56, y: 6.95))
        icon.addCurve(to: CGPoint(x: 19, y: 8.8), controlPoint1: CGPoint(x: 18.91, y: 7.59), controlPoint2: CGPoint(x: 19, y: 7.91))
        icon.addLine(to: CGPoint(x: 19, y: 21.47))
        icon.addCurve(to: CGPoint(x: 18.73, y: 22.99), controlPoint1: CGPoint(x: 19, y: 22.35), controlPoint2: CGPoint(x: 18.91, y: 22.67))
        icon.addCurve(to: CGPoint(x: 17.98, y: 23.74), controlPoint1: CGPoint(x: 18.56, y: 23.31), controlPoint2: CGPoint(x: 18.3, y: 23.56))
        icon.addCurve(to: CGPoint(x: 16.44, y: 24), controlPoint1: CGPoint(x: 17.65, y: 23.91), controlPoint2: CGPoint(x: 17.33, y: 24))
        icon.addLine(to: CGPoint(x: 2.56, y: 24))
        icon.addCurve(to: CGPoint(x: 1.02, y: 23.74), controlPoint1: CGPoint(x: 1.67, y: 24), controlPoint2: CGPoint(x: 1.35, y: 23.91))
        icon.addCurve(to: CGPoint(x: 0.27, y: 22.99), controlPoint1: CGPoint(x: 0.7, y: 23.56), controlPoint2: CGPoint(x: 0.44, y: 23.31))
        icon.addCurve(to: CGPoint(x: 0, y: 21.47), controlPoint1: CGPoint(x: 0.09, y: 22.67), controlPoint2: CGPoint(x: 0, y: 22.35))
        icon.addLine(to: CGPoint(x: 0, y: 8.8))
        icon.addCurve(to: CGPoint(x: 0.27, y: 7.27), controlPoint1: CGPoint(x: 0, y: 7.91), controlPoint2: CGPoint(x: 0.09, y: 7.59))
        icon.addCurve(to: CGPoint(x: 1.02, y: 6.52), controlPoint1: CGPoint(x: 0.44, y: 6.95), controlPoint2: CGPoint(x: 0.7, y: 6.7))
        icon.addCurve(to: CGPoint(x: 2.56, y: 6.26), controlPoint1: CGPoint(x: 1.35, y: 6.35), controlPoint2: CGPoint(x: 1.67, y: 6.26))
        icon.addLine(to: CGPoint(x: 4.22, y: 6.26))
        icon.close()
        icon.move(to: CGPoint(x: 2, y: 8.8))
        icon.addLine(to: CGPoint(x: 2, y: 21.47))
        icon.addCurve(to: CGPoint(x: 2.02, y: 22), controlPoint1: CGPoint(x: 2, y: 21.72), controlPoint2: CGPoint(x: 2.01, y: 21.89))
        icon.addCurve(to: CGPoint(x: 2.56, y: 22.02), controlPoint1: CGPoint(x: 2.13, y: 22.01), controlPoint2: CGPoint(x: 2.3, y: 22.02))
        icon.addLine(to: CGPoint(x: 16.44, y: 22.02))
        icon.addCurve(to: CGPoint(x: 16.98, y: 22), controlPoint1: CGPoint(x: 16.7, y: 22.02), controlPoint2: CGPoint(x: 16.87, y: 22.01))
        icon.addCurve(to: CGPoint(x: 17, y: 21.47), controlPoint1: CGPoint(x: 16.99, y: 21.89), controlPoint2: CGPoint(x: 17, y: 21.72))
        icon.addLine(to: CGPoint(x: 17, y: 8.8))
        icon.addCurve(to: CGPoint(x: 16.98, y: 8.26), controlPoint1: CGPoint(x: 17, y: 8.54), controlPoint2: CGPoint(x: 16.99, y: 8.37))
        icon.addCurve(to: CGPoint(x: 16.44, y: 8.24), controlPoint1: CGPoint(x: 16.87, y: 8.25), controlPoint2: CGPoint(x: 16.7, y: 8.24))
        icon.addLine(to: CGPoint(x: 2.56, y: 8.24))
        icon.addCurve(to: CGPoint(x: 2.02, y: 8.26), controlPoint1: CGPoint(x: 2.3, y: 8.24), controlPoint2: CGPoint(x: 2.13, y: 8.25))
        icon.addCurve(to: CGPoint(x: 2, y: 8.8), controlPoint1: CGPoint(x: 2.01, y: 8.37), controlPoint2: CGPoint(x: 2, y: 8.54))
        icon.close()
        icon.move(to: CGPoint(x: 12.67, y: 6.26))
        icon.addLine(to: CGPoint(x: 12.67, y: 5.22))
        icon.addCurve(to: CGPoint(x: 9.5, y: 2.09), controlPoint1: CGPoint(x: 12.67, y: 3.49), controlPoint2: CGPoint(x: 11.25, y: 2.09))
        icon.addCurve(to: CGPoint(x: 6.33, y: 5.22), controlPoint1: CGPoint(x: 7.75, y: 2.09), controlPoint2: CGPoint(x: 6.33, y: 3.49))
        icon.addLine(to: CGPoint(x: 6.33, y: 6.26))
        icon.addLine(to: CGPoint(x: 12.67, y: 6.26))
        icon.close()
        context.saveGState()
        context.translateBy(x: 8.5, y: 6)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 8.5, y: 6))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsQuickActionFavorite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 24.27, y: 10.11))
        icon.addLine(to: CGPoint(x: 17.75, y: 14.89))
        icon.addLine(to: CGPoint(x: 20.11, y: 22.22))
        icon.addCurve(to: CGPoint(x: 18.69, y: 23.31), controlPoint1: CGPoint(x: 20.11, y: 22.22), controlPoint2: CGPoint(x: 21.47, y: 25.3))
        icon.addCurve(to: CGPoint(x: 12.52, y: 18.73), controlPoint1: CGPoint(x: 16.15, y: 21.49), controlPoint2: CGPoint(x: 12.52, y: 18.73))
        icon.addCurve(to: CGPoint(x: 6.18, y: 23.41), controlPoint1: CGPoint(x: 12.52, y: 18.73), controlPoint2: CGPoint(x: 8.7, y: 21.55))
        icon.addCurve(to: CGPoint(x: 4.94, y: 22.12), controlPoint1: CGPoint(x: 3.65, y: 25.28), controlPoint2: CGPoint(x: 4.94, y: 22.12))
        icon.addLine(to: CGPoint(x: 7.29, y: 14.88))
        icon.addLine(to: CGPoint(x: 0.92, y: 10.21))
        icon.addCurve(to: CGPoint(x: 1.31, y: 8.64), controlPoint1: CGPoint(x: 0.92, y: 10.21), controlPoint2: CGPoint(x: -1.39, y: 8.64))
        icon.addCurve(to: CGPoint(x: 9.29, y: 8.64), controlPoint1: CGPoint(x: 4.43, y: 8.64), controlPoint2: CGPoint(x: 9.29, y: 8.64))
        icon.addLine(to: CGPoint(x: 11.84, y: 0.68))
        icon.addCurve(to: CGPoint(x: 12.53, y: 0), controlPoint1: CGPoint(x: 11.84, y: 0.68), controlPoint2: CGPoint(x: 12.03, y: 0))
        icon.addCurve(to: CGPoint(x: 13.24, y: 0.73), controlPoint1: CGPoint(x: 13.07, y: 0), controlPoint2: CGPoint(x: 13.24, y: 0.73))
        icon.addLine(to: CGPoint(x: 15.76, y: 8.65))
        icon.addCurve(to: CGPoint(x: 23.69, y: 8.64), controlPoint1: CGPoint(x: 15.76, y: 8.65), controlPoint2: CGPoint(x: 20.57, y: 8.64))
        icon.addCurve(to: CGPoint(x: 24.27, y: 10.11), controlPoint1: CGPoint(x: 26.25, y: 8.64), controlPoint2: CGPoint(x: 24.27, y: 10.11))
        context.saveGState()
        context.translateBy(x: 5.5, y: 6)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 5.5, y: 6))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsQuickActionBluetooth(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 9.36, y: 21.76))
        icon.addLine(to: CGPoint(x: 9.36, y: 14.32))
        icon.addLine(to: CGPoint(x: 12.6, y: 17.71))
        icon.addCurve(to: CGPoint(x: 12.58, y: 18.7), controlPoint1: CGPoint(x: 12.87, y: 17.99), controlPoint2: CGPoint(x: 12.86, y: 18.43))
        icon.addLine(to: CGPoint(x: 9.36, y: 21.76))
        icon.close()
        icon.move(to: CGPoint(x: 12.71, y: 7.62))
        icon.addLine(to: CGPoint(x: 9.36, y: 10.85))
        icon.addLine(to: CGPoint(x: 9.36, y: 3.72))
        icon.addLine(to: CGPoint(x: 12.68, y: 6.58))
        icon.addCurve(to: CGPoint(x: 12.71, y: 7.62), controlPoint1: CGPoint(x: 13, y: 6.86), controlPoint2: CGPoint(x: 13.01, y: 7.32))
        icon.close()
        icon.move(to: CGPoint(x: 10.82, y: 12.14))
        icon.addLine(to: CGPoint(x: 15.8, y: 7.37))
        icon.addCurve(to: CGPoint(x: 15.79, y: 6.81), controlPoint1: CGPoint(x: 15.96, y: 7.21), controlPoint2: CGPoint(x: 15.96, y: 6.96))
        icon.addLine(to: CGPoint(x: 8.51, y: 0.2))
        icon.addCurve(to: CGPoint(x: 7.24, y: 0.76), controlPoint1: CGPoint(x: 8.02, y: -0.24), controlPoint2: CGPoint(x: 7.24, y: 0.1))
        icon.addLine(to: CGPoint(x: 7.24, y: 10.23))
        icon.addLine(to: CGPoint(x: 1.89, y: 4.86))
        icon.addCurve(to: CGPoint(x: 0.84, y: 4.86), controlPoint1: CGPoint(x: 1.6, y: 4.57), controlPoint2: CGPoint(x: 1.13, y: 4.57))
        icon.addLine(to: CGPoint(x: 0.21, y: 5.49))
        icon.addCurve(to: CGPoint(x: 0.22, y: 6.5), controlPoint1: CGPoint(x: -0.07, y: 5.77), controlPoint2: CGPoint(x: -0.07, y: 6.23))
        icon.addLine(to: CGPoint(x: 6.22, y: 12.14))
        icon.addCurve(to: CGPoint(x: 6.22, y: 13.16), controlPoint1: CGPoint(x: 6.52, y: 12.42), controlPoint2: CGPoint(x: 6.52, y: 12.88))
        icon.addLine(to: CGPoint(x: 0.22, y: 18.8))
        icon.addCurve(to: CGPoint(x: 0.21, y: 19.81), controlPoint1: CGPoint(x: -0.07, y: 19.08), controlPoint2: CGPoint(x: -0.07, y: 19.53))
        icon.addLine(to: CGPoint(x: 0.84, y: 20.44))
        icon.addCurve(to: CGPoint(x: 1.89, y: 20.44), controlPoint1: CGPoint(x: 1.13, y: 20.73), controlPoint2: CGPoint(x: 1.6, y: 20.73))
        icon.addLine(to: CGPoint(x: 7.24, y: 15.08))
        icon.addLine(to: CGPoint(x: 7.24, y: 24.68))
        icon.addCurve(to: CGPoint(x: 8.41, y: 25.2), controlPoint1: CGPoint(x: 7.24, y: 25.29), controlPoint2: CGPoint(x: 7.96, y: 25.6))
        icon.addLine(to: CGPoint(x: 15.88, y: 18.47))
        icon.addCurve(to: CGPoint(x: 15.88, y: 17.92), controlPoint1: CGPoint(x: 16.04, y: 18.32), controlPoint2: CGPoint(x: 16.04, y: 18.07))
        icon.addLine(to: CGPoint(x: 10.83, y: 13.15))
        icon.addCurve(to: CGPoint(x: 10.82, y: 12.14), controlPoint1: CGPoint(x: 10.53, y: 12.88), controlPoint2: CGPoint(x: 10.53, y: 12.42))
        icon.close()
        context.saveGState()
        context.translateBy(x: 10, y: 5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 10, y: 5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsQuickActionMobile(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 5.01, y: 1.77))
        icon.addCurve(to: CGPoint(x: 1.98, y: 8.18), controlPoint1: CGPoint(x: 3.09, y: 3.32), controlPoint2: CGPoint(x: 1.98, y: 5.66))
        icon.addCurve(to: CGPoint(x: 4.97, y: 14.56), controlPoint1: CGPoint(x: 1.98, y: 10.68), controlPoint2: CGPoint(x: 3.07, y: 13.01))
        icon.addCurve(to: CGPoint(x: 5.12, y: 15.96), controlPoint1: CGPoint(x: 5.39, y: 14.9), controlPoint2: CGPoint(x: 5.46, y: 15.53))
        icon.addCurve(to: CGPoint(x: 4.34, y: 16.32), controlPoint1: CGPoint(x: 4.93, y: 16.19), controlPoint2: CGPoint(x: 4.65, y: 16.32))
        icon.addCurve(to: CGPoint(x: 3.72, y: 16.1), controlPoint1: CGPoint(x: 4.12, y: 16.32), controlPoint2: CGPoint(x: 3.9, y: 16.24))
        icon.addCurve(to: CGPoint(x: 0, y: 8.18), controlPoint1: CGPoint(x: 1.36, y: 14.17), controlPoint2: CGPoint(x: 0, y: 11.28))
        icon.addCurve(to: CGPoint(x: 3.77, y: 0.22), controlPoint1: CGPoint(x: 0, y: 5.05), controlPoint2: CGPoint(x: 1.37, y: 2.15))
        icon.addCurve(to: CGPoint(x: 4.5, y: 0.01), controlPoint1: CGPoint(x: 3.98, y: 0.05), controlPoint2: CGPoint(x: 4.23, y: -0.02))
        icon.addCurve(to: CGPoint(x: 5.16, y: 0.37), controlPoint1: CGPoint(x: 4.76, y: 0.04), controlPoint2: CGPoint(x: 5, y: 0.17))
        icon.addCurve(to: CGPoint(x: 5.01, y: 1.77), controlPoint1: CGPoint(x: 5.5, y: 0.8), controlPoint2: CGPoint(x: 5.44, y: 1.43))
        icon.close()
        icon.move(to: CGPoint(x: 9.09, y: 4.58))
        icon.addCurve(to: CGPoint(x: 7.4, y: 8.17), controlPoint1: CGPoint(x: 8.01, y: 5.45), controlPoint2: CGPoint(x: 7.4, y: 6.76))
        icon.addCurve(to: CGPoint(x: 9.07, y: 11.75), controlPoint1: CGPoint(x: 7.4, y: 9.57), controlPoint2: CGPoint(x: 8.01, y: 10.88))
        icon.addCurve(to: CGPoint(x: 9.21, y: 13.14), controlPoint1: CGPoint(x: 9.49, y: 12.09), controlPoint2: CGPoint(x: 9.56, y: 12.72))
        icon.addCurve(to: CGPoint(x: 8.44, y: 13.51), controlPoint1: CGPoint(x: 9.02, y: 13.37), controlPoint2: CGPoint(x: 8.74, y: 13.51))
        icon.addCurve(to: CGPoint(x: 7.82, y: 13.29), controlPoint1: CGPoint(x: 8.22, y: 13.51), controlPoint2: CGPoint(x: 7.99, y: 13.43))
        icon.addCurve(to: CGPoint(x: 5.42, y: 8.17), controlPoint1: CGPoint(x: 6.29, y: 12.04), controlPoint2: CGPoint(x: 5.42, y: 10.17))
        icon.addCurve(to: CGPoint(x: 7.85, y: 3.03), controlPoint1: CGPoint(x: 5.42, y: 6.15), controlPoint2: CGPoint(x: 6.3, y: 4.28))
        icon.addCurve(to: CGPoint(x: 8.58, y: 2.82), controlPoint1: CGPoint(x: 8.06, y: 2.87), controlPoint2: CGPoint(x: 8.32, y: 2.79))
        icon.addCurve(to: CGPoint(x: 9.24, y: 3.19), controlPoint1: CGPoint(x: 8.84, y: 2.85), controlPoint2: CGPoint(x: 9.08, y: 2.98))
        icon.addCurve(to: CGPoint(x: 9.09, y: 4.58), controlPoint1: CGPoint(x: 9.58, y: 3.61), controlPoint2: CGPoint(x: 9.52, y: 4.24))
        icon.close()
        icon.move(to: CGPoint(x: 22.84, y: 0.22))
        icon.addCurve(to: CGPoint(x: 26.61, y: 8.18), controlPoint1: CGPoint(x: 25.24, y: 2.15), controlPoint2: CGPoint(x: 26.61, y: 5.05))
        icon.addCurve(to: CGPoint(x: 22.89, y: 16.1), controlPoint1: CGPoint(x: 26.61, y: 11.28), controlPoint2: CGPoint(x: 25.26, y: 14.17))
        icon.addCurve(to: CGPoint(x: 22.27, y: 16.32), controlPoint1: CGPoint(x: 22.72, y: 16.24), controlPoint2: CGPoint(x: 22.5, y: 16.32))
        icon.addCurve(to: CGPoint(x: 21.5, y: 15.95), controlPoint1: CGPoint(x: 21.97, y: 16.32), controlPoint2: CGPoint(x: 21.69, y: 16.19))
        icon.addCurve(to: CGPoint(x: 21.64, y: 14.56), controlPoint1: CGPoint(x: 21.16, y: 15.53), controlPoint2: CGPoint(x: 21.22, y: 14.9))
        icon.addCurve(to: CGPoint(x: 24.63, y: 8.18), controlPoint1: CGPoint(x: 23.54, y: 13.01), controlPoint2: CGPoint(x: 24.63, y: 10.68))
        icon.addCurve(to: CGPoint(x: 21.6, y: 1.77), controlPoint1: CGPoint(x: 24.63, y: 5.66), controlPoint2: CGPoint(x: 23.53, y: 3.32))
        icon.addCurve(to: CGPoint(x: 21.45, y: 0.37), controlPoint1: CGPoint(x: 21.18, y: 1.43), controlPoint2: CGPoint(x: 21.11, y: 0.8))
        icon.addCurve(to: CGPoint(x: 22.11, y: 0.01), controlPoint1: CGPoint(x: 21.61, y: 0.16), controlPoint2: CGPoint(x: 21.85, y: 0.03))
        icon.addCurve(to: CGPoint(x: 22.84, y: 0.22), controlPoint1: CGPoint(x: 22.38, y: -0.02), controlPoint2: CGPoint(x: 22.64, y: 0.05))
        icon.close()
        icon.move(to: CGPoint(x: 18.76, y: 3.03))
        icon.addCurve(to: CGPoint(x: 21.2, y: 8.17), controlPoint1: CGPoint(x: 20.31, y: 4.28), controlPoint2: CGPoint(x: 21.2, y: 6.15))
        icon.addCurve(to: CGPoint(x: 18.79, y: 13.29), controlPoint1: CGPoint(x: 21.2, y: 10.17), controlPoint2: CGPoint(x: 20.32, y: 12.04))
        icon.addCurve(to: CGPoint(x: 18.17, y: 13.51), controlPoint1: CGPoint(x: 18.62, y: 13.43), controlPoint2: CGPoint(x: 18.4, y: 13.51))
        icon.addCurve(to: CGPoint(x: 17.4, y: 13.14), controlPoint1: CGPoint(x: 17.87, y: 13.51), controlPoint2: CGPoint(x: 17.59, y: 13.37))
        icon.addCurve(to: CGPoint(x: 17.54, y: 11.74), controlPoint1: CGPoint(x: 17.06, y: 12.72), controlPoint2: CGPoint(x: 17.12, y: 12.09))
        icon.addCurve(to: CGPoint(x: 19.22, y: 8.17), controlPoint1: CGPoint(x: 18.61, y: 10.88), controlPoint2: CGPoint(x: 19.22, y: 9.57))
        icon.addCurve(to: CGPoint(x: 17.52, y: 4.58), controlPoint1: CGPoint(x: 19.22, y: 6.76), controlPoint2: CGPoint(x: 18.6, y: 5.45))
        icon.addCurve(to: CGPoint(x: 17.37, y: 3.19), controlPoint1: CGPoint(x: 17.1, y: 4.24), controlPoint2: CGPoint(x: 17.03, y: 3.61))
        icon.addCurve(to: CGPoint(x: 18.04, y: 2.82), controlPoint1: CGPoint(x: 17.54, y: 2.98), controlPoint2: CGPoint(x: 17.77, y: 2.85))
        icon.addCurve(to: CGPoint(x: 18.76, y: 3.03), controlPoint1: CGPoint(x: 18.3, y: 2.79), controlPoint2: CGPoint(x: 18.56, y: 2.87))
        icon.close()
        icon.move(to: CGPoint(x: 13.31, y: 5.09))
        icon.addCurve(to: CGPoint(x: 16.24, y: 8.02), controlPoint1: CGPoint(x: 14.93, y: 5.09), controlPoint2: CGPoint(x: 16.24, y: 6.4))
        icon.addCurve(to: CGPoint(x: 14.36, y: 10.75), controlPoint1: CGPoint(x: 16.24, y: 9.27), controlPoint2: CGPoint(x: 15.46, y: 10.32))
        icon.addLine(to: CGPoint(x: 14.36, y: 23.9))
        icon.addCurve(to: CGPoint(x: 13.31, y: 24.96), controlPoint1: CGPoint(x: 14.36, y: 24.49), controlPoint2: CGPoint(x: 13.89, y: 24.96))
        icon.addCurve(to: CGPoint(x: 12.25, y: 23.9), controlPoint1: CGPoint(x: 12.72, y: 24.96), controlPoint2: CGPoint(x: 12.25, y: 24.49))
        icon.addLine(to: CGPoint(x: 12.25, y: 10.75))
        icon.addCurve(to: CGPoint(x: 10.38, y: 8.02), controlPoint1: CGPoint(x: 11.16, y: 10.32), controlPoint2: CGPoint(x: 10.38, y: 9.27))
        icon.addCurve(to: CGPoint(x: 13.31, y: 5.09), controlPoint1: CGPoint(x: 10.38, y: 6.4), controlPoint2: CGPoint(x: 11.69, y: 5.09))
        icon.close()
        context.saveGState()
        context.translateBy(x: 5, y: 6)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 5, y: 6))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsQuickActionVolume(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 21.61, y: 0))
        icon.addCurve(to: CGPoint(x: 20.94, y: 1.42), controlPoint1: CGPoint(x: 20.88, y: -0.01), controlPoint2: CGPoint(x: 20.47, y: 0.85))
        icon.addCurve(to: CGPoint(x: 24.27, y: 10.82), controlPoint1: CGPoint(x: 23.02, y: 4), controlPoint2: CGPoint(x: 24.27, y: 7.26))
        icon.addCurve(to: CGPoint(x: 21.25, y: 19.8), controlPoint1: CGPoint(x: 24.27, y: 14.19), controlPoint2: CGPoint(x: 23.14, y: 17.29))
        icon.addCurve(to: CGPoint(x: 22.64, y: 20.84), controlPoint1: CGPoint(x: 20.56, y: 20.73), controlPoint2: CGPoint(x: 21.95, y: 21.76))
        icon.addCurve(to: CGPoint(x: 26, y: 10.82), controlPoint1: CGPoint(x: 24.74, y: 18.04), controlPoint2: CGPoint(x: 26, y: 14.58))
        icon.addCurve(to: CGPoint(x: 22.29, y: 0.33), controlPoint1: CGPoint(x: 26, y: 6.85), controlPoint2: CGPoint(x: 24.6, y: 3.2))
        icon.addCurve(to: CGPoint(x: 21.61, y: 0), controlPoint1: CGPoint(x: 22.13, y: 0.12), controlPoint2: CGPoint(x: 21.88, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 17.37, y: 2.51))
        icon.addCurve(to: CGPoint(x: 16.67, y: 3.91), controlPoint1: CGPoint(x: 16.63, y: 2.49), controlPoint2: CGPoint(x: 16.21, y: 3.34))
        icon.addCurve(to: CGPoint(x: 19.07, y: 10.82), controlPoint1: CGPoint(x: 18.17, y: 5.83), controlPoint2: CGPoint(x: 19.07, y: 8.21))
        icon.addCurve(to: CGPoint(x: 16.98, y: 17.31), controlPoint1: CGPoint(x: 19.07, y: 13.24), controlPoint2: CGPoint(x: 18.29, y: 15.47))
        icon.addCurve(to: CGPoint(x: 17.16, y: 18.55), controlPoint1: CGPoint(x: 16.68, y: 17.7), controlPoint2: CGPoint(x: 16.76, y: 18.27))
        icon.addCurve(to: CGPoint(x: 18.39, y: 18.31), controlPoint1: CGPoint(x: 17.56, y: 18.84), controlPoint2: CGPoint(x: 18.12, y: 18.73))
        icon.addCurve(to: CGPoint(x: 20.8, y: 10.82), controlPoint1: CGPoint(x: 19.9, y: 16.2), controlPoint2: CGPoint(x: 20.8, y: 13.61))
        icon.addCurve(to: CGPoint(x: 18.04, y: 2.85), controlPoint1: CGPoint(x: 20.8, y: 7.82), controlPoint2: CGPoint(x: 19.76, y: 5.05))
        icon.addCurve(to: CGPoint(x: 17.37, y: 2.51), controlPoint1: CGPoint(x: 17.88, y: 2.64), controlPoint2: CGPoint(x: 17.63, y: 2.51))
        icon.close()
        icon.move(to: CGPoint(x: 9.53, y: 3.68))
        icon.addLine(to: CGPoint(x: 5.89, y: 7.14))
        icon.addLine(to: CGPoint(x: 2.6, y: 7.14))
        icon.addCurve(to: CGPoint(x: 0, y: 9.73), controlPoint1: CGPoint(x: 1.16, y: 7.14), controlPoint2: CGPoint(x: 0, y: 8.3))
        icon.addLine(to: CGPoint(x: 0, y: 11.46))
        icon.addCurve(to: CGPoint(x: 2.6, y: 14.06), controlPoint1: CGPoint(x: 0, y: 12.9), controlPoint2: CGPoint(x: 1.16, y: 14.06))
        icon.addLine(to: CGPoint(x: 5.89, y: 14.06))
        icon.addLine(to: CGPoint(x: 9.53, y: 17.52))
        icon.addLine(to: CGPoint(x: 9.53, y: 3.68))
        icon.close()
        icon.move(to: CGPoint(x: 12.77, y: 5.06))
        icon.addCurve(to: CGPoint(x: 12.13, y: 6.53), controlPoint1: CGPoint(x: 12, y: 5.04), controlPoint2: CGPoint(x: 11.59, y: 5.97))
        icon.addCurve(to: CGPoint(x: 13.87, y: 10.82), controlPoint1: CGPoint(x: 13.21, y: 7.65), controlPoint2: CGPoint(x: 13.87, y: 9.15))
        icon.addCurve(to: CGPoint(x: 12.46, y: 14.75), controlPoint1: CGPoint(x: 13.87, y: 12.31), controlPoint2: CGPoint(x: 13.34, y: 13.67))
        icon.addCurve(to: CGPoint(x: 12.57, y: 15.99), controlPoint1: CGPoint(x: 12.14, y: 15.12), controlPoint2: CGPoint(x: 12.18, y: 15.68))
        icon.addCurve(to: CGPoint(x: 13.81, y: 15.84), controlPoint1: CGPoint(x: 12.95, y: 16.3), controlPoint2: CGPoint(x: 13.51, y: 16.23))
        icon.addCurve(to: CGPoint(x: 15.6, y: 10.82), controlPoint1: CGPoint(x: 14.92, y: 14.47), controlPoint2: CGPoint(x: 15.6, y: 12.72))
        icon.addCurve(to: CGPoint(x: 13.39, y: 5.33), controlPoint1: CGPoint(x: 15.6, y: 8.69), controlPoint2: CGPoint(x: 14.75, y: 6.76))
        icon.addCurve(to: CGPoint(x: 12.77, y: 5.06), controlPoint1: CGPoint(x: 13.23, y: 5.16), controlPoint2: CGPoint(x: 13.01, y: 5.06))
        icon.close()
        context.saveGState()
        context.translateBy(x: 5, y: 8)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 5, y: 8))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsQuickActionVolumeMute(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 11.09, y: 0))
        icon.addLine(to: CGPoint(x: 6.85, y: 4))
        icon.addLine(to: CGPoint(x: 3.02, y: 4))
        icon.addCurve(to: CGPoint(x: 0, y: 7), controlPoint1: CGPoint(x: 1.35, y: 4), controlPoint2: CGPoint(x: 0, y: 5.34))
        icon.addLine(to: CGPoint(x: 0, y: 9))
        icon.addCurve(to: CGPoint(x: 3.02, y: 12), controlPoint1: CGPoint(x: 0, y: 10.66), controlPoint2: CGPoint(x: 1.35, y: 12))
        icon.addLine(to: CGPoint(x: 6.85, y: 12))
        icon.addLine(to: CGPoint(x: 11.09, y: 16))
        icon.addLine(to: CGPoint(x: 11.09, y: 0))
        icon.close()
        context.saveGState()
        context.translateBy(x: 12, y: 10)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 12, y: 10))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsQuickActionWifi(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 12.49, y: 3.1))
        icon.addCurve(to: CGPoint(x: 22.79, y: 6.53), controlPoint1: CGPoint(x: 16.39, y: 3.1), controlPoint2: CGPoint(x: 19.97, y: 4.39))
        icon.addCurve(to: CGPoint(x: 23.74, y: 6.47), controlPoint1: CGPoint(x: 23.08, y: 6.76), controlPoint2: CGPoint(x: 23.49, y: 6.73))
        icon.addLine(to: CGPoint(x: 24.82, y: 5.34))
        icon.addCurve(to: CGPoint(x: 24.75, y: 4.37), controlPoint1: CGPoint(x: 25.08, y: 5.06), controlPoint2: CGPoint(x: 25.06, y: 4.61))
        icon.addCurve(to: CGPoint(x: 12.49, y: 0), controlPoint1: CGPoint(x: 21.4, y: 1.78), controlPoint2: CGPoint(x: 17.14, y: 0))
        icon.addCurve(to: CGPoint(x: 0.25, y: 4.36), controlPoint1: CGPoint(x: 7.85, y: 0), controlPoint2: CGPoint(x: 3.59, y: 1.77))
        icon.addCurve(to: CGPoint(x: 0.18, y: 5.32), controlPoint1: CGPoint(x: -0.06, y: 4.6), controlPoint2: CGPoint(x: -0.08, y: 5.04))
        icon.addLine(to: CGPoint(x: 1.26, y: 6.46))
        icon.addCurve(to: CGPoint(x: 2.21, y: 6.52), controlPoint1: CGPoint(x: 1.5, y: 6.72), controlPoint2: CGPoint(x: 1.92, y: 6.74))
        icon.addCurve(to: CGPoint(x: 12.49, y: 3.1), controlPoint1: CGPoint(x: 5.03, y: 4.38), controlPoint2: CGPoint(x: 8.59, y: 3.1))
        icon.close()
        icon.move(to: CGPoint(x: 12.49, y: 9.2))
        icon.addCurve(to: CGPoint(x: 18.48, y: 11.09), controlPoint1: CGPoint(x: 14.74, y: 9.2), controlPoint2: CGPoint(x: 16.81, y: 9.91))
        icon.addCurve(to: CGPoint(x: 19.42, y: 11.02), controlPoint1: CGPoint(x: 18.77, y: 11.3), controlPoint2: CGPoint(x: 19.18, y: 11.28))
        icon.addLine(to: CGPoint(x: 20.62, y: 9.76))
        icon.addCurve(to: CGPoint(x: 20.54, y: 8.8), controlPoint1: CGPoint(x: 20.89, y: 9.48), controlPoint2: CGPoint(x: 20.86, y: 9.03))
        icon.addCurve(to: CGPoint(x: 12.49, y: 6.11), controlPoint1: CGPoint(x: 18.31, y: 7.16), controlPoint2: CGPoint(x: 15.53, y: 6.11))
        icon.addCurve(to: CGPoint(x: 4.45, y: 8.79), controlPoint1: CGPoint(x: 9.46, y: 6.11), controlPoint2: CGPoint(x: 6.68, y: 7.15))
        icon.addCurve(to: CGPoint(x: 4.37, y: 9.75), controlPoint1: CGPoint(x: 4.13, y: 9.02), controlPoint2: CGPoint(x: 4.11, y: 9.47))
        icon.addLine(to: CGPoint(x: 5.57, y: 11.01))
        icon.addCurve(to: CGPoint(x: 6.51, y: 11.09), controlPoint1: CGPoint(x: 5.81, y: 11.27), controlPoint2: CGPoint(x: 6.22, y: 11.3))
        icon.addCurve(to: CGPoint(x: 12.49, y: 9.2), controlPoint1: CGPoint(x: 8.18, y: 9.91), controlPoint2: CGPoint(x: 10.25, y: 9.2))
        icon.close()
        icon.move(to: CGPoint(x: 16.35, y: 14.26))
        icon.addCurve(to: CGPoint(x: 16.21, y: 13.26), controlPoint1: CGPoint(x: 16.63, y: 13.96), controlPoint2: CGPoint(x: 16.57, y: 13.48))
        icon.addCurve(to: CGPoint(x: 12.49, y: 12.13), controlPoint1: CGPoint(x: 15.14, y: 12.58), controlPoint2: CGPoint(x: 13.87, y: 12.13))
        icon.addCurve(to: CGPoint(x: 8.77, y: 13.25), controlPoint1: CGPoint(x: 11.12, y: 12.13), controlPoint2: CGPoint(x: 9.84, y: 12.58))
        icon.addCurve(to: CGPoint(x: 8.64, y: 14.26), controlPoint1: CGPoint(x: 8.42, y: 13.48), controlPoint2: CGPoint(x: 8.35, y: 13.96))
        icon.addLine(to: CGPoint(x: 11.97, y: 17.78))
        icon.addCurve(to: CGPoint(x: 13.01, y: 17.78), controlPoint1: CGPoint(x: 12.25, y: 18.07), controlPoint2: CGPoint(x: 12.73, y: 18.07))
        icon.addLine(to: CGPoint(x: 16.35, y: 14.26))
        icon.close()
        context.saveGState()
        context.translateBy(x: 5.5, y: 9)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 5.5, y: 9))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsQuickActionSettings(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 13, y: 0))
        icon.addCurve(to: CGPoint(x: 12, y: 1), controlPoint1: CGPoint(x: 12.45, y: 0), controlPoint2: CGPoint(x: 12, y: 0.45))
        icon.addLine(to: CGPoint(x: 12, y: 1.17))
        icon.addCurve(to: CGPoint(x: 11.19, y: 2.15), controlPoint1: CGPoint(x: 12, y: 1.65), controlPoint2: CGPoint(x: 11.66, y: 2.08))
        icon.addCurve(to: CGPoint(x: 10.51, y: 2.28), controlPoint1: CGPoint(x: 10.96, y: 2.19), controlPoint2: CGPoint(x: 10.74, y: 2.23))
        icon.addCurve(to: CGPoint(x: 9.4, y: 1.69), controlPoint1: CGPoint(x: 10.05, y: 2.39), controlPoint2: CGPoint(x: 9.58, y: 2.13))
        icon.addLine(to: CGPoint(x: 9.33, y: 1.53))
        icon.addCurve(to: CGPoint(x: 8.02, y: 0.99), controlPoint1: CGPoint(x: 9.12, y: 1.02), controlPoint2: CGPoint(x: 8.54, y: 0.78))
        icon.addCurve(to: CGPoint(x: 7.48, y: 2.3), controlPoint1: CGPoint(x: 7.51, y: 1.2), controlPoint2: CGPoint(x: 7.27, y: 1.79))
        icon.addLine(to: CGPoint(x: 7.55, y: 2.46))
        icon.addCurve(to: CGPoint(x: 7.18, y: 3.67), controlPoint1: CGPoint(x: 7.73, y: 2.9), controlPoint2: CGPoint(x: 7.59, y: 3.42))
        icon.addCurve(to: CGPoint(x: 6.61, y: 4.05), controlPoint1: CGPoint(x: 6.98, y: 3.79), controlPoint2: CGPoint(x: 6.79, y: 3.92))
        icon.addCurve(to: CGPoint(x: 5.34, y: 3.93), controlPoint1: CGPoint(x: 6.22, y: 4.33), controlPoint2: CGPoint(x: 5.68, y: 4.27))
        icon.addLine(to: CGPoint(x: 5.22, y: 3.81))
        icon.addCurve(to: CGPoint(x: 3.81, y: 3.81), controlPoint1: CGPoint(x: 4.83, y: 3.42), controlPoint2: CGPoint(x: 4.2, y: 3.42))
        icon.addCurve(to: CGPoint(x: 3.81, y: 5.22), controlPoint1: CGPoint(x: 3.42, y: 4.2), controlPoint2: CGPoint(x: 3.42, y: 4.83))
        icon.addLine(to: CGPoint(x: 3.93, y: 5.34))
        icon.addCurve(to: CGPoint(x: 4.05, y: 6.61), controlPoint1: CGPoint(x: 4.27, y: 5.68), controlPoint2: CGPoint(x: 4.33, y: 6.22))
        icon.addCurve(to: CGPoint(x: 3.67, y: 7.18), controlPoint1: CGPoint(x: 3.92, y: 6.79), controlPoint2: CGPoint(x: 3.79, y: 6.98))
        icon.addCurve(to: CGPoint(x: 2.46, y: 7.55), controlPoint1: CGPoint(x: 3.42, y: 7.59), controlPoint2: CGPoint(x: 2.9, y: 7.73))
        icon.addLine(to: CGPoint(x: 2.3, y: 7.49))
        icon.addCurve(to: CGPoint(x: 0.99, y: 8.03), controlPoint1: CGPoint(x: 1.79, y: 7.27), controlPoint2: CGPoint(x: 1.2, y: 7.52))
        icon.addCurve(to: CGPoint(x: 1.53, y: 9.33), controlPoint1: CGPoint(x: 0.78, y: 8.54), controlPoint2: CGPoint(x: 1.02, y: 9.12))
        icon.addLine(to: CGPoint(x: 1.69, y: 9.4))
        icon.addCurve(to: CGPoint(x: 2.28, y: 10.51), controlPoint1: CGPoint(x: 2.13, y: 9.58), controlPoint2: CGPoint(x: 2.39, y: 10.05))
        icon.addCurve(to: CGPoint(x: 2.15, y: 11.19), controlPoint1: CGPoint(x: 2.23, y: 10.74), controlPoint2: CGPoint(x: 2.19, y: 10.96))
        icon.addCurve(to: CGPoint(x: 1.17, y: 12), controlPoint1: CGPoint(x: 2.08, y: 11.66), controlPoint2: CGPoint(x: 1.65, y: 12))
        icon.addLine(to: CGPoint(x: 1, y: 12))
        icon.addCurve(to: CGPoint(x: 0, y: 13), controlPoint1: CGPoint(x: 0.45, y: 12), controlPoint2: CGPoint(x: 0, y: 12.45))
        icon.addCurve(to: CGPoint(x: 1, y: 14), controlPoint1: CGPoint(x: 0, y: 13.55), controlPoint2: CGPoint(x: 0.45, y: 14))
        icon.addLine(to: CGPoint(x: 1.17, y: 14))
        icon.addCurve(to: CGPoint(x: 2.15, y: 14.81), controlPoint1: CGPoint(x: 1.65, y: 14), controlPoint2: CGPoint(x: 2.08, y: 14.34))
        icon.addCurve(to: CGPoint(x: 2.28, y: 15.49), controlPoint1: CGPoint(x: 2.19, y: 15.04), controlPoint2: CGPoint(x: 2.23, y: 15.26))
        icon.addCurve(to: CGPoint(x: 1.69, y: 16.6), controlPoint1: CGPoint(x: 2.39, y: 15.95), controlPoint2: CGPoint(x: 2.13, y: 16.42))
        icon.addLine(to: CGPoint(x: 1.53, y: 16.67))
        icon.addCurve(to: CGPoint(x: 0.99, y: 17.98), controlPoint1: CGPoint(x: 1.02, y: 16.88), controlPoint2: CGPoint(x: 0.78, y: 17.46))
        icon.addCurve(to: CGPoint(x: 2.3, y: 18.52), controlPoint1: CGPoint(x: 1.2, y: 18.49), controlPoint2: CGPoint(x: 1.79, y: 18.73))
        icon.addLine(to: CGPoint(x: 2.46, y: 18.45))
        icon.addCurve(to: CGPoint(x: 3.67, y: 18.82), controlPoint1: CGPoint(x: 2.9, y: 18.27), controlPoint2: CGPoint(x: 3.42, y: 18.42))
        icon.addCurve(to: CGPoint(x: 4.05, y: 19.4), controlPoint1: CGPoint(x: 3.79, y: 19.02), controlPoint2: CGPoint(x: 3.92, y: 19.21))
        icon.addCurve(to: CGPoint(x: 3.93, y: 20.66), controlPoint1: CGPoint(x: 4.33, y: 19.78), controlPoint2: CGPoint(x: 4.27, y: 20.32))
        icon.addLine(to: CGPoint(x: 3.81, y: 20.78))
        icon.addCurve(to: CGPoint(x: 3.81, y: 22.19), controlPoint1: CGPoint(x: 3.42, y: 21.17), controlPoint2: CGPoint(x: 3.42, y: 21.8))
        icon.addCurve(to: CGPoint(x: 5.22, y: 22.19), controlPoint1: CGPoint(x: 4.2, y: 22.58), controlPoint2: CGPoint(x: 4.83, y: 22.58))
        icon.addLine(to: CGPoint(x: 5.35, y: 22.07))
        icon.addCurve(to: CGPoint(x: 6.61, y: 21.95), controlPoint1: CGPoint(x: 5.68, y: 21.73), controlPoint2: CGPoint(x: 6.22, y: 21.67))
        icon.addCurve(to: CGPoint(x: 7.18, y: 22.33), controlPoint1: CGPoint(x: 6.79, y: 22.08), controlPoint2: CGPoint(x: 6.99, y: 22.21))
        icon.addCurve(to: CGPoint(x: 7.55, y: 23.55), controlPoint1: CGPoint(x: 7.59, y: 22.58), controlPoint2: CGPoint(x: 7.74, y: 23.11))
        icon.addLine(to: CGPoint(x: 7.49, y: 23.7))
        icon.addCurve(to: CGPoint(x: 8.03, y: 25.01), controlPoint1: CGPoint(x: 7.27, y: 24.21), controlPoint2: CGPoint(x: 7.52, y: 24.8))
        icon.addCurve(to: CGPoint(x: 9.33, y: 24.47), controlPoint1: CGPoint(x: 8.54, y: 25.22), controlPoint2: CGPoint(x: 9.12, y: 24.98))
        icon.addLine(to: CGPoint(x: 9.4, y: 24.31))
        icon.addCurve(to: CGPoint(x: 10.51, y: 23.72), controlPoint1: CGPoint(x: 9.58, y: 23.88), controlPoint2: CGPoint(x: 10.05, y: 23.61))
        icon.addCurve(to: CGPoint(x: 11.19, y: 23.85), controlPoint1: CGPoint(x: 10.74, y: 23.77), controlPoint2: CGPoint(x: 10.96, y: 23.81))
        icon.addCurve(to: CGPoint(x: 12, y: 24.83), controlPoint1: CGPoint(x: 11.66, y: 23.92), controlPoint2: CGPoint(x: 12, y: 24.35))
        icon.addLine(to: CGPoint(x: 12, y: 25))
        icon.addCurve(to: CGPoint(x: 13, y: 26), controlPoint1: CGPoint(x: 12, y: 25.55), controlPoint2: CGPoint(x: 12.45, y: 26))
        icon.addCurve(to: CGPoint(x: 14, y: 25), controlPoint1: CGPoint(x: 13.55, y: 26), controlPoint2: CGPoint(x: 14, y: 25.55))
        icon.addLine(to: CGPoint(x: 14, y: 24.83))
        icon.addCurve(to: CGPoint(x: 14.81, y: 23.85), controlPoint1: CGPoint(x: 14, y: 24.35), controlPoint2: CGPoint(x: 14.34, y: 23.92))
        icon.addCurve(to: CGPoint(x: 15.49, y: 23.72), controlPoint1: CGPoint(x: 15.04, y: 23.81), controlPoint2: CGPoint(x: 15.26, y: 23.77))
        icon.addCurve(to: CGPoint(x: 16.6, y: 24.31), controlPoint1: CGPoint(x: 15.95, y: 23.61), controlPoint2: CGPoint(x: 16.42, y: 23.87))
        icon.addLine(to: CGPoint(x: 16.67, y: 24.47))
        icon.addCurve(to: CGPoint(x: 17.98, y: 25.01), controlPoint1: CGPoint(x: 16.88, y: 24.98), controlPoint2: CGPoint(x: 17.46, y: 25.22))
        icon.addCurve(to: CGPoint(x: 18.52, y: 23.7), controlPoint1: CGPoint(x: 18.49, y: 24.8), controlPoint2: CGPoint(x: 18.73, y: 24.21))
        icon.addLine(to: CGPoint(x: 18.45, y: 23.54))
        icon.addCurve(to: CGPoint(x: 18.82, y: 22.33), controlPoint1: CGPoint(x: 18.27, y: 23.1), controlPoint2: CGPoint(x: 18.42, y: 22.58))
        icon.addCurve(to: CGPoint(x: 19.4, y: 21.95), controlPoint1: CGPoint(x: 19.02, y: 22.21), controlPoint2: CGPoint(x: 19.21, y: 22.08))
        icon.addCurve(to: CGPoint(x: 20.66, y: 22.07), controlPoint1: CGPoint(x: 19.78, y: 21.67), controlPoint2: CGPoint(x: 20.32, y: 21.73))
        icon.addLine(to: CGPoint(x: 20.78, y: 22.19))
        icon.addCurve(to: CGPoint(x: 22.19, y: 22.19), controlPoint1: CGPoint(x: 21.17, y: 22.58), controlPoint2: CGPoint(x: 21.8, y: 22.58))
        icon.addCurve(to: CGPoint(x: 22.19, y: 20.78), controlPoint1: CGPoint(x: 22.58, y: 21.8), controlPoint2: CGPoint(x: 22.58, y: 21.17))
        icon.addLine(to: CGPoint(x: 22.07, y: 20.65))
        icon.addCurve(to: CGPoint(x: 21.95, y: 19.39), controlPoint1: CGPoint(x: 21.73, y: 20.32), controlPoint2: CGPoint(x: 21.67, y: 19.78))
        icon.addCurve(to: CGPoint(x: 22.33, y: 18.82), controlPoint1: CGPoint(x: 22.08, y: 19.21), controlPoint2: CGPoint(x: 22.21, y: 19.01))
        icon.addCurve(to: CGPoint(x: 23.55, y: 18.45), controlPoint1: CGPoint(x: 22.58, y: 18.41), controlPoint2: CGPoint(x: 23.11, y: 18.26))
        icon.addLine(to: CGPoint(x: 23.7, y: 18.51))
        icon.addCurve(to: CGPoint(x: 25.01, y: 17.97), controlPoint1: CGPoint(x: 24.21, y: 18.73), controlPoint2: CGPoint(x: 24.8, y: 18.48))
        icon.addCurve(to: CGPoint(x: 24.47, y: 16.67), controlPoint1: CGPoint(x: 25.22, y: 17.46), controlPoint2: CGPoint(x: 24.98, y: 16.88))
        icon.addLine(to: CGPoint(x: 24.31, y: 16.6))
        icon.addCurve(to: CGPoint(x: 23.72, y: 15.49), controlPoint1: CGPoint(x: 23.88, y: 16.42), controlPoint2: CGPoint(x: 23.61, y: 15.95))
        icon.addCurve(to: CGPoint(x: 23.85, y: 14.81), controlPoint1: CGPoint(x: 23.77, y: 15.26), controlPoint2: CGPoint(x: 23.81, y: 15.04))
        icon.addCurve(to: CGPoint(x: 24.83, y: 14), controlPoint1: CGPoint(x: 23.92, y: 14.34), controlPoint2: CGPoint(x: 24.35, y: 14))
        icon.addLine(to: CGPoint(x: 25, y: 14))
        icon.addCurve(to: CGPoint(x: 26, y: 13), controlPoint1: CGPoint(x: 25.55, y: 14), controlPoint2: CGPoint(x: 26, y: 13.55))
        icon.addCurve(to: CGPoint(x: 25, y: 12), controlPoint1: CGPoint(x: 26, y: 12.45), controlPoint2: CGPoint(x: 25.55, y: 12))
        icon.addLine(to: CGPoint(x: 24.83, y: 12))
        icon.addCurve(to: CGPoint(x: 23.85, y: 11.19), controlPoint1: CGPoint(x: 24.35, y: 12), controlPoint2: CGPoint(x: 23.92, y: 11.66))
        icon.addCurve(to: CGPoint(x: 23.72, y: 10.51), controlPoint1: CGPoint(x: 23.81, y: 10.96), controlPoint2: CGPoint(x: 23.77, y: 10.74))
        icon.addCurve(to: CGPoint(x: 24.31, y: 9.4), controlPoint1: CGPoint(x: 23.61, y: 10.05), controlPoint2: CGPoint(x: 23.87, y: 9.58))
        icon.addLine(to: CGPoint(x: 24.47, y: 9.33))
        icon.addCurve(to: CGPoint(x: 25.01, y: 8.02), controlPoint1: CGPoint(x: 24.98, y: 9.12), controlPoint2: CGPoint(x: 25.22, y: 8.54))
        icon.addCurve(to: CGPoint(x: 23.7, y: 7.48), controlPoint1: CGPoint(x: 24.8, y: 7.51), controlPoint2: CGPoint(x: 24.21, y: 7.27))
        icon.addLine(to: CGPoint(x: 23.54, y: 7.55))
        icon.addCurve(to: CGPoint(x: 22.33, y: 7.18), controlPoint1: CGPoint(x: 23.1, y: 7.73), controlPoint2: CGPoint(x: 22.58, y: 7.58))
        icon.addCurve(to: CGPoint(x: 21.95, y: 6.6), controlPoint1: CGPoint(x: 22.21, y: 6.98), controlPoint2: CGPoint(x: 22.08, y: 6.79))
        icon.addCurve(to: CGPoint(x: 22.07, y: 5.34), controlPoint1: CGPoint(x: 21.67, y: 6.22), controlPoint2: CGPoint(x: 21.73, y: 5.68))
        icon.addLine(to: CGPoint(x: 22.19, y: 5.22))
        icon.addCurve(to: CGPoint(x: 22.19, y: 3.81), controlPoint1: CGPoint(x: 22.58, y: 4.83), controlPoint2: CGPoint(x: 22.58, y: 4.2))
        icon.addCurve(to: CGPoint(x: 20.78, y: 3.81), controlPoint1: CGPoint(x: 21.8, y: 3.42), controlPoint2: CGPoint(x: 21.17, y: 3.42))
        icon.addLine(to: CGPoint(x: 20.66, y: 3.93))
        icon.addCurve(to: CGPoint(x: 19.39, y: 4.05), controlPoint1: CGPoint(x: 20.32, y: 4.27), controlPoint2: CGPoint(x: 19.78, y: 4.33))
        icon.addCurve(to: CGPoint(x: 18.82, y: 3.67), controlPoint1: CGPoint(x: 19.21, y: 3.92), controlPoint2: CGPoint(x: 19.01, y: 3.79))
        icon.addCurve(to: CGPoint(x: 18.45, y: 2.46), controlPoint1: CGPoint(x: 18.41, y: 3.42), controlPoint2: CGPoint(x: 18.27, y: 2.9))
        icon.addLine(to: CGPoint(x: 18.51, y: 2.3))
        icon.addCurve(to: CGPoint(x: 17.97, y: 0.99), controlPoint1: CGPoint(x: 18.73, y: 1.79), controlPoint2: CGPoint(x: 18.48, y: 1.2))
        icon.addCurve(to: CGPoint(x: 16.67, y: 1.53), controlPoint1: CGPoint(x: 17.46, y: 0.78), controlPoint2: CGPoint(x: 16.88, y: 1.02))
        icon.addLine(to: CGPoint(x: 16.6, y: 1.69))
        icon.addCurve(to: CGPoint(x: 15.49, y: 2.28), controlPoint1: CGPoint(x: 16.42, y: 2.13), controlPoint2: CGPoint(x: 15.95, y: 2.39))
        icon.addCurve(to: CGPoint(x: 14.81, y: 2.15), controlPoint1: CGPoint(x: 15.26, y: 2.23), controlPoint2: CGPoint(x: 15.04, y: 2.19))
        icon.addCurve(to: CGPoint(x: 14, y: 1.17), controlPoint1: CGPoint(x: 14.34, y: 2.08), controlPoint2: CGPoint(x: 14, y: 1.65))
        icon.addLine(to: CGPoint(x: 14, y: 1))
        icon.addCurve(to: CGPoint(x: 13, y: 0), controlPoint1: CGPoint(x: 14, y: 0.45), controlPoint2: CGPoint(x: 13.55, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 13, y: 5))
        icon.addCurve(to: CGPoint(x: 20.93, y: 12), controlPoint1: CGPoint(x: 17.08, y: 5), controlPoint2: CGPoint(x: 20.44, y: 8.06))
        icon.addLine(to: CGPoint(x: 14.73, y: 12))
        icon.addCurve(to: CGPoint(x: 13, y: 11), controlPoint1: CGPoint(x: 14.37, y: 11.38), controlPoint2: CGPoint(x: 13.71, y: 11))
        icon.addLine(to: CGPoint(x: 13, y: 11))
        icon.addLine(to: CGPoint(x: 9.9, y: 5.62))
        icon.addCurve(to: CGPoint(x: 13, y: 5), controlPoint1: CGPoint(x: 10.85, y: 5.22), controlPoint2: CGPoint(x: 11.9, y: 5))
        icon.close()
        icon.move(to: CGPoint(x: 8.17, y: 6.63))
        icon.addLine(to: CGPoint(x: 11.27, y: 12))
        icon.addCurve(to: CGPoint(x: 11, y: 13), controlPoint1: CGPoint(x: 11.09, y: 12.3), controlPoint2: CGPoint(x: 11, y: 12.65))
        icon.addCurve(to: CGPoint(x: 11.27, y: 14), controlPoint1: CGPoint(x: 11, y: 13.35), controlPoint2: CGPoint(x: 11.09, y: 13.69))
        icon.addLine(to: CGPoint(x: 8.17, y: 19.37))
        icon.addCurve(to: CGPoint(x: 5, y: 13), controlPoint1: CGPoint(x: 6.25, y: 17.9), controlPoint2: CGPoint(x: 5, y: 15.6))
        icon.addCurve(to: CGPoint(x: 8.17, y: 6.63), controlPoint1: CGPoint(x: 5, y: 10.4), controlPoint2: CGPoint(x: 6.25, y: 8.09))
        icon.close()
        icon.move(to: CGPoint(x: 14.73, y: 14))
        icon.addLine(to: CGPoint(x: 20.93, y: 14))
        icon.addCurve(to: CGPoint(x: 13, y: 21), controlPoint1: CGPoint(x: 20.44, y: 17.94), controlPoint2: CGPoint(x: 17.08, y: 21))
        icon.addCurve(to: CGPoint(x: 9.9, y: 20.38), controlPoint1: CGPoint(x: 11.9, y: 21), controlPoint2: CGPoint(x: 10.85, y: 20.78))
        icon.addLine(to: CGPoint(x: 13, y: 15))
        icon.addLine(to: CGPoint(x: 13, y: 15))
        icon.addCurve(to: CGPoint(x: 14.73, y: 14), controlPoint1: CGPoint(x: 13.71, y: 15), controlPoint2: CGPoint(x: 14.37, y: 14.62))
        icon.close()
        context.saveGState()
        context.translateBy(x: 5, y: 5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 5, y: 5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsQuickActionProfile(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 13, y: 26))
        icon.addCurve(to: CGPoint(x: 0, y: 13), controlPoint1: CGPoint(x: 5.82, y: 26), controlPoint2: CGPoint(x: 0, y: 20.18))
        icon.addCurve(to: CGPoint(x: 13, y: 0), controlPoint1: CGPoint(x: 0, y: 5.82), controlPoint2: CGPoint(x: 5.82, y: 0))
        icon.addCurve(to: CGPoint(x: 26, y: 13), controlPoint1: CGPoint(x: 20.18, y: 0), controlPoint2: CGPoint(x: 26, y: 5.82))
        icon.addCurve(to: CGPoint(x: 13, y: 26), controlPoint1: CGPoint(x: 26, y: 20.18), controlPoint2: CGPoint(x: 20.18, y: 26))
        icon.close()
        icon.move(to: CGPoint(x: 5.73, y: 21.25))
        icon.addCurve(to: CGPoint(x: 2, y: 13), controlPoint1: CGPoint(x: 3.44, y: 19.24), controlPoint2: CGPoint(x: 2, y: 16.29))
        icon.addCurve(to: CGPoint(x: 13, y: 2), controlPoint1: CGPoint(x: 2, y: 6.92), controlPoint2: CGPoint(x: 6.92, y: 2))
        icon.addCurve(to: CGPoint(x: 24, y: 13), controlPoint1: CGPoint(x: 19.08, y: 2), controlPoint2: CGPoint(x: 24, y: 6.92))
        icon.addCurve(to: CGPoint(x: 20.33, y: 21.2), controlPoint1: CGPoint(x: 24, y: 16.26), controlPoint2: CGPoint(x: 22.58, y: 19.19))
        icon.addLine(to: CGPoint(x: 20.3, y: 20.91))
        icon.addCurve(to: CGPoint(x: 19.06, y: 18.68), controlPoint1: CGPoint(x: 20.1, y: 19.94), controlPoint2: CGPoint(x: 19.69, y: 19.2))
        icon.addCurve(to: CGPoint(x: 16.69, y: 17.98), controlPoint1: CGPoint(x: 18.62, y: 18.32), controlPoint2: CGPoint(x: 17.83, y: 18.09))
        icon.addCurve(to: CGPoint(x: 15.76, y: 17.72), controlPoint1: CGPoint(x: 16.39, y: 17.96), controlPoint2: CGPoint(x: 16.11, y: 17.9))
        icon.addCurve(to: CGPoint(x: 15.14, y: 17.04), controlPoint1: CGPoint(x: 15.37, y: 17.52), controlPoint2: CGPoint(x: 15.19, y: 17.22))
        icon.addCurve(to: CGPoint(x: 15.14, y: 15.77), controlPoint1: CGPoint(x: 15.14, y: 16.63), controlPoint2: CGPoint(x: 15.14, y: 16.18))
        icon.addCurve(to: CGPoint(x: 15.16, y: 15.7), controlPoint1: CGPoint(x: 15.14, y: 15.75), controlPoint2: CGPoint(x: 15.15, y: 15.71))
        icon.addCurve(to: CGPoint(x: 15.83, y: 14.5), controlPoint1: CGPoint(x: 15.5, y: 15.42), controlPoint2: CGPoint(x: 15.68, y: 14.88))
        icon.addCurve(to: CGPoint(x: 16.12, y: 13.49), controlPoint1: CGPoint(x: 15.95, y: 14.17), controlPoint2: CGPoint(x: 16.02, y: 13.82))
        icon.addCurve(to: CGPoint(x: 16.2, y: 13.39), controlPoint1: CGPoint(x: 16.13, y: 13.45), controlPoint2: CGPoint(x: 16.17, y: 13.4))
        icon.addCurve(to: CGPoint(x: 16.57, y: 13.12), controlPoint1: CGPoint(x: 16.36, y: 13.35), controlPoint2: CGPoint(x: 16.48, y: 13.26))
        icon.addCurve(to: CGPoint(x: 16.88, y: 11.73), controlPoint1: CGPoint(x: 16.85, y: 12.7), controlPoint2: CGPoint(x: 16.96, y: 12.23))
        icon.addCurve(to: CGPoint(x: 16.63, y: 11.31), controlPoint1: CGPoint(x: 16.85, y: 11.56), controlPoint2: CGPoint(x: 16.76, y: 11.42))
        icon.addCurve(to: CGPoint(x: 16.59, y: 11.15), controlPoint1: CGPoint(x: 16.57, y: 11.26), controlPoint2: CGPoint(x: 16.57, y: 11.22))
        icon.addCurve(to: CGPoint(x: 17.01, y: 8.47), controlPoint1: CGPoint(x: 16.86, y: 10.27), controlPoint2: CGPoint(x: 17.02, y: 9.39))
        icon.addCurve(to: CGPoint(x: 16.77, y: 7.14), controlPoint1: CGPoint(x: 17, y: 8.01), controlPoint2: CGPoint(x: 16.94, y: 7.57))
        icon.addCurve(to: CGPoint(x: 15.16, y: 5.81), controlPoint1: CGPoint(x: 16.48, y: 6.4), controlPoint2: CGPoint(x: 15.94, y: 5.96))
        icon.addCurve(to: CGPoint(x: 14.89, y: 5.64), controlPoint1: CGPoint(x: 15.04, y: 5.79), controlPoint2: CGPoint(x: 14.97, y: 5.74))
        icon.addCurve(to: CGPoint(x: 13.93, y: 5.11), controlPoint1: CGPoint(x: 14.65, y: 5.33), controlPoint2: CGPoint(x: 14.3, y: 5.18))
        icon.addCurve(to: CGPoint(x: 12.85, y: 5), controlPoint1: CGPoint(x: 13.57, y: 5.04), controlPoint2: CGPoint(x: 13.21, y: 5))
        icon.addCurve(to: CGPoint(x: 10.75, y: 5.49), controlPoint1: CGPoint(x: 12.13, y: 5), controlPoint2: CGPoint(x: 11.43, y: 5.16))
        icon.addCurve(to: CGPoint(x: 9.18, y: 7.7), controlPoint1: CGPoint(x: 9.84, y: 5.94), controlPoint2: CGPoint(x: 9.37, y: 6.73))
        icon.addCurve(to: CGPoint(x: 9.17, y: 9.85), controlPoint1: CGPoint(x: 9.04, y: 8.42), controlPoint2: CGPoint(x: 9.06, y: 9.13))
        icon.addCurve(to: CGPoint(x: 9.42, y: 11.16), controlPoint1: CGPoint(x: 9.23, y: 10.29), controlPoint2: CGPoint(x: 9.34, y: 10.72))
        icon.addCurve(to: CGPoint(x: 9.4, y: 11.28), controlPoint1: CGPoint(x: 9.43, y: 11.19), controlPoint2: CGPoint(x: 9.43, y: 11.25))
        icon.addCurve(to: CGPoint(x: 9.1, y: 12.15), controlPoint1: CGPoint(x: 9.13, y: 11.51), controlPoint2: CGPoint(x: 9.07, y: 11.82))
        icon.addCurve(to: CGPoint(x: 9.38, y: 13.06), controlPoint1: CGPoint(x: 9.14, y: 12.47), controlPoint2: CGPoint(x: 9.2, y: 12.78))
        icon.addCurve(to: CGPoint(x: 9.8, y: 13.39), controlPoint1: CGPoint(x: 9.48, y: 13.21), controlPoint2: CGPoint(x: 9.61, y: 13.34))
        icon.addCurve(to: CGPoint(x: 9.88, y: 13.5), controlPoint1: CGPoint(x: 9.84, y: 13.4), controlPoint2: CGPoint(x: 9.88, y: 13.46))
        icon.addCurve(to: CGPoint(x: 10.19, y: 14.67), controlPoint1: CGPoint(x: 9.95, y: 13.97), controlPoint2: CGPoint(x: 10.06, y: 14.35))
        icon.addCurve(to: CGPoint(x: 10.84, y: 15.67), controlPoint1: CGPoint(x: 10.48, y: 15.33), controlPoint2: CGPoint(x: 10.83, y: 15.66))
        icon.addCurve(to: CGPoint(x: 10.92, y: 15.77), controlPoint1: CGPoint(x: 10.89, y: 15.74), controlPoint2: CGPoint(x: 10.92, y: 15.7))
        icon.addCurve(to: CGPoint(x: 10.93, y: 17.04), controlPoint1: CGPoint(x: 10.92, y: 15.77), controlPoint2: CGPoint(x: 10.92, y: 16.63))
        icon.addCurve(to: CGPoint(x: 10.3, y: 17.72), controlPoint1: CGPoint(x: 10.87, y: 17.22), controlPoint2: CGPoint(x: 10.69, y: 17.52))
        icon.addCurve(to: CGPoint(x: 9.37, y: 17.98), controlPoint1: CGPoint(x: 9.95, y: 17.9), controlPoint2: CGPoint(x: 9.67, y: 17.96))
        icon.addCurve(to: CGPoint(x: 7, y: 18.68), controlPoint1: CGPoint(x: 8.23, y: 18.09), controlPoint2: CGPoint(x: 7.44, y: 18.32))
        icon.addCurve(to: CGPoint(x: 5.76, y: 20.91), controlPoint1: CGPoint(x: 6.37, y: 19.2), controlPoint2: CGPoint(x: 5.96, y: 19.94))
        icon.addLine(to: CGPoint(x: 5.73, y: 21.25))
        icon.close()
        context.saveGState()
        context.translateBy(x: 5, y: 5.5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 5, y: 5.5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsQuickActionRecents(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 12, y: 2))
        icon.addCurve(to: CGPoint(x: 2, y: 12), controlPoint1: CGPoint(x: 6.48, y: 2), controlPoint2: CGPoint(x: 2, y: 6.48))
        icon.addCurve(to: CGPoint(x: 12, y: 22), controlPoint1: CGPoint(x: 2, y: 17.52), controlPoint2: CGPoint(x: 6.48, y: 22))
        icon.addCurve(to: CGPoint(x: 22, y: 12), controlPoint1: CGPoint(x: 17.52, y: 22), controlPoint2: CGPoint(x: 22, y: 17.52))
        icon.addCurve(to: CGPoint(x: 12, y: 2), controlPoint1: CGPoint(x: 22, y: 6.48), controlPoint2: CGPoint(x: 17.52, y: 2))
        icon.close()
        icon.move(to: CGPoint(x: 12, y: 0))
        icon.addCurve(to: CGPoint(x: 24, y: 12), controlPoint1: CGPoint(x: 18.63, y: 0), controlPoint2: CGPoint(x: 24, y: 5.37))
        icon.addCurve(to: CGPoint(x: 12, y: 24), controlPoint1: CGPoint(x: 24, y: 18.63), controlPoint2: CGPoint(x: 18.63, y: 24))
        icon.addCurve(to: CGPoint(x: 0, y: 12), controlPoint1: CGPoint(x: 5.37, y: 24), controlPoint2: CGPoint(x: 0, y: 18.63))
        icon.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 0, y: 5.37), controlPoint2: CGPoint(x: 5.37, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 11.37, y: 5.16))
        icon.addLine(to: CGPoint(x: 11.37, y: 12.31))
        icon.addLine(to: CGPoint(x: 6.64, y: 12.31))
        icon.addCurve(to: CGPoint(x: 5.6, y: 13.35), controlPoint1: CGPoint(x: 6.06, y: 12.31), controlPoint2: CGPoint(x: 5.6, y: 12.77))
        icon.addCurve(to: CGPoint(x: 6.64, y: 14.38), controlPoint1: CGPoint(x: 5.6, y: 13.92), controlPoint2: CGPoint(x: 6.06, y: 14.38))
        icon.addLine(to: CGPoint(x: 13.44, y: 14.38))
        icon.addLine(to: CGPoint(x: 13.44, y: 5.16))
        icon.addCurve(to: CGPoint(x: 12.4, y: 4.12), controlPoint1: CGPoint(x: 13.44, y: 4.58), controlPoint2: CGPoint(x: 12.97, y: 4.12))
        icon.addCurve(to: CGPoint(x: 11.37, y: 5.16), controlPoint1: CGPoint(x: 11.83, y: 4.12), controlPoint2: CGPoint(x: 11.37, y: 4.58))
        icon.close()
        context.saveGState()
        context.translateBy(x: 6, y: 6)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 6, y: 6))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsQuickActionInfo(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 11.75, y: 7.8))
        icon.addCurve(to: CGPoint(x: 10.4, y: 6.45), controlPoint1: CGPoint(x: 11, y: 7.8), controlPoint2: CGPoint(x: 10.4, y: 7.2))
        icon.addCurve(to: CGPoint(x: 11.75, y: 5.1), controlPoint1: CGPoint(x: 10.4, y: 5.7), controlPoint2: CGPoint(x: 11, y: 5.1))
        icon.addCurve(to: CGPoint(x: 13.1, y: 6.45), controlPoint1: CGPoint(x: 12.5, y: 5.1), controlPoint2: CGPoint(x: 13.1, y: 5.7))
        icon.addCurve(to: CGPoint(x: 11.75, y: 7.8), controlPoint1: CGPoint(x: 13.1, y: 7.2), controlPoint2: CGPoint(x: 12.5, y: 7.8))
        icon.close()
        icon.move(to: CGPoint(x: 12, y: 24))
        icon.addCurve(to: CGPoint(x: 0, y: 12), controlPoint1: CGPoint(x: 5.37, y: 24), controlPoint2: CGPoint(x: 0, y: 18.63))
        icon.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 0, y: 5.37), controlPoint2: CGPoint(x: 5.37, y: 0))
        icon.addCurve(to: CGPoint(x: 24, y: 12), controlPoint1: CGPoint(x: 18.63, y: 0), controlPoint2: CGPoint(x: 24, y: 5.37))
        icon.addCurve(to: CGPoint(x: 12, y: 24), controlPoint1: CGPoint(x: 24, y: 18.63), controlPoint2: CGPoint(x: 18.63, y: 24))
        icon.close()
        icon.move(to: CGPoint(x: 12, y: 22))
        icon.addCurve(to: CGPoint(x: 22, y: 12), controlPoint1: CGPoint(x: 17.52, y: 22), controlPoint2: CGPoint(x: 22, y: 17.52))
        icon.addCurve(to: CGPoint(x: 12, y: 2), controlPoint1: CGPoint(x: 22, y: 6.48), controlPoint2: CGPoint(x: 17.52, y: 2))
        icon.addCurve(to: CGPoint(x: 2, y: 12), controlPoint1: CGPoint(x: 6.48, y: 2), controlPoint2: CGPoint(x: 2, y: 6.48))
        icon.addCurve(to: CGPoint(x: 12, y: 22), controlPoint1: CGPoint(x: 2, y: 17.52), controlPoint2: CGPoint(x: 6.48, y: 22))
        icon.close()
        icon.move(to: CGPoint(x: 14, y: 17.1))
        icon.addLine(to: CGPoint(x: 14.1, y: 17.2))
        icon.addLine(to: CGPoint(x: 14.1, y: 17.7))
        icon.addLine(to: CGPoint(x: 14, y: 17.8))
        icon.addLine(to: CGPoint(x: 10, y: 17.8))
        icon.addLine(to: CGPoint(x: 9.9, y: 17.7))
        icon.addLine(to: CGPoint(x: 9.9, y: 17.2))
        icon.addLine(to: CGPoint(x: 10, y: 17.1))
        icon.addLine(to: CGPoint(x: 10.9, y: 17.1))
        icon.addLine(to: CGPoint(x: 10.9, y: 9.8))
        icon.addLine(to: CGPoint(x: 10, y: 9.8))
        icon.addLine(to: CGPoint(x: 9.9, y: 9.7))
        icon.addLine(to: CGPoint(x: 9.9, y: 9.2))
        icon.addLine(to: CGPoint(x: 10, y: 9.1))
        icon.addLine(to: CGPoint(x: 13, y: 9.1))
        icon.addLine(to: CGPoint(x: 13.1, y: 9.2))
        icon.addLine(to: CGPoint(x: 13.1, y: 17.1))
        icon.addLine(to: CGPoint(x: 14, y: 17.1))
        icon.close()
        context.saveGState()
        context.translateBy(x: 6, y: 6)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 6, y: 6))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsQuickActionOk(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 21.48, y: 2.98))
        icon.addCurve(to: CGPoint(x: 21.48, y: 0.51), controlPoint1: CGPoint(x: 22.17, y: 2.29), controlPoint2: CGPoint(x: 22.17, y: 1.19))
        icon.addCurve(to: CGPoint(x: 18.98, y: 0.51), controlPoint1: CGPoint(x: 20.79, y: -0.17), controlPoint2: CGPoint(x: 19.67, y: -0.17))
        icon.addLine(to: CGPoint(x: 8.24, y: 11.07))
        icon.addLine(to: CGPoint(x: 3.02, y: 5.94))
        icon.addCurve(to: CGPoint(x: 0.52, y: 5.94), controlPoint1: CGPoint(x: 2.33, y: 5.26), controlPoint2: CGPoint(x: 1.21, y: 5.26))
        icon.addCurve(to: CGPoint(x: 0.52, y: 8.4), controlPoint1: CGPoint(x: -0.17, y: 6.62), controlPoint2: CGPoint(x: -0.17, y: 7.72))
        icon.addLine(to: CGPoint(x: 8.24, y: 16))
        icon.addLine(to: CGPoint(x: 21.48, y: 2.98))
        icon.close()
        context.saveGState()
        context.translateBy(x: 7, y: 10)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 7, y: 10))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsQuickActionReply(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 12.36, y: 5.59))
        icon.addCurve(to: CGPoint(x: 11.9, y: 5.62), controlPoint1: CGPoint(x: 12.16, y: 5.59), controlPoint2: CGPoint(x: 11.9, y: 5.6))
        icon.addLine(to: CGPoint(x: 11.9, y: 0))
        icon.addLine(to: CGPoint(x: 0, y: 8.98))
        icon.addLine(to: CGPoint(x: 11.9, y: 17.85))
        icon.addLine(to: CGPoint(x: 11.9, y: 11.69))
        icon.addCurve(to: CGPoint(x: 13.39, y: 11.54), controlPoint1: CGPoint(x: 11.9, y: 11.6), controlPoint2: CGPoint(x: 12.84, y: 11.54))
        icon.addCurve(to: CGPoint(x: 23.62, y: 19.81), controlPoint1: CGPoint(x: 18.27, y: 11.54), controlPoint2: CGPoint(x: 22.32, y: 15.04))
        icon.addCurve(to: CGPoint(x: 24, y: 17.06), controlPoint1: CGPoint(x: 23.84, y: 18.93), controlPoint2: CGPoint(x: 24, y: 18.01))
        icon.addCurve(to: CGPoint(x: 12.36, y: 5.59), controlPoint1: CGPoint(x: 24, y: 10.72), controlPoint2: CGPoint(x: 18.8, y: 5.59))
        context.saveGState()
        context.translateBy(x: 6, y: 8)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 6, y: 8))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsQuickActionInfoCopy(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 13.81, y: 6))
        icon.addCurve(to: CGPoint(x: 17.82, y: 10), controlPoint1: CGPoint(x: 16.03, y: 6), controlPoint2: CGPoint(x: 17.82, y: 7.8))
        icon.addLine(to: CGPoint(x: 17.82, y: 19.5))
        icon.addCurve(to: CGPoint(x: 13.81, y: 23.5), controlPoint1: CGPoint(x: 17.82, y: 21.71), controlPoint2: CGPoint(x: 16.03, y: 23.5))
        icon.addLine(to: CGPoint(x: 4, y: 23.5))
        icon.addCurve(to: CGPoint(x: 0, y: 19.5), controlPoint1: CGPoint(x: 1.79, y: 23.5), controlPoint2: CGPoint(x: 0, y: 21.71))
        icon.addLine(to: CGPoint(x: 0, y: 10))
        icon.addCurve(to: CGPoint(x: 4, y: 6), controlPoint1: CGPoint(x: 0, y: 7.8), controlPoint2: CGPoint(x: 1.79, y: 6))
        icon.addLine(to: CGPoint(x: 13.81, y: 6))
        icon.close()
        icon.move(to: CGPoint(x: 15.82, y: 19.5))
        icon.addLine(to: CGPoint(x: 15.82, y: 10))
        icon.addCurve(to: CGPoint(x: 13.81, y: 8), controlPoint1: CGPoint(x: 15.82, y: 8.9), controlPoint2: CGPoint(x: 14.92, y: 8))
        icon.addLine(to: CGPoint(x: 4, y: 8))
        icon.addCurve(to: CGPoint(x: 2, y: 10), controlPoint1: CGPoint(x: 2.9, y: 8), controlPoint2: CGPoint(x: 2, y: 8.9))
        icon.addLine(to: CGPoint(x: 2, y: 19.5))
        icon.addCurve(to: CGPoint(x: 4, y: 21.5), controlPoint1: CGPoint(x: 2, y: 20.61), controlPoint2: CGPoint(x: 2.9, y: 21.5))
        icon.addLine(to: CGPoint(x: 13.81, y: 21.5))
        icon.addCurve(to: CGPoint(x: 15.82, y: 19.5), controlPoint1: CGPoint(x: 14.92, y: 21.5), controlPoint2: CGPoint(x: 15.82, y: 20.61))
        icon.close()
        icon.move(to: CGPoint(x: 12.91, y: 14))
        icon.addCurve(to: CGPoint(x: 13.66, y: 14.75), controlPoint1: CGPoint(x: 13.33, y: 14), controlPoint2: CGPoint(x: 13.66, y: 14.34))
        icon.addCurve(to: CGPoint(x: 12.91, y: 15.5), controlPoint1: CGPoint(x: 13.66, y: 15.17), controlPoint2: CGPoint(x: 13.33, y: 15.5))
        icon.addLine(to: CGPoint(x: 9.66, y: 15.5))
        icon.addLine(to: CGPoint(x: 9.66, y: 18.75))
        icon.addCurve(to: CGPoint(x: 8.91, y: 19.5), controlPoint1: CGPoint(x: 9.66, y: 19.17), controlPoint2: CGPoint(x: 9.32, y: 19.5))
        icon.addCurve(to: CGPoint(x: 8.16, y: 18.75), controlPoint1: CGPoint(x: 8.49, y: 19.5), controlPoint2: CGPoint(x: 8.16, y: 19.17))
        icon.addLine(to: CGPoint(x: 8.16, y: 15.5))
        icon.addLine(to: CGPoint(x: 4.9, y: 15.5))
        icon.addCurve(to: CGPoint(x: 4.15, y: 14.75), controlPoint1: CGPoint(x: 4.49, y: 15.5), controlPoint2: CGPoint(x: 4.15, y: 15.17))
        icon.addCurve(to: CGPoint(x: 4.9, y: 14), controlPoint1: CGPoint(x: 4.15, y: 14.34), controlPoint2: CGPoint(x: 4.49, y: 14))
        icon.addLine(to: CGPoint(x: 8.16, y: 14))
        icon.addLine(to: CGPoint(x: 8.16, y: 10.75))
        icon.addCurve(to: CGPoint(x: 8.91, y: 10), controlPoint1: CGPoint(x: 8.16, y: 10.34), controlPoint2: CGPoint(x: 8.49, y: 10))
        icon.addCurve(to: CGPoint(x: 9.66, y: 10.75), controlPoint1: CGPoint(x: 9.32, y: 10), controlPoint2: CGPoint(x: 9.66, y: 10.34))
        icon.addLine(to: CGPoint(x: 9.66, y: 14))
        icon.addLine(to: CGPoint(x: 12.91, y: 14))
        icon.close()
        icon.move(to: CGPoint(x: 13.03, y: 2))
        icon.addLine(to: CGPoint(x: 13.03, y: 0))
        icon.addLine(to: CGPoint(x: 17.92, y: 0))
        icon.addLine(to: CGPoint(x: 17.92, y: 2))
        icon.addLine(to: CGPoint(x: 13.03, y: 2))
        icon.close()
        icon.move(to: CGPoint(x: 20.49, y: 0))
        icon.addCurve(to: CGPoint(x: 24.5, y: 4), controlPoint1: CGPoint(x: 22.71, y: 0), controlPoint2: CGPoint(x: 24.5, y: 1.79))
        icon.addLine(to: CGPoint(x: 24.5, y: 4.45))
        icon.addLine(to: CGPoint(x: 22.5, y: 4.45))
        icon.addLine(to: CGPoint(x: 22.5, y: 4))
        icon.addCurve(to: CGPoint(x: 20.49, y: 2), controlPoint1: CGPoint(x: 22.5, y: 2.9), controlPoint2: CGPoint(x: 21.6, y: 2))
        icon.addLine(to: CGPoint(x: 20.04, y: 2))
        icon.addLine(to: CGPoint(x: 20.04, y: 0))
        icon.addLine(to: CGPoint(x: 20.49, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 22.5, y: 14.46))
        icon.addLine(to: CGPoint(x: 22.5, y: 14.01))
        icon.addLine(to: CGPoint(x: 24.5, y: 14.01))
        icon.addLine(to: CGPoint(x: 24.5, y: 14.46))
        icon.addCurve(to: CGPoint(x: 20.49, y: 18.46), controlPoint1: CGPoint(x: 24.5, y: 16.67), controlPoint2: CGPoint(x: 22.71, y: 18.46))
        icon.addLine(to: CGPoint(x: 20.04, y: 18.46))
        icon.addLine(to: CGPoint(x: 20.04, y: 16.46))
        icon.addLine(to: CGPoint(x: 20.49, y: 16.46))
        icon.addCurve(to: CGPoint(x: 22.5, y: 14.46), controlPoint1: CGPoint(x: 21.6, y: 16.46), controlPoint2: CGPoint(x: 22.5, y: 15.56))
        icon.close()
        icon.move(to: CGPoint(x: 6.01, y: 4))
        icon.addCurve(to: CGPoint(x: 10.02, y: 0), controlPoint1: CGPoint(x: 6.01, y: 1.79), controlPoint2: CGPoint(x: 7.81, y: 0))
        icon.addLine(to: CGPoint(x: 10.47, y: 0))
        icon.addLine(to: CGPoint(x: 10.47, y: 2))
        icon.addLine(to: CGPoint(x: 10.02, y: 2))
        icon.addCurve(to: CGPoint(x: 8.02, y: 4), controlPoint1: CGPoint(x: 8.92, y: 2), controlPoint2: CGPoint(x: 8.02, y: 2.9))
        icon.addLine(to: CGPoint(x: 8.02, y: 4.45))
        icon.addLine(to: CGPoint(x: 6.01, y: 4.45))
        icon.addLine(to: CGPoint(x: 6.01, y: 4))
        icon.close()
        icon.move(to: CGPoint(x: 22.5, y: 11.9))
        icon.addLine(to: CGPoint(x: 22.5, y: 7.01))
        icon.addLine(to: CGPoint(x: 24.5, y: 7.01))
        icon.addLine(to: CGPoint(x: 24.5, y: 11.9))
        icon.addLine(to: CGPoint(x: 22.5, y: 11.9))
        icon.close()
        context.saveGState()
        context.translateBy(x: 5.75, y: 6.25)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 5.75, y: 6.25))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallSample(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 9, y: 18))
        icon.addCurve(to: CGPoint(x: 0, y: 9), controlPoint1: CGPoint(x: 4.03, y: 18), controlPoint2: CGPoint(x: 0, y: 13.97))
        icon.addCurve(to: CGPoint(x: 9, y: 0), controlPoint1: CGPoint(x: 0, y: 4.03), controlPoint2: CGPoint(x: 4.03, y: 0))
        icon.addCurve(to: CGPoint(x: 18, y: 9), controlPoint1: CGPoint(x: 13.97, y: 0), controlPoint2: CGPoint(x: 18, y: 4.03))
        icon.addCurve(to: CGPoint(x: 9, y: 18), controlPoint1: CGPoint(x: 18, y: 13.97), controlPoint2: CGPoint(x: 13.97, y: 18))
        icon.close()
        icon.move(to: CGPoint(x: 9, y: 16.5))
        icon.addCurve(to: CGPoint(x: 16.5, y: 9), controlPoint1: CGPoint(x: 13.14, y: 16.5), controlPoint2: CGPoint(x: 16.5, y: 13.14))
        icon.addCurve(to: CGPoint(x: 9, y: 1.5), controlPoint1: CGPoint(x: 16.5, y: 4.86), controlPoint2: CGPoint(x: 13.14, y: 1.5))
        icon.addCurve(to: CGPoint(x: 1.5, y: 9), controlPoint1: CGPoint(x: 4.86, y: 1.5), controlPoint2: CGPoint(x: 1.5, y: 4.86))
        icon.addCurve(to: CGPoint(x: 9, y: 16.5), controlPoint1: CGPoint(x: 1.5, y: 13.14), controlPoint2: CGPoint(x: 4.86, y: 16.5))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3, y: 3)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3, y: 3))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsQuickActionRocket(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 22.93, y: 0))
        icon.addCurve(to: CGPoint(x: 20.27, y: 0.12), controlPoint1: CGPoint(x: 22.24, y: 0), controlPoint2: CGPoint(x: 21.28, y: 0.03))
        icon.addCurve(to: CGPoint(x: 14.45, y: 2.1), controlPoint1: CGPoint(x: 18.24, y: 0.31), controlPoint2: CGPoint(x: 15.9, y: 0.65))
        icon.addCurve(to: CGPoint(x: 8.38, y: 9.6), controlPoint1: CGPoint(x: 13.23, y: 3.32), controlPoint2: CGPoint(x: 10.71, y: 6.56))
        icon.addCurve(to: CGPoint(x: 7.52, y: 10.74), controlPoint1: CGPoint(x: 7.92, y: 10.2), controlPoint2: CGPoint(x: 7.94, y: 10.18))
        icon.addLine(to: CGPoint(x: 5.81, y: 10.65))
        icon.addCurve(to: CGPoint(x: 2.53, y: 12.1), controlPoint1: CGPoint(x: 4.55, y: 10.58), controlPoint2: CGPoint(x: 3.33, y: 11.12))
        icon.addLine(to: CGPoint(x: 0.46, y: 14.64))
        icon.addCurve(to: CGPoint(x: 0.01, y: 15.7), controlPoint1: CGPoint(x: 0.46, y: 14.64), controlPoint2: CGPoint(x: -0.08, y: 15.3))
        icon.addCurve(to: CGPoint(x: 1.05, y: 16.25), controlPoint1: CGPoint(x: 0.1, y: 16.11), controlPoint2: CGPoint(x: 1.05, y: 16.25))
        icon.addLine(to: CGPoint(x: 4.3, y: 16.9))
        icon.addLine(to: CGPoint(x: 8.1, y: 20.71))
        icon.addLine(to: CGPoint(x: 8.75, y: 23.96))
        icon.addCurve(to: CGPoint(x: 9.29, y: 24.98), controlPoint1: CGPoint(x: 8.75, y: 23.96), controlPoint2: CGPoint(x: 8.9, y: 24.84))
        icon.addCurve(to: CGPoint(x: 10.36, y: 24.55), controlPoint1: CGPoint(x: 9.67, y: 25.12), controlPoint2: CGPoint(x: 10.36, y: 24.55))
        icon.addLine(to: CGPoint(x: 12.9, y: 22.47))
        icon.addCurve(to: CGPoint(x: 14.36, y: 19.19), controlPoint1: CGPoint(x: 13.89, y: 21.68), controlPoint2: CGPoint(x: 14.42, y: 20.46))
        icon.addLine(to: CGPoint(x: 14.26, y: 17.52))
        icon.addCurve(to: CGPoint(x: 15.44, y: 16.62), controlPoint1: CGPoint(x: 14.84, y: 17.08), controlPoint2: CGPoint(x: 14.82, y: 17.1))
        icon.addCurve(to: CGPoint(x: 22.93, y: 10.59), controlPoint1: CGPoint(x: 18.49, y: 14.29), controlPoint2: CGPoint(x: 21.73, y: 11.79))
        icon.addCurve(to: CGPoint(x: 24.88, y: 4.74), controlPoint1: CGPoint(x: 24.37, y: 9.15), controlPoint2: CGPoint(x: 24.69, y: 6.77))
        icon.addCurve(to: CGPoint(x: 24.98, y: 0.96), controlPoint1: CGPoint(x: 25.07, y: 2.7), controlPoint2: CGPoint(x: 24.98, y: 0.96))
        icon.addCurve(to: CGPoint(x: 24.75, y: 0.24), controlPoint1: CGPoint(x: 24.98, y: 0.96), controlPoint2: CGPoint(x: 24.95, y: 0.43))
        icon.addCurve(to: CGPoint(x: 24.05, y: 0.03), controlPoint1: CGPoint(x: 24.58, y: 0.08), controlPoint2: CGPoint(x: 24.05, y: 0.03))
        icon.addCurve(to: CGPoint(x: 22.93, y: 0), controlPoint1: CGPoint(x: 24.05, y: 0.03), controlPoint2: CGPoint(x: 23.62, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 22.03, y: 1.98))
        icon.addCurve(to: CGPoint(x: 22.98, y: 2.08), controlPoint1: CGPoint(x: 22.43, y: 1.98), controlPoint2: CGPoint(x: 22.9, y: 1.97))
        icon.addCurve(to: CGPoint(x: 22.9, y: 4.55), controlPoint1: CGPoint(x: 23.16, y: 2.31), controlPoint2: CGPoint(x: 23.03, y: 3.19))
        icon.addCurve(to: CGPoint(x: 21.51, y: 9.16), controlPoint1: CGPoint(x: 22.73, y: 6.43), controlPoint2: CGPoint(x: 22.15, y: 8.52))
        icon.addCurve(to: CGPoint(x: 14.23, y: 15.04), controlPoint1: CGPoint(x: 20.63, y: 10.05), controlPoint2: CGPoint(x: 17.27, y: 12.72))
        icon.addCurve(to: CGPoint(x: 9.13, y: 18.94), controlPoint1: CGPoint(x: 11.55, y: 17.1), controlPoint2: CGPoint(x: 9.66, y: 18.54))
        icon.addLine(to: CGPoint(x: 6.09, y: 15.91))
        icon.addCurve(to: CGPoint(x: 9.93, y: 10.8), controlPoint1: CGPoint(x: 6.5, y: 15.37), controlPoint2: CGPoint(x: 7.89, y: 13.47))
        icon.addCurve(to: CGPoint(x: 15.84, y: 3.5), controlPoint1: CGPoint(x: 12.25, y: 7.78), controlPoint2: CGPoint(x: 14.93, y: 4.41))
        icon.addCurve(to: CGPoint(x: 20.46, y: 2.07), controlPoint1: CGPoint(x: 16.52, y: 2.82), controlPoint2: CGPoint(x: 18.59, y: 2.25))
        icon.addCurve(to: CGPoint(x: 22.03, y: 1.98), controlPoint1: CGPoint(x: 21.13, y: 2.01), controlPoint2: CGPoint(x: 21.64, y: 1.98))
        icon.close()
        icon.move(to: CGPoint(x: 17.51, y: 5.48))
        icon.addCurve(to: CGPoint(x: 15.53, y: 7.49), controlPoint1: CGPoint(x: 16.41, y: 5.48), controlPoint2: CGPoint(x: 15.53, y: 6.38))
        icon.addCurve(to: CGPoint(x: 17.51, y: 9.5), controlPoint1: CGPoint(x: 15.53, y: 8.6), controlPoint2: CGPoint(x: 16.41, y: 9.5))
        icon.addCurve(to: CGPoint(x: 19.53, y: 7.49), controlPoint1: CGPoint(x: 18.62, y: 9.5), controlPoint2: CGPoint(x: 19.53, y: 8.6))
        icon.addCurve(to: CGPoint(x: 17.51, y: 5.48), controlPoint1: CGPoint(x: 19.53, y: 6.38), controlPoint2: CGPoint(x: 18.62, y: 5.48))
        icon.close()
        icon.move(to: CGPoint(x: 5.69, y: 12.63))
        icon.addLine(to: CGPoint(x: 6.06, y: 12.66))
        icon.addCurve(to: CGPoint(x: 4.36, y: 14.89), controlPoint1: CGPoint(x: 5.47, y: 13.45), controlPoint2: CGPoint(x: 4.49, y: 14.72))
        icon.addLine(to: CGPoint(x: 3.03, y: 14.61))
        icon.addLine(to: CGPoint(x: 4.05, y: 13.37))
        icon.addCurve(to: CGPoint(x: 5.69, y: 12.63), controlPoint1: CGPoint(x: 4.45, y: 12.88), controlPoint2: CGPoint(x: 5.06, y: 12.59))
        icon.close()
        icon.move(to: CGPoint(x: 3.43, y: 17.77))
        icon.addCurve(to: CGPoint(x: 1.76, y: 20.77), controlPoint1: CGPoint(x: 2.58, y: 18.62), controlPoint2: CGPoint(x: 2.1, y: 19.79))
        icon.addCurve(to: CGPoint(x: 1.26, y: 22.57), controlPoint1: CGPoint(x: 1.42, y: 21.75), controlPoint2: CGPoint(x: 1.26, y: 22.57))
        icon.addCurve(to: CGPoint(x: 1.36, y: 23.61), controlPoint1: CGPoint(x: 1.26, y: 22.57), controlPoint2: CGPoint(x: 1.1, y: 23.34))
        icon.addCurve(to: CGPoint(x: 2.41, y: 23.74), controlPoint1: CGPoint(x: 1.62, y: 23.87), controlPoint2: CGPoint(x: 2.41, y: 23.74))
        icon.addCurve(to: CGPoint(x: 4.17, y: 23.28), controlPoint1: CGPoint(x: 2.41, y: 23.74), controlPoint2: CGPoint(x: 3.2, y: 23.61))
        icon.addCurve(to: CGPoint(x: 7.21, y: 21.58), controlPoint1: CGPoint(x: 5.15, y: 22.95), controlPoint2: CGPoint(x: 6.32, y: 22.46))
        icon.addLine(to: CGPoint(x: 5.81, y: 20.18))
        icon.addCurve(to: CGPoint(x: 3.71, y: 21.3), controlPoint1: CGPoint(x: 5.37, y: 20.62), controlPoint2: CGPoint(x: 4.5, y: 21.01))
        icon.addCurve(to: CGPoint(x: 4.82, y: 19.16), controlPoint1: CGPoint(x: 4.01, y: 20.47), controlPoint2: CGPoint(x: 4.45, y: 19.54))
        icon.addLine(to: CGPoint(x: 3.43, y: 17.77))
        icon.close()
        icon.move(to: CGPoint(x: 12.34, y: 18.94))
        icon.addLine(to: CGPoint(x: 12.38, y: 19.32))
        icon.addCurve(to: CGPoint(x: 11.66, y: 20.96), controlPoint1: CGPoint(x: 12.41, y: 19.95), controlPoint2: CGPoint(x: 12.16, y: 20.56))
        icon.addLine(to: CGPoint(x: 10.4, y: 21.98))
        icon.addLine(to: CGPoint(x: 10.12, y: 20.65))
        icon.addCurve(to: CGPoint(x: 12.34, y: 18.94), controlPoint1: CGPoint(x: 10.29, y: 20.52), controlPoint2: CGPoint(x: 11.56, y: 19.54))
        icon.close()
        context.saveGState()
        context.translateBy(x: 5.5, y: 5.5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 5.5, y: 5.5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsQuickActionDrop(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 17.97, y: 13.24))
        icon.addLine(to: CGPoint(x: 17.97, y: 16.96))
        icon.addCurve(to: CGPoint(x: 13.93, y: 21), controlPoint1: CGPoint(x: 17.97, y: 19.19), controlPoint2: CGPoint(x: 16.16, y: 21))
        icon.addLine(to: CGPoint(x: 4.04, y: 21))
        icon.addCurve(to: CGPoint(x: 0, y: 16.96), controlPoint1: CGPoint(x: 1.81, y: 21), controlPoint2: CGPoint(x: 0, y: 19.19))
        icon.addLine(to: CGPoint(x: 0, y: 7.37))
        icon.addCurve(to: CGPoint(x: 4.04, y: 3.33), controlPoint1: CGPoint(x: 0, y: 5.14), controlPoint2: CGPoint(x: 1.81, y: 3.33))
        icon.addLine(to: CGPoint(x: 8.08, y: 3.33))
        icon.addLine(to: CGPoint(x: 8.08, y: 5.35))
        icon.addLine(to: CGPoint(x: 4.04, y: 5.35))
        icon.addCurve(to: CGPoint(x: 2.02, y: 7.37), controlPoint1: CGPoint(x: 2.92, y: 5.35), controlPoint2: CGPoint(x: 2.02, y: 6.26))
        icon.addLine(to: CGPoint(x: 2.02, y: 16.96))
        icon.addCurve(to: CGPoint(x: 4.04, y: 18.98), controlPoint1: CGPoint(x: 2.02, y: 18.08), controlPoint2: CGPoint(x: 2.92, y: 18.98))
        icon.addLine(to: CGPoint(x: 13.93, y: 18.98))
        icon.addCurve(to: CGPoint(x: 15.95, y: 16.96), controlPoint1: CGPoint(x: 15.04, y: 18.98), controlPoint2: CGPoint(x: 15.95, y: 18.08))
        icon.addLine(to: CGPoint(x: 15.95, y: 13.24))
        icon.addLine(to: CGPoint(x: 17.97, y: 13.24))
        icon.close()
        icon.move(to: CGPoint(x: 17.08, y: 0.79))
        icon.addCurve(to: CGPoint(x: 20.92, y: 0.81), controlPoint1: CGPoint(x: 18.14, y: -0.27), controlPoint2: CGPoint(x: 19.87, y: -0.26))
        icon.addCurve(to: CGPoint(x: 20.91, y: 4.62), controlPoint1: CGPoint(x: 21.97, y: 1.86), controlPoint2: CGPoint(x: 21.96, y: 3.57))
        icon.addLine(to: CGPoint(x: 19.19, y: 6.2))
        icon.addLine(to: CGPoint(x: 19.36, y: 6.37))
        icon.addCurve(to: CGPoint(x: 19.36, y: 7.93), controlPoint1: CGPoint(x: 19.8, y: 6.8), controlPoint2: CGPoint(x: 19.8, y: 7.5))
        icon.addCurve(to: CGPoint(x: 17.91, y: 7.93), controlPoint1: CGPoint(x: 18.96, y: 8.33), controlPoint2: CGPoint(x: 18.31, y: 8.33))
        icon.addLine(to: CGPoint(x: 17.69, y: 7.71))
        icon.addLine(to: CGPoint(x: 13.76, y: 11.66))
        icon.addCurve(to: CGPoint(x: 12.41, y: 12.55), controlPoint1: CGPoint(x: 13.37, y: 12.05), controlPoint2: CGPoint(x: 12.91, y: 12.35))
        icon.addLine(to: CGPoint(x: 11.48, y: 12.92))
        icon.addCurve(to: CGPoint(x: 10.9, y: 13.28), controlPoint1: CGPoint(x: 11.27, y: 13), controlPoint2: CGPoint(x: 11.07, y: 13.13))
        icon.addLine(to: CGPoint(x: 10.79, y: 13.38))
        icon.addCurve(to: CGPoint(x: 8.95, y: 13.32), controlPoint1: CGPoint(x: 10.26, y: 13.85), controlPoint2: CGPoint(x: 9.45, y: 13.83))
        icon.addLine(to: CGPoint(x: 8.26, y: 12.6))
        icon.addCurve(to: CGPoint(x: 8.22, y: 10.8), controlPoint1: CGPoint(x: 7.77, y: 12.1), controlPoint2: CGPoint(x: 7.76, y: 11.31))
        icon.addLine(to: CGPoint(x: 8.35, y: 10.65))
        icon.addCurve(to: CGPoint(x: 8.68, y: 10.12), controlPoint1: CGPoint(x: 8.49, y: 10.49), controlPoint2: CGPoint(x: 8.6, y: 10.31))
        icon.addLine(to: CGPoint(x: 9.07, y: 9.13))
        icon.addCurve(to: CGPoint(x: 9.92, y: 7.85), controlPoint1: CGPoint(x: 9.26, y: 8.65), controlPoint2: CGPoint(x: 9.55, y: 8.21))
        icon.addLine(to: CGPoint(x: 13.85, y: 3.9))
        icon.addLine(to: CGPoint(x: 13.64, y: 3.7))
        icon.addCurve(to: CGPoint(x: 13.64, y: 2.24), controlPoint1: CGPoint(x: 13.24, y: 3.3), controlPoint2: CGPoint(x: 13.24, y: 2.64))
        icon.addLine(to: CGPoint(x: 13.69, y: 2.19))
        icon.addCurve(to: CGPoint(x: 15.15, y: 2.19), controlPoint1: CGPoint(x: 14.1, y: 1.79), controlPoint2: CGPoint(x: 14.74, y: 1.79))
        icon.addLine(to: CGPoint(x: 15.35, y: 2.39))
        icon.addLine(to: CGPoint(x: 17.08, y: 0.79))
        icon.close()
        icon.move(to: CGPoint(x: 12.51, y: 10.42))
        icon.addLine(to: CGPoint(x: 16.44, y: 6.47))
        icon.addLine(to: CGPoint(x: 15.09, y: 5.14))
        icon.addLine(to: CGPoint(x: 11.16, y: 9.09))
        icon.addCurve(to: CGPoint(x: 10.71, y: 9.78), controlPoint1: CGPoint(x: 10.97, y: 9.28), controlPoint2: CGPoint(x: 10.81, y: 9.52))
        icon.addLine(to: CGPoint(x: 10.31, y: 10.77))
        icon.addCurve(to: CGPoint(x: 9.8, y: 11.66), controlPoint1: CGPoint(x: 10.19, y: 11.09), controlPoint2: CGPoint(x: 10.01, y: 11.39))
        icon.addLine(to: CGPoint(x: 9.93, y: 11.8))
        icon.addCurve(to: CGPoint(x: 10.83, y: 11.28), controlPoint1: CGPoint(x: 10.21, y: 11.59), controlPoint2: CGPoint(x: 10.51, y: 11.41))
        icon.addLine(to: CGPoint(x: 11.76, y: 10.92))
        icon.addCurve(to: CGPoint(x: 12.51, y: 10.42), controlPoint1: CGPoint(x: 12.04, y: 10.8), controlPoint2: CGPoint(x: 12.3, y: 10.64))
        icon.close()
        context.saveGState()
        context.translateBy(x: 7, y: 8)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 7, y: 8))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsQuickActionRefresh(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 27.72, y: 8.63))
        icon.addCurve(to: CGPoint(x: 27.7, y: 10.04), controlPoint1: CGPoint(x: 28.1, y: 9.02), controlPoint2: CGPoint(x: 28.09, y: 9.65))
        icon.addLine(to: CGPoint(x: 23.34, y: 14.24))
        icon.addLine(to: CGPoint(x: 19.28, y: 9.74))
        icon.addCurve(to: CGPoint(x: 19.35, y: 8.33), controlPoint1: CGPoint(x: 18.91, y: 9.33), controlPoint2: CGPoint(x: 18.94, y: 8.7))
        icon.addCurve(to: CGPoint(x: 20.76, y: 8.41), controlPoint1: CGPoint(x: 19.76, y: 7.97), controlPoint2: CGPoint(x: 20.39, y: 8))
        icon.addLine(to: CGPoint(x: 22.46, y: 10.3))
        icon.addCurve(to: CGPoint(x: 22.42, y: 9.6), controlPoint1: CGPoint(x: 22.45, y: 10.06), controlPoint2: CGPoint(x: 22.45, y: 9.83))
        icon.addCurve(to: CGPoint(x: 12.77, y: 2.06), controlPoint1: CGPoint(x: 21.84, y: 4.86), controlPoint2: CGPoint(x: 17.51, y: 1.48))
        icon.addCurve(to: CGPoint(x: 6.91, y: 5.43), controlPoint1: CGPoint(x: 10.42, y: 2.35), controlPoint2: CGPoint(x: 8.34, y: 3.55))
        icon.addCurve(to: CGPoint(x: 5.52, y: 5.63), controlPoint1: CGPoint(x: 6.58, y: 5.87), controlPoint2: CGPoint(x: 5.96, y: 5.96))
        icon.addCurve(to: CGPoint(x: 5.32, y: 4.23), controlPoint1: CGPoint(x: 5.08, y: 5.29), controlPoint2: CGPoint(x: 4.99, y: 4.67))
        icon.addCurve(to: CGPoint(x: 12.52, y: 0.08), controlPoint1: CGPoint(x: 7.08, y: 1.91), controlPoint2: CGPoint(x: 9.64, y: 0.44))
        icon.addCurve(to: CGPoint(x: 24.4, y: 9.36), controlPoint1: CGPoint(x: 18.36, y: -0.64), controlPoint2: CGPoint(x: 23.68, y: 3.53))
        icon.addCurve(to: CGPoint(x: 24.46, y: 10.38), controlPoint1: CGPoint(x: 24.44, y: 9.7), controlPoint2: CGPoint(x: 24.45, y: 10.04))
        icon.addLine(to: CGPoint(x: 26.31, y: 8.6))
        icon.addCurve(to: CGPoint(x: 27.72, y: 8.63), controlPoint1: CGPoint(x: 26.71, y: 8.22), controlPoint2: CGPoint(x: 27.34, y: 8.23))
        icon.close()
        icon.move(to: CGPoint(x: 20.94, y: 16.93))
        icon.addCurve(to: CGPoint(x: 22.33, y: 16.74), controlPoint1: CGPoint(x: 21.27, y: 16.49), controlPoint2: CGPoint(x: 21.89, y: 16.4))
        icon.addCurve(to: CGPoint(x: 22.53, y: 18.13), controlPoint1: CGPoint(x: 22.77, y: 17.07), controlPoint2: CGPoint(x: 22.86, y: 17.69))
        icon.addCurve(to: CGPoint(x: 15.33, y: 22.28), controlPoint1: CGPoint(x: 20.77, y: 20.46), controlPoint2: CGPoint(x: 18.21, y: 21.93))
        icon.addCurve(to: CGPoint(x: 14.02, y: 22.36), controlPoint1: CGPoint(x: 14.89, y: 22.34), controlPoint2: CGPoint(x: 14.45, y: 22.36))
        icon.addCurve(to: CGPoint(x: 3.45, y: 13.01), controlPoint1: CGPoint(x: 8.72, y: 22.36), controlPoint2: CGPoint(x: 4.12, y: 18.4))
        icon.addCurve(to: CGPoint(x: 3.4, y: 12.11), controlPoint1: CGPoint(x: 3.42, y: 12.71), controlPoint2: CGPoint(x: 3.41, y: 12.41))
        icon.addLine(to: CGPoint(x: 1.74, y: 13.96))
        icon.addCurve(to: CGPoint(x: 1, y: 14.28), controlPoint1: CGPoint(x: 1.54, y: 14.17), controlPoint2: CGPoint(x: 1.27, y: 14.28))
        icon.addCurve(to: CGPoint(x: 0.33, y: 14.03), controlPoint1: CGPoint(x: 0.76, y: 14.28), controlPoint2: CGPoint(x: 0.52, y: 14.2))
        icon.addCurve(to: CGPoint(x: 0.26, y: 12.62), controlPoint1: CGPoint(x: -0.08, y: 13.66), controlPoint2: CGPoint(x: -0.11, y: 13.03))
        icon.addLine(to: CGPoint(x: 4.31, y: 8.12))
        icon.addLine(to: CGPoint(x: 8.67, y: 12.33))
        icon.addCurve(to: CGPoint(x: 8.7, y: 13.74), controlPoint1: CGPoint(x: 9.07, y: 12.71), controlPoint2: CGPoint(x: 9.08, y: 13.34))
        icon.addCurve(to: CGPoint(x: 7.29, y: 13.76), controlPoint1: CGPoint(x: 8.32, y: 14.13), controlPoint2: CGPoint(x: 7.69, y: 14.14))
        icon.addLine(to: CGPoint(x: 5.38, y: 11.92))
        icon.addCurve(to: CGPoint(x: 5.43, y: 12.76), controlPoint1: CGPoint(x: 5.38, y: 12.2), controlPoint2: CGPoint(x: 5.4, y: 12.48))
        icon.addCurve(to: CGPoint(x: 15.08, y: 20.31), controlPoint1: CGPoint(x: 6.01, y: 17.51), controlPoint2: CGPoint(x: 10.35, y: 20.89))
        icon.addCurve(to: CGPoint(x: 20.94, y: 16.93), controlPoint1: CGPoint(x: 17.43, y: 20.02), controlPoint2: CGPoint(x: 19.51, y: 18.82))
        icon.close()
        context.saveGState()
        context.translateBy(x: 4, y: 7)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4, y: 7))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsQuickActionStyle(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 24.66, y: 11.55))
        icon.addLine(to: CGPoint(x: 18.49, y: 11.55))
        icon.addLine(to: CGPoint(x: 21.58, y: 3.63))
        icon.addLine(to: CGPoint(x: 24.66, y: 11.55))
        icon.close()
        icon.move(to: CGPoint(x: 29.91, y: 18.12))
        icon.addCurve(to: CGPoint(x: 29.21, y: 19.75), controlPoint1: CGPoint(x: 30.17, y: 18.76), controlPoint2: CGPoint(x: 29.85, y: 19.49))
        icon.addCurve(to: CGPoint(x: 28.25, y: 19.73), controlPoint1: CGPoint(x: 28.89, y: 19.87), controlPoint2: CGPoint(x: 28.55, y: 19.86))
        icon.addCurve(to: CGPoint(x: 27.58, y: 19.04), controlPoint1: CGPoint(x: 27.94, y: 19.59), controlPoint2: CGPoint(x: 27.71, y: 19.35))
        icon.addLine(to: CGPoint(x: 25.64, y: 14.06))
        icon.addLine(to: CGPoint(x: 17.51, y: 14.06))
        icon.addLine(to: CGPoint(x: 15.57, y: 19.04))
        icon.addCurve(to: CGPoint(x: 14.91, y: 19.73), controlPoint1: CGPoint(x: 15.45, y: 19.35), controlPoint2: CGPoint(x: 15.21, y: 19.59))
        icon.addCurve(to: CGPoint(x: 14.4, y: 19.83), controlPoint1: CGPoint(x: 14.75, y: 19.8), controlPoint2: CGPoint(x: 14.58, y: 19.83))
        icon.addCurve(to: CGPoint(x: 13.95, y: 19.75), controlPoint1: CGPoint(x: 14.25, y: 19.83), controlPoint2: CGPoint(x: 14.09, y: 19.8))
        icon.addCurve(to: CGPoint(x: 13.24, y: 18.12), controlPoint1: CGPoint(x: 13.31, y: 19.49), controlPoint2: CGPoint(x: 12.99, y: 18.76))
        icon.addLine(to: CGPoint(x: 19.86, y: 1.15))
        icon.addCurve(to: CGPoint(x: 21.57, y: 0), controlPoint1: CGPoint(x: 20.15, y: 0.44), controlPoint2: CGPoint(x: 20.81, y: 0))
        icon.addCurve(to: CGPoint(x: 23.29, y: 1.15), controlPoint1: CGPoint(x: 22.34, y: 0), controlPoint2: CGPoint(x: 23, y: 0.44))
        icon.addLine(to: CGPoint(x: 29.91, y: 18.12))
        icon.close()
        icon.move(to: CGPoint(x: 1.12, y: 20))
        icon.addCurve(to: CGPoint(x: 0.66, y: 19.9), controlPoint1: CGPoint(x: 0.97, y: 20), controlPoint2: CGPoint(x: 0.81, y: 19.97))
        icon.addCurve(to: CGPoint(x: 0.1, y: 18.41), controlPoint1: CGPoint(x: 0.1, y: 19.65), controlPoint2: CGPoint(x: -0.15, y: 18.98))
        icon.addLine(to: CGPoint(x: 4.31, y: 8.97))
        icon.addCurve(to: CGPoint(x: 5.67, y: 8.12), controlPoint1: CGPoint(x: 4.56, y: 8.44), controlPoint2: CGPoint(x: 5.08, y: 8.12))
        icon.addLine(to: CGPoint(x: 5.67, y: 8.12))
        icon.addCurve(to: CGPoint(x: 7.05, y: 8.98), controlPoint1: CGPoint(x: 6.27, y: 8.12), controlPoint2: CGPoint(x: 6.8, y: 8.45))
        icon.addLine(to: CGPoint(x: 11.26, y: 18.41))
        icon.addCurve(to: CGPoint(x: 10.69, y: 19.9), controlPoint1: CGPoint(x: 11.51, y: 18.98), controlPoint2: CGPoint(x: 11.26, y: 19.65))
        icon.addCurve(to: CGPoint(x: 9.83, y: 19.93), controlPoint1: CGPoint(x: 10.42, y: 20.02), controlPoint2: CGPoint(x: 10.11, y: 20.03))
        icon.addCurve(to: CGPoint(x: 9.21, y: 19.33), controlPoint1: CGPoint(x: 9.55, y: 19.82), controlPoint2: CGPoint(x: 9.33, y: 19.61))
        icon.addLine(to: CGPoint(x: 8.22, y: 17.11))
        icon.addLine(to: CGPoint(x: 3.14, y: 17.11))
        icon.addLine(to: CGPoint(x: 2.15, y: 19.33))
        icon.addCurve(to: CGPoint(x: 1.52, y: 19.93), controlPoint1: CGPoint(x: 2.03, y: 19.61), controlPoint2: CGPoint(x: 1.81, y: 19.82))
        icon.addCurve(to: CGPoint(x: 1.12, y: 20), controlPoint1: CGPoint(x: 1.39, y: 19.98), controlPoint2: CGPoint(x: 1.26, y: 20))
        icon.close()
        icon.move(to: CGPoint(x: 4.15, y: 14.85))
        icon.addLine(to: CGPoint(x: 7.21, y: 14.85))
        icon.addLine(to: CGPoint(x: 5.68, y: 11.41))
        icon.addLine(to: CGPoint(x: 4.15, y: 14.85))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3, y: 8)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3, y: 8))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallPlay(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Play
        let play = UIBezierPath()
        play.move(to: CGPoint(x: 13, y: 0.78))
        play.addCurve(to: CGPoint(x: 11.77, y: 0.12), controlPoint1: CGPoint(x: 13, y: 0.17), controlPoint2: CGPoint(x: 12.31, y: -0.2))
        play.addLine(to: CGPoint(x: 0.39, y: 6.83))
        play.addCurve(to: CGPoint(x: 0.39, y: 8.17), controlPoint1: CGPoint(x: -0.13, y: 7.14), controlPoint2: CGPoint(x: -0.13, y: 7.86))
        play.addCurve(to: CGPoint(x: 4.35, y: 10.51), controlPoint1: CGPoint(x: 2.15, y: 9.21), controlPoint2: CGPoint(x: 3.47, y: 9.99))
        play.addCurve(to: CGPoint(x: 11.77, y: 14.88), controlPoint1: CGPoint(x: 6, y: 11.48), controlPoint2: CGPoint(x: 8.47, y: 12.94))
        play.addCurve(to: CGPoint(x: 13, y: 14.22), controlPoint1: CGPoint(x: 12.31, y: 15.2), controlPoint2: CGPoint(x: 13, y: 14.83))
        play.addLine(to: CGPoint(x: 13, y: 0.78))
        play.close()
        context.saveGState()
        context.translateBy(x: 12.5, y: 12)
        context.scaleBy(x: -1, y: 1)
        context.translateBy(x: -6.5, y: -7.5)
        context.restoreGState()
        
        /// Play (Outline Mask)
        context.saveGState()
        play.apply(CGAffineTransform(translationX: 12.5, y: 12))
        play.apply(CGAffineTransform(scaleX: -1, y: 1))
        play.apply(CGAffineTransform(translationX: -6.5, y: -7.5))
        play.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Play (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsQuickActionFilter(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 9.23, y: 10.59))
        icon.addCurve(to: CGPoint(x: 6.47, y: 12.49), controlPoint1: CGPoint(x: 8.8, y: 11.7), controlPoint2: CGPoint(x: 7.73, y: 12.49))
        icon.addCurve(to: CGPoint(x: 3.7, y: 10.59), controlPoint1: CGPoint(x: 5.21, y: 12.49), controlPoint2: CGPoint(x: 4.13, y: 11.7))
        icon.addLine(to: CGPoint(x: 1.01, y: 10.59))
        icon.addCurve(to: CGPoint(x: 0, y: 9.56), controlPoint1: CGPoint(x: 0.45, y: 10.59), controlPoint2: CGPoint(x: 0, y: 10.13))
        icon.addLine(to: CGPoint(x: 0, y: 9.44))
        icon.addCurve(to: CGPoint(x: 1.01, y: 8.41), controlPoint1: CGPoint(x: 0, y: 8.87), controlPoint2: CGPoint(x: 0.45, y: 8.41))
        icon.addLine(to: CGPoint(x: 3.7, y: 8.41))
        icon.addCurve(to: CGPoint(x: 6.47, y: 6.51), controlPoint1: CGPoint(x: 4.13, y: 7.3), controlPoint2: CGPoint(x: 5.21, y: 6.51))
        icon.addCurve(to: CGPoint(x: 9.23, y: 8.41), controlPoint1: CGPoint(x: 7.73, y: 6.51), controlPoint2: CGPoint(x: 8.8, y: 7.3))
        icon.addLine(to: CGPoint(x: 21.99, y: 8.41))
        icon.addCurve(to: CGPoint(x: 23, y: 9.44), controlPoint1: CGPoint(x: 22.55, y: 8.41), controlPoint2: CGPoint(x: 23, y: 8.87))
        icon.addLine(to: CGPoint(x: 23, y: 9.56))
        icon.addCurve(to: CGPoint(x: 21.99, y: 10.59), controlPoint1: CGPoint(x: 23, y: 10.13), controlPoint2: CGPoint(x: 22.55, y: 10.59))
        icon.addLine(to: CGPoint(x: 9.23, y: 10.59))
        icon.close()
        icon.move(to: CGPoint(x: 13.77, y: 14.93))
        icon.addCurve(to: CGPoint(x: 16.53, y: 13.02), controlPoint1: CGPoint(x: 14.2, y: 13.81), controlPoint2: CGPoint(x: 15.27, y: 13.02))
        icon.addCurve(to: CGPoint(x: 19.3, y: 14.93), controlPoint1: CGPoint(x: 17.79, y: 13.02), controlPoint2: CGPoint(x: 18.87, y: 13.81))
        icon.addLine(to: CGPoint(x: 21.99, y: 14.93))
        icon.addCurve(to: CGPoint(x: 23, y: 15.95), controlPoint1: CGPoint(x: 22.55, y: 14.93), controlPoint2: CGPoint(x: 23, y: 15.38))
        icon.addLine(to: CGPoint(x: 23, y: 16.08))
        icon.addCurve(to: CGPoint(x: 21.99, y: 17.1), controlPoint1: CGPoint(x: 23, y: 16.64), controlPoint2: CGPoint(x: 22.55, y: 17.1))
        icon.addLine(to: CGPoint(x: 19.3, y: 17.1))
        icon.addCurve(to: CGPoint(x: 16.53, y: 19), controlPoint1: CGPoint(x: 18.87, y: 18.21), controlPoint2: CGPoint(x: 17.79, y: 19))
        icon.addCurve(to: CGPoint(x: 13.77, y: 17.1), controlPoint1: CGPoint(x: 15.27, y: 19), controlPoint2: CGPoint(x: 14.2, y: 18.21))
        icon.addLine(to: CGPoint(x: 1.01, y: 17.1))
        icon.addCurve(to: CGPoint(x: 0, y: 16.08), controlPoint1: CGPoint(x: 0.45, y: 17.1), controlPoint2: CGPoint(x: 0, y: 16.64))
        icon.addLine(to: CGPoint(x: 0, y: 15.95))
        icon.addCurve(to: CGPoint(x: 1.01, y: 14.93), controlPoint1: CGPoint(x: 0, y: 15.38), controlPoint2: CGPoint(x: 0.45, y: 14.93))
        icon.addLine(to: CGPoint(x: 13.77, y: 14.93))
        icon.close()
        icon.move(to: CGPoint(x: 13.77, y: 1.9))
        icon.addCurve(to: CGPoint(x: 16.53, y: 0), controlPoint1: CGPoint(x: 14.2, y: 0.79), controlPoint2: CGPoint(x: 15.27, y: 0))
        icon.addCurve(to: CGPoint(x: 19.3, y: 1.9), controlPoint1: CGPoint(x: 17.79, y: 0), controlPoint2: CGPoint(x: 18.87, y: 0.79))
        icon.addLine(to: CGPoint(x: 21.99, y: 1.9))
        icon.addCurve(to: CGPoint(x: 23, y: 2.92), controlPoint1: CGPoint(x: 22.55, y: 1.9), controlPoint2: CGPoint(x: 23, y: 2.36))
        icon.addLine(to: CGPoint(x: 23, y: 3.05))
        icon.addCurve(to: CGPoint(x: 21.99, y: 4.07), controlPoint1: CGPoint(x: 23, y: 3.62), controlPoint2: CGPoint(x: 22.55, y: 4.07))
        icon.addLine(to: CGPoint(x: 19.3, y: 4.07))
        icon.addCurve(to: CGPoint(x: 16.53, y: 5.98), controlPoint1: CGPoint(x: 18.87, y: 5.19), controlPoint2: CGPoint(x: 17.79, y: 5.98))
        icon.addCurve(to: CGPoint(x: 13.77, y: 4.07), controlPoint1: CGPoint(x: 15.27, y: 5.98), controlPoint2: CGPoint(x: 14.2, y: 5.19))
        icon.addLine(to: CGPoint(x: 1.01, y: 4.07))
        icon.addCurve(to: CGPoint(x: 0, y: 3.05), controlPoint1: CGPoint(x: 0.45, y: 4.07), controlPoint2: CGPoint(x: 0, y: 3.62))
        icon.addLine(to: CGPoint(x: 0, y: 2.92))
        icon.addCurve(to: CGPoint(x: 1.01, y: 1.9), controlPoint1: CGPoint(x: 0, y: 2.36), controlPoint2: CGPoint(x: 0.45, y: 1.9))
        icon.addLine(to: CGPoint(x: 13.77, y: 1.9))
        icon.close()
        icon.move(to: CGPoint(x: 16.53, y: 4.34))
        icon.addCurve(to: CGPoint(x: 17.88, y: 2.99), controlPoint1: CGPoint(x: 17.27, y: 4.34), controlPoint2: CGPoint(x: 17.88, y: 3.74))
        icon.addCurve(to: CGPoint(x: 16.53, y: 1.63), controlPoint1: CGPoint(x: 17.88, y: 2.24), controlPoint2: CGPoint(x: 17.27, y: 1.63))
        icon.addCurve(to: CGPoint(x: 15.19, y: 2.99), controlPoint1: CGPoint(x: 15.79, y: 1.63), controlPoint2: CGPoint(x: 15.19, y: 2.24))
        icon.addCurve(to: CGPoint(x: 16.53, y: 4.34), controlPoint1: CGPoint(x: 15.19, y: 3.74), controlPoint2: CGPoint(x: 15.79, y: 4.34))
        icon.close()
        icon.move(to: CGPoint(x: 16.53, y: 17.37))
        icon.addCurve(to: CGPoint(x: 17.88, y: 16.01), controlPoint1: CGPoint(x: 17.27, y: 17.37), controlPoint2: CGPoint(x: 17.88, y: 16.76))
        icon.addCurve(to: CGPoint(x: 16.53, y: 14.66), controlPoint1: CGPoint(x: 17.88, y: 15.26), controlPoint2: CGPoint(x: 17.27, y: 14.66))
        icon.addCurve(to: CGPoint(x: 15.19, y: 16.01), controlPoint1: CGPoint(x: 15.79, y: 14.66), controlPoint2: CGPoint(x: 15.19, y: 15.26))
        icon.addCurve(to: CGPoint(x: 16.53, y: 17.37), controlPoint1: CGPoint(x: 15.19, y: 16.76), controlPoint2: CGPoint(x: 15.79, y: 17.37))
        icon.close()
        icon.move(to: CGPoint(x: 6.47, y: 10.85))
        icon.addCurve(to: CGPoint(x: 7.81, y: 9.5), controlPoint1: CGPoint(x: 7.21, y: 10.85), controlPoint2: CGPoint(x: 7.81, y: 10.25))
        icon.addCurve(to: CGPoint(x: 6.47, y: 8.15), controlPoint1: CGPoint(x: 7.81, y: 8.75), controlPoint2: CGPoint(x: 7.21, y: 8.15))
        icon.addCurve(to: CGPoint(x: 5.12, y: 9.5), controlPoint1: CGPoint(x: 5.73, y: 8.15), controlPoint2: CGPoint(x: 5.12, y: 8.75))
        icon.addCurve(to: CGPoint(x: 6.47, y: 10.85), controlPoint1: CGPoint(x: 5.12, y: 10.25), controlPoint2: CGPoint(x: 5.73, y: 10.85))
        icon.close()
        context.saveGState()
        context.translateBy(x: 7, y: 9)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 7, y: 9))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallPause(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 4.09, y: 0))
        icon.addCurve(to: CGPoint(x: 4.5, y: 0.47), controlPoint1: CGPoint(x: 4.32, y: 0), controlPoint2: CGPoint(x: 4.5, y: 0.21))
        icon.addLine(to: CGPoint(x: 4.5, y: 14.53))
        icon.addCurve(to: CGPoint(x: 4.09, y: 15), controlPoint1: CGPoint(x: 4.5, y: 14.79), controlPoint2: CGPoint(x: 4.32, y: 15))
        icon.addLine(to: CGPoint(x: 0.41, y: 15))
        icon.addCurve(to: CGPoint(x: 0, y: 14.53), controlPoint1: CGPoint(x: 0.18, y: 15), controlPoint2: CGPoint(x: 0, y: 14.79))
        icon.addLine(to: CGPoint(x: 0, y: 0.47))
        icon.addCurve(to: CGPoint(x: 0.41, y: 0), controlPoint1: CGPoint(x: 0, y: 0.21), controlPoint2: CGPoint(x: 0.18, y: 0))
        icon.addLine(to: CGPoint(x: 4.09, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 11.59, y: 0))
        icon.addCurve(to: CGPoint(x: 12, y: 0.47), controlPoint1: CGPoint(x: 11.82, y: 0), controlPoint2: CGPoint(x: 12, y: 0.21))
        icon.addLine(to: CGPoint(x: 12, y: 14.53))
        icon.addCurve(to: CGPoint(x: 11.59, y: 15), controlPoint1: CGPoint(x: 12, y: 14.79), controlPoint2: CGPoint(x: 11.82, y: 15))
        icon.addLine(to: CGPoint(x: 7.91, y: 15))
        icon.addCurve(to: CGPoint(x: 7.5, y: 14.53), controlPoint1: CGPoint(x: 7.68, y: 15), controlPoint2: CGPoint(x: 7.5, y: 14.79))
        icon.addLine(to: CGPoint(x: 7.5, y: 0.47))
        icon.addCurve(to: CGPoint(x: 7.91, y: 0), controlPoint1: CGPoint(x: 7.5, y: 0.21), controlPoint2: CGPoint(x: 7.68, y: 0))
        icon.addLine(to: CGPoint(x: 11.59, y: 0))
        icon.close()
        context.saveGState()
        context.translateBy(x: 6, y: 4.5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 6, y: 4.5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallQuestion(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 9, y: 18))
        icon.addCurve(to: CGPoint(x: 0, y: 9), controlPoint1: CGPoint(x: 4.03, y: 18), controlPoint2: CGPoint(x: 0, y: 13.97))
        icon.addCurve(to: CGPoint(x: 9, y: 0), controlPoint1: CGPoint(x: 0, y: 4.03), controlPoint2: CGPoint(x: 4.03, y: 0))
        icon.addCurve(to: CGPoint(x: 18, y: 9), controlPoint1: CGPoint(x: 13.97, y: 0), controlPoint2: CGPoint(x: 18, y: 4.03))
        icon.addCurve(to: CGPoint(x: 9, y: 18), controlPoint1: CGPoint(x: 18, y: 13.97), controlPoint2: CGPoint(x: 13.97, y: 18))
        icon.close()
        icon.move(to: CGPoint(x: 9, y: 16))
        icon.addCurve(to: CGPoint(x: 16, y: 9), controlPoint1: CGPoint(x: 12.87, y: 16), controlPoint2: CGPoint(x: 16, y: 12.87))
        icon.addCurve(to: CGPoint(x: 9, y: 2), controlPoint1: CGPoint(x: 16, y: 5.13), controlPoint2: CGPoint(x: 12.87, y: 2))
        icon.addCurve(to: CGPoint(x: 2, y: 9), controlPoint1: CGPoint(x: 5.13, y: 2), controlPoint2: CGPoint(x: 2, y: 5.13))
        icon.addCurve(to: CGPoint(x: 9, y: 16), controlPoint1: CGPoint(x: 2, y: 12.87), controlPoint2: CGPoint(x: 5.13, y: 16))
        icon.close()
        icon.move(to: CGPoint(x: 5.5, y: 6.76))
        icon.addCurve(to: CGPoint(x: 9.06, y: 3.7), controlPoint1: CGPoint(x: 5.54, y: 4.96), controlPoint2: CGPoint(x: 6.81, y: 3.7))
        icon.addCurve(to: CGPoint(x: 12.54, y: 6.53), controlPoint1: CGPoint(x: 11.15, y: 3.7), controlPoint2: CGPoint(x: 12.54, y: 4.86))
        icon.addCurve(to: CGPoint(x: 10.97, y: 9.02), controlPoint1: CGPoint(x: 12.54, y: 7.64), controlPoint2: CGPoint(x: 12, y: 8.41))
        icon.addCurve(to: CGPoint(x: 9.73, y: 10.66), controlPoint1: CGPoint(x: 10, y: 9.58), controlPoint2: CGPoint(x: 9.73, y: 9.94))
        icon.addLine(to: CGPoint(x: 9.73, y: 11.05))
        icon.addLine(to: CGPoint(x: 7.79, y: 11.05))
        icon.addLine(to: CGPoint(x: 7.77, y: 10.62))
        icon.addCurve(to: CGPoint(x: 9.09, y: 8.22), controlPoint1: CGPoint(x: 7.68, y: 9.47), controlPoint2: CGPoint(x: 8.08, y: 8.81))
        icon.addCurve(to: CGPoint(x: 10.32, y: 6.6), controlPoint1: CGPoint(x: 10.03, y: 7.66), controlPoint2: CGPoint(x: 10.32, y: 7.3))
        icon.addCurve(to: CGPoint(x: 8.93, y: 5.4), controlPoint1: CGPoint(x: 10.32, y: 5.9), controlPoint2: CGPoint(x: 9.76, y: 5.4))
        icon.addCurve(to: CGPoint(x: 7.48, y: 6.76), controlPoint1: CGPoint(x: 8.09, y: 5.4), controlPoint2: CGPoint(x: 7.53, y: 5.93))
        icon.addLine(to: CGPoint(x: 5.5, y: 6.76))
        icon.close()
        icon.move(to: CGPoint(x: 8.78, y: 14.55))
        icon.addCurve(to: CGPoint(x: 7.59, y: 13.4), controlPoint1: CGPoint(x: 8.12, y: 14.55), controlPoint2: CGPoint(x: 7.59, y: 14.04))
        icon.addCurve(to: CGPoint(x: 8.78, y: 12.25), controlPoint1: CGPoint(x: 7.59, y: 12.75), controlPoint2: CGPoint(x: 8.12, y: 12.25))
        icon.addCurve(to: CGPoint(x: 9.98, y: 13.4), controlPoint1: CGPoint(x: 9.45, y: 12.25), controlPoint2: CGPoint(x: 9.98, y: 12.75))
        icon.addCurve(to: CGPoint(x: 8.78, y: 14.55), controlPoint1: CGPoint(x: 9.98, y: 14.04), controlPoint2: CGPoint(x: 9.45, y: 14.55))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3, y: 3)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3, y: 3))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallDone(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 6.61, y: 9.18))
        icon.addLine(to: CGPoint(x: 15.39, y: 0.4))
        icon.addCurve(to: CGPoint(x: 17.3, y: 0.4), controlPoint1: CGPoint(x: 15.92, y: -0.13), controlPoint2: CGPoint(x: 16.77, y: -0.13))
        icon.addCurve(to: CGPoint(x: 17.3, y: 2.31), controlPoint1: CGPoint(x: 17.83, y: 0.92), controlPoint2: CGPoint(x: 17.83, y: 1.78))
        icon.addLine(to: CGPoint(x: 6.61, y: 13))
        icon.addLine(to: CGPoint(x: 0.4, y: 6.79))
        icon.addCurve(to: CGPoint(x: 0.4, y: 4.88), controlPoint1: CGPoint(x: -0.13, y: 6.26), controlPoint2: CGPoint(x: -0.13, y: 5.41))
        icon.addCurve(to: CGPoint(x: 2.31, y: 4.88), controlPoint1: CGPoint(x: 0.92, y: 4.35), controlPoint2: CGPoint(x: 1.78, y: 4.35))
        icon.addLine(to: CGPoint(x: 6.61, y: 9.18))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3, y: 6)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3, y: 6))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallPlus(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 5.92, y: 5.92))
        icon.addLine(to: CGPoint(x: 5.92, y: 1.08))
        icon.addCurve(to: CGPoint(x: 7, y: 0), controlPoint1: CGPoint(x: 5.92, y: 0.48), controlPoint2: CGPoint(x: 6.41, y: 0))
        icon.addCurve(to: CGPoint(x: 8.08, y: 1.08), controlPoint1: CGPoint(x: 7.59, y: 0), controlPoint2: CGPoint(x: 8.08, y: 0.48))
        icon.addLine(to: CGPoint(x: 8.08, y: 5.92))
        icon.addLine(to: CGPoint(x: 12.92, y: 5.92))
        icon.addCurve(to: CGPoint(x: 14, y: 7), controlPoint1: CGPoint(x: 13.52, y: 5.92), controlPoint2: CGPoint(x: 14, y: 6.41))
        icon.addCurve(to: CGPoint(x: 12.92, y: 8.08), controlPoint1: CGPoint(x: 14, y: 7.59), controlPoint2: CGPoint(x: 13.52, y: 8.08))
        icon.addLine(to: CGPoint(x: 8.08, y: 8.08))
        icon.addLine(to: CGPoint(x: 8.08, y: 12.92))
        icon.addCurve(to: CGPoint(x: 7, y: 14), controlPoint1: CGPoint(x: 8.08, y: 13.52), controlPoint2: CGPoint(x: 7.59, y: 14))
        icon.addCurve(to: CGPoint(x: 5.92, y: 12.92), controlPoint1: CGPoint(x: 6.41, y: 14), controlPoint2: CGPoint(x: 5.92, y: 13.52))
        icon.addLine(to: CGPoint(x: 5.92, y: 8.08))
        icon.addLine(to: CGPoint(x: 1.08, y: 8.08))
        icon.addCurve(to: CGPoint(x: 0, y: 7), controlPoint1: CGPoint(x: 0.48, y: 8.08), controlPoint2: CGPoint(x: 0, y: 7.59))
        icon.addCurve(to: CGPoint(x: 1.08, y: 5.92), controlPoint1: CGPoint(x: 0, y: 6.41), controlPoint2: CGPoint(x: 0.48, y: 5.92))
        icon.addLine(to: CGPoint(x: 5.92, y: 5.92))
        icon.close()
        context.saveGState()
        context.translateBy(x: 12, y: 12)
        context.scaleBy(x: -1, y: 1)
        context.translateBy(x: -7, y: -7)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 12, y: 12))
        icon.apply(CGAffineTransform(scaleX: -1, y: 1))
        icon.apply(CGAffineTransform(translationX: -7, y: -7))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallGoogle(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 7.41, y: 6.18))
        icon.addLine(to: CGPoint(x: 7.41, y: 9.04))
        icon.addLine(to: CGPoint(x: 11.45, y: 9.04))
        icon.addCurve(to: CGPoint(x: 7.41, y: 12.02), controlPoint1: CGPoint(x: 10.92, y: 10.78), controlPoint2: CGPoint(x: 9.49, y: 12.02))
        icon.addCurve(to: CGPoint(x: 2.94, y: 7.5), controlPoint1: CGPoint(x: 4.94, y: 12.02), controlPoint2: CGPoint(x: 2.94, y: 10))
        icon.addCurve(to: CGPoint(x: 7.41, y: 2.98), controlPoint1: CGPoint(x: 2.94, y: 5), controlPoint2: CGPoint(x: 4.94, y: 2.98))
        icon.addCurve(to: CGPoint(x: 10.32, y: 4.07), controlPoint1: CGPoint(x: 8.52, y: 2.98), controlPoint2: CGPoint(x: 9.54, y: 3.39))
        icon.addLine(to: CGPoint(x: 12.41, y: 1.95))
        icon.addCurve(to: CGPoint(x: 7.41, y: 0), controlPoint1: CGPoint(x: 11.09, y: 0.74), controlPoint2: CGPoint(x: 9.34, y: 0))
        icon.addCurve(to: CGPoint(x: 0, y: 7.5), controlPoint1: CGPoint(x: 3.32, y: 0), controlPoint2: CGPoint(x: 0, y: 3.36))
        icon.addCurve(to: CGPoint(x: 7.41, y: 15), controlPoint1: CGPoint(x: 0, y: 11.64), controlPoint2: CGPoint(x: 3.32, y: 15))
        icon.addCurve(to: CGPoint(x: 14.4, y: 6.19), controlPoint1: CGPoint(x: 13.64, y: 15), controlPoint2: CGPoint(x: 15.01, y: 9.11))
        icon.addLine(to: CGPoint(x: 7.41, y: 6.18))
        icon.close()
        context.saveGState()
        context.translateBy(x: 4.5, y: 4.5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4.5, y: 4.5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallFacebook(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 14.55, y: 0))
        icon.addLine(to: CGPoint(x: 1.45, y: 0))
        icon.addCurve(to: CGPoint(x: 0, y: 1.45), controlPoint1: CGPoint(x: 0.65, y: 0), controlPoint2: CGPoint(x: 0, y: 0.65))
        icon.addLine(to: CGPoint(x: 0, y: 14.55))
        icon.addCurve(to: CGPoint(x: 1.45, y: 16), controlPoint1: CGPoint(x: 0, y: 15.35), controlPoint2: CGPoint(x: 0.65, y: 16))
        icon.addLine(to: CGPoint(x: 8.73, y: 16))
        icon.addLine(to: CGPoint(x: 8.73, y: 9.45))
        icon.addLine(to: CGPoint(x: 6.55, y: 9.45))
        icon.addLine(to: CGPoint(x: 6.55, y: 7.27))
        icon.addLine(to: CGPoint(x: 8.73, y: 7.27))
        icon.addLine(to: CGPoint(x: 8.73, y: 6.1))
        icon.addCurve(to: CGPoint(x: 11.65, y: 2.91), controlPoint1: CGPoint(x: 8.73, y: 3.88), controlPoint2: CGPoint(x: 9.81, y: 2.91))
        icon.addCurve(to: CGPoint(x: 13.22, y: 3), controlPoint1: CGPoint(x: 12.53, y: 2.91), controlPoint2: CGPoint(x: 13, y: 2.97))
        icon.addLine(to: CGPoint(x: 13.22, y: 5.09))
        icon.addLine(to: CGPoint(x: 11.97, y: 5.09))
        icon.addCurve(to: CGPoint(x: 10.91, y: 6.34), controlPoint1: CGPoint(x: 11.18, y: 5.09), controlPoint2: CGPoint(x: 10.91, y: 5.5))
        icon.addLine(to: CGPoint(x: 10.91, y: 7.27))
        icon.addLine(to: CGPoint(x: 13.2, y: 7.27))
        icon.addLine(to: CGPoint(x: 12.89, y: 9.45))
        icon.addLine(to: CGPoint(x: 10.91, y: 9.45))
        icon.addLine(to: CGPoint(x: 10.91, y: 16))
        icon.addLine(to: CGPoint(x: 14.55, y: 16))
        icon.addCurve(to: CGPoint(x: 16, y: 14.55), controlPoint1: CGPoint(x: 15.35, y: 16), controlPoint2: CGPoint(x: 16, y: 15.35))
        icon.addLine(to: CGPoint(x: 16, y: 1.45))
        icon.addCurve(to: CGPoint(x: 14.55, y: 0), controlPoint1: CGPoint(x: 16, y: 0.65), controlPoint2: CGPoint(x: 15.35, y: 0))
        icon.close()
        context.saveGState()
        context.translateBy(x: 4, y: 4)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4, y: 4))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallStack(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 1.96, y: 0))
        icon.addCurve(to: CGPoint(x: 0, y: 1.96), controlPoint1: CGPoint(x: 0.89, y: 0), controlPoint2: CGPoint(x: 0, y: 0.89))
        icon.addLine(to: CGPoint(x: 0, y: 12.42))
        icon.addCurve(to: CGPoint(x: 1.96, y: 14.38), controlPoint1: CGPoint(x: 0, y: 13.5), controlPoint2: CGPoint(x: 0.88, y: 14.38))
        icon.addLine(to: CGPoint(x: 15.04, y: 14.38))
        icon.addCurve(to: CGPoint(x: 17, y: 12.42), controlPoint1: CGPoint(x: 16.12, y: 14.38), controlPoint2: CGPoint(x: 17, y: 13.5))
        icon.addLine(to: CGPoint(x: 17, y: 1.96))
        icon.addCurve(to: CGPoint(x: 15.04, y: 0), controlPoint1: CGPoint(x: 17, y: 0.89), controlPoint2: CGPoint(x: 16.11, y: 0))
        icon.addLine(to: CGPoint(x: 1.96, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 1.96, y: 1.31))
        icon.addLine(to: CGPoint(x: 15.04, y: 1.31))
        icon.addCurve(to: CGPoint(x: 15.69, y: 1.96), controlPoint1: CGPoint(x: 15.41, y: 1.31), controlPoint2: CGPoint(x: 15.69, y: 1.59))
        icon.addLine(to: CGPoint(x: 15.69, y: 2.74))
        icon.addCurve(to: CGPoint(x: 15.04, y: 2.61), controlPoint1: CGPoint(x: 15.49, y: 2.66), controlPoint2: CGPoint(x: 15.27, y: 2.61))
        icon.addLine(to: CGPoint(x: 1.96, y: 2.61))
        icon.addCurve(to: CGPoint(x: 1.31, y: 2.74), controlPoint1: CGPoint(x: 1.73, y: 2.61), controlPoint2: CGPoint(x: 1.51, y: 2.66))
        icon.addLine(to: CGPoint(x: 1.31, y: 1.96))
        icon.addCurve(to: CGPoint(x: 1.96, y: 1.31), controlPoint1: CGPoint(x: 1.31, y: 1.59), controlPoint2: CGPoint(x: 1.59, y: 1.31))
        icon.close()
        icon.move(to: CGPoint(x: 1.96, y: 3.92))
        icon.addLine(to: CGPoint(x: 15.04, y: 3.92))
        icon.addCurve(to: CGPoint(x: 15.69, y: 4.58), controlPoint1: CGPoint(x: 15.41, y: 3.92), controlPoint2: CGPoint(x: 15.69, y: 4.21))
        icon.addLine(to: CGPoint(x: 15.69, y: 5.35))
        icon.addCurve(to: CGPoint(x: 15.04, y: 5.23), controlPoint1: CGPoint(x: 15.49, y: 5.28), controlPoint2: CGPoint(x: 15.27, y: 5.23))
        icon.addLine(to: CGPoint(x: 1.96, y: 5.23))
        icon.addCurve(to: CGPoint(x: 1.31, y: 5.35), controlPoint1: CGPoint(x: 1.73, y: 5.23), controlPoint2: CGPoint(x: 1.51, y: 5.28))
        icon.addLine(to: CGPoint(x: 1.31, y: 4.58))
        icon.addCurve(to: CGPoint(x: 1.96, y: 3.92), controlPoint1: CGPoint(x: 1.31, y: 4.21), controlPoint2: CGPoint(x: 1.59, y: 3.92))
        icon.close()
        icon.move(to: CGPoint(x: 1.96, y: 6.54))
        icon.addLine(to: CGPoint(x: 15.04, y: 6.54))
        icon.addCurve(to: CGPoint(x: 15.69, y: 7.19), controlPoint1: CGPoint(x: 15.41, y: 6.54), controlPoint2: CGPoint(x: 15.69, y: 6.82))
        icon.addLine(to: CGPoint(x: 15.69, y: 7.85))
        icon.addLine(to: CGPoint(x: 12.42, y: 7.85))
        icon.addCurve(to: CGPoint(x: 10.53, y: 9.01), controlPoint1: CGPoint(x: 11.62, y: 7.85), controlPoint2: CGPoint(x: 10.89, y: 8.3))
        icon.addLine(to: CGPoint(x: 10.39, y: 9.29))
        icon.addCurve(to: CGPoint(x: 8.5, y: 10.46), controlPoint1: CGPoint(x: 10.03, y: 10.01), controlPoint2: CGPoint(x: 9.3, y: 10.46))
        icon.addCurve(to: CGPoint(x: 6.61, y: 9.29), controlPoint1: CGPoint(x: 7.7, y: 10.46), controlPoint2: CGPoint(x: 6.97, y: 10.01))
        icon.addLine(to: CGPoint(x: 6.47, y: 9.01))
        icon.addCurve(to: CGPoint(x: 4.58, y: 7.85), controlPoint1: CGPoint(x: 6.11, y: 8.3), controlPoint2: CGPoint(x: 5.38, y: 7.85))
        icon.addLine(to: CGPoint(x: 1.31, y: 7.85))
        icon.addLine(to: CGPoint(x: 1.31, y: 7.19))
        icon.addCurve(to: CGPoint(x: 1.96, y: 6.54), controlPoint1: CGPoint(x: 1.31, y: 6.82), controlPoint2: CGPoint(x: 1.59, y: 6.54))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3.5, y: 4)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3.5, y: 4))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallRocket(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 16, y: 0))
        icon.addCurve(to: CGPoint(x: 5.34, y: 4.66), controlPoint1: CGPoint(x: 16, y: 0), controlPoint2: CGPoint(x: 10.01, y: -0.01))
        icon.addCurve(to: CGPoint(x: 4.76, y: 5.35), controlPoint1: CGPoint(x: 5.12, y: 4.87), controlPoint2: CGPoint(x: 4.93, y: 5.11))
        icon.addCurve(to: CGPoint(x: 2.02, y: 5.96), controlPoint1: CGPoint(x: 3.94, y: 5.28), controlPoint2: CGPoint(x: 2.67, y: 5.3))
        icon.addCurve(to: CGPoint(x: 0, y: 9.99), controlPoint1: CGPoint(x: 0.51, y: 7.47), controlPoint2: CGPoint(x: 0, y: 9.99))
        icon.addLine(to: CGPoint(x: 3.34, y: 9.52))
        icon.addLine(to: CGPoint(x: 3.34, y: 10.66))
        icon.addLine(to: CGPoint(x: 5.34, y: 12.66))
        icon.addLine(to: CGPoint(x: 6.48, y: 12.66))
        icon.addLine(to: CGPoint(x: 6.01, y: 16))
        icon.addCurve(to: CGPoint(x: 10.04, y: 13.98), controlPoint1: CGPoint(x: 6.01, y: 16), controlPoint2: CGPoint(x: 8.53, y: 15.49))
        icon.addCurve(to: CGPoint(x: 10.65, y: 11.24), controlPoint1: CGPoint(x: 10.7, y: 13.33), controlPoint2: CGPoint(x: 10.72, y: 12.06))
        icon.addCurve(to: CGPoint(x: 11.34, y: 10.66), controlPoint1: CGPoint(x: 10.89, y: 11.07), controlPoint2: CGPoint(x: 11.13, y: 10.88))
        icon.addCurve(to: CGPoint(x: 16, y: 0), controlPoint1: CGPoint(x: 16.01, y: 5.99), controlPoint2: CGPoint(x: 16, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 10.22, y: 4.44))
        icon.addCurve(to: CGPoint(x: 11.56, y: 5.78), controlPoint1: CGPoint(x: 10.96, y: 4.44), controlPoint2: CGPoint(x: 11.56, y: 5.04))
        icon.addCurve(to: CGPoint(x: 10.22, y: 7.11), controlPoint1: CGPoint(x: 11.56, y: 6.51), controlPoint2: CGPoint(x: 10.96, y: 7.11))
        icon.addCurve(to: CGPoint(x: 8.89, y: 5.78), controlPoint1: CGPoint(x: 9.49, y: 7.11), controlPoint2: CGPoint(x: 8.89, y: 6.51))
        icon.addCurve(to: CGPoint(x: 10.22, y: 4.44), controlPoint1: CGPoint(x: 8.89, y: 5.04), controlPoint2: CGPoint(x: 9.49, y: 4.44))
        icon.close()
        icon.move(to: CGPoint(x: 2.45, y: 11.56))
        icon.addCurve(to: CGPoint(x: 1.71, y: 11.97), controlPoint1: CGPoint(x: 2.18, y: 11.63), controlPoint2: CGPoint(x: 1.93, y: 11.76))
        icon.addCurve(to: CGPoint(x: 0.9, y: 15.1), controlPoint1: CGPoint(x: 0.74, y: 12.94), controlPoint2: CGPoint(x: 0.9, y: 15.1))
        icon.addCurve(to: CGPoint(x: 4.03, y: 14.28), controlPoint1: CGPoint(x: 0.9, y: 15.1), controlPoint2: CGPoint(x: 3.04, y: 15.27))
        icon.addCurve(to: CGPoint(x: 4.44, y: 13.55), controlPoint1: CGPoint(x: 4.24, y: 14.07), controlPoint2: CGPoint(x: 4.37, y: 13.82))
        icon.addLine(to: CGPoint(x: 4.12, y: 13.22))
        icon.addCurve(to: CGPoint(x: 4.03, y: 13.36), controlPoint1: CGPoint(x: 4.09, y: 13.27), controlPoint2: CGPoint(x: 4.07, y: 13.32))
        icon.addCurve(to: CGPoint(x: 2.29, y: 13.71), controlPoint1: CGPoint(x: 3.33, y: 14.05), controlPoint2: CGPoint(x: 2.29, y: 13.71))
        icon.addCurve(to: CGPoint(x: 2.64, y: 11.97), controlPoint1: CGPoint(x: 2.29, y: 13.71), controlPoint2: CGPoint(x: 1.95, y: 12.67))
        icon.addCurve(to: CGPoint(x: 2.78, y: 11.88), controlPoint1: CGPoint(x: 2.68, y: 11.93), controlPoint2: CGPoint(x: 2.73, y: 11.91))
        icon.addLine(to: CGPoint(x: 2.45, y: 11.56))
        icon.close()
        context.saveGState()
        context.translateBy(x: 4, y: 4)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4, y: 4))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallMusic(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 0, y: 14.13))
        icon.addCurve(to: CGPoint(x: 2.1, y: 16), controlPoint1: CGPoint(x: 0, y: 15.16), controlPoint2: CGPoint(x: 0.82, y: 16))
        icon.addLine(to: CGPoint(x: 2.23, y: 16))
        icon.addCurve(to: CGPoint(x: 4.59, y: 13.6), controlPoint1: CGPoint(x: 3.77, y: 16), controlPoint2: CGPoint(x: 4.59, y: 14.9))
        icon.addLine(to: CGPoint(x: 4.59, y: 5.41))
        icon.addCurve(to: CGPoint(x: 4.85, y: 5.09), controlPoint1: CGPoint(x: 4.59, y: 5.26), controlPoint2: CGPoint(x: 4.71, y: 5.12))
        icon.addLine(to: CGPoint(x: 11.49, y: 3.68))
        icon.addCurve(to: CGPoint(x: 11.75, y: 3.89), controlPoint1: CGPoint(x: 11.63, y: 3.65), controlPoint2: CGPoint(x: 11.75, y: 3.75))
        icon.addLine(to: CGPoint(x: 11.75, y: 9.38))
        icon.addCurve(to: CGPoint(x: 11.5, y: 10.3), controlPoint1: CGPoint(x: 11.73, y: 9.84), controlPoint2: CGPoint(x: 11.65, y: 10.09))
        icon.addCurve(to: CGPoint(x: 10.81, y: 10.66), controlPoint1: CGPoint(x: 11.35, y: 10.5), controlPoint2: CGPoint(x: 11.1, y: 10.63))
        icon.addLine(to: CGPoint(x: 10.05, y: 10.66))
        icon.addCurve(to: CGPoint(x: 8.21, y: 12.53), controlPoint1: CGPoint(x: 9.03, y: 10.66), controlPoint2: CGPoint(x: 8.21, y: 11.5))
        icon.addCurve(to: CGPoint(x: 10.31, y: 14.4), controlPoint1: CGPoint(x: 8.21, y: 13.56), controlPoint2: CGPoint(x: 9.03, y: 14.4))
        icon.addLine(to: CGPoint(x: 10.44, y: 14.4))
        icon.addCurve(to: CGPoint(x: 12.8, y: 12), controlPoint1: CGPoint(x: 11.98, y: 14.4), controlPoint2: CGPoint(x: 12.8, y: 13.3))
        icon.addLine(to: CGPoint(x: 12.8, y: 1.98))
        icon.addLine(to: CGPoint(x: 12.8, y: 0.44))
        icon.addCurve(to: CGPoint(x: 12.28, y: 0.01), controlPoint1: CGPoint(x: 12.8, y: 0.15), controlPoint2: CGPoint(x: 12.57, y: -0.05))
        icon.addLine(to: CGPoint(x: 4.06, y: 1.68))
        icon.addCurve(to: CGPoint(x: 3.54, y: 2.31), controlPoint1: CGPoint(x: 3.77, y: 1.73), controlPoint2: CGPoint(x: 3.54, y: 2.02))
        icon.addLine(to: CGPoint(x: 3.54, y: 3.58))
        icon.addLine(to: CGPoint(x: 3.54, y: 10.98))
        icon.addCurve(to: CGPoint(x: 3.29, y: 11.9), controlPoint1: CGPoint(x: 3.53, y: 11.44), controlPoint2: CGPoint(x: 3.45, y: 11.7))
        icon.addCurve(to: CGPoint(x: 2.61, y: 12.26), controlPoint1: CGPoint(x: 3.14, y: 12.1), controlPoint2: CGPoint(x: 2.9, y: 12.24))
        icon.addLine(to: CGPoint(x: 1.84, y: 12.26))
        icon.addCurve(to: CGPoint(x: 0, y: 14.13), controlPoint1: CGPoint(x: 0.82, y: 12.26), controlPoint2: CGPoint(x: 0, y: 13.1))
        icon.close()
        context.saveGState()
        context.translateBy(x: 5.5, y: 4)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 5.5, y: 4))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallPrivacy(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 5.85, y: 7.92))
        icon.addLine(to: CGPoint(x: 5.85, y: 8.19))
        icon.addCurve(to: CGPoint(x: 6.19, y: 8.52), controlPoint1: CGPoint(x: 5.85, y: 8.37), controlPoint2: CGPoint(x: 6.01, y: 8.52))
        icon.addCurve(to: CGPoint(x: 6.53, y: 8.19), controlPoint1: CGPoint(x: 6.38, y: 8.52), controlPoint2: CGPoint(x: 6.53, y: 8.37))
        icon.addLine(to: CGPoint(x: 6.53, y: 7.92))
        icon.addLine(to: CGPoint(x: 6.53, y: 1.86))
        icon.addCurve(to: CGPoint(x: 7.32, y: 1.08), controlPoint1: CGPoint(x: 6.53, y: 1.44), controlPoint2: CGPoint(x: 6.88, y: 1.08))
        icon.addCurve(to: CGPoint(x: 8.11, y: 1.86), controlPoint1: CGPoint(x: 7.76, y: 1.08), controlPoint2: CGPoint(x: 8.11, y: 1.43))
        icon.addLine(to: CGPoint(x: 8.11, y: 7.92))
        icon.addLine(to: CGPoint(x: 8.11, y: 8.93))
        icon.addCurve(to: CGPoint(x: 8.6, y: 10.1), controlPoint1: CGPoint(x: 8.11, y: 9.62), controlPoint2: CGPoint(x: 8.11, y: 10.1))
        icon.addCurve(to: CGPoint(x: 10.13, y: 8.03), controlPoint1: CGPoint(x: 9.1, y: 10.1), controlPoint2: CGPoint(x: 9.28, y: 8.59))
        icon.addCurve(to: CGPoint(x: 12, y: 7.9), controlPoint1: CGPoint(x: 10.99, y: 7.46), controlPoint2: CGPoint(x: 12, y: 7.55))
        icon.addCurve(to: CGPoint(x: 9.82, y: 11.82), controlPoint1: CGPoint(x: 12, y: 8.24), controlPoint2: CGPoint(x: 10.42, y: 9.62))
        icon.addCurve(to: CGPoint(x: 8.43, y: 14.8), controlPoint1: CGPoint(x: 9.46, y: 13.13), controlPoint2: CGPoint(x: 8.86, y: 14.17))
        icon.addCurve(to: CGPoint(x: 4.5, y: 17), controlPoint1: CGPoint(x: 7.66, y: 16.11), controlPoint2: CGPoint(x: 6.19, y: 17))
        icon.addCurve(to: CGPoint(x: 0, y: 12.69), controlPoint1: CGPoint(x: 2.02, y: 17), controlPoint2: CGPoint(x: 0, y: 15.07))
        icon.addCurve(to: CGPoint(x: 0, y: 12.66), controlPoint1: CGPoint(x: 0, y: 12.68), controlPoint2: CGPoint(x: 0, y: 12.67))
        icon.addLine(to: CGPoint(x: 0, y: 7.92))
        icon.addLine(to: CGPoint(x: 0, y: 3.27))
        icon.addCurve(to: CGPoint(x: 0.68, y: 2.59), controlPoint1: CGPoint(x: 0, y: 2.89), controlPoint2: CGPoint(x: 0.3, y: 2.59))
        icon.addCurve(to: CGPoint(x: 1.35, y: 3.27), controlPoint1: CGPoint(x: 1.05, y: 2.59), controlPoint2: CGPoint(x: 1.35, y: 2.89))
        icon.addLine(to: CGPoint(x: 1.35, y: 7.92))
        icon.addLine(to: CGPoint(x: 1.35, y: 8.4))
        icon.addCurve(to: CGPoint(x: 1.69, y: 8.74), controlPoint1: CGPoint(x: 1.35, y: 8.59), controlPoint2: CGPoint(x: 1.51, y: 8.74))
        icon.addCurve(to: CGPoint(x: 2.03, y: 8.4), controlPoint1: CGPoint(x: 1.88, y: 8.74), controlPoint2: CGPoint(x: 2.03, y: 8.58))
        icon.addLine(to: CGPoint(x: 2.03, y: 7.92))
        icon.addLine(to: CGPoint(x: 2.03, y: 1.22))
        icon.addCurve(to: CGPoint(x: 2.81, y: 0.43), controlPoint1: CGPoint(x: 2.03, y: 0.79), controlPoint2: CGPoint(x: 2.38, y: 0.43))
        icon.addCurve(to: CGPoint(x: 3.6, y: 1.22), controlPoint1: CGPoint(x: 3.25, y: 0.43), controlPoint2: CGPoint(x: 3.6, y: 0.79))
        icon.addLine(to: CGPoint(x: 3.6, y: 7.92))
        icon.addLine(to: CGPoint(x: 3.6, y: 7.97))
        icon.addCurve(to: CGPoint(x: 3.94, y: 8.31), controlPoint1: CGPoint(x: 3.6, y: 8.16), controlPoint2: CGPoint(x: 3.76, y: 8.31))
        icon.addCurve(to: CGPoint(x: 4.28, y: 7.97), controlPoint1: CGPoint(x: 4.13, y: 8.31), controlPoint2: CGPoint(x: 4.28, y: 8.15))
        icon.addLine(to: CGPoint(x: 4.28, y: 7.92))
        icon.addLine(to: CGPoint(x: 4.28, y: 0.78))
        icon.addCurve(to: CGPoint(x: 5.07, y: 0), controlPoint1: CGPoint(x: 4.28, y: 0.35), controlPoint2: CGPoint(x: 4.63, y: 0))
        icon.addCurve(to: CGPoint(x: 5.85, y: 0.78), controlPoint1: CGPoint(x: 5.5, y: 0), controlPoint2: CGPoint(x: 5.85, y: 0.35))
        icon.addLine(to: CGPoint(x: 5.85, y: 7.92))
        icon.close()
        context.saveGState()
        context.translateBy(x: 7, y: 4)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 7, y: 4))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallLike(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 7, y: 13.5))
        icon.addCurve(to: CGPoint(x: 7, y: 1.6), controlPoint1: CGPoint(x: 20.2, y: 4.28), controlPoint2: CGPoint(x: 11.5, y: -3.46))
        icon.addCurve(to: CGPoint(x: 7, y: 13.5), controlPoint1: CGPoint(x: 2.5, y: -3.46), controlPoint2: CGPoint(x: -6.2, y: 4.28))
        icon.close()
        context.saveGState()
        context.translateBy(x: 5, y: 5.5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 5, y: 5.5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallMessages(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 6.44, y: 12.98))
        icon.addCurve(to: CGPoint(x: 5.27, y: 13.12), controlPoint1: CGPoint(x: 5.99, y: 12.94), controlPoint2: CGPoint(x: 5.73, y: 12.98))
        icon.addCurve(to: CGPoint(x: 2.73, y: 14), controlPoint1: CGPoint(x: 4.73, y: 13.28), controlPoint2: CGPoint(x: 3.88, y: 14))
        icon.addCurve(to: CGPoint(x: 3.82, y: 12.38), controlPoint1: CGPoint(x: 2.66, y: 14), controlPoint2: CGPoint(x: 3.82, y: 13.08))
        icon.addCurve(to: CGPoint(x: 3.82, y: 12.14), controlPoint1: CGPoint(x: 3.82, y: 12.29), controlPoint2: CGPoint(x: 3.82, y: 12.21))
        icon.addCurve(to: CGPoint(x: 0, y: 6.55), controlPoint1: CGPoint(x: 1.53, y: 10.98), controlPoint2: CGPoint(x: 0, y: 8.91))
        icon.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 0, y: 2.93), controlPoint2: CGPoint(x: 3.58, y: 0))
        icon.addCurve(to: CGPoint(x: 16, y: 6.55), controlPoint1: CGPoint(x: 12.42, y: 0), controlPoint2: CGPoint(x: 16, y: 2.93))
        icon.addCurve(to: CGPoint(x: 8, y: 13.1), controlPoint1: CGPoint(x: 16, y: 10.17), controlPoint2: CGPoint(x: 12.42, y: 13.1))
        icon.addCurve(to: CGPoint(x: 6.44, y: 12.98), controlPoint1: CGPoint(x: 7.47, y: 13.1), controlPoint2: CGPoint(x: 6.94, y: 13.06))
        icon.close()
        context.saveGState()
        context.translateBy(x: 4, y: 5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4, y: 5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallVideo(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 7.43, y: 0))
        icon.addCurve(to: CGPoint(x: 9, y: 1.87), controlPoint1: CGPoint(x: 8.3, y: 0), controlPoint2: CGPoint(x: 9, y: 0.84))
        icon.addLine(to: CGPoint(x: 9, y: 7))
        icon.addCurve(to: CGPoint(x: 7.43, y: 8.87), controlPoint1: CGPoint(x: 9, y: 8.04), controlPoint2: CGPoint(x: 8.3, y: 8.87))
        icon.addLine(to: CGPoint(x: 1.57, y: 8.87))
        icon.addCurve(to: CGPoint(x: 0, y: 7), controlPoint1: CGPoint(x: 0.7, y: 8.87), controlPoint2: CGPoint(x: 0, y: 8.04))
        icon.addLine(to: CGPoint(x: 0, y: 1.87))
        icon.addCurve(to: CGPoint(x: 1.57, y: 0), controlPoint1: CGPoint(x: 0, y: 0.84), controlPoint2: CGPoint(x: 0.7, y: 0))
        icon.addLine(to: CGPoint(x: 7.43, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 13.86, y: 0.14))
        icon.addLine(to: CGPoint(x: 14, y: 0.14))
        icon.addLine(to: CGPoint(x: 14, y: 9))
        icon.addLine(to: CGPoint(x: 13.86, y: 9))
        icon.addLine(to: CGPoint(x: 10.16, y: 5.49))
        icon.addLine(to: CGPoint(x: 10.18, y: 3.4))
        icon.addLine(to: CGPoint(x: 13.86, y: 0.14))
        icon.close()
        context.saveGState()
        context.translateBy(x: 5, y: 8)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 5, y: 8))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallKey(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 9.69, y: 0))
        icon.addCurve(to: CGPoint(x: 4.38, y: 5.31), controlPoint1: CGPoint(x: 6.75, y: 0), controlPoint2: CGPoint(x: 4.38, y: 2.38))
        icon.addCurve(to: CGPoint(x: 4.71, y: 7.16), controlPoint1: CGPoint(x: 4.38, y: 5.96), controlPoint2: CGPoint(x: 4.5, y: 6.58))
        icon.addLine(to: CGPoint(x: 0, y: 11.88))
        icon.addLine(to: CGPoint(x: 0, y: 15))
        icon.addLine(to: CGPoint(x: 3.12, y: 15))
        icon.addLine(to: CGPoint(x: 3.12, y: 13.13))
        icon.addLine(to: CGPoint(x: 5, y: 13.13))
        icon.addLine(to: CGPoint(x: 5, y: 11.25))
        icon.addLine(to: CGPoint(x: 6.87, y: 11.25))
        icon.addLine(to: CGPoint(x: 7.84, y: 10.29))
        icon.addCurve(to: CGPoint(x: 9.69, y: 10.62), controlPoint1: CGPoint(x: 8.42, y: 10.5), controlPoint2: CGPoint(x: 9.04, y: 10.62))
        icon.addCurve(to: CGPoint(x: 15, y: 5.31), controlPoint1: CGPoint(x: 12.62, y: 10.62), controlPoint2: CGPoint(x: 15, y: 8.25))
        icon.addCurve(to: CGPoint(x: 9.69, y: 0), controlPoint1: CGPoint(x: 15, y: 2.38), controlPoint2: CGPoint(x: 12.62, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 10.94, y: 2.5))
        icon.addCurve(to: CGPoint(x: 12.5, y: 4.06), controlPoint1: CGPoint(x: 11.8, y: 2.5), controlPoint2: CGPoint(x: 12.5, y: 3.2))
        icon.addCurve(to: CGPoint(x: 10.94, y: 5.63), controlPoint1: CGPoint(x: 12.5, y: 4.93), controlPoint2: CGPoint(x: 11.8, y: 5.63))
        icon.addCurve(to: CGPoint(x: 9.38, y: 4.06), controlPoint1: CGPoint(x: 10.07, y: 5.63), controlPoint2: CGPoint(x: 9.38, y: 4.93))
        icon.addCurve(to: CGPoint(x: 10.94, y: 2.5), controlPoint1: CGPoint(x: 9.38, y: 3.2), controlPoint2: CGPoint(x: 10.07, y: 2.5))
        icon.close()
        context.saveGState()
        context.translateBy(x: 4.5, y: 5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4.5, y: 5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallCall(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 1.36, y: 6.87))
        icon.addCurve(to: CGPoint(x: 0, y: 2.66), controlPoint1: CGPoint(x: 0.38, y: 5.08), controlPoint2: CGPoint(x: 0, y: 3.63))
        icon.addCurve(to: CGPoint(x: 0.48, y: 1.18), controlPoint1: CGPoint(x: 0, y: 1.68), controlPoint2: CGPoint(x: 0.24, y: 1.41))
        icon.addCurve(to: CGPoint(x: 2.01, y: 0.15), controlPoint1: CGPoint(x: 0.73, y: 0.95), controlPoint2: CGPoint(x: 1.82, y: 0.28))
        icon.addCurve(to: CGPoint(x: 3.35, y: 0.42), controlPoint1: CGPoint(x: 2.19, y: 0.03), controlPoint2: CGPoint(x: 2.91, y: -0.22))
        icon.addCurve(to: CGPoint(x: 5.22, y: 3.21), controlPoint1: CGPoint(x: 3.8, y: 1.07), controlPoint2: CGPoint(x: 4.64, y: 2.36))
        icon.addCurve(to: CGPoint(x: 5.17, y: 5.28), controlPoint1: CGPoint(x: 6.13, y: 4.43), controlPoint2: CGPoint(x: 5.41, y: 4.96))
        icon.addCurve(to: CGPoint(x: 4.49, y: 6.74), controlPoint1: CGPoint(x: 4.74, y: 5.87), controlPoint2: CGPoint(x: 4.49, y: 6.01))
        icon.addCurve(to: CGPoint(x: 6.99, y: 10.01), controlPoint1: CGPoint(x: 4.49, y: 7.46), controlPoint2: CGPoint(x: 6.51, y: 9.51))
        icon.addCurve(to: CGPoint(x: 10.1, y: 12.37), controlPoint1: CGPoint(x: 7.47, y: 10.51), controlPoint2: CGPoint(x: 9.48, y: 12.28))
        icon.addCurve(to: CGPoint(x: 11.75, y: 11.63), controlPoint1: CGPoint(x: 10.73, y: 12.47), controlPoint2: CGPoint(x: 11.57, y: 11.8))
        icon.addCurve(to: CGPoint(x: 13.59, y: 11.69), controlPoint1: CGPoint(x: 12.66, y: 10.94), controlPoint2: CGPoint(x: 13.17, y: 11.46))
        icon.addCurve(to: CGPoint(x: 16.48, y: 13.5), controlPoint1: CGPoint(x: 14.01, y: 11.92), controlPoint2: CGPoint(x: 15.9, y: 13.1))
        icon.addCurve(to: CGPoint(x: 17, y: 14.51), controlPoint1: CGPoint(x: 17.03, y: 13.9), controlPoint2: CGPoint(x: 17, y: 14.51))
        icon.addCurve(to: CGPoint(x: 15.72, y: 16.53), controlPoint1: CGPoint(x: 17, y: 14.51), controlPoint2: CGPoint(x: 15.86, y: 16.31))
        icon.addCurve(to: CGPoint(x: 14.21, y: 17), controlPoint1: CGPoint(x: 15.55, y: 16.78), controlPoint2: CGPoint(x: 15.14, y: 17))
        icon.addCurve(to: CGPoint(x: 9.92, y: 15.53), controlPoint1: CGPoint(x: 13.28, y: 17), controlPoint2: CGPoint(x: 12.28, y: 16.83))
        icon.addCurve(to: CGPoint(x: 5.18, y: 11.83), controlPoint1: CGPoint(x: 7.99, y: 14.47), controlPoint2: CGPoint(x: 6.15, y: 12.8))
        icon.addCurve(to: CGPoint(x: 1.36, y: 6.87), controlPoint1: CGPoint(x: 4.18, y: 10.85), controlPoint2: CGPoint(x: 2.49, y: 8.91))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3.5, y: 3.5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3.5, y: 3.5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallFavorite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 16.5, y: 6.9))
        icon.addLine(to: CGPoint(x: 12.07, y: 10.17))
        icon.addLine(to: CGPoint(x: 13.67, y: 15.18))
        icon.addCurve(to: CGPoint(x: 12.71, y: 15.92), controlPoint1: CGPoint(x: 13.67, y: 15.18), controlPoint2: CGPoint(x: 14.6, y: 17.28))
        icon.addCurve(to: CGPoint(x: 8.51, y: 12.79), controlPoint1: CGPoint(x: 10.98, y: 14.68), controlPoint2: CGPoint(x: 8.51, y: 12.79))
        icon.addCurve(to: CGPoint(x: 4.21, y: 15.99), controlPoint1: CGPoint(x: 8.51, y: 12.79), controlPoint2: CGPoint(x: 5.92, y: 14.72))
        icon.addCurve(to: CGPoint(x: 3.36, y: 15.11), controlPoint1: CGPoint(x: 2.48, y: 17.27), controlPoint2: CGPoint(x: 3.36, y: 15.11))
        icon.addLine(to: CGPoint(x: 4.96, y: 10.16))
        icon.addLine(to: CGPoint(x: 0.62, y: 6.97))
        icon.addCurve(to: CGPoint(x: 0.89, y: 5.9), controlPoint1: CGPoint(x: 0.62, y: 6.97), controlPoint2: CGPoint(x: -0.95, y: 5.9))
        icon.addCurve(to: CGPoint(x: 6.32, y: 5.9), controlPoint1: CGPoint(x: 3.01, y: 5.9), controlPoint2: CGPoint(x: 6.32, y: 5.9))
        icon.addLine(to: CGPoint(x: 8.05, y: 0.47))
        icon.addCurve(to: CGPoint(x: 8.52, y: 0), controlPoint1: CGPoint(x: 8.05, y: 0.47), controlPoint2: CGPoint(x: 8.18, y: 0))
        icon.addCurve(to: CGPoint(x: 9.01, y: 0.5), controlPoint1: CGPoint(x: 8.88, y: 0), controlPoint2: CGPoint(x: 9.01, y: 0.5))
        icon.addLine(to: CGPoint(x: 10.71, y: 5.9))
        icon.addCurve(to: CGPoint(x: 16.11, y: 5.9), controlPoint1: CGPoint(x: 10.71, y: 5.9), controlPoint2: CGPoint(x: 13.99, y: 5.9))
        icon.addCurve(to: CGPoint(x: 16.5, y: 6.9), controlPoint1: CGPoint(x: 17.85, y: 5.9), controlPoint2: CGPoint(x: 16.5, y: 6.9))
        context.saveGState()
        context.translateBy(x: 3.5, y: 3.5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3.5, y: 3.5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallProfile(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 14.06, y: 14.54))
        icon.addCurve(to: CGPoint(x: 16.5, y: 9), controlPoint1: CGPoint(x: 15.56, y: 13.16), controlPoint2: CGPoint(x: 16.5, y: 11.19))
        icon.addCurve(to: CGPoint(x: 9, y: 1.5), controlPoint1: CGPoint(x: 16.5, y: 4.86), controlPoint2: CGPoint(x: 13.14, y: 1.5))
        icon.addCurve(to: CGPoint(x: 1.5, y: 9), controlPoint1: CGPoint(x: 4.86, y: 1.5), controlPoint2: CGPoint(x: 1.5, y: 4.86))
        icon.addCurve(to: CGPoint(x: 3.98, y: 14.57), controlPoint1: CGPoint(x: 1.5, y: 11.21), controlPoint2: CGPoint(x: 2.46, y: 13.2))
        icon.addLine(to: CGPoint(x: 3.99, y: 14.48))
        icon.addCurve(to: CGPoint(x: 4.85, y: 12.93), controlPoint1: CGPoint(x: 4.13, y: 13.8), controlPoint2: CGPoint(x: 4.41, y: 13.29))
        icon.addCurve(to: CGPoint(x: 6.49, y: 12.45), controlPoint1: CGPoint(x: 5.15, y: 12.69), controlPoint2: CGPoint(x: 5.7, y: 12.52))
        icon.addCurve(to: CGPoint(x: 7.13, y: 12.27), controlPoint1: CGPoint(x: 6.69, y: 12.44), controlPoint2: CGPoint(x: 6.89, y: 12.39))
        icon.addCurve(to: CGPoint(x: 7.56, y: 11.79), controlPoint1: CGPoint(x: 7.4, y: 12.13), controlPoint2: CGPoint(x: 7.53, y: 11.92))
        icon.addCurve(to: CGPoint(x: 7.56, y: 10.92), controlPoint1: CGPoint(x: 7.56, y: 11.51), controlPoint2: CGPoint(x: 7.56, y: 10.92))
        icon.addCurve(to: CGPoint(x: 7.51, y: 10.85), controlPoint1: CGPoint(x: 7.56, y: 10.87), controlPoint2: CGPoint(x: 7.54, y: 10.89))
        icon.addCurve(to: CGPoint(x: 7.06, y: 10.15), controlPoint1: CGPoint(x: 7.5, y: 10.84), controlPoint2: CGPoint(x: 7.25, y: 10.62))
        icon.addCurve(to: CGPoint(x: 6.84, y: 9.35), controlPoint1: CGPoint(x: 6.97, y: 9.94), controlPoint2: CGPoint(x: 6.89, y: 9.67))
        icon.addCurve(to: CGPoint(x: 6.79, y: 9.27), controlPoint1: CGPoint(x: 6.84, y: 9.32), controlPoint2: CGPoint(x: 6.81, y: 9.28))
        icon.addCurve(to: CGPoint(x: 6.5, y: 9.04), controlPoint1: CGPoint(x: 6.66, y: 9.23), controlPoint2: CGPoint(x: 6.57, y: 9.15))
        icon.addCurve(to: CGPoint(x: 6.3, y: 8.41), controlPoint1: CGPoint(x: 6.37, y: 8.85), controlPoint2: CGPoint(x: 6.33, y: 8.63))
        icon.addCurve(to: CGPoint(x: 6.51, y: 7.81), controlPoint1: CGPoint(x: 6.28, y: 8.18), controlPoint2: CGPoint(x: 6.32, y: 7.97))
        icon.addCurve(to: CGPoint(x: 6.52, y: 7.72), controlPoint1: CGPoint(x: 6.53, y: 7.79), controlPoint2: CGPoint(x: 6.53, y: 7.75))
        icon.addCurve(to: CGPoint(x: 6.35, y: 6.82), controlPoint1: CGPoint(x: 6.46, y: 7.42), controlPoint2: CGPoint(x: 6.39, y: 7.12))
        icon.addCurve(to: CGPoint(x: 6.36, y: 5.33), controlPoint1: CGPoint(x: 6.27, y: 6.32), controlPoint2: CGPoint(x: 6.26, y: 5.83))
        icon.addCurve(to: CGPoint(x: 7.44, y: 3.8), controlPoint1: CGPoint(x: 6.49, y: 4.66), controlPoint2: CGPoint(x: 6.81, y: 4.11))
        icon.addCurve(to: CGPoint(x: 8.9, y: 3.46), controlPoint1: CGPoint(x: 7.91, y: 3.57), controlPoint2: CGPoint(x: 8.4, y: 3.46))
        icon.addCurve(to: CGPoint(x: 9.64, y: 3.54), controlPoint1: CGPoint(x: 9.14, y: 3.46), controlPoint2: CGPoint(x: 9.39, y: 3.49))
        icon.addCurve(to: CGPoint(x: 10.31, y: 3.91), controlPoint1: CGPoint(x: 9.9, y: 3.59), controlPoint2: CGPoint(x: 10.14, y: 3.69))
        icon.addCurve(to: CGPoint(x: 10.5, y: 4.02), controlPoint1: CGPoint(x: 10.36, y: 3.97), controlPoint2: CGPoint(x: 10.41, y: 4.01))
        icon.addCurve(to: CGPoint(x: 11.61, y: 4.94), controlPoint1: CGPoint(x: 11.03, y: 4.12), controlPoint2: CGPoint(x: 11.41, y: 4.43))
        icon.addCurve(to: CGPoint(x: 11.78, y: 5.87), controlPoint1: CGPoint(x: 11.73, y: 5.24), controlPoint2: CGPoint(x: 11.77, y: 5.55))
        icon.addCurve(to: CGPoint(x: 11.48, y: 7.72), controlPoint1: CGPoint(x: 11.79, y: 6.5), controlPoint2: CGPoint(x: 11.67, y: 7.11))
        icon.addCurve(to: CGPoint(x: 11.51, y: 7.83), controlPoint1: CGPoint(x: 11.47, y: 7.77), controlPoint2: CGPoint(x: 11.47, y: 7.8))
        icon.addCurve(to: CGPoint(x: 11.68, y: 8.12), controlPoint1: CGPoint(x: 11.61, y: 7.9), controlPoint2: CGPoint(x: 11.66, y: 8))
        icon.addCurve(to: CGPoint(x: 11.47, y: 9.09), controlPoint1: CGPoint(x: 11.74, y: 8.47), controlPoint2: CGPoint(x: 11.67, y: 8.79))
        icon.addCurve(to: CGPoint(x: 11.22, y: 9.27), controlPoint1: CGPoint(x: 11.41, y: 9.18), controlPoint2: CGPoint(x: 11.33, y: 9.24))
        icon.addCurve(to: CGPoint(x: 11.16, y: 9.34), controlPoint1: CGPoint(x: 11.19, y: 9.27), controlPoint2: CGPoint(x: 11.17, y: 9.31))
        icon.addCurve(to: CGPoint(x: 10.96, y: 10.04), controlPoint1: CGPoint(x: 11.09, y: 9.57), controlPoint2: CGPoint(x: 11.04, y: 9.81))
        icon.addCurve(to: CGPoint(x: 10.5, y: 10.87), controlPoint1: CGPoint(x: 10.85, y: 10.3), controlPoint2: CGPoint(x: 10.73, y: 10.68))
        icon.addCurve(to: CGPoint(x: 10.48, y: 10.92), controlPoint1: CGPoint(x: 10.49, y: 10.88), controlPoint2: CGPoint(x: 10.48, y: 10.9))
        icon.addCurve(to: CGPoint(x: 10.48, y: 11.79), controlPoint1: CGPoint(x: 10.48, y: 11.2), controlPoint2: CGPoint(x: 10.48, y: 11.51))
        icon.addCurve(to: CGPoint(x: 10.91, y: 12.27), controlPoint1: CGPoint(x: 10.52, y: 11.92), controlPoint2: CGPoint(x: 10.64, y: 12.13))
        icon.addCurve(to: CGPoint(x: 11.56, y: 12.45), controlPoint1: CGPoint(x: 11.15, y: 12.39), controlPoint2: CGPoint(x: 11.35, y: 12.44))
        icon.addCurve(to: CGPoint(x: 13.2, y: 12.93), controlPoint1: CGPoint(x: 12.34, y: 12.52), controlPoint2: CGPoint(x: 12.89, y: 12.69))
        icon.addCurve(to: CGPoint(x: 14.05, y: 14.48), controlPoint1: CGPoint(x: 13.63, y: 13.29), controlPoint2: CGPoint(x: 13.92, y: 13.8))
        icon.addLine(to: CGPoint(x: 14.06, y: 14.54))
        icon.close()
        icon.move(to: CGPoint(x: 9, y: 0))
        icon.addCurve(to: CGPoint(x: 18, y: 9), controlPoint1: CGPoint(x: 13.97, y: 0), controlPoint2: CGPoint(x: 18, y: 4.03))
        icon.addCurve(to: CGPoint(x: 9, y: 18), controlPoint1: CGPoint(x: 18, y: 13.97), controlPoint2: CGPoint(x: 13.97, y: 18))
        icon.addCurve(to: CGPoint(x: 0, y: 9), controlPoint1: CGPoint(x: 4.03, y: 18), controlPoint2: CGPoint(x: 0, y: 13.97))
        icon.addCurve(to: CGPoint(x: 9, y: 0), controlPoint1: CGPoint(x: 0, y: 4.03), controlPoint2: CGPoint(x: 4.03, y: 0))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3, y: 3)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3, y: 3))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallCompass(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 9, y: 1.5))
        icon.addCurve(to: CGPoint(x: 1.5, y: 9), controlPoint1: CGPoint(x: 4.86, y: 1.5), controlPoint2: CGPoint(x: 1.5, y: 4.86))
        icon.addCurve(to: CGPoint(x: 9, y: 16.5), controlPoint1: CGPoint(x: 1.5, y: 13.14), controlPoint2: CGPoint(x: 4.86, y: 16.5))
        icon.addCurve(to: CGPoint(x: 16.5, y: 9), controlPoint1: CGPoint(x: 13.14, y: 16.5), controlPoint2: CGPoint(x: 16.5, y: 13.14))
        icon.addCurve(to: CGPoint(x: 9, y: 1.5), controlPoint1: CGPoint(x: 16.5, y: 4.86), controlPoint2: CGPoint(x: 13.14, y: 1.5))
        icon.close()
        icon.move(to: CGPoint(x: 9, y: 0))
        icon.addCurve(to: CGPoint(x: 18, y: 9), controlPoint1: CGPoint(x: 13.97, y: 0), controlPoint2: CGPoint(x: 18, y: 4.03))
        icon.addCurve(to: CGPoint(x: 9, y: 18), controlPoint1: CGPoint(x: 18, y: 13.97), controlPoint2: CGPoint(x: 13.97, y: 18))
        icon.addCurve(to: CGPoint(x: 0, y: 9), controlPoint1: CGPoint(x: 4.03, y: 18), controlPoint2: CGPoint(x: 0, y: 13.97))
        icon.addCurve(to: CGPoint(x: 9, y: 0), controlPoint1: CGPoint(x: 0, y: 4.03), controlPoint2: CGPoint(x: 4.03, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 10.11, y: 9.64))
        icon.addLine(to: CGPoint(x: 13.15, y: 4.85))
        icon.addLine(to: CGPoint(x: 8.36, y: 7.89))
        icon.addLine(to: CGPoint(x: 10.11, y: 9.64))
        icon.close()
        icon.move(to: CGPoint(x: 4.85, y: 13.15))
        icon.addLine(to: CGPoint(x: 9.64, y: 10.11))
        icon.addLine(to: CGPoint(x: 7.89, y: 8.36))
        icon.addLine(to: CGPoint(x: 4.85, y: 13.15))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3, y: 3)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3, y: 3))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallRecents(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 9, y: 1.5))
        icon.addCurve(to: CGPoint(x: 1.5, y: 9), controlPoint1: CGPoint(x: 4.86, y: 1.5), controlPoint2: CGPoint(x: 1.5, y: 4.86))
        icon.addCurve(to: CGPoint(x: 9, y: 16.5), controlPoint1: CGPoint(x: 1.5, y: 13.14), controlPoint2: CGPoint(x: 4.86, y: 16.5))
        icon.addCurve(to: CGPoint(x: 16.5, y: 9), controlPoint1: CGPoint(x: 13.14, y: 16.5), controlPoint2: CGPoint(x: 16.5, y: 13.14))
        icon.addCurve(to: CGPoint(x: 9, y: 1.5), controlPoint1: CGPoint(x: 16.5, y: 4.86), controlPoint2: CGPoint(x: 13.14, y: 1.5))
        icon.close()
        icon.move(to: CGPoint(x: 9, y: 0))
        icon.addCurve(to: CGPoint(x: 18, y: 9), controlPoint1: CGPoint(x: 13.97, y: 0), controlPoint2: CGPoint(x: 18, y: 4.03))
        icon.addCurve(to: CGPoint(x: 9, y: 18), controlPoint1: CGPoint(x: 18, y: 13.97), controlPoint2: CGPoint(x: 13.97, y: 18))
        icon.addCurve(to: CGPoint(x: 0, y: 9), controlPoint1: CGPoint(x: 4.03, y: 18), controlPoint2: CGPoint(x: 0, y: 13.97))
        icon.addCurve(to: CGPoint(x: 9, y: 0), controlPoint1: CGPoint(x: 0, y: 4.03), controlPoint2: CGPoint(x: 4.03, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 8.47, y: 3.71))
        icon.addLine(to: CGPoint(x: 8.47, y: 9.41))
        icon.addLine(to: CGPoint(x: 4.6, y: 9.41))
        icon.addCurve(to: CGPoint(x: 3.84, y: 10.17), controlPoint1: CGPoint(x: 4.18, y: 9.41), controlPoint2: CGPoint(x: 3.84, y: 9.75))
        icon.addCurve(to: CGPoint(x: 4.6, y: 10.94), controlPoint1: CGPoint(x: 3.84, y: 10.6), controlPoint2: CGPoint(x: 4.18, y: 10.94))
        icon.addLine(to: CGPoint(x: 9.99, y: 10.94))
        icon.addLine(to: CGPoint(x: 9.99, y: 3.71))
        icon.addCurve(to: CGPoint(x: 9.23, y: 2.95), controlPoint1: CGPoint(x: 9.99, y: 3.29), controlPoint2: CGPoint(x: 9.65, y: 2.95))
        icon.addCurve(to: CGPoint(x: 8.47, y: 3.71), controlPoint1: CGPoint(x: 8.81, y: 2.95), controlPoint2: CGPoint(x: 8.47, y: 3.29))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3, y: 3)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3, y: 3))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallInfo(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 9, y: 18))
        icon.addCurve(to: CGPoint(x: 0, y: 9), controlPoint1: CGPoint(x: 4.03, y: 18), controlPoint2: CGPoint(x: 0, y: 13.97))
        icon.addCurve(to: CGPoint(x: 9, y: 0), controlPoint1: CGPoint(x: 0, y: 4.03), controlPoint2: CGPoint(x: 4.03, y: 0))
        icon.addCurve(to: CGPoint(x: 18, y: 9), controlPoint1: CGPoint(x: 13.97, y: 0), controlPoint2: CGPoint(x: 18, y: 4.03))
        icon.addCurve(to: CGPoint(x: 9, y: 18), controlPoint1: CGPoint(x: 18, y: 13.97), controlPoint2: CGPoint(x: 13.97, y: 18))
        icon.close()
        icon.move(to: CGPoint(x: 9, y: 16.5))
        icon.addCurve(to: CGPoint(x: 16.5, y: 9), controlPoint1: CGPoint(x: 13.14, y: 16.5), controlPoint2: CGPoint(x: 16.5, y: 13.14))
        icon.addCurve(to: CGPoint(x: 9, y: 1.5), controlPoint1: CGPoint(x: 16.5, y: 4.86), controlPoint2: CGPoint(x: 13.14, y: 1.5))
        icon.addCurve(to: CGPoint(x: 1.5, y: 9), controlPoint1: CGPoint(x: 4.86, y: 1.5), controlPoint2: CGPoint(x: 1.5, y: 4.86))
        icon.addCurve(to: CGPoint(x: 9, y: 16.5), controlPoint1: CGPoint(x: 1.5, y: 13.14), controlPoint2: CGPoint(x: 4.86, y: 16.5))
        icon.close()
        icon.move(to: CGPoint(x: 8.94, y: 5.56))
        icon.addCurve(to: CGPoint(x: 7.91, y: 4.53), controlPoint1: CGPoint(x: 8.37, y: 5.56), controlPoint2: CGPoint(x: 7.91, y: 5.1))
        icon.addCurve(to: CGPoint(x: 8.94, y: 3.5), controlPoint1: CGPoint(x: 7.91, y: 3.96), controlPoint2: CGPoint(x: 8.37, y: 3.5))
        icon.addCurve(to: CGPoint(x: 9.97, y: 4.53), controlPoint1: CGPoint(x: 9.51, y: 3.5), controlPoint2: CGPoint(x: 9.97, y: 3.96))
        icon.addCurve(to: CGPoint(x: 8.94, y: 5.56), controlPoint1: CGPoint(x: 9.97, y: 5.1), controlPoint2: CGPoint(x: 9.51, y: 5.56))
        icon.close()
        icon.move(to: CGPoint(x: 7.5, y: 13.81))
        icon.addLine(to: CGPoint(x: 7.5, y: 13.4))
        icon.addLine(to: CGPoint(x: 8.32, y: 13.4))
        icon.addLine(to: CGPoint(x: 8.32, y: 7.21))
        icon.addLine(to: CGPoint(x: 7.5, y: 7.21))
        icon.addLine(to: CGPoint(x: 7.5, y: 6.8))
        icon.addLine(to: CGPoint(x: 8.32, y: 6.8))
        icon.addLine(to: CGPoint(x: 9.97, y: 6.8))
        icon.addLine(to: CGPoint(x: 9.97, y: 7.21))
        icon.addLine(to: CGPoint(x: 9.97, y: 13.4))
        icon.addLine(to: CGPoint(x: 10.8, y: 13.4))
        icon.addLine(to: CGPoint(x: 10.8, y: 13.81))
        icon.addLine(to: CGPoint(x: 7.5, y: 13.81))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3, y: 3)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3, y: 3))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallRefresh(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 19.83, y: 6.8))
        icon.addCurve(to: CGPoint(x: 19.74, y: 7.81), controlPoint1: CGPoint(x: 20.09, y: 7.1), controlPoint2: CGPoint(x: 20.05, y: 7.55))
        icon.addLine(to: CGPoint(x: 16.45, y: 10.57))
        icon.addLine(to: CGPoint(x: 13.8, y: 7.18))
        icon.addCurve(to: CGPoint(x: 13.92, y: 6.18), controlPoint1: CGPoint(x: 13.56, y: 6.87), controlPoint2: CGPoint(x: 13.61, y: 6.42))
        icon.addCurve(to: CGPoint(x: 14.93, y: 6.3), controlPoint1: CGPoint(x: 14.23, y: 5.94), controlPoint2: CGPoint(x: 14.68, y: 5.99))
        icon.addLine(to: CGPoint(x: 16.02, y: 7.7))
        icon.addCurve(to: CGPoint(x: 16.03, y: 7.23), controlPoint1: CGPoint(x: 16.03, y: 7.55), controlPoint2: CGPoint(x: 16.03, y: 7.39))
        icon.addCurve(to: CGPoint(x: 9.59, y: 1.43), controlPoint1: CGPoint(x: 15.85, y: 3.86), controlPoint2: CGPoint(x: 12.97, y: 1.28))
        icon.addCurve(to: CGPoint(x: 5.29, y: 3.53), controlPoint1: CGPoint(x: 7.92, y: 1.52), controlPoint2: CGPoint(x: 6.39, y: 2.27))
        icon.addCurve(to: CGPoint(x: 4.28, y: 3.6), controlPoint1: CGPoint(x: 5.03, y: 3.83), controlPoint2: CGPoint(x: 4.58, y: 3.86))
        icon.addCurve(to: CGPoint(x: 4.21, y: 2.59), controlPoint1: CGPoint(x: 3.99, y: 3.34), controlPoint2: CGPoint(x: 3.95, y: 2.89))
        icon.addCurve(to: CGPoint(x: 9.51, y: 0.01), controlPoint1: CGPoint(x: 5.57, y: 1.03), controlPoint2: CGPoint(x: 7.45, y: 0.12))
        icon.addCurve(to: CGPoint(x: 17.45, y: 7.16), controlPoint1: CGPoint(x: 13.67, y: -0.2), controlPoint2: CGPoint(x: 17.23, y: 3))
        icon.addCurve(to: CGPoint(x: 17.45, y: 7.87), controlPoint1: CGPoint(x: 17.46, y: 7.4), controlPoint2: CGPoint(x: 17.46, y: 7.63))
        icon.addLine(to: CGPoint(x: 18.83, y: 6.71))
        icon.addCurve(to: CGPoint(x: 19.83, y: 6.8), controlPoint1: CGPoint(x: 19.13, y: 6.46), controlPoint2: CGPoint(x: 19.58, y: 6.5))
        icon.close()
        icon.move(to: CGPoint(x: 14.62, y: 12.33))
        icon.addCurve(to: CGPoint(x: 15.62, y: 12.27), controlPoint1: CGPoint(x: 14.88, y: 12.04), controlPoint2: CGPoint(x: 15.33, y: 12.01))
        icon.addCurve(to: CGPoint(x: 15.69, y: 13.27), controlPoint1: CGPoint(x: 15.92, y: 12.52), controlPoint2: CGPoint(x: 15.95, y: 12.98))
        icon.addCurve(to: CGPoint(x: 10.4, y: 15.85), controlPoint1: CGPoint(x: 14.34, y: 14.83), controlPoint2: CGPoint(x: 12.46, y: 15.74))
        icon.addCurve(to: CGPoint(x: 10, y: 15.86), controlPoint1: CGPoint(x: 10.26, y: 15.86), controlPoint2: CGPoint(x: 10.13, y: 15.86))
        icon.addCurve(to: CGPoint(x: 2.46, y: 8.7), controlPoint1: CGPoint(x: 6.01, y: 15.86), controlPoint2: CGPoint(x: 2.67, y: 12.73))
        icon.addCurve(to: CGPoint(x: 2.46, y: 8.09), controlPoint1: CGPoint(x: 2.45, y: 8.5), controlPoint2: CGPoint(x: 2.45, y: 8.29))
        icon.addLine(to: CGPoint(x: 1.21, y: 9.29))
        icon.addCurve(to: CGPoint(x: 0.2, y: 9.28), controlPoint1: CGPoint(x: 0.93, y: 9.57), controlPoint2: CGPoint(x: 0.47, y: 9.56))
        icon.addCurve(to: CGPoint(x: 0.22, y: 8.27), controlPoint1: CGPoint(x: -0.07, y: 8.99), controlPoint2: CGPoint(x: -0.07, y: 8.54))
        icon.addLine(to: CGPoint(x: 3.31, y: 5.28))
        icon.addLine(to: CGPoint(x: 6.19, y: 8.47))
        icon.addCurve(to: CGPoint(x: 6.14, y: 9.48), controlPoint1: CGPoint(x: 6.45, y: 8.77), controlPoint2: CGPoint(x: 6.43, y: 9.22))
        icon.addCurve(to: CGPoint(x: 5.66, y: 9.67), controlPoint1: CGPoint(x: 6, y: 9.61), controlPoint2: CGPoint(x: 5.83, y: 9.67))
        icon.addCurve(to: CGPoint(x: 5.13, y: 9.43), controlPoint1: CGPoint(x: 5.47, y: 9.67), controlPoint2: CGPoint(x: 5.27, y: 9.59))
        icon.addLine(to: CGPoint(x: 3.89, y: 8.05))
        icon.addCurve(to: CGPoint(x: 3.88, y: 8.63), controlPoint1: CGPoint(x: 3.88, y: 8.24), controlPoint2: CGPoint(x: 3.87, y: 8.44))
        icon.addCurve(to: CGPoint(x: 10.32, y: 14.43), controlPoint1: CGPoint(x: 4.06, y: 12), controlPoint2: CGPoint(x: 6.95, y: 14.61))
        icon.addCurve(to: CGPoint(x: 14.62, y: 12.33), controlPoint1: CGPoint(x: 11.99, y: 14.34), controlPoint2: CGPoint(x: 13.52, y: 13.6))
        icon.close()
        context.saveGState()
        context.translateBy(x: 2, y: 4.5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 2, y: 4.5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallOpen(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 17.2, y: 0))
        icon.addCurve(to: CGPoint(x: 17.11, y: 0.01), controlPoint1: CGPoint(x: 17.17, y: 0), controlPoint2: CGPoint(x: 17.14, y: 0))
        icon.addLine(to: CGPoint(x: 12.52, y: 0.01))
        icon.addCurve(to: CGPoint(x: 11.83, y: 0.4), controlPoint1: CGPoint(x: 12.23, y: 0), controlPoint2: CGPoint(x: 11.97, y: 0.15))
        icon.addCurve(to: CGPoint(x: 11.83, y: 1.18), controlPoint1: CGPoint(x: 11.69, y: 0.64), controlPoint2: CGPoint(x: 11.69, y: 0.94))
        icon.addCurve(to: CGPoint(x: 12.52, y: 1.57), controlPoint1: CGPoint(x: 11.97, y: 1.43), controlPoint2: CGPoint(x: 12.23, y: 1.58))
        icon.addLine(to: CGPoint(x: 15.32, y: 1.57))
        icon.addLine(to: CGPoint(x: 7.27, y: 9.62))
        icon.addCurve(to: CGPoint(x: 7.05, y: 10.39), controlPoint1: CGPoint(x: 7.07, y: 9.82), controlPoint2: CGPoint(x: 6.98, y: 10.11))
        icon.addCurve(to: CGPoint(x: 7.61, y: 10.95), controlPoint1: CGPoint(x: 7.13, y: 10.66), controlPoint2: CGPoint(x: 7.34, y: 10.87))
        icon.addCurve(to: CGPoint(x: 8.38, y: 10.73), controlPoint1: CGPoint(x: 7.89, y: 11.02), controlPoint2: CGPoint(x: 8.18, y: 10.93))
        icon.addLine(to: CGPoint(x: 16.43, y: 2.68))
        icon.addLine(to: CGPoint(x: 16.43, y: 5.48))
        icon.addCurve(to: CGPoint(x: 16.82, y: 6.17), controlPoint1: CGPoint(x: 16.42, y: 5.77), controlPoint2: CGPoint(x: 16.57, y: 6.03))
        icon.addCurve(to: CGPoint(x: 17.6, y: 6.17), controlPoint1: CGPoint(x: 17.06, y: 6.31), controlPoint2: CGPoint(x: 17.36, y: 6.31))
        icon.addCurve(to: CGPoint(x: 17.99, y: 5.48), controlPoint1: CGPoint(x: 17.85, y: 6.03), controlPoint2: CGPoint(x: 18, y: 5.77))
        icon.addLine(to: CGPoint(x: 17.99, y: 0.89))
        icon.addCurve(to: CGPoint(x: 17.8, y: 0.26), controlPoint1: CGPoint(x: 18.02, y: 0.66), controlPoint2: CGPoint(x: 17.95, y: 0.43))
        icon.addCurve(to: CGPoint(x: 17.2, y: 0), controlPoint1: CGPoint(x: 17.65, y: 0.09), controlPoint2: CGPoint(x: 17.43, y: -0.01))
        icon.close()
        icon.move(to: CGPoint(x: 1.56, y: 3.14))
        icon.addCurve(to: CGPoint(x: 0, y: 4.7), controlPoint1: CGPoint(x: 0.71, y: 3.14), controlPoint2: CGPoint(x: 0, y: 3.85))
        icon.addLine(to: CGPoint(x: 0, y: 16.44))
        icon.addCurve(to: CGPoint(x: 1.56, y: 18), controlPoint1: CGPoint(x: 0, y: 17.29), controlPoint2: CGPoint(x: 0.71, y: 18))
        icon.addLine(to: CGPoint(x: 13.3, y: 18))
        icon.addCurve(to: CGPoint(x: 14.86, y: 16.44), controlPoint1: CGPoint(x: 14.15, y: 18), controlPoint2: CGPoint(x: 14.86, y: 17.29))
        icon.addLine(to: CGPoint(x: 14.86, y: 8.61))
        icon.addLine(to: CGPoint(x: 14.86, y: 6.6))
        icon.addLine(to: CGPoint(x: 13.3, y: 8.16))
        icon.addLine(to: CGPoint(x: 13.3, y: 10.18))
        icon.addLine(to: CGPoint(x: 13.3, y: 16.44))
        icon.addLine(to: CGPoint(x: 1.56, y: 16.44))
        icon.addLine(to: CGPoint(x: 1.56, y: 4.7))
        icon.addLine(to: CGPoint(x: 7.82, y: 4.7))
        icon.addLine(to: CGPoint(x: 9.39, y: 4.7))
        icon.addLine(to: CGPoint(x: 9.84, y: 4.7))
        icon.addLine(to: CGPoint(x: 11.4, y: 3.14))
        icon.addLine(to: CGPoint(x: 9.39, y: 3.14))
        icon.addLine(to: CGPoint(x: 7.82, y: 3.14))
        icon.addLine(to: CGPoint(x: 1.56, y: 3.14))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3, y: 3)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3, y: 3))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallEmail(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 8.5, y: 8.23))
        icon.addCurve(to: CGPoint(x: 10.88, y: 7.21), controlPoint1: CGPoint(x: 9.4, y: 8.23), controlPoint2: CGPoint(x: 10.25, y: 7.87))
        icon.addLine(to: CGPoint(x: 11.75, y: 6.33))
        icon.addLine(to: CGPoint(x: 16.22, y: 10.8))
        icon.addLine(to: CGPoint(x: 0.78, y: 10.8))
        icon.addLine(to: CGPoint(x: 5.25, y: 6.33))
        icon.addLine(to: CGPoint(x: 6.12, y: 7.21))
        icon.addCurve(to: CGPoint(x: 8.5, y: 8.23), controlPoint1: CGPoint(x: 6.75, y: 7.87), controlPoint2: CGPoint(x: 7.6, y: 8.23))
        icon.close()
        icon.move(to: CGPoint(x: 0, y: 0.82))
        icon.addCurve(to: CGPoint(x: 4.48, y: 5.45), controlPoint1: CGPoint(x: 0.7, y: 1.55), controlPoint2: CGPoint(x: 2.17, y: 3.07))
        icon.addLine(to: CGPoint(x: 0, y: 9.93))
        icon.addLine(to: CGPoint(x: 0, y: 0.82))
        icon.close()
        icon.move(to: CGPoint(x: 8.5, y: 6.9))
        icon.addCurve(to: CGPoint(x: 6.91, y: 6.22), controlPoint1: CGPoint(x: 7.9, y: 6.9), controlPoint2: CGPoint(x: 7.33, y: 6.66))
        icon.addLine(to: CGPoint(x: 0.84, y: 0.01))
        icon.addCurve(to: CGPoint(x: 4.66, y: 0), controlPoint1: CGPoint(x: 1.48, y: 0), controlPoint2: CGPoint(x: 2.64, y: 0))
        icon.addCurve(to: CGPoint(x: 16.15, y: 0.01), controlPoint1: CGPoint(x: 8.66, y: 0), controlPoint2: CGPoint(x: 14.13, y: 0.01))
        icon.addLine(to: CGPoint(x: 10.09, y: 6.22))
        icon.addCurve(to: CGPoint(x: 8.5, y: 6.9), controlPoint1: CGPoint(x: 9.66, y: 6.66), controlPoint2: CGPoint(x: 9.1, y: 6.9))
        icon.close()
        icon.move(to: CGPoint(x: 17, y: 9.89))
        icon.addLine(to: CGPoint(x: 12.52, y: 5.4))
        icon.addCurve(to: CGPoint(x: 17, y: 0.77), controlPoint1: CGPoint(x: 14.93, y: 2.92), controlPoint2: CGPoint(x: 16.33, y: 1.47))
        icon.addLine(to: CGPoint(x: 17, y: 9.89))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3.5, y: 7)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3.5, y: 7))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallPhoto(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 16.42, y: 2.77))
        icon.addCurve(to: CGPoint(x: 17.2, y: 3.54), controlPoint1: CGPoint(x: 16.85, y: 2.77), controlPoint2: CGPoint(x: 17.2, y: 3.11))
        icon.addLine(to: CGPoint(x: 17.2, y: 12.22))
        icon.addCurve(to: CGPoint(x: 16.42, y: 13), controlPoint1: CGPoint(x: 17.2, y: 12.65), controlPoint2: CGPoint(x: 16.85, y: 13))
        icon.addLine(to: CGPoint(x: 3.73, y: 13))
        icon.addCurve(to: CGPoint(x: 2.95, y: 12.22), controlPoint1: CGPoint(x: 3.3, y: 13), controlPoint2: CGPoint(x: 2.95, y: 12.65))
        icon.addLine(to: CGPoint(x: 2.95, y: 3.54))
        icon.addCurve(to: CGPoint(x: 3.73, y: 2.77), controlPoint1: CGPoint(x: 2.95, y: 3.11), controlPoint2: CGPoint(x: 3.3, y: 2.77))
        icon.addLine(to: CGPoint(x: 16.42, y: 2.77))
        icon.close()
        icon.move(to: CGPoint(x: 14.25, y: 0.78))
        icon.addLine(to: CGPoint(x: 14.25, y: 1.59))
        icon.addLine(to: CGPoint(x: 2.5, y: 1.59))
        icon.addCurve(to: CGPoint(x: 1.72, y: 2.37), controlPoint1: CGPoint(x: 2.07, y: 1.59), controlPoint2: CGPoint(x: 1.72, y: 1.94))
        icon.addLine(to: CGPoint(x: 1.72, y: 10.23))
        icon.addLine(to: CGPoint(x: 0.78, y: 10.23))
        icon.addCurve(to: CGPoint(x: 0, y: 9.46), controlPoint1: CGPoint(x: 0.35, y: 10.23), controlPoint2: CGPoint(x: 0, y: 9.89))
        icon.addLine(to: CGPoint(x: 0, y: 0.78))
        icon.addCurve(to: CGPoint(x: 0.78, y: 0), controlPoint1: CGPoint(x: 0, y: 0.35), controlPoint2: CGPoint(x: 0.35, y: 0))
        icon.addLine(to: CGPoint(x: 13.47, y: 0))
        icon.addCurve(to: CGPoint(x: 14.25, y: 0.78), controlPoint1: CGPoint(x: 13.9, y: 0), controlPoint2: CGPoint(x: 14.25, y: 0.35))
        icon.close()
        context.saveGState()
        context.translateBy(x: 4, y: 6)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4, y: 6))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallReply(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 8.75, y: 3.95))
        icon.addCurve(to: CGPoint(x: 8.43, y: 3.97), controlPoint1: CGPoint(x: 8.61, y: 3.95), controlPoint2: CGPoint(x: 8.43, y: 3.96))
        icon.addLine(to: CGPoint(x: 8.43, y: 0))
        icon.addLine(to: CGPoint(x: 0, y: 6.35))
        icon.addLine(to: CGPoint(x: 8.43, y: 12.61))
        icon.addLine(to: CGPoint(x: 8.43, y: 8.26))
        icon.addCurve(to: CGPoint(x: 9.48, y: 8.15), controlPoint1: CGPoint(x: 8.43, y: 8.2), controlPoint2: CGPoint(x: 9.09, y: 8.15))
        icon.addCurve(to: CGPoint(x: 16.73, y: 14), controlPoint1: CGPoint(x: 12.94, y: 8.15), controlPoint2: CGPoint(x: 15.81, y: 10.62))
        icon.addCurve(to: CGPoint(x: 17, y: 12.05), controlPoint1: CGPoint(x: 16.88, y: 13.38), controlPoint2: CGPoint(x: 17, y: 12.72))
        icon.addCurve(to: CGPoint(x: 8.75, y: 3.95), controlPoint1: CGPoint(x: 17, y: 7.58), controlPoint2: CGPoint(x: 13.32, y: 3.95))
        context.saveGState()
        context.translateBy(x: 2.7, y: 4.7)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 2.7, y: 4.7))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallSettings(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 8, y: 11.39))
        icon.addCurve(to: CGPoint(x: 4.61, y: 8), controlPoint1: CGPoint(x: 6.13, y: 11.39), controlPoint2: CGPoint(x: 4.61, y: 9.87))
        icon.addCurve(to: CGPoint(x: 8, y: 4.61), controlPoint1: CGPoint(x: 4.61, y: 6.13), controlPoint2: CGPoint(x: 6.13, y: 4.61))
        icon.addCurve(to: CGPoint(x: 11.39, y: 8), controlPoint1: CGPoint(x: 9.87, y: 4.61), controlPoint2: CGPoint(x: 11.39, y: 6.13))
        icon.addCurve(to: CGPoint(x: 8, y: 11.39), controlPoint1: CGPoint(x: 11.39, y: 9.87), controlPoint2: CGPoint(x: 9.87, y: 11.39))
        icon.move(to: CGPoint(x: 15.61, y: 6.92))
        icon.addLine(to: CGPoint(x: 13.9, y: 6.65))
        icon.addCurve(to: CGPoint(x: 13.54, y: 6.32), controlPoint1: CGPoint(x: 13.72, y: 6.62), controlPoint2: CGPoint(x: 13.59, y: 6.49))
        icon.addCurve(to: CGPoint(x: 13.1, y: 5.25), controlPoint1: CGPoint(x: 13.43, y: 5.95), controlPoint2: CGPoint(x: 13.28, y: 5.59))
        icon.addCurve(to: CGPoint(x: 13.13, y: 4.78), controlPoint1: CGPoint(x: 13.02, y: 5.1), controlPoint2: CGPoint(x: 13.03, y: 4.92))
        icon.addLine(to: CGPoint(x: 14.13, y: 3.35))
        icon.addCurve(to: CGPoint(x: 14.08, y: 2.76), controlPoint1: CGPoint(x: 14.26, y: 3.17), controlPoint2: CGPoint(x: 14.23, y: 2.92))
        icon.addLine(to: CGPoint(x: 13.22, y: 1.9))
        icon.addCurve(to: CGPoint(x: 12.62, y: 1.85), controlPoint1: CGPoint(x: 13.05, y: 1.74), controlPoint2: CGPoint(x: 12.8, y: 1.72))
        icon.addLine(to: CGPoint(x: 11.23, y: 2.86))
        icon.addCurve(to: CGPoint(x: 10.74, y: 2.89), controlPoint1: CGPoint(x: 11.08, y: 2.97), controlPoint2: CGPoint(x: 10.89, y: 2.97))
        icon.addCurve(to: CGPoint(x: 9.67, y: 2.43), controlPoint1: CGPoint(x: 10.4, y: 2.71), controlPoint2: CGPoint(x: 10.04, y: 2.55))
        icon.addCurve(to: CGPoint(x: 9.35, y: 2.08), controlPoint1: CGPoint(x: 9.51, y: 2.38), controlPoint2: CGPoint(x: 9.38, y: 2.25))
        icon.addLine(to: CGPoint(x: 9.05, y: 0.38))
        icon.addCurve(to: CGPoint(x: 8.6, y: 0), controlPoint1: CGPoint(x: 9.01, y: 0.16), controlPoint2: CGPoint(x: 8.82, y: 0))
        icon.addLine(to: CGPoint(x: 7.38, y: 0))
        icon.addCurve(to: CGPoint(x: 6.92, y: 0.39), controlPoint1: CGPoint(x: 7.15, y: 0), controlPoint2: CGPoint(x: 6.96, y: 0.16))
        icon.addLine(to: CGPoint(x: 6.65, y: 2.07))
        icon.addCurve(to: CGPoint(x: 6.32, y: 2.43), controlPoint1: CGPoint(x: 6.62, y: 2.25), controlPoint2: CGPoint(x: 6.49, y: 2.38))
        icon.addCurve(to: CGPoint(x: 5.26, y: 2.87), controlPoint1: CGPoint(x: 5.95, y: 2.54), controlPoint2: CGPoint(x: 5.59, y: 2.69))
        icon.addCurve(to: CGPoint(x: 4.78, y: 2.84), controlPoint1: CGPoint(x: 5.1, y: 2.95), controlPoint2: CGPoint(x: 4.92, y: 2.94))
        icon.addLine(to: CGPoint(x: 3.38, y: 1.85))
        icon.addCurve(to: CGPoint(x: 2.79, y: 1.9), controlPoint1: CGPoint(x: 3.2, y: 1.72), controlPoint2: CGPoint(x: 2.95, y: 1.74))
        icon.addLine(to: CGPoint(x: 1.92, y: 2.76))
        icon.addCurve(to: CGPoint(x: 1.87, y: 3.35), controlPoint1: CGPoint(x: 1.77, y: 2.92), controlPoint2: CGPoint(x: 1.74, y: 3.17))
        icon.addLine(to: CGPoint(x: 2.85, y: 4.75))
        icon.addCurve(to: CGPoint(x: 2.87, y: 5.22), controlPoint1: CGPoint(x: 2.94, y: 4.89), controlPoint2: CGPoint(x: 2.95, y: 5.07))
        icon.addCurve(to: CGPoint(x: 2.43, y: 6.32), controlPoint1: CGPoint(x: 2.69, y: 5.57), controlPoint2: CGPoint(x: 2.55, y: 5.94))
        icon.addCurve(to: CGPoint(x: 2.07, y: 6.65), controlPoint1: CGPoint(x: 2.38, y: 6.49), controlPoint2: CGPoint(x: 2.25, y: 6.62))
        icon.addLine(to: CGPoint(x: 0.39, y: 6.92))
        icon.addCurve(to: CGPoint(x: 0, y: 7.38), controlPoint1: CGPoint(x: 0.17, y: 6.96), controlPoint2: CGPoint(x: 0, y: 7.15))
        icon.addLine(to: CGPoint(x: 0, y: 8.6))
        icon.addCurve(to: CGPoint(x: 0.38, y: 9.05), controlPoint1: CGPoint(x: 0, y: 8.82), controlPoint2: CGPoint(x: 0.16, y: 9.01))
        icon.addLine(to: CGPoint(x: 2.07, y: 9.35))
        icon.addCurve(to: CGPoint(x: 2.43, y: 9.68), controlPoint1: CGPoint(x: 2.25, y: 9.38), controlPoint2: CGPoint(x: 2.38, y: 9.51))
        icon.addCurve(to: CGPoint(x: 2.86, y: 10.74), controlPoint1: CGPoint(x: 2.54, y: 10.05), controlPoint2: CGPoint(x: 2.68, y: 10.41))
        icon.addCurve(to: CGPoint(x: 2.84, y: 11.22), controlPoint1: CGPoint(x: 2.95, y: 10.9), controlPoint2: CGPoint(x: 2.94, y: 11.08))
        icon.addLine(to: CGPoint(x: 1.85, y: 12.62))
        icon.addCurve(to: CGPoint(x: 1.9, y: 13.21), controlPoint1: CGPoint(x: 1.72, y: 12.8), controlPoint2: CGPoint(x: 1.74, y: 13.05))
        icon.addLine(to: CGPoint(x: 2.76, y: 14.08))
        icon.addCurve(to: CGPoint(x: 3.35, y: 14.13), controlPoint1: CGPoint(x: 2.92, y: 14.23), controlPoint2: CGPoint(x: 3.17, y: 14.26))
        icon.addLine(to: CGPoint(x: 4.78, y: 13.15))
        icon.addCurve(to: CGPoint(x: 5.25, y: 13.13), controlPoint1: CGPoint(x: 4.92, y: 13.06), controlPoint2: CGPoint(x: 5.1, y: 13.05))
        icon.addCurve(to: CGPoint(x: 6.32, y: 13.57), controlPoint1: CGPoint(x: 5.59, y: 13.31), controlPoint2: CGPoint(x: 5.95, y: 13.46))
        icon.addCurve(to: CGPoint(x: 6.65, y: 13.93), controlPoint1: CGPoint(x: 6.49, y: 13.62), controlPoint2: CGPoint(x: 6.62, y: 13.75))
        icon.addLine(to: CGPoint(x: 6.92, y: 15.61))
        icon.addCurve(to: CGPoint(x: 7.38, y: 16), controlPoint1: CGPoint(x: 6.96, y: 15.83), controlPoint2: CGPoint(x: 7.15, y: 16))
        icon.addLine(to: CGPoint(x: 8.6, y: 16))
        icon.addCurve(to: CGPoint(x: 9.05, y: 15.62), controlPoint1: CGPoint(x: 8.82, y: 16), controlPoint2: CGPoint(x: 9.01, y: 15.84))
        icon.addLine(to: CGPoint(x: 9.35, y: 13.92))
        icon.addCurve(to: CGPoint(x: 9.67, y: 13.57), controlPoint1: CGPoint(x: 9.38, y: 13.75), controlPoint2: CGPoint(x: 9.51, y: 13.62))
        icon.addCurve(to: CGPoint(x: 10.74, y: 13.11), controlPoint1: CGPoint(x: 10.05, y: 13.45), controlPoint2: CGPoint(x: 10.4, y: 13.29))
        icon.addCurve(to: CGPoint(x: 11.23, y: 13.13), controlPoint1: CGPoint(x: 10.9, y: 13.02), controlPoint2: CGPoint(x: 11.08, y: 13.03))
        icon.addLine(to: CGPoint(x: 12.65, y: 14.13))
        icon.addCurve(to: CGPoint(x: 13.24, y: 14.07), controlPoint1: CGPoint(x: 12.83, y: 14.25), controlPoint2: CGPoint(x: 13.08, y: 14.23))
        icon.addLine(to: CGPoint(x: 14.1, y: 13.21))
        icon.addCurve(to: CGPoint(x: 14.15, y: 12.61), controlPoint1: CGPoint(x: 14.26, y: 13.05), controlPoint2: CGPoint(x: 14.28, y: 12.8))
        icon.addLine(to: CGPoint(x: 13.13, y: 11.22))
        icon.addCurve(to: CGPoint(x: 13.11, y: 10.74), controlPoint1: CGPoint(x: 13.03, y: 11.08), controlPoint2: CGPoint(x: 13.02, y: 10.9))
        icon.addCurve(to: CGPoint(x: 13.54, y: 9.68), controlPoint1: CGPoint(x: 13.28, y: 10.4), controlPoint2: CGPoint(x: 13.43, y: 10.05))
        icon.addCurve(to: CGPoint(x: 13.9, y: 9.35), controlPoint1: CGPoint(x: 13.59, y: 9.51), controlPoint2: CGPoint(x: 13.72, y: 9.38))
        icon.addLine(to: CGPoint(x: 15.62, y: 9.05))
        icon.addCurve(to: CGPoint(x: 16, y: 8.6), controlPoint1: CGPoint(x: 15.84, y: 9.01), controlPoint2: CGPoint(x: 16, y: 8.82))
        icon.addLine(to: CGPoint(x: 16, y: 7.38))
        icon.addCurve(to: CGPoint(x: 15.61, y: 6.92), controlPoint1: CGPoint(x: 16, y: 7.15), controlPoint2: CGPoint(x: 15.83, y: 6.96))
        context.saveGState()
        context.translateBy(x: 4, y: 4)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4, y: 4))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallVolume(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 16.63, y: 0))
        icon.addCurve(to: CGPoint(x: 16.11, y: 1.09), controlPoint1: CGPoint(x: 16.06, y: -0), controlPoint2: CGPoint(x: 15.75, y: 0.65))
        icon.addCurve(to: CGPoint(x: 18.67, y: 8.34), controlPoint1: CGPoint(x: 17.71, y: 3.08), controlPoint2: CGPoint(x: 18.67, y: 5.6))
        icon.addCurve(to: CGPoint(x: 16.35, y: 15.26), controlPoint1: CGPoint(x: 18.67, y: 10.94), controlPoint2: CGPoint(x: 17.8, y: 13.33))
        icon.addCurve(to: CGPoint(x: 17.42, y: 16.06), controlPoint1: CGPoint(x: 15.81, y: 15.98), controlPoint2: CGPoint(x: 16.88, y: 16.78))
        icon.addCurve(to: CGPoint(x: 20, y: 8.34), controlPoint1: CGPoint(x: 19.03, y: 13.91), controlPoint2: CGPoint(x: 20, y: 11.24))
        icon.addCurve(to: CGPoint(x: 17.15, y: 0.26), controlPoint1: CGPoint(x: 20, y: 5.28), controlPoint2: CGPoint(x: 18.92, y: 2.47))
        icon.addCurve(to: CGPoint(x: 16.63, y: 0), controlPoint1: CGPoint(x: 17.02, y: 0.1), controlPoint2: CGPoint(x: 16.83, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 13.36, y: 1.93))
        icon.addCurve(to: CGPoint(x: 12.82, y: 3.02), controlPoint1: CGPoint(x: 12.79, y: 1.92), controlPoint2: CGPoint(x: 12.47, y: 2.58))
        icon.addCurve(to: CGPoint(x: 14.67, y: 8.34), controlPoint1: CGPoint(x: 13.98, y: 4.49), controlPoint2: CGPoint(x: 14.67, y: 6.33))
        icon.addCurve(to: CGPoint(x: 13.06, y: 13.35), controlPoint1: CGPoint(x: 14.67, y: 10.21), controlPoint2: CGPoint(x: 14.07, y: 11.93))
        icon.addCurve(to: CGPoint(x: 13.2, y: 14.3), controlPoint1: CGPoint(x: 12.83, y: 13.65), controlPoint2: CGPoint(x: 12.89, y: 14.08))
        icon.addCurve(to: CGPoint(x: 14.15, y: 14.12), controlPoint1: CGPoint(x: 13.51, y: 14.52), controlPoint2: CGPoint(x: 13.94, y: 14.44))
        icon.addCurve(to: CGPoint(x: 16, y: 8.34), controlPoint1: CGPoint(x: 15.31, y: 12.49), controlPoint2: CGPoint(x: 16, y: 10.49))
        icon.addCurve(to: CGPoint(x: 13.88, y: 2.2), controlPoint1: CGPoint(x: 16, y: 6.03), controlPoint2: CGPoint(x: 15.2, y: 3.89))
        icon.addCurve(to: CGPoint(x: 13.36, y: 1.93), controlPoint1: CGPoint(x: 13.75, y: 2.03), controlPoint2: CGPoint(x: 13.56, y: 1.94))
        icon.close()
        icon.move(to: CGPoint(x: 7.33, y: 2.84))
        icon.addLine(to: CGPoint(x: 4.53, y: 5.5))
        icon.addLine(to: CGPoint(x: 2, y: 5.5))
        icon.addCurve(to: CGPoint(x: 0, y: 7.5), controlPoint1: CGPoint(x: 0.9, y: 5.5), controlPoint2: CGPoint(x: 0, y: 6.4))
        icon.addLine(to: CGPoint(x: 0, y: 8.84))
        icon.addCurve(to: CGPoint(x: 2, y: 10.84), controlPoint1: CGPoint(x: 0, y: 9.94), controlPoint2: CGPoint(x: 0.9, y: 10.84))
        icon.addLine(to: CGPoint(x: 4.53, y: 10.84))
        icon.addLine(to: CGPoint(x: 7.33, y: 13.5))
        icon.addLine(to: CGPoint(x: 7.33, y: 2.84))
        icon.close()
        icon.move(to: CGPoint(x: 9.82, y: 3.9))
        icon.addCurve(to: CGPoint(x: 9.33, y: 5.03), controlPoint1: CGPoint(x: 9.23, y: 3.88), controlPoint2: CGPoint(x: 8.92, y: 4.6))
        icon.addCurve(to: CGPoint(x: 10.67, y: 8.34), controlPoint1: CGPoint(x: 10.16, y: 5.89), controlPoint2: CGPoint(x: 10.67, y: 7.05))
        icon.addCurve(to: CGPoint(x: 9.59, y: 11.37), controlPoint1: CGPoint(x: 10.67, y: 9.49), controlPoint2: CGPoint(x: 10.26, y: 10.54))
        icon.addCurve(to: CGPoint(x: 9.67, y: 12.33), controlPoint1: CGPoint(x: 9.34, y: 11.65), controlPoint2: CGPoint(x: 9.37, y: 12.09))
        icon.addCurve(to: CGPoint(x: 10.62, y: 12.21), controlPoint1: CGPoint(x: 9.96, y: 12.57), controlPoint2: CGPoint(x: 10.39, y: 12.51))
        icon.addCurve(to: CGPoint(x: 12, y: 8.34), controlPoint1: CGPoint(x: 11.48, y: 11.15), controlPoint2: CGPoint(x: 12, y: 9.8))
        icon.addCurve(to: CGPoint(x: 10.3, y: 4.11), controlPoint1: CGPoint(x: 12, y: 6.7), controlPoint2: CGPoint(x: 11.35, y: 5.21))
        icon.addCurve(to: CGPoint(x: 9.82, y: 3.9), controlPoint1: CGPoint(x: 10.18, y: 3.98), controlPoint2: CGPoint(x: 10.01, y: 3.9))
        icon.close()
        context.saveGState()
        context.translateBy(x: 2, y: 4)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 2, y: 4))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallVolumeMute(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 8, y: 0))
        icon.addLine(to: CGPoint(x: 4.94, y: 2.9))
        icon.addLine(to: CGPoint(x: 2.18, y: 2.9))
        icon.addCurve(to: CGPoint(x: 0, y: 5.07), controlPoint1: CGPoint(x: 0.98, y: 2.9), controlPoint2: CGPoint(x: 0, y: 3.87))
        icon.addLine(to: CGPoint(x: 0, y: 6.53))
        icon.addCurve(to: CGPoint(x: 2.18, y: 8.7), controlPoint1: CGPoint(x: 0, y: 7.73), controlPoint2: CGPoint(x: 0.98, y: 8.7))
        icon.addLine(to: CGPoint(x: 4.94, y: 8.7))
        icon.addLine(to: CGPoint(x: 8, y: 11.6))
        icon.addLine(to: CGPoint(x: 8, y: 0))
        icon.close()
        context.saveGState()
        context.translateBy(x: 8, y: 6)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 8, y: 6))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallArrowUp(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Arrow
        let arrow = UIBezierPath()
        arrow.move(to: CGPoint(x: 1.79, y: 9.68))
        arrow.addCurve(to: CGPoint(x: 0.31, y: 9.68), controlPoint1: CGPoint(x: 1.38, y: 10.07), controlPoint2: CGPoint(x: 0.72, y: 10.07))
        arrow.addCurve(to: CGPoint(x: 0.29, y: 8.27), controlPoint1: CGPoint(x: -0.09, y: 9.3), controlPoint2: CGPoint(x: -0.1, y: 8.67))
        arrow.addCurve(to: CGPoint(x: 7.49, y: 1.42), controlPoint1: CGPoint(x: 0.29, y: 8.27), controlPoint2: CGPoint(x: 2.7, y: 5.98))
        arrow.addLine(to: CGPoint(x: 8.98, y: 0))
        arrow.addLine(to: CGPoint(x: 10.48, y: 1.42))
        arrow.addLine(to: CGPoint(x: 17.69, y: 8.28))
        arrow.addCurve(to: CGPoint(x: 17.71, y: 9.69), controlPoint1: CGPoint(x: 18.09, y: 8.66), controlPoint2: CGPoint(x: 18.1, y: 9.29))
        arrow.addCurve(to: CGPoint(x: 16.21, y: 9.71), controlPoint1: CGPoint(x: 17.28, y: 10.1), controlPoint2: CGPoint(x: 16.62, y: 10.1))
        arrow.addLine(to: CGPoint(x: 8.98, y: 2.84))
        arrow.addLine(to: CGPoint(x: 1.79, y: 9.68))
        arrow.close()
        context.saveGState()
        context.translateBy(x: 3, y: 7)
        context.restoreGState()
        
        /// Arrow (Outline Mask)
        context.saveGState()
        arrow.apply(CGAffineTransform(translationX: 3, y: 7))
        arrow.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Arrow (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallArrowDown(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Arrow
        let arrow = UIBezierPath()
        arrow.move(to: CGPoint(x: 1.79, y: 0.32))
        arrow.addLine(to: CGPoint(x: 8.98, y: 7.16))
        arrow.addLine(to: CGPoint(x: 16.21, y: 0.29))
        arrow.addCurve(to: CGPoint(x: 17.71, y: 0.31), controlPoint1: CGPoint(x: 16.62, y: -0.1), controlPoint2: CGPoint(x: 17.28, y: -0.1))
        arrow.addCurve(to: CGPoint(x: 17.69, y: 1.72), controlPoint1: CGPoint(x: 18.1, y: 0.71), controlPoint2: CGPoint(x: 18.09, y: 1.34))
        arrow.addLine(to: CGPoint(x: 10.48, y: 8.58))
        arrow.addLine(to: CGPoint(x: 8.98, y: 10))
        arrow.addLine(to: CGPoint(x: 7.49, y: 8.58))
        arrow.addCurve(to: CGPoint(x: 0.29, y: 1.73), controlPoint1: CGPoint(x: 2.7, y: 4.02), controlPoint2: CGPoint(x: 0.29, y: 1.73))
        arrow.addCurve(to: CGPoint(x: 0.31, y: 0.32), controlPoint1: CGPoint(x: -0.1, y: 1.33), controlPoint2: CGPoint(x: -0.09, y: 0.7))
        arrow.addCurve(to: CGPoint(x: 1.79, y: 0.32), controlPoint1: CGPoint(x: 0.72, y: -0.07), controlPoint2: CGPoint(x: 1.38, y: -0.07))
        arrow.close()
        context.saveGState()
        context.translateBy(x: 3, y: 7)
        context.restoreGState()
        
        /// Arrow (Outline Mask)
        context.saveGState()
        arrow.apply(CGAffineTransform(translationX: 3, y: 7))
        arrow.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Arrow (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallArrowLeft(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Arrow
        let arrow = UIBezierPath()
        arrow.move(to: CGPoint(x: 9.68, y: 1.79))
        arrow.addLine(to: CGPoint(x: 2.84, y: 8.98))
        arrow.addLine(to: CGPoint(x: 9.71, y: 16.21))
        arrow.addCurve(to: CGPoint(x: 9.69, y: 17.71), controlPoint1: CGPoint(x: 10.1, y: 16.62), controlPoint2: CGPoint(x: 10.1, y: 17.28))
        arrow.addCurve(to: CGPoint(x: 8.28, y: 17.69), controlPoint1: CGPoint(x: 9.29, y: 18.1), controlPoint2: CGPoint(x: 8.66, y: 18.09))
        arrow.addLine(to: CGPoint(x: 1.42, y: 10.48))
        arrow.addLine(to: CGPoint(x: 0, y: 8.98))
        arrow.addLine(to: CGPoint(x: 1.42, y: 7.49))
        arrow.addCurve(to: CGPoint(x: 8.27, y: 0.29), controlPoint1: CGPoint(x: 5.98, y: 2.7), controlPoint2: CGPoint(x: 8.27, y: 0.29))
        arrow.addCurve(to: CGPoint(x: 9.68, y: 0.31), controlPoint1: CGPoint(x: 8.67, y: -0.1), controlPoint2: CGPoint(x: 9.3, y: -0.09))
        arrow.addCurve(to: CGPoint(x: 9.68, y: 1.79), controlPoint1: CGPoint(x: 10.07, y: 0.72), controlPoint2: CGPoint(x: 10.07, y: 1.38))
        arrow.close()
        context.saveGState()
        context.translateBy(x: 7, y: 3)
        context.restoreGState()
        
        /// Arrow (Outline Mask)
        context.saveGState()
        arrow.apply(CGAffineTransform(translationX: 7, y: 3))
        arrow.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Arrow (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallArrowRight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Arrow
        let arrow = UIBezierPath()
        arrow.move(to: CGPoint(x: 0.32, y: 1.79))
        arrow.addCurve(to: CGPoint(x: 0.32, y: 0.31), controlPoint1: CGPoint(x: -0.07, y: 1.38), controlPoint2: CGPoint(x: -0.07, y: 0.72))
        arrow.addCurve(to: CGPoint(x: 1.73, y: 0.29), controlPoint1: CGPoint(x: 0.7, y: -0.09), controlPoint2: CGPoint(x: 1.33, y: -0.1))
        arrow.addCurve(to: CGPoint(x: 8.58, y: 7.49), controlPoint1: CGPoint(x: 1.73, y: 0.29), controlPoint2: CGPoint(x: 4.02, y: 2.7))
        arrow.addLine(to: CGPoint(x: 10, y: 8.98))
        arrow.addLine(to: CGPoint(x: 8.58, y: 10.48))
        arrow.addLine(to: CGPoint(x: 1.72, y: 17.69))
        arrow.addCurve(to: CGPoint(x: 0.31, y: 17.71), controlPoint1: CGPoint(x: 1.34, y: 18.09), controlPoint2: CGPoint(x: 0.71, y: 18.1))
        arrow.addCurve(to: CGPoint(x: 0.29, y: 16.21), controlPoint1: CGPoint(x: -0.1, y: 17.28), controlPoint2: CGPoint(x: -0.1, y: 16.62))
        arrow.addLine(to: CGPoint(x: 7.16, y: 8.98))
        arrow.addLine(to: CGPoint(x: 0.32, y: 1.79))
        arrow.close()
        context.saveGState()
        context.translateBy(x: 7, y: 3)
        context.restoreGState()
        
        /// Arrow (Outline Mask)
        context.saveGState()
        arrow.apply(CGAffineTransform(translationX: 7, y: 3))
        arrow.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Arrow (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallSticker(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 10, y: 18.75))
        icon.addCurve(to: CGPoint(x: 1.25, y: 10), controlPoint1: CGPoint(x: 5.17, y: 18.75), controlPoint2: CGPoint(x: 1.25, y: 14.83))
        icon.addCurve(to: CGPoint(x: 10, y: 1.25), controlPoint1: CGPoint(x: 1.25, y: 5.17), controlPoint2: CGPoint(x: 5.17, y: 1.25))
        icon.addCurve(to: CGPoint(x: 10.08, y: 1.25), controlPoint1: CGPoint(x: 10.03, y: 1.25), controlPoint2: CGPoint(x: 10.05, y: 1.25))
        icon.addCurve(to: CGPoint(x: 10, y: 2.5), controlPoint1: CGPoint(x: 10.03, y: 1.66), controlPoint2: CGPoint(x: 10, y: 2.08))
        icon.addCurve(to: CGPoint(x: 2.5, y: 10), controlPoint1: CGPoint(x: 5.86, y: 2.5), controlPoint2: CGPoint(x: 2.5, y: 5.86))
        icon.addCurve(to: CGPoint(x: 10, y: 17.5), controlPoint1: CGPoint(x: 2.5, y: 14.14), controlPoint2: CGPoint(x: 5.86, y: 17.5))
        icon.addCurve(to: CGPoint(x: 17.2, y: 12.09), controlPoint1: CGPoint(x: 13.42, y: 17.5), controlPoint2: CGPoint(x: 16.29, y: 15.21))
        icon.addCurve(to: CGPoint(x: 18.42, y: 12.37), controlPoint1: CGPoint(x: 17.6, y: 12.21), controlPoint2: CGPoint(x: 18, y: 12.3))
        icon.addCurve(to: CGPoint(x: 10, y: 18.75), controlPoint1: CGPoint(x: 17.38, y: 16.05), controlPoint2: CGPoint(x: 14.01, y: 18.75))
        icon.move(to: CGPoint(x: 11.24, y: 1.26))
        icon.addCurve(to: CGPoint(x: 18.85, y: 9.88), controlPoint1: CGPoint(x: 15.54, y: 1.79), controlPoint2: CGPoint(x: 18.85, y: 5.46))
        icon.addCurve(to: CGPoint(x: 18.74, y: 11.26), controlPoint1: CGPoint(x: 18.85, y: 10.35), controlPoint2: CGPoint(x: 18.81, y: 10.81))
        icon.addCurve(to: CGPoint(x: 18.65, y: 11.25), controlPoint1: CGPoint(x: 18.71, y: 11.26), controlPoint2: CGPoint(x: 18.68, y: 11.25))
        icon.addCurve(to: CGPoint(x: 17.43, y: 10.99), controlPoint1: CGPoint(x: 18.23, y: 11.19), controlPoint2: CGPoint(x: 17.83, y: 11.1))
        icon.addCurve(to: CGPoint(x: 11.13, y: 2.65), controlPoint1: CGPoint(x: 13.79, y: 9.95), controlPoint2: CGPoint(x: 11.13, y: 6.6))
        icon.addCurve(to: CGPoint(x: 11.13, y: 2.59), controlPoint1: CGPoint(x: 11.13, y: 2.63), controlPoint2: CGPoint(x: 11.13, y: 2.61))
        icon.addCurve(to: CGPoint(x: 11.23, y: 1.35), controlPoint1: CGPoint(x: 11.14, y: 2.17), controlPoint2: CGPoint(x: 11.17, y: 1.76))
        icon.addCurve(to: CGPoint(x: 11.24, y: 1.26), controlPoint1: CGPoint(x: 11.24, y: 1.32), controlPoint2: CGPoint(x: 11.24, y: 1.29))
        icon.move(to: CGPoint(x: 19.95, y: 8.99))
        icon.addCurve(to: CGPoint(x: 19.9, y: 8.66), controlPoint1: CGPoint(x: 19.94, y: 8.88), controlPoint2: CGPoint(x: 19.91, y: 8.77))
        icon.addCurve(to: CGPoint(x: 19.8, y: 8), controlPoint1: CGPoint(x: 19.87, y: 8.44), controlPoint2: CGPoint(x: 19.84, y: 8.22))
        icon.addCurve(to: CGPoint(x: 19.7, y: 7.63), controlPoint1: CGPoint(x: 19.77, y: 7.88), controlPoint2: CGPoint(x: 19.74, y: 7.75))
        icon.addCurve(to: CGPoint(x: 19.56, y: 7.05), controlPoint1: CGPoint(x: 19.66, y: 7.44), controlPoint2: CGPoint(x: 19.61, y: 7.24))
        icon.addCurve(to: CGPoint(x: 19.42, y: 6.66), controlPoint1: CGPoint(x: 19.52, y: 6.92), controlPoint2: CGPoint(x: 19.46, y: 6.79))
        icon.addCurve(to: CGPoint(x: 19.23, y: 6.14), controlPoint1: CGPoint(x: 19.35, y: 6.49), controlPoint2: CGPoint(x: 19.3, y: 6.31))
        icon.addCurve(to: CGPoint(x: 19.04, y: 5.75), controlPoint1: CGPoint(x: 19.17, y: 6.01), controlPoint2: CGPoint(x: 19.1, y: 5.88))
        icon.addCurve(to: CGPoint(x: 18.81, y: 5.27), controlPoint1: CGPoint(x: 18.97, y: 5.59), controlPoint2: CGPoint(x: 18.9, y: 5.43))
        icon.addCurve(to: CGPoint(x: 18.59, y: 4.9), controlPoint1: CGPoint(x: 18.74, y: 5.15), controlPoint2: CGPoint(x: 18.66, y: 5.02))
        icon.addCurve(to: CGPoint(x: 18.32, y: 4.46), controlPoint1: CGPoint(x: 18.5, y: 4.75), controlPoint2: CGPoint(x: 18.42, y: 4.6))
        icon.addCurve(to: CGPoint(x: 18.06, y: 4.1), controlPoint1: CGPoint(x: 18.24, y: 4.33), controlPoint2: CGPoint(x: 18.15, y: 4.22))
        icon.addCurve(to: CGPoint(x: 17.75, y: 3.69), controlPoint1: CGPoint(x: 17.96, y: 3.96), controlPoint2: CGPoint(x: 17.86, y: 3.82))
        icon.addCurve(to: CGPoint(x: 17.46, y: 3.36), controlPoint1: CGPoint(x: 17.66, y: 3.57), controlPoint2: CGPoint(x: 17.56, y: 3.47))
        icon.addCurve(to: CGPoint(x: 17.12, y: 2.98), controlPoint1: CGPoint(x: 17.35, y: 3.23), controlPoint2: CGPoint(x: 17.24, y: 3.1))
        icon.addCurve(to: CGPoint(x: 16.79, y: 2.68), controlPoint1: CGPoint(x: 17.02, y: 2.88), controlPoint2: CGPoint(x: 16.9, y: 2.78))
        icon.addCurve(to: CGPoint(x: 16.42, y: 2.34), controlPoint1: CGPoint(x: 16.67, y: 2.56), controlPoint2: CGPoint(x: 16.55, y: 2.45))
        icon.addCurve(to: CGPoint(x: 16.07, y: 2.06), controlPoint1: CGPoint(x: 16.31, y: 2.24), controlPoint2: CGPoint(x: 16.18, y: 2.15))
        icon.addCurve(to: CGPoint(x: 15.66, y: 1.76), controlPoint1: CGPoint(x: 15.93, y: 1.96), controlPoint2: CGPoint(x: 15.8, y: 1.86))
        icon.addCurve(to: CGPoint(x: 15.28, y: 1.52), controlPoint1: CGPoint(x: 15.54, y: 1.68), controlPoint2: CGPoint(x: 15.41, y: 1.6))
        icon.addCurve(to: CGPoint(x: 14.85, y: 1.26), controlPoint1: CGPoint(x: 15.14, y: 1.43), controlPoint2: CGPoint(x: 15, y: 1.34))
        icon.addCurve(to: CGPoint(x: 14.45, y: 1.05), controlPoint1: CGPoint(x: 14.72, y: 1.19), controlPoint2: CGPoint(x: 14.58, y: 1.12))
        icon.addCurve(to: CGPoint(x: 13.99, y: 0.83), controlPoint1: CGPoint(x: 14.3, y: 0.98), controlPoint2: CGPoint(x: 14.15, y: 0.9))
        icon.addCurve(to: CGPoint(x: 13.56, y: 0.67), controlPoint1: CGPoint(x: 13.85, y: 0.77), controlPoint2: CGPoint(x: 13.71, y: 0.72))
        icon.addCurve(to: CGPoint(x: 13.09, y: 0.49), controlPoint1: CGPoint(x: 13.41, y: 0.6), controlPoint2: CGPoint(x: 13.25, y: 0.54))
        icon.addCurve(to: CGPoint(x: 12.64, y: 0.36), controlPoint1: CGPoint(x: 12.94, y: 0.44), controlPoint2: CGPoint(x: 12.79, y: 0.4))
        icon.addCurve(to: CGPoint(x: 12.14, y: 0.24), controlPoint1: CGPoint(x: 12.47, y: 0.32), controlPoint2: CGPoint(x: 12.31, y: 0.27))
        icon.addCurve(to: CGPoint(x: 11.68, y: 0.15), controlPoint1: CGPoint(x: 11.99, y: 0.2), controlPoint2: CGPoint(x: 11.83, y: 0.18))
        icon.addCurve(to: CGPoint(x: 11.16, y: 0.07), controlPoint1: CGPoint(x: 11.51, y: 0.12), controlPoint2: CGPoint(x: 11.34, y: 0.09))
        icon.addCurve(to: CGPoint(x: 10.68, y: 0.03), controlPoint1: CGPoint(x: 11, y: 0.06), controlPoint2: CGPoint(x: 10.84, y: 0.05))
        icon.addCurve(to: CGPoint(x: 10.31, y: 0.01), controlPoint1: CGPoint(x: 10.56, y: 0.03), controlPoint2: CGPoint(x: 10.44, y: 0.01))
        icon.addCurve(to: CGPoint(x: 10.31, y: 0.02), controlPoint1: CGPoint(x: 10.31, y: 0.01), controlPoint2: CGPoint(x: 10.31, y: 0.01))
        icon.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 10.21, y: 0.01), controlPoint2: CGPoint(x: 10.11, y: 0))
        icon.addCurve(to: CGPoint(x: 0, y: 10), controlPoint1: CGPoint(x: 4.48, y: 0), controlPoint2: CGPoint(x: 0, y: 4.48))
        icon.addCurve(to: CGPoint(x: 10, y: 20), controlPoint1: CGPoint(x: 0, y: 15.52), controlPoint2: CGPoint(x: 4.48, y: 20))
        icon.addCurve(to: CGPoint(x: 19.67, y: 12.49), controlPoint1: CGPoint(x: 14.66, y: 20), controlPoint2: CGPoint(x: 18.56, y: 16.81))
        icon.addCurve(to: CGPoint(x: 19.69, y: 12.5), controlPoint1: CGPoint(x: 19.68, y: 12.49), controlPoint2: CGPoint(x: 19.68, y: 12.5))
        icon.addCurve(to: CGPoint(x: 19.72, y: 12.3), controlPoint1: CGPoint(x: 19.7, y: 12.43), controlPoint2: CGPoint(x: 19.71, y: 12.37))
        icon.addCurve(to: CGPoint(x: 19.87, y: 11.52), controlPoint1: CGPoint(x: 19.78, y: 12.05), controlPoint2: CGPoint(x: 19.83, y: 11.79))
        icon.addCurve(to: CGPoint(x: 19.93, y: 11.17), controlPoint1: CGPoint(x: 19.89, y: 11.4), controlPoint2: CGPoint(x: 19.91, y: 11.29))
        icon.addCurve(to: CGPoint(x: 20, y: 10), controlPoint1: CGPoint(x: 19.97, y: 10.78), controlPoint2: CGPoint(x: 20, y: 10.4))
        icon.addCurve(to: CGPoint(x: 19.95, y: 8.99), controlPoint1: CGPoint(x: 20, y: 9.66), controlPoint2: CGPoint(x: 19.98, y: 9.32))
        context.saveGState()
        context.translateBy(x: 2, y: 2)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 2, y: 2))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallApple(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 11.61, y: 3.21))
        icon.addCurve(to: CGPoint(x: 8.48, y: 4.61), controlPoint1: CGPoint(x: 10.86, y: 4.05), controlPoint2: CGPoint(x: 9.67, y: 4.71))
        icon.addCurve(to: CGPoint(x: 9.6, y: 1.53), controlPoint1: CGPoint(x: 8.33, y: 3.48), controlPoint2: CGPoint(x: 8.92, y: 2.27))
        icon.addCurve(to: CGPoint(x: 12.7, y: 0), controlPoint1: CGPoint(x: 10.34, y: 0.66), controlPoint2: CGPoint(x: 11.65, y: 0.05))
        icon.addCurve(to: CGPoint(x: 11.61, y: 3.21), controlPoint1: CGPoint(x: 12.83, y: 1.18), controlPoint2: CGPoint(x: 12.34, y: 2.34))
        icon.close()
        icon.move(to: CGPoint(x: 12.69, y: 4.84))
        icon.addCurve(to: CGPoint(x: 8.67, y: 5.77), controlPoint1: CGPoint(x: 10.96, y: 4.74), controlPoint2: CGPoint(x: 9.49, y: 5.77))
        icon.addCurve(to: CGPoint(x: 5.22, y: 4.91), controlPoint1: CGPoint(x: 7.84, y: 5.77), controlPoint2: CGPoint(x: 6.58, y: 4.88))
        icon.addCurve(to: CGPoint(x: 0.89, y: 7.42), controlPoint1: CGPoint(x: 3.44, y: 4.93), controlPoint2: CGPoint(x: 1.79, y: 5.89))
        icon.addCurve(to: CGPoint(x: 2.2, y: 17.47), controlPoint1: CGPoint(x: -0.98, y: 10.47), controlPoint2: CGPoint(x: 0.4, y: 14.99))
        icon.addCurve(to: CGPoint(x: 5.53, y: 20), controlPoint1: CGPoint(x: 3.08, y: 18.7), controlPoint2: CGPoint(x: 4.14, y: 20.05))
        icon.addCurve(to: CGPoint(x: 8.95, y: 19.18), controlPoint1: CGPoint(x: 6.84, y: 19.95), controlPoint2: CGPoint(x: 7.36, y: 19.18))
        icon.addCurve(to: CGPoint(x: 12.4, y: 19.98), controlPoint1: CGPoint(x: 10.55, y: 19.18), controlPoint2: CGPoint(x: 11.01, y: 20))
        icon.addCurve(to: CGPoint(x: 15.63, y: 17.52), controlPoint1: CGPoint(x: 13.84, y: 19.95), controlPoint2: CGPoint(x: 14.75, y: 18.75))
        icon.addCurve(to: CGPoint(x: 17.07, y: 14.69), controlPoint1: CGPoint(x: 16.64, y: 16.12), controlPoint2: CGPoint(x: 17.05, y: 14.76))
        icon.addCurve(to: CGPoint(x: 14.27, y: 10.63), controlPoint1: CGPoint(x: 17.05, y: 14.67), controlPoint2: CGPoint(x: 14.29, y: 13.66))
        icon.addCurve(to: CGPoint(x: 16.54, y: 6.82), controlPoint1: CGPoint(x: 14.24, y: 8.1), controlPoint2: CGPoint(x: 16.44, y: 6.9))
        icon.addCurve(to: CGPoint(x: 12.69, y: 4.84), controlPoint1: CGPoint(x: 15.3, y: 5.07), controlPoint2: CGPoint(x: 13.36, y: 4.88))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3.5, y: 1)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3.5, y: 1))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallCalendar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 1.98, y: 1.06))
        icon.addLine(to: CGPoint(x: 15.02, y: 1.06))
        icon.addCurve(to: CGPoint(x: 15.91, y: 1.95), controlPoint1: CGPoint(x: 15.51, y: 1.06), controlPoint2: CGPoint(x: 15.91, y: 1.46))
        icon.addLine(to: CGPoint(x: 15.91, y: 4.96))
        icon.addLine(to: CGPoint(x: 1.09, y: 4.96))
        icon.addLine(to: CGPoint(x: 1.09, y: 1.95))
        icon.addCurve(to: CGPoint(x: 1.98, y: 1.06), controlPoint1: CGPoint(x: 1.09, y: 1.46), controlPoint2: CGPoint(x: 1.49, y: 1.06))
        icon.move(to: CGPoint(x: 15.02, y: 0))
        icon.addCurve(to: CGPoint(x: 17, y: 1.95), controlPoint1: CGPoint(x: 16.11, y: 0), controlPoint2: CGPoint(x: 17, y: 0.87))
        icon.addLine(to: CGPoint(x: 17, y: 14.35))
        icon.addCurve(to: CGPoint(x: 15.02, y: 16.3), controlPoint1: CGPoint(x: 17, y: 15.43), controlPoint2: CGPoint(x: 16.11, y: 16.3))
        icon.addLine(to: CGPoint(x: 1.98, y: 16.3))
        icon.addCurve(to: CGPoint(x: 0, y: 14.35), controlPoint1: CGPoint(x: 0.89, y: 16.3), controlPoint2: CGPoint(x: 0, y: 15.43))
        icon.addLine(to: CGPoint(x: 0, y: 1.95))
        icon.addCurve(to: CGPoint(x: 1.98, y: 0), controlPoint1: CGPoint(x: 0, y: 0.87), controlPoint2: CGPoint(x: 0.89, y: 0))
        icon.addLine(to: CGPoint(x: 15.02, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 5.57, y: 8.5))
        icon.addCurve(to: CGPoint(x: 6.28, y: 7.8), controlPoint1: CGPoint(x: 5.97, y: 8.5), controlPoint2: CGPoint(x: 6.28, y: 8.19))
        icon.addCurve(to: CGPoint(x: 5.57, y: 7.09), controlPoint1: CGPoint(x: 6.28, y: 7.4), controlPoint2: CGPoint(x: 5.97, y: 7.09))
        icon.addCurve(to: CGPoint(x: 4.87, y: 7.8), controlPoint1: CGPoint(x: 5.18, y: 7.09), controlPoint2: CGPoint(x: 4.87, y: 7.4))
        icon.addCurve(to: CGPoint(x: 5.57, y: 8.5), controlPoint1: CGPoint(x: 4.87, y: 8.19), controlPoint2: CGPoint(x: 5.18, y: 8.5))
        icon.close()
        icon.move(to: CGPoint(x: 5.57, y: 10.98))
        icon.addCurve(to: CGPoint(x: 6.28, y: 10.28), controlPoint1: CGPoint(x: 5.97, y: 10.98), controlPoint2: CGPoint(x: 6.28, y: 10.67))
        icon.addCurve(to: CGPoint(x: 5.57, y: 9.57), controlPoint1: CGPoint(x: 6.28, y: 9.88), controlPoint2: CGPoint(x: 5.97, y: 9.57))
        icon.addCurve(to: CGPoint(x: 4.87, y: 10.28), controlPoint1: CGPoint(x: 5.18, y: 9.57), controlPoint2: CGPoint(x: 4.87, y: 9.88))
        icon.addCurve(to: CGPoint(x: 5.57, y: 10.98), controlPoint1: CGPoint(x: 4.87, y: 10.67), controlPoint2: CGPoint(x: 5.18, y: 10.98))
        icon.close()
        icon.move(to: CGPoint(x: 5.57, y: 13.47))
        icon.addCurve(to: CGPoint(x: 6.28, y: 12.76), controlPoint1: CGPoint(x: 5.97, y: 13.47), controlPoint2: CGPoint(x: 6.28, y: 13.15))
        icon.addCurve(to: CGPoint(x: 5.57, y: 12.05), controlPoint1: CGPoint(x: 6.28, y: 12.37), controlPoint2: CGPoint(x: 5.97, y: 12.05))
        icon.addCurve(to: CGPoint(x: 4.87, y: 12.76), controlPoint1: CGPoint(x: 5.18, y: 12.05), controlPoint2: CGPoint(x: 4.87, y: 12.37))
        icon.addCurve(to: CGPoint(x: 5.57, y: 13.47), controlPoint1: CGPoint(x: 4.87, y: 13.15), controlPoint2: CGPoint(x: 5.18, y: 13.47))
        icon.close()
        icon.move(to: CGPoint(x: 2.66, y: 10.98))
        icon.addCurve(to: CGPoint(x: 3.36, y: 10.28), controlPoint1: CGPoint(x: 3.05, y: 10.98), controlPoint2: CGPoint(x: 3.36, y: 10.67))
        icon.addCurve(to: CGPoint(x: 2.66, y: 9.57), controlPoint1: CGPoint(x: 3.36, y: 9.88), controlPoint2: CGPoint(x: 3.05, y: 9.57))
        icon.addCurve(to: CGPoint(x: 1.95, y: 10.28), controlPoint1: CGPoint(x: 2.27, y: 9.57), controlPoint2: CGPoint(x: 1.95, y: 9.88))
        icon.addCurve(to: CGPoint(x: 2.66, y: 10.98), controlPoint1: CGPoint(x: 1.95, y: 10.67), controlPoint2: CGPoint(x: 2.27, y: 10.98))
        icon.close()
        icon.move(to: CGPoint(x: 2.66, y: 8.5))
        icon.addCurve(to: CGPoint(x: 3.36, y: 7.8), controlPoint1: CGPoint(x: 3.05, y: 8.5), controlPoint2: CGPoint(x: 3.36, y: 8.19))
        icon.addCurve(to: CGPoint(x: 2.66, y: 7.09), controlPoint1: CGPoint(x: 3.36, y: 7.4), controlPoint2: CGPoint(x: 3.05, y: 7.09))
        icon.addCurve(to: CGPoint(x: 1.95, y: 7.8), controlPoint1: CGPoint(x: 2.27, y: 7.09), controlPoint2: CGPoint(x: 1.95, y: 7.4))
        icon.addCurve(to: CGPoint(x: 2.66, y: 8.5), controlPoint1: CGPoint(x: 1.95, y: 8.19), controlPoint2: CGPoint(x: 2.27, y: 8.5))
        icon.close()
        icon.move(to: CGPoint(x: 2.66, y: 13.47))
        icon.addCurve(to: CGPoint(x: 3.36, y: 12.76), controlPoint1: CGPoint(x: 3.05, y: 13.47), controlPoint2: CGPoint(x: 3.36, y: 13.15))
        icon.addCurve(to: CGPoint(x: 2.66, y: 12.05), controlPoint1: CGPoint(x: 3.36, y: 12.37), controlPoint2: CGPoint(x: 3.05, y: 12.05))
        icon.addCurve(to: CGPoint(x: 1.95, y: 12.76), controlPoint1: CGPoint(x: 2.27, y: 12.05), controlPoint2: CGPoint(x: 1.95, y: 12.37))
        icon.addCurve(to: CGPoint(x: 2.66, y: 13.47), controlPoint1: CGPoint(x: 1.95, y: 13.15), controlPoint2: CGPoint(x: 2.27, y: 13.47))
        icon.close()
        icon.move(to: CGPoint(x: 8.5, y: 8.5))
        icon.addCurve(to: CGPoint(x: 9.21, y: 7.8), controlPoint1: CGPoint(x: 8.89, y: 8.5), controlPoint2: CGPoint(x: 9.21, y: 8.19))
        icon.addCurve(to: CGPoint(x: 8.5, y: 7.09), controlPoint1: CGPoint(x: 9.21, y: 7.4), controlPoint2: CGPoint(x: 8.89, y: 7.09))
        icon.addCurve(to: CGPoint(x: 7.79, y: 7.8), controlPoint1: CGPoint(x: 8.11, y: 7.09), controlPoint2: CGPoint(x: 7.79, y: 7.4))
        icon.addCurve(to: CGPoint(x: 8.5, y: 8.5), controlPoint1: CGPoint(x: 7.79, y: 8.19), controlPoint2: CGPoint(x: 8.11, y: 8.5))
        icon.close()
        icon.move(to: CGPoint(x: 8.5, y: 10.98))
        icon.addCurve(to: CGPoint(x: 9.21, y: 10.28), controlPoint1: CGPoint(x: 8.89, y: 10.98), controlPoint2: CGPoint(x: 9.21, y: 10.67))
        icon.addCurve(to: CGPoint(x: 8.5, y: 9.57), controlPoint1: CGPoint(x: 9.21, y: 9.88), controlPoint2: CGPoint(x: 8.89, y: 9.57))
        icon.addCurve(to: CGPoint(x: 7.79, y: 10.28), controlPoint1: CGPoint(x: 8.11, y: 9.57), controlPoint2: CGPoint(x: 7.79, y: 9.88))
        icon.addCurve(to: CGPoint(x: 8.5, y: 10.98), controlPoint1: CGPoint(x: 7.79, y: 10.67), controlPoint2: CGPoint(x: 8.11, y: 10.98))
        icon.close()
        icon.move(to: CGPoint(x: 8.5, y: 13.47))
        icon.addCurve(to: CGPoint(x: 9.21, y: 12.76), controlPoint1: CGPoint(x: 8.89, y: 13.47), controlPoint2: CGPoint(x: 9.21, y: 13.15))
        icon.addCurve(to: CGPoint(x: 8.5, y: 12.05), controlPoint1: CGPoint(x: 9.21, y: 12.37), controlPoint2: CGPoint(x: 8.89, y: 12.05))
        icon.addCurve(to: CGPoint(x: 7.79, y: 12.76), controlPoint1: CGPoint(x: 8.11, y: 12.05), controlPoint2: CGPoint(x: 7.79, y: 12.37))
        icon.addCurve(to: CGPoint(x: 8.5, y: 13.47), controlPoint1: CGPoint(x: 7.79, y: 13.15), controlPoint2: CGPoint(x: 8.11, y: 13.47))
        icon.close()
        icon.move(to: CGPoint(x: 11.43, y: 8.5))
        icon.addCurve(to: CGPoint(x: 12.13, y: 7.8), controlPoint1: CGPoint(x: 11.82, y: 8.5), controlPoint2: CGPoint(x: 12.13, y: 8.19))
        icon.addCurve(to: CGPoint(x: 11.43, y: 7.09), controlPoint1: CGPoint(x: 12.13, y: 7.4), controlPoint2: CGPoint(x: 11.82, y: 7.09))
        icon.addCurve(to: CGPoint(x: 10.72, y: 7.8), controlPoint1: CGPoint(x: 11.03, y: 7.09), controlPoint2: CGPoint(x: 10.72, y: 7.4))
        icon.addCurve(to: CGPoint(x: 11.43, y: 8.5), controlPoint1: CGPoint(x: 10.72, y: 8.19), controlPoint2: CGPoint(x: 11.03, y: 8.5))
        icon.close()
        icon.move(to: CGPoint(x: 11.43, y: 13.47))
        icon.addCurve(to: CGPoint(x: 12.13, y: 12.76), controlPoint1: CGPoint(x: 11.82, y: 13.47), controlPoint2: CGPoint(x: 12.13, y: 13.15))
        icon.addCurve(to: CGPoint(x: 11.43, y: 12.05), controlPoint1: CGPoint(x: 12.13, y: 12.37), controlPoint2: CGPoint(x: 11.82, y: 12.05))
        icon.addCurve(to: CGPoint(x: 10.72, y: 12.76), controlPoint1: CGPoint(x: 11.03, y: 12.05), controlPoint2: CGPoint(x: 10.72, y: 12.37))
        icon.addCurve(to: CGPoint(x: 11.43, y: 13.47), controlPoint1: CGPoint(x: 10.72, y: 13.15), controlPoint2: CGPoint(x: 11.03, y: 13.47))
        icon.close()
        icon.move(to: CGPoint(x: 14.34, y: 8.5))
        icon.addCurve(to: CGPoint(x: 15.05, y: 7.8), controlPoint1: CGPoint(x: 14.73, y: 8.5), controlPoint2: CGPoint(x: 15.05, y: 8.19))
        icon.addCurve(to: CGPoint(x: 14.34, y: 7.09), controlPoint1: CGPoint(x: 15.05, y: 7.4), controlPoint2: CGPoint(x: 14.73, y: 7.09))
        icon.addCurve(to: CGPoint(x: 13.64, y: 7.8), controlPoint1: CGPoint(x: 13.95, y: 7.09), controlPoint2: CGPoint(x: 13.64, y: 7.4))
        icon.addCurve(to: CGPoint(x: 14.34, y: 8.5), controlPoint1: CGPoint(x: 13.64, y: 8.19), controlPoint2: CGPoint(x: 13.95, y: 8.5))
        icon.close()
        icon.move(to: CGPoint(x: 14.34, y: 10.98))
        icon.addCurve(to: CGPoint(x: 15.05, y: 10.28), controlPoint1: CGPoint(x: 14.73, y: 10.98), controlPoint2: CGPoint(x: 15.05, y: 10.67))
        icon.addCurve(to: CGPoint(x: 14.34, y: 9.57), controlPoint1: CGPoint(x: 15.05, y: 9.88), controlPoint2: CGPoint(x: 14.73, y: 9.57))
        icon.addCurve(to: CGPoint(x: 13.64, y: 10.28), controlPoint1: CGPoint(x: 13.95, y: 9.57), controlPoint2: CGPoint(x: 13.64, y: 9.88))
        icon.addCurve(to: CGPoint(x: 14.34, y: 10.98), controlPoint1: CGPoint(x: 13.64, y: 10.67), controlPoint2: CGPoint(x: 13.95, y: 10.98))
        icon.close()
        icon.move(to: CGPoint(x: 11.42, y: 11.27))
        icon.addCurve(to: CGPoint(x: 12.41, y: 10.28), controlPoint1: CGPoint(x: 11.97, y: 11.27), controlPoint2: CGPoint(x: 12.41, y: 10.82))
        icon.addCurve(to: CGPoint(x: 11.42, y: 9.28), controlPoint1: CGPoint(x: 12.41, y: 9.73), controlPoint2: CGPoint(x: 11.97, y: 9.28))
        icon.addCurve(to: CGPoint(x: 10.43, y: 10.28), controlPoint1: CGPoint(x: 10.87, y: 9.28), controlPoint2: CGPoint(x: 10.43, y: 9.73))
        icon.addCurve(to: CGPoint(x: 11.42, y: 11.27), controlPoint1: CGPoint(x: 10.43, y: 10.82), controlPoint2: CGPoint(x: 10.87, y: 11.27))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3.5, y: 4)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3.5, y: 4))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallEdit(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 6.43, y: 11.64))
        icon.addLine(to: CGPoint(x: 14.46, y: 3.6))
        icon.addCurve(to: CGPoint(x: 14.2, y: 2.59), controlPoint1: CGPoint(x: 14.42, y: 3.1), controlPoint2: CGPoint(x: 14.33, y: 2.84))
        icon.addCurve(to: CGPoint(x: 13.41, y: 1.8), controlPoint1: CGPoint(x: 14.01, y: 2.25), controlPoint2: CGPoint(x: 13.75, y: 1.98))
        icon.addCurve(to: CGPoint(x: 12.4, y: 1.54), controlPoint1: CGPoint(x: 13.16, y: 1.67), controlPoint2: CGPoint(x: 12.9, y: 1.58))
        icon.addLine(to: CGPoint(x: 4.36, y: 9.57))
        icon.addCurve(to: CGPoint(x: 5.56, y: 10.44), controlPoint1: CGPoint(x: 4.74, y: 9.75), controlPoint2: CGPoint(x: 5.15, y: 10.04))
        icon.addCurve(to: CGPoint(x: 6.43, y: 11.64), controlPoint1: CGPoint(x: 5.96, y: 10.84), controlPoint2: CGPoint(x: 6.24, y: 11.25))
        icon.close()
        icon.move(to: CGPoint(x: 5.62, y: 12.45))
        icon.addCurve(to: CGPoint(x: 5.61, y: 12.4), controlPoint1: CGPoint(x: 5.62, y: 12.43), controlPoint2: CGPoint(x: 5.61, y: 12.42))
        icon.addCurve(to: CGPoint(x: 4.82, y: 11.17), controlPoint1: CGPoint(x: 5.47, y: 11.99), controlPoint2: CGPoint(x: 5.22, y: 11.57))
        icon.addCurve(to: CGPoint(x: 3.6, y: 10.39), controlPoint1: CGPoint(x: 4.43, y: 10.78), controlPoint2: CGPoint(x: 4.01, y: 10.53))
        icon.addCurve(to: CGPoint(x: 3.55, y: 10.37), controlPoint1: CGPoint(x: 3.58, y: 10.39), controlPoint2: CGPoint(x: 3.56, y: 10.38))
        icon.addLine(to: CGPoint(x: 3.33, y: 10.59))
        icon.addCurve(to: CGPoint(x: 3.05, y: 11.12), controlPoint1: CGPoint(x: 3.21, y: 10.71), controlPoint2: CGPoint(x: 3.09, y: 10.95))
        icon.addLine(to: CGPoint(x: 2.6, y: 13.4))
        icon.addLine(to: CGPoint(x: 4.88, y: 12.95))
        icon.addCurve(to: CGPoint(x: 5.41, y: 12.67), controlPoint1: CGPoint(x: 5.05, y: 12.91), controlPoint2: CGPoint(x: 5.29, y: 12.79))
        icon.addLine(to: CGPoint(x: 5.62, y: 12.45))
        icon.close()
        icon.move(to: CGPoint(x: 12.4, y: 1.54))
        icon.addLine(to: CGPoint(x: 13.52, y: 0.42))
        icon.addCurve(to: CGPoint(x: 15.57, y: 0.43), controlPoint1: CGPoint(x: 14.08, y: -0.14), controlPoint2: CGPoint(x: 15, y: -0.14))
        icon.addCurve(to: CGPoint(x: 15.58, y: 2.48), controlPoint1: CGPoint(x: 16.14, y: 1), controlPoint2: CGPoint(x: 16.14, y: 1.91))
        icon.addLine(to: CGPoint(x: 14.46, y: 3.6))
        icon.addCurve(to: CGPoint(x: 14.47, y: 4.19), controlPoint1: CGPoint(x: 14.47, y: 3.77), controlPoint2: CGPoint(x: 14.47, y: 3.96))
        icon.addLine(to: CGPoint(x: 14.47, y: 13.34))
        icon.addCurve(to: CGPoint(x: 14.2, y: 14.94), controlPoint1: CGPoint(x: 14.47, y: 14.26), controlPoint2: CGPoint(x: 14.38, y: 14.6))
        icon.addCurve(to: CGPoint(x: 13.41, y: 15.72), controlPoint1: CGPoint(x: 14.01, y: 15.27), controlPoint2: CGPoint(x: 13.75, y: 15.54))
        icon.addCurve(to: CGPoint(x: 11.81, y: 16), controlPoint1: CGPoint(x: 13.07, y: 15.9), controlPoint2: CGPoint(x: 12.74, y: 16))
        icon.addLine(to: CGPoint(x: 2.66, y: 16))
        icon.addCurve(to: CGPoint(x: 1.06, y: 15.72), controlPoint1: CGPoint(x: 1.74, y: 16), controlPoint2: CGPoint(x: 1.4, y: 15.9))
        icon.addCurve(to: CGPoint(x: 0.28, y: 14.94), controlPoint1: CGPoint(x: 0.72, y: 15.54), controlPoint2: CGPoint(x: 0.46, y: 15.27))
        icon.addCurve(to: CGPoint(x: 0, y: 13.34), controlPoint1: CGPoint(x: 0.1, y: 14.6), controlPoint2: CGPoint(x: 0, y: 14.26))
        icon.addLine(to: CGPoint(x: 0, y: 4.19))
        icon.addCurve(to: CGPoint(x: 0.28, y: 2.59), controlPoint1: CGPoint(x: 0, y: 3.26), controlPoint2: CGPoint(x: 0.1, y: 2.93))
        icon.addCurve(to: CGPoint(x: 1.06, y: 1.8), controlPoint1: CGPoint(x: 0.46, y: 2.25), controlPoint2: CGPoint(x: 0.72, y: 1.98))
        icon.addCurve(to: CGPoint(x: 2.66, y: 1.52), controlPoint1: CGPoint(x: 1.4, y: 1.62), controlPoint2: CGPoint(x: 1.74, y: 1.52))
        icon.addLine(to: CGPoint(x: 11.81, y: 1.52))
        icon.addCurve(to: CGPoint(x: 12.4, y: 1.54), controlPoint1: CGPoint(x: 12.04, y: 1.52), controlPoint2: CGPoint(x: 12.23, y: 1.53))
        icon.close()
        context.saveGState()
        context.translateBy(x: 4.5, y: 4)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4.5, y: 4))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallEye(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 9, y: 0))
        icon.addCurve(to: CGPoint(x: 0.13, y: 5.63), controlPoint1: CGPoint(x: 3.65, y: 0), controlPoint2: CGPoint(x: 0.19, y: 5.53))
        icon.addCurve(to: CGPoint(x: 0, y: 6), controlPoint1: CGPoint(x: 0.05, y: 5.73), controlPoint2: CGPoint(x: 0, y: 5.86))
        icon.addCurve(to: CGPoint(x: 0.1, y: 6.33), controlPoint1: CGPoint(x: 0, y: 6.12), controlPoint2: CGPoint(x: 0.03, y: 6.23))
        icon.addCurve(to: CGPoint(x: 0.1, y: 6.33), controlPoint1: CGPoint(x: 0.1, y: 6.33), controlPoint2: CGPoint(x: 0.1, y: 6.33))
        icon.addCurve(to: CGPoint(x: 9, y: 12), controlPoint1: CGPoint(x: 0.11, y: 6.35), controlPoint2: CGPoint(x: 3.01, y: 12))
        icon.addCurve(to: CGPoint(x: 17.9, y: 6.34), controlPoint1: CGPoint(x: 14.96, y: 12), controlPoint2: CGPoint(x: 17.86, y: 6.41))
        icon.addCurve(to: CGPoint(x: 17.9, y: 6.33), controlPoint1: CGPoint(x: 17.9, y: 6.33), controlPoint2: CGPoint(x: 17.9, y: 6.33))
        icon.addCurve(to: CGPoint(x: 18, y: 6), controlPoint1: CGPoint(x: 17.97, y: 6.23), controlPoint2: CGPoint(x: 18, y: 6.12))
        icon.addCurve(to: CGPoint(x: 17.87, y: 5.63), controlPoint1: CGPoint(x: 18, y: 5.87), controlPoint2: CGPoint(x: 17.95, y: 5.73))
        icon.addCurve(to: CGPoint(x: 17.87, y: 5.63), controlPoint1: CGPoint(x: 17.87, y: 5.63), controlPoint2: CGPoint(x: 17.87, y: 5.63))
        icon.addCurve(to: CGPoint(x: 9, y: 0), controlPoint1: CGPoint(x: 17.81, y: 5.53), controlPoint2: CGPoint(x: 14.35, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 9, y: 1.8))
        icon.addCurve(to: CGPoint(x: 13.2, y: 6), controlPoint1: CGPoint(x: 11.32, y: 1.8), controlPoint2: CGPoint(x: 13.2, y: 3.68))
        icon.addCurve(to: CGPoint(x: 9, y: 10.2), controlPoint1: CGPoint(x: 13.2, y: 8.32), controlPoint2: CGPoint(x: 11.32, y: 10.2))
        icon.addCurve(to: CGPoint(x: 4.8, y: 6), controlPoint1: CGPoint(x: 6.68, y: 10.2), controlPoint2: CGPoint(x: 4.8, y: 8.32))
        icon.addCurve(to: CGPoint(x: 9, y: 1.8), controlPoint1: CGPoint(x: 4.8, y: 3.68), controlPoint2: CGPoint(x: 6.68, y: 1.8))
        icon.close()
        icon.move(to: CGPoint(x: 9, y: 4.2))
        icon.addCurve(to: CGPoint(x: 7.2, y: 6), controlPoint1: CGPoint(x: 8.01, y: 4.2), controlPoint2: CGPoint(x: 7.2, y: 5.01))
        icon.addCurve(to: CGPoint(x: 9, y: 7.8), controlPoint1: CGPoint(x: 7.2, y: 6.99), controlPoint2: CGPoint(x: 8.01, y: 7.8))
        icon.addCurve(to: CGPoint(x: 10.8, y: 6), controlPoint1: CGPoint(x: 9.99, y: 7.8), controlPoint2: CGPoint(x: 10.8, y: 6.99))
        icon.addCurve(to: CGPoint(x: 9, y: 4.2), controlPoint1: CGPoint(x: 10.8, y: 5.01), controlPoint2: CGPoint(x: 9.99, y: 4.2))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3, y: 6)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3, y: 6))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallChair(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 2.67, y: 0))
        icon.addCurve(to: CGPoint(x: 2.01, y: 0.68), controlPoint1: CGPoint(x: 2.3, y: 0), controlPoint2: CGPoint(x: 2.01, y: 0.31))
        icon.addLine(to: CGPoint(x: 2.01, y: 8.16))
        icon.addCurve(to: CGPoint(x: 1.21, y: 8.02), controlPoint1: CGPoint(x: 1.55, y: 8.08), controlPoint2: CGPoint(x: 1.21, y: 8.02))
        icon.addCurve(to: CGPoint(x: 1.02, y: 8), controlPoint1: CGPoint(x: 1.15, y: 8), controlPoint2: CGPoint(x: 1.08, y: 8))
        icon.addCurve(to: CGPoint(x: 0.81, y: 9.98), controlPoint1: CGPoint(x: -0.21, y: 7.98), controlPoint2: CGPoint(x: -0.39, y: 9.75))
        icon.addCurve(to: CGPoint(x: 2.09, y: 10.19), controlPoint1: CGPoint(x: 0.81, y: 9.98), controlPoint2: CGPoint(x: 1.36, y: 10.08))
        icon.addCurve(to: CGPoint(x: 4.11, y: 12.61), controlPoint1: CGPoint(x: 2.31, y: 11.27), controlPoint2: CGPoint(x: 3.06, y: 12.19))
        icon.addLine(to: CGPoint(x: 5.55, y: 13.19))
        icon.addLine(to: CGPoint(x: 1.76, y: 14.7))
        icon.addCurve(to: CGPoint(x: 1.36, y: 15.58), controlPoint1: CGPoint(x: 1.4, y: 14.83), controlPoint2: CGPoint(x: 1.22, y: 15.23))
        icon.addCurve(to: CGPoint(x: 2.26, y: 15.94), controlPoint1: CGPoint(x: 1.5, y: 15.94), controlPoint2: CGPoint(x: 1.91, y: 16.1))
        icon.addLine(to: CGPoint(x: 7.34, y: 13.91))
        icon.addLine(to: CGPoint(x: 12.43, y: 15.94))
        icon.addCurve(to: CGPoint(x: 13.32, y: 15.58), controlPoint1: CGPoint(x: 12.78, y: 16.1), controlPoint2: CGPoint(x: 13.18, y: 15.93))
        icon.addCurve(to: CGPoint(x: 12.92, y: 14.7), controlPoint1: CGPoint(x: 13.46, y: 15.23), controlPoint2: CGPoint(x: 13.28, y: 14.83))
        icon.addLine(to: CGPoint(x: 9.14, y: 13.19))
        icon.addLine(to: CGPoint(x: 10.58, y: 12.61))
        icon.addCurve(to: CGPoint(x: 12.6, y: 10.19), controlPoint1: CGPoint(x: 11.63, y: 12.19), controlPoint2: CGPoint(x: 12.38, y: 11.27))
        icon.addCurve(to: CGPoint(x: 13.88, y: 9.98), controlPoint1: CGPoint(x: 13.33, y: 10.08), controlPoint2: CGPoint(x: 13.88, y: 9.98))
        icon.addCurve(to: CGPoint(x: 14.68, y: 8.79), controlPoint1: CGPoint(x: 14.43, y: 9.88), controlPoint2: CGPoint(x: 14.79, y: 9.34))
        icon.addCurve(to: CGPoint(x: 13.48, y: 8.02), controlPoint1: CGPoint(x: 14.57, y: 8.24), controlPoint2: CGPoint(x: 14.02, y: 7.89))
        icon.addCurve(to: CGPoint(x: 12.68, y: 8.16), controlPoint1: CGPoint(x: 13.48, y: 8.02), controlPoint2: CGPoint(x: 13.14, y: 8.08))
        icon.addLine(to: CGPoint(x: 12.68, y: 0.68))
        icon.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 12.68, y: 0.3), controlPoint2: CGPoint(x: 12.38, y: -0))
        icon.addCurve(to: CGPoint(x: 11.34, y: 0.68), controlPoint1: CGPoint(x: 11.63, y: 0.01), controlPoint2: CGPoint(x: 11.34, y: 0.31))
        icon.addLine(to: CGPoint(x: 3.35, y: 0.68))
        icon.addCurve(to: CGPoint(x: 2.67, y: 0), controlPoint1: CGPoint(x: 3.35, y: 0.3), controlPoint2: CGPoint(x: 3.04, y: -0.01))
        icon.close()
        icon.move(to: CGPoint(x: 3.35, y: 4.67))
        icon.addLine(to: CGPoint(x: 11.34, y: 4.67))
        icon.addLine(to: CGPoint(x: 11.34, y: 8.36))
        icon.addCurve(to: CGPoint(x: 7.34, y: 8.66), controlPoint1: CGPoint(x: 10.2, y: 8.51), controlPoint2: CGPoint(x: 8.75, y: 8.66))
        icon.addCurve(to: CGPoint(x: 3.35, y: 8.36), controlPoint1: CGPoint(x: 5.94, y: 8.66), controlPoint2: CGPoint(x: 4.49, y: 8.51))
        icon.addLine(to: CGPoint(x: 3.35, y: 4.67))
        icon.close()
        icon.move(to: CGPoint(x: 3.54, y: 10.39))
        icon.addCurve(to: CGPoint(x: 7.34, y: 10.66), controlPoint1: CGPoint(x: 4.67, y: 10.54), controlPoint2: CGPoint(x: 5.99, y: 10.66))
        icon.addCurve(to: CGPoint(x: 11.14, y: 10.39), controlPoint1: CGPoint(x: 8.7, y: 10.66), controlPoint2: CGPoint(x: 10.01, y: 10.54))
        icon.addCurve(to: CGPoint(x: 10.09, y: 11.38), controlPoint1: CGPoint(x: 10.93, y: 10.83), controlPoint2: CGPoint(x: 10.56, y: 11.19))
        icon.addLine(to: CGPoint(x: 7.34, y: 12.47))
        icon.addLine(to: CGPoint(x: 4.6, y: 11.38))
        icon.addLine(to: CGPoint(x: 4.6, y: 11.38))
        icon.addCurve(to: CGPoint(x: 3.54, y: 10.39), controlPoint1: CGPoint(x: 4.13, y: 11.19), controlPoint2: CGPoint(x: 3.76, y: 10.83))
        icon.close()
        context.saveGState()
        context.translateBy(x: 4.7, y: 4)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4.7, y: 4))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallPerson(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 7, y: 0))
        icon.addCurve(to: CGPoint(x: 3.5, y: 3.5), controlPoint1: CGPoint(x: 4.53, y: 0), controlPoint2: CGPoint(x: 3.5, y: 1.59))
        icon.addCurve(to: CGPoint(x: 3.81, y: 4.79), controlPoint1: CGPoint(x: 3.5, y: 4.14), controlPoint2: CGPoint(x: 3.81, y: 4.79))
        icon.addCurve(to: CGPoint(x: 3.53, y: 5.49), controlPoint1: CGPoint(x: 3.68, y: 4.86), controlPoint2: CGPoint(x: 3.48, y: 5.09))
        icon.addCurve(to: CGPoint(x: 4.16, y: 6.44), controlPoint1: CGPoint(x: 3.63, y: 6.24), controlPoint2: CGPoint(x: 3.95, y: 6.43))
        icon.addCurve(to: CGPoint(x: 5.25, y: 8.16), controlPoint1: CGPoint(x: 4.24, y: 7.14), controlPoint2: CGPoint(x: 4.99, y: 8.03))
        icon.addLine(to: CGPoint(x: 5.25, y: 9.33))
        icon.addCurve(to: CGPoint(x: 5.01, y: 9.71), controlPoint1: CGPoint(x: 5.2, y: 9.48), controlPoint2: CGPoint(x: 5.12, y: 9.6))
        icon.addCurve(to: CGPoint(x: 7, y: 10.5), controlPoint1: CGPoint(x: 5.5, y: 10.13), controlPoint2: CGPoint(x: 6.17, y: 10.5))
        icon.addCurve(to: CGPoint(x: 8.99, y: 9.71), controlPoint1: CGPoint(x: 7.83, y: 10.5), controlPoint2: CGPoint(x: 8.5, y: 10.13))
        icon.addCurve(to: CGPoint(x: 8.75, y: 9.33), controlPoint1: CGPoint(x: 8.88, y: 9.6), controlPoint2: CGPoint(x: 8.8, y: 9.48))
        icon.addLine(to: CGPoint(x: 8.75, y: 8.16))
        icon.addCurve(to: CGPoint(x: 9.84, y: 6.44), controlPoint1: CGPoint(x: 9.01, y: 8.03), controlPoint2: CGPoint(x: 9.76, y: 7.14))
        icon.addCurve(to: CGPoint(x: 10.47, y: 5.49), controlPoint1: CGPoint(x: 10.05, y: 6.43), controlPoint2: CGPoint(x: 10.37, y: 6.24))
        icon.addCurve(to: CGPoint(x: 10.19, y: 4.79), controlPoint1: CGPoint(x: 10.52, y: 5.09), controlPoint2: CGPoint(x: 10.32, y: 4.86))
        icon.addCurve(to: CGPoint(x: 10.5, y: 3.5), controlPoint1: CGPoint(x: 10.19, y: 4.79), controlPoint2: CGPoint(x: 10.5, y: 4.21))
        icon.addCurve(to: CGPoint(x: 8.75, y: 0.88), controlPoint1: CGPoint(x: 10.5, y: 2.08), controlPoint2: CGPoint(x: 9.94, y: 0.88))
        icon.addCurve(to: CGPoint(x: 7, y: 0), controlPoint1: CGPoint(x: 8.75, y: 0.88), controlPoint2: CGPoint(x: 8.34, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 3.94, y: 10.31))
        icon.addCurve(to: CGPoint(x: 0, y: 14), controlPoint1: CGPoint(x: 2.37, y: 10.84), controlPoint2: CGPoint(x: 0, y: 11.09))
        icon.addLine(to: CGPoint(x: 14, y: 14))
        icon.addCurve(to: CGPoint(x: 10.06, y: 10.31), controlPoint1: CGPoint(x: 14, y: 11.09), controlPoint2: CGPoint(x: 11.63, y: 10.84))
        icon.addCurve(to: CGPoint(x: 7, y: 11.66), controlPoint1: CGPoint(x: 9.39, y: 10.98), controlPoint2: CGPoint(x: 8.38, y: 11.66))
        icon.addCurve(to: CGPoint(x: 3.94, y: 10.31), controlPoint1: CGPoint(x: 5.62, y: 11.66), controlPoint2: CGPoint(x: 4.61, y: 10.98))
        icon.close()
        context.saveGState()
        context.translateBy(x: 5, y: 5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 5, y: 5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallAttention(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 9, y: 18))
        icon.addCurve(to: CGPoint(x: 0, y: 9), controlPoint1: CGPoint(x: 4.03, y: 18), controlPoint2: CGPoint(x: 0, y: 13.97))
        icon.addCurve(to: CGPoint(x: 9, y: 0), controlPoint1: CGPoint(x: 0, y: 4.03), controlPoint2: CGPoint(x: 4.03, y: 0))
        icon.addCurve(to: CGPoint(x: 18, y: 9), controlPoint1: CGPoint(x: 13.97, y: 0), controlPoint2: CGPoint(x: 18, y: 4.03))
        icon.addCurve(to: CGPoint(x: 9, y: 18), controlPoint1: CGPoint(x: 18, y: 13.97), controlPoint2: CGPoint(x: 13.97, y: 18))
        icon.close()
        icon.move(to: CGPoint(x: 9, y: 16))
        icon.addCurve(to: CGPoint(x: 16, y: 9), controlPoint1: CGPoint(x: 12.87, y: 16), controlPoint2: CGPoint(x: 16, y: 12.87))
        icon.addCurve(to: CGPoint(x: 9, y: 2), controlPoint1: CGPoint(x: 16, y: 5.13), controlPoint2: CGPoint(x: 12.87, y: 2))
        icon.addCurve(to: CGPoint(x: 2, y: 9), controlPoint1: CGPoint(x: 5.13, y: 2), controlPoint2: CGPoint(x: 2, y: 5.13))
        icon.addCurve(to: CGPoint(x: 9, y: 16), controlPoint1: CGPoint(x: 2, y: 12.87), controlPoint2: CGPoint(x: 5.13, y: 16))
        icon.close()
        icon.move(to: CGPoint(x: 7.8, y: 4.14))
        icon.addLine(to: CGPoint(x: 9.99, y: 4.14))
        icon.addLine(to: CGPoint(x: 9.8, y: 10.75))
        icon.addLine(to: CGPoint(x: 7.98, y: 10.75))
        icon.addLine(to: CGPoint(x: 7.8, y: 4.14))
        icon.close()
        icon.move(to: CGPoint(x: 8.9, y: 14.21))
        icon.addCurve(to: CGPoint(x: 7.65, y: 13.04), controlPoint1: CGPoint(x: 8.13, y: 14.21), controlPoint2: CGPoint(x: 7.65, y: 13.76))
        icon.addCurve(to: CGPoint(x: 8.9, y: 11.87), controlPoint1: CGPoint(x: 7.65, y: 12.32), controlPoint2: CGPoint(x: 8.13, y: 11.87))
        icon.addCurve(to: CGPoint(x: 10.14, y: 13.04), controlPoint1: CGPoint(x: 9.67, y: 11.87), controlPoint2: CGPoint(x: 10.14, y: 12.32))
        icon.addCurve(to: CGPoint(x: 8.9, y: 14.21), controlPoint1: CGPoint(x: 10.14, y: 13.76), controlPoint2: CGPoint(x: 9.67, y: 14.21))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3, y: 3)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3, y: 3))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallAddContact(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 16.39, y: 7.89))
        icon.addLine(to: CGPoint(x: 18.31, y: 7.89))
        icon.addCurve(to: CGPoint(x: 19.02, y: 8.61), controlPoint1: CGPoint(x: 18.7, y: 7.89), controlPoint2: CGPoint(x: 19.02, y: 8.21))
        icon.addCurve(to: CGPoint(x: 18.31, y: 9.32), controlPoint1: CGPoint(x: 19.02, y: 9), controlPoint2: CGPoint(x: 18.7, y: 9.32))
        icon.addLine(to: CGPoint(x: 16.39, y: 9.32))
        icon.addLine(to: CGPoint(x: 16.39, y: 11.24))
        icon.addCurve(to: CGPoint(x: 15.68, y: 11.95), controlPoint1: CGPoint(x: 16.39, y: 11.63), controlPoint2: CGPoint(x: 16.07, y: 11.95))
        icon.addCurve(to: CGPoint(x: 14.96, y: 11.24), controlPoint1: CGPoint(x: 15.28, y: 11.95), controlPoint2: CGPoint(x: 14.96, y: 11.63))
        icon.addLine(to: CGPoint(x: 14.96, y: 9.32))
        icon.addLine(to: CGPoint(x: 13.04, y: 9.32))
        icon.addCurve(to: CGPoint(x: 12.33, y: 8.61), controlPoint1: CGPoint(x: 12.65, y: 9.32), controlPoint2: CGPoint(x: 12.33, y: 9))
        icon.addCurve(to: CGPoint(x: 13.04, y: 7.89), controlPoint1: CGPoint(x: 12.33, y: 8.21), controlPoint2: CGPoint(x: 12.65, y: 7.89))
        icon.addLine(to: CGPoint(x: 14.96, y: 7.89))
        icon.addLine(to: CGPoint(x: 14.96, y: 5.97))
        icon.addCurve(to: CGPoint(x: 15.68, y: 5.26), controlPoint1: CGPoint(x: 14.96, y: 5.58), controlPoint2: CGPoint(x: 15.28, y: 5.26))
        icon.addCurve(to: CGPoint(x: 16.39, y: 5.97), controlPoint1: CGPoint(x: 16.07, y: 5.26), controlPoint2: CGPoint(x: 16.39, y: 5.58))
        icon.addLine(to: CGPoint(x: 16.39, y: 7.89))
        icon.close()
        icon.move(to: CGPoint(x: 5.39, y: 0.47))
        icon.addCurve(to: CGPoint(x: 7.4, y: 0), controlPoint1: CGPoint(x: 6.04, y: 0.15), controlPoint2: CGPoint(x: 6.71, y: 0))
        icon.addCurve(to: CGPoint(x: 8.42, y: 0.1), controlPoint1: CGPoint(x: 7.73, y: 0), controlPoint2: CGPoint(x: 8.07, y: 0.04))
        icon.addCurve(to: CGPoint(x: 9.34, y: 0.62), controlPoint1: CGPoint(x: 8.77, y: 0.17), controlPoint2: CGPoint(x: 9.1, y: 0.32))
        icon.addCurve(to: CGPoint(x: 9.59, y: 0.77), controlPoint1: CGPoint(x: 9.41, y: 0.71), controlPoint2: CGPoint(x: 9.48, y: 0.75))
        icon.addCurve(to: CGPoint(x: 11.13, y: 2.05), controlPoint1: CGPoint(x: 10.33, y: 0.92), controlPoint2: CGPoint(x: 10.85, y: 1.34))
        icon.addCurve(to: CGPoint(x: 11.35, y: 3.33), controlPoint1: CGPoint(x: 11.29, y: 2.46), controlPoint2: CGPoint(x: 11.34, y: 2.89))
        icon.addCurve(to: CGPoint(x: 10.95, y: 5.89), controlPoint1: CGPoint(x: 11.37, y: 4.21), controlPoint2: CGPoint(x: 11.21, y: 5.06))
        icon.addCurve(to: CGPoint(x: 10.99, y: 6.05), controlPoint1: CGPoint(x: 10.93, y: 5.96), controlPoint2: CGPoint(x: 10.93, y: 6))
        icon.addCurve(to: CGPoint(x: 11.23, y: 6.45), controlPoint1: CGPoint(x: 11.12, y: 6.15), controlPoint2: CGPoint(x: 11.2, y: 6.29))
        icon.addCurve(to: CGPoint(x: 10.94, y: 7.79), controlPoint1: CGPoint(x: 11.31, y: 6.93), controlPoint2: CGPoint(x: 11.21, y: 7.38))
        icon.addCurve(to: CGPoint(x: 10.58, y: 8.04), controlPoint1: CGPoint(x: 10.85, y: 7.92), controlPoint2: CGPoint(x: 10.74, y: 8.01))
        icon.addCurve(to: CGPoint(x: 10.5, y: 8.14), controlPoint1: CGPoint(x: 10.55, y: 8.05), controlPoint2: CGPoint(x: 10.52, y: 8.1))
        icon.addCurve(to: CGPoint(x: 10.23, y: 9.11), controlPoint1: CGPoint(x: 10.41, y: 8.46), controlPoint2: CGPoint(x: 10.35, y: 8.79))
        icon.addCurve(to: CGPoint(x: 9.6, y: 10.26), controlPoint1: CGPoint(x: 10.09, y: 9.48), controlPoint2: CGPoint(x: 9.91, y: 10))
        icon.addCurve(to: CGPoint(x: 9.57, y: 10.34), controlPoint1: CGPoint(x: 9.58, y: 10.28), controlPoint2: CGPoint(x: 9.57, y: 10.32))
        icon.addCurve(to: CGPoint(x: 9.57, y: 11.6), controlPoint1: CGPoint(x: 9.57, y: 10.75), controlPoint2: CGPoint(x: 9.57, y: 11.19))
        icon.addCurve(to: CGPoint(x: 10.16, y: 12.25), controlPoint1: CGPoint(x: 9.62, y: 11.78), controlPoint2: CGPoint(x: 9.79, y: 12.06))
        icon.addCurve(to: CGPoint(x: 11.05, y: 12.5), controlPoint1: CGPoint(x: 10.49, y: 12.42), controlPoint2: CGPoint(x: 10.76, y: 12.48))
        icon.addCurve(to: CGPoint(x: 13.3, y: 13.17), controlPoint1: CGPoint(x: 12.13, y: 12.6), controlPoint2: CGPoint(x: 12.88, y: 12.83))
        icon.addCurve(to: CGPoint(x: 14.48, y: 15.3), controlPoint1: CGPoint(x: 13.89, y: 13.66), controlPoint2: CGPoint(x: 14.29, y: 14.37))
        icon.addLine(to: CGPoint(x: 9.5, y: 15.3))
        icon.addLine(to: CGPoint(x: 4.98, y: 15.3))
        icon.addLine(to: CGPoint(x: 0, y: 15.3))
        icon.addCurve(to: CGPoint(x: 1.18, y: 13.17), controlPoint1: CGPoint(x: 0.19, y: 14.37), controlPoint2: CGPoint(x: 0.58, y: 13.66))
        icon.addCurve(to: CGPoint(x: 4.23, y: 12.45), controlPoint1: CGPoint(x: 1.69, y: 12.75), controlPoint2: CGPoint(x: 2.71, y: 12.5))
        icon.addCurve(to: CGPoint(x: 5, y: 12.23), controlPoint1: CGPoint(x: 4.48, y: 12.43), controlPoint2: CGPoint(x: 4.74, y: 12.37))
        icon.addCurve(to: CGPoint(x: 5.53, y: 11.6), controlPoint1: CGPoint(x: 5.36, y: 12.05), controlPoint2: CGPoint(x: 5.48, y: 11.78))
        icon.addCurve(to: CGPoint(x: 5.55, y: 10.34), controlPoint1: CGPoint(x: 5.53, y: 11.17), controlPoint2: CGPoint(x: 5.54, y: 10.77))
        icon.addCurve(to: CGPoint(x: 5.48, y: 10.23), controlPoint1: CGPoint(x: 5.55, y: 10.25), controlPoint2: CGPoint(x: 5.53, y: 10.3))
        icon.addCurve(to: CGPoint(x: 4.86, y: 9.27), controlPoint1: CGPoint(x: 5.47, y: 10.22), controlPoint2: CGPoint(x: 5.13, y: 9.91))
        icon.addCurve(to: CGPoint(x: 4.57, y: 8.15), controlPoint1: CGPoint(x: 4.74, y: 8.97), controlPoint2: CGPoint(x: 4.63, y: 8.6))
        icon.addCurve(to: CGPoint(x: 4.49, y: 8.04), controlPoint1: CGPoint(x: 4.56, y: 8.11), controlPoint2: CGPoint(x: 4.52, y: 8.05))
        icon.addCurve(to: CGPoint(x: 4.09, y: 7.73), controlPoint1: CGPoint(x: 4.31, y: 7.99), controlPoint2: CGPoint(x: 4.19, y: 7.88))
        icon.addCurve(to: CGPoint(x: 3.82, y: 6.86), controlPoint1: CGPoint(x: 3.92, y: 7.46), controlPoint2: CGPoint(x: 3.86, y: 7.16))
        icon.addCurve(to: CGPoint(x: 4.11, y: 6.02), controlPoint1: CGPoint(x: 3.79, y: 6.54), controlPoint2: CGPoint(x: 3.85, y: 6.24))
        icon.addCurve(to: CGPoint(x: 4.13, y: 5.9), controlPoint1: CGPoint(x: 4.13, y: 6), controlPoint2: CGPoint(x: 4.13, y: 5.94))
        icon.addCurve(to: CGPoint(x: 3.88, y: 4.65), controlPoint1: CGPoint(x: 4.05, y: 5.49), controlPoint2: CGPoint(x: 3.95, y: 5.07))
        icon.addCurve(to: CGPoint(x: 3.9, y: 2.59), controlPoint1: CGPoint(x: 3.78, y: 3.96), controlPoint2: CGPoint(x: 3.76, y: 3.28))
        icon.addCurve(to: CGPoint(x: 5.39, y: 0.47), controlPoint1: CGPoint(x: 4.08, y: 1.66), controlPoint2: CGPoint(x: 4.53, y: 0.9))
        icon.close()
        context.saveGState()
        context.translateBy(x: 2.5, y: 5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 2.5, y: 5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallPodcast(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 1.26, y: 13.88))
        icon.addLine(to: CGPoint(x: 0, y: 13.88))
        icon.addLine(to: CGPoint(x: 0, y: 8.08))
        icon.addCurve(to: CGPoint(x: 8.16, y: 0), controlPoint1: CGPoint(x: 0, y: 3.62), controlPoint2: CGPoint(x: 3.65, y: 0))
        icon.addLine(to: CGPoint(x: 9.84, y: 0))
        icon.addCurve(to: CGPoint(x: 18, y: 8.08), controlPoint1: CGPoint(x: 14.35, y: 0), controlPoint2: CGPoint(x: 18, y: 3.62))
        icon.addLine(to: CGPoint(x: 18, y: 13.88))
        icon.addLine(to: CGPoint(x: 16.74, y: 13.88))
        icon.addLine(to: CGPoint(x: 16.74, y: 8.08))
        icon.addCurve(to: CGPoint(x: 9.84, y: 1.24), controlPoint1: CGPoint(x: 16.74, y: 4.3), controlPoint2: CGPoint(x: 13.65, y: 1.24))
        icon.addLine(to: CGPoint(x: 8.16, y: 1.24))
        icon.addCurve(to: CGPoint(x: 1.26, y: 8.08), controlPoint1: CGPoint(x: 4.35, y: 1.24), controlPoint2: CGPoint(x: 1.26, y: 4.3))
        icon.addLine(to: CGPoint(x: 1.26, y: 13.88))
        icon.close()
        icon.move(to: CGPoint(x: 15.27, y: 16.36))
        icon.addLine(to: CGPoint(x: 13.64, y: 16.36))
        icon.addCurve(to: CGPoint(x: 12.35, y: 15.09), controlPoint1: CGPoint(x: 12.93, y: 16.36), controlPoint2: CGPoint(x: 12.35, y: 15.79))
        icon.addLine(to: CGPoint(x: 12.35, y: 11.01))
        icon.addCurve(to: CGPoint(x: 13.64, y: 9.74), controlPoint1: CGPoint(x: 12.35, y: 10.3), controlPoint2: CGPoint(x: 12.93, y: 9.74))
        icon.addLine(to: CGPoint(x: 15.27, y: 9.74))
        icon.addCurve(to: CGPoint(x: 15.7, y: 10.16), controlPoint1: CGPoint(x: 15.5, y: 9.74), controlPoint2: CGPoint(x: 15.7, y: 9.93))
        icon.addLine(to: CGPoint(x: 15.7, y: 15.94))
        icon.addCurve(to: CGPoint(x: 15.27, y: 16.36), controlPoint1: CGPoint(x: 15.7, y: 16.17), controlPoint2: CGPoint(x: 15.5, y: 16.36))
        icon.close()
        icon.move(to: CGPoint(x: 2.73, y: 16.36))
        icon.addCurve(to: CGPoint(x: 2.3, y: 15.94), controlPoint1: CGPoint(x: 2.49, y: 16.36), controlPoint2: CGPoint(x: 2.3, y: 16.17))
        icon.addLine(to: CGPoint(x: 2.3, y: 10.16))
        icon.addCurve(to: CGPoint(x: 2.73, y: 9.74), controlPoint1: CGPoint(x: 2.3, y: 9.93), controlPoint2: CGPoint(x: 2.49, y: 9.74))
        icon.addLine(to: CGPoint(x: 4.36, y: 9.74))
        icon.addCurve(to: CGPoint(x: 5.65, y: 11.01), controlPoint1: CGPoint(x: 5.07, y: 9.74), controlPoint2: CGPoint(x: 5.65, y: 10.3))
        icon.addLine(to: CGPoint(x: 5.65, y: 15.09))
        icon.addCurve(to: CGPoint(x: 4.36, y: 16.36), controlPoint1: CGPoint(x: 5.65, y: 15.79), controlPoint2: CGPoint(x: 5.07, y: 16.36))
        icon.addLine(to: CGPoint(x: 2.73, y: 16.36))
        icon.close()
        icon.move(to: CGPoint(x: 5.65, y: 3.11))
        icon.addLine(to: CGPoint(x: 11.51, y: 3.11))
        icon.addLine(to: CGPoint(x: 11.51, y: 3.94))
        icon.addLine(to: CGPoint(x: 5.65, y: 3.94))
        icon.addLine(to: CGPoint(x: 5.65, y: 3.11))
        icon.close()
        icon.move(to: CGPoint(x: 5.65, y: 6.42))
        icon.addLine(to: CGPoint(x: 12.35, y: 6.42))
        icon.addLine(to: CGPoint(x: 12.35, y: 7.25))
        icon.addLine(to: CGPoint(x: 5.65, y: 7.25))
        icon.addLine(to: CGPoint(x: 5.65, y: 6.42))
        icon.close()
        icon.move(to: CGPoint(x: 5.65, y: 4.76))
        icon.addLine(to: CGPoint(x: 12.35, y: 4.76))
        icon.addLine(to: CGPoint(x: 12.35, y: 5.59))
        icon.addLine(to: CGPoint(x: 5.65, y: 5.59))
        icon.addLine(to: CGPoint(x: 5.65, y: 4.76))
        icon.close()
        icon.move(to: CGPoint(x: 5.65, y: 8.08))
        icon.addLine(to: CGPoint(x: 11.51, y: 8.08))
        icon.addLine(to: CGPoint(x: 11.51, y: 8.91))
        icon.addLine(to: CGPoint(x: 5.65, y: 8.91))
        icon.addLine(to: CGPoint(x: 5.65, y: 8.08))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3, y: 4)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3, y: 4))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallMap(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 5.98, y: 8.38))
        icon.addCurve(to: CGPoint(x: 3.47, y: 5.9), controlPoint1: CGPoint(x: 4.6, y: 8.38), controlPoint2: CGPoint(x: 3.47, y: 7.26))
        icon.addCurve(to: CGPoint(x: 5.98, y: 3.41), controlPoint1: CGPoint(x: 3.47, y: 4.52), controlPoint2: CGPoint(x: 4.6, y: 3.41))
        icon.addCurve(to: CGPoint(x: 8.5, y: 5.9), controlPoint1: CGPoint(x: 7.37, y: 3.41), controlPoint2: CGPoint(x: 8.5, y: 4.52))
        icon.addCurve(to: CGPoint(x: 5.98, y: 8.38), controlPoint1: CGPoint(x: 8.5, y: 7.26), controlPoint2: CGPoint(x: 7.37, y: 8.38))
        icon.move(to: CGPoint(x: 6, y: 0))
        icon.addCurve(to: CGPoint(x: 0, y: 5.83), controlPoint1: CGPoint(x: 2.69, y: 0), controlPoint2: CGPoint(x: 0, y: 2.61))
        icon.addCurve(to: CGPoint(x: 6, y: 16), controlPoint1: CGPoint(x: 0, y: 9.04), controlPoint2: CGPoint(x: 5.93, y: 16))
        icon.addLine(to: CGPoint(x: 6, y: 16))
        icon.addCurve(to: CGPoint(x: 12, y: 5.83), controlPoint1: CGPoint(x: 6, y: 16), controlPoint2: CGPoint(x: 12, y: 9.05))
        icon.addCurve(to: CGPoint(x: 6, y: 0), controlPoint1: CGPoint(x: 12, y: 2.61), controlPoint2: CGPoint(x: 9.31, y: 0))
        context.saveGState()
        context.translateBy(x: 6, y: 4)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 6, y: 4))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallBookmark(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 10.15, y: 0))
        icon.addCurve(to: CGPoint(x: 12, y: 1.84), controlPoint1: CGPoint(x: 11.18, y: 0), controlPoint2: CGPoint(x: 12, y: 0.82))
        icon.addLine(to: CGPoint(x: 12, y: 17.5))
        icon.addLine(to: CGPoint(x: 6, y: 12.37))
        icon.addLine(to: CGPoint(x: 0, y: 17.5))
        icon.addLine(to: CGPoint(x: 0, y: 1.84))
        icon.addCurve(to: CGPoint(x: 1.85, y: 0), controlPoint1: CGPoint(x: 0, y: 0.82), controlPoint2: CGPoint(x: 0.82, y: 0))
        icon.addLine(to: CGPoint(x: 10.15, y: 0))
        icon.close()
        context.saveGState()
        context.translateBy(x: 6, y: 3.5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 6, y: 3.5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallFollow(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 9, y: 6.93))
        icon.addLine(to: CGPoint(x: 9, y: 3.75))
        icon.addCurve(to: CGPoint(x: 8.25, y: 3), controlPoint1: CGPoint(x: 9, y: 3.34), controlPoint2: CGPoint(x: 8.66, y: 3))
        icon.addLine(to: CGPoint(x: 7.75, y: 3))
        icon.addCurve(to: CGPoint(x: 7, y: 3.75), controlPoint1: CGPoint(x: 7.34, y: 3), controlPoint2: CGPoint(x: 7, y: 3.34))
        icon.addLine(to: CGPoint(x: 7, y: 6.93))
        icon.addLine(to: CGPoint(x: 4.08, y: 6.93))
        icon.addCurve(to: CGPoint(x: 3.33, y: 7.68), controlPoint1: CGPoint(x: 3.67, y: 6.93), controlPoint2: CGPoint(x: 3.33, y: 7.26))
        icon.addLine(to: CGPoint(x: 3.33, y: 8.32))
        icon.addCurve(to: CGPoint(x: 4.08, y: 9.07), controlPoint1: CGPoint(x: 3.33, y: 8.74), controlPoint2: CGPoint(x: 3.67, y: 9.07))
        icon.addLine(to: CGPoint(x: 7, y: 9.07))
        icon.addLine(to: CGPoint(x: 7, y: 12.25))
        icon.addCurve(to: CGPoint(x: 7.75, y: 13), controlPoint1: CGPoint(x: 7, y: 12.66), controlPoint2: CGPoint(x: 7.34, y: 13))
        icon.addLine(to: CGPoint(x: 8.25, y: 13))
        icon.addCurve(to: CGPoint(x: 9, y: 12.25), controlPoint1: CGPoint(x: 8.66, y: 13), controlPoint2: CGPoint(x: 9, y: 12.66))
        icon.addLine(to: CGPoint(x: 9, y: 9.07))
        icon.addLine(to: CGPoint(x: 11.92, y: 9.07))
        icon.addCurve(to: CGPoint(x: 12.67, y: 8.32), controlPoint1: CGPoint(x: 12.33, y: 9.07), controlPoint2: CGPoint(x: 12.67, y: 8.74))
        icon.addLine(to: CGPoint(x: 12.67, y: 7.68))
        icon.addCurve(to: CGPoint(x: 11.92, y: 6.93), controlPoint1: CGPoint(x: 12.67, y: 7.26), controlPoint2: CGPoint(x: 12.33, y: 6.93))
        icon.addLine(to: CGPoint(x: 9, y: 6.93))
        icon.close()
        icon.move(to: CGPoint(x: 3, y: 0))
        icon.addLine(to: CGPoint(x: 13, y: 0))
        icon.addCurve(to: CGPoint(x: 16, y: 3), controlPoint1: CGPoint(x: 14.66, y: 0), controlPoint2: CGPoint(x: 16, y: 1.34))
        icon.addLine(to: CGPoint(x: 16, y: 13))
        icon.addCurve(to: CGPoint(x: 13, y: 16), controlPoint1: CGPoint(x: 16, y: 14.66), controlPoint2: CGPoint(x: 14.66, y: 16))
        icon.addLine(to: CGPoint(x: 3, y: 16))
        icon.addCurve(to: CGPoint(x: 0, y: 13), controlPoint1: CGPoint(x: 1.34, y: 16), controlPoint2: CGPoint(x: 0, y: 14.66))
        icon.addLine(to: CGPoint(x: 0, y: 3))
        icon.addCurve(to: CGPoint(x: 3, y: 0), controlPoint1: CGPoint(x: 0, y: 1.34), controlPoint2: CGPoint(x: 1.34, y: 0))
        icon.close()
        context.saveGState()
        context.translateBy(x: 4, y: 4)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4, y: 4))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallNavigation(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 0.5, y: 6.76))
        icon.addLine(to: CGPoint(x: 6.31, y: 6.76))
        icon.addCurve(to: CGPoint(x: 6.81, y: 7.26), controlPoint1: CGPoint(x: 6.59, y: 6.76), controlPoint2: CGPoint(x: 6.81, y: 6.99))
        icon.addLine(to: CGPoint(x: 6.81, y: 13.21))
        icon.addCurve(to: CGPoint(x: 7.31, y: 13.71), controlPoint1: CGPoint(x: 6.81, y: 13.49), controlPoint2: CGPoint(x: 7.03, y: 13.71))
        icon.addCurve(to: CGPoint(x: 7.76, y: 13.42), controlPoint1: CGPoint(x: 7.51, y: 13.71), controlPoint2: CGPoint(x: 7.68, y: 13.6))
        icon.addLine(to: CGPoint(x: 13.63, y: 0.71))
        icon.addCurve(to: CGPoint(x: 13.38, y: 0.05), controlPoint1: CGPoint(x: 13.74, y: 0.46), controlPoint2: CGPoint(x: 13.63, y: 0.16))
        icon.addCurve(to: CGPoint(x: 12.97, y: 0.04), controlPoint1: CGPoint(x: 13.25, y: -0.01), controlPoint2: CGPoint(x: 13.1, y: -0.02))
        icon.addLine(to: CGPoint(x: 0.29, y: 5.81))
        icon.addCurve(to: CGPoint(x: 0.04, y: 6.47), controlPoint1: CGPoint(x: 0.04, y: 5.92), controlPoint2: CGPoint(x: -0.07, y: 6.22))
        icon.addCurve(to: CGPoint(x: 0.5, y: 6.76), controlPoint1: CGPoint(x: 0.13, y: 6.65), controlPoint2: CGPoint(x: 0.3, y: 6.76))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3, y: 5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3, y: 5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmallFilter(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 6.83, y: 7.8))
        icon.addCurve(to: CGPoint(x: 4.78, y: 9.2), controlPoint1: CGPoint(x: 6.51, y: 8.62), controlPoint2: CGPoint(x: 5.71, y: 9.2))
        icon.addCurve(to: CGPoint(x: 2.74, y: 7.8), controlPoint1: CGPoint(x: 3.85, y: 9.2), controlPoint2: CGPoint(x: 3.06, y: 8.62))
        icon.addLine(to: CGPoint(x: 0.75, y: 7.8))
        icon.addCurve(to: CGPoint(x: 0, y: 7.05), controlPoint1: CGPoint(x: 0.34, y: 7.8), controlPoint2: CGPoint(x: 0, y: 7.46))
        icon.addLine(to: CGPoint(x: 0, y: 6.95))
        icon.addCurve(to: CGPoint(x: 0.75, y: 6.2), controlPoint1: CGPoint(x: 0, y: 6.54), controlPoint2: CGPoint(x: 0.34, y: 6.2))
        icon.addLine(to: CGPoint(x: 2.74, y: 6.2))
        icon.addCurve(to: CGPoint(x: 4.78, y: 4.8), controlPoint1: CGPoint(x: 3.06, y: 5.38), controlPoint2: CGPoint(x: 3.85, y: 4.8))
        icon.addCurve(to: CGPoint(x: 6.83, y: 6.2), controlPoint1: CGPoint(x: 5.71, y: 4.8), controlPoint2: CGPoint(x: 6.51, y: 5.38))
        icon.addLine(to: CGPoint(x: 16.25, y: 6.2))
        icon.addCurve(to: CGPoint(x: 17, y: 6.95), controlPoint1: CGPoint(x: 16.66, y: 6.2), controlPoint2: CGPoint(x: 17, y: 6.54))
        icon.addLine(to: CGPoint(x: 17, y: 7.05))
        icon.addCurve(to: CGPoint(x: 16.25, y: 7.8), controlPoint1: CGPoint(x: 17, y: 7.46), controlPoint2: CGPoint(x: 16.66, y: 7.8))
        icon.addLine(to: CGPoint(x: 6.83, y: 7.8))
        icon.close()
        icon.move(to: CGPoint(x: 10.17, y: 11))
        icon.addCurve(to: CGPoint(x: 12.22, y: 9.6), controlPoint1: CGPoint(x: 10.49, y: 10.18), controlPoint2: CGPoint(x: 11.29, y: 9.6))
        icon.addCurve(to: CGPoint(x: 14.26, y: 11), controlPoint1: CGPoint(x: 13.15, y: 9.6), controlPoint2: CGPoint(x: 13.94, y: 10.18))
        icon.addLine(to: CGPoint(x: 16.25, y: 11))
        icon.addCurve(to: CGPoint(x: 17, y: 11.75), controlPoint1: CGPoint(x: 16.66, y: 11), controlPoint2: CGPoint(x: 17, y: 11.34))
        icon.addLine(to: CGPoint(x: 17, y: 11.85))
        icon.addCurve(to: CGPoint(x: 16.25, y: 12.6), controlPoint1: CGPoint(x: 17, y: 12.26), controlPoint2: CGPoint(x: 16.66, y: 12.6))
        icon.addLine(to: CGPoint(x: 14.26, y: 12.6))
        icon.addCurve(to: CGPoint(x: 12.22, y: 14), controlPoint1: CGPoint(x: 13.94, y: 13.42), controlPoint2: CGPoint(x: 13.15, y: 14))
        icon.addCurve(to: CGPoint(x: 10.17, y: 12.6), controlPoint1: CGPoint(x: 11.29, y: 14), controlPoint2: CGPoint(x: 10.49, y: 13.42))
        icon.addLine(to: CGPoint(x: 0.75, y: 12.6))
        icon.addCurve(to: CGPoint(x: 0, y: 11.85), controlPoint1: CGPoint(x: 0.34, y: 12.6), controlPoint2: CGPoint(x: 0, y: 12.26))
        icon.addLine(to: CGPoint(x: 0, y: 11.75))
        icon.addCurve(to: CGPoint(x: 0.75, y: 11), controlPoint1: CGPoint(x: 0, y: 11.34), controlPoint2: CGPoint(x: 0.34, y: 11))
        icon.addLine(to: CGPoint(x: 10.17, y: 11))
        icon.close()
        icon.move(to: CGPoint(x: 10.17, y: 1.4))
        icon.addCurve(to: CGPoint(x: 12.22, y: 0), controlPoint1: CGPoint(x: 10.49, y: 0.58), controlPoint2: CGPoint(x: 11.29, y: 0))
        icon.addCurve(to: CGPoint(x: 14.26, y: 1.4), controlPoint1: CGPoint(x: 13.15, y: 0), controlPoint2: CGPoint(x: 13.94, y: 0.58))
        icon.addLine(to: CGPoint(x: 16.25, y: 1.4))
        icon.addCurve(to: CGPoint(x: 17, y: 2.15), controlPoint1: CGPoint(x: 16.66, y: 1.4), controlPoint2: CGPoint(x: 17, y: 1.74))
        icon.addLine(to: CGPoint(x: 17, y: 2.25))
        icon.addCurve(to: CGPoint(x: 16.25, y: 3), controlPoint1: CGPoint(x: 17, y: 2.66), controlPoint2: CGPoint(x: 16.66, y: 3))
        icon.addLine(to: CGPoint(x: 14.26, y: 3))
        icon.addCurve(to: CGPoint(x: 12.22, y: 4.4), controlPoint1: CGPoint(x: 13.94, y: 3.82), controlPoint2: CGPoint(x: 13.15, y: 4.4))
        icon.addCurve(to: CGPoint(x: 10.17, y: 3), controlPoint1: CGPoint(x: 11.29, y: 4.4), controlPoint2: CGPoint(x: 10.49, y: 3.82))
        icon.addLine(to: CGPoint(x: 0.75, y: 3))
        icon.addCurve(to: CGPoint(x: 0, y: 2.25), controlPoint1: CGPoint(x: 0.34, y: 3), controlPoint2: CGPoint(x: 0, y: 2.66))
        icon.addLine(to: CGPoint(x: 0, y: 2.15))
        icon.addCurve(to: CGPoint(x: 0.75, y: 1.4), controlPoint1: CGPoint(x: 0, y: 1.74), controlPoint2: CGPoint(x: 0.34, y: 1.4))
        icon.addLine(to: CGPoint(x: 10.17, y: 1.4))
        icon.close()
        icon.move(to: CGPoint(x: 12.22, y: 3.2))
        icon.addCurve(to: CGPoint(x: 13.21, y: 2.2), controlPoint1: CGPoint(x: 12.77, y: 3.2), controlPoint2: CGPoint(x: 13.21, y: 2.75))
        icon.addCurve(to: CGPoint(x: 12.22, y: 1.2), controlPoint1: CGPoint(x: 13.21, y: 1.65), controlPoint2: CGPoint(x: 12.77, y: 1.2))
        icon.addCurve(to: CGPoint(x: 11.23, y: 2.2), controlPoint1: CGPoint(x: 11.67, y: 1.2), controlPoint2: CGPoint(x: 11.23, y: 1.65))
        icon.addCurve(to: CGPoint(x: 12.22, y: 3.2), controlPoint1: CGPoint(x: 11.23, y: 2.75), controlPoint2: CGPoint(x: 11.67, y: 3.2))
        icon.close()
        icon.move(to: CGPoint(x: 12.22, y: 12.8))
        icon.addCurve(to: CGPoint(x: 13.21, y: 11.8), controlPoint1: CGPoint(x: 12.77, y: 12.8), controlPoint2: CGPoint(x: 13.21, y: 12.35))
        icon.addCurve(to: CGPoint(x: 12.22, y: 10.8), controlPoint1: CGPoint(x: 13.21, y: 11.25), controlPoint2: CGPoint(x: 12.77, y: 10.8))
        icon.addCurve(to: CGPoint(x: 11.23, y: 11.8), controlPoint1: CGPoint(x: 11.67, y: 10.8), controlPoint2: CGPoint(x: 11.23, y: 11.25))
        icon.addCurve(to: CGPoint(x: 12.22, y: 12.8), controlPoint1: CGPoint(x: 11.23, y: 12.35), controlPoint2: CGPoint(x: 11.67, y: 12.8))
        icon.close()
        icon.move(to: CGPoint(x: 4.78, y: 8))
        icon.addCurve(to: CGPoint(x: 5.77, y: 7), controlPoint1: CGPoint(x: 5.33, y: 8), controlPoint2: CGPoint(x: 5.77, y: 7.55))
        icon.addCurve(to: CGPoint(x: 4.78, y: 6), controlPoint1: CGPoint(x: 5.77, y: 6.45), controlPoint2: CGPoint(x: 5.33, y: 6))
        icon.addCurve(to: CGPoint(x: 3.79, y: 7), controlPoint1: CGPoint(x: 4.23, y: 6), controlPoint2: CGPoint(x: 3.79, y: 6.45))
        icon.addCurve(to: CGPoint(x: 4.78, y: 8), controlPoint1: CGPoint(x: 3.79, y: 7.55), controlPoint2: CGPoint(x: 4.23, y: 8))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3.5, y: 5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3.5, y: 5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallSample(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 6, y: 12))
        icon.addCurve(to: CGPoint(x: 0, y: 6), controlPoint1: CGPoint(x: 2.69, y: 12), controlPoint2: CGPoint(x: 0, y: 9.31))
        icon.addCurve(to: CGPoint(x: 6, y: 0), controlPoint1: CGPoint(x: 0, y: 2.69), controlPoint2: CGPoint(x: 2.69, y: 0))
        icon.addCurve(to: CGPoint(x: 12, y: 6), controlPoint1: CGPoint(x: 9.31, y: 0), controlPoint2: CGPoint(x: 12, y: 2.69))
        icon.addCurve(to: CGPoint(x: 6, y: 12), controlPoint1: CGPoint(x: 12, y: 9.31), controlPoint2: CGPoint(x: 9.31, y: 12))
        icon.close()
        icon.move(to: CGPoint(x: 6, y: 11))
        icon.addCurve(to: CGPoint(x: 11, y: 6), controlPoint1: CGPoint(x: 8.76, y: 11), controlPoint2: CGPoint(x: 11, y: 8.76))
        icon.addCurve(to: CGPoint(x: 6, y: 1), controlPoint1: CGPoint(x: 11, y: 3.24), controlPoint2: CGPoint(x: 8.76, y: 1))
        icon.addCurve(to: CGPoint(x: 1, y: 6), controlPoint1: CGPoint(x: 3.24, y: 1), controlPoint2: CGPoint(x: 1, y: 3.24))
        icon.addCurve(to: CGPoint(x: 6, y: 11), controlPoint1: CGPoint(x: 1, y: 8.76), controlPoint2: CGPoint(x: 3.24, y: 11))
        icon.close()
        context.saveGState()
        context.translateBy(x: 4, y: 4)
        icon.usesEvenOddFillRule = true
        UIColor(white: 1, alpha: 0).setFill()
        icon.fill()
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4, y: 4))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallWorldWeb(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 6, y: 0))
        icon.addCurve(to: CGPoint(x: 0, y: 6), controlPoint1: CGPoint(x: 2.69, y: 0), controlPoint2: CGPoint(x: 0, y: 2.69))
        icon.addCurve(to: CGPoint(x: 6, y: 12), controlPoint1: CGPoint(x: 0, y: 9.31), controlPoint2: CGPoint(x: 2.69, y: 12))
        icon.addCurve(to: CGPoint(x: 12, y: 6), controlPoint1: CGPoint(x: 9.31, y: 12), controlPoint2: CGPoint(x: 12, y: 9.31))
        icon.addCurve(to: CGPoint(x: 6, y: 0), controlPoint1: CGPoint(x: 12, y: 2.69), controlPoint2: CGPoint(x: 9.31, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 5.5, y: 1.02))
        icon.addLine(to: CGPoint(x: 5.5, y: 2))
        icon.addLine(to: CGPoint(x: 4.5, y: 2))
        icon.addLine(to: CGPoint(x: 4.5, y: 1.23))
        icon.addCurve(to: CGPoint(x: 5.5, y: 1.02), controlPoint1: CGPoint(x: 4.82, y: 1.13), controlPoint2: CGPoint(x: 5.16, y: 1.06))
        icon.close()
        icon.move(to: CGPoint(x: 6.5, y: 1.02))
        icon.addCurve(to: CGPoint(x: 8.84, y: 1.88), controlPoint1: CGPoint(x: 7.36, y: 1.11), controlPoint2: CGPoint(x: 8.16, y: 1.42))
        icon.addLine(to: CGPoint(x: 8.5, y: 2))
        icon.addLine(to: CGPoint(x: 8.5, y: 2.5))
        icon.addLine(to: CGPoint(x: 8, y: 2.5))
        icon.addLine(to: CGPoint(x: 7.5, y: 3))
        icon.addLine(to: CGPoint(x: 7.5, y: 4))
        icon.addLine(to: CGPoint(x: 8.5, y: 3.5))
        icon.addLine(to: CGPoint(x: 10, y: 4))
        icon.addLine(to: CGPoint(x: 9.5, y: 5))
        icon.addLine(to: CGPoint(x: 8.5, y: 4.5))
        icon.addLine(to: CGPoint(x: 7.5, y: 4.5))
        icon.addLine(to: CGPoint(x: 6.5, y: 5.5))
        icon.addLine(to: CGPoint(x: 6.5, y: 6.5))
        icon.addLine(to: CGPoint(x: 7.5, y: 7.5))
        icon.addLine(to: CGPoint(x: 8.5, y: 7.5))
        icon.addLine(to: CGPoint(x: 9, y: 8.5))
        icon.addLine(to: CGPoint(x: 7.95, y: 10.61))
        icon.addCurve(to: CGPoint(x: 6, y: 11), controlPoint1: CGPoint(x: 7.35, y: 10.86), controlPoint2: CGPoint(x: 6.69, y: 11))
        icon.addCurve(to: CGPoint(x: 5.46, y: 10.97), controlPoint1: CGPoint(x: 5.82, y: 11), controlPoint2: CGPoint(x: 5.64, y: 10.99))
        icon.addLine(to: CGPoint(x: 4.48, y: 10.02))
        icon.addLine(to: CGPoint(x: 4.5, y: 8))
        icon.addLine(to: CGPoint(x: 3, y: 6.5))
        icon.addLine(to: CGPoint(x: 1.5, y: 6.5))
        icon.addLine(to: CGPoint(x: 1.5, y: 5.5))
        icon.addLine(to: CGPoint(x: 4, y: 4))
        icon.addLine(to: CGPoint(x: 4, y: 3))
        icon.addLine(to: CGPoint(x: 5, y: 3))
        icon.addLine(to: CGPoint(x: 5.5, y: 3.5))
        icon.addLine(to: CGPoint(x: 6.5, y: 3))
        icon.addLine(to: CGPoint(x: 6.5, y: 1.02))
        icon.close()
        context.saveGState()
        context.translateBy(x: 4, y: 4)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4, y: 4))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallTimeStroked(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 6, y: 1))
        icon.addCurve(to: CGPoint(x: 1, y: 6), controlPoint1: CGPoint(x: 3.24, y: 1), controlPoint2: CGPoint(x: 1, y: 3.24))
        icon.addCurve(to: CGPoint(x: 6, y: 11), controlPoint1: CGPoint(x: 1, y: 8.76), controlPoint2: CGPoint(x: 3.24, y: 11))
        icon.addCurve(to: CGPoint(x: 11, y: 6), controlPoint1: CGPoint(x: 8.76, y: 11), controlPoint2: CGPoint(x: 11, y: 8.76))
        icon.addCurve(to: CGPoint(x: 6, y: 1), controlPoint1: CGPoint(x: 11, y: 3.24), controlPoint2: CGPoint(x: 8.76, y: 1))
        icon.close()
        icon.move(to: CGPoint(x: 6, y: 0))
        icon.addCurve(to: CGPoint(x: 12, y: 6), controlPoint1: CGPoint(x: 9.31, y: 0), controlPoint2: CGPoint(x: 12, y: 2.69))
        icon.addCurve(to: CGPoint(x: 6, y: 12), controlPoint1: CGPoint(x: 12, y: 9.31), controlPoint2: CGPoint(x: 9.31, y: 12))
        icon.addCurve(to: CGPoint(x: 0, y: 6), controlPoint1: CGPoint(x: 2.69, y: 12), controlPoint2: CGPoint(x: 0, y: 9.31))
        icon.addCurve(to: CGPoint(x: 6, y: 0), controlPoint1: CGPoint(x: 0, y: 2.69), controlPoint2: CGPoint(x: 2.69, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 5.75, y: 2.47))
        icon.addCurve(to: CGPoint(x: 6.25, y: 1.98), controlPoint1: CGPoint(x: 5.75, y: 2.2), controlPoint2: CGPoint(x: 5.98, y: 1.98))
        icon.addCurve(to: CGPoint(x: 6.75, y: 2.47), controlPoint1: CGPoint(x: 6.52, y: 1.98), controlPoint2: CGPoint(x: 6.75, y: 2.2))
        icon.addLine(to: CGPoint(x: 6.75, y: 6.75))
        icon.addLine(to: CGPoint(x: 3.57, y: 6.75))
        icon.addCurve(to: CGPoint(x: 3.07, y: 6.26), controlPoint1: CGPoint(x: 3.3, y: 6.75), controlPoint2: CGPoint(x: 3.07, y: 6.53))
        icon.addCurve(to: CGPoint(x: 3.57, y: 5.78), controlPoint1: CGPoint(x: 3.07, y: 5.99), controlPoint2: CGPoint(x: 3.3, y: 5.78))
        icon.addLine(to: CGPoint(x: 5.75, y: 5.78))
        icon.addLine(to: CGPoint(x: 5.75, y: 2.47))
        icon.close()
        context.saveGState()
        context.translateBy(x: 4, y: 4)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4, y: 4))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallPerson(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 6, y: 0))
        icon.addCurve(to: CGPoint(x: 12, y: 6), controlPoint1: CGPoint(x: 9.31, y: 0), controlPoint2: CGPoint(x: 12, y: 2.69))
        icon.addCurve(to: CGPoint(x: 8.73, y: 11.34), controlPoint1: CGPoint(x: 12, y: 8.32), controlPoint2: CGPoint(x: 10.67, y: 10.34))
        icon.addCurve(to: CGPoint(x: 6, y: 12), controlPoint1: CGPoint(x: 7.91, y: 11.76), controlPoint2: CGPoint(x: 6.98, y: 12))
        icon.addCurve(to: CGPoint(x: 3.27, y: 11.34), controlPoint1: CGPoint(x: 5.02, y: 12), controlPoint2: CGPoint(x: 4.09, y: 11.76))
        icon.addCurve(to: CGPoint(x: 0, y: 6), controlPoint1: CGPoint(x: 1.33, y: 10.34), controlPoint2: CGPoint(x: 0, y: 8.33))
        icon.addCurve(to: CGPoint(x: 6, y: 0), controlPoint1: CGPoint(x: 0, y: 2.69), controlPoint2: CGPoint(x: 2.69, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 8.7, y: 10.09))
        icon.addCurve(to: CGPoint(x: 10.91, y: 6), controlPoint1: CGPoint(x: 10.03, y: 9.21), controlPoint2: CGPoint(x: 10.91, y: 7.71))
        icon.addCurve(to: CGPoint(x: 6, y: 1.09), controlPoint1: CGPoint(x: 10.91, y: 3.29), controlPoint2: CGPoint(x: 8.71, y: 1.09))
        icon.addCurve(to: CGPoint(x: 1.09, y: 6), controlPoint1: CGPoint(x: 3.29, y: 1.09), controlPoint2: CGPoint(x: 1.09, y: 3.29))
        icon.addCurve(to: CGPoint(x: 3.3, y: 10.09), controlPoint1: CGPoint(x: 1.09, y: 7.71), controlPoint2: CGPoint(x: 1.97, y: 9.21))
        icon.addCurve(to: CGPoint(x: 5.45, y: 8.18), controlPoint1: CGPoint(x: 3.44, y: 9.02), controlPoint2: CGPoint(x: 4.34, y: 8.18))
        icon.addLine(to: CGPoint(x: 6.55, y: 8.18))
        icon.addCurve(to: CGPoint(x: 8.7, y: 10.09), controlPoint1: CGPoint(x: 7.66, y: 8.18), controlPoint2: CGPoint(x: 8.56, y: 9.02))
        icon.close()
        icon.move(to: CGPoint(x: 6, y: 3.82))
        icon.addCurve(to: CGPoint(x: 7.64, y: 5.45), controlPoint1: CGPoint(x: 6.9, y: 3.82), controlPoint2: CGPoint(x: 7.64, y: 4.55))
        icon.addCurve(to: CGPoint(x: 6, y: 7.09), controlPoint1: CGPoint(x: 7.64, y: 6.36), controlPoint2: CGPoint(x: 6.9, y: 7.09))
        icon.addCurve(to: CGPoint(x: 4.36, y: 5.45), controlPoint1: CGPoint(x: 5.1, y: 7.09), controlPoint2: CGPoint(x: 4.36, y: 6.36))
        icon.addCurve(to: CGPoint(x: 6, y: 3.82), controlPoint1: CGPoint(x: 4.36, y: 4.55), controlPoint2: CGPoint(x: 5.1, y: 3.82))
        icon.close()
        context.saveGState()
        context.translateBy(x: 4, y: 4)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4, y: 4))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallPlay(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 10, y: 0.57))
        icon.addCurve(to: CGPoint(x: 9.05, y: 0.08), controlPoint1: CGPoint(x: 10, y: 0.13), controlPoint2: CGPoint(x: 9.47, y: -0.15))
        icon.addLine(to: CGPoint(x: 0.3, y: 5.01))
        icon.addCurve(to: CGPoint(x: 0.3, y: 5.99), controlPoint1: CGPoint(x: -0.1, y: 5.23), controlPoint2: CGPoint(x: -0.1, y: 5.77))
        icon.addCurve(to: CGPoint(x: 3.35, y: 7.7), controlPoint1: CGPoint(x: 1.65, y: 6.75), controlPoint2: CGPoint(x: 2.67, y: 7.32))
        icon.addCurve(to: CGPoint(x: 9.05, y: 10.92), controlPoint1: CGPoint(x: 4.62, y: 8.42), controlPoint2: CGPoint(x: 6.52, y: 9.49))
        icon.addCurve(to: CGPoint(x: 10, y: 10.43), controlPoint1: CGPoint(x: 9.47, y: 11.15), controlPoint2: CGPoint(x: 10, y: 10.87))
        icon.addLine(to: CGPoint(x: 10, y: 0.57))
        icon.close()
        context.saveGState()
        context.translateBy(x: 10, y: 10.5)
        context.scaleBy(x: -1, y: 1)
        context.translateBy(x: -5, y: -5.5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 10, y: 10.5))
        icon.apply(CGAffineTransform(scaleX: -1, y: 1))
        icon.apply(CGAffineTransform(translationX: -5, y: -5.5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallPause(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 3.07, y: 0))
        icon.addCurve(to: CGPoint(x: 3.38, y: 0.34), controlPoint1: CGPoint(x: 3.24, y: 0), controlPoint2: CGPoint(x: 3.38, y: 0.15))
        icon.addLine(to: CGPoint(x: 3.38, y: 10.66))
        icon.addCurve(to: CGPoint(x: 3.07, y: 11), controlPoint1: CGPoint(x: 3.38, y: 10.85), controlPoint2: CGPoint(x: 3.24, y: 11))
        icon.addLine(to: CGPoint(x: 0.31, y: 11))
        icon.addCurve(to: CGPoint(x: 0, y: 10.66), controlPoint1: CGPoint(x: 0.14, y: 11), controlPoint2: CGPoint(x: 0, y: 10.85))
        icon.addLine(to: CGPoint(x: 0, y: 0.34))
        icon.addCurve(to: CGPoint(x: 0.31, y: 0), controlPoint1: CGPoint(x: 0, y: 0.15), controlPoint2: CGPoint(x: 0.14, y: 0))
        icon.addLine(to: CGPoint(x: 3.07, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 8.69, y: 0))
        icon.addCurve(to: CGPoint(x: 9, y: 0.34), controlPoint1: CGPoint(x: 8.86, y: 0), controlPoint2: CGPoint(x: 9, y: 0.15))
        icon.addLine(to: CGPoint(x: 9, y: 10.66))
        icon.addCurve(to: CGPoint(x: 8.69, y: 11), controlPoint1: CGPoint(x: 9, y: 10.85), controlPoint2: CGPoint(x: 8.86, y: 11))
        icon.addLine(to: CGPoint(x: 5.93, y: 11))
        icon.addCurve(to: CGPoint(x: 5.63, y: 10.66), controlPoint1: CGPoint(x: 5.76, y: 11), controlPoint2: CGPoint(x: 5.63, y: 10.85))
        icon.addLine(to: CGPoint(x: 5.63, y: 0.34))
        icon.addCurve(to: CGPoint(x: 5.93, y: 0), controlPoint1: CGPoint(x: 5.63, y: 0.15), controlPoint2: CGPoint(x: 5.76, y: 0))
        icon.addLine(to: CGPoint(x: 8.69, y: 0))
        icon.close()
        context.saveGState()
        context.translateBy(x: 5.5, y: 4.5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 5.5, y: 4.5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallPlus(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 5.5, y: 5.5))
        icon.addLine(to: CGPoint(x: 5.5, y: 1))
        icon.addCurve(to: CGPoint(x: 6.5, y: 0), controlPoint1: CGPoint(x: 5.5, y: 0.45), controlPoint2: CGPoint(x: 5.95, y: 0))
        icon.addCurve(to: CGPoint(x: 7.5, y: 1), controlPoint1: CGPoint(x: 7.05, y: 0), controlPoint2: CGPoint(x: 7.5, y: 0.45))
        icon.addLine(to: CGPoint(x: 7.5, y: 5.5))
        icon.addLine(to: CGPoint(x: 12, y: 5.5))
        icon.addCurve(to: CGPoint(x: 13, y: 6.5), controlPoint1: CGPoint(x: 12.55, y: 5.5), controlPoint2: CGPoint(x: 13, y: 5.95))
        icon.addCurve(to: CGPoint(x: 12, y: 7.5), controlPoint1: CGPoint(x: 13, y: 7.05), controlPoint2: CGPoint(x: 12.55, y: 7.5))
        icon.addLine(to: CGPoint(x: 7.5, y: 7.5))
        icon.addLine(to: CGPoint(x: 7.5, y: 12))
        icon.addCurve(to: CGPoint(x: 6.5, y: 13), controlPoint1: CGPoint(x: 7.5, y: 12.55), controlPoint2: CGPoint(x: 7.05, y: 13))
        icon.addCurve(to: CGPoint(x: 5.5, y: 12), controlPoint1: CGPoint(x: 5.95, y: 13), controlPoint2: CGPoint(x: 5.5, y: 12.55))
        icon.addLine(to: CGPoint(x: 5.5, y: 7.5))
        icon.addLine(to: CGPoint(x: 1, y: 7.5))
        icon.addCurve(to: CGPoint(x: 0, y: 6.5), controlPoint1: CGPoint(x: 0.45, y: 7.5), controlPoint2: CGPoint(x: 0, y: 7.05))
        icon.addCurve(to: CGPoint(x: 1, y: 5.5), controlPoint1: CGPoint(x: 0, y: 5.95), controlPoint2: CGPoint(x: 0.45, y: 5.5))
        icon.addLine(to: CGPoint(x: 5.5, y: 5.5))
        icon.close()
        context.saveGState()
        context.translateBy(x: 10, y: 10)
        context.scaleBy(x: -1, y: 1)
        context.translateBy(x: -6.5, y: -6.5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 10, y: 10))
        icon.apply(CGAffineTransform(scaleX: -1, y: 1))
        icon.apply(CGAffineTransform(translationX: -6.5, y: -6.5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallClose(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 5.5, y: 5.5))
        icon.addLine(to: CGPoint(x: 5.5, y: 1))
        icon.addCurve(to: CGPoint(x: 6.5, y: 0), controlPoint1: CGPoint(x: 5.5, y: 0.45), controlPoint2: CGPoint(x: 5.95, y: 0))
        icon.addCurve(to: CGPoint(x: 7.5, y: 1), controlPoint1: CGPoint(x: 7.05, y: 0), controlPoint2: CGPoint(x: 7.5, y: 0.45))
        icon.addLine(to: CGPoint(x: 7.5, y: 5.5))
        icon.addLine(to: CGPoint(x: 12, y: 5.5))
        icon.addCurve(to: CGPoint(x: 13, y: 6.5), controlPoint1: CGPoint(x: 12.55, y: 5.5), controlPoint2: CGPoint(x: 13, y: 5.95))
        icon.addCurve(to: CGPoint(x: 12, y: 7.5), controlPoint1: CGPoint(x: 13, y: 7.05), controlPoint2: CGPoint(x: 12.55, y: 7.5))
        icon.addLine(to: CGPoint(x: 7.5, y: 7.5))
        icon.addLine(to: CGPoint(x: 7.5, y: 12))
        icon.addCurve(to: CGPoint(x: 6.5, y: 13), controlPoint1: CGPoint(x: 7.5, y: 12.55), controlPoint2: CGPoint(x: 7.05, y: 13))
        icon.addCurve(to: CGPoint(x: 5.5, y: 12), controlPoint1: CGPoint(x: 5.95, y: 13), controlPoint2: CGPoint(x: 5.5, y: 12.55))
        icon.addLine(to: CGPoint(x: 5.5, y: 7.5))
        icon.addLine(to: CGPoint(x: 1, y: 7.5))
        icon.addCurve(to: CGPoint(x: 0, y: 6.5), controlPoint1: CGPoint(x: 0.45, y: 7.5), controlPoint2: CGPoint(x: 0, y: 7.05))
        icon.addCurve(to: CGPoint(x: 1, y: 5.5), controlPoint1: CGPoint(x: 0, y: 5.95), controlPoint2: CGPoint(x: 0.45, y: 5.5))
        icon.addLine(to: CGPoint(x: 5.5, y: 5.5))
        icon.close()
        context.saveGState()
        context.translateBy(x: 10, y: 10)
        context.scaleBy(x: -1, y: 1)
        context.rotate(by: 315 * CGFloat.pi/180)
        context.translateBy(x: -6.5, y: -6.5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 10, y: 10))
        icon.apply(CGAffineTransform(scaleX: -1, y: 1))
        icon.apply(CGAffineTransform(rotationAngle: 315 * CGFloat.pi/180))
        icon.apply(CGAffineTransform(translationX: -6.5, y: -6.5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallTask(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 11.06, y: 0.34))
        icon.addCurve(to: CGPoint(x: 12.67, y: 0.34), controlPoint1: CGPoint(x: 11.5, y: -0.11), controlPoint2: CGPoint(x: 12.22, y: -0.11))
        icon.addCurve(to: CGPoint(x: 12.67, y: 2), controlPoint1: CGPoint(x: 13.11, y: 0.8), controlPoint2: CGPoint(x: 13.11, y: 1.54))
        icon.addLine(to: CGPoint(x: 4.9, y: 10))
        icon.addLine(to: CGPoint(x: 0.33, y: 5.3))
        icon.addCurve(to: CGPoint(x: 0.33, y: 3.65), controlPoint1: CGPoint(x: -0.11, y: 4.84), controlPoint2: CGPoint(x: -0.11, y: 4.1))
        icon.addCurve(to: CGPoint(x: 1.94, y: 3.65), controlPoint1: CGPoint(x: 0.78, y: 3.19), controlPoint2: CGPoint(x: 1.5, y: 3.19))
        icon.addLine(to: CGPoint(x: 4.9, y: 6.69))
        icon.addLine(to: CGPoint(x: 11.06, y: 0.34))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3.5, y: 5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3.5, y: 5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallCamera(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 6.49, y: 0))
        icon.addCurve(to: CGPoint(x: 7.87, y: 1.66), controlPoint1: CGPoint(x: 7.25, y: 0), controlPoint2: CGPoint(x: 7.87, y: 0.74))
        icon.addLine(to: CGPoint(x: 7.87, y: 6.23))
        icon.addCurve(to: CGPoint(x: 6.49, y: 7.89), controlPoint1: CGPoint(x: 7.87, y: 7.14), controlPoint2: CGPoint(x: 7.25, y: 7.89))
        icon.addLine(to: CGPoint(x: 1.37, y: 7.89))
        icon.addCurve(to: CGPoint(x: 0, y: 6.23), controlPoint1: CGPoint(x: 0.61, y: 7.89), controlPoint2: CGPoint(x: 0, y: 7.14))
        icon.addLine(to: CGPoint(x: 0, y: 1.66))
        icon.addCurve(to: CGPoint(x: 1.37, y: 0), controlPoint1: CGPoint(x: 0, y: 0.74), controlPoint2: CGPoint(x: 0.61, y: 0))
        icon.addLine(to: CGPoint(x: 6.49, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 12.11, y: 0.12))
        icon.addLine(to: CGPoint(x: 12.24, y: 0.12))
        icon.addLine(to: CGPoint(x: 12.24, y: 8))
        icon.addLine(to: CGPoint(x: 12.11, y: 8))
        icon.addLine(to: CGPoint(x: 8.88, y: 4.88))
        icon.addLine(to: CGPoint(x: 8.9, y: 3.02))
        icon.addLine(to: CGPoint(x: 12.11, y: 0.12))
        icon.close()
        context.saveGState()
        context.translateBy(x: 4, y: 6)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4, y: 6))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallMessage(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 6.77, y: 6.55))
        icon.addCurve(to: CGPoint(x: 8.67, y: 5.74), controlPoint1: CGPoint(x: 7.49, y: 6.55), controlPoint2: CGPoint(x: 8.17, y: 6.26))
        icon.addLine(to: CGPoint(x: 9.36, y: 5.04))
        icon.addLine(to: CGPoint(x: 12.92, y: 8.6))
        icon.addLine(to: CGPoint(x: 0.62, y: 8.6))
        icon.addLine(to: CGPoint(x: 4.19, y: 5.04))
        icon.addLine(to: CGPoint(x: 4.88, y: 5.74))
        icon.addCurve(to: CGPoint(x: 6.77, y: 6.55), controlPoint1: CGPoint(x: 5.38, y: 6.26), controlPoint2: CGPoint(x: 6.06, y: 6.55))
        icon.close()
        icon.move(to: CGPoint(x: 0, y: 0.65))
        icon.addCurve(to: CGPoint(x: 3.57, y: 4.34), controlPoint1: CGPoint(x: 0.56, y: 1.24), controlPoint2: CGPoint(x: 1.73, y: 2.45))
        icon.addLine(to: CGPoint(x: 0, y: 7.91))
        icon.addLine(to: CGPoint(x: 0, y: 0.65))
        icon.close()
        icon.move(to: CGPoint(x: 6.77, y: 5.49))
        icon.addCurve(to: CGPoint(x: 5.51, y: 4.95), controlPoint1: CGPoint(x: 6.29, y: 5.49), controlPoint2: CGPoint(x: 5.85, y: 5.3))
        icon.addLine(to: CGPoint(x: 0.67, y: 0))
        icon.addCurve(to: CGPoint(x: 3.71, y: 0), controlPoint1: CGPoint(x: 1.18, y: 0), controlPoint2: CGPoint(x: 2.1, y: 0))
        icon.addCurve(to: CGPoint(x: 12.87, y: 0.01), controlPoint1: CGPoint(x: 6.91, y: 0), controlPoint2: CGPoint(x: 11.26, y: 0.01))
        icon.addLine(to: CGPoint(x: 8.04, y: 4.95))
        icon.addCurve(to: CGPoint(x: 6.77, y: 5.49), controlPoint1: CGPoint(x: 7.7, y: 5.3), controlPoint2: CGPoint(x: 7.25, y: 5.49))
        icon.close()
        icon.move(to: CGPoint(x: 13.55, y: 7.87))
        icon.addLine(to: CGPoint(x: 9.98, y: 4.3))
        icon.addCurve(to: CGPoint(x: 13.55, y: 0.62), controlPoint1: CGPoint(x: 11.9, y: 2.33), controlPoint2: CGPoint(x: 13.02, y: 1.17))
        icon.addLine(to: CGPoint(x: 13.55, y: 7.87))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3, y: 6)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3, y: 6))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallBlock(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 3.08, y: 4.65))
        icon.addLine(to: CGPoint(x: 7.92, y: 4.65))
        icon.addLine(to: CGPoint(x: 7.92, y: 3.49))
        icon.addCurve(to: CGPoint(x: 5.5, y: 1.16), controlPoint1: CGPoint(x: 7.92, y: 2.2), controlPoint2: CGPoint(x: 6.84, y: 1.16))
        icon.addCurve(to: CGPoint(x: 3.08, y: 3.49), controlPoint1: CGPoint(x: 4.16, y: 1.16), controlPoint2: CGPoint(x: 3.08, y: 2.2))
        icon.addLine(to: CGPoint(x: 3.08, y: 4.65))
        icon.close()
        icon.move(to: CGPoint(x: 9.13, y: 4.66))
        icon.addCurve(to: CGPoint(x: 11, y: 6.65), controlPoint1: CGPoint(x: 10.17, y: 4.72), controlPoint2: CGPoint(x: 11, y: 5.59))
        icon.addLine(to: CGPoint(x: 11, y: 12))
        icon.addCurve(to: CGPoint(x: 9, y: 14), controlPoint1: CGPoint(x: 11, y: 13.1), controlPoint2: CGPoint(x: 10.1, y: 14))
        icon.addLine(to: CGPoint(x: 2, y: 14))
        icon.addCurve(to: CGPoint(x: 0, y: 12), controlPoint1: CGPoint(x: 0.9, y: 14), controlPoint2: CGPoint(x: 0, y: 13.1))
        icon.addLine(to: CGPoint(x: 0, y: 6.65))
        icon.addCurve(to: CGPoint(x: 1.87, y: 4.66), controlPoint1: CGPoint(x: 0, y: 5.59), controlPoint2: CGPoint(x: 0.83, y: 4.72))
        icon.addLine(to: CGPoint(x: 1.87, y: 3.49))
        icon.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 1.87, y: 1.56), controlPoint2: CGPoint(x: 3.5, y: 0))
        icon.addCurve(to: CGPoint(x: 9.13, y: 3.49), controlPoint1: CGPoint(x: 7.5, y: 0), controlPoint2: CGPoint(x: 9.13, y: 1.56))
        icon.addLine(to: CGPoint(x: 9.13, y: 4.66))
        icon.close()
        context.saveGState()
        context.translateBy(x: 4.5, y: 3)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4.5, y: 3))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallQuestion(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 6.5, y: 13))
        icon.addCurve(to: CGPoint(x: 0, y: 6.5), controlPoint1: CGPoint(x: 2.91, y: 13), controlPoint2: CGPoint(x: 0, y: 10.09))
        icon.addCurve(to: CGPoint(x: 6.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.91), controlPoint2: CGPoint(x: 2.91, y: 0))
        icon.addCurve(to: CGPoint(x: 13, y: 6.5), controlPoint1: CGPoint(x: 10.09, y: 0), controlPoint2: CGPoint(x: 13, y: 2.91))
        icon.addCurve(to: CGPoint(x: 6.5, y: 13), controlPoint1: CGPoint(x: 13, y: 10.09), controlPoint2: CGPoint(x: 10.09, y: 13))
        icon.close()
        icon.move(to: CGPoint(x: 3.97, y: 4.88))
        icon.addLine(to: CGPoint(x: 5.41, y: 4.88))
        icon.addCurve(to: CGPoint(x: 6.45, y: 3.9), controlPoint1: CGPoint(x: 5.44, y: 4.29), controlPoint2: CGPoint(x: 5.84, y: 3.9))
        icon.addCurve(to: CGPoint(x: 7.45, y: 4.77), controlPoint1: CGPoint(x: 7.05, y: 3.9), controlPoint2: CGPoint(x: 7.45, y: 4.26))
        icon.addCurve(to: CGPoint(x: 6.56, y: 5.94), controlPoint1: CGPoint(x: 7.45, y: 5.27), controlPoint2: CGPoint(x: 7.25, y: 5.53))
        icon.addCurve(to: CGPoint(x: 5.61, y: 7.67), controlPoint1: CGPoint(x: 5.83, y: 6.36), controlPoint2: CGPoint(x: 5.54, y: 6.84))
        icon.addLine(to: CGPoint(x: 5.62, y: 7.98))
        icon.addLine(to: CGPoint(x: 7.02, y: 7.98))
        icon.addLine(to: CGPoint(x: 7.02, y: 7.7))
        icon.addCurve(to: CGPoint(x: 7.92, y: 6.51), controlPoint1: CGPoint(x: 7.02, y: 7.18), controlPoint2: CGPoint(x: 7.22, y: 6.92))
        icon.addCurve(to: CGPoint(x: 9.06, y: 4.72), controlPoint1: CGPoint(x: 8.67, y: 6.07), controlPoint2: CGPoint(x: 9.06, y: 5.52))
        icon.addCurve(to: CGPoint(x: 6.54, y: 2.67), controlPoint1: CGPoint(x: 9.06, y: 3.51), controlPoint2: CGPoint(x: 8.06, y: 2.67))
        icon.addCurve(to: CGPoint(x: 3.97, y: 4.88), controlPoint1: CGPoint(x: 4.92, y: 2.67), controlPoint2: CGPoint(x: 4, y: 3.58))
        icon.close()
        icon.move(to: CGPoint(x: 6.34, y: 10.51))
        icon.addCurve(to: CGPoint(x: 7.21, y: 9.68), controlPoint1: CGPoint(x: 6.82, y: 10.51), controlPoint2: CGPoint(x: 7.21, y: 10.14))
        icon.addCurve(to: CGPoint(x: 6.34, y: 8.85), controlPoint1: CGPoint(x: 7.21, y: 9.21), controlPoint2: CGPoint(x: 6.82, y: 8.85))
        icon.addCurve(to: CGPoint(x: 5.48, y: 9.68), controlPoint1: CGPoint(x: 5.87, y: 8.85), controlPoint2: CGPoint(x: 5.48, y: 9.21))
        icon.addCurve(to: CGPoint(x: 6.34, y: 10.51), controlPoint1: CGPoint(x: 5.48, y: 10.14), controlPoint2: CGPoint(x: 5.87, y: 10.51))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3.5, y: 3.5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3.5, y: 3.5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallTime(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 7.43, y: 7.81))
        icon.addLine(to: CGPoint(x: 3.42, y: 7.81))
        icon.addCurve(to: CGPoint(x: 2.83, y: 7.21), controlPoint1: CGPoint(x: 3.09, y: 7.81), controlPoint2: CGPoint(x: 2.83, y: 7.54))
        icon.addCurve(to: CGPoint(x: 3.42, y: 6.62), controlPoint1: CGPoint(x: 2.83, y: 6.89), controlPoint2: CGPoint(x: 3.09, y: 6.62))
        icon.addLine(to: CGPoint(x: 6.25, y: 6.62))
        icon.addLine(to: CGPoint(x: 6.25, y: 2.57))
        icon.addCurve(to: CGPoint(x: 6.84, y: 1.98), controlPoint1: CGPoint(x: 6.25, y: 2.24), controlPoint2: CGPoint(x: 6.52, y: 1.98))
        icon.addCurve(to: CGPoint(x: 7.43, y: 2.57), controlPoint1: CGPoint(x: 7.17, y: 1.98), controlPoint2: CGPoint(x: 7.43, y: 2.24))
        icon.addLine(to: CGPoint(x: 7.43, y: 7.81))
        icon.close()
        icon.move(to: CGPoint(x: 6.5, y: 0))
        icon.addCurve(to: CGPoint(x: 0, y: 6.5), controlPoint1: CGPoint(x: 2.91, y: 0), controlPoint2: CGPoint(x: 0, y: 2.91))
        icon.addCurve(to: CGPoint(x: 6.5, y: 13), controlPoint1: CGPoint(x: 0, y: 10.09), controlPoint2: CGPoint(x: 2.91, y: 13))
        icon.addCurve(to: CGPoint(x: 13, y: 6.5), controlPoint1: CGPoint(x: 10.09, y: 13), controlPoint2: CGPoint(x: 13, y: 10.09))
        icon.addCurve(to: CGPoint(x: 6.5, y: 0), controlPoint1: CGPoint(x: 13, y: 2.91), controlPoint2: CGPoint(x: 10.09, y: 0))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3.5, y: 3.5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3.5, y: 3.5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallAdd(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 5.89, y: 5.89))
        icon.addLine(to: CGPoint(x: 3.05, y: 5.89))
        icon.addCurve(to: CGPoint(x: 2.44, y: 6.5), controlPoint1: CGPoint(x: 2.71, y: 5.89), controlPoint2: CGPoint(x: 2.44, y: 6.16))
        icon.addCurve(to: CGPoint(x: 3.05, y: 7.11), controlPoint1: CGPoint(x: 2.44, y: 6.84), controlPoint2: CGPoint(x: 2.71, y: 7.11))
        icon.addLine(to: CGPoint(x: 5.89, y: 7.11))
        icon.addLine(to: CGPoint(x: 5.89, y: 9.95))
        icon.addCurve(to: CGPoint(x: 6.5, y: 10.56), controlPoint1: CGPoint(x: 5.89, y: 10.29), controlPoint2: CGPoint(x: 6.16, y: 10.56))
        icon.addCurve(to: CGPoint(x: 7.11, y: 9.95), controlPoint1: CGPoint(x: 6.84, y: 10.56), controlPoint2: CGPoint(x: 7.11, y: 10.29))
        icon.addLine(to: CGPoint(x: 7.11, y: 7.11))
        icon.addLine(to: CGPoint(x: 9.95, y: 7.11))
        icon.addCurve(to: CGPoint(x: 10.56, y: 6.5), controlPoint1: CGPoint(x: 10.29, y: 7.11), controlPoint2: CGPoint(x: 10.56, y: 6.84))
        icon.addCurve(to: CGPoint(x: 9.95, y: 5.89), controlPoint1: CGPoint(x: 10.56, y: 6.16), controlPoint2: CGPoint(x: 10.29, y: 5.89))
        icon.addLine(to: CGPoint(x: 7.11, y: 5.89))
        icon.addLine(to: CGPoint(x: 7.11, y: 3.05))
        icon.addCurve(to: CGPoint(x: 6.5, y: 2.44), controlPoint1: CGPoint(x: 7.11, y: 2.71), controlPoint2: CGPoint(x: 6.84, y: 2.44))
        icon.addCurve(to: CGPoint(x: 5.89, y: 3.05), controlPoint1: CGPoint(x: 6.16, y: 2.44), controlPoint2: CGPoint(x: 5.89, y: 2.71))
        icon.addLine(to: CGPoint(x: 5.89, y: 5.89))
        icon.close()
        icon.move(to: CGPoint(x: 6.5, y: 13))
        icon.addCurve(to: CGPoint(x: 0, y: 6.5), controlPoint1: CGPoint(x: 2.91, y: 13), controlPoint2: CGPoint(x: 0, y: 10.09))
        icon.addCurve(to: CGPoint(x: 6.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.91), controlPoint2: CGPoint(x: 2.91, y: 0))
        icon.addCurve(to: CGPoint(x: 13, y: 6.5), controlPoint1: CGPoint(x: 10.09, y: 0), controlPoint2: CGPoint(x: 13, y: 2.91))
        icon.addCurve(to: CGPoint(x: 6.5, y: 13), controlPoint1: CGPoint(x: 13, y: 10.09), controlPoint2: CGPoint(x: 10.09, y: 13))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3.5, y: 3.5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3.5, y: 3.5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallInfo(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 6, y: 12))
        icon.addCurve(to: CGPoint(x: 0, y: 6), controlPoint1: CGPoint(x: 2.69, y: 12), controlPoint2: CGPoint(x: 0, y: 9.31))
        icon.addCurve(to: CGPoint(x: 6, y: 0), controlPoint1: CGPoint(x: 0, y: 2.69), controlPoint2: CGPoint(x: 2.69, y: 0))
        icon.addCurve(to: CGPoint(x: 12, y: 6), controlPoint1: CGPoint(x: 9.31, y: 0), controlPoint2: CGPoint(x: 12, y: 2.69))
        icon.addCurve(to: CGPoint(x: 6, y: 12), controlPoint1: CGPoint(x: 12, y: 9.31), controlPoint2: CGPoint(x: 9.31, y: 12))
        icon.close()
        icon.move(to: CGPoint(x: 5.86, y: 3.82))
        icon.addCurve(to: CGPoint(x: 6.55, y: 3.14), controlPoint1: CGPoint(x: 6.24, y: 3.82), controlPoint2: CGPoint(x: 6.55, y: 3.51))
        icon.addCurve(to: CGPoint(x: 5.86, y: 2.45), controlPoint1: CGPoint(x: 6.55, y: 2.76), controlPoint2: CGPoint(x: 6.24, y: 2.45))
        icon.addCurve(to: CGPoint(x: 5.18, y: 3.14), controlPoint1: CGPoint(x: 5.49, y: 2.45), controlPoint2: CGPoint(x: 5.18, y: 2.76))
        icon.addCurve(to: CGPoint(x: 5.86, y: 3.82), controlPoint1: CGPoint(x: 5.18, y: 3.51), controlPoint2: CGPoint(x: 5.49, y: 3.82))
        icon.close()
        icon.move(to: CGPoint(x: 4.91, y: 9.27))
        icon.addLine(to: CGPoint(x: 7.09, y: 9.27))
        icon.addLine(to: CGPoint(x: 7.09, y: 9))
        icon.addLine(to: CGPoint(x: 6.55, y: 9))
        icon.addLine(to: CGPoint(x: 6.55, y: 4.91))
        icon.addLine(to: CGPoint(x: 6.55, y: 4.64))
        icon.addLine(to: CGPoint(x: 5.45, y: 4.64))
        icon.addLine(to: CGPoint(x: 4.91, y: 4.64))
        icon.addLine(to: CGPoint(x: 4.91, y: 4.91))
        icon.addLine(to: CGPoint(x: 5.45, y: 4.91))
        icon.addLine(to: CGPoint(x: 5.45, y: 9))
        icon.addLine(to: CGPoint(x: 4.91, y: 9))
        icon.addLine(to: CGPoint(x: 4.91, y: 9.27))
        icon.close()
        context.saveGState()
        context.translateBy(x: 4, y: 4)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4, y: 4))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallSettings(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 7, y: 9.97))
        icon.addCurve(to: CGPoint(x: 4.03, y: 7), controlPoint1: CGPoint(x: 5.36, y: 9.97), controlPoint2: CGPoint(x: 4.03, y: 8.64))
        icon.addCurve(to: CGPoint(x: 7, y: 4.03), controlPoint1: CGPoint(x: 4.03, y: 5.36), controlPoint2: CGPoint(x: 5.36, y: 4.03))
        icon.addCurve(to: CGPoint(x: 9.97, y: 7), controlPoint1: CGPoint(x: 8.64, y: 4.03), controlPoint2: CGPoint(x: 9.97, y: 5.36))
        icon.addCurve(to: CGPoint(x: 7, y: 9.97), controlPoint1: CGPoint(x: 9.97, y: 8.64), controlPoint2: CGPoint(x: 8.64, y: 9.97))
        icon.move(to: CGPoint(x: 13.66, y: 6.06))
        icon.addLine(to: CGPoint(x: 12.16, y: 5.81))
        icon.addCurve(to: CGPoint(x: 11.84, y: 5.53), controlPoint1: CGPoint(x: 12.01, y: 5.79), controlPoint2: CGPoint(x: 11.89, y: 5.68))
        icon.addCurve(to: CGPoint(x: 11.47, y: 4.6), controlPoint1: CGPoint(x: 11.75, y: 5.2), controlPoint2: CGPoint(x: 11.62, y: 4.89))
        icon.addCurve(to: CGPoint(x: 11.49, y: 4.18), controlPoint1: CGPoint(x: 11.39, y: 4.46), controlPoint2: CGPoint(x: 11.4, y: 4.3))
        icon.addLine(to: CGPoint(x: 12.36, y: 2.93))
        icon.addCurve(to: CGPoint(x: 12.32, y: 2.42), controlPoint1: CGPoint(x: 12.47, y: 2.77), controlPoint2: CGPoint(x: 12.46, y: 2.55))
        icon.addLine(to: CGPoint(x: 11.56, y: 1.66))
        icon.addCurve(to: CGPoint(x: 11.04, y: 1.62), controlPoint1: CGPoint(x: 11.42, y: 1.52), controlPoint2: CGPoint(x: 11.2, y: 1.5))
        icon.addLine(to: CGPoint(x: 9.82, y: 2.5))
        icon.addCurve(to: CGPoint(x: 9.4, y: 2.53), controlPoint1: CGPoint(x: 9.7, y: 2.6), controlPoint2: CGPoint(x: 9.53, y: 2.6))
        icon.addCurve(to: CGPoint(x: 8.46, y: 2.13), controlPoint1: CGPoint(x: 9.1, y: 2.37), controlPoint2: CGPoint(x: 8.79, y: 2.23))
        icon.addCurve(to: CGPoint(x: 8.18, y: 1.82), controlPoint1: CGPoint(x: 8.32, y: 2.08), controlPoint2: CGPoint(x: 8.21, y: 1.97))
        icon.addLine(to: CGPoint(x: 7.92, y: 0.33))
        icon.addCurve(to: CGPoint(x: 7.52, y: 0), controlPoint1: CGPoint(x: 7.89, y: 0.14), controlPoint2: CGPoint(x: 7.72, y: 0))
        icon.addLine(to: CGPoint(x: 6.46, y: 0))
        icon.addCurve(to: CGPoint(x: 6.06, y: 0.34), controlPoint1: CGPoint(x: 6.26, y: 0), controlPoint2: CGPoint(x: 6.09, y: 0.14))
        icon.addLine(to: CGPoint(x: 5.82, y: 1.81))
        icon.addCurve(to: CGPoint(x: 5.53, y: 2.13), controlPoint1: CGPoint(x: 5.79, y: 1.96), controlPoint2: CGPoint(x: 5.68, y: 2.08))
        icon.addCurve(to: CGPoint(x: 4.6, y: 2.51), controlPoint1: CGPoint(x: 5.2, y: 2.23), controlPoint2: CGPoint(x: 4.89, y: 2.35))
        icon.addCurve(to: CGPoint(x: 4.18, y: 2.48), controlPoint1: CGPoint(x: 4.46, y: 2.58), controlPoint2: CGPoint(x: 4.3, y: 2.57))
        icon.addLine(to: CGPoint(x: 2.96, y: 1.62))
        icon.addCurve(to: CGPoint(x: 2.44, y: 1.66), controlPoint1: CGPoint(x: 2.8, y: 1.5), controlPoint2: CGPoint(x: 2.58, y: 1.52))
        icon.addLine(to: CGPoint(x: 1.68, y: 2.42))
        icon.addCurve(to: CGPoint(x: 1.64, y: 2.93), controlPoint1: CGPoint(x: 1.54, y: 2.55), controlPoint2: CGPoint(x: 1.53, y: 2.77))
        icon.addLine(to: CGPoint(x: 2.49, y: 4.16))
        icon.addCurve(to: CGPoint(x: 2.51, y: 4.57), controlPoint1: CGPoint(x: 2.58, y: 4.28), controlPoint2: CGPoint(x: 2.58, y: 4.44))
        icon.addCurve(to: CGPoint(x: 2.13, y: 5.53), controlPoint1: CGPoint(x: 2.35, y: 4.87), controlPoint2: CGPoint(x: 2.23, y: 5.2))
        icon.addCurve(to: CGPoint(x: 1.81, y: 5.82), controlPoint1: CGPoint(x: 2.09, y: 5.68), controlPoint2: CGPoint(x: 1.96, y: 5.79))
        icon.addLine(to: CGPoint(x: 0.34, y: 6.06))
        icon.addCurve(to: CGPoint(x: 0, y: 6.46), controlPoint1: CGPoint(x: 0.14, y: 6.09), controlPoint2: CGPoint(x: 0, y: 6.26))
        icon.addLine(to: CGPoint(x: 0, y: 7.52))
        icon.addCurve(to: CGPoint(x: 0.33, y: 7.92), controlPoint1: CGPoint(x: 0, y: 7.72), controlPoint2: CGPoint(x: 0.14, y: 7.89))
        icon.addLine(to: CGPoint(x: 1.82, y: 8.18))
        icon.addCurve(to: CGPoint(x: 2.13, y: 8.47), controlPoint1: CGPoint(x: 1.97, y: 8.21), controlPoint2: CGPoint(x: 2.08, y: 8.32))
        icon.addCurve(to: CGPoint(x: 2.5, y: 9.4), controlPoint1: CGPoint(x: 2.22, y: 8.79), controlPoint2: CGPoint(x: 2.35, y: 9.1))
        icon.addCurve(to: CGPoint(x: 2.48, y: 9.82), controlPoint1: CGPoint(x: 2.58, y: 9.53), controlPoint2: CGPoint(x: 2.57, y: 9.7))
        icon.addLine(to: CGPoint(x: 1.62, y: 11.04))
        icon.addCurve(to: CGPoint(x: 1.66, y: 11.56), controlPoint1: CGPoint(x: 1.5, y: 11.2), controlPoint2: CGPoint(x: 1.52, y: 11.42))
        icon.addLine(to: CGPoint(x: 2.42, y: 12.32))
        icon.addCurve(to: CGPoint(x: 2.93, y: 12.37), controlPoint1: CGPoint(x: 2.56, y: 12.46), controlPoint2: CGPoint(x: 2.77, y: 12.48))
        icon.addLine(to: CGPoint(x: 4.18, y: 11.51))
        icon.addCurve(to: CGPoint(x: 4.6, y: 11.49), controlPoint1: CGPoint(x: 4.3, y: 11.42), controlPoint2: CGPoint(x: 4.46, y: 11.42))
        icon.addCurve(to: CGPoint(x: 5.53, y: 11.87), controlPoint1: CGPoint(x: 4.89, y: 11.65), controlPoint2: CGPoint(x: 5.2, y: 11.77))
        icon.addCurve(to: CGPoint(x: 5.82, y: 12.19), controlPoint1: CGPoint(x: 5.68, y: 11.91), controlPoint2: CGPoint(x: 5.79, y: 12.03))
        icon.addLine(to: CGPoint(x: 6.06, y: 13.66))
        icon.addCurve(to: CGPoint(x: 6.46, y: 14), controlPoint1: CGPoint(x: 6.09, y: 13.86), controlPoint2: CGPoint(x: 6.26, y: 14))
        icon.addLine(to: CGPoint(x: 7.52, y: 14))
        icon.addCurve(to: CGPoint(x: 7.92, y: 13.66), controlPoint1: CGPoint(x: 7.72, y: 14), controlPoint2: CGPoint(x: 7.89, y: 13.86))
        icon.addLine(to: CGPoint(x: 8.18, y: 12.18))
        icon.addCurve(to: CGPoint(x: 8.46, y: 11.87), controlPoint1: CGPoint(x: 8.21, y: 12.03), controlPoint2: CGPoint(x: 8.32, y: 11.91))
        icon.addCurve(to: CGPoint(x: 9.4, y: 11.47), controlPoint1: CGPoint(x: 8.79, y: 11.77), controlPoint2: CGPoint(x: 9.1, y: 11.63))
        icon.addCurve(to: CGPoint(x: 9.82, y: 11.49), controlPoint1: CGPoint(x: 9.53, y: 11.39), controlPoint2: CGPoint(x: 9.7, y: 11.4))
        icon.addLine(to: CGPoint(x: 11.07, y: 12.36))
        icon.addCurve(to: CGPoint(x: 11.58, y: 12.32), controlPoint1: CGPoint(x: 11.23, y: 12.47), controlPoint2: CGPoint(x: 11.45, y: 12.45))
        icon.addLine(to: CGPoint(x: 12.34, y: 11.56))
        icon.addCurve(to: CGPoint(x: 12.38, y: 11.04), controlPoint1: CGPoint(x: 12.48, y: 11.42), controlPoint2: CGPoint(x: 12.5, y: 11.2))
        icon.addLine(to: CGPoint(x: 11.49, y: 9.82))
        icon.addCurve(to: CGPoint(x: 11.47, y: 9.4), controlPoint1: CGPoint(x: 11.4, y: 9.7), controlPoint2: CGPoint(x: 11.4, y: 9.53))
        icon.addCurve(to: CGPoint(x: 11.85, y: 8.47), controlPoint1: CGPoint(x: 11.62, y: 9.1), controlPoint2: CGPoint(x: 11.75, y: 8.79))
        icon.addCurve(to: CGPoint(x: 12.16, y: 8.18), controlPoint1: CGPoint(x: 11.89, y: 8.32), controlPoint2: CGPoint(x: 12.01, y: 8.21))
        icon.addLine(to: CGPoint(x: 13.66, y: 7.92))
        icon.addCurve(to: CGPoint(x: 14, y: 7.52), controlPoint1: CGPoint(x: 13.86, y: 7.89), controlPoint2: CGPoint(x: 14, y: 7.72))
        icon.addLine(to: CGPoint(x: 14, y: 6.46))
        icon.addCurve(to: CGPoint(x: 13.66, y: 6.06), controlPoint1: CGPoint(x: 14, y: 6.26), controlPoint2: CGPoint(x: 13.86, y: 6.09))
        context.saveGState()
        context.translateBy(x: 3, y: 3)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3, y: 3))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallFavorite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 13.19, y: 5.47))
        icon.addLine(to: CGPoint(x: 9.65, y: 8.06))
        icon.addLine(to: CGPoint(x: 10.93, y: 12.04))
        icon.addCurve(to: CGPoint(x: 10.16, y: 12.63), controlPoint1: CGPoint(x: 10.93, y: 12.04), controlPoint2: CGPoint(x: 11.67, y: 13.71))
        icon.addCurve(to: CGPoint(x: 6.8, y: 10.15), controlPoint1: CGPoint(x: 8.78, y: 11.64), controlPoint2: CGPoint(x: 6.8, y: 10.15))
        icon.addCurve(to: CGPoint(x: 3.36, y: 12.68), controlPoint1: CGPoint(x: 6.8, y: 10.15), controlPoint2: CGPoint(x: 4.73, y: 11.67))
        icon.addCurve(to: CGPoint(x: 2.69, y: 11.98), controlPoint1: CGPoint(x: 1.98, y: 13.69), controlPoint2: CGPoint(x: 2.69, y: 11.98))
        icon.addLine(to: CGPoint(x: 3.96, y: 8.06))
        icon.addLine(to: CGPoint(x: 0.5, y: 5.53))
        icon.addCurve(to: CGPoint(x: 0.71, y: 4.68), controlPoint1: CGPoint(x: 0.5, y: 5.53), controlPoint2: CGPoint(x: -0.76, y: 4.68))
        icon.addCurve(to: CGPoint(x: 5.05, y: 4.68), controlPoint1: CGPoint(x: 2.41, y: 4.68), controlPoint2: CGPoint(x: 5.05, y: 4.68))
        icon.addLine(to: CGPoint(x: 6.43, y: 0.37))
        icon.addCurve(to: CGPoint(x: 6.81, y: 0), controlPoint1: CGPoint(x: 6.43, y: 0.37), controlPoint2: CGPoint(x: 6.54, y: 0))
        icon.addCurve(to: CGPoint(x: 7.2, y: 0.4), controlPoint1: CGPoint(x: 7.1, y: 0), controlPoint2: CGPoint(x: 7.2, y: 0.4))
        icon.addLine(to: CGPoint(x: 8.57, y: 4.68))
        icon.addCurve(to: CGPoint(x: 12.88, y: 4.68), controlPoint1: CGPoint(x: 8.57, y: 4.68), controlPoint2: CGPoint(x: 11.18, y: 4.68))
        icon.addCurve(to: CGPoint(x: 13.19, y: 5.47), controlPoint1: CGPoint(x: 14.27, y: 4.68), controlPoint2: CGPoint(x: 13.19, y: 5.47))
        context.saveGState()
        context.translateBy(x: 3, y: 3.5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3, y: 3.5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallDelete(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 7.39, y: 1.26))
        icon.addLine(to: CGPoint(x: 9.37, y: 1.26))
        icon.addCurve(to: CGPoint(x: 10, y: 1.89), controlPoint1: CGPoint(x: 9.72, y: 1.26), controlPoint2: CGPoint(x: 10, y: 1.54))
        icon.addLine(to: CGPoint(x: 0, y: 1.89))
        icon.addCurve(to: CGPoint(x: 0.63, y: 1.26), controlPoint1: CGPoint(x: 0, y: 1.54), controlPoint2: CGPoint(x: 0.28, y: 1.26))
        icon.addLine(to: CGPoint(x: 2.61, y: 1.26))
        icon.addCurve(to: CGPoint(x: 4.39, y: 0), controlPoint1: CGPoint(x: 2.87, y: 0.53), controlPoint2: CGPoint(x: 3.57, y: 0))
        icon.addLine(to: CGPoint(x: 5.61, y: 0))
        icon.addCurve(to: CGPoint(x: 7.39, y: 1.26), controlPoint1: CGPoint(x: 6.43, y: 0), controlPoint2: CGPoint(x: 7.13, y: 0.53))
        icon.close()
        icon.move(to: CGPoint(x: 0.59, y: 2.65))
        icon.addLine(to: CGPoint(x: 9.39, y: 2.65))
        icon.addLine(to: CGPoint(x: 8.95, y: 12.09))
        icon.addCurve(to: CGPoint(x: 8.16, y: 12.8), controlPoint1: CGPoint(x: 8.95, y: 12.09), controlPoint2: CGPoint(x: 8.78, y: 12.8))
        icon.addLine(to: CGPoint(x: 5.26, y: 12.8))
        icon.addLine(to: CGPoint(x: 4.74, y: 12.8))
        icon.addLine(to: CGPoint(x: 1.84, y: 12.8))
        icon.addCurve(to: CGPoint(x: 1.05, y: 12.09), controlPoint1: CGPoint(x: 1.22, y: 12.8), controlPoint2: CGPoint(x: 1.05, y: 12.09))
        icon.addLine(to: CGPoint(x: 0.59, y: 2.65))
        icon.close()
        context.saveGState()
        context.translateBy(x: 5, y: 3.5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 5, y: 3.5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallBag(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 2.22, y: 3.39))
        icon.addLine(to: CGPoint(x: 2.22, y: 2.83))
        icon.addCurve(to: CGPoint(x: 5, y: 0), controlPoint1: CGPoint(x: 2.22, y: 1.27), controlPoint2: CGPoint(x: 3.47, y: 0))
        icon.addCurve(to: CGPoint(x: 7.78, y: 2.83), controlPoint1: CGPoint(x: 6.53, y: 0), controlPoint2: CGPoint(x: 7.78, y: 1.27))
        icon.addLine(to: CGPoint(x: 7.78, y: 3.39))
        icon.addLine(to: CGPoint(x: 8.72, y: 3.39))
        icon.addCurve(to: CGPoint(x: 9.49, y: 3.52), controlPoint1: CGPoint(x: 9.16, y: 3.39), controlPoint2: CGPoint(x: 9.33, y: 3.44))
        icon.addCurve(to: CGPoint(x: 9.87, y: 3.9), controlPoint1: CGPoint(x: 9.65, y: 3.61), controlPoint2: CGPoint(x: 9.78, y: 3.74))
        icon.addCurve(to: CGPoint(x: 10, y: 4.67), controlPoint1: CGPoint(x: 9.95, y: 4.07), controlPoint2: CGPoint(x: 10, y: 4.23))
        icon.addLine(to: CGPoint(x: 10, y: 11.72))
        icon.addCurve(to: CGPoint(x: 9.87, y: 12.49), controlPoint1: CGPoint(x: 10, y: 12.16), controlPoint2: CGPoint(x: 9.95, y: 12.33))
        icon.addCurve(to: CGPoint(x: 9.49, y: 12.87), controlPoint1: CGPoint(x: 9.78, y: 12.65), controlPoint2: CGPoint(x: 9.65, y: 12.78))
        icon.addCurve(to: CGPoint(x: 8.72, y: 13), controlPoint1: CGPoint(x: 9.33, y: 12.95), controlPoint2: CGPoint(x: 9.16, y: 13))
        icon.addLine(to: CGPoint(x: 1.28, y: 13))
        icon.addCurve(to: CGPoint(x: 0.51, y: 12.87), controlPoint1: CGPoint(x: 0.84, y: 13), controlPoint2: CGPoint(x: 0.67, y: 12.95))
        icon.addCurve(to: CGPoint(x: 0.13, y: 12.49), controlPoint1: CGPoint(x: 0.35, y: 12.78), controlPoint2: CGPoint(x: 0.22, y: 12.65))
        icon.addCurve(to: CGPoint(x: 0, y: 11.72), controlPoint1: CGPoint(x: 0.05, y: 12.33), controlPoint2: CGPoint(x: 0, y: 12.16))
        icon.addLine(to: CGPoint(x: 0, y: 4.67))
        icon.addCurve(to: CGPoint(x: 0.13, y: 3.9), controlPoint1: CGPoint(x: 0, y: 4.23), controlPoint2: CGPoint(x: 0.05, y: 4.07))
        icon.addCurve(to: CGPoint(x: 0.51, y: 3.52), controlPoint1: CGPoint(x: 0.22, y: 3.74), controlPoint2: CGPoint(x: 0.35, y: 3.61))
        icon.addCurve(to: CGPoint(x: 1.28, y: 3.39), controlPoint1: CGPoint(x: 0.67, y: 3.44), controlPoint2: CGPoint(x: 0.84, y: 3.39))
        icon.addLine(to: CGPoint(x: 2.22, y: 3.39))
        icon.close()
        icon.move(to: CGPoint(x: 6.67, y: 3.39))
        icon.addLine(to: CGPoint(x: 6.67, y: 2.83))
        icon.addCurve(to: CGPoint(x: 5, y: 1.13), controlPoint1: CGPoint(x: 6.67, y: 1.89), controlPoint2: CGPoint(x: 5.92, y: 1.13))
        icon.addCurve(to: CGPoint(x: 3.33, y: 2.83), controlPoint1: CGPoint(x: 4.08, y: 1.13), controlPoint2: CGPoint(x: 3.33, y: 1.89))
        icon.addLine(to: CGPoint(x: 3.33, y: 3.39))
        icon.addLine(to: CGPoint(x: 6.67, y: 3.39))
        icon.close()
        context.saveGState()
        context.translateBy(x: 5, y: 3)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 5, y: 3))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallBookmark(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 0, y: 0.48))
        icon.addLine(to: CGPoint(x: 0, y: 10.74))
        icon.addCurve(to: CGPoint(x: 0.45, y: 10.95), controlPoint1: CGPoint(x: 0, y: 10.95), controlPoint2: CGPoint(x: 0.26, y: 11.08))
        icon.addLine(to: CGPoint(x: 4.33, y: 8.23))
        icon.addCurve(to: CGPoint(x: 4.67, y: 8.23), controlPoint1: CGPoint(x: 4.43, y: 8.16), controlPoint2: CGPoint(x: 4.57, y: 8.16))
        icon.addLine(to: CGPoint(x: 8.55, y: 10.95))
        icon.addCurve(to: CGPoint(x: 9, y: 10.74), controlPoint1: CGPoint(x: 8.74, y: 11.08), controlPoint2: CGPoint(x: 9, y: 10.95))
        icon.addLine(to: CGPoint(x: 9, y: 0.48))
        icon.addCurve(to: CGPoint(x: 8.38, y: 0), controlPoint1: CGPoint(x: 9, y: 0.21), controlPoint2: CGPoint(x: 8.72, y: 0))
        icon.addLine(to: CGPoint(x: 0.62, y: 0))
        icon.addCurve(to: CGPoint(x: 0, y: 0.48), controlPoint1: CGPoint(x: 0.28, y: 0), controlPoint2: CGPoint(x: 0, y: 0.21))
        context.saveGState()
        context.translateBy(x: 5.5, y: 5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 5.5, y: 5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallLike(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 6, y: 11))
        icon.addCurve(to: CGPoint(x: 6, y: 1.3), controlPoint1: CGPoint(x: 17.31, y: 3.49), controlPoint2: CGPoint(x: 9.86, y: -2.82))
        icon.addCurve(to: CGPoint(x: 6, y: 11), controlPoint1: CGPoint(x: 2.14, y: -2.82), controlPoint2: CGPoint(x: -5.31, y: 3.49))
        icon.close()
        context.saveGState()
        context.translateBy(x: 4, y: 4.5)
        icon.usesEvenOddFillRule = true
        UIColor(white: 1, alpha: 0).setFill()
        icon.fill()
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4, y: 4.5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallReply(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 7.72, y: 3.49))
        icon.addCurve(to: CGPoint(x: 7.44, y: 3.51), controlPoint1: CGPoint(x: 7.6, y: 3.49), controlPoint2: CGPoint(x: 7.44, y: 3.5))
        icon.addLine(to: CGPoint(x: 7.44, y: 0))
        icon.addLine(to: CGPoint(x: 0, y: 5.61))
        icon.addLine(to: CGPoint(x: 7.44, y: 11.15))
        icon.addLine(to: CGPoint(x: 7.44, y: 7.31))
        icon.addCurve(to: CGPoint(x: 8.37, y: 7.21), controlPoint1: CGPoint(x: 7.44, y: 7.25), controlPoint2: CGPoint(x: 8.02, y: 7.21))
        icon.addCurve(to: CGPoint(x: 14.76, y: 12.38), controlPoint1: CGPoint(x: 11.42, y: 7.21), controlPoint2: CGPoint(x: 13.95, y: 9.4))
        icon.addCurve(to: CGPoint(x: 15, y: 10.66), controlPoint1: CGPoint(x: 14.9, y: 11.83), controlPoint2: CGPoint(x: 15, y: 11.26))
        icon.addCurve(to: CGPoint(x: 7.72, y: 3.49), controlPoint1: CGPoint(x: 15, y: 6.7), controlPoint2: CGPoint(x: 11.75, y: 3.49))
        context.saveGState()
        context.translateBy(x: 2, y: 4)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 2, y: 4))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallVolume(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 13.3, y: 0))
        icon.addCurve(to: CGPoint(x: 12.89, y: 0.87), controlPoint1: CGPoint(x: 12.85, y: -0), controlPoint2: CGPoint(x: 12.6, y: 0.52))
        icon.addCurve(to: CGPoint(x: 14.93, y: 6.67), controlPoint1: CGPoint(x: 14.17, y: 2.46), controlPoint2: CGPoint(x: 14.93, y: 4.48))
        icon.addCurve(to: CGPoint(x: 13.08, y: 12.21), controlPoint1: CGPoint(x: 14.93, y: 8.75), controlPoint2: CGPoint(x: 14.24, y: 10.66))
        icon.addCurve(to: CGPoint(x: 13.93, y: 12.85), controlPoint1: CGPoint(x: 12.65, y: 12.78), controlPoint2: CGPoint(x: 13.51, y: 13.42))
        icon.addCurve(to: CGPoint(x: 16, y: 6.67), controlPoint1: CGPoint(x: 15.22, y: 11.13), controlPoint2: CGPoint(x: 16, y: 8.99))
        icon.addCurve(to: CGPoint(x: 13.72, y: 0.21), controlPoint1: CGPoint(x: 16, y: 4.23), controlPoint2: CGPoint(x: 15.14, y: 1.98))
        icon.addCurve(to: CGPoint(x: 13.3, y: 0), controlPoint1: CGPoint(x: 13.62, y: 0.08), controlPoint2: CGPoint(x: 13.46, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 10.69, y: 1.55))
        icon.addCurve(to: CGPoint(x: 10.26, y: 2.41), controlPoint1: CGPoint(x: 10.23, y: 1.54), controlPoint2: CGPoint(x: 9.98, y: 2.06))
        icon.addCurve(to: CGPoint(x: 11.73, y: 6.67), controlPoint1: CGPoint(x: 11.18, y: 3.59), controlPoint2: CGPoint(x: 11.73, y: 5.06))
        icon.addCurve(to: CGPoint(x: 10.45, y: 10.68), controlPoint1: CGPoint(x: 11.73, y: 8.17), controlPoint2: CGPoint(x: 11.26, y: 9.54))
        icon.addCurve(to: CGPoint(x: 10.56, y: 11.44), controlPoint1: CGPoint(x: 10.26, y: 10.92), controlPoint2: CGPoint(x: 10.31, y: 11.26))
        icon.addCurve(to: CGPoint(x: 11.32, y: 11.29), controlPoint1: CGPoint(x: 10.81, y: 11.62), controlPoint2: CGPoint(x: 11.15, y: 11.55))
        icon.addCurve(to: CGPoint(x: 12.8, y: 6.67), controlPoint1: CGPoint(x: 12.25, y: 9.99), controlPoint2: CGPoint(x: 12.8, y: 8.39))
        icon.addCurve(to: CGPoint(x: 11.1, y: 1.76), controlPoint1: CGPoint(x: 12.8, y: 4.82), controlPoint2: CGPoint(x: 12.16, y: 3.11))
        icon.addCurve(to: CGPoint(x: 10.69, y: 1.55), controlPoint1: CGPoint(x: 11, y: 1.63), controlPoint2: CGPoint(x: 10.85, y: 1.55))
        icon.close()
        icon.move(to: CGPoint(x: 5.87, y: 2.27))
        icon.addLine(to: CGPoint(x: 3.62, y: 4.4))
        icon.addLine(to: CGPoint(x: 1.6, y: 4.4))
        icon.addCurve(to: CGPoint(x: 0, y: 6), controlPoint1: CGPoint(x: 0.72, y: 4.4), controlPoint2: CGPoint(x: 0, y: 5.12))
        icon.addLine(to: CGPoint(x: 0, y: 7.07))
        icon.addCurve(to: CGPoint(x: 1.6, y: 8.67), controlPoint1: CGPoint(x: 0, y: 7.95), controlPoint2: CGPoint(x: 0.72, y: 8.67))
        icon.addLine(to: CGPoint(x: 3.62, y: 8.67))
        icon.addLine(to: CGPoint(x: 5.87, y: 10.8))
        icon.addLine(to: CGPoint(x: 5.87, y: 2.27))
        icon.close()
        icon.move(to: CGPoint(x: 7.86, y: 3.12))
        icon.addCurve(to: CGPoint(x: 7.47, y: 4.02), controlPoint1: CGPoint(x: 7.38, y: 3.11), controlPoint2: CGPoint(x: 7.13, y: 3.68))
        icon.addCurve(to: CGPoint(x: 8.53, y: 6.67), controlPoint1: CGPoint(x: 8.13, y: 4.71), controlPoint2: CGPoint(x: 8.53, y: 5.64))
        icon.addCurve(to: CGPoint(x: 7.67, y: 9.09), controlPoint1: CGPoint(x: 8.53, y: 7.59), controlPoint2: CGPoint(x: 8.21, y: 8.43))
        icon.addCurve(to: CGPoint(x: 7.73, y: 9.86), controlPoint1: CGPoint(x: 7.47, y: 9.32), controlPoint2: CGPoint(x: 7.5, y: 9.67))
        icon.addCurve(to: CGPoint(x: 8.5, y: 9.77), controlPoint1: CGPoint(x: 7.97, y: 10.05), controlPoint2: CGPoint(x: 8.31, y: 10.01))
        icon.addCurve(to: CGPoint(x: 9.6, y: 6.67), controlPoint1: CGPoint(x: 9.18, y: 8.92), controlPoint2: CGPoint(x: 9.6, y: 7.84))
        icon.addCurve(to: CGPoint(x: 8.24, y: 3.29), controlPoint1: CGPoint(x: 9.6, y: 5.36), controlPoint2: CGPoint(x: 9.08, y: 4.17))
        icon.addCurve(to: CGPoint(x: 7.86, y: 3.12), controlPoint1: CGPoint(x: 8.14, y: 3.18), controlPoint2: CGPoint(x: 8.01, y: 3.12))
        icon.close()
        context.saveGState()
        context.translateBy(x: 2, y: 3)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 2, y: 3))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallVolumeMute(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 7, y: 0))
        icon.addLine(to: CGPoint(x: 4.32, y: 2.54))
        icon.addLine(to: CGPoint(x: 1.91, y: 2.54))
        icon.addCurve(to: CGPoint(x: 0, y: 4.45), controlPoint1: CGPoint(x: 0.85, y: 2.54), controlPoint2: CGPoint(x: 0, y: 3.4))
        icon.addLine(to: CGPoint(x: 0, y: 5.73))
        icon.addCurve(to: CGPoint(x: 1.91, y: 7.64), controlPoint1: CGPoint(x: 0, y: 6.78), controlPoint2: CGPoint(x: 0.85, y: 7.64))
        icon.addLine(to: CGPoint(x: 4.32, y: 7.64))
        icon.addLine(to: CGPoint(x: 7, y: 10.18))
        icon.addLine(to: CGPoint(x: 7, y: 0))
        icon.close()
        context.saveGState()
        context.translateBy(x: 6.5, y: 5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 6.5, y: 5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallArrowLeft(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Arrow
        let arrow = UIBezierPath()
        arrow.move(to: CGPoint(x: 6.75, y: 10.47))
        arrow.addCurve(to: CGPoint(x: 6.73, y: 11.75), controlPoint1: CGPoint(x: 7.09, y: 10.83), controlPoint2: CGPoint(x: 7.08, y: 11.38))
        arrow.addCurve(to: CGPoint(x: 5.5, y: 11.73), controlPoint1: CGPoint(x: 6.39, y: 12.09), controlPoint2: CGPoint(x: 5.83, y: 12.08))
        arrow.addLine(to: CGPoint(x: 1.06, y: 7.1))
        arrow.addLine(to: CGPoint(x: 0, y: 5.99))
        arrow.addLine(to: CGPoint(x: 0.15, y: 5.84))
        arrow.addLine(to: CGPoint(x: 1.07, y: 4.88))
        arrow.addCurve(to: CGPoint(x: 5.5, y: 0.25), controlPoint1: CGPoint(x: 4.23, y: 1.58), controlPoint2: CGPoint(x: 5.49, y: 0.26))
        arrow.addCurve(to: CGPoint(x: 6.73, y: 0.27), controlPoint1: CGPoint(x: 5.85, y: -0.09), controlPoint2: CGPoint(x: 6.4, y: -0.08))
        arrow.addCurve(to: CGPoint(x: 6.73, y: 1.52), controlPoint1: CGPoint(x: 7.07, y: 0.62), controlPoint2: CGPoint(x: 7.07, y: 1.17))
        arrow.addLine(to: CGPoint(x: 2.45, y: 5.99))
        arrow.addLine(to: CGPoint(x: 6.75, y: 10.47))
        arrow.close()
        context.saveGState()
        context.translateBy(x: 6.5, y: 4)
        context.restoreGState()
        
        /// Arrow (Outline Mask)
        context.saveGState()
        arrow.apply(CGAffineTransform(translationX: 6.5, y: 4))
        arrow.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Arrow (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallArrowRight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Arrow
        let arrow = UIBezierPath()
        arrow.move(to: CGPoint(x: 0.25, y: 10.47))
        arrow.addLine(to: CGPoint(x: 4.55, y: 5.99))
        arrow.addLine(to: CGPoint(x: 0.27, y: 1.52))
        arrow.addCurve(to: CGPoint(x: 0.27, y: 0.27), controlPoint1: CGPoint(x: -0.07, y: 1.17), controlPoint2: CGPoint(x: -0.07, y: 0.62))
        arrow.addCurve(to: CGPoint(x: 1.5, y: 0.25), controlPoint1: CGPoint(x: 0.6, y: -0.08), controlPoint2: CGPoint(x: 1.15, y: -0.09))
        arrow.addCurve(to: CGPoint(x: 5.93, y: 4.88), controlPoint1: CGPoint(x: 1.51, y: 0.26), controlPoint2: CGPoint(x: 2.77, y: 1.58))
        arrow.addLine(to: CGPoint(x: 6.85, y: 5.84))
        arrow.addLine(to: CGPoint(x: 7, y: 5.99))
        arrow.addLine(to: CGPoint(x: 5.94, y: 7.1))
        arrow.addLine(to: CGPoint(x: 1.5, y: 11.73))
        arrow.addCurve(to: CGPoint(x: 0.27, y: 11.75), controlPoint1: CGPoint(x: 1.17, y: 12.08), controlPoint2: CGPoint(x: 0.61, y: 12.09))
        arrow.addCurve(to: CGPoint(x: 0.25, y: 10.47), controlPoint1: CGPoint(x: -0.08, y: 11.38), controlPoint2: CGPoint(x: -0.09, y: 10.83))
        arrow.close()
        context.saveGState()
        context.translateBy(x: 6.5, y: 4)
        context.restoreGState()
        
        /// Arrow (Outline Mask)
        context.saveGState()
        arrow.apply(CGAffineTransform(translationX: 6.5, y: 4))
        arrow.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Arrow (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallArrowDown(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Arrow
        let arrow = UIBezierPath()
        arrow.move(to: CGPoint(x: 10.47, y: 0.25))
        arrow.addCurve(to: CGPoint(x: 11.75, y: 0.27), controlPoint1: CGPoint(x: 10.83, y: -0.09), controlPoint2: CGPoint(x: 11.38, y: -0.08))
        arrow.addCurve(to: CGPoint(x: 11.73, y: 1.5), controlPoint1: CGPoint(x: 12.09, y: 0.61), controlPoint2: CGPoint(x: 12.08, y: 1.17))
        arrow.addLine(to: CGPoint(x: 7.1, y: 5.94))
        arrow.addLine(to: CGPoint(x: 5.99, y: 7))
        arrow.addLine(to: CGPoint(x: 5.84, y: 6.85))
        arrow.addLine(to: CGPoint(x: 4.88, y: 5.93))
        arrow.addCurve(to: CGPoint(x: 0.25, y: 1.5), controlPoint1: CGPoint(x: 1.58, y: 2.77), controlPoint2: CGPoint(x: 0.26, y: 1.51))
        arrow.addCurve(to: CGPoint(x: 0.27, y: 0.27), controlPoint1: CGPoint(x: -0.09, y: 1.15), controlPoint2: CGPoint(x: -0.08, y: 0.6))
        arrow.addCurve(to: CGPoint(x: 1.52, y: 0.27), controlPoint1: CGPoint(x: 0.62, y: -0.07), controlPoint2: CGPoint(x: 1.17, y: -0.07))
        arrow.addLine(to: CGPoint(x: 5.99, y: 4.55))
        arrow.addLine(to: CGPoint(x: 10.47, y: 0.25))
        arrow.close()
        context.saveGState()
        context.translateBy(x: 4, y: 6.5)
        context.restoreGState()
        
        /// Arrow (Outline Mask)
        context.saveGState()
        arrow.apply(CGAffineTransform(translationX: 4, y: 6.5))
        arrow.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Arrow (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallArrowUp(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Arrow
        let arrow = UIBezierPath()
        arrow.move(to: CGPoint(x: 10.47, y: 6.75))
        arrow.addLine(to: CGPoint(x: 5.99, y: 2.45))
        arrow.addLine(to: CGPoint(x: 1.52, y: 6.73))
        arrow.addCurve(to: CGPoint(x: 0.27, y: 6.73), controlPoint1: CGPoint(x: 1.17, y: 7.07), controlPoint2: CGPoint(x: 0.62, y: 7.07))
        arrow.addCurve(to: CGPoint(x: 0.25, y: 5.5), controlPoint1: CGPoint(x: -0.08, y: 6.4), controlPoint2: CGPoint(x: -0.09, y: 5.85))
        arrow.addCurve(to: CGPoint(x: 4.88, y: 1.07), controlPoint1: CGPoint(x: 0.26, y: 5.49), controlPoint2: CGPoint(x: 1.58, y: 4.23))
        arrow.addLine(to: CGPoint(x: 5.84, y: 0.15))
        arrow.addLine(to: CGPoint(x: 5.99, y: 0))
        arrow.addLine(to: CGPoint(x: 7.1, y: 1.06))
        arrow.addLine(to: CGPoint(x: 11.73, y: 5.5))
        arrow.addCurve(to: CGPoint(x: 11.75, y: 6.73), controlPoint1: CGPoint(x: 12.08, y: 5.83), controlPoint2: CGPoint(x: 12.09, y: 6.39))
        arrow.addCurve(to: CGPoint(x: 10.47, y: 6.75), controlPoint1: CGPoint(x: 11.38, y: 7.08), controlPoint2: CGPoint(x: 10.83, y: 7.09))
        arrow.close()
        context.saveGState()
        context.translateBy(x: 4, y: 6.5)
        context.restoreGState()
        
        /// Arrow (Outline Mask)
        context.saveGState()
        arrow.apply(CGAffineTransform(translationX: 4, y: 6.5))
        arrow.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Arrow (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallCalendar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 1.84, y: 1.1))
        icon.addLine(to: CGPoint(x: 11.66, y: 1.1))
        icon.addCurve(to: CGPoint(x: 12.34, y: 1.77), controlPoint1: CGPoint(x: 12.04, y: 1.1), controlPoint2: CGPoint(x: 12.34, y: 1.4))
        icon.addLine(to: CGPoint(x: 12.34, y: 4.04))
        icon.addLine(to: CGPoint(x: 1.16, y: 4.04))
        icon.addLine(to: CGPoint(x: 1.16, y: 1.77))
        icon.addCurve(to: CGPoint(x: 1.84, y: 1.1), controlPoint1: CGPoint(x: 1.16, y: 1.4), controlPoint2: CGPoint(x: 1.46, y: 1.1))
        icon.move(to: CGPoint(x: 11.93, y: 0))
        icon.addCurve(to: CGPoint(x: 13.5, y: 1.55), controlPoint1: CGPoint(x: 12.8, y: 0), controlPoint2: CGPoint(x: 13.5, y: 0.69))
        icon.addLine(to: CGPoint(x: 13.5, y: 11.39))
        icon.addCurve(to: CGPoint(x: 11.93, y: 12.94), controlPoint1: CGPoint(x: 13.5, y: 12.24), controlPoint2: CGPoint(x: 12.8, y: 12.94))
        icon.addLine(to: CGPoint(x: 1.57, y: 12.94))
        icon.addCurve(to: CGPoint(x: 0, y: 11.39), controlPoint1: CGPoint(x: 0.7, y: 12.94), controlPoint2: CGPoint(x: 0, y: 12.24))
        icon.addLine(to: CGPoint(x: 0, y: 1.55))
        icon.addCurve(to: CGPoint(x: 1.57, y: 0), controlPoint1: CGPoint(x: 0, y: 0.69), controlPoint2: CGPoint(x: 0.7, y: 0))
        icon.addLine(to: CGPoint(x: 11.93, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 2.25, y: 11.2))
        icon.addCurve(to: CGPoint(x: 2.95, y: 10.5), controlPoint1: CGPoint(x: 2.63, y: 11.2), controlPoint2: CGPoint(x: 2.95, y: 10.89))
        icon.addCurve(to: CGPoint(x: 2.25, y: 9.8), controlPoint1: CGPoint(x: 2.95, y: 10.11), controlPoint2: CGPoint(x: 2.63, y: 9.8))
        icon.addCurve(to: CGPoint(x: 1.55, y: 10.5), controlPoint1: CGPoint(x: 1.86, y: 9.8), controlPoint2: CGPoint(x: 1.55, y: 10.11))
        icon.addCurve(to: CGPoint(x: 2.25, y: 11.2), controlPoint1: CGPoint(x: 1.55, y: 10.89), controlPoint2: CGPoint(x: 1.86, y: 11.2))
        icon.close()
        icon.move(to: CGPoint(x: 8.43, y: 11.2))
        icon.addCurve(to: CGPoint(x: 9.13, y: 10.5), controlPoint1: CGPoint(x: 8.82, y: 11.2), controlPoint2: CGPoint(x: 9.13, y: 10.89))
        icon.addCurve(to: CGPoint(x: 8.43, y: 9.8), controlPoint1: CGPoint(x: 9.13, y: 10.11), controlPoint2: CGPoint(x: 8.82, y: 9.8))
        icon.addCurve(to: CGPoint(x: 7.73, y: 10.5), controlPoint1: CGPoint(x: 8.04, y: 9.8), controlPoint2: CGPoint(x: 7.73, y: 10.11))
        icon.addCurve(to: CGPoint(x: 8.43, y: 11.2), controlPoint1: CGPoint(x: 7.73, y: 10.89), controlPoint2: CGPoint(x: 8.04, y: 11.2))
        icon.close()
        icon.move(to: CGPoint(x: 5.34, y: 11.2))
        icon.addCurve(to: CGPoint(x: 6.04, y: 10.5), controlPoint1: CGPoint(x: 5.73, y: 11.2), controlPoint2: CGPoint(x: 6.04, y: 10.89))
        icon.addCurve(to: CGPoint(x: 5.34, y: 9.8), controlPoint1: CGPoint(x: 6.04, y: 10.11), controlPoint2: CGPoint(x: 5.73, y: 9.8))
        icon.addCurve(to: CGPoint(x: 4.64, y: 10.5), controlPoint1: CGPoint(x: 4.95, y: 9.8), controlPoint2: CGPoint(x: 4.64, y: 10.11))
        icon.addCurve(to: CGPoint(x: 5.34, y: 11.2), controlPoint1: CGPoint(x: 4.64, y: 10.89), controlPoint2: CGPoint(x: 4.95, y: 11.2))
        icon.close()
        icon.move(to: CGPoint(x: 5.34, y: 8.9))
        icon.addCurve(to: CGPoint(x: 6.04, y: 8.2), controlPoint1: CGPoint(x: 5.73, y: 8.9), controlPoint2: CGPoint(x: 6.04, y: 8.59))
        icon.addCurve(to: CGPoint(x: 5.34, y: 7.5), controlPoint1: CGPoint(x: 6.04, y: 7.81), controlPoint2: CGPoint(x: 5.73, y: 7.5))
        icon.addCurve(to: CGPoint(x: 4.64, y: 8.2), controlPoint1: CGPoint(x: 4.95, y: 7.5), controlPoint2: CGPoint(x: 4.64, y: 7.81))
        icon.addCurve(to: CGPoint(x: 5.34, y: 8.9), controlPoint1: CGPoint(x: 4.64, y: 8.59), controlPoint2: CGPoint(x: 4.95, y: 8.9))
        icon.close()
        icon.move(to: CGPoint(x: 2.25, y: 8.9))
        icon.addCurve(to: CGPoint(x: 2.95, y: 8.2), controlPoint1: CGPoint(x: 2.63, y: 8.9), controlPoint2: CGPoint(x: 2.95, y: 8.59))
        icon.addCurve(to: CGPoint(x: 2.25, y: 7.5), controlPoint1: CGPoint(x: 2.95, y: 7.81), controlPoint2: CGPoint(x: 2.63, y: 7.5))
        icon.addCurve(to: CGPoint(x: 1.55, y: 8.2), controlPoint1: CGPoint(x: 1.86, y: 7.5), controlPoint2: CGPoint(x: 1.55, y: 7.81))
        icon.addCurve(to: CGPoint(x: 2.25, y: 8.9), controlPoint1: CGPoint(x: 1.55, y: 8.59), controlPoint2: CGPoint(x: 1.86, y: 8.9))
        icon.close()
        icon.move(to: CGPoint(x: 11.53, y: 8.9))
        icon.addCurve(to: CGPoint(x: 12.23, y: 8.2), controlPoint1: CGPoint(x: 11.91, y: 8.9), controlPoint2: CGPoint(x: 12.23, y: 8.59))
        icon.addCurve(to: CGPoint(x: 11.53, y: 7.5), controlPoint1: CGPoint(x: 12.23, y: 7.81), controlPoint2: CGPoint(x: 11.91, y: 7.5))
        icon.addCurve(to: CGPoint(x: 10.83, y: 8.2), controlPoint1: CGPoint(x: 11.14, y: 7.5), controlPoint2: CGPoint(x: 10.83, y: 7.81))
        icon.addCurve(to: CGPoint(x: 11.53, y: 8.9), controlPoint1: CGPoint(x: 10.83, y: 8.59), controlPoint2: CGPoint(x: 11.14, y: 8.9))
        icon.close()
        icon.move(to: CGPoint(x: 8.43, y: 8.9))
        icon.addCurve(to: CGPoint(x: 9.13, y: 8.2), controlPoint1: CGPoint(x: 8.82, y: 8.9), controlPoint2: CGPoint(x: 9.13, y: 8.59))
        icon.addCurve(to: CGPoint(x: 8.43, y: 7.5), controlPoint1: CGPoint(x: 9.13, y: 7.81), controlPoint2: CGPoint(x: 8.82, y: 7.5))
        icon.addCurve(to: CGPoint(x: 7.73, y: 8.2), controlPoint1: CGPoint(x: 8.04, y: 7.5), controlPoint2: CGPoint(x: 7.73, y: 7.81))
        icon.addCurve(to: CGPoint(x: 8.43, y: 8.9), controlPoint1: CGPoint(x: 7.73, y: 8.59), controlPoint2: CGPoint(x: 8.04, y: 8.9))
        icon.close()
        icon.move(to: CGPoint(x: 5.34, y: 6.6))
        icon.addCurve(to: CGPoint(x: 6.04, y: 5.9), controlPoint1: CGPoint(x: 5.73, y: 6.6), controlPoint2: CGPoint(x: 6.04, y: 6.29))
        icon.addCurve(to: CGPoint(x: 5.34, y: 5.2), controlPoint1: CGPoint(x: 6.04, y: 5.51), controlPoint2: CGPoint(x: 5.73, y: 5.2))
        icon.addCurve(to: CGPoint(x: 4.64, y: 5.9), controlPoint1: CGPoint(x: 4.95, y: 5.2), controlPoint2: CGPoint(x: 4.64, y: 5.51))
        icon.addCurve(to: CGPoint(x: 5.34, y: 6.6), controlPoint1: CGPoint(x: 4.64, y: 6.29), controlPoint2: CGPoint(x: 4.95, y: 6.6))
        icon.close()
        icon.move(to: CGPoint(x: 11.53, y: 6.6))
        icon.addCurve(to: CGPoint(x: 12.23, y: 5.9), controlPoint1: CGPoint(x: 11.91, y: 6.6), controlPoint2: CGPoint(x: 12.23, y: 6.29))
        icon.addCurve(to: CGPoint(x: 11.53, y: 5.2), controlPoint1: CGPoint(x: 12.23, y: 5.51), controlPoint2: CGPoint(x: 11.91, y: 5.2))
        icon.addCurve(to: CGPoint(x: 10.83, y: 5.9), controlPoint1: CGPoint(x: 11.14, y: 5.2), controlPoint2: CGPoint(x: 10.83, y: 5.51))
        icon.addCurve(to: CGPoint(x: 11.53, y: 6.6), controlPoint1: CGPoint(x: 10.83, y: 6.29), controlPoint2: CGPoint(x: 11.14, y: 6.6))
        icon.close()
        icon.move(to: CGPoint(x: 8.43, y: 6.6))
        icon.addCurve(to: CGPoint(x: 9.13, y: 5.9), controlPoint1: CGPoint(x: 8.82, y: 6.6), controlPoint2: CGPoint(x: 9.13, y: 6.29))
        icon.addCurve(to: CGPoint(x: 8.43, y: 5.2), controlPoint1: CGPoint(x: 9.13, y: 5.51), controlPoint2: CGPoint(x: 8.82, y: 5.2))
        icon.addCurve(to: CGPoint(x: 7.73, y: 5.9), controlPoint1: CGPoint(x: 8.04, y: 5.2), controlPoint2: CGPoint(x: 7.73, y: 5.51))
        icon.addCurve(to: CGPoint(x: 8.43, y: 6.6), controlPoint1: CGPoint(x: 7.73, y: 6.29), controlPoint2: CGPoint(x: 8.04, y: 6.6))
        icon.close()
        icon.move(to: CGPoint(x: 2.25, y: 6.6))
        icon.addCurve(to: CGPoint(x: 2.95, y: 5.9), controlPoint1: CGPoint(x: 2.63, y: 6.6), controlPoint2: CGPoint(x: 2.95, y: 6.29))
        icon.addCurve(to: CGPoint(x: 2.25, y: 5.2), controlPoint1: CGPoint(x: 2.95, y: 5.51), controlPoint2: CGPoint(x: 2.63, y: 5.2))
        icon.addCurve(to: CGPoint(x: 1.55, y: 5.9), controlPoint1: CGPoint(x: 1.86, y: 5.2), controlPoint2: CGPoint(x: 1.55, y: 5.51))
        icon.addCurve(to: CGPoint(x: 2.25, y: 6.6), controlPoint1: CGPoint(x: 1.55, y: 6.29), controlPoint2: CGPoint(x: 1.86, y: 6.6))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3, y: 4)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3, y: 4))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallEdit(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 0.55, y: 9.07))
        icon.addLine(to: CGPoint(x: 7.73, y: 1.89))
        icon.addLine(to: CGPoint(x: 10.1, y: 4.24))
        icon.addLine(to: CGPoint(x: 2.94, y: 11.45))
        icon.addLine(to: CGPoint(x: 0.61, y: 11.97))
        icon.addCurve(to: CGPoint(x: 0.44, y: 12), controlPoint1: CGPoint(x: 0.55, y: 11.99), controlPoint2: CGPoint(x: 0.5, y: 12))
        icon.addCurve(to: CGPoint(x: 0, y: 11.56), controlPoint1: CGPoint(x: 0.2, y: 12), controlPoint2: CGPoint(x: 0, y: 11.8))
        icon.addCurve(to: CGPoint(x: 0.03, y: 11.39), controlPoint1: CGPoint(x: 0, y: 11.5), controlPoint2: CGPoint(x: 0.01, y: 11.44))
        icon.addLine(to: CGPoint(x: 0.55, y: 9.07))
        icon.close()
        icon.move(to: CGPoint(x: 10.69, y: 0.28))
        icon.addLine(to: CGPoint(x: 11.72, y: 1.3))
        icon.addCurve(to: CGPoint(x: 11.72, y: 2.63), controlPoint1: CGPoint(x: 12.09, y: 1.67), controlPoint2: CGPoint(x: 12.09, y: 2.27))
        icon.addLine(to: CGPoint(x: 11.05, y: 3.3))
        icon.addLine(to: CGPoint(x: 8.68, y: 0.94))
        icon.addLine(to: CGPoint(x: 9.35, y: 0.28))
        icon.addCurve(to: CGPoint(x: 10.02, y: 0), controlPoint1: CGPoint(x: 9.54, y: 0.09), controlPoint2: CGPoint(x: 9.78, y: 0))
        icon.addCurve(to: CGPoint(x: 10.69, y: 0.28), controlPoint1: CGPoint(x: 10.26, y: 0), controlPoint2: CGPoint(x: 10.51, y: 0.09))
        icon.close()
        context.saveGState()
        context.translateBy(x: 4, y: 4)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4, y: 4))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallDone(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 6.5, y: 13))
        icon.addCurve(to: CGPoint(x: 0, y: 6.5), controlPoint1: CGPoint(x: 2.91, y: 13), controlPoint2: CGPoint(x: 0, y: 10.09))
        icon.addCurve(to: CGPoint(x: 6.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.91), controlPoint2: CGPoint(x: 2.91, y: 0))
        icon.addCurve(to: CGPoint(x: 13, y: 6.5), controlPoint1: CGPoint(x: 10.09, y: 0), controlPoint2: CGPoint(x: 13, y: 2.91))
        icon.addCurve(to: CGPoint(x: 6.5, y: 13), controlPoint1: CGPoint(x: 13, y: 10.09), controlPoint2: CGPoint(x: 10.09, y: 13))
        icon.close()
        icon.move(to: CGPoint(x: 9.17, y: 3.76))
        icon.addLine(to: CGPoint(x: 5.29, y: 7.69))
        icon.addLine(to: CGPoint(x: 3.83, y: 6.23))
        icon.addLine(to: CGPoint(x: 2.67, y: 7.37))
        icon.addLine(to: CGPoint(x: 5.3, y: 10))
        icon.addLine(to: CGPoint(x: 10.33, y: 4.9))
        icon.addLine(to: CGPoint(x: 9.17, y: 3.76))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3.5, y: 3.5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3.5, y: 3.5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallCall(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 0.88, y: 4.44))
        icon.addCurve(to: CGPoint(x: 0, y: 1.72), controlPoint1: CGPoint(x: 0.24, y: 3.28), controlPoint2: CGPoint(x: 0, y: 2.35))
        icon.addCurve(to: CGPoint(x: 0.31, y: 0.76), controlPoint1: CGPoint(x: 0, y: 1.09), controlPoint2: CGPoint(x: 0.15, y: 0.91))
        icon.addCurve(to: CGPoint(x: 1.3, y: 0.1), controlPoint1: CGPoint(x: 0.47, y: 0.62), controlPoint2: CGPoint(x: 1.18, y: 0.18))
        icon.addCurve(to: CGPoint(x: 2.17, y: 0.27), controlPoint1: CGPoint(x: 1.42, y: 0.02), controlPoint2: CGPoint(x: 1.88, y: -0.14))
        icon.addCurve(to: CGPoint(x: 3.38, y: 2.08), controlPoint1: CGPoint(x: 2.46, y: 0.69), controlPoint2: CGPoint(x: 3, y: 1.53))
        icon.addCurve(to: CGPoint(x: 3.35, y: 3.42), controlPoint1: CGPoint(x: 3.97, y: 2.87), controlPoint2: CGPoint(x: 3.5, y: 3.21))
        icon.addCurve(to: CGPoint(x: 2.91, y: 4.36), controlPoint1: CGPoint(x: 3.07, y: 3.8), controlPoint2: CGPoint(x: 2.91, y: 3.89))
        icon.addCurve(to: CGPoint(x: 4.52, y: 6.48), controlPoint1: CGPoint(x: 2.91, y: 4.83), controlPoint2: CGPoint(x: 4.21, y: 6.15))
        icon.addCurve(to: CGPoint(x: 6.54, y: 8), controlPoint1: CGPoint(x: 4.83, y: 6.8), controlPoint2: CGPoint(x: 6.13, y: 7.94))
        icon.addCurve(to: CGPoint(x: 7.6, y: 7.53), controlPoint1: CGPoint(x: 6.94, y: 8.07), controlPoint2: CGPoint(x: 7.49, y: 7.64))
        icon.addCurve(to: CGPoint(x: 8.79, y: 7.57), controlPoint1: CGPoint(x: 8.19, y: 7.08), controlPoint2: CGPoint(x: 8.52, y: 7.42))
        icon.addCurve(to: CGPoint(x: 10.67, y: 8.73), controlPoint1: CGPoint(x: 9.06, y: 7.72), controlPoint2: CGPoint(x: 10.29, y: 8.48))
        icon.addCurve(to: CGPoint(x: 11, y: 9.39), controlPoint1: CGPoint(x: 11.02, y: 8.99), controlPoint2: CGPoint(x: 11, y: 9.39))
        icon.addCurve(to: CGPoint(x: 10.17, y: 10.7), controlPoint1: CGPoint(x: 11, y: 9.39), controlPoint2: CGPoint(x: 10.26, y: 10.56))
        icon.addCurve(to: CGPoint(x: 9.19, y: 11), controlPoint1: CGPoint(x: 10.06, y: 10.86), controlPoint2: CGPoint(x: 9.8, y: 11))
        icon.addCurve(to: CGPoint(x: 6.42, y: 10.05), controlPoint1: CGPoint(x: 8.59, y: 11), controlPoint2: CGPoint(x: 7.95, y: 10.89))
        icon.addCurve(to: CGPoint(x: 3.35, y: 7.65), controlPoint1: CGPoint(x: 5.17, y: 9.36), controlPoint2: CGPoint(x: 3.98, y: 8.28))
        icon.addCurve(to: CGPoint(x: 0.88, y: 4.44), controlPoint1: CGPoint(x: 2.71, y: 7.02), controlPoint2: CGPoint(x: 1.61, y: 5.77))
        icon.close()
        context.saveGState()
        context.setAlpha(0.36)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 4.5, y: 4.5)
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4.5, y: 4.5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallNavigation(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 0.5, y: 5.4))
        icon.addLine(to: CGPoint(x: 4.69, y: 5.4))
        icon.addCurve(to: CGPoint(x: 5.19, y: 5.9), controlPoint1: CGPoint(x: 4.97, y: 5.4), controlPoint2: CGPoint(x: 5.19, y: 5.62))
        icon.addLine(to: CGPoint(x: 5.19, y: 10.21))
        icon.addCurve(to: CGPoint(x: 5.69, y: 10.71), controlPoint1: CGPoint(x: 5.19, y: 10.49), controlPoint2: CGPoint(x: 5.42, y: 10.71))
        icon.addCurve(to: CGPoint(x: 6.15, y: 10.42), controlPoint1: CGPoint(x: 5.89, y: 10.71), controlPoint2: CGPoint(x: 6.07, y: 10.6))
        icon.addLine(to: CGPoint(x: 10.63, y: 0.71))
        icon.addCurve(to: CGPoint(x: 10.38, y: 0.05), controlPoint1: CGPoint(x: 10.74, y: 0.46), controlPoint2: CGPoint(x: 10.63, y: 0.16))
        icon.addCurve(to: CGPoint(x: 9.97, y: 0.04), controlPoint1: CGPoint(x: 10.25, y: -0.01), controlPoint2: CGPoint(x: 10.1, y: -0.02))
        icon.addLine(to: CGPoint(x: 0.29, y: 4.44))
        icon.addCurve(to: CGPoint(x: 0.04, y: 5.1), controlPoint1: CGPoint(x: 0.04, y: 4.56), controlPoint2: CGPoint(x: -0.07, y: 4.85))
        icon.addCurve(to: CGPoint(x: 0.5, y: 5.4), controlPoint1: CGPoint(x: 0.13, y: 5.28), controlPoint2: CGPoint(x: 0.3, y: 5.4))
        icon.close()
        context.saveGState()
        context.translateBy(x: 2.7, y: 4.5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 2.7, y: 4.5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallAlert(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 4.87, y: 5.19))
        icon.addLine(to: CGPoint(x: 6.5, y: 0.46))
        icon.addCurve(to: CGPoint(x: 5.89, y: 0.12), controlPoint1: CGPoint(x: 6.62, y: 0.1), controlPoint2: CGPoint(x: 6.15, y: -0.16))
        icon.addLine(to: CGPoint(x: 0.19, y: 6.12))
        icon.addCurve(to: CGPoint(x: 0.72, y: 7.29), controlPoint1: CGPoint(x: -0.23, y: 6.57), controlPoint2: CGPoint(x: 0.1, y: 7.29))
        icon.addLine(to: CGPoint(x: 4.14, y: 7.29))
        icon.addLine(to: CGPoint(x: 1.98, y: 12.52))
        icon.addCurve(to: CGPoint(x: 2.58, y: 12.89), controlPoint1: CGPoint(x: 1.83, y: 12.88), controlPoint2: CGPoint(x: 2.31, y: 13.17))
        icon.addLine(to: CGPoint(x: 8.81, y: 6.37))
        icon.addCurve(to: CGPoint(x: 8.28, y: 5.19), controlPoint1: CGPoint(x: 9.23, y: 5.92), controlPoint2: CGPoint(x: 8.91, y: 5.19))
        icon.addLine(to: CGPoint(x: 4.87, y: 5.19))
        icon.close()
        context.saveGState()
        context.translateBy(x: 6, y: 4)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 6, y: 4))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallMap(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 3.99, y: 5.76))
        icon.addCurve(to: CGPoint(x: 2.31, y: 4.05), controlPoint1: CGPoint(x: 3.06, y: 5.76), controlPoint2: CGPoint(x: 2.31, y: 4.99))
        icon.addCurve(to: CGPoint(x: 3.99, y: 2.34), controlPoint1: CGPoint(x: 2.31, y: 3.11), controlPoint2: CGPoint(x: 3.06, y: 2.34))
        icon.addCurve(to: CGPoint(x: 5.66, y: 4.05), controlPoint1: CGPoint(x: 4.91, y: 2.34), controlPoint2: CGPoint(x: 5.66, y: 3.11))
        icon.addCurve(to: CGPoint(x: 3.99, y: 5.76), controlPoint1: CGPoint(x: 5.66, y: 4.99), controlPoint2: CGPoint(x: 4.91, y: 5.76))
        icon.move(to: CGPoint(x: 4, y: 0))
        icon.addCurve(to: CGPoint(x: 0, y: 4.01), controlPoint1: CGPoint(x: 1.79, y: 0), controlPoint2: CGPoint(x: 0, y: 1.79))
        icon.addCurve(to: CGPoint(x: 4, y: 11), controlPoint1: CGPoint(x: 0, y: 6.22), controlPoint2: CGPoint(x: 3.96, y: 11))
        icon.addLine(to: CGPoint(x: 4, y: 11))
        icon.addCurve(to: CGPoint(x: 8, y: 4.01), controlPoint1: CGPoint(x: 4, y: 11), controlPoint2: CGPoint(x: 8, y: 6.22))
        icon.addCurve(to: CGPoint(x: 4, y: 0), controlPoint1: CGPoint(x: 8, y: 1.79), controlPoint2: CGPoint(x: 6.21, y: 0))
        context.saveGState()
        context.translateBy(x: 6, y: 5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 6, y: 5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallRecievd(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 6.76, y: 5.63))
        icon.addLine(to: CGPoint(x: 1.13, y: 5.63))
        icon.addCurve(to: CGPoint(x: 0, y: 4.5), controlPoint1: CGPoint(x: 0.5, y: 5.63), controlPoint2: CGPoint(x: 0, y: 5.12))
        icon.addCurve(to: CGPoint(x: 1.13, y: 3.38), controlPoint1: CGPoint(x: 0, y: 3.88), controlPoint2: CGPoint(x: 0.5, y: 3.38))
        icon.addLine(to: CGPoint(x: 6.76, y: 3.38))
        icon.addLine(to: CGPoint(x: 6.76, y: 0))
        icon.addLine(to: CGPoint(x: 12.4, y: 4.5))
        icon.addLine(to: CGPoint(x: 6.76, y: 9))
        icon.addLine(to: CGPoint(x: 6.76, y: 5.63))
        icon.close()
        context.saveGState()
        context.translateBy(x: 10.2, y: 10.5)
        context.scaleBy(x: -1, y: 1)
        context.translateBy(x: -6.2, y: -4.5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 10.2, y: 10.5))
        icon.apply(CGAffineTransform(scaleX: -1, y: 1))
        icon.apply(CGAffineTransform(translationX: -6.2, y: -4.5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallLink(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 6, y: 0))
        icon.addCurve(to: CGPoint(x: 12, y: 6), controlPoint1: CGPoint(x: 9.31, y: 0), controlPoint2: CGPoint(x: 12, y: 2.69))
        icon.addCurve(to: CGPoint(x: 6, y: 12), controlPoint1: CGPoint(x: 12, y: 9.31), controlPoint2: CGPoint(x: 9.31, y: 12))
        icon.addCurve(to: CGPoint(x: 0, y: 6), controlPoint1: CGPoint(x: 2.69, y: 12), controlPoint2: CGPoint(x: 0, y: 9.31))
        icon.addCurve(to: CGPoint(x: 6, y: 0), controlPoint1: CGPoint(x: 0, y: 2.69), controlPoint2: CGPoint(x: 2.69, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 6, y: 1.09))
        icon.addCurve(to: CGPoint(x: 5.41, y: 1.37), controlPoint1: CGPoint(x: 5.81, y: 1.09), controlPoint2: CGPoint(x: 5.62, y: 1.18))
        icon.addCurve(to: CGPoint(x: 4.74, y: 2.37), controlPoint1: CGPoint(x: 5.17, y: 1.59), controlPoint2: CGPoint(x: 4.94, y: 1.94))
        icon.addCurve(to: CGPoint(x: 4.31, y: 3.47), controlPoint1: CGPoint(x: 4.6, y: 2.68), controlPoint2: CGPoint(x: 4.48, y: 3.06))
        icon.addLine(to: CGPoint(x: 7.64, y: 3.53))
        icon.addCurve(to: CGPoint(x: 7.26, y: 2.37), controlPoint1: CGPoint(x: 7.52, y: 3.06), controlPoint2: CGPoint(x: 7.4, y: 2.68))
        icon.addCurve(to: CGPoint(x: 6.59, y: 1.37), controlPoint1: CGPoint(x: 7.06, y: 1.94), controlPoint2: CGPoint(x: 6.83, y: 1.59))
        icon.addCurve(to: CGPoint(x: 6, y: 1.09), controlPoint1: CGPoint(x: 6.38, y: 1.18), controlPoint2: CGPoint(x: 6.19, y: 1.09))
        icon.close()
        icon.move(to: CGPoint(x: 1.71, y: 3.47))
        icon.addLine(to: CGPoint(x: 3.24, y: 3.51))
        icon.addCurve(to: CGPoint(x: 3.75, y: 1.92), controlPoint1: CGPoint(x: 3.37, y: 2.92), controlPoint2: CGPoint(x: 3.54, y: 2.38))
        icon.addCurve(to: CGPoint(x: 3.94, y: 1.54), controlPoint1: CGPoint(x: 3.81, y: 1.79), controlPoint2: CGPoint(x: 3.87, y: 1.67))
        icon.addCurve(to: CGPoint(x: 1.71, y: 3.47), controlPoint1: CGPoint(x: 3.03, y: 1.96), controlPoint2: CGPoint(x: 2.26, y: 2.66))
        icon.close()
        icon.move(to: CGPoint(x: 8.25, y: 1.92))
        icon.addCurve(to: CGPoint(x: 8.71, y: 3.47), controlPoint1: CGPoint(x: 8.46, y: 2.38), controlPoint2: CGPoint(x: 8.63, y: 2.92))
        icon.addLine(to: CGPoint(x: 10.25, y: 3.55))
        icon.addCurve(to: CGPoint(x: 8.06, y: 1.54), controlPoint1: CGPoint(x: 9.74, y: 2.67), controlPoint2: CGPoint(x: 8.97, y: 1.96))
        icon.addCurve(to: CGPoint(x: 8.25, y: 1.92), controlPoint1: CGPoint(x: 8.13, y: 1.67), controlPoint2: CGPoint(x: 8.19, y: 1.79))
        icon.close()
        icon.move(to: CGPoint(x: 1.09, y: 6))
        icon.addCurve(to: CGPoint(x: 1.27, y: 7.44), controlPoint1: CGPoint(x: 1.09, y: 6.5), controlPoint2: CGPoint(x: 1.17, y: 7))
        icon.addLine(to: CGPoint(x: 3.07, y: 7.49))
        icon.addCurve(to: CGPoint(x: 2.98, y: 6), controlPoint1: CGPoint(x: 3.01, y: 7), controlPoint2: CGPoint(x: 2.98, y: 6.5))
        icon.addCurve(to: CGPoint(x: 3.12, y: 4.56), controlPoint1: CGPoint(x: 2.98, y: 5.5), controlPoint2: CGPoint(x: 3.01, y: 5))
        icon.addLine(to: CGPoint(x: 1.3, y: 4.56))
        icon.addCurve(to: CGPoint(x: 1.09, y: 6), controlPoint1: CGPoint(x: 1.16, y: 5.03), controlPoint2: CGPoint(x: 1.09, y: 5.51))
        icon.close()
        icon.move(to: CGPoint(x: 4.07, y: 6))
        icon.addCurve(to: CGPoint(x: 4.13, y: 7.44), controlPoint1: CGPoint(x: 4.07, y: 6.47), controlPoint2: CGPoint(x: 4.1, y: 6.94))
        icon.addLine(to: CGPoint(x: 7.82, y: 7.48))
        icon.addCurve(to: CGPoint(x: 7.93, y: 6), controlPoint1: CGPoint(x: 7.9, y: 6.94), controlPoint2: CGPoint(x: 7.93, y: 6.47))
        icon.addCurve(to: CGPoint(x: 7.87, y: 4.56), controlPoint1: CGPoint(x: 7.93, y: 5.53), controlPoint2: CGPoint(x: 7.9, y: 5.06))
        icon.addLine(to: CGPoint(x: 4.17, y: 4.56))
        icon.addCurve(to: CGPoint(x: 4.07, y: 6), controlPoint1: CGPoint(x: 4.1, y: 5.08), controlPoint2: CGPoint(x: 4.07, y: 5.54))
        icon.close()
        icon.move(to: CGPoint(x: 9.02, y: 6))
        icon.addCurve(to: CGPoint(x: 8.88, y: 7.44), controlPoint1: CGPoint(x: 9.02, y: 6.5), controlPoint2: CGPoint(x: 8.99, y: 7))
        icon.addLine(to: CGPoint(x: 10.69, y: 7.47))
        icon.addCurve(to: CGPoint(x: 10.91, y: 6), controlPoint1: CGPoint(x: 10.83, y: 7), controlPoint2: CGPoint(x: 10.91, y: 6.5))
        icon.addCurve(to: CGPoint(x: 10.73, y: 4.56), controlPoint1: CGPoint(x: 10.91, y: 5.5), controlPoint2: CGPoint(x: 10.83, y: 5))
        icon.addLine(to: CGPoint(x: 8.94, y: 4.56))
        icon.addCurve(to: CGPoint(x: 9.02, y: 6), controlPoint1: CGPoint(x: 9, y: 5.04), controlPoint2: CGPoint(x: 9.02, y: 5.52))
        icon.close()
        icon.move(to: CGPoint(x: 4.02, y: 10.59))
        icon.addCurve(to: CGPoint(x: 3.75, y: 10.08), controlPoint1: CGPoint(x: 3.91, y: 10.4), controlPoint2: CGPoint(x: 3.82, y: 10.24))
        icon.addCurve(to: CGPoint(x: 3.29, y: 8.53), controlPoint1: CGPoint(x: 3.54, y: 9.62), controlPoint2: CGPoint(x: 3.37, y: 9.08))
        icon.addLine(to: CGPoint(x: 1.79, y: 8.53))
        icon.addCurve(to: CGPoint(x: 4.02, y: 10.59), controlPoint1: CGPoint(x: 2.33, y: 9.42), controlPoint2: CGPoint(x: 3.13, y: 10.12))
        icon.close()
        icon.move(to: CGPoint(x: 4.74, y: 9.63))
        icon.addCurve(to: CGPoint(x: 5.41, y: 10.63), controlPoint1: CGPoint(x: 4.94, y: 10.06), controlPoint2: CGPoint(x: 5.17, y: 10.41))
        icon.addCurve(to: CGPoint(x: 6, y: 10.91), controlPoint1: CGPoint(x: 5.62, y: 10.82), controlPoint2: CGPoint(x: 5.81, y: 10.91))
        icon.addCurve(to: CGPoint(x: 6.59, y: 10.63), controlPoint1: CGPoint(x: 6.19, y: 10.91), controlPoint2: CGPoint(x: 6.38, y: 10.82))
        icon.addCurve(to: CGPoint(x: 7.26, y: 9.63), controlPoint1: CGPoint(x: 6.83, y: 10.41), controlPoint2: CGPoint(x: 7.06, y: 10.06))
        icon.addCurve(to: CGPoint(x: 7.69, y: 8.53), controlPoint1: CGPoint(x: 7.4, y: 9.32), controlPoint2: CGPoint(x: 7.52, y: 8.94))
        icon.addLine(to: CGPoint(x: 4.38, y: 8.53))
        icon.addCurve(to: CGPoint(x: 4.74, y: 9.63), controlPoint1: CGPoint(x: 4.49, y: 8.97), controlPoint2: CGPoint(x: 4.61, y: 9.34))
        icon.close()
        icon.move(to: CGPoint(x: 8.25, y: 10.08))
        icon.addCurve(to: CGPoint(x: 7.92, y: 10.52), controlPoint1: CGPoint(x: 8.18, y: 10.24), controlPoint2: CGPoint(x: 8.09, y: 10.4))
        icon.addCurve(to: CGPoint(x: 10.29, y: 8.53), controlPoint1: CGPoint(x: 8.9, y: 10.11), controlPoint2: CGPoint(x: 9.72, y: 9.38))
        icon.addLine(to: CGPoint(x: 8.75, y: 8.53))
        icon.addCurve(to: CGPoint(x: 8.25, y: 10.08), controlPoint1: CGPoint(x: 8.63, y: 9.1), controlPoint2: CGPoint(x: 8.46, y: 9.63))
        icon.close()
        context.saveGState()
        context.translateBy(x: 4, y: 4)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4, y: 4))
        icon.addClip()
        
        /// Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallWind(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Combined Shape
        let combinedShape = UIBezierPath()
        combinedShape.move(to: CGPoint(x: 2.21, y: 4.68))
        combinedShape.addLine(to: CGPoint(x: 2.21, y: 3.58))
        combinedShape.addLine(to: CGPoint(x: 11.85, y: 3.58))
        combinedShape.addCurve(to: CGPoint(x: 12.37, y: 3.46), controlPoint1: CGPoint(x: 11.99, y: 3.58), controlPoint2: CGPoint(x: 12.19, y: 3.55))
        combinedShape.addCurve(to: CGPoint(x: 12.89, y: 2.29), controlPoint1: CGPoint(x: 12.7, y: 3.29), controlPoint2: CGPoint(x: 12.89, y: 2.96))
        combinedShape.addCurve(to: CGPoint(x: 11.71, y: 1.11), controlPoint1: CGPoint(x: 12.89, y: 1.53), controlPoint2: CGPoint(x: 12.37, y: 1.11))
        combinedShape.addCurve(to: CGPoint(x: 10.52, y: 2.34), controlPoint1: CGPoint(x: 11.07, y: 1.11), controlPoint2: CGPoint(x: 10.52, y: 1.58))
        combinedShape.addLine(to: CGPoint(x: 9.41, y: 2.34))
        combinedShape.addCurve(to: CGPoint(x: 11.71, y: 0), controlPoint1: CGPoint(x: 9.41, y: 0.93), controlPoint2: CGPoint(x: 10.5, y: 0))
        combinedShape.addCurve(to: CGPoint(x: 14, y: 2.29), controlPoint1: CGPoint(x: 12.94, y: 0), controlPoint2: CGPoint(x: 14, y: 0.86))
        combinedShape.addCurve(to: CGPoint(x: 12.88, y: 4.45), controlPoint1: CGPoint(x: 14, y: 3.36), controlPoint2: CGPoint(x: 13.58, y: 4.08))
        combinedShape.addCurve(to: CGPoint(x: 11.79, y: 4.68), controlPoint1: CGPoint(x: 12.49, y: 4.64), controlPoint2: CGPoint(x: 12.11, y: 4.7))
        combinedShape.addCurve(to: CGPoint(x: 2.21, y: 4.68), controlPoint1: CGPoint(x: 11.77, y: 4.68), controlPoint2: CGPoint(x: 8.58, y: 4.68))
        combinedShape.close()
        combinedShape.move(to: CGPoint(x: 0, y: 6.64))
        combinedShape.addLine(to: CGPoint(x: 0, y: 5.54))
        combinedShape.addLine(to: CGPoint(x: 9.54, y: 5.54))
        combinedShape.addCurve(to: CGPoint(x: 9.58, y: 5.54), controlPoint1: CGPoint(x: 9.55, y: 5.54), controlPoint2: CGPoint(x: 9.55, y: 5.54))
        combinedShape.addCurve(to: CGPoint(x: 10.66, y: 5.78), controlPoint1: CGPoint(x: 9.9, y: 5.52), controlPoint2: CGPoint(x: 10.28, y: 5.58))
        combinedShape.addCurve(to: CGPoint(x: 11.79, y: 7.93), controlPoint1: CGPoint(x: 11.36, y: 6.14), controlPoint2: CGPoint(x: 11.79, y: 6.86))
        combinedShape.addCurve(to: CGPoint(x: 9.49, y: 10.22), controlPoint1: CGPoint(x: 11.79, y: 9.36), controlPoint2: CGPoint(x: 10.73, y: 10.22))
        combinedShape.addCurve(to: CGPoint(x: 7.2, y: 7.88), controlPoint1: CGPoint(x: 8.28, y: 10.22), controlPoint2: CGPoint(x: 7.2, y: 9.29))
        combinedShape.addLine(to: CGPoint(x: 8.3, y: 7.88))
        combinedShape.addCurve(to: CGPoint(x: 9.49, y: 9.11), controlPoint1: CGPoint(x: 8.3, y: 8.64), controlPoint2: CGPoint(x: 8.86, y: 9.11))
        combinedShape.addCurve(to: CGPoint(x: 10.68, y: 7.93), controlPoint1: CGPoint(x: 10.16, y: 9.11), controlPoint2: CGPoint(x: 10.68, y: 8.69))
        combinedShape.addCurve(to: CGPoint(x: 10.16, y: 6.76), controlPoint1: CGPoint(x: 10.68, y: 7.26), controlPoint2: CGPoint(x: 10.48, y: 6.93))
        combinedShape.addCurve(to: CGPoint(x: 9.63, y: 6.64), controlPoint1: CGPoint(x: 9.97, y: 6.67), controlPoint2: CGPoint(x: 9.77, y: 6.64))
        combinedShape.addCurve(to: CGPoint(x: 9.59, y: 6.64), controlPoint1: CGPoint(x: 9.63, y: 6.64), controlPoint2: CGPoint(x: 9.63, y: 6.64))
        combinedShape.addLine(to: CGPoint(x: 0, y: 6.64))
        combinedShape.close()
        context.saveGState()
        context.translateBy(x: 3, y: 5)
        context.restoreGState()
        
        /// Combined Shape (Outline Mask)
        context.saveGState()
        combinedShape.apply(CGAffineTransform(translationX: 3, y: 5))
        combinedShape.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Combined Shape (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallCurrency(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 6.5, y: 0))
        icon.addCurve(to: CGPoint(x: 0, y: 6.5), controlPoint1: CGPoint(x: 2.91, y: 0), controlPoint2: CGPoint(x: 0, y: 2.91))
        icon.addCurve(to: CGPoint(x: 6.5, y: 13), controlPoint1: CGPoint(x: 0, y: 10.09), controlPoint2: CGPoint(x: 2.91, y: 13))
        icon.addCurve(to: CGPoint(x: 13, y: 6.5), controlPoint1: CGPoint(x: 10.09, y: 13), controlPoint2: CGPoint(x: 13, y: 10.09))
        icon.addCurve(to: CGPoint(x: 6.5, y: 0), controlPoint1: CGPoint(x: 13, y: 2.91), controlPoint2: CGPoint(x: 10.09, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 5.78, y: 2.89))
        icon.addLine(to: CGPoint(x: 7.22, y: 2.89))
        icon.addLine(to: CGPoint(x: 7.22, y: 3.61))
        icon.addCurve(to: CGPoint(x: 8.76, y: 5.29), controlPoint1: CGPoint(x: 8.14, y: 3.83), controlPoint2: CGPoint(x: 8.74, y: 4.45))
        icon.addLine(to: CGPoint(x: 7.43, y: 5.29))
        icon.addCurve(to: CGPoint(x: 6.51, y: 4.61), controlPoint1: CGPoint(x: 7.4, y: 4.89), controlPoint2: CGPoint(x: 7.02, y: 4.61))
        icon.addCurve(to: CGPoint(x: 5.68, y: 5.22), controlPoint1: CGPoint(x: 6.01, y: 4.61), controlPoint2: CGPoint(x: 5.68, y: 4.85))
        icon.addCurve(to: CGPoint(x: 6.52, y: 5.83), controlPoint1: CGPoint(x: 5.68, y: 5.53), controlPoint2: CGPoint(x: 5.93, y: 5.71))
        icon.addLine(to: CGPoint(x: 7.25, y: 5.97))
        icon.addCurve(to: CGPoint(x: 8.87, y: 7.59), controlPoint1: CGPoint(x: 8.36, y: 6.18), controlPoint2: CGPoint(x: 8.87, y: 6.69))
        icon.addCurve(to: CGPoint(x: 7.22, y: 9.4), controlPoint1: CGPoint(x: 8.86, y: 8.55), controlPoint2: CGPoint(x: 8.25, y: 9.19))
        icon.addLine(to: CGPoint(x: 7.22, y: 10.11))
        icon.addLine(to: CGPoint(x: 5.78, y: 10.11))
        icon.addLine(to: CGPoint(x: 5.78, y: 9.4))
        icon.addCurve(to: CGPoint(x: 4.14, y: 7.71), controlPoint1: CGPoint(x: 4.77, y: 9.21), controlPoint2: CGPoint(x: 4.15, y: 8.61))
        icon.addLine(to: CGPoint(x: 5.5, y: 7.71))
        icon.addCurve(to: CGPoint(x: 6.55, y: 8.39), controlPoint1: CGPoint(x: 5.54, y: 8.13), controlPoint2: CGPoint(x: 5.95, y: 8.39))
        icon.addCurve(to: CGPoint(x: 7.45, y: 7.76), controlPoint1: CGPoint(x: 7.08, y: 8.39), controlPoint2: CGPoint(x: 7.45, y: 8.13))
        icon.addCurve(to: CGPoint(x: 6.56, y: 7.15), controlPoint1: CGPoint(x: 7.45, y: 7.44), controlPoint2: CGPoint(x: 7.2, y: 7.28))
        icon.addLine(to: CGPoint(x: 5.81, y: 7))
        icon.addCurve(to: CGPoint(x: 4.25, y: 5.35), controlPoint1: CGPoint(x: 4.78, y: 6.8), controlPoint2: CGPoint(x: 4.25, y: 6.24))
        icon.addCurve(to: CGPoint(x: 5.78, y: 3.61), controlPoint1: CGPoint(x: 4.25, y: 4.46), controlPoint2: CGPoint(x: 4.84, y: 3.82))
        icon.addLine(to: CGPoint(x: 5.78, y: 2.89))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3.5, y: 3.5)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3.5, y: 3.5))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallDrip(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 4.01, y: 0.02))
        icon.addLine(to: CGPoint(x: 4.01, y: 0))
        icon.addLine(to: CGPoint(x: 4.01, y: 0.01))
        icon.addLine(to: CGPoint(x: 4, y: 0))
        icon.addLine(to: CGPoint(x: 4, y: 0.02))
        icon.addCurve(to: CGPoint(x: 0.73, y: 6.24), controlPoint1: CGPoint(x: 4, y: 0.02), controlPoint2: CGPoint(x: 0.76, y: 6.19))
        icon.addCurve(to: CGPoint(x: 0, y: 8.69), controlPoint1: CGPoint(x: 0.27, y: 6.94), controlPoint2: CGPoint(x: 0, y: 7.78))
        icon.addCurve(to: CGPoint(x: 4, y: 13), controlPoint1: CGPoint(x: 0, y: 11.07), controlPoint2: CGPoint(x: 1.79, y: 13))
        icon.addCurve(to: CGPoint(x: 8, y: 8.69), controlPoint1: CGPoint(x: 6.21, y: 13), controlPoint2: CGPoint(x: 8, y: 11.07))
        icon.addCurve(to: CGPoint(x: 7.26, y: 6.21), controlPoint1: CGPoint(x: 8, y: 7.76), controlPoint2: CGPoint(x: 7.72, y: 6.91))
        icon.addCurve(to: CGPoint(x: 4.01, y: 0.02), controlPoint1: CGPoint(x: 7.23, y: 6.17), controlPoint2: CGPoint(x: 4.01, y: 0.02))
        context.saveGState()
        context.translateBy(x: 6, y: 3)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 6, y: 3))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallThermometer(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Combined Shape
        let combinedShape = UIBezierPath()
        combinedShape.move(to: CGPoint(x: 1.1, y: 8.65))
        combinedShape.addCurve(to: CGPoint(x: 1.07, y: 8.3), controlPoint1: CGPoint(x: 1.08, y: 8.54), controlPoint2: CGPoint(x: 1.07, y: 8.42))
        combinedShape.addLine(to: CGPoint(x: 1.07, y: 1.96))
        combinedShape.addCurve(to: CGPoint(x: 3.02, y: 0), controlPoint1: CGPoint(x: 1.07, y: 0.87), controlPoint2: CGPoint(x: 1.94, y: 0))
        combinedShape.addCurve(to: CGPoint(x: 4.98, y: 1.96), controlPoint1: CGPoint(x: 4.1, y: 0), controlPoint2: CGPoint(x: 4.98, y: 0.88))
        combinedShape.addLine(to: CGPoint(x: 4.98, y: 8.3))
        combinedShape.addCurve(to: CGPoint(x: 4.95, y: 8.65), controlPoint1: CGPoint(x: 4.98, y: 8.42), controlPoint2: CGPoint(x: 4.97, y: 8.54))
        combinedShape.addCurve(to: CGPoint(x: 6.04, y: 10.98), controlPoint1: CGPoint(x: 5.62, y: 9.2), controlPoint2: CGPoint(x: 6.04, y: 10.04))
        combinedShape.addCurve(to: CGPoint(x: 3.02, y: 14), controlPoint1: CGPoint(x: 6.04, y: 12.65), controlPoint2: CGPoint(x: 4.69, y: 14))
        combinedShape.addCurve(to: CGPoint(x: 0, y: 10.98), controlPoint1: CGPoint(x: 1.35, y: 14), controlPoint2: CGPoint(x: 0, y: 12.65))
        combinedShape.addCurve(to: CGPoint(x: 1.1, y: 8.65), controlPoint1: CGPoint(x: 0, y: 10.04), controlPoint2: CGPoint(x: 0.43, y: 9.2))
        combinedShape.close()
        combinedShape.move(to: CGPoint(x: 2.28, y: 5.48))
        combinedShape.addLine(to: CGPoint(x: 3.76, y: 5.48))
        combinedShape.addLine(to: CGPoint(x: 3.76, y: 1.96))
        combinedShape.addCurve(to: CGPoint(x: 3.02, y: 1.22), controlPoint1: CGPoint(x: 3.76, y: 1.55), controlPoint2: CGPoint(x: 3.43, y: 1.22))
        combinedShape.addCurve(to: CGPoint(x: 2.28, y: 1.96), controlPoint1: CGPoint(x: 2.61, y: 1.22), controlPoint2: CGPoint(x: 2.28, y: 1.55))
        combinedShape.addLine(to: CGPoint(x: 2.28, y: 5.48))
        combinedShape.close()
        context.saveGState()
        context.translateBy(x: 7, y: 3)
        context.restoreGState()
        
        /// Combined Shape (Outline Mask)
        context.saveGState()
        combinedShape.apply(CGAffineTransform(translationX: 7, y: 3))
        combinedShape.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Combined Shape (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallFinish(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 0.51, y: 0))
        icon.addCurve(to: CGPoint(x: 0.01, y: 0.5), controlPoint1: CGPoint(x: 0.23, y: 0), controlPoint2: CGPoint(x: 0.01, y: 0.22))
        icon.addLine(to: CGPoint(x: 0.01, y: 7.41))
        icon.addCurve(to: CGPoint(x: 0.01, y: 7.57), controlPoint1: CGPoint(x: -0, y: 7.47), controlPoint2: CGPoint(x: -0, y: 7.52))
        icon.addLine(to: CGPoint(x: 0.01, y: 11.49))
        icon.addCurve(to: CGPoint(x: 0.25, y: 11.93), controlPoint1: CGPoint(x: 0, y: 11.67), controlPoint2: CGPoint(x: 0.1, y: 11.84))
        icon.addCurve(to: CGPoint(x: 0.76, y: 11.93), controlPoint1: CGPoint(x: 0.41, y: 12.02), controlPoint2: CGPoint(x: 0.6, y: 12.02))
        icon.addCurve(to: CGPoint(x: 1.01, y: 11.49), controlPoint1: CGPoint(x: 0.91, y: 11.84), controlPoint2: CGPoint(x: 1.01, y: 11.67))
        icon.addLine(to: CGPoint(x: 1.01, y: 8))
        icon.addLine(to: CGPoint(x: 10.5, y: 8))
        icon.addCurve(to: CGPoint(x: 11, y: 7.5), controlPoint1: CGPoint(x: 10.78, y: 8), controlPoint2: CGPoint(x: 11, y: 7.77))
        icon.addLine(to: CGPoint(x: 11, y: 0.5))
        icon.addCurve(to: CGPoint(x: 10.5, y: 0), controlPoint1: CGPoint(x: 11, y: 0.22), controlPoint2: CGPoint(x: 10.78, y: 0))
        icon.addLine(to: CGPoint(x: 0.51, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 1.01, y: 1))
        icon.addLine(to: CGPoint(x: 2.51, y: 1))
        icon.addLine(to: CGPoint(x: 2.51, y: 2.5))
        icon.addLine(to: CGPoint(x: 4, y: 2.5))
        icon.addLine(to: CGPoint(x: 4, y: 1))
        icon.addLine(to: CGPoint(x: 5.5, y: 1))
        icon.addLine(to: CGPoint(x: 5.5, y: 2.5))
        icon.addLine(to: CGPoint(x: 7, y: 2.5))
        icon.addLine(to: CGPoint(x: 7, y: 1))
        icon.addLine(to: CGPoint(x: 8.5, y: 1))
        icon.addLine(to: CGPoint(x: 8.5, y: 2.5))
        icon.addLine(to: CGPoint(x: 10, y: 2.5))
        icon.addLine(to: CGPoint(x: 10, y: 4))
        icon.addLine(to: CGPoint(x: 8.5, y: 4))
        icon.addLine(to: CGPoint(x: 8.5, y: 5.5))
        icon.addLine(to: CGPoint(x: 10, y: 5.5))
        icon.addLine(to: CGPoint(x: 10, y: 7))
        icon.addLine(to: CGPoint(x: 8.5, y: 7))
        icon.addLine(to: CGPoint(x: 8.5, y: 5.5))
        icon.addLine(to: CGPoint(x: 7, y: 5.5))
        icon.addLine(to: CGPoint(x: 7, y: 7))
        icon.addLine(to: CGPoint(x: 5.5, y: 7))
        icon.addLine(to: CGPoint(x: 5.5, y: 5.5))
        icon.addLine(to: CGPoint(x: 4, y: 5.5))
        icon.addLine(to: CGPoint(x: 4, y: 7))
        icon.addLine(to: CGPoint(x: 2.51, y: 7))
        icon.addLine(to: CGPoint(x: 2.51, y: 5.5))
        icon.addLine(to: CGPoint(x: 1.01, y: 5.5))
        icon.addLine(to: CGPoint(x: 1.01, y: 4))
        icon.addLine(to: CGPoint(x: 2.51, y: 4))
        icon.addLine(to: CGPoint(x: 2.51, y: 2.5))
        icon.addLine(to: CGPoint(x: 1.01, y: 2.5))
        icon.addLine(to: CGPoint(x: 1.01, y: 1))
        icon.close()
        icon.move(to: CGPoint(x: 2.51, y: 4))
        icon.addLine(to: CGPoint(x: 2.51, y: 5.5))
        icon.addLine(to: CGPoint(x: 4, y: 5.5))
        icon.addLine(to: CGPoint(x: 4, y: 4))
        icon.addLine(to: CGPoint(x: 2.51, y: 4))
        icon.close()
        icon.move(to: CGPoint(x: 4, y: 4))
        icon.addLine(to: CGPoint(x: 5.5, y: 4))
        icon.addLine(to: CGPoint(x: 5.5, y: 2.5))
        icon.addLine(to: CGPoint(x: 4, y: 2.5))
        icon.addLine(to: CGPoint(x: 4, y: 4))
        icon.close()
        icon.move(to: CGPoint(x: 5.5, y: 4))
        icon.addLine(to: CGPoint(x: 5.5, y: 5.5))
        icon.addLine(to: CGPoint(x: 7, y: 5.5))
        icon.addLine(to: CGPoint(x: 7, y: 4))
        icon.addLine(to: CGPoint(x: 5.5, y: 4))
        icon.close()
        icon.move(to: CGPoint(x: 7, y: 4))
        icon.addLine(to: CGPoint(x: 8.5, y: 4))
        icon.addLine(to: CGPoint(x: 8.5, y: 2.5))
        icon.addLine(to: CGPoint(x: 7, y: 2.5))
        icon.addLine(to: CGPoint(x: 7, y: 4))
        icon.close()
        context.saveGState()
        context.translateBy(x: 4.5, y: 4)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 4.5, y: 4))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallComment(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 5.63, y: 11.12))
        icon.addCurve(to: CGPoint(x: 4.61, y: 11.24), controlPoint1: CGPoint(x: 5.24, y: 11.09), controlPoint2: CGPoint(x: 5.01, y: 11.12))
        icon.addCurve(to: CGPoint(x: 2.39, y: 12), controlPoint1: CGPoint(x: 4.14, y: 11.38), controlPoint2: CGPoint(x: 3.4, y: 12))
        icon.addCurve(to: CGPoint(x: 3.34, y: 10.62), controlPoint1: CGPoint(x: 2.33, y: 12), controlPoint2: CGPoint(x: 3.34, y: 11.21))
        icon.addCurve(to: CGPoint(x: 3.34, y: 10.4), controlPoint1: CGPoint(x: 3.34, y: 10.54), controlPoint2: CGPoint(x: 3.34, y: 10.47))
        icon.addCurve(to: CGPoint(x: 0, y: 5.62), controlPoint1: CGPoint(x: 1.34, y: 9.42), controlPoint2: CGPoint(x: 0, y: 7.64))
        icon.addCurve(to: CGPoint(x: 7, y: 0), controlPoint1: CGPoint(x: 0, y: 2.51), controlPoint2: CGPoint(x: 3.13, y: 0))
        icon.addCurve(to: CGPoint(x: 14, y: 5.62), controlPoint1: CGPoint(x: 10.87, y: 0), controlPoint2: CGPoint(x: 14, y: 2.51))
        icon.addCurve(to: CGPoint(x: 7, y: 11.23), controlPoint1: CGPoint(x: 14, y: 8.72), controlPoint2: CGPoint(x: 10.87, y: 11.23))
        icon.addCurve(to: CGPoint(x: 5.63, y: 11.12), controlPoint1: CGPoint(x: 6.53, y: 11.23), controlPoint2: CGPoint(x: 6.08, y: 11.19))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3, y: 4)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3, y: 4))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmallEye(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 6.5, y: 0))
        icon.addCurve(to: CGPoint(x: 0.09, y: 3.99), controlPoint1: CGPoint(x: 2.64, y: 0), controlPoint2: CGPoint(x: 0.14, y: 3.91))
        icon.addCurve(to: CGPoint(x: 0, y: 4.25), controlPoint1: CGPoint(x: 0.03, y: 4.06), controlPoint2: CGPoint(x: 0, y: 4.15))
        icon.addCurve(to: CGPoint(x: 0.07, y: 4.48), controlPoint1: CGPoint(x: 0, y: 4.33), controlPoint2: CGPoint(x: 0.02, y: 4.41))
        icon.addCurve(to: CGPoint(x: 0.07, y: 4.48), controlPoint1: CGPoint(x: 0.07, y: 4.48), controlPoint2: CGPoint(x: 0.07, y: 4.48))
        icon.addCurve(to: CGPoint(x: 6.5, y: 8.5), controlPoint1: CGPoint(x: 0.08, y: 4.5), controlPoint2: CGPoint(x: 2.17, y: 8.5))
        icon.addCurve(to: CGPoint(x: 12.92, y: 4.49), controlPoint1: CGPoint(x: 10.81, y: 8.5), controlPoint2: CGPoint(x: 12.9, y: 4.54))
        icon.addCurve(to: CGPoint(x: 12.93, y: 4.48), controlPoint1: CGPoint(x: 12.93, y: 4.49), controlPoint2: CGPoint(x: 12.93, y: 4.48))
        icon.addCurve(to: CGPoint(x: 13, y: 4.25), controlPoint1: CGPoint(x: 12.98, y: 4.41), controlPoint2: CGPoint(x: 13, y: 4.33))
        icon.addCurve(to: CGPoint(x: 12.91, y: 3.99), controlPoint1: CGPoint(x: 13, y: 4.15), controlPoint2: CGPoint(x: 12.97, y: 4.06))
        icon.addCurve(to: CGPoint(x: 12.91, y: 3.99), controlPoint1: CGPoint(x: 12.91, y: 3.99), controlPoint2: CGPoint(x: 12.91, y: 3.99))
        icon.addCurve(to: CGPoint(x: 6.5, y: 0), controlPoint1: CGPoint(x: 12.86, y: 3.91), controlPoint2: CGPoint(x: 10.36, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 6.5, y: 1.27))
        icon.addCurve(to: CGPoint(x: 9.53, y: 4.25), controlPoint1: CGPoint(x: 8.18, y: 1.27), controlPoint2: CGPoint(x: 9.53, y: 2.61))
        icon.addCurve(to: CGPoint(x: 6.5, y: 7.23), controlPoint1: CGPoint(x: 9.53, y: 5.89), controlPoint2: CGPoint(x: 8.18, y: 7.23))
        icon.addCurve(to: CGPoint(x: 3.47, y: 4.25), controlPoint1: CGPoint(x: 4.82, y: 7.23), controlPoint2: CGPoint(x: 3.47, y: 5.89))
        icon.addCurve(to: CGPoint(x: 6.5, y: 1.27), controlPoint1: CGPoint(x: 3.47, y: 2.61), controlPoint2: CGPoint(x: 4.82, y: 1.27))
        icon.close()
        icon.move(to: CGPoint(x: 6.5, y: 2.98))
        icon.addCurve(to: CGPoint(x: 5.2, y: 4.25), controlPoint1: CGPoint(x: 5.78, y: 2.98), controlPoint2: CGPoint(x: 5.2, y: 3.55))
        icon.addCurve(to: CGPoint(x: 6.5, y: 5.52), controlPoint1: CGPoint(x: 5.2, y: 4.95), controlPoint2: CGPoint(x: 5.78, y: 5.52))
        icon.addCurve(to: CGPoint(x: 7.8, y: 4.25), controlPoint1: CGPoint(x: 7.22, y: 5.52), controlPoint2: CGPoint(x: 7.8, y: 4.95))
        icon.addCurve(to: CGPoint(x: 6.5, y: 2.98), controlPoint1: CGPoint(x: 7.8, y: 3.55), controlPoint2: CGPoint(x: 7.22, y: 2.98))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3.5, y: 6)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3.5, y: 6))
        icon.addClip()
        
        /// • Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_AssetsCountersSmall(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 22), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 22)
        
        /// Background
        let background = UIBezierPath()
        background.move(to: CGPoint(x: 9, y: 18))
        background.addCurve(to: CGPoint(x: 18, y: 9), controlPoint1: CGPoint(x: 13.97, y: 18), controlPoint2: CGPoint(x: 18, y: 13.97))
        background.addCurve(to: CGPoint(x: 9, y: 0), controlPoint1: CGPoint(x: 18, y: 4.03), controlPoint2: CGPoint(x: 13.97, y: 0))
        background.addCurve(to: CGPoint(x: 0, y: 9), controlPoint1: CGPoint(x: 4.03, y: 0), controlPoint2: CGPoint(x: 0, y: 4.03))
        background.addCurve(to: CGPoint(x: 9, y: 18), controlPoint1: CGPoint(x: 0, y: 13.97), controlPoint2: CGPoint(x: 4.03, y: 18))
        background.close()
        context.saveGState()
        context.translateBy(x: 1, y: 2)
        background.usesEvenOddFillRule = true
        UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
        background.fill()
        context.restoreGState()
        
        /// Count
        let count = NSMutableAttributedString(string: "0")
        count.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: count.length))
        count.addAttribute(.kern, value: 0.07, range: NSRange(location: 0, length: count.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 13
            paragraphStyle.minimumLineHeight = 13
            count.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: count.length))
        }
        count.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: count.length))
        context.saveGState()
        count.draw(in: CGRect(x: 6.5, y: 4.5, width: 7, height: 15))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_AssetsCountersNormal(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 25, height: 22), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 25, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 25, y: resizedFrame.height / 22)
        
        /// Background
        let background = UIBezierPath()
        background.move(to: CGPoint(x: 9, y: 0))
        background.addLine(to: CGPoint(x: 16, y: 0))
        background.addCurve(to: CGPoint(x: 25, y: 9), controlPoint1: CGPoint(x: 20.97, y: 0), controlPoint2: CGPoint(x: 25, y: 4.03))
        background.addLine(to: CGPoint(x: 25, y: 9))
        background.addCurve(to: CGPoint(x: 16, y: 18), controlPoint1: CGPoint(x: 25, y: 13.97), controlPoint2: CGPoint(x: 20.97, y: 18))
        background.addLine(to: CGPoint(x: 9, y: 18))
        background.addCurve(to: CGPoint(x: 0, y: 9), controlPoint1: CGPoint(x: 4.03, y: 18), controlPoint2: CGPoint(x: 0, y: 13.97))
        background.addLine(to: CGPoint(x: 0, y: 9))
        background.addCurve(to: CGPoint(x: 9, y: 0), controlPoint1: CGPoint(x: 0, y: 4.03), controlPoint2: CGPoint(x: 4.03, y: 0))
        background.close()
        context.saveGState()
        context.translateBy(x: 0, y: 2)
        background.usesEvenOddFillRule = true
        UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
        background.fill()
        context.restoreGState()
        
        /// Count
        let count = NSMutableAttributedString(string: "00")
        count.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: count.length))
        count.addAttribute(.kern, value: 0.07, range: NSRange(location: 0, length: count.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 13
            paragraphStyle.minimumLineHeight = 13
            count.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: count.length))
        }
        count.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: count.length))
        context.saveGState()
        count.draw(at: CGPoint(x: 5.5, y: 4.5))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_AssetsActionsSearchClear(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 22), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 22)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 8, y: 6.96))
        icon.addLine(to: CGPoint(x: 5.75, y: 4.71))
        icon.addCurve(to: CGPoint(x: 4.71, y: 4.71), controlPoint1: CGPoint(x: 5.47, y: 4.43), controlPoint2: CGPoint(x: 5, y: 4.43))
        icon.addCurve(to: CGPoint(x: 4.71, y: 5.75), controlPoint1: CGPoint(x: 4.43, y: 5), controlPoint2: CGPoint(x: 4.43, y: 5.47))
        icon.addLine(to: CGPoint(x: 6.96, y: 8))
        icon.addLine(to: CGPoint(x: 4.71, y: 10.25))
        icon.addCurve(to: CGPoint(x: 4.71, y: 11.29), controlPoint1: CGPoint(x: 4.43, y: 10.53), controlPoint2: CGPoint(x: 4.43, y: 11))
        icon.addCurve(to: CGPoint(x: 5.75, y: 11.29), controlPoint1: CGPoint(x: 5, y: 11.57), controlPoint2: CGPoint(x: 5.47, y: 11.57))
        icon.addLine(to: CGPoint(x: 8, y: 9.04))
        icon.addLine(to: CGPoint(x: 10.25, y: 11.29))
        icon.addCurve(to: CGPoint(x: 11.29, y: 11.29), controlPoint1: CGPoint(x: 10.53, y: 11.57), controlPoint2: CGPoint(x: 11, y: 11.57))
        icon.addCurve(to: CGPoint(x: 11.29, y: 10.25), controlPoint1: CGPoint(x: 11.57, y: 11), controlPoint2: CGPoint(x: 11.57, y: 10.53))
        icon.addLine(to: CGPoint(x: 9.04, y: 8))
        icon.addLine(to: CGPoint(x: 11.29, y: 5.75))
        icon.addCurve(to: CGPoint(x: 11.29, y: 4.71), controlPoint1: CGPoint(x: 11.57, y: 5.47), controlPoint2: CGPoint(x: 11.57, y: 5))
        icon.addCurve(to: CGPoint(x: 10.25, y: 4.71), controlPoint1: CGPoint(x: 11, y: 4.43), controlPoint2: CGPoint(x: 10.53, y: 4.43))
        icon.addLine(to: CGPoint(x: 8, y: 6.96))
        icon.close()
        icon.move(to: CGPoint(x: 8, y: 16))
        icon.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 3.58, y: 16), controlPoint2: CGPoint(x: 0, y: 12.42))
        icon.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 0, y: 3.58), controlPoint2: CGPoint(x: 3.58, y: 0))
        icon.addCurve(to: CGPoint(x: 16, y: 8), controlPoint1: CGPoint(x: 12.42, y: 0), controlPoint2: CGPoint(x: 16, y: 3.58))
        icon.addCurve(to: CGPoint(x: 8, y: 16), controlPoint1: CGPoint(x: 16, y: 12.42), controlPoint2: CGPoint(x: 12.42, y: 16))
        icon.close()
        context.saveGState()
        context.translateBy(x: 2, y: 3)
        icon.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.025, brightness: 0.8, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_AssetsActionsSearchDictation(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 22), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 22)
        
        /// Dictation
        let dictation = UIBezierPath()
        dictation.move(to: CGPoint(x: 6, y: 0))
        dictation.addLine(to: CGPoint(x: 6, y: 0))
        dictation.addCurve(to: CGPoint(x: 9, y: 3), controlPoint1: CGPoint(x: 7.66, y: 0), controlPoint2: CGPoint(x: 9, y: 1.34))
        dictation.addLine(to: CGPoint(x: 9, y: 10))
        dictation.addCurve(to: CGPoint(x: 6, y: 13), controlPoint1: CGPoint(x: 9, y: 11.66), controlPoint2: CGPoint(x: 7.66, y: 13))
        dictation.addLine(to: CGPoint(x: 6, y: 13))
        dictation.addCurve(to: CGPoint(x: 3, y: 10), controlPoint1: CGPoint(x: 4.34, y: 13), controlPoint2: CGPoint(x: 3, y: 11.66))
        dictation.addLine(to: CGPoint(x: 3, y: 3))
        dictation.addCurve(to: CGPoint(x: 6, y: 0), controlPoint1: CGPoint(x: 3, y: 1.34), controlPoint2: CGPoint(x: 4.34, y: 0))
        dictation.close()
        dictation.move(to: CGPoint(x: 11.25, y: 6.5))
        dictation.addCurve(to: CGPoint(x: 10.5, y: 7.25), controlPoint1: CGPoint(x: 10.84, y: 6.5), controlPoint2: CGPoint(x: 10.5, y: 6.84))
        dictation.addLine(to: CGPoint(x: 10.5, y: 10))
        dictation.addCurve(to: CGPoint(x: 6, y: 14.5), controlPoint1: CGPoint(x: 10.5, y: 12.49), controlPoint2: CGPoint(x: 8.49, y: 14.5))
        dictation.addCurve(to: CGPoint(x: 1.5, y: 10), controlPoint1: CGPoint(x: 3.51, y: 14.5), controlPoint2: CGPoint(x: 1.5, y: 12.49))
        dictation.addLine(to: CGPoint(x: 1.5, y: 7.25))
        dictation.addCurve(to: CGPoint(x: 0.75, y: 6.5), controlPoint1: CGPoint(x: 1.5, y: 6.84), controlPoint2: CGPoint(x: 1.16, y: 6.5))
        dictation.addCurve(to: CGPoint(x: 0, y: 7.25), controlPoint1: CGPoint(x: 0.34, y: 6.5), controlPoint2: CGPoint(x: 0, y: 6.84))
        dictation.addLine(to: CGPoint(x: 0, y: 10))
        dictation.addCurve(to: CGPoint(x: 5.25, y: 15.95), controlPoint1: CGPoint(x: 0, y: 13.02), controlPoint2: CGPoint(x: 2.25, y: 15.57))
        dictation.addLine(to: CGPoint(x: 5.25, y: 17.5))
        dictation.addLine(to: CGPoint(x: 3.25, y: 17.5))
        dictation.addCurve(to: CGPoint(x: 2.5, y: 18.25), controlPoint1: CGPoint(x: 2.84, y: 17.5), controlPoint2: CGPoint(x: 2.5, y: 17.84))
        dictation.addCurve(to: CGPoint(x: 3.25, y: 19), controlPoint1: CGPoint(x: 2.5, y: 18.66), controlPoint2: CGPoint(x: 2.84, y: 19))
        dictation.addLine(to: CGPoint(x: 8.75, y: 19))
        dictation.addCurve(to: CGPoint(x: 9.5, y: 18.25), controlPoint1: CGPoint(x: 9.16, y: 19), controlPoint2: CGPoint(x: 9.5, y: 18.66))
        dictation.addCurve(to: CGPoint(x: 8.75, y: 17.5), controlPoint1: CGPoint(x: 9.5, y: 17.84), controlPoint2: CGPoint(x: 9.16, y: 17.5))
        dictation.addLine(to: CGPoint(x: 6.75, y: 17.5))
        dictation.addLine(to: CGPoint(x: 6.75, y: 15.95))
        dictation.addCurve(to: CGPoint(x: 12, y: 10), controlPoint1: CGPoint(x: 9.75, y: 15.57), controlPoint2: CGPoint(x: 12, y: 13.02))
        dictation.addLine(to: CGPoint(x: 12, y: 7.25))
        dictation.addCurve(to: CGPoint(x: 11.25, y: 6.5), controlPoint1: CGPoint(x: 12, y: 6.84), controlPoint2: CGPoint(x: 11.66, y: 6.5))
        dictation.addLine(to: CGPoint(x: 11.25, y: 6.5))
        dictation.close()
        context.saveGState()
        context.translateBy(x: 4, y: 1.5)
        dictation.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.025, brightness: 0.8, alpha: 1).setFill()
        dictation.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_AssetsActions_Empty(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 30)
        
        /// Shape
        let shape = UIBezierPath()
        shape.move(to: CGPoint.zero)
        shape.addLine(to: CGPoint(x: 28, y: 0))
        shape.addLine(to: CGPoint(x: 28, y: 30))
        shape.addLine(to: CGPoint(x: 0, y: 30))
        shape.addLine(to: CGPoint.zero)
        shape.close()
        context.saveGState()
        shape.usesEvenOddFillRule = true
        UIColor(white: 1, alpha: 0).setFill()
        shape.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_AssetsActionsRemove(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 30)
        
        /// Circle
        let circle = UIBezierPath()
        circle.move(to: CGPoint(x: 12, y: 24))
        circle.addCurve(to: CGPoint(x: 24, y: 12), controlPoint1: CGPoint(x: 18.63, y: 24), controlPoint2: CGPoint(x: 24, y: 18.63))
        circle.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 24, y: 5.37), controlPoint2: CGPoint(x: 18.63, y: 0))
        circle.addCurve(to: CGPoint(x: 0, y: 12), controlPoint1: CGPoint(x: 5.37, y: 0), controlPoint2: CGPoint(x: 0, y: 5.37))
        circle.addCurve(to: CGPoint(x: 12, y: 24), controlPoint1: CGPoint(x: 0, y: 18.63), controlPoint2: CGPoint(x: 5.37, y: 24))
        circle.close()
        context.saveGState()
        context.translateBy(x: 2, y: 3)
        circle.usesEvenOddFillRule = true
        context.saveGState()
        context.beginPath()
        context.addRect(circle.bounds.insetBy(dx: -1, dy: -4))
        context.clip(using: .evenOdd)
        context.translateBy(x: -26, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 26, y: 3)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.05).cgColor)
        }
        UIColor.black.setFill()
        circle.fill()
        context.restoreGState()
        context.saveGState()
        context.beginPath()
        context.addRect(circle.bounds.insetBy(dx: -1, dy: -2))
        context.clip(using: .evenOdd)
        context.translateBy(x: -26, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 26, y: 1)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.08).cgColor)
        }
        UIColor.black.setFill()
        circle.fill()
        context.restoreGState()
        context.saveGState()
        context.beginPath()
        context.addRect(circle.bounds.insetBy(dx: -8, dy: -11))
        context.clip(using: .evenOdd)
        context.translateBy(x: -33, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 33, y: 3)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 8 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.08).cgColor)
        }
        UIColor.black.setFill()
        circle.fill()
        context.restoreGState()
        context.restoreGState()
        
        /// Circle
        let circle2 = UIBezierPath()
        circle2.move(to: CGPoint(x: 12, y: 24))
        circle2.addCurve(to: CGPoint(x: 24, y: 12), controlPoint1: CGPoint(x: 18.63, y: 24), controlPoint2: CGPoint(x: 24, y: 18.63))
        circle2.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 24, y: 5.37), controlPoint2: CGPoint(x: 18.63, y: 0))
        circle2.addCurve(to: CGPoint(x: 0, y: 12), controlPoint1: CGPoint(x: 5.37, y: 0), controlPoint2: CGPoint(x: 0, y: 5.37))
        circle2.addCurve(to: CGPoint(x: 12, y: 24), controlPoint1: CGPoint(x: 0, y: 18.63), controlPoint2: CGPoint(x: 5.37, y: 24))
        circle2.close()
        context.saveGState()
        context.translateBy(x: 2, y: 3)
        circle2.usesEvenOddFillRule = true
        UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
        circle2.fill()
        context.restoreGState()
        
        /// Minus
        let minus = UIBezierPath()
        minus.move(to: CGPoint(x: 1, y: 0))
        minus.addLine(to: CGPoint(x: 15, y: 0))
        minus.addCurve(to: CGPoint(x: 16, y: 1), controlPoint1: CGPoint(x: 15.55, y: 0), controlPoint2: CGPoint(x: 16, y: 0.45))
        minus.addLine(to: CGPoint(x: 16, y: 1))
        minus.addCurve(to: CGPoint(x: 15, y: 2), controlPoint1: CGPoint(x: 16, y: 1.55), controlPoint2: CGPoint(x: 15.55, y: 2))
        minus.addLine(to: CGPoint(x: 1, y: 2))
        minus.addCurve(to: CGPoint(x: 0, y: 1), controlPoint1: CGPoint(x: 0.45, y: 2), controlPoint2: CGPoint(x: 0, y: 1.55))
        minus.addLine(to: CGPoint(x: 0, y: 1))
        minus.addCurve(to: CGPoint(x: 1, y: 0), controlPoint1: CGPoint(x: 0, y: 0.45), controlPoint2: CGPoint(x: 0.45, y: 0))
        minus.close()
        context.saveGState()
        context.translateBy(x: 6, y: 14)
        minus.usesEvenOddFillRule = true
        UIColor.white.setFill()
        minus.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_AssetsActionsAdd(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 30)
        
        /// Circle
        let circle = UIBezierPath()
        circle.move(to: CGPoint(x: 13, y: 26))
        circle.addCurve(to: CGPoint(x: 26, y: 13), controlPoint1: CGPoint(x: 20.18, y: 26), controlPoint2: CGPoint(x: 26, y: 20.18))
        circle.addCurve(to: CGPoint(x: 13, y: 0), controlPoint1: CGPoint(x: 26, y: 5.82), controlPoint2: CGPoint(x: 20.18, y: 0))
        circle.addCurve(to: CGPoint(x: 0, y: 13), controlPoint1: CGPoint(x: 5.82, y: 0), controlPoint2: CGPoint(x: 0, y: 5.82))
        circle.addCurve(to: CGPoint(x: 13, y: 26), controlPoint1: CGPoint(x: 0, y: 20.18), controlPoint2: CGPoint(x: 5.82, y: 26))
        circle.close()
        context.saveGState()
        context.translateBy(x: 1, y: 2)
        context.restoreGState()
        
        /// Circle (Outline Mask)
        context.saveGState()
        circle.apply(CGAffineTransform(translationX: 1, y: 2))
        circle.addClip()
        
        /// • Action Fill
        // Warning: New symbols are not supported.
        
        /// Plus
        let plus = UIBezierPath()
        plus.move(to: CGPoint(x: 7, y: 7))
        plus.addLine(to: CGPoint(x: 7, y: 1))
        plus.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 7, y: 0.45), controlPoint2: CGPoint(x: 7.45, y: 0))
        plus.addCurve(to: CGPoint(x: 9, y: 1), controlPoint1: CGPoint(x: 8.55, y: 0), controlPoint2: CGPoint(x: 9, y: 0.45))
        plus.addLine(to: CGPoint(x: 9, y: 7))
        plus.addLine(to: CGPoint(x: 15, y: 7))
        plus.addCurve(to: CGPoint(x: 16, y: 8), controlPoint1: CGPoint(x: 15.55, y: 7), controlPoint2: CGPoint(x: 16, y: 7.45))
        plus.addCurve(to: CGPoint(x: 15, y: 9), controlPoint1: CGPoint(x: 16, y: 8.55), controlPoint2: CGPoint(x: 15.55, y: 9))
        plus.addLine(to: CGPoint(x: 9, y: 9))
        plus.addLine(to: CGPoint(x: 9, y: 15))
        plus.addCurve(to: CGPoint(x: 8, y: 16), controlPoint1: CGPoint(x: 9, y: 15.55), controlPoint2: CGPoint(x: 8.55, y: 16))
        plus.addCurve(to: CGPoint(x: 7, y: 15), controlPoint1: CGPoint(x: 7.45, y: 16), controlPoint2: CGPoint(x: 7, y: 15.55))
        plus.addLine(to: CGPoint(x: 7, y: 9))
        plus.addLine(to: CGPoint(x: 1, y: 9))
        plus.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 0.45, y: 9), controlPoint2: CGPoint(x: 0, y: 8.55))
        plus.addCurve(to: CGPoint(x: 1, y: 7), controlPoint1: CGPoint(x: 0, y: 7.45), controlPoint2: CGPoint(x: 0.45, y: 7))
        plus.addLine(to: CGPoint(x: 7, y: 7))
        plus.close()
        context.saveGState()
        context.translateBy(x: 6, y: 7)
        plus.usesEvenOddFillRule = true
        UIColor.white.setFill()
        plus.fill()
        context.restoreGState()
        
        context.restoreGState()
        // End Circle (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_AssetsActionsInfoAccent(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 30)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 10.88, y: 7.25))
        icon.addCurve(to: CGPoint(x: 12.25, y: 5.87), controlPoint1: CGPoint(x: 11.63, y: 7.25), controlPoint2: CGPoint(x: 12.25, y: 6.63))
        icon.addCurve(to: CGPoint(x: 10.88, y: 4.5), controlPoint1: CGPoint(x: 12.25, y: 5.12), controlPoint2: CGPoint(x: 11.63, y: 4.5))
        icon.addCurve(to: CGPoint(x: 9.5, y: 5.87), controlPoint1: CGPoint(x: 10.12, y: 4.5), controlPoint2: CGPoint(x: 9.5, y: 5.12))
        icon.addCurve(to: CGPoint(x: 10.88, y: 7.25), controlPoint1: CGPoint(x: 9.5, y: 6.63), controlPoint2: CGPoint(x: 10.12, y: 7.25))
        icon.close()
        icon.move(to: CGPoint(x: 10, y: 8.5))
        icon.addLine(to: CGPoint(x: 12, y: 8.5))
        icon.addLine(to: CGPoint(x: 12, y: 16.5))
        icon.addLine(to: CGPoint(x: 13, y: 16.5))
        icon.addLine(to: CGPoint(x: 13, y: 17))
        icon.addLine(to: CGPoint(x: 9, y: 17))
        icon.addLine(to: CGPoint(x: 9, y: 16.5))
        icon.addLine(to: CGPoint(x: 10, y: 16.5))
        icon.addLine(to: CGPoint(x: 10, y: 9))
        icon.addLine(to: CGPoint(x: 9, y: 9))
        icon.addLine(to: CGPoint(x: 9, y: 8.5))
        icon.addLine(to: CGPoint(x: 10, y: 8.5))
        icon.close()
        icon.move(to: CGPoint(x: 11, y: 21))
        icon.addLine(to: CGPoint(x: 11, y: 21))
        icon.addCurve(to: CGPoint(x: 21, y: 11), controlPoint1: CGPoint(x: 16.52, y: 21), controlPoint2: CGPoint(x: 21, y: 16.52))
        icon.addCurve(to: CGPoint(x: 11, y: 1), controlPoint1: CGPoint(x: 21, y: 5.48), controlPoint2: CGPoint(x: 16.52, y: 1))
        icon.addCurve(to: CGPoint(x: 1, y: 11), controlPoint1: CGPoint(x: 5.48, y: 1), controlPoint2: CGPoint(x: 1, y: 5.48))
        icon.addCurve(to: CGPoint(x: 11, y: 21), controlPoint1: CGPoint(x: 1, y: 16.52), controlPoint2: CGPoint(x: 5.48, y: 21))
        icon.addLine(to: CGPoint(x: 11, y: 21))
        icon.close()
        icon.move(to: CGPoint(x: 11, y: 22))
        icon.addLine(to: CGPoint(x: 11, y: 22))
        icon.addCurve(to: CGPoint(x: 0, y: 11), controlPoint1: CGPoint(x: 4.92, y: 22), controlPoint2: CGPoint(x: 0, y: 17.08))
        icon.addCurve(to: CGPoint(x: 11, y: 0), controlPoint1: CGPoint(x: 0, y: 4.93), controlPoint2: CGPoint(x: 4.92, y: 0))
        icon.addCurve(to: CGPoint(x: 22, y: 11), controlPoint1: CGPoint(x: 17.08, y: 0), controlPoint2: CGPoint(x: 22, y: 4.93))
        icon.addCurve(to: CGPoint(x: 11, y: 22), controlPoint1: CGPoint(x: 22, y: 17.08), controlPoint2: CGPoint(x: 17.08, y: 22))
        icon.addLine(to: CGPoint(x: 11, y: 22))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3, y: 4)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3, y: 4))
        icon.addClip()
        
        /// • Action Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_AssetsActionsPlus2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 30)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 11, y: 0))
        icon.addCurve(to: CGPoint(x: 22, y: 11), controlPoint1: CGPoint(x: 17.08, y: 0), controlPoint2: CGPoint(x: 22, y: 4.92))
        icon.addCurve(to: CGPoint(x: 11, y: 22), controlPoint1: CGPoint(x: 22, y: 17.08), controlPoint2: CGPoint(x: 17.08, y: 22))
        icon.addCurve(to: CGPoint(x: 0, y: 11), controlPoint1: CGPoint(x: 4.92, y: 22), controlPoint2: CGPoint(x: 0, y: 17.08))
        icon.addCurve(to: CGPoint(x: 11, y: 0), controlPoint1: CGPoint(x: 0, y: 4.92), controlPoint2: CGPoint(x: 4.92, y: 0))
        icon.addLine(to: CGPoint(x: 11, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 11, y: 1))
        icon.addCurve(to: CGPoint(x: 21, y: 11), controlPoint1: CGPoint(x: 16.52, y: 1), controlPoint2: CGPoint(x: 21, y: 5.48))
        icon.addCurve(to: CGPoint(x: 11, y: 21), controlPoint1: CGPoint(x: 21, y: 16.52), controlPoint2: CGPoint(x: 16.52, y: 21))
        icon.addCurve(to: CGPoint(x: 1, y: 11), controlPoint1: CGPoint(x: 5.48, y: 21), controlPoint2: CGPoint(x: 1, y: 16.52))
        icon.addCurve(to: CGPoint(x: 11, y: 1), controlPoint1: CGPoint(x: 1, y: 5.48), controlPoint2: CGPoint(x: 5.48, y: 1))
        icon.addLine(to: CGPoint(x: 11, y: 1))
        icon.close()
        icon.move(to: CGPoint(x: 16.5, y: 11.5))
        icon.addLine(to: CGPoint(x: 11.5, y: 11.5))
        icon.addLine(to: CGPoint(x: 11.5, y: 16.5))
        icon.addLine(to: CGPoint(x: 10.5, y: 16.5))
        icon.addLine(to: CGPoint(x: 10.5, y: 11.5))
        icon.addLine(to: CGPoint(x: 5.5, y: 11.5))
        icon.addLine(to: CGPoint(x: 5.5, y: 10.5))
        icon.addLine(to: CGPoint(x: 10.5, y: 10.5))
        icon.addLine(to: CGPoint(x: 10.5, y: 5.5))
        icon.addLine(to: CGPoint(x: 11.5, y: 5.5))
        icon.addLine(to: CGPoint(x: 11.5, y: 10.5))
        icon.addLine(to: CGPoint(x: 16.5, y: 10.5))
        icon.addLine(to: CGPoint(x: 16.5, y: 11.5))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3, y: 4)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3, y: 4))
        icon.addClip()
        
        /// • Action Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_AssetsActionsError(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 30)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 11, y: 21))
        icon.addLine(to: CGPoint(x: 11, y: 21))
        icon.addCurve(to: CGPoint(x: 21, y: 11), controlPoint1: CGPoint(x: 16.52, y: 21), controlPoint2: CGPoint(x: 21, y: 16.52))
        icon.addCurve(to: CGPoint(x: 11, y: 1), controlPoint1: CGPoint(x: 21, y: 5.48), controlPoint2: CGPoint(x: 16.52, y: 1))
        icon.addCurve(to: CGPoint(x: 1, y: 11), controlPoint1: CGPoint(x: 5.48, y: 1), controlPoint2: CGPoint(x: 1, y: 5.48))
        icon.addCurve(to: CGPoint(x: 11, y: 21), controlPoint1: CGPoint(x: 1, y: 16.52), controlPoint2: CGPoint(x: 5.48, y: 21))
        icon.addLine(to: CGPoint(x: 11, y: 21))
        icon.close()
        icon.move(to: CGPoint(x: 0, y: 11))
        icon.addCurve(to: CGPoint(x: 11, y: 0), controlPoint1: CGPoint(x: 0, y: 4.93), controlPoint2: CGPoint(x: 4.92, y: 0))
        icon.addCurve(to: CGPoint(x: 22, y: 11), controlPoint1: CGPoint(x: 17.08, y: 0), controlPoint2: CGPoint(x: 22, y: 4.93))
        icon.addCurve(to: CGPoint(x: 11, y: 22), controlPoint1: CGPoint(x: 22, y: 17.08), controlPoint2: CGPoint(x: 17.08, y: 22))
        icon.addCurve(to: CGPoint(x: 0, y: 11), controlPoint1: CGPoint(x: 4.92, y: 22), controlPoint2: CGPoint(x: 0, y: 17.08))
        icon.close()
        icon.move(to: CGPoint(x: 11, y: 17.3))
        icon.addCurve(to: CGPoint(x: 12.1, y: 16.2), controlPoint1: CGPoint(x: 11.61, y: 17.3), controlPoint2: CGPoint(x: 12.1, y: 16.81))
        icon.addCurve(to: CGPoint(x: 11, y: 15.1), controlPoint1: CGPoint(x: 12.1, y: 15.59), controlPoint2: CGPoint(x: 11.61, y: 15.1))
        icon.addCurve(to: CGPoint(x: 9.9, y: 16.2), controlPoint1: CGPoint(x: 10.39, y: 15.1), controlPoint2: CGPoint(x: 9.9, y: 15.59))
        icon.addCurve(to: CGPoint(x: 11, y: 17.3), controlPoint1: CGPoint(x: 9.9, y: 16.81), controlPoint2: CGPoint(x: 10.39, y: 17.3))
        icon.close()
        icon.move(to: CGPoint(x: 10, y: 4.8))
        icon.addLine(to: CGPoint(x: 12, y: 4.8))
        icon.addCurve(to: CGPoint(x: 12, y: 8), controlPoint1: CGPoint(x: 12, y: 6.56), controlPoint2: CGPoint(x: 12, y: 7.63))
        icon.addCurve(to: CGPoint(x: 11.2, y: 13.4), controlPoint1: CGPoint(x: 12, y: 8.67), controlPoint2: CGPoint(x: 11.73, y: 10.47))
        icon.addLine(to: CGPoint(x: 10.8, y: 13.4))
        icon.addCurve(to: CGPoint(x: 10, y: 8), controlPoint1: CGPoint(x: 10.27, y: 10.47), controlPoint2: CGPoint(x: 10, y: 8.67))
        icon.addCurve(to: CGPoint(x: 10, y: 4.8), controlPoint1: CGPoint(x: 10, y: 7.33), controlPoint2: CGPoint(x: 10, y: 6.27))
        icon.close()
        context.saveGState()
        context.translateBy(x: 3, y: 4)
        context.restoreGState()
        
        /// Icon (Outline Mask)
        context.saveGState()
        icon.apply(CGAffineTransform(translationX: 3, y: 4))
        icon.addClip()
        
        /// • Action Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func draw_AssetsActionsMoreGray(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 30)
        
        /// Button
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 1)
            
            /// Button
            let button = UIBezierPath()
            button.move(to: CGPoint(x: 0, y: 14))
            button.addCurve(to: CGPoint(x: 14, y: 0), controlPoint1: CGPoint(x: 0, y: 6.27), controlPoint2: CGPoint(x: 6.27, y: 0))
            button.addLine(to: CGPoint(x: 14, y: 0))
            button.addCurve(to: CGPoint(x: 28, y: 14), controlPoint1: CGPoint(x: 21.73, y: 0), controlPoint2: CGPoint(x: 28, y: 6.27))
            button.addLine(to: CGPoint(x: 28, y: 14))
            button.addCurve(to: CGPoint(x: 14, y: 28), controlPoint1: CGPoint(x: 28, y: 21.73), controlPoint2: CGPoint(x: 21.73, y: 28))
            button.addLine(to: CGPoint(x: 14, y: 28))
            button.addCurve(to: CGPoint(x: 0, y: 14), controlPoint1: CGPoint(x: 6.27, y: 28), controlPoint2: CGPoint(x: 0, y: 21.73))
            button.addLine(to: CGPoint(x: 0, y: 14))
            button.close()
            
            /// Button (Outline Mask)
            context.saveGState()
            button.addClip()
            
            /// • Action Fill
            // Warning: New symbols are not supported.
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 2, y: 4))
            icon.addCurve(to: CGPoint(x: 0, y: 2), controlPoint1: CGPoint(x: 0.9, y: 4), controlPoint2: CGPoint(x: 0, y: 3.1))
            icon.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
            icon.addCurve(to: CGPoint(x: 4, y: 2), controlPoint1: CGPoint(x: 3.1, y: 0), controlPoint2: CGPoint(x: 4, y: 0.9))
            icon.addCurve(to: CGPoint(x: 2, y: 4), controlPoint1: CGPoint(x: 4, y: 3.1), controlPoint2: CGPoint(x: 3.1, y: 4))
            icon.close()
            icon.move(to: CGPoint(x: 8, y: 4))
            icon.addCurve(to: CGPoint(x: 6, y: 2), controlPoint1: CGPoint(x: 6.9, y: 4), controlPoint2: CGPoint(x: 6, y: 3.1))
            icon.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 6, y: 0.9), controlPoint2: CGPoint(x: 6.9, y: 0))
            icon.addCurve(to: CGPoint(x: 10, y: 2), controlPoint1: CGPoint(x: 9.1, y: 0), controlPoint2: CGPoint(x: 10, y: 0.9))
            icon.addCurve(to: CGPoint(x: 8, y: 4), controlPoint1: CGPoint(x: 10, y: 3.1), controlPoint2: CGPoint(x: 9.1, y: 4))
            icon.close()
            icon.move(to: CGPoint(x: 14, y: 4))
            icon.addCurve(to: CGPoint(x: 12, y: 2), controlPoint1: CGPoint(x: 12.9, y: 4), controlPoint2: CGPoint(x: 12, y: 3.1))
            icon.addCurve(to: CGPoint(x: 14, y: 0), controlPoint1: CGPoint(x: 12, y: 0.9), controlPoint2: CGPoint(x: 12.9, y: 0))
            icon.addCurve(to: CGPoint(x: 16, y: 2), controlPoint1: CGPoint(x: 15.1, y: 0), controlPoint2: CGPoint(x: 16, y: 0.9))
            icon.addCurve(to: CGPoint(x: 14, y: 4), controlPoint1: CGPoint(x: 16, y: 3.1), controlPoint2: CGPoint(x: 15.1, y: 4))
            icon.close()
            context.saveGState()
            context.translateBy(x: 6, y: 12)
            icon.usesEvenOddFillRule = true
            UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
            icon.fill()
            context.restoreGState()
            
            context.restoreGState()
            // End Button (Outline Mask)
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func draw_AssetsActionsMoreIconGray(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 30)
        
        /// Button
        do {
            context.saveGState()
            context.translateBy(x: 5, y: 13)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 2, y: 4))
            icon.addCurve(to: CGPoint(x: 0, y: 2), controlPoint1: CGPoint(x: 0.9, y: 4), controlPoint2: CGPoint(x: 0, y: 3.1))
            icon.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
            icon.addCurve(to: CGPoint(x: 4, y: 2), controlPoint1: CGPoint(x: 3.1, y: 0), controlPoint2: CGPoint(x: 4, y: 0.9))
            icon.addCurve(to: CGPoint(x: 2, y: 4), controlPoint1: CGPoint(x: 4, y: 3.1), controlPoint2: CGPoint(x: 3.1, y: 4))
            icon.close()
            icon.move(to: CGPoint(x: 9, y: 4))
            icon.addCurve(to: CGPoint(x: 7, y: 2), controlPoint1: CGPoint(x: 7.9, y: 4), controlPoint2: CGPoint(x: 7, y: 3.1))
            icon.addCurve(to: CGPoint(x: 9, y: 0), controlPoint1: CGPoint(x: 7, y: 0.9), controlPoint2: CGPoint(x: 7.9, y: 0))
            icon.addCurve(to: CGPoint(x: 11, y: 2), controlPoint1: CGPoint(x: 10.1, y: 0), controlPoint2: CGPoint(x: 11, y: 0.9))
            icon.addCurve(to: CGPoint(x: 9, y: 4), controlPoint1: CGPoint(x: 11, y: 3.1), controlPoint2: CGPoint(x: 10.1, y: 4))
            icon.close()
            icon.move(to: CGPoint(x: 16, y: 4))
            icon.addCurve(to: CGPoint(x: 14, y: 2), controlPoint1: CGPoint(x: 14.9, y: 4), controlPoint2: CGPoint(x: 14, y: 3.1))
            icon.addCurve(to: CGPoint(x: 16, y: 0), controlPoint1: CGPoint(x: 14, y: 0.9), controlPoint2: CGPoint(x: 14.9, y: 0))
            icon.addCurve(to: CGPoint(x: 18, y: 2), controlPoint1: CGPoint(x: 17.1, y: 0), controlPoint2: CGPoint(x: 18, y: 0.9))
            icon.addCurve(to: CGPoint(x: 16, y: 4), controlPoint1: CGPoint(x: 18, y: 3.1), controlPoint2: CGPoint(x: 17.1, y: 4))
            icon.close()
            context.saveGState()
            icon.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.025, brightness: 0.8, alpha: 1).setFill()
            icon.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func draw_AssetsActionsCloseButtonWhite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 30)
        
        /// Close Icon
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 1)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 14, y: 28))
            icon.addCurve(to: CGPoint(x: 28, y: 14), controlPoint1: CGPoint(x: 21.73, y: 28), controlPoint2: CGPoint(x: 28, y: 21.73))
            icon.addCurve(to: CGPoint(x: 14, y: 0), controlPoint1: CGPoint(x: 28, y: 6.27), controlPoint2: CGPoint(x: 21.73, y: 0))
            icon.addCurve(to: CGPoint(x: 0, y: 14), controlPoint1: CGPoint(x: 6.27, y: 0), controlPoint2: CGPoint(x: 0, y: 6.27))
            icon.addCurve(to: CGPoint(x: 14, y: 28), controlPoint1: CGPoint(x: 0, y: 21.73), controlPoint2: CGPoint(x: 6.27, y: 28))
            icon.close()
            context.saveGState()
            icon.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.025, brightness: 0.8, alpha: 1).setFill()
            icon.fill()
            context.restoreGState()
            
            /// Icon
            let icon2 = UIBezierPath()
            icon2.move(to: CGPoint(x: 5.5, y: 3.79))
            icon2.addLine(to: CGPoint(x: 8.93, y: 0.36))
            icon2.addCurve(to: CGPoint(x: 10.64, y: 0.36), controlPoint1: CGPoint(x: 9.4, y: -0.12), controlPoint2: CGPoint(x: 10.17, y: -0.12))
            icon2.addCurve(to: CGPoint(x: 10.64, y: 2.07), controlPoint1: CGPoint(x: 11.12, y: 0.83), controlPoint2: CGPoint(x: 11.12, y: 1.6))
            icon2.addLine(to: CGPoint(x: 7.21, y: 5.5))
            icon2.addLine(to: CGPoint(x: 10.64, y: 8.93))
            icon2.addCurve(to: CGPoint(x: 10.64, y: 10.64), controlPoint1: CGPoint(x: 11.12, y: 9.4), controlPoint2: CGPoint(x: 11.12, y: 10.17))
            icon2.addCurve(to: CGPoint(x: 8.93, y: 10.64), controlPoint1: CGPoint(x: 10.17, y: 11.12), controlPoint2: CGPoint(x: 9.4, y: 11.12))
            icon2.addLine(to: CGPoint(x: 5.5, y: 7.21))
            icon2.addLine(to: CGPoint(x: 2.07, y: 10.64))
            icon2.addCurve(to: CGPoint(x: 0.36, y: 10.64), controlPoint1: CGPoint(x: 1.6, y: 11.12), controlPoint2: CGPoint(x: 0.83, y: 11.12))
            icon2.addCurve(to: CGPoint(x: 0.36, y: 8.93), controlPoint1: CGPoint(x: -0.12, y: 10.17), controlPoint2: CGPoint(x: -0.12, y: 9.4))
            icon2.addLine(to: CGPoint(x: 3.79, y: 5.5))
            icon2.addLine(to: CGPoint(x: 0.36, y: 2.07))
            icon2.addCurve(to: CGPoint(x: 0.36, y: 0.36), controlPoint1: CGPoint(x: -0.12, y: 1.6), controlPoint2: CGPoint(x: -0.12, y: 0.83))
            icon2.addCurve(to: CGPoint(x: 2.07, y: 0.36), controlPoint1: CGPoint(x: 0.83, y: -0.12), controlPoint2: CGPoint(x: 1.6, y: -0.12))
            icon2.addLine(to: CGPoint(x: 5.5, y: 3.79))
            icon2.close()
            context.saveGState()
            context.translateBy(x: 8.5, y: 8.5)
            // Warning: Blur effects are not supported.
            UIColor(white: 1, alpha: 0.92).setFill()
            icon2.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func draw_AssetsActionsCloseButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 30)
        
        /// Close Icon
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 1)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 14, y: 28))
            icon.addCurve(to: CGPoint(x: 28, y: 14), controlPoint1: CGPoint(x: 21.73, y: 28), controlPoint2: CGPoint(x: 28, y: 21.73))
            icon.addCurve(to: CGPoint(x: 14, y: 0), controlPoint1: CGPoint(x: 28, y: 6.27), controlPoint2: CGPoint(x: 21.73, y: 0))
            icon.addCurve(to: CGPoint(x: 0, y: 14), controlPoint1: CGPoint(x: 6.27, y: 0), controlPoint2: CGPoint(x: 0, y: 6.27))
            icon.addCurve(to: CGPoint(x: 14, y: 28), controlPoint1: CGPoint(x: 0, y: 21.73), controlPoint2: CGPoint(x: 6.27, y: 28))
            icon.close()
            context.saveGState()
            icon.usesEvenOddFillRule = true
            UIColor.white.setFill()
            icon.fill()
            context.restoreGState()
            
            /// Icon
            let icon2 = UIBezierPath()
            icon2.move(to: CGPoint(x: 5.5, y: 3.79))
            icon2.addLine(to: CGPoint(x: 8.93, y: 0.36))
            icon2.addCurve(to: CGPoint(x: 10.64, y: 0.36), controlPoint1: CGPoint(x: 9.4, y: -0.12), controlPoint2: CGPoint(x: 10.17, y: -0.12))
            icon2.addCurve(to: CGPoint(x: 10.64, y: 2.07), controlPoint1: CGPoint(x: 11.12, y: 0.83), controlPoint2: CGPoint(x: 11.12, y: 1.6))
            icon2.addLine(to: CGPoint(x: 7.21, y: 5.5))
            icon2.addLine(to: CGPoint(x: 10.64, y: 8.93))
            icon2.addCurve(to: CGPoint(x: 10.64, y: 10.64), controlPoint1: CGPoint(x: 11.12, y: 9.4), controlPoint2: CGPoint(x: 11.12, y: 10.17))
            icon2.addCurve(to: CGPoint(x: 8.93, y: 10.64), controlPoint1: CGPoint(x: 10.17, y: 11.12), controlPoint2: CGPoint(x: 9.4, y: 11.12))
            icon2.addLine(to: CGPoint(x: 5.5, y: 7.21))
            icon2.addLine(to: CGPoint(x: 2.07, y: 10.64))
            icon2.addCurve(to: CGPoint(x: 0.36, y: 10.64), controlPoint1: CGPoint(x: 1.6, y: 11.12), controlPoint2: CGPoint(x: 0.83, y: 11.12))
            icon2.addCurve(to: CGPoint(x: 0.36, y: 8.93), controlPoint1: CGPoint(x: -0.12, y: 10.17), controlPoint2: CGPoint(x: -0.12, y: 9.4))
            icon2.addLine(to: CGPoint(x: 3.79, y: 5.5))
            icon2.addLine(to: CGPoint(x: 0.36, y: 2.07))
            icon2.addCurve(to: CGPoint(x: 0.36, y: 0.36), controlPoint1: CGPoint(x: -0.12, y: 1.6), controlPoint2: CGPoint(x: -0.12, y: 0.83))
            icon2.addCurve(to: CGPoint(x: 2.07, y: 0.36), controlPoint1: CGPoint(x: 0.83, y: -0.12), controlPoint2: CGPoint(x: 1.6, y: -0.12))
            icon2.addLine(to: CGPoint(x: 5.5, y: 3.79))
            icon2.close()
            context.saveGState()
            context.translateBy(x: 8.5, y: 8.5)
            UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1).setFill()
            icon2.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func draw_AssetsActionsSend(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 30)
        
        /// Button
        do {
            context.saveGState()
            context.translateBy(x: 1, y: 2)
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 13, y: 26))
            icon.addCurve(to: CGPoint(x: 26, y: 13), controlPoint1: CGPoint(x: 20.18, y: 26), controlPoint2: CGPoint(x: 26, y: 20.18))
            icon.addCurve(to: CGPoint(x: 13, y: 0), controlPoint1: CGPoint(x: 26, y: 5.82), controlPoint2: CGPoint(x: 20.18, y: 0))
            icon.addCurve(to: CGPoint(x: 0, y: 13), controlPoint1: CGPoint(x: 5.82, y: 0), controlPoint2: CGPoint(x: 0, y: 5.82))
            icon.addCurve(to: CGPoint(x: 13, y: 26), controlPoint1: CGPoint(x: 0, y: 20.18), controlPoint2: CGPoint(x: 5.82, y: 26))
            
            /// Icon (Outline Mask)
            context.saveGState()
            icon.addClip()
            
            /// • Action Fill
            // Warning: New symbols are not supported.
            
            /// Shape
            let shape = UIBezierPath()
            shape.move(to: CGPoint(x: 10.71, y: 4.83))
            shape.addCurve(to: CGPoint(x: 6.24, y: 0.34), controlPoint1: CGPoint(x: 10.71, y: 4.83), controlPoint2: CGPoint(x: 6.28, y: 0.38))
            shape.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 6.06, y: 0.13), controlPoint2: CGPoint(x: 5.8, y: 0))
            shape.addCurve(to: CGPoint(x: 4.74, y: 0.37), controlPoint1: CGPoint(x: 5.19, y: 0), controlPoint2: CGPoint(x: 4.92, y: 0.14))
            shape.addCurve(to: CGPoint(x: 0.29, y: 4.83), controlPoint1: CGPoint(x: 4.7, y: 0.42), controlPoint2: CGPoint(x: 0.29, y: 4.83))
            shape.addCurve(to: CGPoint(x: 0.29, y: 6.23), controlPoint1: CGPoint(x: -0.1, y: 5.22), controlPoint2: CGPoint(x: -0.1, y: 5.85))
            shape.addCurve(to: CGPoint(x: 1.69, y: 6.23), controlPoint1: CGPoint(x: 0.68, y: 6.62), controlPoint2: CGPoint(x: 1.3, y: 6.62))
            shape.addLine(to: CGPoint(x: 4.51, y: 3.39))
            shape.addLine(to: CGPoint(x: 4.51, y: 13))
            shape.addCurve(to: CGPoint(x: 5.5, y: 14), controlPoint1: CGPoint(x: 4.51, y: 13.55), controlPoint2: CGPoint(x: 4.95, y: 14))
            shape.addCurve(to: CGPoint(x: 6.49, y: 13), controlPoint1: CGPoint(x: 6.05, y: 14), controlPoint2: CGPoint(x: 6.49, y: 13.55))
            shape.addLine(to: CGPoint(x: 6.49, y: 3.39))
            shape.addLine(to: CGPoint(x: 9.31, y: 6.23))
            shape.addCurve(to: CGPoint(x: 10.71, y: 6.23), controlPoint1: CGPoint(x: 9.7, y: 6.62), controlPoint2: CGPoint(x: 10.32, y: 6.62))
            shape.addCurve(to: CGPoint(x: 10.71, y: 4.83), controlPoint1: CGPoint(x: 11.1, y: 5.85), controlPoint2: CGPoint(x: 11.1, y: 5.22))
            context.saveGState()
            context.translateBy(x: 7.5, y: 6)
            shape.usesEvenOddFillRule = true
            UIColor.white.setFill()
            shape.fill()
            context.restoreGState()
            
            context.restoreGState()
            // End Icon (Outline Mask)
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func draw_AssetsActionsPlus(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 30)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 26, y: 13))
        icon.addCurve(to: CGPoint(x: 13, y: 26), controlPoint1: CGPoint(x: 26, y: 20.18), controlPoint2: CGPoint(x: 20.18, y: 26))
        icon.addCurve(to: CGPoint(x: 0, y: 13), controlPoint1: CGPoint(x: 5.82, y: 26), controlPoint2: CGPoint(x: 0, y: 20.18))
        icon.addCurve(to: CGPoint(x: 13, y: 0), controlPoint1: CGPoint(x: 0, y: 5.82), controlPoint2: CGPoint(x: 5.82, y: 0))
        icon.addCurve(to: CGPoint(x: 26, y: 13), controlPoint1: CGPoint(x: 20.18, y: 0), controlPoint2: CGPoint(x: 26, y: 5.82))
        icon.close()
        context.saveGState()
        context.translateBy(x: 1, y: 2)
        icon.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.025, brightness: 0.8, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        /// Icon
        let icon2 = UIBezierPath()
        icon2.move(to: CGPoint(x: 9, y: 7))
        icon2.addLine(to: CGPoint(x: 15, y: 7))
        icon2.addCurve(to: CGPoint(x: 16, y: 8), controlPoint1: CGPoint(x: 15.55, y: 7), controlPoint2: CGPoint(x: 16, y: 7.44))
        icon2.addCurve(to: CGPoint(x: 15, y: 9), controlPoint1: CGPoint(x: 16, y: 8.55), controlPoint2: CGPoint(x: 15.56, y: 9))
        icon2.addLine(to: CGPoint(x: 9, y: 9))
        icon2.addLine(to: CGPoint(x: 9, y: 15))
        icon2.addCurve(to: CGPoint(x: 8, y: 16), controlPoint1: CGPoint(x: 9, y: 15.55), controlPoint2: CGPoint(x: 8.56, y: 16))
        icon2.addCurve(to: CGPoint(x: 7, y: 15), controlPoint1: CGPoint(x: 7.45, y: 16), controlPoint2: CGPoint(x: 7, y: 15.56))
        icon2.addLine(to: CGPoint(x: 7, y: 9))
        icon2.addLine(to: CGPoint(x: 1, y: 9))
        icon2.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 0.45, y: 9), controlPoint2: CGPoint(x: 0, y: 8.56))
        icon2.addCurve(to: CGPoint(x: 1, y: 7), controlPoint1: CGPoint(x: 0, y: 7.45), controlPoint2: CGPoint(x: 0.44, y: 7))
        icon2.addLine(to: CGPoint(x: 7, y: 7))
        icon2.addLine(to: CGPoint(x: 7, y: 1))
        icon2.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 7, y: 0.45), controlPoint2: CGPoint(x: 7.44, y: 0))
        icon2.addCurve(to: CGPoint(x: 9, y: 1), controlPoint1: CGPoint(x: 8.55, y: 0), controlPoint2: CGPoint(x: 9, y: 0.44))
        icon2.addLine(to: CGPoint(x: 9, y: 7))
        icon2.close()
        context.saveGState()
        context.translateBy(x: 6, y: 7)
        icon2.usesEvenOddFillRule = true
        UIColor.white.setFill()
        icon2.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_AssetsActionsBackspace(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 35, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 35, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 35, y: resizedFrame.height / 30)
        
        /// Backspace
        do {
            context.saveGState()
            context.translateBy(x: 1, y: 3)
            
            /// Rectangle
            let rectangle8 = UIBezierPath()
            rectangle8.move(to: CGPoint(x: 13.61, y: 0))
            rectangle8.addLine(to: CGPoint(x: 27, y: 0))
            rectangle8.addCurve(to: CGPoint(x: 33, y: 6), controlPoint1: CGPoint(x: 30.32, y: 0), controlPoint2: CGPoint(x: 33, y: 2.69))
            rectangle8.addLine(to: CGPoint(x: 33, y: 18))
            rectangle8.addCurve(to: CGPoint(x: 27, y: 24), controlPoint1: CGPoint(x: 33, y: 21.31), controlPoint2: CGPoint(x: 30.32, y: 24))
            rectangle8.addLine(to: CGPoint(x: 13.61, y: 24))
            rectangle8.addCurve(to: CGPoint(x: 9.36, y: 22.23), controlPoint1: CGPoint(x: 12.01, y: 24), controlPoint2: CGPoint(x: 10.48, y: 23.36))
            rectangle8.addLine(to: CGPoint(x: 0.58, y: 13.41))
            rectangle8.addCurve(to: CGPoint(x: 0.58, y: 10.59), controlPoint1: CGPoint(x: -0.19, y: 12.63), controlPoint2: CGPoint(x: -0.19, y: 11.37))
            rectangle8.addLine(to: CGPoint(x: 9.36, y: 1.77))
            rectangle8.addCurve(to: CGPoint(x: 13.61, y: 0), controlPoint1: CGPoint(x: 10.48, y: 0.64), controlPoint2: CGPoint(x: 12.01, y: 0))
            rectangle8.close()
            context.saveGState()
            rectangle8.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.02, brightness: 0.957, alpha: 1).setFill()
            rectangle8.fill()
            context.restoreGState()
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 5.5, y: 4.12))
            icon.addLine(to: CGPoint(x: 9.33, y: 0.29))
            icon.addCurve(to: CGPoint(x: 10.71, y: 0.29), controlPoint1: CGPoint(x: 9.72, y: -0.1), controlPoint2: CGPoint(x: 10.33, y: -0.1))
            icon.addCurve(to: CGPoint(x: 10.71, y: 1.67), controlPoint1: CGPoint(x: 11.1, y: 0.67), controlPoint2: CGPoint(x: 11.1, y: 1.28))
            icon.addLine(to: CGPoint(x: 6.88, y: 5.5))
            icon.addLine(to: CGPoint(x: 10.71, y: 9.33))
            icon.addCurve(to: CGPoint(x: 10.71, y: 10.71), controlPoint1: CGPoint(x: 11.1, y: 9.72), controlPoint2: CGPoint(x: 11.1, y: 10.33))
            icon.addCurve(to: CGPoint(x: 9.33, y: 10.71), controlPoint1: CGPoint(x: 10.33, y: 11.1), controlPoint2: CGPoint(x: 9.72, y: 11.1))
            icon.addLine(to: CGPoint(x: 5.5, y: 6.88))
            icon.addLine(to: CGPoint(x: 1.67, y: 10.71))
            icon.addCurve(to: CGPoint(x: 0.29, y: 10.71), controlPoint1: CGPoint(x: 1.28, y: 11.1), controlPoint2: CGPoint(x: 0.67, y: 11.1))
            icon.addCurve(to: CGPoint(x: 0.29, y: 9.33), controlPoint1: CGPoint(x: -0.1, y: 10.33), controlPoint2: CGPoint(x: -0.1, y: 9.72))
            icon.addLine(to: CGPoint(x: 4.12, y: 5.5))
            icon.addLine(to: CGPoint(x: 0.29, y: 1.67))
            icon.addCurve(to: CGPoint(x: 0.29, y: 0.29), controlPoint1: CGPoint(x: -0.1, y: 1.28), controlPoint2: CGPoint(x: -0.1, y: 0.67))
            icon.addCurve(to: CGPoint(x: 1.67, y: 0.29), controlPoint1: CGPoint(x: 0.67, y: -0.1), controlPoint2: CGPoint(x: 1.28, y: -0.1))
            icon.addLine(to: CGPoint(x: 5.5, y: 4.12))
            icon.close()
            context.saveGState()
            context.translateBy(x: 16.5, y: 6.5)
            UIColor.black.setFill()
            icon.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func draw_AssetsActionsBackAccent(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 30)
        
        /// Arrow
        let arrow = UIBezierPath()
        arrow.move(to: CGPoint(x: 9.54, y: 20.08))
        arrow.addLine(to: CGPoint(x: 0.29, y: 10.95))
        arrow.addCurve(to: CGPoint(x: 0.29, y: 9.55), controlPoint1: CGPoint(x: -0.1, y: 10.56), controlPoint2: CGPoint(x: -0.1, y: 9.94))
        arrow.addLine(to: CGPoint(x: 9.54, y: 0.42))
        arrow.addCurve(to: CGPoint(x: 11.58, y: 0.42), controlPoint1: CGPoint(x: 10.1, y: -0.14), controlPoint2: CGPoint(x: 11.01, y: -0.14))
        arrow.addCurve(to: CGPoint(x: 11.58, y: 2.43), controlPoint1: CGPoint(x: 12.14, y: 0.97), controlPoint2: CGPoint(x: 12.14, y: 1.88))
        arrow.addLine(to: CGPoint(x: 3.67, y: 10.25))
        arrow.addLine(to: CGPoint(x: 11.58, y: 18.07))
        arrow.addCurve(to: CGPoint(x: 11.58, y: 20.08), controlPoint1: CGPoint(x: 12.14, y: 18.62), controlPoint2: CGPoint(x: 12.14, y: 19.53))
        arrow.addCurve(to: CGPoint(x: 9.54, y: 20.08), controlPoint1: CGPoint(x: 11.01, y: 20.64), controlPoint2: CGPoint(x: 10.1, y: 20.64))
        context.saveGState()
        context.translateBy(x: 7, y: 5)
        arrow.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        arrow.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_AssetsActionsBackWhite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 30)
        
        /// Arrow
        let arrow = UIBezierPath()
        arrow.move(to: CGPoint(x: 0.29, y: 10.95))
        arrow.addCurve(to: CGPoint(x: 0.29, y: 9.55), controlPoint1: CGPoint(x: -0.1, y: 10.56), controlPoint2: CGPoint(x: -0.1, y: 9.94))
        arrow.addLine(to: CGPoint(x: 9.54, y: 0.42))
        arrow.addCurve(to: CGPoint(x: 11.58, y: 0.42), controlPoint1: CGPoint(x: 10.1, y: -0.14), controlPoint2: CGPoint(x: 11.01, y: -0.14))
        arrow.addCurve(to: CGPoint(x: 11.58, y: 2.43), controlPoint1: CGPoint(x: 12.14, y: 0.97), controlPoint2: CGPoint(x: 12.14, y: 1.88))
        arrow.addLine(to: CGPoint(x: 3.67, y: 10.25))
        arrow.addLine(to: CGPoint(x: 11.58, y: 18.07))
        arrow.addCurve(to: CGPoint(x: 11.58, y: 20.08), controlPoint1: CGPoint(x: 12.14, y: 18.62), controlPoint2: CGPoint(x: 12.14, y: 19.53))
        arrow.addCurve(to: CGPoint(x: 9.54, y: 20.08), controlPoint1: CGPoint(x: 11.01, y: 20.64), controlPoint2: CGPoint(x: 10.1, y: 20.64))
        arrow.addLine(to: CGPoint(x: 0.29, y: 10.95))
        arrow.close()
        context.saveGState()
        context.translateBy(x: 7, y: 5)
        arrow.usesEvenOddFillRule = true
        UIColor.white.setFill()
        arrow.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_AssetsActionsDictation(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 30)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 13, y: 26))
        icon.addCurve(to: CGPoint(x: 0, y: 13), controlPoint1: CGPoint(x: 5.82, y: 26), controlPoint2: CGPoint(x: 0, y: 20.18))
        icon.addCurve(to: CGPoint(x: 13, y: 0), controlPoint1: CGPoint(x: 0, y: 5.82), controlPoint2: CGPoint(x: 5.82, y: 0))
        icon.addCurve(to: CGPoint(x: 26, y: 13), controlPoint1: CGPoint(x: 20.18, y: 0), controlPoint2: CGPoint(x: 26, y: 5.82))
        icon.addCurve(to: CGPoint(x: 13, y: 26), controlPoint1: CGPoint(x: 26, y: 20.18), controlPoint2: CGPoint(x: 20.18, y: 26))
        icon.close()
        icon.move(to: CGPoint(x: 13, y: 4))
        icon.addCurve(to: CGPoint(x: 10.16, y: 6.84), controlPoint1: CGPoint(x: 11.43, y: 4), controlPoint2: CGPoint(x: 10.16, y: 5.27))
        icon.addLine(to: CGPoint(x: 10.16, y: 13.47))
        icon.addCurve(to: CGPoint(x: 13, y: 16.32), controlPoint1: CGPoint(x: 10.16, y: 15.04), controlPoint2: CGPoint(x: 11.43, y: 16.32))
        icon.addCurve(to: CGPoint(x: 15.84, y: 13.47), controlPoint1: CGPoint(x: 14.57, y: 16.32), controlPoint2: CGPoint(x: 15.84, y: 15.04))
        icon.addLine(to: CGPoint(x: 15.84, y: 6.84))
        icon.addCurve(to: CGPoint(x: 13, y: 4), controlPoint1: CGPoint(x: 15.84, y: 5.27), controlPoint2: CGPoint(x: 14.57, y: 4))
        icon.close()
        icon.move(to: CGPoint(x: 17.97, y: 10.16))
        icon.addCurve(to: CGPoint(x: 17.26, y: 10.87), controlPoint1: CGPoint(x: 17.58, y: 10.16), controlPoint2: CGPoint(x: 17.26, y: 10.48))
        icon.addLine(to: CGPoint(x: 17.26, y: 13.47))
        icon.addCurve(to: CGPoint(x: 13, y: 17.74), controlPoint1: CGPoint(x: 17.26, y: 15.83), controlPoint2: CGPoint(x: 15.35, y: 17.74))
        icon.addCurve(to: CGPoint(x: 8.74, y: 13.47), controlPoint1: CGPoint(x: 10.65, y: 17.74), controlPoint2: CGPoint(x: 8.74, y: 15.83))
        icon.addLine(to: CGPoint(x: 8.74, y: 10.87))
        icon.addCurve(to: CGPoint(x: 8.03, y: 10.16), controlPoint1: CGPoint(x: 8.74, y: 10.48), controlPoint2: CGPoint(x: 8.42, y: 10.16))
        icon.addCurve(to: CGPoint(x: 7.32, y: 10.87), controlPoint1: CGPoint(x: 7.63, y: 10.16), controlPoint2: CGPoint(x: 7.32, y: 10.48))
        icon.addLine(to: CGPoint(x: 7.32, y: 13.47))
        icon.addCurve(to: CGPoint(x: 12.29, y: 19.11), controlPoint1: CGPoint(x: 7.32, y: 16.34), controlPoint2: CGPoint(x: 9.45, y: 18.75))
        icon.addLine(to: CGPoint(x: 12.29, y: 20.58))
        icon.addLine(to: CGPoint(x: 10.39, y: 20.58))
        icon.addCurve(to: CGPoint(x: 9.68, y: 21.29), controlPoint1: CGPoint(x: 10, y: 20.58), controlPoint2: CGPoint(x: 9.68, y: 20.9))
        icon.addCurve(to: CGPoint(x: 10.39, y: 22), controlPoint1: CGPoint(x: 9.68, y: 21.68), controlPoint2: CGPoint(x: 10, y: 22))
        icon.addLine(to: CGPoint(x: 15.61, y: 22))
        icon.addCurve(to: CGPoint(x: 16.32, y: 21.29), controlPoint1: CGPoint(x: 16, y: 22), controlPoint2: CGPoint(x: 16.32, y: 21.68))
        icon.addCurve(to: CGPoint(x: 15.61, y: 20.58), controlPoint1: CGPoint(x: 16.32, y: 20.9), controlPoint2: CGPoint(x: 16, y: 20.58))
        icon.addLine(to: CGPoint(x: 13.71, y: 20.58))
        icon.addLine(to: CGPoint(x: 13.71, y: 19.11))
        icon.addCurve(to: CGPoint(x: 18.68, y: 13.47), controlPoint1: CGPoint(x: 16.55, y: 18.75), controlPoint2: CGPoint(x: 18.68, y: 16.34))
        icon.addLine(to: CGPoint(x: 18.68, y: 10.87))
        icon.addCurve(to: CGPoint(x: 17.97, y: 10.16), controlPoint1: CGPoint(x: 18.68, y: 10.48), controlPoint2: CGPoint(x: 18.37, y: 10.16))
        icon.close()
        context.saveGState()
        context.translateBy(x: 1, y: 2)
        icon.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.025, brightness: 0.8, alpha: 1).setFill()
        icon.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_AssetsActionsMoreAccent(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 30)
        
        /// Button
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 1)
            
            /// Button
            let button = UIBezierPath()
            button.move(to: CGPoint(x: 0, y: 14))
            button.addCurve(to: CGPoint(x: 14, y: 0), controlPoint1: CGPoint(x: 0, y: 6.27), controlPoint2: CGPoint(x: 6.27, y: 0))
            button.addLine(to: CGPoint(x: 14, y: 0))
            button.addCurve(to: CGPoint(x: 28, y: 14), controlPoint1: CGPoint(x: 21.73, y: 0), controlPoint2: CGPoint(x: 28, y: 6.27))
            button.addLine(to: CGPoint(x: 28, y: 14))
            button.addCurve(to: CGPoint(x: 14, y: 28), controlPoint1: CGPoint(x: 28, y: 21.73), controlPoint2: CGPoint(x: 21.73, y: 28))
            button.addLine(to: CGPoint(x: 14, y: 28))
            button.addCurve(to: CGPoint(x: 0, y: 14), controlPoint1: CGPoint(x: 6.27, y: 28), controlPoint2: CGPoint(x: 0, y: 21.73))
            button.addLine(to: CGPoint(x: 0, y: 14))
            button.close()
            context.saveGState()
            button.usesEvenOddFillRule = true
            UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
            button.fill()
            context.restoreGState()
            
            /// Button (Outline Mask)
            context.saveGState()
            button.addClip()
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 2, y: 4))
            icon.addCurve(to: CGPoint(x: 0, y: 2), controlPoint1: CGPoint(x: 0.9, y: 4), controlPoint2: CGPoint(x: 0, y: 3.1))
            icon.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
            icon.addCurve(to: CGPoint(x: 4, y: 2), controlPoint1: CGPoint(x: 3.1, y: 0), controlPoint2: CGPoint(x: 4, y: 0.9))
            icon.addCurve(to: CGPoint(x: 2, y: 4), controlPoint1: CGPoint(x: 4, y: 3.1), controlPoint2: CGPoint(x: 3.1, y: 4))
            icon.close()
            icon.move(to: CGPoint(x: 8, y: 4))
            icon.addCurve(to: CGPoint(x: 6, y: 2), controlPoint1: CGPoint(x: 6.9, y: 4), controlPoint2: CGPoint(x: 6, y: 3.1))
            icon.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 6, y: 0.9), controlPoint2: CGPoint(x: 6.9, y: 0))
            icon.addCurve(to: CGPoint(x: 10, y: 2), controlPoint1: CGPoint(x: 9.1, y: 0), controlPoint2: CGPoint(x: 10, y: 0.9))
            icon.addCurve(to: CGPoint(x: 8, y: 4), controlPoint1: CGPoint(x: 10, y: 3.1), controlPoint2: CGPoint(x: 9.1, y: 4))
            icon.close()
            icon.move(to: CGPoint(x: 14, y: 4))
            icon.addCurve(to: CGPoint(x: 12, y: 2), controlPoint1: CGPoint(x: 12.9, y: 4), controlPoint2: CGPoint(x: 12, y: 3.1))
            icon.addCurve(to: CGPoint(x: 14, y: 0), controlPoint1: CGPoint(x: 12, y: 0.9), controlPoint2: CGPoint(x: 12.9, y: 0))
            icon.addCurve(to: CGPoint(x: 16, y: 2), controlPoint1: CGPoint(x: 15.1, y: 0), controlPoint2: CGPoint(x: 16, y: 0.9))
            icon.addCurve(to: CGPoint(x: 14, y: 4), controlPoint1: CGPoint(x: 16, y: 3.1), controlPoint2: CGPoint(x: 15.1, y: 4))
            icon.close()
            context.saveGState()
            context.translateBy(x: 6, y: 12)
            icon.usesEvenOddFillRule = true
            UIColor.white.setFill()
            icon.fill()
            context.restoreGState()
            
            context.restoreGState()
            // End Button (Outline Mask)
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func draw_AssetsDisclosureFw2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.2)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 13, y: 9)
            
            /// Disclosure
            let disclosure = UIBezierPath()
            disclosure.move(to: CGPoint(x: 0, y: 1.37))
            disclosure.addLine(to: CGPoint(x: 1.39, y: 0))
            disclosure.addLine(to: CGPoint(x: 8, y: 6.5))
            disclosure.addLine(to: CGPoint(x: 1.39, y: 13))
            disclosure.addLine(to: CGPoint(x: 0, y: 11.63))
            disclosure.addLine(to: CGPoint(x: 5.21, y: 6.5))
            disclosure.addLine(to: CGPoint(x: 0, y: 1.37))
            disclosure.close()
            context.saveGState()
            context.translateBy(x: 0.07, y: 0.5)
            UIColor.black.setFill()
            disclosure.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_AssetsDisclosureBw2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.2)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 12, y: 9)
            
            /// Disclosure
            let disclosure = UIBezierPath()
            disclosure.move(to: CGPoint(x: 0, y: 1.37))
            disclosure.addLine(to: CGPoint(x: 1.39, y: 0))
            disclosure.addLine(to: CGPoint(x: 8, y: 6.5))
            disclosure.addLine(to: CGPoint(x: 1.39, y: 13))
            disclosure.addLine(to: CGPoint(x: 0, y: 11.63))
            disclosure.addLine(to: CGPoint(x: 5.21, y: 6.5))
            disclosure.addLine(to: CGPoint(x: 0, y: 1.37))
            disclosure.close()
            context.saveGState()
            context.translateBy(x: 4, y: 7)
            context.scaleBy(x: -1, y: 1)
            context.translateBy(x: -4, y: -6.5)
            UIColor.black.setFill()
            disclosure.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_AssetsDisclosureDown2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.2)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 9, y: 13)
            
            /// Disclosure
            let disclosure = UIBezierPath()
            disclosure.move(to: CGPoint(x: 11.57, y: 0))
            disclosure.addLine(to: CGPoint(x: 13, y: 1.43))
            disclosure.addLine(to: CGPoint(x: 6.51, y: 7.93))
            disclosure.addLine(to: CGPoint(x: 0, y: 1.43))
            disclosure.addLine(to: CGPoint(x: 1.43, y: 0))
            disclosure.addLine(to: CGPoint(x: 6.5, y: 5.08))
            disclosure.addLine(to: CGPoint(x: 11.57, y: 0))
            disclosure.close()
            context.saveGState()
            context.translateBy(x: 0.5, y: 0.06)
            UIColor.black.setFill()
            disclosure.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_AssetsDisclosureUp2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.2)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 9, y: 11)
            
            /// Disclosure
            let disclosure = UIBezierPath()
            disclosure.move(to: CGPoint(x: 11.57, y: 0))
            disclosure.addLine(to: CGPoint(x: 13, y: 1.43))
            disclosure.addLine(to: CGPoint(x: 6.51, y: 7.93))
            disclosure.addLine(to: CGPoint(x: 0, y: 1.43))
            disclosure.addLine(to: CGPoint(x: 1.43, y: 0))
            disclosure.addLine(to: CGPoint(x: 6.5, y: 5.08))
            disclosure.addLine(to: CGPoint(x: 11.57, y: 0))
            disclosure.close()
            context.saveGState()
            context.translateBy(x: 7, y: 4.96)
            context.scaleBy(x: 1, y: -1)
            context.translateBy(x: -6.5, y: -3.97)
            UIColor.black.setFill()
            disclosure.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_AssetsDisclosureFw(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)
        
        /// Disclosure
        let disclosure = UIBezierPath()
        disclosure.move(to: CGPoint(x: 0, y: 1.37))
        disclosure.addLine(to: CGPoint(x: 1.39, y: 0))
        disclosure.addLine(to: CGPoint(x: 8, y: 6.5))
        disclosure.addLine(to: CGPoint(x: 1.39, y: 13))
        disclosure.addLine(to: CGPoint(x: 0, y: 11.63))
        disclosure.addLine(to: CGPoint(x: 5.21, y: 6.5))
        disclosure.addLine(to: CGPoint(x: 0, y: 1.37))
        disclosure.close()
        context.saveGState()
        context.translateBy(x: 13.07, y: 9.5)
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        disclosure.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_AssetsDisclosureBw(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)
        
        /// Disclosure
        let disclosure = UIBezierPath()
        disclosure.move(to: CGPoint(x: 0, y: 1.37))
        disclosure.addLine(to: CGPoint(x: 1.39, y: 0))
        disclosure.addLine(to: CGPoint(x: 8, y: 6.5))
        disclosure.addLine(to: CGPoint(x: 1.39, y: 13))
        disclosure.addLine(to: CGPoint(x: 0, y: 11.63))
        disclosure.addLine(to: CGPoint(x: 5.21, y: 6.5))
        disclosure.addLine(to: CGPoint(x: 0, y: 1.37))
        disclosure.close()
        context.saveGState()
        context.translateBy(x: 16, y: 16)
        context.scaleBy(x: -1, y: 1)
        context.translateBy(x: -4, y: -6.5)
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        disclosure.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_AssetsDisclosureDown(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)
        
        /// Disclosure
        let disclosure = UIBezierPath()
        disclosure.move(to: CGPoint(x: 11.57, y: 0))
        disclosure.addLine(to: CGPoint(x: 13, y: 1.43))
        disclosure.addLine(to: CGPoint(x: 6.51, y: 7.93))
        disclosure.addLine(to: CGPoint(x: 0, y: 1.43))
        disclosure.addLine(to: CGPoint(x: 1.43, y: 0))
        disclosure.addLine(to: CGPoint(x: 6.5, y: 5.08))
        disclosure.addLine(to: CGPoint(x: 11.57, y: 0))
        disclosure.close()
        context.saveGState()
        context.translateBy(x: 9.5, y: 13.06)
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        disclosure.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_AssetsDisclosureUp(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)
        
        /// Disclosure
        let disclosure = UIBezierPath()
        disclosure.move(to: CGPoint(x: 11.57, y: 0))
        disclosure.addLine(to: CGPoint(x: 13, y: 1.43))
        disclosure.addLine(to: CGPoint(x: 6.51, y: 7.93))
        disclosure.addLine(to: CGPoint(x: 0, y: 1.43))
        disclosure.addLine(to: CGPoint(x: 1.43, y: 0))
        disclosure.addLine(to: CGPoint(x: 6.5, y: 5.08))
        disclosure.addLine(to: CGPoint(x: 11.57, y: 0))
        disclosure.close()
        context.saveGState()
        context.translateBy(x: 16, y: 15.96)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: -6.5, y: -3.97)
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        disclosure.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_AssetsCheckboxesEmpty(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 30)
        
        /// Graphics / Navbar & Toolbar Icons / Accent / Info
        do {
            context.saveGState()
            context.translateBy(x: 2, y: 3)
            
            /// Information Icon
            let informationIcon = UIBezierPath()
            informationIcon.move(to: CGPoint(x: 1, y: 12))
            informationIcon.addCurve(to: CGPoint(x: 12, y: 23), controlPoint1: CGPoint(x: 1, y: 18.08), controlPoint2: CGPoint(x: 5.92, y: 23))
            informationIcon.addCurve(to: CGPoint(x: 23, y: 12), controlPoint1: CGPoint(x: 18.08, y: 23), controlPoint2: CGPoint(x: 23, y: 18.08))
            informationIcon.addCurve(to: CGPoint(x: 12, y: 1), controlPoint1: CGPoint(x: 23, y: 5.92), controlPoint2: CGPoint(x: 18.08, y: 1))
            informationIcon.addCurve(to: CGPoint(x: 1, y: 12), controlPoint1: CGPoint(x: 5.92, y: 1), controlPoint2: CGPoint(x: 1, y: 5.92))
            informationIcon.close()
            informationIcon.move(to: CGPoint(x: 0, y: 12))
            informationIcon.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 0, y: 5.37), controlPoint2: CGPoint(x: 5.37, y: 0))
            informationIcon.addCurve(to: CGPoint(x: 24, y: 12), controlPoint1: CGPoint(x: 18.63, y: 0), controlPoint2: CGPoint(x: 24, y: 5.37))
            informationIcon.addCurve(to: CGPoint(x: 12, y: 24), controlPoint1: CGPoint(x: 24, y: 18.63), controlPoint2: CGPoint(x: 18.63, y: 24))
            informationIcon.addCurve(to: CGPoint(x: 0, y: 12), controlPoint1: CGPoint(x: 5.37, y: 24), controlPoint2: CGPoint(x: 0, y: 18.63))
            informationIcon.close()
            context.saveGState()
            UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
            informationIcon.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func draw_AssetsCheckboxesRadioOk(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 30)
        
        /// Graphics / Navbar & Toolbar Icons / Accent / Info
        do {
            context.saveGState()
            context.translateBy(x: 2, y: 3)
            
            /// Information Icon
            let informationIcon = UIBezierPath()
            informationIcon.move(to: CGPoint(x: 1, y: 12))
            informationIcon.addCurve(to: CGPoint(x: 12, y: 23), controlPoint1: CGPoint(x: 1, y: 18.08), controlPoint2: CGPoint(x: 5.92, y: 23))
            informationIcon.addCurve(to: CGPoint(x: 23, y: 12), controlPoint1: CGPoint(x: 18.08, y: 23), controlPoint2: CGPoint(x: 23, y: 18.08))
            informationIcon.addCurve(to: CGPoint(x: 12, y: 1), controlPoint1: CGPoint(x: 23, y: 5.92), controlPoint2: CGPoint(x: 18.08, y: 1))
            informationIcon.addCurve(to: CGPoint(x: 1, y: 12), controlPoint1: CGPoint(x: 5.92, y: 1), controlPoint2: CGPoint(x: 1, y: 5.92))
            informationIcon.close()
            informationIcon.move(to: CGPoint(x: 0, y: 12))
            informationIcon.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 0, y: 5.37), controlPoint2: CGPoint(x: 5.37, y: 0))
            informationIcon.addCurve(to: CGPoint(x: 24, y: 12), controlPoint1: CGPoint(x: 18.63, y: 0), controlPoint2: CGPoint(x: 24, y: 5.37))
            informationIcon.addCurve(to: CGPoint(x: 12, y: 24), controlPoint1: CGPoint(x: 24, y: 18.63), controlPoint2: CGPoint(x: 18.63, y: 24))
            informationIcon.addCurve(to: CGPoint(x: 0, y: 12), controlPoint1: CGPoint(x: 5.37, y: 24), controlPoint2: CGPoint(x: 0, y: 18.63))
            informationIcon.close()
            context.saveGState()
            UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
            informationIcon.fill()
            context.restoreGState()
            
            /// Information Icon
            let informationIcon2 = UIBezierPath()
            informationIcon2.move(to: CGPoint(x: 7, y: 14))
            informationIcon2.addLine(to: CGPoint(x: 7, y: 14))
            informationIcon2.addCurve(to: CGPoint(x: 0, y: 7), controlPoint1: CGPoint(x: 3.13, y: 14), controlPoint2: CGPoint(x: 0, y: 10.87))
            informationIcon2.addCurve(to: CGPoint(x: 7, y: 0), controlPoint1: CGPoint(x: 0, y: 3.13), controlPoint2: CGPoint(x: 3.13, y: 0))
            informationIcon2.addCurve(to: CGPoint(x: 14, y: 7), controlPoint1: CGPoint(x: 10.87, y: 0), controlPoint2: CGPoint(x: 14, y: 3.13))
            informationIcon2.addCurve(to: CGPoint(x: 7, y: 14), controlPoint1: CGPoint(x: 14, y: 10.87), controlPoint2: CGPoint(x: 10.87, y: 14))
            informationIcon2.addLine(to: CGPoint(x: 7, y: 14))
            informationIcon2.close()
            context.saveGState()
            context.translateBy(x: 5, y: 5)
            informationIcon2.usesEvenOddFillRule = true
            UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
            informationIcon2.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func draw_AssetsCheckboxes_EmptyWhite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 30)
        
        /// Graphics / Navbar & Toolbar Icons / White / Info
        do {
            context.saveGState()
            context.translateBy(x: 2, y: 3)
            
            /// Information Icon
            let informationIcon = UIBezierPath()
            informationIcon.move(to: CGPoint(x: 1, y: 12))
            informationIcon.addCurve(to: CGPoint(x: 12, y: 23), controlPoint1: CGPoint(x: 1, y: 18.08), controlPoint2: CGPoint(x: 5.92, y: 23))
            informationIcon.addCurve(to: CGPoint(x: 23, y: 12), controlPoint1: CGPoint(x: 18.08, y: 23), controlPoint2: CGPoint(x: 23, y: 18.08))
            informationIcon.addCurve(to: CGPoint(x: 12, y: 1), controlPoint1: CGPoint(x: 23, y: 5.92), controlPoint2: CGPoint(x: 18.08, y: 1))
            informationIcon.addCurve(to: CGPoint(x: 1, y: 12), controlPoint1: CGPoint(x: 5.92, y: 1), controlPoint2: CGPoint(x: 1, y: 5.92))
            informationIcon.close()
            informationIcon.move(to: CGPoint(x: 0, y: 12))
            informationIcon.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 0, y: 5.37), controlPoint2: CGPoint(x: 5.37, y: 0))
            informationIcon.addCurve(to: CGPoint(x: 24, y: 12), controlPoint1: CGPoint(x: 18.63, y: 0), controlPoint2: CGPoint(x: 24, y: 5.37))
            informationIcon.addCurve(to: CGPoint(x: 12, y: 24), controlPoint1: CGPoint(x: 24, y: 18.63), controlPoint2: CGPoint(x: 18.63, y: 24))
            informationIcon.addCurve(to: CGPoint(x: 0, y: 12), controlPoint1: CGPoint(x: 5.37, y: 24), controlPoint2: CGPoint(x: 0, y: 18.63))
            informationIcon.close()
            context.saveGState()
            UIColor.white.setFill()
            informationIcon.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func draw_AssetsCheckboxesRadioOkWhite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 30)
        
        /// Graphics / Navbar & Toolbar Icons / White / Info
        do {
            context.saveGState()
            context.translateBy(x: 2, y: 3)
            
            /// Information Icon
            let informationIcon = UIBezierPath()
            informationIcon.move(to: CGPoint(x: 1, y: 12))
            informationIcon.addCurve(to: CGPoint(x: 12, y: 23), controlPoint1: CGPoint(x: 1, y: 18.08), controlPoint2: CGPoint(x: 5.92, y: 23))
            informationIcon.addCurve(to: CGPoint(x: 23, y: 12), controlPoint1: CGPoint(x: 18.08, y: 23), controlPoint2: CGPoint(x: 23, y: 18.08))
            informationIcon.addCurve(to: CGPoint(x: 12, y: 1), controlPoint1: CGPoint(x: 23, y: 5.92), controlPoint2: CGPoint(x: 18.08, y: 1))
            informationIcon.addCurve(to: CGPoint(x: 1, y: 12), controlPoint1: CGPoint(x: 5.92, y: 1), controlPoint2: CGPoint(x: 1, y: 5.92))
            informationIcon.close()
            informationIcon.move(to: CGPoint(x: 0, y: 12))
            informationIcon.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 0, y: 5.37), controlPoint2: CGPoint(x: 5.37, y: 0))
            informationIcon.addCurve(to: CGPoint(x: 24, y: 12), controlPoint1: CGPoint(x: 18.63, y: 0), controlPoint2: CGPoint(x: 24, y: 5.37))
            informationIcon.addCurve(to: CGPoint(x: 12, y: 24), controlPoint1: CGPoint(x: 24, y: 18.63), controlPoint2: CGPoint(x: 18.63, y: 24))
            informationIcon.addCurve(to: CGPoint(x: 0, y: 12), controlPoint1: CGPoint(x: 5.37, y: 24), controlPoint2: CGPoint(x: 0, y: 18.63))
            informationIcon.close()
            context.saveGState()
            UIColor.white.setFill()
            informationIcon.fill()
            context.restoreGState()
            
            /// Information Icon
            let informationIcon2 = UIBezierPath()
            informationIcon2.move(to: CGPoint(x: 7, y: 14))
            informationIcon2.addLine(to: CGPoint(x: 7, y: 14))
            informationIcon2.addCurve(to: CGPoint(x: 0, y: 7), controlPoint1: CGPoint(x: 3.13, y: 14), controlPoint2: CGPoint(x: 0, y: 10.87))
            informationIcon2.addCurve(to: CGPoint(x: 7, y: 0), controlPoint1: CGPoint(x: 0, y: 3.13), controlPoint2: CGPoint(x: 3.13, y: 0))
            informationIcon2.addCurve(to: CGPoint(x: 14, y: 7), controlPoint1: CGPoint(x: 10.87, y: 0), controlPoint2: CGPoint(x: 14, y: 3.13))
            informationIcon2.addCurve(to: CGPoint(x: 7, y: 14), controlPoint1: CGPoint(x: 14, y: 10.87), controlPoint2: CGPoint(x: 10.87, y: 14))
            informationIcon2.addLine(to: CGPoint(x: 7, y: 14))
            informationIcon2.close()
            context.saveGState()
            context.translateBy(x: 5, y: 5)
            informationIcon2.usesEvenOddFillRule = true
            UIColor.white.setFill()
            informationIcon2.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func draw_AssetsCheckboxesOk(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 30)
        
        /// Graphics / Navbar & Toolbar Icons / White / Info
        do {
            context.saveGState()
            context.translateBy(x: 2, y: 3)
            
            /// Information Icon
            let informationIcon = UIBezierPath()
            informationIcon.move(to: CGPoint(x: 0, y: 12))
            informationIcon.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 0, y: 5.37), controlPoint2: CGPoint(x: 5.37, y: 0))
            informationIcon.addCurve(to: CGPoint(x: 24, y: 12), controlPoint1: CGPoint(x: 18.63, y: 0), controlPoint2: CGPoint(x: 24, y: 5.37))
            informationIcon.addCurve(to: CGPoint(x: 12, y: 24), controlPoint1: CGPoint(x: 24, y: 18.63), controlPoint2: CGPoint(x: 18.63, y: 24))
            informationIcon.addCurve(to: CGPoint(x: 0, y: 12), controlPoint1: CGPoint(x: 5.37, y: 24), controlPoint2: CGPoint(x: 0, y: 18.63))
            informationIcon.close()
            context.saveGState()
            informationIcon.usesEvenOddFillRule = true
            UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
            informationIcon.fill()
            context.restoreGState()
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 4.85, y: 7.06))
            icon.addLine(to: CGPoint(x: 11.3, y: 0.3))
            icon.addCurve(to: CGPoint(x: 12.71, y: 0.3), controlPoint1: CGPoint(x: 11.69, y: -0.1), controlPoint2: CGPoint(x: 12.32, y: -0.1))
            icon.addCurve(to: CGPoint(x: 12.71, y: 1.77), controlPoint1: CGPoint(x: 13.1, y: 0.71), controlPoint2: CGPoint(x: 13.1, y: 1.37))
            icon.addLine(to: CGPoint(x: 4.85, y: 10))
            icon.addLine(to: CGPoint(x: 0.29, y: 5.22))
            icon.addCurve(to: CGPoint(x: 0.29, y: 3.75), controlPoint1: CGPoint(x: -0.1, y: 4.82), controlPoint2: CGPoint(x: -0.1, y: 4.16))
            icon.addCurve(to: CGPoint(x: 1.7, y: 3.75), controlPoint1: CGPoint(x: 0.68, y: 3.35), controlPoint2: CGPoint(x: 1.31, y: 3.35))
            icon.addLine(to: CGPoint(x: 4.85, y: 7.06))
            icon.close()
            context.saveGState()
            context.translateBy(x: 5.7, y: 7.5)
            UIColor.white.setFill()
            icon.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func draw_AssetsCheckboxesOkInactive(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 30)
        
        /// Graphics / Navbar & Toolbar Icons / Grey / Info
        do {
            context.saveGState()
            context.translateBy(x: 2, y: 3)
            
            /// Information Icon
            let informationIcon = UIBezierPath()
            informationIcon.move(to: CGPoint(x: 0, y: 12))
            informationIcon.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 0, y: 5.37), controlPoint2: CGPoint(x: 5.37, y: 0))
            informationIcon.addCurve(to: CGPoint(x: 24, y: 12), controlPoint1: CGPoint(x: 18.63, y: 0), controlPoint2: CGPoint(x: 24, y: 5.37))
            informationIcon.addCurve(to: CGPoint(x: 12, y: 24), controlPoint1: CGPoint(x: 24, y: 18.63), controlPoint2: CGPoint(x: 18.63, y: 24))
            informationIcon.addCurve(to: CGPoint(x: 0, y: 12), controlPoint1: CGPoint(x: 5.37, y: 24), controlPoint2: CGPoint(x: 0, y: 18.63))
            informationIcon.close()
            context.saveGState()
            informationIcon.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.025, brightness: 0.8, alpha: 1).setFill()
            informationIcon.fill()
            context.restoreGState()
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 4.85, y: 7.06))
            icon.addLine(to: CGPoint(x: 11.3, y: 0.3))
            icon.addCurve(to: CGPoint(x: 12.71, y: 0.3), controlPoint1: CGPoint(x: 11.69, y: -0.1), controlPoint2: CGPoint(x: 12.32, y: -0.1))
            icon.addCurve(to: CGPoint(x: 12.71, y: 1.77), controlPoint1: CGPoint(x: 13.1, y: 0.71), controlPoint2: CGPoint(x: 13.1, y: 1.37))
            icon.addLine(to: CGPoint(x: 4.85, y: 10))
            icon.addLine(to: CGPoint(x: 0.29, y: 5.22))
            icon.addCurve(to: CGPoint(x: 0.29, y: 3.75), controlPoint1: CGPoint(x: -0.1, y: 4.82), controlPoint2: CGPoint(x: -0.1, y: 4.16))
            icon.addCurve(to: CGPoint(x: 1.7, y: 3.75), controlPoint1: CGPoint(x: 0.68, y: 3.35), controlPoint2: CGPoint(x: 1.31, y: 3.35))
            icon.addLine(to: CGPoint(x: 4.85, y: 7.06))
            icon.close()
            context.saveGState()
            context.translateBy(x: 5.7, y: 7.5)
            UIColor.white.setFill()
            icon.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func draw_AssetsCheckboxesOkWhite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 30)
        
        /// Graphics / Navbar & Toolbar Icons / White / Info
        do {
            context.saveGState()
            context.translateBy(x: 2, y: 3)
            
            /// Information Icon
            let informationIcon = UIBezierPath()
            informationIcon.move(to: CGPoint(x: 0, y: 12))
            informationIcon.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 0, y: 5.37), controlPoint2: CGPoint(x: 5.37, y: 0))
            informationIcon.addCurve(to: CGPoint(x: 24, y: 12), controlPoint1: CGPoint(x: 18.63, y: 0), controlPoint2: CGPoint(x: 24, y: 5.37))
            informationIcon.addCurve(to: CGPoint(x: 12, y: 24), controlPoint1: CGPoint(x: 24, y: 18.63), controlPoint2: CGPoint(x: 18.63, y: 24))
            informationIcon.addCurve(to: CGPoint(x: 0, y: 12), controlPoint1: CGPoint(x: 5.37, y: 24), controlPoint2: CGPoint(x: 0, y: 18.63))
            informationIcon.close()
            context.saveGState()
            informationIcon.usesEvenOddFillRule = true
            UIColor.white.setFill()
            informationIcon.fill()
            context.restoreGState()
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 4.85, y: 6.74))
            icon.addLine(to: CGPoint(x: 11.3, y: 0.29))
            icon.addCurve(to: CGPoint(x: 12.71, y: 0.29), controlPoint1: CGPoint(x: 11.69, y: -0.1), controlPoint2: CGPoint(x: 12.32, y: -0.1))
            icon.addCurve(to: CGPoint(x: 12.71, y: 1.7), controlPoint1: CGPoint(x: 13.1, y: 0.68), controlPoint2: CGPoint(x: 13.1, y: 1.31))
            icon.addLine(to: CGPoint(x: 4.85, y: 9.55))
            icon.addLine(to: CGPoint(x: 0.29, y: 4.99))
            icon.addCurve(to: CGPoint(x: 0.29, y: 3.58), controlPoint1: CGPoint(x: -0.1, y: 4.6), controlPoint2: CGPoint(x: -0.1, y: 3.97))
            icon.addCurve(to: CGPoint(x: 1.7, y: 3.58), controlPoint1: CGPoint(x: 0.68, y: 3.2), controlPoint2: CGPoint(x: 1.31, y: 3.2))
            icon.addLine(to: CGPoint(x: 4.85, y: 6.74))
            icon.close()
            context.saveGState()
            context.translateBy(x: 5.7, y: 7.5)
            UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
            icon.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func draw_AssetsMiscOnlineMarker(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 22), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 22)
        
        /// Oval
        let oval = UIBezierPath()
        oval.move(to: CGPoint(x: 5, y: 10))
        oval.addCurve(to: CGPoint(x: 10, y: 5), controlPoint1: CGPoint(x: 7.76, y: 10), controlPoint2: CGPoint(x: 10, y: 7.76))
        oval.addCurve(to: CGPoint(x: 5, y: 0), controlPoint1: CGPoint(x: 10, y: 2.24), controlPoint2: CGPoint(x: 7.76, y: 0))
        oval.addCurve(to: CGPoint(x: 0, y: 5), controlPoint1: CGPoint(x: 2.24, y: 0), controlPoint2: CGPoint(x: 0, y: 2.24))
        oval.addCurve(to: CGPoint(x: 5, y: 10), controlPoint1: CGPoint(x: 0, y: 7.76), controlPoint2: CGPoint(x: 2.24, y: 10))
        oval.close()
        context.saveGState()
        context.translateBy(x: 5, y: 6)
        oval.usesEvenOddFillRule = true
        UIColor(hue: 0.362, saturation: 0.65, brightness: 0.851, alpha: 1).setFill()
        oval.fill()
        context.restoreGState()
        
        /// Oval
        let oval3 = UIBezierPath()
        oval3.move(to: CGPoint(x: 6, y: 12))
        oval3.addCurve(to: CGPoint(x: 12, y: 6), controlPoint1: CGPoint(x: 9.31, y: 12), controlPoint2: CGPoint(x: 12, y: 9.31))
        oval3.addCurve(to: CGPoint(x: 6, y: 0), controlPoint1: CGPoint(x: 12, y: 2.69), controlPoint2: CGPoint(x: 9.31, y: 0))
        oval3.addCurve(to: CGPoint(x: 0, y: 6), controlPoint1: CGPoint(x: 2.69, y: 0), controlPoint2: CGPoint(x: 0, y: 2.69))
        oval3.addCurve(to: CGPoint(x: 6, y: 12), controlPoint1: CGPoint(x: 0, y: 9.31), controlPoint2: CGPoint(x: 2.69, y: 12))
        oval3.close()
        context.saveGState()
        context.translateBy(x: 4, y: 5)
        context.saveGState()
        oval3.lineWidth = 4
        context.beginPath()
        context.addPath(oval3.cgPath)
        context.clip(using: .evenOdd)
        UIColor.white.setStroke()
        oval3.stroke()
        context.restoreGState()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_AssetsMiscCheck(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 22), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 22)
        
        /// Icon
        do {
            context.saveGState()
            context.translateBy(x: 5, y: 6)
            
            /// Oval
            let oval = UIBezierPath()
            oval.move(to: CGPoint(x: 5, y: 10))
            oval.addCurve(to: CGPoint(x: 10, y: 5), controlPoint1: CGPoint(x: 7.76, y: 10), controlPoint2: CGPoint(x: 10, y: 7.76))
            oval.addCurve(to: CGPoint(x: 5, y: 0), controlPoint1: CGPoint(x: 10, y: 2.24), controlPoint2: CGPoint(x: 7.76, y: 0))
            oval.addCurve(to: CGPoint(x: 0, y: 5), controlPoint1: CGPoint(x: 2.24, y: 0), controlPoint2: CGPoint(x: 0, y: 2.24))
            oval.addCurve(to: CGPoint(x: 5, y: 10), controlPoint1: CGPoint(x: 0, y: 7.76), controlPoint2: CGPoint(x: 2.24, y: 10))
            oval.close()
            context.saveGState()
            oval.usesEvenOddFillRule = true
            UIColor(hue: 0.362, saturation: 0.65, brightness: 0.851, alpha: 1).setFill()
            oval.fill()
            context.restoreGState()
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 2.06, y: 2.87))
            icon.addLine(to: CGPoint(x: 4.81, y: 0.12))
            icon.addCurve(to: CGPoint(x: 5.41, y: 0.12), controlPoint1: CGPoint(x: 4.97, y: -0.04), controlPoint2: CGPoint(x: 5.24, y: -0.04))
            icon.addCurve(to: CGPoint(x: 5.41, y: 0.72), controlPoint1: CGPoint(x: 5.57, y: 0.29), controlPoint2: CGPoint(x: 5.57, y: 0.56))
            icon.addLine(to: CGPoint(x: 2.06, y: 4.06))
            icon.addLine(to: CGPoint(x: 0.12, y: 2.12))
            icon.addCurve(to: CGPoint(x: 0.12, y: 1.52), controlPoint1: CGPoint(x: -0.04, y: 1.96), controlPoint2: CGPoint(x: -0.04, y: 1.69))
            icon.addCurve(to: CGPoint(x: 0.72, y: 1.52), controlPoint1: CGPoint(x: 0.29, y: 1.36), controlPoint2: CGPoint(x: 0.56, y: 1.36))
            icon.addLine(to: CGPoint(x: 2.06, y: 2.87))
            icon.close()
            context.saveGState()
            context.translateBy(x: 2.39, y: 3.44)
            UIColor.white.setFill()
            icon.fill()
            context.saveGState()
            icon.lineWidth = 0.6
            context.beginPath()
            context.addPath(icon.cgPath)
            context.addRect(icon.bounds.insetBy(dx: -6, dy: -6))
            context.clip(using: .evenOdd)
            UIColor.white.setStroke()
            icon.stroke()
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func draw_AssetsMiscLike(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 22), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 22)
        
        /// Icon
        do {
            context.saveGState()
            context.translateBy(x: 2, y: 3)
            
            /// Oval
            let oval = UIBezierPath()
            oval.move(to: CGPoint(x: 8, y: 16))
            oval.addCurve(to: CGPoint(x: 16, y: 8), controlPoint1: CGPoint(x: 12.42, y: 16), controlPoint2: CGPoint(x: 16, y: 12.42))
            oval.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 16, y: 3.58), controlPoint2: CGPoint(x: 12.42, y: 0))
            oval.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 3.58, y: 0), controlPoint2: CGPoint(x: 0, y: 3.58))
            oval.addCurve(to: CGPoint(x: 8, y: 16), controlPoint1: CGPoint(x: 0, y: 12.42), controlPoint2: CGPoint(x: 3.58, y: 16))
            oval.close()
            context.saveGState()
            oval.usesEvenOddFillRule = true
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            oval.fill()
            context.restoreGState()
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 4, y: 7.5))
            icon.addCurve(to: CGPoint(x: 4, y: 0.89), controlPoint1: CGPoint(x: 11.6, y: 2.38), controlPoint2: CGPoint(x: 6.48, y: -1.92))
            icon.addCurve(to: CGPoint(x: 4, y: 7.5), controlPoint1: CGPoint(x: 1.52, y: -1.92), controlPoint2: CGPoint(x: -3.6, y: 2.38))
            icon.close()
            context.saveGState()
            context.translateBy(x: 4, y: 4.7)
            icon.usesEvenOddFillRule = true
            UIColor.white.setFill()
            icon.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func draw_AssetsMiscAdd(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 22), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 22)
        
        /// Icon
        do {
            context.saveGState()
            context.translateBy(x: 2, y: 3)
            
            /// Oval
            let oval = UIBezierPath()
            oval.move(to: CGPoint(x: 8, y: 16))
            oval.addCurve(to: CGPoint(x: 16, y: 8), controlPoint1: CGPoint(x: 12.42, y: 16), controlPoint2: CGPoint(x: 16, y: 12.42))
            oval.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 16, y: 3.58), controlPoint2: CGPoint(x: 12.42, y: 0))
            oval.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 3.58, y: 0), controlPoint2: CGPoint(x: 0, y: 3.58))
            oval.addCurve(to: CGPoint(x: 8, y: 16), controlPoint1: CGPoint(x: 0, y: 12.42), controlPoint2: CGPoint(x: 3.58, y: 16))
            oval.close()
            context.saveGState()
            oval.usesEvenOddFillRule = true
            UIColor(hue: 0.362, saturation: 0.65, brightness: 0.851, alpha: 1).setFill()
            oval.fill()
            context.restoreGState()
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 3.56, y: 3.56))
            icon.addLine(to: CGPoint(x: 3.56, y: 0.44))
            icon.addCurve(to: CGPoint(x: 4, y: 0), controlPoint1: CGPoint(x: 3.56, y: 0.2), controlPoint2: CGPoint(x: 3.75, y: 0))
            icon.addCurve(to: CGPoint(x: 4.44, y: 0.44), controlPoint1: CGPoint(x: 4.25, y: 0), controlPoint2: CGPoint(x: 4.44, y: 0.2))
            icon.addLine(to: CGPoint(x: 4.44, y: 3.56))
            icon.addLine(to: CGPoint(x: 7.56, y: 3.56))
            icon.addCurve(to: CGPoint(x: 8, y: 4), controlPoint1: CGPoint(x: 7.8, y: 3.56), controlPoint2: CGPoint(x: 8, y: 3.75))
            icon.addCurve(to: CGPoint(x: 7.56, y: 4.44), controlPoint1: CGPoint(x: 8, y: 4.25), controlPoint2: CGPoint(x: 7.8, y: 4.44))
            icon.addLine(to: CGPoint(x: 4.44, y: 4.44))
            icon.addLine(to: CGPoint(x: 4.44, y: 7.56))
            icon.addCurve(to: CGPoint(x: 4, y: 8), controlPoint1: CGPoint(x: 4.44, y: 7.8), controlPoint2: CGPoint(x: 4.25, y: 8))
            icon.addCurve(to: CGPoint(x: 3.56, y: 7.56), controlPoint1: CGPoint(x: 3.75, y: 8), controlPoint2: CGPoint(x: 3.56, y: 7.8))
            icon.addLine(to: CGPoint(x: 3.56, y: 4.44))
            icon.addLine(to: CGPoint(x: 0.44, y: 4.44))
            icon.addCurve(to: CGPoint(x: 0, y: 4), controlPoint1: CGPoint(x: 0.2, y: 4.44), controlPoint2: CGPoint(x: 0, y: 4.25))
            icon.addCurve(to: CGPoint(x: 0.44, y: 3.56), controlPoint1: CGPoint(x: 0, y: 3.75), controlPoint2: CGPoint(x: 0.2, y: 3.56))
            icon.addLine(to: CGPoint(x: 3.56, y: 3.56))
            icon.close()
            context.saveGState()
            context.translateBy(x: 4, y: 4)
            icon.usesEvenOddFillRule = true
            UIColor.white.setFill()
            icon.fill()
            icon.lineWidth = 1
            UIColor.white.setStroke()
            icon.stroke()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func draw_AssetsMiscFriend(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 22), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 22)
        
        /// Icon
        do {
            context.saveGState()
            context.translateBy(x: 2, y: 3)
            
            /// Oval
            let oval = UIBezierPath()
            oval.move(to: CGPoint(x: 8, y: 16))
            oval.addCurve(to: CGPoint(x: 16, y: 8), controlPoint1: CGPoint(x: 12.42, y: 16), controlPoint2: CGPoint(x: 16, y: 12.42))
            oval.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 16, y: 3.58), controlPoint2: CGPoint(x: 12.42, y: 0))
            oval.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 3.58, y: 0), controlPoint2: CGPoint(x: 0, y: 3.58))
            oval.addCurve(to: CGPoint(x: 8, y: 16), controlPoint1: CGPoint(x: 0, y: 12.42), controlPoint2: CGPoint(x: 3.58, y: 16))
            oval.close()
            context.saveGState()
            oval.usesEvenOddFillRule = true
            UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
            oval.fill()
            context.restoreGState()
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 0, y: 10.47))
            icon.addCurve(to: CGPoint(x: 4.73, y: 12.42), controlPoint1: CGPoint(x: 1.21, y: 11.68), controlPoint2: CGPoint(x: 2.89, y: 12.42))
            icon.addCurve(to: CGPoint(x: 9.5, y: 10.43), controlPoint1: CGPoint(x: 6.6, y: 12.42), controlPoint2: CGPoint(x: 8.28, y: 11.66))
            icon.addLine(to: CGPoint(x: 9.5, y: 10.38))
            icon.addCurve(to: CGPoint(x: 8.69, y: 8.93), controlPoint1: CGPoint(x: 9.37, y: 9.75), controlPoint2: CGPoint(x: 9.1, y: 9.26))
            icon.addCurve(to: CGPoint(x: 7.14, y: 8.47), controlPoint1: CGPoint(x: 8.4, y: 8.69), controlPoint2: CGPoint(x: 7.88, y: 8.54))
            icon.addCurve(to: CGPoint(x: 6.53, y: 8.3), controlPoint1: CGPoint(x: 6.95, y: 8.46), controlPoint2: CGPoint(x: 6.76, y: 8.42))
            icon.addCurve(to: CGPoint(x: 6.13, y: 7.85), controlPoint1: CGPoint(x: 6.28, y: 8.17), controlPoint2: CGPoint(x: 6.16, y: 7.98))
            icon.addCurve(to: CGPoint(x: 6.13, y: 7.03), controlPoint1: CGPoint(x: 6.13, y: 7.59), controlPoint2: CGPoint(x: 6.13, y: 7.3))
            icon.addCurve(to: CGPoint(x: 6.14, y: 6.98), controlPoint1: CGPoint(x: 6.13, y: 7.01), controlPoint2: CGPoint(x: 6.13, y: 6.99))
            icon.addCurve(to: CGPoint(x: 6.58, y: 6.2), controlPoint1: CGPoint(x: 6.36, y: 6.8), controlPoint2: CGPoint(x: 6.48, y: 6.45))
            icon.addCurve(to: CGPoint(x: 6.77, y: 5.54), controlPoint1: CGPoint(x: 6.66, y: 5.98), controlPoint2: CGPoint(x: 6.7, y: 5.76))
            icon.addCurve(to: CGPoint(x: 6.82, y: 5.47), controlPoint1: CGPoint(x: 6.77, y: 5.51), controlPoint2: CGPoint(x: 6.8, y: 5.48))
            icon.addCurve(to: CGPoint(x: 7.06, y: 5.3), controlPoint1: CGPoint(x: 6.92, y: 5.45), controlPoint2: CGPoint(x: 7.01, y: 5.39))
            icon.addCurve(to: CGPoint(x: 7.26, y: 4.39), controlPoint1: CGPoint(x: 7.25, y: 5.02), controlPoint2: CGPoint(x: 7.32, y: 4.72))
            icon.addCurve(to: CGPoint(x: 7.1, y: 4.12), controlPoint1: CGPoint(x: 7.24, y: 4.28), controlPoint2: CGPoint(x: 7.19, y: 4.19))
            icon.addCurve(to: CGPoint(x: 7.07, y: 4.01), controlPoint1: CGPoint(x: 7.06, y: 4.08), controlPoint2: CGPoint(x: 7.06, y: 4.06))
            icon.addCurve(to: CGPoint(x: 7.35, y: 2.27), controlPoint1: CGPoint(x: 7.25, y: 3.44), controlPoint2: CGPoint(x: 7.36, y: 2.86))
            icon.addCurve(to: CGPoint(x: 7.19, y: 1.4), controlPoint1: CGPoint(x: 7.34, y: 1.97), controlPoint2: CGPoint(x: 7.3, y: 1.68))
            icon.addCurve(to: CGPoint(x: 6.14, y: 0.53), controlPoint1: CGPoint(x: 7, y: 0.91), controlPoint2: CGPoint(x: 6.65, y: 0.62))
            icon.addCurve(to: CGPoint(x: 5.97, y: 0.42), controlPoint1: CGPoint(x: 6.06, y: 0.51), controlPoint2: CGPoint(x: 6.01, y: 0.48))
            icon.addCurve(to: CGPoint(x: 5.34, y: 0.07), controlPoint1: CGPoint(x: 5.81, y: 0.22), controlPoint2: CGPoint(x: 5.58, y: 0.12))
            icon.addCurve(to: CGPoint(x: 4.64, y: 0), controlPoint1: CGPoint(x: 5.1, y: 0.02), controlPoint2: CGPoint(x: 4.87, y: 0))
            icon.addCurve(to: CGPoint(x: 3.26, y: 0.32), controlPoint1: CGPoint(x: 4.17, y: 0), controlPoint2: CGPoint(x: 3.71, y: 0.1))
            icon.addCurve(to: CGPoint(x: 2.24, y: 1.76), controlPoint1: CGPoint(x: 2.67, y: 0.62), controlPoint2: CGPoint(x: 2.36, y: 1.13))
            icon.addCurve(to: CGPoint(x: 2.23, y: 3.16), controlPoint1: CGPoint(x: 2.15, y: 2.23), controlPoint2: CGPoint(x: 2.16, y: 2.7))
            icon.addCurve(to: CGPoint(x: 2.4, y: 4.02), controlPoint1: CGPoint(x: 2.27, y: 3.45), controlPoint2: CGPoint(x: 2.34, y: 3.73))
            icon.addCurve(to: CGPoint(x: 2.39, y: 4.1), controlPoint1: CGPoint(x: 2.4, y: 4.04), controlPoint2: CGPoint(x: 2.4, y: 4.08))
            icon.addCurve(to: CGPoint(x: 2.19, y: 4.67), controlPoint1: CGPoint(x: 2.21, y: 4.25), controlPoint2: CGPoint(x: 2.17, y: 4.45))
            icon.addCurve(to: CGPoint(x: 2.37, y: 5.26), controlPoint1: CGPoint(x: 2.21, y: 4.87), controlPoint2: CGPoint(x: 2.25, y: 5.08))
            icon.addCurve(to: CGPoint(x: 2.64, y: 5.48), controlPoint1: CGPoint(x: 2.44, y: 5.36), controlPoint2: CGPoint(x: 2.52, y: 5.44))
            icon.addCurve(to: CGPoint(x: 2.7, y: 5.55), controlPoint1: CGPoint(x: 2.67, y: 5.48), controlPoint2: CGPoint(x: 2.69, y: 5.52))
            icon.addCurve(to: CGPoint(x: 2.9, y: 6.31), controlPoint1: CGPoint(x: 2.74, y: 5.85), controlPoint2: CGPoint(x: 2.81, y: 6.1))
            icon.addCurve(to: CGPoint(x: 3.32, y: 6.96), controlPoint1: CGPoint(x: 3.09, y: 6.74), controlPoint2: CGPoint(x: 3.31, y: 6.95))
            icon.addCurve(to: CGPoint(x: 3.37, y: 7.03), controlPoint1: CGPoint(x: 3.36, y: 7.01), controlPoint2: CGPoint(x: 3.37, y: 6.98))
            icon.addCurve(to: CGPoint(x: 3.38, y: 7.85), controlPoint1: CGPoint(x: 3.37, y: 7.03), controlPoint2: CGPoint(x: 3.38, y: 7.59))
            icon.addCurve(to: CGPoint(x: 2.97, y: 8.3), controlPoint1: CGPoint(x: 3.34, y: 7.98), controlPoint2: CGPoint(x: 3.23, y: 8.17))
            icon.addCurve(to: CGPoint(x: 2.36, y: 8.47), controlPoint1: CGPoint(x: 2.74, y: 8.42), controlPoint2: CGPoint(x: 2.56, y: 8.46))
            icon.addCurve(to: CGPoint(x: 0.82, y: 8.93), controlPoint1: CGPoint(x: 1.62, y: 8.54), controlPoint2: CGPoint(x: 1.1, y: 8.69))
            icon.addCurve(to: CGPoint(x: 0.01, y: 10.38), controlPoint1: CGPoint(x: 0.41, y: 9.26), controlPoint2: CGPoint(x: 0.14, y: 9.75))
            icon.addLine(to: CGPoint(x: 0, y: 10.47))
            icon.close()
            context.saveGState()
            context.translateBy(x: 3.3, y: 2.2)
            icon.usesEvenOddFillRule = true
            UIColor.white.setFill()
            icon.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func draw_AssetsMiscFlag(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 22, height: 22), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 22, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 22, y: resizedFrame.height / 22)
        
        /// Collection /_/ Circle
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func draw_AssetsMiscTypeIndicator(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 6, height: 26), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 6, height: 26), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 6, y: resizedFrame.height / 26)
        
        /// Indicator
        let indicator = UIBezierPath()
        indicator.move(to: CGPoint(x: 1, y: 0))
        indicator.addLine(to: CGPoint(x: 1, y: 0))
        indicator.addCurve(to: CGPoint(x: 2, y: 1), controlPoint1: CGPoint(x: 1.55, y: 0), controlPoint2: CGPoint(x: 2, y: 0.45))
        indicator.addLine(to: CGPoint(x: 2, y: 21))
        indicator.addCurve(to: CGPoint(x: 1, y: 22), controlPoint1: CGPoint(x: 2, y: 21.55), controlPoint2: CGPoint(x: 1.55, y: 22))
        indicator.addLine(to: CGPoint(x: 1, y: 22))
        indicator.addCurve(to: CGPoint(x: 0, y: 21), controlPoint1: CGPoint(x: 0.45, y: 22), controlPoint2: CGPoint(x: 0, y: 21.55))
        indicator.addLine(to: CGPoint(x: 0, y: 1))
        indicator.addCurve(to: CGPoint(x: 1, y: 0), controlPoint1: CGPoint(x: 0, y: 0.45), controlPoint2: CGPoint(x: 0.45, y: 0))
        indicator.close()
        context.saveGState()
        context.translateBy(x: 2, y: 2)
        indicator.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        indicator.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_AssetsMiscPopoverArrowType2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 38, height: 17), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 38, height: 17), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 38, y: resizedFrame.height / 17)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.2)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 1, y: 5)
            
            /// Line
            let line = UIBezierPath()
            line.move(to: CGPoint(x: 2.5, y: 5))
            line.addCurve(to: CGPoint(x: 0, y: 2.5), controlPoint1: CGPoint(x: 1.12, y: 5), controlPoint2: CGPoint(x: 0, y: 3.88))
            line.addCurve(to: CGPoint(x: 2.5, y: 0), controlPoint1: CGPoint(x: 0, y: 1.12), controlPoint2: CGPoint(x: 1.12, y: 0))
            line.addLine(to: CGPoint(x: 33.5, y: 0))
            line.addCurve(to: CGPoint(x: 36, y: 2.5), controlPoint1: CGPoint(x: 34.88, y: 0), controlPoint2: CGPoint(x: 36, y: 1.12))
            line.addCurve(to: CGPoint(x: 33.5, y: 5), controlPoint1: CGPoint(x: 36, y: 3.88), controlPoint2: CGPoint(x: 34.88, y: 5))
            line.addLine(to: CGPoint(x: 2.5, y: 5))
            line.close()
            context.saveGState()
            context.translateBy(x: 0, y: 0.5)
            UIColor.black.setFill()
            line.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_AssetsMiscPopoverArrowType1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 38, height: 17), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 38, height: 17), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 38, y: resizedFrame.height / 17)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.2)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 0, y: 3)
            
            /// Line
            let line = UIBezierPath()
            line.move(to: CGPoint(x: 18, y: 4.87))
            line.addLine(to: CGPoint(x: 32.73, y: 0.12))
            line.addCurve(to: CGPoint(x: 35.88, y: 1.73), controlPoint1: CGPoint(x: 34.05, y: -0.3), controlPoint2: CGPoint(x: 35.46, y: 0.42))
            line.addCurve(to: CGPoint(x: 34.27, y: 4.88), controlPoint1: CGPoint(x: 36.3, y: 3.05), controlPoint2: CGPoint(x: 35.58, y: 4.46))
            line.addLine(to: CGPoint(x: 18, y: 10.13))
            line.addLine(to: CGPoint(x: 1.73, y: 4.88))
            line.addCurve(to: CGPoint(x: 0.12, y: 1.73), controlPoint1: CGPoint(x: 0.42, y: 4.46), controlPoint2: CGPoint(x: -0.3, y: 3.05))
            line.addCurve(to: CGPoint(x: 3.27, y: 0.12), controlPoint1: CGPoint(x: 0.55, y: 0.42), controlPoint2: CGPoint(x: 1.95, y: -0.3))
            line.addLine(to: CGPoint(x: 18, y: 4.87))
            line.close()
            context.saveGState()
            context.translateBy(x: 1, y: 0.5)
            UIColor.black.setFill()
            line.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_AssetsMiscFaceID(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 40), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 40)
        
        /// icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 9.97, y: 14.58))
        icon.addCurve(to: CGPoint(x: 11.42, y: 13.12), controlPoint1: CGPoint(x: 9.97, y: 13.77), controlPoint2: CGPoint(x: 10.62, y: 13.12))
        icon.addCurve(to: CGPoint(x: 12.87, y: 14.58), controlPoint1: CGPoint(x: 12.22, y: 13.12), controlPoint2: CGPoint(x: 12.87, y: 13.77))
        icon.addLine(to: CGPoint(x: 12.87, y: 17.74))
        icon.addCurve(to: CGPoint(x: 11.42, y: 19.21), controlPoint1: CGPoint(x: 12.87, y: 18.55), controlPoint2: CGPoint(x: 12.22, y: 19.21))
        icon.addCurve(to: CGPoint(x: 9.97, y: 17.74), controlPoint1: CGPoint(x: 10.62, y: 19.21), controlPoint2: CGPoint(x: 9.97, y: 18.55))
        icon.addLine(to: CGPoint(x: 9.97, y: 14.58))
        icon.close()
        icon.move(to: CGPoint(x: 28.58, y: 19.21))
        icon.addCurve(to: CGPoint(x: 27.13, y: 17.74), controlPoint1: CGPoint(x: 27.78, y: 19.21), controlPoint2: CGPoint(x: 27.13, y: 18.55))
        icon.addLine(to: CGPoint(x: 27.13, y: 14.58))
        icon.addCurve(to: CGPoint(x: 28.58, y: 13.12), controlPoint1: CGPoint(x: 27.13, y: 13.77), controlPoint2: CGPoint(x: 27.78, y: 13.12))
        icon.addCurve(to: CGPoint(x: 30.03, y: 14.58), controlPoint1: CGPoint(x: 29.38, y: 13.12), controlPoint2: CGPoint(x: 30.03, y: 13.77))
        icon.addLine(to: CGPoint(x: 30.03, y: 17.74))
        icon.addCurve(to: CGPoint(x: 28.58, y: 19.21), controlPoint1: CGPoint(x: 30.03, y: 18.55), controlPoint2: CGPoint(x: 29.38, y: 19.21))
        icon.close()
        icon.move(to: CGPoint(x: 17.82, y: 25.19))
        icon.addCurve(to: CGPoint(x: 16.7, y: 24.07), controlPoint1: CGPoint(x: 17.2, y: 25.19), controlPoint2: CGPoint(x: 16.7, y: 24.69))
        icon.addCurve(to: CGPoint(x: 17.82, y: 22.95), controlPoint1: CGPoint(x: 16.7, y: 23.45), controlPoint2: CGPoint(x: 17.2, y: 22.95))
        icon.addLine(to: CGPoint(x: 18.52, y: 22.95))
        icon.addCurve(to: CGPoint(x: 19.57, y: 21.89), controlPoint1: CGPoint(x: 19.1, y: 22.95), controlPoint2: CGPoint(x: 19.57, y: 22.47))
        icon.addLine(to: CGPoint(x: 19.57, y: 14.32))
        icon.addCurve(to: CGPoint(x: 20.69, y: 13.2), controlPoint1: CGPoint(x: 19.57, y: 13.7), controlPoint2: CGPoint(x: 20.07, y: 13.2))
        icon.addCurve(to: CGPoint(x: 21.8, y: 14.32), controlPoint1: CGPoint(x: 21.3, y: 13.2), controlPoint2: CGPoint(x: 21.8, y: 13.7))
        icon.addLine(to: CGPoint(x: 21.8, y: 21.89))
        icon.addCurve(to: CGPoint(x: 18.52, y: 25.19), controlPoint1: CGPoint(x: 21.8, y: 23.71), controlPoint2: CGPoint(x: 20.33, y: 25.19))
        icon.addLine(to: CGPoint(x: 17.82, y: 25.19))
        icon.close()
        icon.move(to: CGPoint(x: 25.66, y: 27.95))
        icon.addCurve(to: CGPoint(x: 27.23, y: 27.84), controlPoint1: CGPoint(x: 26.06, y: 27.49), controlPoint2: CGPoint(x: 26.77, y: 27.44))
        icon.addCurve(to: CGPoint(x: 27.33, y: 29.43), controlPoint1: CGPoint(x: 27.69, y: 28.25), controlPoint2: CGPoint(x: 27.74, y: 28.96))
        icon.addCurve(to: CGPoint(x: 20.01, y: 32.43), controlPoint1: CGPoint(x: 25.71, y: 31.31), controlPoint2: CGPoint(x: 22.97, y: 32.43))
        icon.addCurve(to: CGPoint(x: 12.66, y: 29.39), controlPoint1: CGPoint(x: 17.03, y: 32.43), controlPoint2: CGPoint(x: 14.28, y: 31.29))
        icon.addCurve(to: CGPoint(x: 12.78, y: 27.81), controlPoint1: CGPoint(x: 12.26, y: 28.92), controlPoint2: CGPoint(x: 12.31, y: 28.21))
        icon.addCurve(to: CGPoint(x: 14.35, y: 27.93), controlPoint1: CGPoint(x: 13.24, y: 27.4), controlPoint2: CGPoint(x: 13.95, y: 27.45))
        icon.addCurve(to: CGPoint(x: 20.01, y: 30.18), controlPoint1: CGPoint(x: 15.54, y: 29.32), controlPoint2: CGPoint(x: 17.71, y: 30.18))
        icon.addCurve(to: CGPoint(x: 25.66, y: 27.95), controlPoint1: CGPoint(x: 22.3, y: 30.18), controlPoint2: CGPoint(x: 24.46, y: 29.33))
        icon.close()
        icon.move(to: CGPoint(x: 34.56, y: 0))
        icon.addCurve(to: CGPoint(x: 40, y: 5.47), controlPoint1: CGPoint(x: 37.56, y: 0), controlPoint2: CGPoint(x: 40, y: 2.46))
        icon.addLine(to: CGPoint(x: 40, y: 10.84))
        icon.addCurve(to: CGPoint(x: 38.89, y: 11.96), controlPoint1: CGPoint(x: 40, y: 11.46), controlPoint2: CGPoint(x: 39.5, y: 11.96))
        icon.addCurve(to: CGPoint(x: 37.77, y: 10.84), controlPoint1: CGPoint(x: 38.27, y: 11.96), controlPoint2: CGPoint(x: 37.77, y: 11.46))
        icon.addLine(to: CGPoint(x: 37.77, y: 5.47))
        icon.addCurve(to: CGPoint(x: 34.56, y: 2.25), controlPoint1: CGPoint(x: 37.77, y: 3.69), controlPoint2: CGPoint(x: 36.33, y: 2.25))
        icon.addLine(to: CGPoint(x: 29.34, y: 2.25))
        icon.addCurve(to: CGPoint(x: 28.23, y: 1.12), controlPoint1: CGPoint(x: 28.73, y: 2.25), controlPoint2: CGPoint(x: 28.23, y: 1.74))
        icon.addCurve(to: CGPoint(x: 29.34, y: 0), controlPoint1: CGPoint(x: 28.23, y: 0.5), controlPoint2: CGPoint(x: 28.73, y: 0))
        icon.addLine(to: CGPoint(x: 34.56, y: 0))
        icon.close()
        icon.move(to: CGPoint(x: 1.11, y: 11.86))
        icon.addCurve(to: CGPoint(x: 0, y: 10.74), controlPoint1: CGPoint(x: 0.5, y: 11.86), controlPoint2: CGPoint(x: 0, y: 11.36))
        icon.addLine(to: CGPoint(x: 0, y: 5.47))
        icon.addCurve(to: CGPoint(x: 5.43, y: 0), controlPoint1: CGPoint(x: 0, y: 2.46), controlPoint2: CGPoint(x: 2.44, y: 0))
        icon.addLine(to: CGPoint(x: 10.76, y: 0))
        icon.addCurve(to: CGPoint(x: 11.88, y: 1.12), controlPoint1: CGPoint(x: 11.38, y: 0), controlPoint2: CGPoint(x: 11.88, y: 0.5))
        icon.addCurve(to: CGPoint(x: 10.76, y: 2.25), controlPoint1: CGPoint(x: 11.88, y: 1.74), controlPoint2: CGPoint(x: 11.38, y: 2.25))
        icon.addLine(to: CGPoint(x: 5.43, y: 2.25))
        icon.addCurve(to: CGPoint(x: 2.23, y: 5.47), controlPoint1: CGPoint(x: 3.67, y: 2.25), controlPoint2: CGPoint(x: 2.23, y: 3.69))
        icon.addLine(to: CGPoint(x: 2.23, y: 10.74))
        icon.addCurve(to: CGPoint(x: 1.11, y: 11.86), controlPoint1: CGPoint(x: 2.23, y: 11.36), controlPoint2: CGPoint(x: 1.73, y: 11.86))
        icon.close()
        icon.move(to: CGPoint(x: 38.89, y: 28.04))
        icon.addCurve(to: CGPoint(x: 40, y: 29.16), controlPoint1: CGPoint(x: 39.5, y: 28.04), controlPoint2: CGPoint(x: 40, y: 28.54))
        icon.addLine(to: CGPoint(x: 40, y: 34.53))
        icon.addCurve(to: CGPoint(x: 34.56, y: 40), controlPoint1: CGPoint(x: 40, y: 37.54), controlPoint2: CGPoint(x: 37.56, y: 40))
        icon.addLine(to: CGPoint(x: 29.34, y: 40))
        icon.addCurve(to: CGPoint(x: 28.23, y: 38.88), controlPoint1: CGPoint(x: 28.73, y: 40), controlPoint2: CGPoint(x: 28.23, y: 39.5))
        icon.addCurve(to: CGPoint(x: 29.34, y: 37.75), controlPoint1: CGPoint(x: 28.23, y: 38.26), controlPoint2: CGPoint(x: 28.73, y: 37.75))
        icon.addLine(to: CGPoint(x: 34.56, y: 37.75))
        icon.addCurve(to: CGPoint(x: 37.77, y: 34.53), controlPoint1: CGPoint(x: 36.33, y: 37.75), controlPoint2: CGPoint(x: 37.77, y: 36.31))
        icon.addLine(to: CGPoint(x: 37.77, y: 29.16))
        icon.addCurve(to: CGPoint(x: 38.89, y: 28.04), controlPoint1: CGPoint(x: 37.77, y: 28.54), controlPoint2: CGPoint(x: 38.27, y: 28.04))
        icon.close()
        icon.move(to: CGPoint(x: 10.76, y: 37.75))
        icon.addCurve(to: CGPoint(x: 11.88, y: 38.88), controlPoint1: CGPoint(x: 11.38, y: 37.75), controlPoint2: CGPoint(x: 11.88, y: 38.26))
        icon.addCurve(to: CGPoint(x: 10.76, y: 40), controlPoint1: CGPoint(x: 11.88, y: 39.5), controlPoint2: CGPoint(x: 11.38, y: 40))
        icon.addLine(to: CGPoint(x: 5.44, y: 40))
        icon.addCurve(to: CGPoint(x: 0, y: 34.53), controlPoint1: CGPoint(x: 2.44, y: 40), controlPoint2: CGPoint(x: 0, y: 37.54))
        icon.addLine(to: CGPoint(x: 0, y: 29.26))
        icon.addCurve(to: CGPoint(x: 1.11, y: 28.14), controlPoint1: CGPoint(x: 0, y: 28.64), controlPoint2: CGPoint(x: 0.5, y: 28.14))
        icon.addCurve(to: CGPoint(x: 2.23, y: 29.26), controlPoint1: CGPoint(x: 1.73, y: 28.14), controlPoint2: CGPoint(x: 2.23, y: 28.64))
        icon.addLine(to: CGPoint(x: 2.23, y: 34.53))
        icon.addCurve(to: CGPoint(x: 5.44, y: 37.75), controlPoint1: CGPoint(x: 2.23, y: 36.31), controlPoint2: CGPoint(x: 3.67, y: 37.75))
        icon.addLine(to: CGPoint(x: 10.76, y: 37.75))
        icon.close()
        
        /// icon (Outline Mask)
        context.saveGState()
        icon.addClip()
        
        /// •  Glyph Fill
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End icon (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawIPhoneX_ScreenShape(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Shape
        let shape = UIBezierPath()
        shape.move(to: CGPoint(x: 375, y: 0))
        shape.addLine(to: CGPoint(x: 375, y: 54))
        shape.addLine(to: CGPoint(x: 375, y: 51.28))
        shape.addCurve(to: CGPoint(x: 369.66, y: 20.46), controlPoint1: CGPoint(x: 375, y: 33.45), controlPoint2: CGPoint(x: 373.14, y: 26.98))
        shape.addCurve(to: CGPoint(x: 354.53, y: 5.34), controlPoint1: CGPoint(x: 366.17, y: 13.94), controlPoint2: CGPoint(x: 361.05, y: 8.83))
        shape.addCurve(to: CGPoint(x: 323.72, y: 0), controlPoint1: CGPoint(x: 348.02, y: 1.86), controlPoint2: CGPoint(x: 341.55, y: 0))
        shape.addLine(to: CGPoint(x: 321, y: 0))
        shape.addLine(to: CGPoint(x: 375, y: 0))
        shape.close()
        shape.move(to: CGPoint.zero)
        shape.addLine(to: CGPoint(x: 54, y: 0))
        shape.addLine(to: CGPoint(x: 51.28, y: 0))
        shape.addCurve(to: CGPoint(x: 20.46, y: 5.34), controlPoint1: CGPoint(x: 33.45, y: 0), controlPoint2: CGPoint(x: 26.98, y: 1.86))
        shape.addCurve(to: CGPoint(x: 5.34, y: 20.46), controlPoint1: CGPoint(x: 13.94, y: 8.83), controlPoint2: CGPoint(x: 8.83, y: 13.94))
        shape.addCurve(to: CGPoint(x: 0, y: 51.28), controlPoint1: CGPoint(x: 1.86, y: 26.98), controlPoint2: CGPoint(x: 0, y: 33.45))
        shape.addLine(to: CGPoint(x: 0, y: 54))
        shape.addLine(to: CGPoint.zero)
        shape.close()
        shape.move(to: CGPoint(x: 375, y: 812))
        shape.addLine(to: CGPoint(x: 321, y: 812))
        shape.addLine(to: CGPoint(x: 323.72, y: 812))
        shape.addCurve(to: CGPoint(x: 354.53, y: 806.66), controlPoint1: CGPoint(x: 341.55, y: 812), controlPoint2: CGPoint(x: 348.02, y: 810.14))
        shape.addCurve(to: CGPoint(x: 369.66, y: 791.54), controlPoint1: CGPoint(x: 361.05, y: 803.17), controlPoint2: CGPoint(x: 366.17, y: 798.06))
        shape.addCurve(to: CGPoint(x: 375, y: 760.72), controlPoint1: CGPoint(x: 373.14, y: 785.02), controlPoint2: CGPoint(x: 375, y: 778.55))
        shape.addLine(to: CGPoint(x: 375, y: 758))
        shape.addLine(to: CGPoint(x: 375, y: 812))
        shape.close()
        shape.move(to: CGPoint(x: 0, y: 812))
        shape.addLine(to: CGPoint(x: 0, y: 758))
        shape.addLine(to: CGPoint(x: 0, y: 760.72))
        shape.addCurve(to: CGPoint(x: 5.34, y: 791.54), controlPoint1: CGPoint(x: 0, y: 778.55), controlPoint2: CGPoint(x: 1.86, y: 785.02))
        shape.addCurve(to: CGPoint(x: 20.46, y: 806.66), controlPoint1: CGPoint(x: 8.83, y: 798.06), controlPoint2: CGPoint(x: 13.94, y: 803.17))
        shape.addCurve(to: CGPoint(x: 51.28, y: 812), controlPoint1: CGPoint(x: 26.98, y: 810.14), controlPoint2: CGPoint(x: 33.45, y: 812))
        shape.addLine(to: CGPoint(x: 54, y: 812))
        shape.addLine(to: CGPoint(x: 0, y: 812))
        shape.close()
        shape.move(to: CGPoint(x: 299, y: 0))
        shape.addLine(to: CGPoint(x: 297.83, y: 0))
        shape.addCurve(to: CGPoint(x: 294.89, y: 0.63), controlPoint1: CGPoint(x: 296.64, y: 0), controlPoint2: CGPoint(x: 295.69, y: 0.22))
        shape.addCurve(to: CGPoint(x: 293.01, y: 2.42), controlPoint1: CGPoint(x: 294.09, y: 1.04), controlPoint2: CGPoint(x: 293.45, y: 1.64))
        shape.addCurve(to: CGPoint(x: 292.26, y: 4.86), controlPoint1: CGPoint(x: 292.62, y: 3.09), controlPoint2: CGPoint(x: 292.36, y: 3.89))
        shape.addCurve(to: CGPoint(x: 288.78, y: 19.36), controlPoint1: CGPoint(x: 291.83, y: 12.48), controlPoint2: CGPoint(x: 290.7, y: 16.03))
        shape.addCurve(to: CGPoint(x: 280.49, y: 27.25), controlPoint1: CGPoint(x: 286.8, y: 22.79), controlPoint2: CGPoint(x: 284, y: 25.44))
        shape.addCurve(to: CGPoint(x: 265.21, y: 30), controlPoint1: CGPoint(x: 276.97, y: 29.05), controlPoint2: CGPoint(x: 273.27, y: 30))
        shape.addLine(to: CGPoint(x: 109.79, y: 30))
        shape.addCurve(to: CGPoint(x: 94.51, y: 27.25), controlPoint1: CGPoint(x: 101.73, y: 30), controlPoint2: CGPoint(x: 98.03, y: 29.05))
        shape.addCurve(to: CGPoint(x: 86.22, y: 19.36), controlPoint1: CGPoint(x: 91, y: 25.44), controlPoint2: CGPoint(x: 88.2, y: 22.79))
        shape.addCurve(to: CGPoint(x: 82.74, y: 4.86), controlPoint1: CGPoint(x: 84.3, y: 16.03), controlPoint2: CGPoint(x: 83.17, y: 12.48))
        shape.addCurve(to: CGPoint(x: 81.99, y: 2.42), controlPoint1: CGPoint(x: 82.64, y: 3.89), controlPoint2: CGPoint(x: 82.38, y: 3.09))
        shape.addCurve(to: CGPoint(x: 80.11, y: 0.63), controlPoint1: CGPoint(x: 81.55, y: 1.64), controlPoint2: CGPoint(x: 80.91, y: 1.04))
        shape.addCurve(to: CGPoint(x: 77.17, y: 0), controlPoint1: CGPoint(x: 79.31, y: 0.22), controlPoint2: CGPoint(x: 78.36, y: 0))
        shape.addLine(to: CGPoint(x: 76, y: 0))
        shape.addLine(to: CGPoint(x: 299, y: 0))
        shape.close()
        context.saveGState()
        shape.usesEvenOddFillRule = true
        UIColor.black.setFill()
        shape.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsButtonLargeAccent(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 50), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 50)
        
        /// Background
        let background = UIBezierPath()
        background.move(to: CGPoint(x: 12.82, y: 0))
        background.addLine(to: CGPoint(x: 362.18, y: 0))
        background.addCurve(to: CGPoint(x: 369.88, y: 1.34), controlPoint1: CGPoint(x: 366.64, y: 0), controlPoint2: CGPoint(x: 368.25, y: 0.46))
        background.addCurve(to: CGPoint(x: 373.66, y: 5.12), controlPoint1: CGPoint(x: 371.51, y: 2.21), controlPoint2: CGPoint(x: 372.79, y: 3.49))
        background.addCurve(to: CGPoint(x: 375, y: 12.82), controlPoint1: CGPoint(x: 374.54, y: 6.75), controlPoint2: CGPoint(x: 375, y: 8.36))
        background.addLine(to: CGPoint(x: 375, y: 37.18))
        background.addCurve(to: CGPoint(x: 373.66, y: 44.88), controlPoint1: CGPoint(x: 375, y: 41.64), controlPoint2: CGPoint(x: 374.54, y: 43.25))
        background.addCurve(to: CGPoint(x: 369.88, y: 48.66), controlPoint1: CGPoint(x: 372.79, y: 46.51), controlPoint2: CGPoint(x: 371.51, y: 47.79))
        background.addCurve(to: CGPoint(x: 362.18, y: 50), controlPoint1: CGPoint(x: 368.25, y: 49.54), controlPoint2: CGPoint(x: 366.64, y: 50))
        background.addLine(to: CGPoint(x: 12.82, y: 50))
        background.addCurve(to: CGPoint(x: 5.12, y: 48.66), controlPoint1: CGPoint(x: 8.36, y: 50), controlPoint2: CGPoint(x: 6.75, y: 49.54))
        background.addCurve(to: CGPoint(x: 1.34, y: 44.88), controlPoint1: CGPoint(x: 3.49, y: 47.79), controlPoint2: CGPoint(x: 2.21, y: 46.51))
        background.addCurve(to: CGPoint(x: 0, y: 37.18), controlPoint1: CGPoint(x: 0.46, y: 43.25), controlPoint2: CGPoint(x: 0, y: 41.64))
        background.addLine(to: CGPoint(x: 0, y: 12.82))
        background.addCurve(to: CGPoint(x: 1.34, y: 5.12), controlPoint1: CGPoint(x: 0, y: 8.36), controlPoint2: CGPoint(x: 0.46, y: 6.75))
        background.addCurve(to: CGPoint(x: 5.12, y: 1.34), controlPoint1: CGPoint(x: 2.21, y: 3.49), controlPoint2: CGPoint(x: 3.49, y: 2.21))
        background.addCurve(to: CGPoint(x: 12.82, y: 0), controlPoint1: CGPoint(x: 6.75, y: 0.46), controlPoint2: CGPoint(x: 8.36, y: 0))
        background.close()
        context.saveGState()
        background.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        background.fill()
        context.restoreGState()
        
        /// Background (Outline Mask)
        context.saveGState()
        background.addClip()
        
        /// • Button Fill
        // Warning: New symbols are not supported.
        
        /// Label
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Background (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawControlsButtonLargeGrey(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 50), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 50)
        
        /// Background
        let background = UIBezierPath()
        background.move(to: CGPoint(x: 12.82, y: 0))
        background.addLine(to: CGPoint(x: 362.18, y: 0))
        background.addCurve(to: CGPoint(x: 369.88, y: 1.34), controlPoint1: CGPoint(x: 366.64, y: 0), controlPoint2: CGPoint(x: 368.25, y: 0.46))
        background.addCurve(to: CGPoint(x: 373.66, y: 5.12), controlPoint1: CGPoint(x: 371.51, y: 2.21), controlPoint2: CGPoint(x: 372.79, y: 3.49))
        background.addCurve(to: CGPoint(x: 375, y: 12.82), controlPoint1: CGPoint(x: 374.54, y: 6.75), controlPoint2: CGPoint(x: 375, y: 8.36))
        background.addLine(to: CGPoint(x: 375, y: 37.18))
        background.addCurve(to: CGPoint(x: 373.66, y: 44.88), controlPoint1: CGPoint(x: 375, y: 41.64), controlPoint2: CGPoint(x: 374.54, y: 43.25))
        background.addCurve(to: CGPoint(x: 369.88, y: 48.66), controlPoint1: CGPoint(x: 372.79, y: 46.51), controlPoint2: CGPoint(x: 371.51, y: 47.79))
        background.addCurve(to: CGPoint(x: 362.18, y: 50), controlPoint1: CGPoint(x: 368.25, y: 49.54), controlPoint2: CGPoint(x: 366.64, y: 50))
        background.addLine(to: CGPoint(x: 12.82, y: 50))
        background.addCurve(to: CGPoint(x: 5.12, y: 48.66), controlPoint1: CGPoint(x: 8.36, y: 50), controlPoint2: CGPoint(x: 6.75, y: 49.54))
        background.addCurve(to: CGPoint(x: 1.34, y: 44.88), controlPoint1: CGPoint(x: 3.49, y: 47.79), controlPoint2: CGPoint(x: 2.21, y: 46.51))
        background.addCurve(to: CGPoint(x: 0, y: 37.18), controlPoint1: CGPoint(x: 0.46, y: 43.25), controlPoint2: CGPoint(x: 0, y: 41.64))
        background.addLine(to: CGPoint(x: 0, y: 12.82))
        background.addCurve(to: CGPoint(x: 1.34, y: 5.12), controlPoint1: CGPoint(x: 0, y: 8.36), controlPoint2: CGPoint(x: 0.46, y: 6.75))
        background.addCurve(to: CGPoint(x: 5.12, y: 1.34), controlPoint1: CGPoint(x: 2.21, y: 3.49), controlPoint2: CGPoint(x: 3.49, y: 2.21))
        background.addCurve(to: CGPoint(x: 12.82, y: 0), controlPoint1: CGPoint(x: 6.75, y: 0.46), controlPoint2: CGPoint(x: 8.36, y: 0))
        background.close()
        context.saveGState()
        background.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.02, brightness: 0.957, alpha: 1).setFill()
        background.fill()
        context.restoreGState()
        
        /// Label
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsButtonLargeWhite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 50), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 50)
        
        /// Background
        let background = UIBezierPath()
        background.move(to: CGPoint(x: 12.82, y: 0))
        background.addLine(to: CGPoint(x: 362.18, y: 0))
        background.addCurve(to: CGPoint(x: 369.88, y: 1.34), controlPoint1: CGPoint(x: 366.64, y: 0), controlPoint2: CGPoint(x: 368.25, y: 0.46))
        background.addCurve(to: CGPoint(x: 373.66, y: 5.12), controlPoint1: CGPoint(x: 371.51, y: 2.21), controlPoint2: CGPoint(x: 372.79, y: 3.49))
        background.addCurve(to: CGPoint(x: 375, y: 12.82), controlPoint1: CGPoint(x: 374.54, y: 6.75), controlPoint2: CGPoint(x: 375, y: 8.36))
        background.addLine(to: CGPoint(x: 375, y: 37.18))
        background.addCurve(to: CGPoint(x: 373.66, y: 44.88), controlPoint1: CGPoint(x: 375, y: 41.64), controlPoint2: CGPoint(x: 374.54, y: 43.25))
        background.addCurve(to: CGPoint(x: 369.88, y: 48.66), controlPoint1: CGPoint(x: 372.79, y: 46.51), controlPoint2: CGPoint(x: 371.51, y: 47.79))
        background.addCurve(to: CGPoint(x: 362.18, y: 50), controlPoint1: CGPoint(x: 368.25, y: 49.54), controlPoint2: CGPoint(x: 366.64, y: 50))
        background.addLine(to: CGPoint(x: 12.82, y: 50))
        background.addCurve(to: CGPoint(x: 5.12, y: 48.66), controlPoint1: CGPoint(x: 8.36, y: 50), controlPoint2: CGPoint(x: 6.75, y: 49.54))
        background.addCurve(to: CGPoint(x: 1.34, y: 44.88), controlPoint1: CGPoint(x: 3.49, y: 47.79), controlPoint2: CGPoint(x: 2.21, y: 46.51))
        background.addCurve(to: CGPoint(x: 0, y: 37.18), controlPoint1: CGPoint(x: 0.46, y: 43.25), controlPoint2: CGPoint(x: 0, y: 41.64))
        background.addLine(to: CGPoint(x: 0, y: 12.82))
        background.addCurve(to: CGPoint(x: 1.34, y: 5.12), controlPoint1: CGPoint(x: 0, y: 8.36), controlPoint2: CGPoint(x: 0.46, y: 6.75))
        background.addCurve(to: CGPoint(x: 5.12, y: 1.34), controlPoint1: CGPoint(x: 2.21, y: 3.49), controlPoint2: CGPoint(x: 3.49, y: 2.21))
        background.addCurve(to: CGPoint(x: 12.82, y: 0), controlPoint1: CGPoint(x: 6.75, y: 0.46), controlPoint2: CGPoint(x: 8.36, y: 0))
        background.close()
        context.saveGState()
        background.usesEvenOddFillRule = true
        UIColor.white.setFill()
        background.fill()
        context.restoreGState()
        
        /// Label
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsButtonLinkX2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background
        // Warning: New symbols are not supported.
        
        /// Label 2
        // Warning: New symbols are not supported.
        
        /// Container
        do {
            context.saveGState()
            
            /// Label 1
            // Warning: New symbols are not supported.
            
            /// Separator
            let separator = UIBezierPath()
            separator.move(to: CGPoint(x: 0.5, y: 0))
            separator.addLine(to: CGPoint(x: 0.5, y: 44))
            separator.addLine(to: CGPoint(x: 0, y: 44))
            separator.addLine(to: CGPoint.zero)
            separator.addLine(to: CGPoint(x: 0.5, y: 0))
            separator.close()
            context.saveGState()
            context.translateBy(x: 186.5, y: 0)
            separator.usesEvenOddFillRule = true
            UIColor(white: 0, alpha: 0.2).setFill()
            separator.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Separator Top
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsButtonLink(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background
        // Warning: New symbols are not supported.
        
        /// Separator Top
        // Warning: New symbols are not supported.
        
        /// Label
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsButtonRoundedSmall(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 38, height: 38), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 38, height: 38), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 38, y: resizedFrame.height / 38)
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 4, y: 4)
            
            /// Background
            let background = UIBezierPath()
            background.move(to: CGPoint(x: 15, y: 30))
            background.addCurve(to: CGPoint(x: 30, y: 15), controlPoint1: CGPoint(x: 23.28, y: 30), controlPoint2: CGPoint(x: 30, y: 23.28))
            background.addCurve(to: CGPoint(x: 15, y: 0), controlPoint1: CGPoint(x: 30, y: 6.72), controlPoint2: CGPoint(x: 23.28, y: 0))
            background.addCurve(to: CGPoint(x: 0, y: 15), controlPoint1: CGPoint(x: 6.72, y: 0), controlPoint2: CGPoint(x: 0, y: 6.72))
            background.addCurve(to: CGPoint(x: 15, y: 30), controlPoint1: CGPoint(x: 0, y: 23.28), controlPoint2: CGPoint(x: 6.72, y: 30))
            background.close()
            context.saveGState()
            background.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.02, brightness: 0.957, alpha: 1).setFill()
            background.fill()
            context.restoreGState()
            
            /// _Glyphs / xSmall / Play
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsButtonRoundedAccent(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 37, height: 37), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 37, height: 37), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 37, y: resizedFrame.height / 37)
        
        /// Background
        let background = UIBezierPath()
        background.move(to: CGPoint(x: 18, y: 36))
        background.addCurve(to: CGPoint(x: 36, y: 18), controlPoint1: CGPoint(x: 27.94, y: 36), controlPoint2: CGPoint(x: 36, y: 27.94))
        background.addCurve(to: CGPoint(x: 18, y: 0), controlPoint1: CGPoint(x: 36, y: 8.06), controlPoint2: CGPoint(x: 27.94, y: 0))
        background.addCurve(to: CGPoint(x: 0, y: 18), controlPoint1: CGPoint(x: 8.06, y: 0), controlPoint2: CGPoint(x: 0, y: 8.06))
        background.addCurve(to: CGPoint(x: 18, y: 36), controlPoint1: CGPoint(x: 0, y: 27.94), controlPoint2: CGPoint(x: 8.06, y: 36))
        background.close()
        context.saveGState()
        context.translateBy(x: 0.5, y: 0.5)
        background.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        background.fill()
        context.restoreGState()
        
        /// Glyph
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsButtonRounded(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 37, height: 37), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 37, height: 37), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 37, y: resizedFrame.height / 37)
        
        /// Background
        let background = UIBezierPath()
        background.move(to: CGPoint(x: 18, y: 36))
        background.addCurve(to: CGPoint(x: 36, y: 18), controlPoint1: CGPoint(x: 27.94, y: 36), controlPoint2: CGPoint(x: 36, y: 27.94))
        background.addCurve(to: CGPoint(x: 18, y: 0), controlPoint1: CGPoint(x: 36, y: 8.06), controlPoint2: CGPoint(x: 27.94, y: 0))
        background.addCurve(to: CGPoint(x: 0, y: 18), controlPoint1: CGPoint(x: 8.06, y: 0), controlPoint2: CGPoint(x: 0, y: 8.06))
        background.addCurve(to: CGPoint(x: 18, y: 36), controlPoint1: CGPoint(x: 0, y: 27.94), controlPoint2: CGPoint(x: 8.06, y: 36))
        background.close()
        context.saveGState()
        context.translateBy(x: 0.5, y: 0.5)
        background.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.02, brightness: 0.957, alpha: 1).setFill()
        background.fill()
        context.restoreGState()
        
        /// Glyph
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsButtonSmallGrey(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 140, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 140, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 140, y: resizedFrame.height / 28)
        
        /// Background
        let background = UIBezierPath()
        background.move(to: CGPoint(x: 14, y: 0))
        background.addLine(to: CGPoint(x: 126, y: 0))
        background.addCurve(to: CGPoint(x: 140, y: 14), controlPoint1: CGPoint(x: 133.73, y: 0), controlPoint2: CGPoint(x: 140, y: 6.27))
        background.addLine(to: CGPoint(x: 140, y: 14))
        background.addCurve(to: CGPoint(x: 126, y: 28), controlPoint1: CGPoint(x: 140, y: 21.73), controlPoint2: CGPoint(x: 133.73, y: 28))
        background.addLine(to: CGPoint(x: 14, y: 28))
        background.addCurve(to: CGPoint(x: 0, y: 14), controlPoint1: CGPoint(x: 6.27, y: 28), controlPoint2: CGPoint(x: 0, y: 21.73))
        background.addLine(to: CGPoint(x: 0, y: 14))
        background.addCurve(to: CGPoint(x: 14, y: 0), controlPoint1: CGPoint(x: 0, y: 6.27), controlPoint2: CGPoint(x: 6.27, y: 0))
        background.close()
        context.saveGState()
        background.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.02, brightness: 0.957, alpha: 1).setFill()
        background.fill()
        context.restoreGState()
        
        /// Label
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsButtonSmallWhite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 140, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 140, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 140, y: resizedFrame.height / 28)
        
        /// Background
        let background = UIBezierPath()
        background.move(to: CGPoint(x: 14, y: 0))
        background.addLine(to: CGPoint(x: 126, y: 0))
        background.addCurve(to: CGPoint(x: 140, y: 14), controlPoint1: CGPoint(x: 133.73, y: 0), controlPoint2: CGPoint(x: 140, y: 6.27))
        background.addLine(to: CGPoint(x: 140, y: 14))
        background.addCurve(to: CGPoint(x: 126, y: 28), controlPoint1: CGPoint(x: 140, y: 21.73), controlPoint2: CGPoint(x: 133.73, y: 28))
        background.addLine(to: CGPoint(x: 14, y: 28))
        background.addCurve(to: CGPoint(x: 0, y: 14), controlPoint1: CGPoint(x: 6.27, y: 28), controlPoint2: CGPoint(x: 0, y: 21.73))
        background.addLine(to: CGPoint(x: 0, y: 14))
        background.addCurve(to: CGPoint(x: 14, y: 0), controlPoint1: CGPoint(x: 0, y: 6.27), controlPoint2: CGPoint(x: 6.27, y: 0))
        background.close()
        context.saveGState()
        background.usesEvenOddFillRule = true
        UIColor.white.setFill()
        background.fill()
        context.restoreGState()
        
        /// Label
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsButtonSmallAccent(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 140, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 140, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 140, y: resizedFrame.height / 28)
        
        /// Background
        let background = UIBezierPath()
        background.move(to: CGPoint(x: 14, y: 0))
        background.addLine(to: CGPoint(x: 126, y: 0))
        background.addCurve(to: CGPoint(x: 140, y: 14), controlPoint1: CGPoint(x: 133.73, y: 0), controlPoint2: CGPoint(x: 140, y: 6.27))
        background.addLine(to: CGPoint(x: 140, y: 14))
        background.addCurve(to: CGPoint(x: 126, y: 28), controlPoint1: CGPoint(x: 140, y: 21.73), controlPoint2: CGPoint(x: 133.73, y: 28))
        background.addLine(to: CGPoint(x: 14, y: 28))
        background.addCurve(to: CGPoint(x: 0, y: 14), controlPoint1: CGPoint(x: 6.27, y: 28), controlPoint2: CGPoint(x: 0, y: 21.73))
        background.addLine(to: CGPoint(x: 0, y: 14))
        background.addCurve(to: CGPoint(x: 14, y: 0), controlPoint1: CGPoint(x: 0, y: 6.27), controlPoint2: CGPoint(x: 6.27, y: 0))
        background.close()
        
        /// Background (Outline Mask)
        context.saveGState()
        background.addClip()
        
        /// • Button Fill
        // Warning: New symbols are not supported.
        
        /// Label
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Background (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawControlsButton_LabelError(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 90), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 90), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 90)
        
        /// ↳ Label
        let label = NSMutableAttributedString(string: "Label")
        label.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        label.addAttribute(.foregroundColor, value: UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
        context.saveGState()
        label.draw(at: CGPoint(x: 79, y: 34))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsButton_Label(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 90), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 90), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 90)
        
        /// ↳ Label
        let label = NSMutableAttributedString(string: "Label")
        label.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        label.addAttribute(.foregroundColor, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
        context.saveGState()
        label.draw(at: CGPoint(x: 79, y: 34))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsButton_LabelDisclosure(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 90), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 90), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 90)
        
        /// Container
        do {
            context.saveGState()
            context.translateBy(x: 72, y: 34)
            
            /// ↳ Label
            let label = NSMutableAttributedString(string: "Label")
            label.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: label.length))
            label.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: label.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
            }
            label.addAttribute(.foregroundColor, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
            context.saveGState()
            label.draw(at: CGPoint.zero)
            context.restoreGState()
            
            /// Disclosure
            let disclosure = UIBezierPath()
            disclosure.move(to: CGPoint(x: 8.5, y: 7))
            disclosure.addLine(to: CGPoint(x: 1.41, y: 14))
            disclosure.addLine(to: CGPoint(x: 0, y: 12.5))
            disclosure.addLine(to: CGPoint(x: 5.5, y: 7))
            disclosure.addLine(to: CGPoint(x: 0, y: 1.5))
            disclosure.addLine(to: CGPoint(x: 1.41, y: 0))
            disclosure.addLine(to: CGPoint(x: 8.5, y: 7))
            disclosure.close()
            context.saveGState()
            context.translateBy(x: 48, y: 4)
            disclosure.usesEvenOddFillRule = true
            UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
            disclosure.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsButton_GlyphLabelError(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 90), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 90), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 90)
        
        /// Container
        do {
            context.saveGState()
            context.translateBy(x: 99, y: 45)
            context.scaleBy(x: -1, y: 1)
            context.translateBy(x: -36, y: -12)
            
            /// ↳ Label
            let label = NSMutableAttributedString(string: "Label")
            label.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: label.length))
            label.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: label.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
            }
            label.addAttribute(.foregroundColor, value: UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
            context.saveGState()
            context.translateBy(x: 21, y: 12)
            context.scaleBy(x: -1, y: 1)
            context.translateBy(x: -21, y: -11)
            label.draw(at: CGPoint.zero)
            context.restoreGState()
            
            /// Glyph
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsButton_GlyphLabel(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 90), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 90), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 90)
        
        /// Container
        do {
            context.saveGState()
            context.translateBy(x: 99, y: 45)
            context.scaleBy(x: -1, y: 1)
            context.translateBy(x: -36, y: -12)
            
            /// ↳ Label
            let label = NSMutableAttributedString(string: "Label")
            label.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: label.length))
            label.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: label.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
            }
            label.addAttribute(.foregroundColor, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
            context.saveGState()
            context.translateBy(x: 21, y: 12)
            context.scaleBy(x: -1, y: 1)
            context.translateBy(x: -21, y: -11)
            label.draw(at: CGPoint.zero)
            context.restoreGState()
            
            /// Glyph
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsButton_LabelMedium(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 90), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 90), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 90)
        
        /// ↳ Label
        let label = NSMutableAttributedString(string: "Label")
        label.addAttribute(.font, value: UIFont(name: "SFProText-Semibold", size: 17)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        label.addAttribute(.foregroundColor, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
        context.saveGState()
        label.draw(at: CGPoint(x: 78, y: 34))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsButton_GlyphLabelMedium(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 90), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 90), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 90)
        
        /// Container
        do {
            context.saveGState()
            context.translateBy(x: 100, y: 45)
            context.scaleBy(x: -1, y: 1)
            context.translateBy(x: -37, y: -12)
            
            /// ↳ Label
            let label = NSMutableAttributedString(string: "Label")
            label.addAttribute(.font, value: UIFont(name: "SFProText-Semibold", size: 17)!, range: NSRange(location: 0, length: label.length))
            label.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: label.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
            }
            label.addAttribute(.foregroundColor, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
            context.saveGState()
            context.translateBy(x: 22, y: 12)
            context.scaleBy(x: -1, y: 1)
            context.translateBy(x: -22, y: -11)
            label.draw(at: CGPoint.zero)
            context.restoreGState()
            
            /// Glyph
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsButton_GlyphLabel11(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 90), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 90), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 90)
        
        /// Container
        do {
            context.saveGState()
            context.translateBy(x: 85, y: 25)
            
            /// ↳ Label
            let label = NSMutableAttributedString(string: "Label")
            label.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: label.length))
            label.addAttribute(.kern, value: 0.07, range: NSRange(location: 0, length: label.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
            }
            label.addAttribute(.foregroundColor, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
            context.saveGState()
            label.draw(at: CGPoint(x: 0.5, y: 26))
            context.restoreGState()
            
            /// Glyph
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsButton_LabelWhite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 90), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 90), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 90)
        
        /// Label
        let label = NSMutableAttributedString(string: "Label")
        label.addAttribute(.font, value: UIFont(name: "SFProText-Semibold", size: 17)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        label.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: label.length))
        context.saveGState()
        label.draw(at: CGPoint(x: 78, y: 34))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsButton_LabelDisclosureWhite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 90), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 90), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 90)
        
        /// Container
        do {
            context.saveGState()
            context.translateBy(x: 71, y: 34)
            
            /// ↳ Label
            let label = NSMutableAttributedString(string: "Label")
            label.addAttribute(.font, value: UIFont(name: "SFProText-Semibold", size: 17)!, range: NSRange(location: 0, length: label.length))
            label.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: label.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
            }
            label.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: label.length))
            context.saveGState()
            label.draw(at: CGPoint.zero)
            context.restoreGState()
            
            /// Disclosure
            let disclosure = UIBezierPath()
            disclosure.move(to: CGPoint(x: 8.5, y: 7))
            disclosure.addLine(to: CGPoint(x: 1.41, y: 14))
            disclosure.addLine(to: CGPoint(x: 0, y: 12.5))
            disclosure.addLine(to: CGPoint(x: 5.5, y: 7))
            disclosure.addLine(to: CGPoint(x: 0, y: 1.5))
            disclosure.addLine(to: CGPoint(x: 1.41, y: 0))
            disclosure.addLine(to: CGPoint(x: 8.5, y: 7))
            disclosure.close()
            context.saveGState()
            context.translateBy(x: 49, y: 4)
            disclosure.usesEvenOddFillRule = true
            UIColor.white.setFill()
            disclosure.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsButton_GlyphLabelWhite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 90), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 90), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 90)
        
        /// Container
        do {
            context.saveGState()
            context.translateBy(x: 98, y: 45)
            context.scaleBy(x: -1, y: 1)
            context.translateBy(x: -37, y: -12)
            
            /// ↳ Label
            let label = NSMutableAttributedString(string: "Label")
            label.addAttribute(.font, value: UIFont(name: "SFProText-Semibold", size: 17)!, range: NSRange(location: 0, length: label.length))
            label.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: label.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
            }
            label.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: label.length))
            context.saveGState()
            context.translateBy(x: 22, y: 12)
            context.scaleBy(x: -1, y: 1)
            context.translateBy(x: -22, y: -11)
            label.draw(at: CGPoint.zero)
            context.restoreGState()
            
            /// Glyph
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsButton_XSmallLabel(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 28)
        
        /// ↳ Label
        let label = NSMutableAttributedString(string: "Label")
        label.addAttribute(.font, value: UIFont(name: "SFProText-Semibold", size: 15)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(.kern, value: -0.24, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 20
            paragraphStyle.minimumLineHeight = 20
            label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        label.addAttribute(.foregroundColor, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
        context.saveGState()
        label.draw(at: CGPoint(x: 77, y: 4))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsButton_XSmallGlyphAdd(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 28)
        
        /// Container
        do {
            context.saveGState()
            context.translateBy(x: 97, y: 14)
            context.scaleBy(x: -1, y: 1)
            context.translateBy(x: -29, y: -12)
            
            /// Glyph
            // Warning: New symbols are not supported.
            
            /// ↳ Label
            let label = NSMutableAttributedString(string: "ADD")
            label.addAttribute(.font, value: UIFont(name: "SFProText-Semibold", size: 15)!, range: NSRange(location: 0, length: label.length))
            label.addAttribute(.kern, value: -0.24, range: NSRange(location: 0, length: label.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 20
                paragraphStyle.minimumLineHeight = 20
                label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
            }
            label.addAttribute(.foregroundColor, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
            context.saveGState()
            context.translateBy(x: 17, y: 12)
            context.scaleBy(x: -1, y: 1)
            context.translateBy(x: -16.5, y: -10)
            label.draw(at: CGPoint.zero)
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsButton_XSmallGlyph(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 28)
        
        /// Glyph
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsButton_XSmallLabelWhite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 28)
        
        /// ↳ Label
        let label = NSMutableAttributedString(string: "Label")
        label.addAttribute(.font, value: UIFont(name: "SFProText-Semibold", size: 15)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(.kern, value: -0.36, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        label.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: label.length))
        context.saveGState()
        label.draw(at: CGPoint(x: 77, y: 5))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsButton_XSmallGlyphAddWhite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 28)
        
        /// Container
        do {
            context.saveGState()
            context.translateBy(x: 96.5, y: 14)
            context.scaleBy(x: -1, y: 1)
            context.translateBy(x: -28.5, y: -12)
            
            /// Glyph
            // Warning: New symbols are not supported.
            
            /// ↳ Label
            let label = NSMutableAttributedString(string: "ADD")
            label.addAttribute(.font, value: UIFont(name: "SFProText-Semibold", size: 15)!, range: NSRange(location: 0, length: label.length))
            label.addAttribute(.kern, value: -0.36, range: NSRange(location: 0, length: label.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
            }
            label.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: label.length))
            context.saveGState()
            context.translateBy(x: 16, y: 12)
            context.scaleBy(x: -1, y: 1)
            context.translateBy(x: -16, y: -9)
            label.draw(at: CGPoint.zero)
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsButton_XSmallGlyphWhite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 28)
        
        /// Glyph
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsSegmentedControlDefault(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background
        // Warning: New symbols are not supported.
        
        /// Quantity
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsSegmentedControlAsNavigationBar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 52), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 52), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 52)
        
        /// Background
        // Warning: New symbols are not supported.
        
        /// Quantity
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsSegmentedControl_2Items(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 320, height: 38), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 320, height: 38), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 320, y: resizedFrame.height / 38)
        
        /// Mask
        let mask = UIBezierPath()
        mask.move(to: CGPoint(x: 5.13, y: 0))
        mask.addLine(to: CGPoint(x: 314.87, y: 0))
        mask.addCurve(to: CGPoint(x: 317.95, y: 0.53), controlPoint1: CGPoint(x: 316.66, y: 0), controlPoint2: CGPoint(x: 317.3, y: 0.19))
        mask.addCurve(to: CGPoint(x: 319.47, y: 2.05), controlPoint1: CGPoint(x: 318.61, y: 0.88), controlPoint2: CGPoint(x: 319.12, y: 1.39))
        mask.addCurve(to: CGPoint(x: 320, y: 5.13), controlPoint1: CGPoint(x: 319.81, y: 2.7), controlPoint2: CGPoint(x: 320, y: 3.34))
        mask.addLine(to: CGPoint(x: 320, y: 32.87))
        mask.addCurve(to: CGPoint(x: 319.47, y: 35.95), controlPoint1: CGPoint(x: 320, y: 34.66), controlPoint2: CGPoint(x: 319.81, y: 35.3))
        mask.addCurve(to: CGPoint(x: 317.95, y: 37.47), controlPoint1: CGPoint(x: 319.12, y: 36.61), controlPoint2: CGPoint(x: 318.61, y: 37.12))
        mask.addCurve(to: CGPoint(x: 314.87, y: 38), controlPoint1: CGPoint(x: 317.3, y: 37.81), controlPoint2: CGPoint(x: 316.66, y: 38))
        mask.addLine(to: CGPoint(x: 5.13, y: 38))
        mask.addCurve(to: CGPoint(x: 2.05, y: 37.47), controlPoint1: CGPoint(x: 3.34, y: 38), controlPoint2: CGPoint(x: 2.7, y: 37.81))
        mask.addCurve(to: CGPoint(x: 0.53, y: 35.95), controlPoint1: CGPoint(x: 1.39, y: 37.12), controlPoint2: CGPoint(x: 0.88, y: 36.61))
        mask.addCurve(to: CGPoint(x: 0, y: 32.87), controlPoint1: CGPoint(x: 0.19, y: 35.3), controlPoint2: CGPoint(x: 0, y: 34.66))
        mask.addLine(to: CGPoint(x: 0, y: 5.13))
        mask.addCurve(to: CGPoint(x: 0.53, y: 2.05), controlPoint1: CGPoint(x: 0, y: 3.34), controlPoint2: CGPoint(x: 0.19, y: 2.7))
        mask.addCurve(to: CGPoint(x: 2.05, y: 0.53), controlPoint1: CGPoint(x: 0.88, y: 1.39), controlPoint2: CGPoint(x: 1.39, y: 0.88))
        mask.addCurve(to: CGPoint(x: 5.13, y: 0), controlPoint1: CGPoint(x: 2.7, y: 0.19), controlPoint2: CGPoint(x: 3.34, y: 0))
        mask.close()
        context.saveGState()
        mask.usesEvenOddFillRule = true
        UIColor(hue: 1, saturation: 1, brightness: 1, alpha: 0).setFill()
        mask.fill()
        context.restoreGState()
        
        /// Mask (Outline Mask)
        context.saveGState()
        mask.addClip()
        
        /// Mask
        let mask2 = UIBezierPath()
        mask2.move(to: CGPoint(x: 160, y: 1))
        mask2.addLine(to: CGPoint(x: 5.36, y: 1))
        mask2.addCurve(to: CGPoint(x: 2.74, y: 1.45), controlPoint1: CGPoint(x: 3.84, y: 1), controlPoint2: CGPoint(x: 3.29, y: 1.16))
        mask2.addCurve(to: CGPoint(x: 1.45, y: 2.74), controlPoint1: CGPoint(x: 2.19, y: 1.75), controlPoint2: CGPoint(x: 1.75, y: 2.19))
        mask2.addCurve(to: CGPoint(x: 1, y: 5.36), controlPoint1: CGPoint(x: 1.16, y: 3.29), controlPoint2: CGPoint(x: 1, y: 3.84))
        mask2.addLine(to: CGPoint(x: 1, y: 32.64))
        mask2.addCurve(to: CGPoint(x: 1.45, y: 35.26), controlPoint1: CGPoint(x: 1, y: 34.16), controlPoint2: CGPoint(x: 1.16, y: 34.71))
        mask2.addCurve(to: CGPoint(x: 2.74, y: 36.55), controlPoint1: CGPoint(x: 1.75, y: 35.81), controlPoint2: CGPoint(x: 2.19, y: 36.25))
        mask2.addCurve(to: CGPoint(x: 5.36, y: 37), controlPoint1: CGPoint(x: 3.29, y: 36.84), controlPoint2: CGPoint(x: 3.84, y: 37))
        mask2.addLine(to: CGPoint(x: 160, y: 37))
        mask2.addLine(to: CGPoint(x: 160, y: 1))
        mask2.close()
        mask2.move(to: CGPoint(x: 161, y: 1))
        mask2.addLine(to: CGPoint(x: 161, y: 37))
        mask2.addLine(to: CGPoint(x: 314.64, y: 37))
        mask2.addCurve(to: CGPoint(x: 317.26, y: 36.55), controlPoint1: CGPoint(x: 316.16, y: 37), controlPoint2: CGPoint(x: 316.71, y: 36.84))
        mask2.addCurve(to: CGPoint(x: 318.55, y: 35.26), controlPoint1: CGPoint(x: 317.81, y: 36.25), controlPoint2: CGPoint(x: 318.25, y: 35.81))
        mask2.addCurve(to: CGPoint(x: 319, y: 32.64), controlPoint1: CGPoint(x: 318.84, y: 34.71), controlPoint2: CGPoint(x: 319, y: 34.16))
        mask2.addLine(to: CGPoint(x: 319, y: 5.36))
        mask2.addCurve(to: CGPoint(x: 318.55, y: 2.74), controlPoint1: CGPoint(x: 319, y: 3.84), controlPoint2: CGPoint(x: 318.84, y: 3.29))
        mask2.addCurve(to: CGPoint(x: 317.26, y: 1.45), controlPoint1: CGPoint(x: 318.25, y: 2.19), controlPoint2: CGPoint(x: 317.81, y: 1.75))
        mask2.addCurve(to: CGPoint(x: 314.64, y: 1), controlPoint1: CGPoint(x: 316.71, y: 1.16), controlPoint2: CGPoint(x: 316.16, y: 1))
        mask2.addLine(to: CGPoint(x: 161, y: 1))
        mask2.close()
        mask2.move(to: CGPoint(x: 5.13, y: 0))
        mask2.addLine(to: CGPoint(x: 314.87, y: 0))
        mask2.addCurve(to: CGPoint(x: 317.95, y: 0.53), controlPoint1: CGPoint(x: 316.66, y: 0), controlPoint2: CGPoint(x: 317.3, y: 0.19))
        mask2.addCurve(to: CGPoint(x: 319.47, y: 2.05), controlPoint1: CGPoint(x: 318.61, y: 0.88), controlPoint2: CGPoint(x: 319.12, y: 1.39))
        mask2.addCurve(to: CGPoint(x: 320, y: 5.13), controlPoint1: CGPoint(x: 319.81, y: 2.7), controlPoint2: CGPoint(x: 320, y: 3.34))
        mask2.addLine(to: CGPoint(x: 320, y: 32.87))
        mask2.addCurve(to: CGPoint(x: 319.47, y: 35.95), controlPoint1: CGPoint(x: 320, y: 34.66), controlPoint2: CGPoint(x: 319.81, y: 35.3))
        mask2.addCurve(to: CGPoint(x: 317.95, y: 37.47), controlPoint1: CGPoint(x: 319.12, y: 36.61), controlPoint2: CGPoint(x: 318.61, y: 37.12))
        mask2.addCurve(to: CGPoint(x: 314.87, y: 38), controlPoint1: CGPoint(x: 317.3, y: 37.81), controlPoint2: CGPoint(x: 316.66, y: 38))
        mask2.addLine(to: CGPoint(x: 5.13, y: 38))
        mask2.addCurve(to: CGPoint(x: 2.05, y: 37.47), controlPoint1: CGPoint(x: 3.34, y: 38), controlPoint2: CGPoint(x: 2.7, y: 37.81))
        mask2.addCurve(to: CGPoint(x: 0.53, y: 35.95), controlPoint1: CGPoint(x: 1.39, y: 37.12), controlPoint2: CGPoint(x: 0.88, y: 36.61))
        mask2.addCurve(to: CGPoint(x: 0, y: 32.87), controlPoint1: CGPoint(x: 0.19, y: 35.3), controlPoint2: CGPoint(x: 0, y: 34.66))
        mask2.addLine(to: CGPoint(x: 0, y: 5.13))
        mask2.addCurve(to: CGPoint(x: 0.53, y: 2.05), controlPoint1: CGPoint(x: 0, y: 3.34), controlPoint2: CGPoint(x: 0.19, y: 2.7))
        mask2.addCurve(to: CGPoint(x: 2.05, y: 0.53), controlPoint1: CGPoint(x: 0.88, y: 1.39), controlPoint2: CGPoint(x: 1.39, y: 0.88))
        mask2.addCurve(to: CGPoint(x: 5.13, y: 0), controlPoint1: CGPoint(x: 2.7, y: 0.19), controlPoint2: CGPoint(x: 3.34, y: 0))
        mask2.close()
        context.saveGState()
        mask2.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        mask2.fill()
        context.restoreGState()
        
        /// Item 2
        // Warning: New symbols are not supported.
        
        /// Item 1
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Mask (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawControlsSegmentedControl_3Items(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 320, height: 38), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 320, height: 38), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 320, y: resizedFrame.height / 38)
        
        /// Mask
        let mask = UIBezierPath()
        mask.move(to: CGPoint(x: 5.13, y: 0))
        mask.addLine(to: CGPoint(x: 314.87, y: 0))
        mask.addCurve(to: CGPoint(x: 317.95, y: 0.53), controlPoint1: CGPoint(x: 316.66, y: 0), controlPoint2: CGPoint(x: 317.3, y: 0.19))
        mask.addCurve(to: CGPoint(x: 319.47, y: 2.05), controlPoint1: CGPoint(x: 318.61, y: 0.88), controlPoint2: CGPoint(x: 319.12, y: 1.39))
        mask.addCurve(to: CGPoint(x: 320, y: 5.13), controlPoint1: CGPoint(x: 319.81, y: 2.7), controlPoint2: CGPoint(x: 320, y: 3.34))
        mask.addLine(to: CGPoint(x: 320, y: 32.87))
        mask.addCurve(to: CGPoint(x: 319.47, y: 35.95), controlPoint1: CGPoint(x: 320, y: 34.66), controlPoint2: CGPoint(x: 319.81, y: 35.3))
        mask.addCurve(to: CGPoint(x: 317.95, y: 37.47), controlPoint1: CGPoint(x: 319.12, y: 36.61), controlPoint2: CGPoint(x: 318.61, y: 37.12))
        mask.addCurve(to: CGPoint(x: 314.87, y: 38), controlPoint1: CGPoint(x: 317.3, y: 37.81), controlPoint2: CGPoint(x: 316.66, y: 38))
        mask.addLine(to: CGPoint(x: 5.13, y: 38))
        mask.addCurve(to: CGPoint(x: 2.05, y: 37.47), controlPoint1: CGPoint(x: 3.34, y: 38), controlPoint2: CGPoint(x: 2.7, y: 37.81))
        mask.addCurve(to: CGPoint(x: 0.53, y: 35.95), controlPoint1: CGPoint(x: 1.39, y: 37.12), controlPoint2: CGPoint(x: 0.88, y: 36.61))
        mask.addCurve(to: CGPoint(x: 0, y: 32.87), controlPoint1: CGPoint(x: 0.19, y: 35.3), controlPoint2: CGPoint(x: 0, y: 34.66))
        mask.addLine(to: CGPoint(x: 0, y: 5.13))
        mask.addCurve(to: CGPoint(x: 0.53, y: 2.05), controlPoint1: CGPoint(x: 0, y: 3.34), controlPoint2: CGPoint(x: 0.19, y: 2.7))
        mask.addCurve(to: CGPoint(x: 2.05, y: 0.53), controlPoint1: CGPoint(x: 0.88, y: 1.39), controlPoint2: CGPoint(x: 1.39, y: 0.88))
        mask.addCurve(to: CGPoint(x: 5.13, y: 0), controlPoint1: CGPoint(x: 2.7, y: 0.19), controlPoint2: CGPoint(x: 3.34, y: 0))
        mask.close()
        context.saveGState()
        mask.usesEvenOddFillRule = true
        UIColor(hue: 1, saturation: 1, brightness: 1, alpha: 0).setFill()
        mask.fill()
        context.restoreGState()
        
        /// Mask (Outline Mask)
        context.saveGState()
        mask.addClip()
        
        /// Mask
        let mask2 = UIBezierPath()
        mask2.move(to: CGPoint(x: 213, y: 1))
        mask2.addLine(to: CGPoint(x: 107, y: 1))
        mask2.addLine(to: CGPoint(x: 107, y: 37))
        mask2.addLine(to: CGPoint(x: 213, y: 37))
        mask2.addLine(to: CGPoint(x: 213, y: 1))
        mask2.close()
        mask2.move(to: CGPoint(x: 214, y: 1))
        mask2.addLine(to: CGPoint(x: 214, y: 37))
        mask2.addLine(to: CGPoint(x: 314.64, y: 37))
        mask2.addCurve(to: CGPoint(x: 317.26, y: 36.55), controlPoint1: CGPoint(x: 316.16, y: 37), controlPoint2: CGPoint(x: 316.71, y: 36.84))
        mask2.addCurve(to: CGPoint(x: 318.55, y: 35.26), controlPoint1: CGPoint(x: 317.81, y: 36.25), controlPoint2: CGPoint(x: 318.25, y: 35.81))
        mask2.addCurve(to: CGPoint(x: 319, y: 32.64), controlPoint1: CGPoint(x: 318.84, y: 34.71), controlPoint2: CGPoint(x: 319, y: 34.16))
        mask2.addLine(to: CGPoint(x: 319, y: 5.36))
        mask2.addCurve(to: CGPoint(x: 318.55, y: 2.74), controlPoint1: CGPoint(x: 319, y: 3.84), controlPoint2: CGPoint(x: 318.84, y: 3.29))
        mask2.addCurve(to: CGPoint(x: 317.26, y: 1.45), controlPoint1: CGPoint(x: 318.25, y: 2.19), controlPoint2: CGPoint(x: 317.81, y: 1.75))
        mask2.addCurve(to: CGPoint(x: 314.64, y: 1), controlPoint1: CGPoint(x: 316.71, y: 1.16), controlPoint2: CGPoint(x: 316.16, y: 1))
        mask2.addLine(to: CGPoint(x: 214, y: 1))
        mask2.close()
        mask2.move(to: CGPoint(x: 106, y: 1))
        mask2.addLine(to: CGPoint(x: 5.36, y: 1))
        mask2.addCurve(to: CGPoint(x: 2.74, y: 1.45), controlPoint1: CGPoint(x: 3.84, y: 1), controlPoint2: CGPoint(x: 3.29, y: 1.16))
        mask2.addCurve(to: CGPoint(x: 1.45, y: 2.74), controlPoint1: CGPoint(x: 2.19, y: 1.75), controlPoint2: CGPoint(x: 1.75, y: 2.19))
        mask2.addCurve(to: CGPoint(x: 1, y: 5.36), controlPoint1: CGPoint(x: 1.16, y: 3.29), controlPoint2: CGPoint(x: 1, y: 3.84))
        mask2.addLine(to: CGPoint(x: 1, y: 32.64))
        mask2.addCurve(to: CGPoint(x: 1.45, y: 35.26), controlPoint1: CGPoint(x: 1, y: 34.16), controlPoint2: CGPoint(x: 1.16, y: 34.71))
        mask2.addCurve(to: CGPoint(x: 2.74, y: 36.55), controlPoint1: CGPoint(x: 1.75, y: 35.81), controlPoint2: CGPoint(x: 2.19, y: 36.25))
        mask2.addCurve(to: CGPoint(x: 5.36, y: 37), controlPoint1: CGPoint(x: 3.29, y: 36.84), controlPoint2: CGPoint(x: 3.84, y: 37))
        mask2.addLine(to: CGPoint(x: 106, y: 37))
        mask2.addLine(to: CGPoint(x: 106, y: 1))
        mask2.close()
        mask2.move(to: CGPoint(x: 5.13, y: 0))
        mask2.addLine(to: CGPoint(x: 314.87, y: 0))
        mask2.addCurve(to: CGPoint(x: 317.95, y: 0.53), controlPoint1: CGPoint(x: 316.66, y: 0), controlPoint2: CGPoint(x: 317.3, y: 0.19))
        mask2.addCurve(to: CGPoint(x: 319.47, y: 2.05), controlPoint1: CGPoint(x: 318.61, y: 0.88), controlPoint2: CGPoint(x: 319.12, y: 1.39))
        mask2.addCurve(to: CGPoint(x: 320, y: 5.13), controlPoint1: CGPoint(x: 319.81, y: 2.7), controlPoint2: CGPoint(x: 320, y: 3.34))
        mask2.addLine(to: CGPoint(x: 320, y: 32.87))
        mask2.addCurve(to: CGPoint(x: 319.47, y: 35.95), controlPoint1: CGPoint(x: 320, y: 34.66), controlPoint2: CGPoint(x: 319.81, y: 35.3))
        mask2.addCurve(to: CGPoint(x: 317.95, y: 37.47), controlPoint1: CGPoint(x: 319.12, y: 36.61), controlPoint2: CGPoint(x: 318.61, y: 37.12))
        mask2.addCurve(to: CGPoint(x: 314.87, y: 38), controlPoint1: CGPoint(x: 317.3, y: 37.81), controlPoint2: CGPoint(x: 316.66, y: 38))
        mask2.addLine(to: CGPoint(x: 5.13, y: 38))
        mask2.addCurve(to: CGPoint(x: 2.05, y: 37.47), controlPoint1: CGPoint(x: 3.34, y: 38), controlPoint2: CGPoint(x: 2.7, y: 37.81))
        mask2.addCurve(to: CGPoint(x: 0.53, y: 35.95), controlPoint1: CGPoint(x: 1.39, y: 37.12), controlPoint2: CGPoint(x: 0.88, y: 36.61))
        mask2.addCurve(to: CGPoint(x: 0, y: 32.87), controlPoint1: CGPoint(x: 0.19, y: 35.3), controlPoint2: CGPoint(x: 0, y: 34.66))
        mask2.addLine(to: CGPoint(x: 0, y: 5.13))
        mask2.addCurve(to: CGPoint(x: 0.53, y: 2.05), controlPoint1: CGPoint(x: 0, y: 3.34), controlPoint2: CGPoint(x: 0.19, y: 2.7))
        mask2.addCurve(to: CGPoint(x: 2.05, y: 0.53), controlPoint1: CGPoint(x: 0.88, y: 1.39), controlPoint2: CGPoint(x: 1.39, y: 0.88))
        mask2.addCurve(to: CGPoint(x: 5.13, y: 0), controlPoint1: CGPoint(x: 2.7, y: 0.19), controlPoint2: CGPoint(x: 3.34, y: 0))
        mask2.close()
        context.saveGState()
        mask2.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        mask2.fill()
        context.restoreGState()
        
        /// Item 3
        // Warning: New symbols are not supported.
        
        /// Item 2
        // Warning: New symbols are not supported.
        
        /// Item 1
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Mask (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawControlsSegmentedControl_4Items(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 320, height: 38), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 320, height: 38), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 320, y: resizedFrame.height / 38)
        
        /// Mask
        let mask = UIBezierPath()
        mask.move(to: CGPoint(x: 5.13, y: 0))
        mask.addLine(to: CGPoint(x: 314.87, y: 0))
        mask.addCurve(to: CGPoint(x: 317.95, y: 0.53), controlPoint1: CGPoint(x: 316.66, y: 0), controlPoint2: CGPoint(x: 317.3, y: 0.19))
        mask.addCurve(to: CGPoint(x: 319.47, y: 2.05), controlPoint1: CGPoint(x: 318.61, y: 0.88), controlPoint2: CGPoint(x: 319.12, y: 1.39))
        mask.addCurve(to: CGPoint(x: 320, y: 5.13), controlPoint1: CGPoint(x: 319.81, y: 2.7), controlPoint2: CGPoint(x: 320, y: 3.34))
        mask.addLine(to: CGPoint(x: 320, y: 32.87))
        mask.addCurve(to: CGPoint(x: 319.47, y: 35.95), controlPoint1: CGPoint(x: 320, y: 34.66), controlPoint2: CGPoint(x: 319.81, y: 35.3))
        mask.addCurve(to: CGPoint(x: 317.95, y: 37.47), controlPoint1: CGPoint(x: 319.12, y: 36.61), controlPoint2: CGPoint(x: 318.61, y: 37.12))
        mask.addCurve(to: CGPoint(x: 314.87, y: 38), controlPoint1: CGPoint(x: 317.3, y: 37.81), controlPoint2: CGPoint(x: 316.66, y: 38))
        mask.addLine(to: CGPoint(x: 5.13, y: 38))
        mask.addCurve(to: CGPoint(x: 2.05, y: 37.47), controlPoint1: CGPoint(x: 3.34, y: 38), controlPoint2: CGPoint(x: 2.7, y: 37.81))
        mask.addCurve(to: CGPoint(x: 0.53, y: 35.95), controlPoint1: CGPoint(x: 1.39, y: 37.12), controlPoint2: CGPoint(x: 0.88, y: 36.61))
        mask.addCurve(to: CGPoint(x: 0, y: 32.87), controlPoint1: CGPoint(x: 0.19, y: 35.3), controlPoint2: CGPoint(x: 0, y: 34.66))
        mask.addLine(to: CGPoint(x: 0, y: 5.13))
        mask.addCurve(to: CGPoint(x: 0.53, y: 2.05), controlPoint1: CGPoint(x: 0, y: 3.34), controlPoint2: CGPoint(x: 0.19, y: 2.7))
        mask.addCurve(to: CGPoint(x: 2.05, y: 0.53), controlPoint1: CGPoint(x: 0.88, y: 1.39), controlPoint2: CGPoint(x: 1.39, y: 0.88))
        mask.addCurve(to: CGPoint(x: 5.13, y: 0), controlPoint1: CGPoint(x: 2.7, y: 0.19), controlPoint2: CGPoint(x: 3.34, y: 0))
        mask.close()
        context.saveGState()
        mask.usesEvenOddFillRule = true
        UIColor(hue: 1, saturation: 1, brightness: 1, alpha: 0).setFill()
        mask.fill()
        context.restoreGState()
        
        /// Mask (Outline Mask)
        context.saveGState()
        mask.addClip()
        
        /// Mask
        let mask2 = UIBezierPath()
        mask2.move(to: CGPoint(x: 240, y: 1))
        mask2.addLine(to: CGPoint(x: 161, y: 1))
        mask2.addLine(to: CGPoint(x: 161, y: 37))
        mask2.addLine(to: CGPoint(x: 240, y: 37))
        mask2.addLine(to: CGPoint(x: 240, y: 1))
        mask2.close()
        mask2.move(to: CGPoint(x: 241, y: 1))
        mask2.addLine(to: CGPoint(x: 241, y: 37))
        mask2.addLine(to: CGPoint(x: 314.64, y: 37))
        mask2.addCurve(to: CGPoint(x: 317.26, y: 36.55), controlPoint1: CGPoint(x: 316.16, y: 37), controlPoint2: CGPoint(x: 316.71, y: 36.84))
        mask2.addCurve(to: CGPoint(x: 318.55, y: 35.26), controlPoint1: CGPoint(x: 317.81, y: 36.25), controlPoint2: CGPoint(x: 318.25, y: 35.81))
        mask2.addCurve(to: CGPoint(x: 319, y: 32.64), controlPoint1: CGPoint(x: 318.84, y: 34.71), controlPoint2: CGPoint(x: 319, y: 34.16))
        mask2.addLine(to: CGPoint(x: 319, y: 5.36))
        mask2.addCurve(to: CGPoint(x: 318.55, y: 2.74), controlPoint1: CGPoint(x: 319, y: 3.84), controlPoint2: CGPoint(x: 318.84, y: 3.29))
        mask2.addCurve(to: CGPoint(x: 317.26, y: 1.45), controlPoint1: CGPoint(x: 318.25, y: 2.19), controlPoint2: CGPoint(x: 317.81, y: 1.75))
        mask2.addCurve(to: CGPoint(x: 314.64, y: 1), controlPoint1: CGPoint(x: 316.71, y: 1.16), controlPoint2: CGPoint(x: 316.16, y: 1))
        mask2.addLine(to: CGPoint(x: 241, y: 1))
        mask2.close()
        mask2.move(to: CGPoint(x: 160, y: 1))
        mask2.addLine(to: CGPoint(x: 81, y: 1))
        mask2.addLine(to: CGPoint(x: 81, y: 37))
        mask2.addLine(to: CGPoint(x: 160, y: 37))
        mask2.addLine(to: CGPoint(x: 160, y: 1))
        mask2.close()
        mask2.move(to: CGPoint(x: 80, y: 1))
        mask2.addLine(to: CGPoint(x: 5.36, y: 1))
        mask2.addCurve(to: CGPoint(x: 2.74, y: 1.45), controlPoint1: CGPoint(x: 3.84, y: 1), controlPoint2: CGPoint(x: 3.29, y: 1.16))
        mask2.addCurve(to: CGPoint(x: 1.45, y: 2.74), controlPoint1: CGPoint(x: 2.19, y: 1.75), controlPoint2: CGPoint(x: 1.75, y: 2.19))
        mask2.addCurve(to: CGPoint(x: 1, y: 5.36), controlPoint1: CGPoint(x: 1.16, y: 3.29), controlPoint2: CGPoint(x: 1, y: 3.84))
        mask2.addLine(to: CGPoint(x: 1, y: 32.64))
        mask2.addCurve(to: CGPoint(x: 1.45, y: 35.26), controlPoint1: CGPoint(x: 1, y: 34.16), controlPoint2: CGPoint(x: 1.16, y: 34.71))
        mask2.addCurve(to: CGPoint(x: 2.74, y: 36.55), controlPoint1: CGPoint(x: 1.75, y: 35.81), controlPoint2: CGPoint(x: 2.19, y: 36.25))
        mask2.addCurve(to: CGPoint(x: 5.36, y: 37), controlPoint1: CGPoint(x: 3.29, y: 36.84), controlPoint2: CGPoint(x: 3.84, y: 37))
        mask2.addLine(to: CGPoint(x: 80, y: 37))
        mask2.addLine(to: CGPoint(x: 80, y: 1))
        mask2.close()
        mask2.move(to: CGPoint(x: 5.13, y: 0))
        mask2.addLine(to: CGPoint(x: 314.87, y: 0))
        mask2.addCurve(to: CGPoint(x: 317.95, y: 0.53), controlPoint1: CGPoint(x: 316.66, y: 0), controlPoint2: CGPoint(x: 317.3, y: 0.19))
        mask2.addCurve(to: CGPoint(x: 319.47, y: 2.05), controlPoint1: CGPoint(x: 318.61, y: 0.88), controlPoint2: CGPoint(x: 319.12, y: 1.39))
        mask2.addCurve(to: CGPoint(x: 320, y: 5.13), controlPoint1: CGPoint(x: 319.81, y: 2.7), controlPoint2: CGPoint(x: 320, y: 3.34))
        mask2.addLine(to: CGPoint(x: 320, y: 32.87))
        mask2.addCurve(to: CGPoint(x: 319.47, y: 35.95), controlPoint1: CGPoint(x: 320, y: 34.66), controlPoint2: CGPoint(x: 319.81, y: 35.3))
        mask2.addCurve(to: CGPoint(x: 317.95, y: 37.47), controlPoint1: CGPoint(x: 319.12, y: 36.61), controlPoint2: CGPoint(x: 318.61, y: 37.12))
        mask2.addCurve(to: CGPoint(x: 314.87, y: 38), controlPoint1: CGPoint(x: 317.3, y: 37.81), controlPoint2: CGPoint(x: 316.66, y: 38))
        mask2.addLine(to: CGPoint(x: 5.13, y: 38))
        mask2.addCurve(to: CGPoint(x: 2.05, y: 37.47), controlPoint1: CGPoint(x: 3.34, y: 38), controlPoint2: CGPoint(x: 2.7, y: 37.81))
        mask2.addCurve(to: CGPoint(x: 0.53, y: 35.95), controlPoint1: CGPoint(x: 1.39, y: 37.12), controlPoint2: CGPoint(x: 0.88, y: 36.61))
        mask2.addCurve(to: CGPoint(x: 0, y: 32.87), controlPoint1: CGPoint(x: 0.19, y: 35.3), controlPoint2: CGPoint(x: 0, y: 34.66))
        mask2.addLine(to: CGPoint(x: 0, y: 5.13))
        mask2.addCurve(to: CGPoint(x: 0.53, y: 2.05), controlPoint1: CGPoint(x: 0, y: 3.34), controlPoint2: CGPoint(x: 0.19, y: 2.7))
        mask2.addCurve(to: CGPoint(x: 2.05, y: 0.53), controlPoint1: CGPoint(x: 0.88, y: 1.39), controlPoint2: CGPoint(x: 1.39, y: 0.88))
        mask2.addCurve(to: CGPoint(x: 5.13, y: 0), controlPoint1: CGPoint(x: 2.7, y: 0.19), controlPoint2: CGPoint(x: 3.34, y: 0))
        mask2.close()
        context.saveGState()
        mask2.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        mask2.fill()
        context.restoreGState()
        
        /// Item 4
        // Warning: New symbols are not supported.
        
        /// Item 3
        // Warning: New symbols are not supported.
        
        /// Item 2
        // Warning: New symbols are not supported.
        
        /// Item 1
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Mask (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawControlsSegmentedControl_5Items(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 320, height: 38), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 320, height: 38), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 320, y: resizedFrame.height / 38)
        
        /// Mask
        let mask = UIBezierPath()
        mask.move(to: CGPoint(x: 5.13, y: 0))
        mask.addLine(to: CGPoint(x: 314.87, y: 0))
        mask.addCurve(to: CGPoint(x: 317.95, y: 0.53), controlPoint1: CGPoint(x: 316.66, y: 0), controlPoint2: CGPoint(x: 317.3, y: 0.19))
        mask.addCurve(to: CGPoint(x: 319.47, y: 2.05), controlPoint1: CGPoint(x: 318.61, y: 0.88), controlPoint2: CGPoint(x: 319.12, y: 1.39))
        mask.addCurve(to: CGPoint(x: 320, y: 5.13), controlPoint1: CGPoint(x: 319.81, y: 2.7), controlPoint2: CGPoint(x: 320, y: 3.34))
        mask.addLine(to: CGPoint(x: 320, y: 32.87))
        mask.addCurve(to: CGPoint(x: 319.47, y: 35.95), controlPoint1: CGPoint(x: 320, y: 34.66), controlPoint2: CGPoint(x: 319.81, y: 35.3))
        mask.addCurve(to: CGPoint(x: 317.95, y: 37.47), controlPoint1: CGPoint(x: 319.12, y: 36.61), controlPoint2: CGPoint(x: 318.61, y: 37.12))
        mask.addCurve(to: CGPoint(x: 314.87, y: 38), controlPoint1: CGPoint(x: 317.3, y: 37.81), controlPoint2: CGPoint(x: 316.66, y: 38))
        mask.addLine(to: CGPoint(x: 5.13, y: 38))
        mask.addCurve(to: CGPoint(x: 2.05, y: 37.47), controlPoint1: CGPoint(x: 3.34, y: 38), controlPoint2: CGPoint(x: 2.7, y: 37.81))
        mask.addCurve(to: CGPoint(x: 0.53, y: 35.95), controlPoint1: CGPoint(x: 1.39, y: 37.12), controlPoint2: CGPoint(x: 0.88, y: 36.61))
        mask.addCurve(to: CGPoint(x: 0, y: 32.87), controlPoint1: CGPoint(x: 0.19, y: 35.3), controlPoint2: CGPoint(x: 0, y: 34.66))
        mask.addLine(to: CGPoint(x: 0, y: 5.13))
        mask.addCurve(to: CGPoint(x: 0.53, y: 2.05), controlPoint1: CGPoint(x: 0, y: 3.34), controlPoint2: CGPoint(x: 0.19, y: 2.7))
        mask.addCurve(to: CGPoint(x: 2.05, y: 0.53), controlPoint1: CGPoint(x: 0.88, y: 1.39), controlPoint2: CGPoint(x: 1.39, y: 0.88))
        mask.addCurve(to: CGPoint(x: 5.13, y: 0), controlPoint1: CGPoint(x: 2.7, y: 0.19), controlPoint2: CGPoint(x: 3.34, y: 0))
        mask.close()
        context.saveGState()
        mask.usesEvenOddFillRule = true
        UIColor(hue: 1, saturation: 1, brightness: 1, alpha: 0).setFill()
        mask.fill()
        context.restoreGState()
        
        /// Mask (Outline Mask)
        context.saveGState()
        mask.addClip()
        
        /// Mask
        let mask2 = UIBezierPath()
        mask2.move(to: CGPoint(x: 256, y: 1))
        mask2.addLine(to: CGPoint(x: 193, y: 1))
        mask2.addLine(to: CGPoint(x: 193, y: 37))
        mask2.addLine(to: CGPoint(x: 256, y: 37))
        mask2.addLine(to: CGPoint(x: 256, y: 1))
        mask2.close()
        mask2.move(to: CGPoint(x: 257, y: 1))
        mask2.addLine(to: CGPoint(x: 257, y: 37))
        mask2.addLine(to: CGPoint(x: 314.64, y: 37))
        mask2.addCurve(to: CGPoint(x: 317.26, y: 36.55), controlPoint1: CGPoint(x: 316.16, y: 37), controlPoint2: CGPoint(x: 316.71, y: 36.84))
        mask2.addCurve(to: CGPoint(x: 318.55, y: 35.26), controlPoint1: CGPoint(x: 317.81, y: 36.25), controlPoint2: CGPoint(x: 318.25, y: 35.81))
        mask2.addCurve(to: CGPoint(x: 319, y: 32.64), controlPoint1: CGPoint(x: 318.84, y: 34.71), controlPoint2: CGPoint(x: 319, y: 34.16))
        mask2.addLine(to: CGPoint(x: 319, y: 5.36))
        mask2.addCurve(to: CGPoint(x: 318.55, y: 2.74), controlPoint1: CGPoint(x: 319, y: 3.84), controlPoint2: CGPoint(x: 318.84, y: 3.29))
        mask2.addCurve(to: CGPoint(x: 317.26, y: 1.45), controlPoint1: CGPoint(x: 318.25, y: 2.19), controlPoint2: CGPoint(x: 317.81, y: 1.75))
        mask2.addCurve(to: CGPoint(x: 314.64, y: 1), controlPoint1: CGPoint(x: 316.71, y: 1.16), controlPoint2: CGPoint(x: 316.16, y: 1))
        mask2.addLine(to: CGPoint(x: 257, y: 1))
        mask2.close()
        mask2.move(to: CGPoint(x: 192, y: 1))
        mask2.addLine(to: CGPoint(x: 129, y: 1))
        mask2.addLine(to: CGPoint(x: 129, y: 37))
        mask2.addLine(to: CGPoint(x: 192, y: 37))
        mask2.addLine(to: CGPoint(x: 192, y: 1))
        mask2.close()
        mask2.move(to: CGPoint(x: 128, y: 1))
        mask2.addLine(to: CGPoint(x: 65, y: 1))
        mask2.addLine(to: CGPoint(x: 65, y: 37))
        mask2.addLine(to: CGPoint(x: 128, y: 37))
        mask2.addLine(to: CGPoint(x: 128, y: 1))
        mask2.close()
        mask2.move(to: CGPoint(x: 64, y: 1))
        mask2.addLine(to: CGPoint(x: 5.36, y: 1))
        mask2.addCurve(to: CGPoint(x: 2.74, y: 1.45), controlPoint1: CGPoint(x: 3.84, y: 1), controlPoint2: CGPoint(x: 3.29, y: 1.16))
        mask2.addCurve(to: CGPoint(x: 1.45, y: 2.74), controlPoint1: CGPoint(x: 2.19, y: 1.75), controlPoint2: CGPoint(x: 1.75, y: 2.19))
        mask2.addCurve(to: CGPoint(x: 1, y: 5.36), controlPoint1: CGPoint(x: 1.16, y: 3.29), controlPoint2: CGPoint(x: 1, y: 3.84))
        mask2.addLine(to: CGPoint(x: 1, y: 32.64))
        mask2.addCurve(to: CGPoint(x: 1.45, y: 35.26), controlPoint1: CGPoint(x: 1, y: 34.16), controlPoint2: CGPoint(x: 1.16, y: 34.71))
        mask2.addCurve(to: CGPoint(x: 2.74, y: 36.55), controlPoint1: CGPoint(x: 1.75, y: 35.81), controlPoint2: CGPoint(x: 2.19, y: 36.25))
        mask2.addCurve(to: CGPoint(x: 5.36, y: 37), controlPoint1: CGPoint(x: 3.29, y: 36.84), controlPoint2: CGPoint(x: 3.84, y: 37))
        mask2.addLine(to: CGPoint(x: 64, y: 37))
        mask2.addLine(to: CGPoint(x: 64, y: 1))
        mask2.close()
        mask2.move(to: CGPoint(x: 5.13, y: 0))
        mask2.addLine(to: CGPoint(x: 314.87, y: 0))
        mask2.addCurve(to: CGPoint(x: 317.95, y: 0.53), controlPoint1: CGPoint(x: 316.66, y: 0), controlPoint2: CGPoint(x: 317.3, y: 0.19))
        mask2.addCurve(to: CGPoint(x: 319.47, y: 2.05), controlPoint1: CGPoint(x: 318.61, y: 0.88), controlPoint2: CGPoint(x: 319.12, y: 1.39))
        mask2.addCurve(to: CGPoint(x: 320, y: 5.13), controlPoint1: CGPoint(x: 319.81, y: 2.7), controlPoint2: CGPoint(x: 320, y: 3.34))
        mask2.addLine(to: CGPoint(x: 320, y: 32.87))
        mask2.addCurve(to: CGPoint(x: 319.47, y: 35.95), controlPoint1: CGPoint(x: 320, y: 34.66), controlPoint2: CGPoint(x: 319.81, y: 35.3))
        mask2.addCurve(to: CGPoint(x: 317.95, y: 37.47), controlPoint1: CGPoint(x: 319.12, y: 36.61), controlPoint2: CGPoint(x: 318.61, y: 37.12))
        mask2.addCurve(to: CGPoint(x: 314.87, y: 38), controlPoint1: CGPoint(x: 317.3, y: 37.81), controlPoint2: CGPoint(x: 316.66, y: 38))
        mask2.addLine(to: CGPoint(x: 5.13, y: 38))
        mask2.addCurve(to: CGPoint(x: 2.05, y: 37.47), controlPoint1: CGPoint(x: 3.34, y: 38), controlPoint2: CGPoint(x: 2.7, y: 37.81))
        mask2.addCurve(to: CGPoint(x: 0.53, y: 35.95), controlPoint1: CGPoint(x: 1.39, y: 37.12), controlPoint2: CGPoint(x: 0.88, y: 36.61))
        mask2.addCurve(to: CGPoint(x: 0, y: 32.87), controlPoint1: CGPoint(x: 0.19, y: 35.3), controlPoint2: CGPoint(x: 0, y: 34.66))
        mask2.addLine(to: CGPoint(x: 0, y: 5.13))
        mask2.addCurve(to: CGPoint(x: 0.53, y: 2.05), controlPoint1: CGPoint(x: 0, y: 3.34), controlPoint2: CGPoint(x: 0.19, y: 2.7))
        mask2.addCurve(to: CGPoint(x: 2.05, y: 0.53), controlPoint1: CGPoint(x: 0.88, y: 1.39), controlPoint2: CGPoint(x: 1.39, y: 0.88))
        mask2.addCurve(to: CGPoint(x: 5.13, y: 0), controlPoint1: CGPoint(x: 2.7, y: 0.19), controlPoint2: CGPoint(x: 3.34, y: 0))
        mask2.close()
        context.saveGState()
        mask2.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        mask2.fill()
        context.restoreGState()
        
        /// Item 5
        // Warning: New symbols are not supported.
        
        /// Item 4
        // Warning: New symbols are not supported.
        
        /// Item 3
        // Warning: New symbols are not supported.
        
        /// Item 2
        // Warning: New symbols are not supported.
        
        /// Item 1
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Mask (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawControlsSegmentedControl_Active(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 320, height: 90), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 320, height: 90), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 320, y: resizedFrame.height / 90)
        
        /// Rectangle
        let rectangle8 = UIBezierPath()
        rectangle8.move(to: CGPoint.zero)
        rectangle8.addLine(to: CGPoint(x: 320, y: 0))
        rectangle8.addLine(to: CGPoint(x: 320, y: 90))
        rectangle8.addLine(to: CGPoint(x: 0, y: 90))
        rectangle8.addLine(to: CGPoint.zero)
        rectangle8.close()
        context.saveGState()
        rectangle8.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        rectangle8.fill()
        context.restoreGState()
        
        /// ↳ Label
        let label = NSMutableAttributedString(string: "Label")
        label.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 15)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(.kern, value: -0.24, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 20
            paragraphStyle.minimumLineHeight = 20
            label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        label.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: label.length))
        context.saveGState()
        label.draw(in: CGRect(x: 10, y: 35, width: 300, height: 22))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsSegmentedControl_Inactive(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 320, height: 90), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 320, height: 90), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 320, y: resizedFrame.height / 90)
        
        /// ↳ Label
        let label = NSMutableAttributedString(string: "Label")
        label.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 15)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(.kern, value: -0.24, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 20
            paragraphStyle.minimumLineHeight = 20
            label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        label.addAttribute(.foregroundColor, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
        context.saveGState()
        label.draw(in: CGRect(x: 10, y: 35, width: 300, height: 22))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsProgress_LineComplete(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 4), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 4), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 4)
        
        /// Progress
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsProgressSpiner(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background
        // Warning: New symbols are not supported.
        
        /// Spiner
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsProgressLine(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background
        // Warning: New symbols are not supported.
        
        /// Line
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsProgress_Line25(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 90), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 90), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 90)
        
        /// Mask
        let mask = UIBezierPath()
        mask.move(to: CGPoint(x: 12, y: 0))
        mask.addLine(to: CGPoint(x: 288, y: 0))
        mask.addCurve(to: CGPoint(x: 300, y: 12), controlPoint1: CGPoint(x: 294.63, y: 0), controlPoint2: CGPoint(x: 300, y: 5.37))
        mask.addLine(to: CGPoint(x: 300, y: 78))
        mask.addCurve(to: CGPoint(x: 288, y: 90), controlPoint1: CGPoint(x: 300, y: 84.63), controlPoint2: CGPoint(x: 294.63, y: 90))
        mask.addLine(to: CGPoint(x: 12, y: 90))
        mask.addCurve(to: CGPoint(x: 0, y: 78), controlPoint1: CGPoint(x: 5.37, y: 90), controlPoint2: CGPoint(x: 0, y: 84.63))
        mask.addLine(to: CGPoint(x: 0, y: 12))
        mask.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 0, y: 5.37), controlPoint2: CGPoint(x: 5.37, y: 0))
        mask.close()
        context.saveGState()
        mask.usesEvenOddFillRule = true
        UIColor(white: 0.847, alpha: 1).setFill()
        mask.fill()
        context.restoreGState()
        
        /// Mask (Outline Mask)
        context.saveGState()
        mask.addClip()
        
        /// Inactive
        let inactive = UIBezierPath()
        inactive.move(to: CGPoint.zero)
        inactive.addLine(to: CGPoint(x: 300, y: 0))
        inactive.addLine(to: CGPoint(x: 300, y: 90))
        inactive.addLine(to: CGPoint(x: 0, y: 90))
        inactive.addLine(to: CGPoint.zero)
        inactive.close()
        context.saveGState()
        inactive.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.021, brightness: 0.918, alpha: 1).setFill()
        inactive.fill()
        context.restoreGState()
        
        /// Active
        let active = UIBezierPath()
        active.move(to: CGPoint.zero)
        active.addLine(to: CGPoint(x: 75, y: 0))
        active.addLine(to: CGPoint(x: 75, y: 90))
        active.addLine(to: CGPoint(x: 0, y: 90))
        active.addLine(to: CGPoint.zero)
        active.close()
        context.saveGState()
        active.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        active.fill()
        context.restoreGState()
        
        context.restoreGState()
        // End Mask (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawControlsProgress_Line50(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 90), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 90), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 90)
        
        /// Mask
        let mask = UIBezierPath()
        mask.move(to: CGPoint(x: 12, y: 0))
        mask.addLine(to: CGPoint(x: 288, y: 0))
        mask.addCurve(to: CGPoint(x: 300, y: 12), controlPoint1: CGPoint(x: 294.63, y: 0), controlPoint2: CGPoint(x: 300, y: 5.37))
        mask.addLine(to: CGPoint(x: 300, y: 78))
        mask.addCurve(to: CGPoint(x: 288, y: 90), controlPoint1: CGPoint(x: 300, y: 84.63), controlPoint2: CGPoint(x: 294.63, y: 90))
        mask.addLine(to: CGPoint(x: 12, y: 90))
        mask.addCurve(to: CGPoint(x: 0, y: 78), controlPoint1: CGPoint(x: 5.37, y: 90), controlPoint2: CGPoint(x: 0, y: 84.63))
        mask.addLine(to: CGPoint(x: 0, y: 12))
        mask.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 0, y: 5.37), controlPoint2: CGPoint(x: 5.37, y: 0))
        mask.close()
        context.saveGState()
        mask.usesEvenOddFillRule = true
        UIColor(white: 0.847, alpha: 1).setFill()
        mask.fill()
        context.restoreGState()
        
        /// Mask (Outline Mask)
        context.saveGState()
        mask.addClip()
        
        /// Inactive
        let inactive = UIBezierPath()
        inactive.move(to: CGPoint.zero)
        inactive.addLine(to: CGPoint(x: 300, y: 0))
        inactive.addLine(to: CGPoint(x: 300, y: 90))
        inactive.addLine(to: CGPoint(x: 0, y: 90))
        inactive.addLine(to: CGPoint.zero)
        inactive.close()
        context.saveGState()
        // Warning: Blur effects are not supported.
        inactive.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.021, brightness: 0.918, alpha: 1).setFill()
        inactive.fill()
        context.restoreGState()
        
        /// Active
        let active = UIBezierPath()
        active.move(to: CGPoint.zero)
        active.addLine(to: CGPoint(x: 150, y: 0))
        active.addLine(to: CGPoint(x: 150, y: 90))
        active.addLine(to: CGPoint(x: 0, y: 90))
        active.addLine(to: CGPoint.zero)
        active.close()
        context.saveGState()
        active.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        active.fill()
        context.restoreGState()
        
        context.restoreGState()
        // End Mask (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawControlsProgress_Line75(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 90), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 90), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 90)
        
        /// Mask
        let mask = UIBezierPath()
        mask.move(to: CGPoint(x: 12, y: 0))
        mask.addLine(to: CGPoint(x: 288, y: 0))
        mask.addCurve(to: CGPoint(x: 300, y: 12), controlPoint1: CGPoint(x: 294.63, y: 0), controlPoint2: CGPoint(x: 300, y: 5.37))
        mask.addLine(to: CGPoint(x: 300, y: 78))
        mask.addCurve(to: CGPoint(x: 288, y: 90), controlPoint1: CGPoint(x: 300, y: 84.63), controlPoint2: CGPoint(x: 294.63, y: 90))
        mask.addLine(to: CGPoint(x: 12, y: 90))
        mask.addCurve(to: CGPoint(x: 0, y: 78), controlPoint1: CGPoint(x: 5.37, y: 90), controlPoint2: CGPoint(x: 0, y: 84.63))
        mask.addLine(to: CGPoint(x: 0, y: 12))
        mask.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 0, y: 5.37), controlPoint2: CGPoint(x: 5.37, y: 0))
        mask.close()
        context.saveGState()
        mask.usesEvenOddFillRule = true
        UIColor(white: 0.847, alpha: 1).setFill()
        mask.fill()
        context.restoreGState()
        
        /// Mask (Outline Mask)
        context.saveGState()
        mask.addClip()
        
        /// Inactive
        let inactive = UIBezierPath()
        inactive.move(to: CGPoint.zero)
        inactive.addLine(to: CGPoint(x: 300, y: 0))
        inactive.addLine(to: CGPoint(x: 300, y: 90))
        inactive.addLine(to: CGPoint(x: 0, y: 90))
        inactive.addLine(to: CGPoint.zero)
        inactive.close()
        context.saveGState()
        // Warning: Blur effects are not supported.
        inactive.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.021, brightness: 0.918, alpha: 1).setFill()
        inactive.fill()
        context.restoreGState()
        
        /// Active
        let active = UIBezierPath()
        active.move(to: CGPoint.zero)
        active.addLine(to: CGPoint(x: 225, y: 0))
        active.addLine(to: CGPoint(x: 225, y: 90))
        active.addLine(to: CGPoint(x: 0, y: 90))
        active.addLine(to: CGPoint.zero)
        active.close()
        context.saveGState()
        active.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        active.fill()
        context.restoreGState()
        
        context.restoreGState()
        // End Mask (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawControlsProgress_SpinerBig(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 302, height: 90), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 302, height: 90), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 302, y: resizedFrame.height / 90)
        
        /// Rectangle
        let rectangle8 = UIBezierPath()
        rectangle8.move(to: CGPoint(x: 14, y: 20))
        rectangle8.addCurve(to: CGPoint(x: 15, y: 21), controlPoint1: CGPoint(x: 14.55, y: 20), controlPoint2: CGPoint(x: 15, y: 20.45))
        rectangle8.addLine(to: CGPoint(x: 15, y: 27))
        rectangle8.addCurve(to: CGPoint(x: 14, y: 28), controlPoint1: CGPoint(x: 15, y: 27.55), controlPoint2: CGPoint(x: 14.55, y: 28))
        rectangle8.addCurve(to: CGPoint(x: 13, y: 27), controlPoint1: CGPoint(x: 13.45, y: 28), controlPoint2: CGPoint(x: 13, y: 27.55))
        rectangle8.addLine(to: CGPoint(x: 13, y: 21))
        rectangle8.addCurve(to: CGPoint(x: 14, y: 20), controlPoint1: CGPoint(x: 13, y: 20.45), controlPoint2: CGPoint(x: 13.45, y: 20))
        rectangle8.close()
        rectangle8.move(to: CGPoint(x: 11, y: 19.2))
        rectangle8.addCurve(to: CGPoint(x: 11.37, y: 20.56), controlPoint1: CGPoint(x: 11.48, y: 19.47), controlPoint2: CGPoint(x: 11.64, y: 20.08))
        rectangle8.addLine(to: CGPoint(x: 8.37, y: 25.76))
        rectangle8.addCurve(to: CGPoint(x: 7, y: 26.12), controlPoint1: CGPoint(x: 8.09, y: 26.24), controlPoint2: CGPoint(x: 7.48, y: 26.4))
        rectangle8.addCurve(to: CGPoint(x: 6.63, y: 24.76), controlPoint1: CGPoint(x: 6.52, y: 25.85), controlPoint2: CGPoint(x: 6.36, y: 25.24))
        rectangle8.addLine(to: CGPoint(x: 9.63, y: 19.56))
        rectangle8.addCurve(to: CGPoint(x: 11, y: 19.2), controlPoint1: CGPoint(x: 9.91, y: 19.08), controlPoint2: CGPoint(x: 10.52, y: 18.92))
        rectangle8.close()
        rectangle8.move(to: CGPoint(x: 8.8, y: 17))
        rectangle8.addCurve(to: CGPoint(x: 8.44, y: 18.37), controlPoint1: CGPoint(x: 9.08, y: 17.48), controlPoint2: CGPoint(x: 8.92, y: 18.09))
        rectangle8.addLine(to: CGPoint(x: 3.24, y: 21.37))
        rectangle8.addCurve(to: CGPoint(x: 1.88, y: 21), controlPoint1: CGPoint(x: 2.76, y: 21.64), controlPoint2: CGPoint(x: 2.15, y: 21.48))
        rectangle8.addCurve(to: CGPoint(x: 2.24, y: 19.63), controlPoint1: CGPoint(x: 1.6, y: 20.52), controlPoint2: CGPoint(x: 1.76, y: 19.91))
        rectangle8.addLine(to: CGPoint(x: 7.44, y: 16.63))
        rectangle8.addCurve(to: CGPoint(x: 8.8, y: 17), controlPoint1: CGPoint(x: 7.92, y: 16.36), controlPoint2: CGPoint(x: 8.53, y: 16.52))
        rectangle8.close()
        rectangle8.move(to: CGPoint(x: 8, y: 14))
        rectangle8.addCurve(to: CGPoint(x: 7, y: 15), controlPoint1: CGPoint(x: 8, y: 14.55), controlPoint2: CGPoint(x: 7.55, y: 15))
        rectangle8.addLine(to: CGPoint(x: 1, y: 15))
        rectangle8.addCurve(to: CGPoint(x: 0, y: 14), controlPoint1: CGPoint(x: 0.45, y: 15), controlPoint2: CGPoint(x: 0, y: 14.55))
        rectangle8.addCurve(to: CGPoint(x: 1, y: 13), controlPoint1: CGPoint(x: 0, y: 13.45), controlPoint2: CGPoint(x: 0.45, y: 13))
        rectangle8.addLine(to: CGPoint(x: 7, y: 13))
        rectangle8.addCurve(to: CGPoint(x: 8, y: 14), controlPoint1: CGPoint(x: 7.55, y: 13), controlPoint2: CGPoint(x: 8, y: 13.45))
        rectangle8.close()
        rectangle8.move(to: CGPoint(x: 8.8, y: 11))
        rectangle8.addCurve(to: CGPoint(x: 7.44, y: 11.37), controlPoint1: CGPoint(x: 8.53, y: 11.48), controlPoint2: CGPoint(x: 7.92, y: 11.64))
        rectangle8.addLine(to: CGPoint(x: 2.24, y: 8.37))
        rectangle8.addCurve(to: CGPoint(x: 1.88, y: 7), controlPoint1: CGPoint(x: 1.76, y: 8.09), controlPoint2: CGPoint(x: 1.6, y: 7.48))
        rectangle8.addCurve(to: CGPoint(x: 3.24, y: 6.63), controlPoint1: CGPoint(x: 2.15, y: 6.52), controlPoint2: CGPoint(x: 2.76, y: 6.36))
        rectangle8.addLine(to: CGPoint(x: 8.44, y: 9.63))
        rectangle8.addCurve(to: CGPoint(x: 8.8, y: 11), controlPoint1: CGPoint(x: 8.92, y: 9.91), controlPoint2: CGPoint(x: 9.08, y: 10.52))
        rectangle8.close()
        rectangle8.move(to: CGPoint(x: 11, y: 8.8))
        rectangle8.addCurve(to: CGPoint(x: 9.63, y: 8.44), controlPoint1: CGPoint(x: 10.52, y: 9.08), controlPoint2: CGPoint(x: 9.91, y: 8.92))
        rectangle8.addLine(to: CGPoint(x: 6.63, y: 3.24))
        rectangle8.addCurve(to: CGPoint(x: 7, y: 1.88), controlPoint1: CGPoint(x: 6.36, y: 2.76), controlPoint2: CGPoint(x: 6.52, y: 2.15))
        rectangle8.addCurve(to: CGPoint(x: 8.37, y: 2.24), controlPoint1: CGPoint(x: 7.48, y: 1.6), controlPoint2: CGPoint(x: 8.09, y: 1.76))
        rectangle8.addLine(to: CGPoint(x: 11.37, y: 7.44))
        rectangle8.addCurve(to: CGPoint(x: 11, y: 8.8), controlPoint1: CGPoint(x: 11.64, y: 7.92), controlPoint2: CGPoint(x: 11.48, y: 8.53))
        rectangle8.close()
        rectangle8.move(to: CGPoint(x: 14, y: 8))
        rectangle8.addCurve(to: CGPoint(x: 13, y: 7), controlPoint1: CGPoint(x: 13.45, y: 8), controlPoint2: CGPoint(x: 13, y: 7.55))
        rectangle8.addLine(to: CGPoint(x: 13, y: 1))
        rectangle8.addCurve(to: CGPoint(x: 14, y: 0), controlPoint1: CGPoint(x: 13, y: 0.45), controlPoint2: CGPoint(x: 13.45, y: 0))
        rectangle8.addCurve(to: CGPoint(x: 15, y: 1), controlPoint1: CGPoint(x: 14.55, y: 0), controlPoint2: CGPoint(x: 15, y: 0.45))
        rectangle8.addLine(to: CGPoint(x: 15, y: 7))
        rectangle8.addCurve(to: CGPoint(x: 14, y: 8), controlPoint1: CGPoint(x: 15, y: 7.55), controlPoint2: CGPoint(x: 14.55, y: 8))
        rectangle8.close()
        rectangle8.move(to: CGPoint(x: 17, y: 8.8))
        rectangle8.addCurve(to: CGPoint(x: 16.63, y: 7.44), controlPoint1: CGPoint(x: 16.52, y: 8.53), controlPoint2: CGPoint(x: 16.36, y: 7.92))
        rectangle8.addLine(to: CGPoint(x: 19.63, y: 2.24))
        rectangle8.addCurve(to: CGPoint(x: 21, y: 1.88), controlPoint1: CGPoint(x: 19.91, y: 1.76), controlPoint2: CGPoint(x: 20.52, y: 1.6))
        rectangle8.addCurve(to: CGPoint(x: 21.37, y: 3.24), controlPoint1: CGPoint(x: 21.48, y: 2.15), controlPoint2: CGPoint(x: 21.64, y: 2.76))
        rectangle8.addLine(to: CGPoint(x: 18.37, y: 8.44))
        rectangle8.addCurve(to: CGPoint(x: 17, y: 8.8), controlPoint1: CGPoint(x: 18.09, y: 8.92), controlPoint2: CGPoint(x: 17.48, y: 9.08))
        rectangle8.close()
        rectangle8.move(to: CGPoint(x: 19.2, y: 11))
        rectangle8.addCurve(to: CGPoint(x: 19.56, y: 9.63), controlPoint1: CGPoint(x: 18.92, y: 10.52), controlPoint2: CGPoint(x: 19.08, y: 9.91))
        rectangle8.addLine(to: CGPoint(x: 24.76, y: 6.63))
        rectangle8.addCurve(to: CGPoint(x: 26.12, y: 7), controlPoint1: CGPoint(x: 25.24, y: 6.36), controlPoint2: CGPoint(x: 25.85, y: 6.52))
        rectangle8.addCurve(to: CGPoint(x: 25.76, y: 8.37), controlPoint1: CGPoint(x: 26.4, y: 7.48), controlPoint2: CGPoint(x: 26.24, y: 8.09))
        rectangle8.addLine(to: CGPoint(x: 20.56, y: 11.37))
        rectangle8.addCurve(to: CGPoint(x: 19.2, y: 11), controlPoint1: CGPoint(x: 20.08, y: 11.64), controlPoint2: CGPoint(x: 19.47, y: 11.48))
        rectangle8.close()
        rectangle8.move(to: CGPoint(x: 20, y: 14))
        rectangle8.addCurve(to: CGPoint(x: 21, y: 13), controlPoint1: CGPoint(x: 20, y: 13.45), controlPoint2: CGPoint(x: 20.45, y: 13))
        rectangle8.addLine(to: CGPoint(x: 27, y: 13))
        rectangle8.addCurve(to: CGPoint(x: 28, y: 14), controlPoint1: CGPoint(x: 27.55, y: 13), controlPoint2: CGPoint(x: 28, y: 13.45))
        rectangle8.addCurve(to: CGPoint(x: 27, y: 15), controlPoint1: CGPoint(x: 28, y: 14.55), controlPoint2: CGPoint(x: 27.55, y: 15))
        rectangle8.addLine(to: CGPoint(x: 21, y: 15))
        rectangle8.addCurve(to: CGPoint(x: 20, y: 14), controlPoint1: CGPoint(x: 20.45, y: 15), controlPoint2: CGPoint(x: 20, y: 14.55))
        rectangle8.close()
        rectangle8.move(to: CGPoint(x: 19.2, y: 17))
        rectangle8.addCurve(to: CGPoint(x: 20.56, y: 16.63), controlPoint1: CGPoint(x: 19.47, y: 16.52), controlPoint2: CGPoint(x: 20.08, y: 16.36))
        rectangle8.addLine(to: CGPoint(x: 25.76, y: 19.63))
        rectangle8.addCurve(to: CGPoint(x: 26.12, y: 21), controlPoint1: CGPoint(x: 26.24, y: 19.91), controlPoint2: CGPoint(x: 26.4, y: 20.52))
        rectangle8.addCurve(to: CGPoint(x: 24.76, y: 21.37), controlPoint1: CGPoint(x: 25.85, y: 21.48), controlPoint2: CGPoint(x: 25.24, y: 21.64))
        rectangle8.addLine(to: CGPoint(x: 19.56, y: 18.37))
        rectangle8.addCurve(to: CGPoint(x: 19.2, y: 17), controlPoint1: CGPoint(x: 19.08, y: 18.09), controlPoint2: CGPoint(x: 18.92, y: 17.48))
        rectangle8.close()
        rectangle8.move(to: CGPoint(x: 17, y: 19.2))
        rectangle8.addCurve(to: CGPoint(x: 18.37, y: 19.56), controlPoint1: CGPoint(x: 17.48, y: 18.92), controlPoint2: CGPoint(x: 18.09, y: 19.08))
        rectangle8.addLine(to: CGPoint(x: 21.37, y: 24.76))
        rectangle8.addCurve(to: CGPoint(x: 21, y: 26.12), controlPoint1: CGPoint(x: 21.64, y: 25.24), controlPoint2: CGPoint(x: 21.48, y: 25.85))
        rectangle8.addCurve(to: CGPoint(x: 19.63, y: 25.76), controlPoint1: CGPoint(x: 20.52, y: 26.4), controlPoint2: CGPoint(x: 19.91, y: 26.24))
        rectangle8.addLine(to: CGPoint(x: 16.63, y: 20.56))
        rectangle8.addCurve(to: CGPoint(x: 17, y: 19.2), controlPoint1: CGPoint(x: 16.36, y: 20.08), controlPoint2: CGPoint(x: 16.52, y: 19.47))
        rectangle8.close()
        context.saveGState()
        context.translateBy(x: 137, y: 31)
        rectangle8.usesEvenOddFillRule = true
        context.saveGState()
        rectangle8.addClip()
        // Warning: Angular gradients are not supported.
        context.restoreGState()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsProgress_SpinerSmall(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 302, height: 90), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 302, height: 90), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 302, y: resizedFrame.height / 90)
        
        /// Rectangle
        let rectangle8 = UIBezierPath()
        rectangle8.move(to: CGPoint(x: 10, y: 14.29))
        rectangle8.addCurve(to: CGPoint(x: 10.71, y: 15), controlPoint1: CGPoint(x: 10.39, y: 14.29), controlPoint2: CGPoint(x: 10.71, y: 14.61))
        rectangle8.addLine(to: CGPoint(x: 10.71, y: 19.29))
        rectangle8.addCurve(to: CGPoint(x: 10, y: 20), controlPoint1: CGPoint(x: 10.71, y: 19.68), controlPoint2: CGPoint(x: 10.39, y: 20))
        rectangle8.addCurve(to: CGPoint(x: 9.29, y: 19.29), controlPoint1: CGPoint(x: 9.61, y: 20), controlPoint2: CGPoint(x: 9.29, y: 19.68))
        rectangle8.addLine(to: CGPoint(x: 9.29, y: 15))
        rectangle8.addCurve(to: CGPoint(x: 10, y: 14.29), controlPoint1: CGPoint(x: 9.29, y: 14.61), controlPoint2: CGPoint(x: 9.61, y: 14.29))
        rectangle8.close()
        rectangle8.move(to: CGPoint(x: 7.86, y: 13.71))
        rectangle8.addCurve(to: CGPoint(x: 8.12, y: 14.69), controlPoint1: CGPoint(x: 8.2, y: 13.91), controlPoint2: CGPoint(x: 8.32, y: 14.35))
        rectangle8.addLine(to: CGPoint(x: 5.98, y: 18.4))
        rectangle8.addCurve(to: CGPoint(x: 5, y: 18.66), controlPoint1: CGPoint(x: 5.78, y: 18.74), controlPoint2: CGPoint(x: 5.34, y: 18.86))
        rectangle8.addCurve(to: CGPoint(x: 4.74, y: 17.68), controlPoint1: CGPoint(x: 4.66, y: 18.46), controlPoint2: CGPoint(x: 4.54, y: 18.03))
        rectangle8.addLine(to: CGPoint(x: 6.88, y: 13.97))
        rectangle8.addCurve(to: CGPoint(x: 7.86, y: 13.71), controlPoint1: CGPoint(x: 7.08, y: 13.63), controlPoint2: CGPoint(x: 7.52, y: 13.51))
        rectangle8.close()
        rectangle8.move(to: CGPoint(x: 6.29, y: 12.14))
        rectangle8.addCurve(to: CGPoint(x: 6.03, y: 13.12), controlPoint1: CGPoint(x: 6.49, y: 12.48), controlPoint2: CGPoint(x: 6.37, y: 12.92))
        rectangle8.addLine(to: CGPoint(x: 2.32, y: 15.26))
        rectangle8.addCurve(to: CGPoint(x: 1.34, y: 15), controlPoint1: CGPoint(x: 1.97, y: 15.46), controlPoint2: CGPoint(x: 1.54, y: 15.34))
        rectangle8.addCurve(to: CGPoint(x: 1.6, y: 14.02), controlPoint1: CGPoint(x: 1.14, y: 14.66), controlPoint2: CGPoint(x: 1.26, y: 14.22))
        rectangle8.addLine(to: CGPoint(x: 5.31, y: 11.88))
        rectangle8.addCurve(to: CGPoint(x: 6.29, y: 12.14), controlPoint1: CGPoint(x: 5.65, y: 11.68), controlPoint2: CGPoint(x: 6.09, y: 11.8))
        rectangle8.close()
        rectangle8.move(to: CGPoint(x: 5.71, y: 10))
        rectangle8.addCurve(to: CGPoint(x: 5, y: 10.71), controlPoint1: CGPoint(x: 5.71, y: 10.39), controlPoint2: CGPoint(x: 5.39, y: 10.71))
        rectangle8.addLine(to: CGPoint(x: 0.71, y: 10.71))
        rectangle8.addCurve(to: CGPoint(x: 0, y: 10), controlPoint1: CGPoint(x: 0.32, y: 10.71), controlPoint2: CGPoint(x: 0, y: 10.39))
        rectangle8.addCurve(to: CGPoint(x: 0.71, y: 9.29), controlPoint1: CGPoint(x: 0, y: 9.61), controlPoint2: CGPoint(x: 0.32, y: 9.29))
        rectangle8.addLine(to: CGPoint(x: 5, y: 9.29))
        rectangle8.addCurve(to: CGPoint(x: 5.71, y: 10), controlPoint1: CGPoint(x: 5.39, y: 9.29), controlPoint2: CGPoint(x: 5.71, y: 9.61))
        rectangle8.close()
        rectangle8.move(to: CGPoint(x: 6.29, y: 7.86))
        rectangle8.addCurve(to: CGPoint(x: 5.31, y: 8.12), controlPoint1: CGPoint(x: 6.09, y: 8.2), controlPoint2: CGPoint(x: 5.65, y: 8.32))
        rectangle8.addLine(to: CGPoint(x: 1.6, y: 5.98))
        rectangle8.addCurve(to: CGPoint(x: 1.34, y: 5), controlPoint1: CGPoint(x: 1.26, y: 5.78), controlPoint2: CGPoint(x: 1.14, y: 5.34))
        rectangle8.addCurve(to: CGPoint(x: 2.32, y: 4.74), controlPoint1: CGPoint(x: 1.54, y: 4.66), controlPoint2: CGPoint(x: 1.97, y: 4.54))
        rectangle8.addLine(to: CGPoint(x: 6.03, y: 6.88))
        rectangle8.addCurve(to: CGPoint(x: 6.29, y: 7.86), controlPoint1: CGPoint(x: 6.37, y: 7.08), controlPoint2: CGPoint(x: 6.49, y: 7.52))
        rectangle8.close()
        rectangle8.move(to: CGPoint(x: 7.86, y: 6.29))
        rectangle8.addCurve(to: CGPoint(x: 6.88, y: 6.03), controlPoint1: CGPoint(x: 7.52, y: 6.49), controlPoint2: CGPoint(x: 7.08, y: 6.37))
        rectangle8.addLine(to: CGPoint(x: 4.74, y: 2.32))
        rectangle8.addCurve(to: CGPoint(x: 5, y: 1.34), controlPoint1: CGPoint(x: 4.54, y: 1.97), controlPoint2: CGPoint(x: 4.66, y: 1.54))
        rectangle8.addCurve(to: CGPoint(x: 5.98, y: 1.6), controlPoint1: CGPoint(x: 5.34, y: 1.14), controlPoint2: CGPoint(x: 5.78, y: 1.26))
        rectangle8.addLine(to: CGPoint(x: 8.12, y: 5.31))
        rectangle8.addCurve(to: CGPoint(x: 7.86, y: 6.29), controlPoint1: CGPoint(x: 8.32, y: 5.65), controlPoint2: CGPoint(x: 8.2, y: 6.09))
        rectangle8.close()
        rectangle8.move(to: CGPoint(x: 10, y: 5.71))
        rectangle8.addCurve(to: CGPoint(x: 9.29, y: 5), controlPoint1: CGPoint(x: 9.61, y: 5.71), controlPoint2: CGPoint(x: 9.29, y: 5.39))
        rectangle8.addLine(to: CGPoint(x: 9.29, y: 0.71))
        rectangle8.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 9.29, y: 0.32), controlPoint2: CGPoint(x: 9.61, y: 0))
        rectangle8.addCurve(to: CGPoint(x: 10.71, y: 0.71), controlPoint1: CGPoint(x: 10.39, y: 0), controlPoint2: CGPoint(x: 10.71, y: 0.32))
        rectangle8.addLine(to: CGPoint(x: 10.71, y: 5))
        rectangle8.addCurve(to: CGPoint(x: 10, y: 5.71), controlPoint1: CGPoint(x: 10.71, y: 5.39), controlPoint2: CGPoint(x: 10.39, y: 5.71))
        rectangle8.close()
        rectangle8.move(to: CGPoint(x: 12.14, y: 6.29))
        rectangle8.addCurve(to: CGPoint(x: 11.88, y: 5.31), controlPoint1: CGPoint(x: 11.8, y: 6.09), controlPoint2: CGPoint(x: 11.68, y: 5.65))
        rectangle8.addLine(to: CGPoint(x: 14.02, y: 1.6))
        rectangle8.addCurve(to: CGPoint(x: 15, y: 1.34), controlPoint1: CGPoint(x: 14.22, y: 1.26), controlPoint2: CGPoint(x: 14.66, y: 1.14))
        rectangle8.addCurve(to: CGPoint(x: 15.26, y: 2.32), controlPoint1: CGPoint(x: 15.34, y: 1.54), controlPoint2: CGPoint(x: 15.46, y: 1.97))
        rectangle8.addLine(to: CGPoint(x: 13.12, y: 6.03))
        rectangle8.addCurve(to: CGPoint(x: 12.14, y: 6.29), controlPoint1: CGPoint(x: 12.92, y: 6.37), controlPoint2: CGPoint(x: 12.48, y: 6.49))
        rectangle8.close()
        rectangle8.move(to: CGPoint(x: 13.71, y: 7.86))
        rectangle8.addCurve(to: CGPoint(x: 13.97, y: 6.88), controlPoint1: CGPoint(x: 13.51, y: 7.52), controlPoint2: CGPoint(x: 13.63, y: 7.08))
        rectangle8.addLine(to: CGPoint(x: 17.68, y: 4.74))
        rectangle8.addCurve(to: CGPoint(x: 18.66, y: 5), controlPoint1: CGPoint(x: 18.03, y: 4.54), controlPoint2: CGPoint(x: 18.46, y: 4.66))
        rectangle8.addCurve(to: CGPoint(x: 18.4, y: 5.98), controlPoint1: CGPoint(x: 18.86, y: 5.34), controlPoint2: CGPoint(x: 18.74, y: 5.78))
        rectangle8.addLine(to: CGPoint(x: 14.69, y: 8.12))
        rectangle8.addCurve(to: CGPoint(x: 13.71, y: 7.86), controlPoint1: CGPoint(x: 14.35, y: 8.32), controlPoint2: CGPoint(x: 13.91, y: 8.2))
        rectangle8.close()
        rectangle8.move(to: CGPoint(x: 14.29, y: 10))
        rectangle8.addCurve(to: CGPoint(x: 15, y: 9.29), controlPoint1: CGPoint(x: 14.29, y: 9.61), controlPoint2: CGPoint(x: 14.61, y: 9.29))
        rectangle8.addLine(to: CGPoint(x: 19.29, y: 9.29))
        rectangle8.addCurve(to: CGPoint(x: 20, y: 10), controlPoint1: CGPoint(x: 19.68, y: 9.29), controlPoint2: CGPoint(x: 20, y: 9.61))
        rectangle8.addCurve(to: CGPoint(x: 19.29, y: 10.71), controlPoint1: CGPoint(x: 20, y: 10.39), controlPoint2: CGPoint(x: 19.68, y: 10.71))
        rectangle8.addLine(to: CGPoint(x: 15, y: 10.71))
        rectangle8.addCurve(to: CGPoint(x: 14.29, y: 10), controlPoint1: CGPoint(x: 14.61, y: 10.71), controlPoint2: CGPoint(x: 14.29, y: 10.39))
        rectangle8.close()
        rectangle8.move(to: CGPoint(x: 13.71, y: 12.14))
        rectangle8.addCurve(to: CGPoint(x: 14.69, y: 11.88), controlPoint1: CGPoint(x: 13.91, y: 11.8), controlPoint2: CGPoint(x: 14.35, y: 11.68))
        rectangle8.addLine(to: CGPoint(x: 18.4, y: 14.02))
        rectangle8.addCurve(to: CGPoint(x: 18.66, y: 15), controlPoint1: CGPoint(x: 18.74, y: 14.22), controlPoint2: CGPoint(x: 18.86, y: 14.66))
        rectangle8.addCurve(to: CGPoint(x: 17.68, y: 15.26), controlPoint1: CGPoint(x: 18.46, y: 15.34), controlPoint2: CGPoint(x: 18.03, y: 15.46))
        rectangle8.addLine(to: CGPoint(x: 13.97, y: 13.12))
        rectangle8.addCurve(to: CGPoint(x: 13.71, y: 12.14), controlPoint1: CGPoint(x: 13.63, y: 12.92), controlPoint2: CGPoint(x: 13.51, y: 12.48))
        rectangle8.close()
        rectangle8.move(to: CGPoint(x: 12.14, y: 13.71))
        rectangle8.addCurve(to: CGPoint(x: 13.12, y: 13.97), controlPoint1: CGPoint(x: 12.48, y: 13.51), controlPoint2: CGPoint(x: 12.92, y: 13.63))
        rectangle8.addLine(to: CGPoint(x: 15.26, y: 17.68))
        rectangle8.addCurve(to: CGPoint(x: 15, y: 18.66), controlPoint1: CGPoint(x: 15.46, y: 18.03), controlPoint2: CGPoint(x: 15.34, y: 18.46))
        rectangle8.addCurve(to: CGPoint(x: 14.02, y: 18.4), controlPoint1: CGPoint(x: 14.66, y: 18.86), controlPoint2: CGPoint(x: 14.22, y: 18.74))
        rectangle8.addLine(to: CGPoint(x: 11.88, y: 14.69))
        rectangle8.addCurve(to: CGPoint(x: 12.14, y: 13.71), controlPoint1: CGPoint(x: 11.68, y: 14.35), controlPoint2: CGPoint(x: 11.8, y: 13.91))
        rectangle8.close()
        context.saveGState()
        context.translateBy(x: 141, y: 35)
        rectangle8.usesEvenOddFillRule = true
        context.saveGState()
        rectangle8.addClip()
        // Warning: Angular gradients are not supported.
        context.restoreGState()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsSliderProgress(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background
        // Warning: New symbols are not supported.
        
        /// Progress
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsSliderSteps(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background
        // Warning: New symbols are not supported.
        
        /// Steps
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsSlider_Line25(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 280, height: 90), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 280, height: 90), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 280, y: resizedFrame.height / 90)
        
        /// Inactive
        let inactive = UIBezierPath()
        inactive.move(to: CGPoint.zero)
        inactive.addLine(to: CGPoint(x: 280, y: 0))
        inactive.addLine(to: CGPoint(x: 280, y: 2))
        inactive.addLine(to: CGPoint(x: 0, y: 2))
        inactive.addLine(to: CGPoint.zero)
        inactive.close()
        context.saveGState()
        context.translateBy(x: 0, y: 44)
        inactive.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.025, brightness: 0.8, alpha: 1).setFill()
        inactive.fill()
        context.restoreGState()
        
        /// Active
        let active = UIBezierPath()
        active.move(to: CGPoint.zero)
        active.addLine(to: CGPoint(x: 70, y: 0))
        active.addLine(to: CGPoint(x: 70, y: 2))
        active.addLine(to: CGPoint(x: 0, y: 2))
        active.addLine(to: CGPoint.zero)
        active.close()
        context.saveGState()
        context.translateBy(x: 0, y: 44)
        active.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        active.fill()
        context.restoreGState()
        
        /// Knob
        let knob = UIBezierPath()
        knob.move(to: CGPoint(x: 14, y: 0))
        knob.addLine(to: CGPoint(x: 14, y: 0))
        knob.addCurve(to: CGPoint(x: 28, y: 14), controlPoint1: CGPoint(x: 21.73, y: 0), controlPoint2: CGPoint(x: 28, y: 6.27))
        knob.addLine(to: CGPoint(x: 28, y: 14))
        knob.addCurve(to: CGPoint(x: 14, y: 28), controlPoint1: CGPoint(x: 28, y: 21.73), controlPoint2: CGPoint(x: 21.73, y: 28))
        knob.addLine(to: CGPoint(x: 14, y: 28))
        knob.addCurve(to: CGPoint(x: 0, y: 14), controlPoint1: CGPoint(x: 6.27, y: 28), controlPoint2: CGPoint(x: 0, y: 21.73))
        knob.addLine(to: CGPoint(x: 0, y: 14))
        knob.addCurve(to: CGPoint(x: 14, y: 0), controlPoint1: CGPoint(x: 0, y: 6.27), controlPoint2: CGPoint(x: 6.27, y: 0))
        knob.close()
        context.saveGState()
        context.translateBy(x: 55, y: 31)
        knob.usesEvenOddFillRule = true
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -11, dy: -14))
        context.clip(using: .evenOdd)
        context.translateBy(x: -50, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 50, y: 3)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.1).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -11, dy: -12))
        context.clip(using: .evenOdd)
        context.translateBy(x: -50, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 50, y: 1)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.16).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -18, dy: -21))
        context.clip(using: .evenOdd)
        context.translateBy(x: -57, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 57, y: 3)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 8 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.15).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        knob.usesEvenOddFillRule = true
        UIColor.white.setFill()
        knob.fill()
        context.saveGState()
        knob.lineWidth = 1
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
        context.clip(using: .evenOdd)
        UIColor(white: 0, alpha: 0.04).setStroke()
        knob.stroke()
        context.restoreGState()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsSlider_Line50(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 280, height: 90), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 280, height: 90), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 280, y: resizedFrame.height / 90)
        
        /// Inactive
        let inactive = UIBezierPath()
        inactive.move(to: CGPoint.zero)
        inactive.addLine(to: CGPoint(x: 280, y: 0))
        inactive.addLine(to: CGPoint(x: 280, y: 2))
        inactive.addLine(to: CGPoint(x: 0, y: 2))
        inactive.addLine(to: CGPoint.zero)
        inactive.close()
        context.saveGState()
        context.translateBy(x: 0, y: 44)
        inactive.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.025, brightness: 0.8, alpha: 1).setFill()
        inactive.fill()
        context.restoreGState()
        
        /// Active
        let active = UIBezierPath()
        active.move(to: CGPoint.zero)
        active.addLine(to: CGPoint(x: 140, y: 0))
        active.addLine(to: CGPoint(x: 140, y: 2))
        active.addLine(to: CGPoint(x: 0, y: 2))
        active.addLine(to: CGPoint.zero)
        active.close()
        context.saveGState()
        context.translateBy(x: 0, y: 44)
        active.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        active.fill()
        context.restoreGState()
        
        /// Knob
        let knob = UIBezierPath()
        knob.move(to: CGPoint(x: 14, y: 0))
        knob.addLine(to: CGPoint(x: 14, y: 0))
        knob.addCurve(to: CGPoint(x: 28, y: 14), controlPoint1: CGPoint(x: 21.73, y: 0), controlPoint2: CGPoint(x: 28, y: 6.27))
        knob.addLine(to: CGPoint(x: 28, y: 14))
        knob.addCurve(to: CGPoint(x: 14, y: 28), controlPoint1: CGPoint(x: 28, y: 21.73), controlPoint2: CGPoint(x: 21.73, y: 28))
        knob.addLine(to: CGPoint(x: 14, y: 28))
        knob.addCurve(to: CGPoint(x: 0, y: 14), controlPoint1: CGPoint(x: 6.27, y: 28), controlPoint2: CGPoint(x: 0, y: 21.73))
        knob.addLine(to: CGPoint(x: 0, y: 14))
        knob.addCurve(to: CGPoint(x: 14, y: 0), controlPoint1: CGPoint(x: 0, y: 6.27), controlPoint2: CGPoint(x: 6.27, y: 0))
        knob.close()
        context.saveGState()
        context.translateBy(x: 126, y: 31)
        knob.usesEvenOddFillRule = true
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -11, dy: -14))
        context.clip(using: .evenOdd)
        context.translateBy(x: -50, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 50, y: 3)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.1).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -11, dy: -12))
        context.clip(using: .evenOdd)
        context.translateBy(x: -50, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 50, y: 1)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.16).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -18, dy: -21))
        context.clip(using: .evenOdd)
        context.translateBy(x: -57, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 57, y: 3)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 8 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.15).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        knob.usesEvenOddFillRule = true
        UIColor.white.setFill()
        knob.fill()
        context.saveGState()
        knob.lineWidth = 1
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
        context.clip(using: .evenOdd)
        UIColor(white: 0, alpha: 0.04).setStroke()
        knob.stroke()
        context.restoreGState()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsSlider_Line75(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 280, height: 90), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 280, height: 90), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 280, y: resizedFrame.height / 90)
        
        /// Inactive
        let inactive = UIBezierPath()
        inactive.move(to: CGPoint.zero)
        inactive.addLine(to: CGPoint(x: 280, y: 0))
        inactive.addLine(to: CGPoint(x: 280, y: 2))
        inactive.addLine(to: CGPoint(x: 0, y: 2))
        inactive.addLine(to: CGPoint.zero)
        inactive.close()
        context.saveGState()
        context.translateBy(x: 0, y: 44)
        inactive.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.025, brightness: 0.8, alpha: 1).setFill()
        inactive.fill()
        context.restoreGState()
        
        /// Active
        let active = UIBezierPath()
        active.move(to: CGPoint.zero)
        active.addLine(to: CGPoint(x: 210, y: 0))
        active.addLine(to: CGPoint(x: 210, y: 2))
        active.addLine(to: CGPoint(x: 0, y: 2))
        active.addLine(to: CGPoint.zero)
        active.close()
        context.saveGState()
        context.translateBy(x: 0, y: 44)
        active.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        active.fill()
        context.restoreGState()
        
        /// Knob
        let knob = UIBezierPath()
        knob.move(to: CGPoint(x: 14, y: 0))
        knob.addLine(to: CGPoint(x: 14, y: 0))
        knob.addCurve(to: CGPoint(x: 28, y: 14), controlPoint1: CGPoint(x: 21.73, y: 0), controlPoint2: CGPoint(x: 28, y: 6.27))
        knob.addLine(to: CGPoint(x: 28, y: 14))
        knob.addCurve(to: CGPoint(x: 14, y: 28), controlPoint1: CGPoint(x: 28, y: 21.73), controlPoint2: CGPoint(x: 21.73, y: 28))
        knob.addLine(to: CGPoint(x: 14, y: 28))
        knob.addCurve(to: CGPoint(x: 0, y: 14), controlPoint1: CGPoint(x: 6.27, y: 28), controlPoint2: CGPoint(x: 0, y: 21.73))
        knob.addLine(to: CGPoint(x: 0, y: 14))
        knob.addCurve(to: CGPoint(x: 14, y: 0), controlPoint1: CGPoint(x: 0, y: 6.27), controlPoint2: CGPoint(x: 6.27, y: 0))
        knob.close()
        context.saveGState()
        context.translateBy(x: 195, y: 31)
        knob.usesEvenOddFillRule = true
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -11, dy: -14))
        context.clip(using: .evenOdd)
        context.translateBy(x: -50, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 50, y: 3)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.1).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -11, dy: -12))
        context.clip(using: .evenOdd)
        context.translateBy(x: -50, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 50, y: 1)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.16).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -18, dy: -21))
        context.clip(using: .evenOdd)
        context.translateBy(x: -57, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 57, y: 3)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 8 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.15).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        knob.usesEvenOddFillRule = true
        UIColor.white.setFill()
        knob.fill()
        context.saveGState()
        knob.lineWidth = 1
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
        context.clip(using: .evenOdd)
        UIColor(white: 0, alpha: 0.04).setStroke()
        knob.stroke()
        context.restoreGState()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsSlider_Step1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 282, height: 90), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 282, height: 90), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 282, y: resizedFrame.height / 90)
        
        /// Background
        let background = UIBezierPath()
        background.move(to: CGPoint(x: 254, y: 4))
        background.addLine(to: CGPoint(x: 254, y: 0))
        background.addLine(to: CGPoint(x: 256, y: 0))
        background.addLine(to: CGPoint(x: 256, y: 10))
        background.addLine(to: CGPoint(x: 254, y: 10))
        background.addLine(to: CGPoint(x: 254, y: 6))
        background.addLine(to: CGPoint(x: 176, y: 6))
        background.addLine(to: CGPoint(x: 176, y: 10))
        background.addLine(to: CGPoint(x: 174, y: 10))
        background.addLine(to: CGPoint(x: 174, y: 6))
        background.addLine(to: CGPoint(x: 82, y: 6))
        background.addLine(to: CGPoint(x: 82, y: 10))
        background.addLine(to: CGPoint(x: 80, y: 10))
        background.addLine(to: CGPoint(x: 80, y: 6))
        background.addLine(to: CGPoint(x: 2, y: 6))
        background.addLine(to: CGPoint(x: 2, y: 10))
        background.addLine(to: CGPoint(x: 0, y: 10))
        background.addLine(to: CGPoint.zero)
        background.addLine(to: CGPoint(x: 2, y: 0))
        background.addLine(to: CGPoint(x: 2, y: 4))
        background.addLine(to: CGPoint(x: 80, y: 4))
        background.addLine(to: CGPoint(x: 80, y: 0))
        background.addLine(to: CGPoint(x: 82, y: 0))
        background.addLine(to: CGPoint(x: 82, y: 4))
        background.addLine(to: CGPoint(x: 174, y: 4))
        background.addLine(to: CGPoint(x: 174, y: 0))
        background.addLine(to: CGPoint(x: 176, y: 0))
        background.addLine(to: CGPoint(x: 176, y: 4))
        background.addLine(to: CGPoint(x: 254, y: 4))
        background.close()
        context.saveGState()
        context.translateBy(x: 13, y: 40)
        background.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.025, brightness: 0.8, alpha: 1).setFill()
        background.fill()
        context.restoreGState()
        
        /// Knob
        let knob = UIBezierPath()
        knob.move(to: CGPoint(x: 14, y: 0))
        knob.addLine(to: CGPoint(x: 14, y: 0))
        knob.addCurve(to: CGPoint(x: 28, y: 14), controlPoint1: CGPoint(x: 21.73, y: 0), controlPoint2: CGPoint(x: 28, y: 6.27))
        knob.addLine(to: CGPoint(x: 28, y: 14))
        knob.addCurve(to: CGPoint(x: 14, y: 28), controlPoint1: CGPoint(x: 28, y: 21.73), controlPoint2: CGPoint(x: 21.73, y: 28))
        knob.addLine(to: CGPoint(x: 14, y: 28))
        knob.addCurve(to: CGPoint(x: 0, y: 14), controlPoint1: CGPoint(x: 6.27, y: 28), controlPoint2: CGPoint(x: 0, y: 21.73))
        knob.addLine(to: CGPoint(x: 0, y: 14))
        knob.addCurve(to: CGPoint(x: 14, y: 0), controlPoint1: CGPoint(x: 0, y: 6.27), controlPoint2: CGPoint(x: 6.27, y: 0))
        knob.close()
        context.saveGState()
        context.translateBy(x: 0, y: 31)
        knob.usesEvenOddFillRule = true
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -11, dy: -14))
        context.clip(using: .evenOdd)
        context.translateBy(x: -50, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 50, y: 3)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.1).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -11, dy: -12))
        context.clip(using: .evenOdd)
        context.translateBy(x: -50, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 50, y: 1)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.16).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -18, dy: -21))
        context.clip(using: .evenOdd)
        context.translateBy(x: -57, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 57, y: 3)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 8 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.15).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        knob.usesEvenOddFillRule = true
        UIColor.white.setFill()
        knob.fill()
        context.saveGState()
        knob.lineWidth = 1
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
        context.clip(using: .evenOdd)
        UIColor(white: 0, alpha: 0.04).setStroke()
        knob.stroke()
        context.restoreGState()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsSlider_Step2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 282, height: 90), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 282, height: 90), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 282, y: resizedFrame.height / 90)
        
        /// Background
        let background = UIBezierPath()
        background.move(to: CGPoint(x: 254, y: 4))
        background.addLine(to: CGPoint(x: 254, y: 0))
        background.addLine(to: CGPoint(x: 256, y: 0))
        background.addLine(to: CGPoint(x: 256, y: 10))
        background.addLine(to: CGPoint(x: 254, y: 10))
        background.addLine(to: CGPoint(x: 254, y: 6))
        background.addLine(to: CGPoint(x: 176, y: 6))
        background.addLine(to: CGPoint(x: 176, y: 10))
        background.addLine(to: CGPoint(x: 174, y: 10))
        background.addLine(to: CGPoint(x: 174, y: 6))
        background.addLine(to: CGPoint(x: 82, y: 6))
        background.addLine(to: CGPoint(x: 82, y: 10))
        background.addLine(to: CGPoint(x: 80, y: 10))
        background.addLine(to: CGPoint(x: 80, y: 6))
        background.addLine(to: CGPoint(x: 2, y: 6))
        background.addLine(to: CGPoint(x: 2, y: 10))
        background.addLine(to: CGPoint(x: 0, y: 10))
        background.addLine(to: CGPoint.zero)
        background.addLine(to: CGPoint(x: 2, y: 0))
        background.addLine(to: CGPoint(x: 2, y: 4))
        background.addLine(to: CGPoint(x: 80, y: 4))
        background.addLine(to: CGPoint(x: 80, y: 0))
        background.addLine(to: CGPoint(x: 82, y: 0))
        background.addLine(to: CGPoint(x: 82, y: 4))
        background.addLine(to: CGPoint(x: 174, y: 4))
        background.addLine(to: CGPoint(x: 174, y: 0))
        background.addLine(to: CGPoint(x: 176, y: 0))
        background.addLine(to: CGPoint(x: 176, y: 4))
        background.addLine(to: CGPoint(x: 254, y: 4))
        background.close()
        context.saveGState()
        context.translateBy(x: 13, y: 40)
        background.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.025, brightness: 0.8, alpha: 1).setFill()
        background.fill()
        context.restoreGState()
        
        /// Knob
        let knob = UIBezierPath()
        knob.move(to: CGPoint(x: 14, y: 0))
        knob.addLine(to: CGPoint(x: 14, y: 0))
        knob.addCurve(to: CGPoint(x: 28, y: 14), controlPoint1: CGPoint(x: 21.73, y: 0), controlPoint2: CGPoint(x: 28, y: 6.27))
        knob.addLine(to: CGPoint(x: 28, y: 14))
        knob.addCurve(to: CGPoint(x: 14, y: 28), controlPoint1: CGPoint(x: 28, y: 21.73), controlPoint2: CGPoint(x: 21.73, y: 28))
        knob.addLine(to: CGPoint(x: 14, y: 28))
        knob.addCurve(to: CGPoint(x: 0, y: 14), controlPoint1: CGPoint(x: 6.27, y: 28), controlPoint2: CGPoint(x: 0, y: 21.73))
        knob.addLine(to: CGPoint(x: 0, y: 14))
        knob.addCurve(to: CGPoint(x: 14, y: 0), controlPoint1: CGPoint(x: 0, y: 6.27), controlPoint2: CGPoint(x: 6.27, y: 0))
        knob.close()
        context.saveGState()
        context.translateBy(x: 80, y: 31)
        knob.usesEvenOddFillRule = true
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -11, dy: -14))
        context.clip(using: .evenOdd)
        context.translateBy(x: -50, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 50, y: 3)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.1).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -11, dy: -12))
        context.clip(using: .evenOdd)
        context.translateBy(x: -50, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 50, y: 1)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.16).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -18, dy: -21))
        context.clip(using: .evenOdd)
        context.translateBy(x: -57, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 57, y: 3)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 8 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.15).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        knob.usesEvenOddFillRule = true
        UIColor.white.setFill()
        knob.fill()
        context.saveGState()
        knob.lineWidth = 1
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
        context.clip(using: .evenOdd)
        UIColor(white: 0, alpha: 0.04).setStroke()
        knob.stroke()
        context.restoreGState()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsSlider_Step3(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 282, height: 90), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 282, height: 90), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 282, y: resizedFrame.height / 90)
        
        /// Background
        let background = UIBezierPath()
        background.move(to: CGPoint(x: 254, y: 4))
        background.addLine(to: CGPoint(x: 254, y: 0))
        background.addLine(to: CGPoint(x: 256, y: 0))
        background.addLine(to: CGPoint(x: 256, y: 10))
        background.addLine(to: CGPoint(x: 254, y: 10))
        background.addLine(to: CGPoint(x: 254, y: 6))
        background.addLine(to: CGPoint(x: 176, y: 6))
        background.addLine(to: CGPoint(x: 176, y: 10))
        background.addLine(to: CGPoint(x: 174, y: 10))
        background.addLine(to: CGPoint(x: 174, y: 6))
        background.addLine(to: CGPoint(x: 82, y: 6))
        background.addLine(to: CGPoint(x: 82, y: 10))
        background.addLine(to: CGPoint(x: 80, y: 10))
        background.addLine(to: CGPoint(x: 80, y: 6))
        background.addLine(to: CGPoint(x: 2, y: 6))
        background.addLine(to: CGPoint(x: 2, y: 10))
        background.addLine(to: CGPoint(x: 0, y: 10))
        background.addLine(to: CGPoint.zero)
        background.addLine(to: CGPoint(x: 2, y: 0))
        background.addLine(to: CGPoint(x: 2, y: 4))
        background.addLine(to: CGPoint(x: 80, y: 4))
        background.addLine(to: CGPoint(x: 80, y: 0))
        background.addLine(to: CGPoint(x: 82, y: 0))
        background.addLine(to: CGPoint(x: 82, y: 4))
        background.addLine(to: CGPoint(x: 174, y: 4))
        background.addLine(to: CGPoint(x: 174, y: 0))
        background.addLine(to: CGPoint(x: 176, y: 0))
        background.addLine(to: CGPoint(x: 176, y: 4))
        background.addLine(to: CGPoint(x: 254, y: 4))
        background.close()
        context.saveGState()
        context.translateBy(x: 13, y: 40)
        background.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.025, brightness: 0.8, alpha: 1).setFill()
        background.fill()
        context.restoreGState()
        
        /// Knob
        let knob = UIBezierPath()
        knob.move(to: CGPoint(x: 14, y: 0))
        knob.addLine(to: CGPoint(x: 14, y: 0))
        knob.addCurve(to: CGPoint(x: 28, y: 14), controlPoint1: CGPoint(x: 21.73, y: 0), controlPoint2: CGPoint(x: 28, y: 6.27))
        knob.addLine(to: CGPoint(x: 28, y: 14))
        knob.addCurve(to: CGPoint(x: 14, y: 28), controlPoint1: CGPoint(x: 28, y: 21.73), controlPoint2: CGPoint(x: 21.73, y: 28))
        knob.addLine(to: CGPoint(x: 14, y: 28))
        knob.addCurve(to: CGPoint(x: 0, y: 14), controlPoint1: CGPoint(x: 6.27, y: 28), controlPoint2: CGPoint(x: 0, y: 21.73))
        knob.addLine(to: CGPoint(x: 0, y: 14))
        knob.addCurve(to: CGPoint(x: 14, y: 0), controlPoint1: CGPoint(x: 0, y: 6.27), controlPoint2: CGPoint(x: 6.27, y: 0))
        knob.close()
        context.saveGState()
        context.translateBy(x: 174, y: 31)
        knob.usesEvenOddFillRule = true
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -11, dy: -14))
        context.clip(using: .evenOdd)
        context.translateBy(x: -50, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 50, y: 3)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.1).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -11, dy: -12))
        context.clip(using: .evenOdd)
        context.translateBy(x: -50, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 50, y: 1)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.16).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -18, dy: -21))
        context.clip(using: .evenOdd)
        context.translateBy(x: -57, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 57, y: 3)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 8 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.15).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        knob.usesEvenOddFillRule = true
        UIColor.white.setFill()
        knob.fill()
        context.saveGState()
        knob.lineWidth = 1
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
        context.clip(using: .evenOdd)
        UIColor(white: 0, alpha: 0.04).setStroke()
        knob.stroke()
        context.restoreGState()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsSlider_Step4(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 282, height: 90), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 282, height: 90), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 282, y: resizedFrame.height / 90)
        
        /// Background
        let background = UIBezierPath()
        background.move(to: CGPoint(x: 254, y: 4))
        background.addLine(to: CGPoint(x: 254, y: 0))
        background.addLine(to: CGPoint(x: 256, y: 0))
        background.addLine(to: CGPoint(x: 256, y: 10))
        background.addLine(to: CGPoint(x: 254, y: 10))
        background.addLine(to: CGPoint(x: 254, y: 6))
        background.addLine(to: CGPoint(x: 176, y: 6))
        background.addLine(to: CGPoint(x: 176, y: 10))
        background.addLine(to: CGPoint(x: 174, y: 10))
        background.addLine(to: CGPoint(x: 174, y: 6))
        background.addLine(to: CGPoint(x: 82, y: 6))
        background.addLine(to: CGPoint(x: 82, y: 10))
        background.addLine(to: CGPoint(x: 80, y: 10))
        background.addLine(to: CGPoint(x: 80, y: 6))
        background.addLine(to: CGPoint(x: 2, y: 6))
        background.addLine(to: CGPoint(x: 2, y: 10))
        background.addLine(to: CGPoint(x: 0, y: 10))
        background.addLine(to: CGPoint.zero)
        background.addLine(to: CGPoint(x: 2, y: 0))
        background.addLine(to: CGPoint(x: 2, y: 4))
        background.addLine(to: CGPoint(x: 80, y: 4))
        background.addLine(to: CGPoint(x: 80, y: 0))
        background.addLine(to: CGPoint(x: 82, y: 0))
        background.addLine(to: CGPoint(x: 82, y: 4))
        background.addLine(to: CGPoint(x: 174, y: 4))
        background.addLine(to: CGPoint(x: 174, y: 0))
        background.addLine(to: CGPoint(x: 176, y: 0))
        background.addLine(to: CGPoint(x: 176, y: 4))
        background.addLine(to: CGPoint(x: 254, y: 4))
        background.close()
        context.saveGState()
        context.translateBy(x: 13, y: 40)
        background.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.025, brightness: 0.8, alpha: 1).setFill()
        background.fill()
        context.restoreGState()
        
        /// Knob
        let knob = UIBezierPath()
        knob.move(to: CGPoint(x: 14, y: 0))
        knob.addLine(to: CGPoint(x: 14, y: 0))
        knob.addCurve(to: CGPoint(x: 28, y: 14), controlPoint1: CGPoint(x: 21.73, y: 0), controlPoint2: CGPoint(x: 28, y: 6.27))
        knob.addLine(to: CGPoint(x: 28, y: 14))
        knob.addCurve(to: CGPoint(x: 14, y: 28), controlPoint1: CGPoint(x: 28, y: 21.73), controlPoint2: CGPoint(x: 21.73, y: 28))
        knob.addLine(to: CGPoint(x: 14, y: 28))
        knob.addCurve(to: CGPoint(x: 0, y: 14), controlPoint1: CGPoint(x: 6.27, y: 28), controlPoint2: CGPoint(x: 0, y: 21.73))
        knob.addLine(to: CGPoint(x: 0, y: 14))
        knob.addCurve(to: CGPoint(x: 14, y: 0), controlPoint1: CGPoint(x: 0, y: 6.27), controlPoint2: CGPoint(x: 6.27, y: 0))
        knob.close()
        context.saveGState()
        context.translateBy(x: 254, y: 31)
        knob.usesEvenOddFillRule = true
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -11, dy: -14))
        context.clip(using: .evenOdd)
        context.translateBy(x: -50, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 50, y: 3)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.1).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -11, dy: -12))
        context.clip(using: .evenOdd)
        context.translateBy(x: -50, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 50, y: 1)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.16).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -18, dy: -21))
        context.clip(using: .evenOdd)
        context.translateBy(x: -57, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 57, y: 3)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 8 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.15).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        knob.usesEvenOddFillRule = true
        UIColor.white.setFill()
        knob.fill()
        context.saveGState()
        knob.lineWidth = 1
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
        context.clip(using: .evenOdd)
        UIColor(white: 0, alpha: 0.04).setStroke()
        knob.stroke()
        context.restoreGState()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsPageControl2Items(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background
        // Warning: New symbols are not supported.
        
        /// Container
        do {
            context.saveGState()
            context.translateBy(x: 169.5, y: 0)
            
            /// Dot Two
            // Warning: New symbols are not supported.
            
            /// Dot One
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsPageControl3Items(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background
        // Warning: New symbols are not supported.
        
        /// Container
        do {
            context.saveGState()
            context.translateBy(x: 160.5, y: 0)
            
            /// Dot Three
            // Warning: New symbols are not supported.
            
            /// Dot Two
            // Warning: New symbols are not supported.
            
            /// Dot One
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsPageControl4Items(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background
        // Warning: New symbols are not supported.
        
        /// Container
        do {
            context.saveGState()
            context.translateBy(x: 151.5, y: 0)
            
            /// Item Four
            // Warning: New symbols are not supported.
            
            /// Dot Three
            // Warning: New symbols are not supported.
            
            /// Dot Two
            // Warning: New symbols are not supported.
            
            /// Dot One
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsPageControl5Items(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background
        // Warning: New symbols are not supported.
        
        /// Container
        do {
            context.saveGState()
            context.translateBy(x: 142.5, y: 0)
            
            /// Dot Five
            // Warning: New symbols are not supported.
            
            /// Dot Four
            // Warning: New symbols are not supported.
            
            /// Dot Three
            // Warning: New symbols are not supported.
            
            /// Dot Two
            // Warning: New symbols are not supported.
            
            /// Dot One
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsPageControl_ActiveAccent(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 260, height: 80), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 260, height: 80), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 260, y: resizedFrame.height / 80)
        
        /// Dot
        let dot = UIBezierPath()
        dot.move(to: CGPoint(x: 4, y: 8))
        dot.addCurve(to: CGPoint(x: 8, y: 4), controlPoint1: CGPoint(x: 6.21, y: 8), controlPoint2: CGPoint(x: 8, y: 6.21))
        dot.addCurve(to: CGPoint(x: 4, y: 0), controlPoint1: CGPoint(x: 8, y: 1.79), controlPoint2: CGPoint(x: 6.21, y: 0))
        dot.addCurve(to: CGPoint(x: 0, y: 4), controlPoint1: CGPoint(x: 1.79, y: 0), controlPoint2: CGPoint(x: 0, y: 1.79))
        dot.addCurve(to: CGPoint(x: 4, y: 8), controlPoint1: CGPoint(x: 0, y: 6.21), controlPoint2: CGPoint(x: 1.79, y: 8))
        dot.close()
        context.saveGState()
        context.translateBy(x: 126, y: 36)
        dot.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        dot.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsPageControl_Inactive(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 260, height: 80), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 260, height: 80), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 260, y: resizedFrame.height / 80)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.2)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 126, y: 36)
            
            /// Dot
            let dot = UIBezierPath()
            dot.move(to: CGPoint(x: 4, y: 8))
            dot.addCurve(to: CGPoint(x: 8, y: 4), controlPoint1: CGPoint(x: 6.21, y: 8), controlPoint2: CGPoint(x: 8, y: 6.21))
            dot.addCurve(to: CGPoint(x: 4, y: 0), controlPoint1: CGPoint(x: 8, y: 1.79), controlPoint2: CGPoint(x: 6.21, y: 0))
            dot.addCurve(to: CGPoint(x: 0, y: 4), controlPoint1: CGPoint(x: 1.79, y: 0), controlPoint2: CGPoint(x: 0, y: 1.79))
            dot.addCurve(to: CGPoint(x: 4, y: 8), controlPoint1: CGPoint(x: 0, y: 6.21), controlPoint2: CGPoint(x: 1.79, y: 8))
            dot.close()
            context.saveGState()
            dot.usesEvenOddFillRule = true
            UIColor.black.setFill()
            dot.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsPageControl_ActiveGrey(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 260, height: 80), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 260, height: 80), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 260, y: resizedFrame.height / 80)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.5)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 126, y: 36)
            
            /// Dot
            let dot = UIBezierPath()
            dot.move(to: CGPoint(x: 4, y: 8))
            dot.addCurve(to: CGPoint(x: 8, y: 4), controlPoint1: CGPoint(x: 6.21, y: 8), controlPoint2: CGPoint(x: 8, y: 6.21))
            dot.addCurve(to: CGPoint(x: 4, y: 0), controlPoint1: CGPoint(x: 8, y: 1.79), controlPoint2: CGPoint(x: 6.21, y: 0))
            dot.addCurve(to: CGPoint(x: 0, y: 4), controlPoint1: CGPoint(x: 1.79, y: 0), controlPoint2: CGPoint(x: 0, y: 1.79))
            dot.addCurve(to: CGPoint(x: 4, y: 8), controlPoint1: CGPoint(x: 0, y: 6.21), controlPoint2: CGPoint(x: 1.79, y: 8))
            dot.close()
            context.saveGState()
            dot.usesEvenOddFillRule = true
            UIColor.black.setFill()
            dot.fill()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsCalendarDefault(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 285), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 285), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 285)
        
        /// Background
        // Warning: New symbols are not supported.
        
        /// Calendar
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 8)
            
            /// _Assets / Separator / 0pt 0pt
            // Warning: New symbols are not supported.
            
            /// _Assets / Separator / 0pt 0pt
            // Warning: New symbols are not supported.
            
            /// _Assets / Separator / 0pt 0pt
            // Warning: New symbols are not supported.
            
            /// _Assets / Separator / 0pt 0pt
            // Warning: New symbols are not supported.
            
            /// _Assets / Separator / 0pt 0pt
            // Warning: New symbols are not supported.
            
            /// Muted
            context.saveGState()
            context.setAlpha(0.2)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 187, y: 106)
                
                /// Oval
                let oval = UIBezierPath()
                oval.move(to: CGPoint(x: 2.5, y: 5))
                oval.addCurve(to: CGPoint(x: 5, y: 2.5), controlPoint1: CGPoint(x: 3.88, y: 5), controlPoint2: CGPoint(x: 5, y: 3.88))
                oval.addCurve(to: CGPoint(x: 2.5, y: 0), controlPoint1: CGPoint(x: 5, y: 1.12), controlPoint2: CGPoint(x: 3.88, y: 0))
                oval.addCurve(to: CGPoint(x: 0, y: 2.5), controlPoint1: CGPoint(x: 1.12, y: 0), controlPoint2: CGPoint(x: 0, y: 1.12))
                oval.addCurve(to: CGPoint(x: 2.5, y: 5), controlPoint1: CGPoint(x: 0, y: 3.88), controlPoint2: CGPoint(x: 1.12, y: 5))
                oval.close()
                context.saveGState()
                oval.usesEvenOddFillRule = true
                UIColor.black.setFill()
                oval.fill()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Muted
            context.saveGState()
            context.setAlpha(0.2)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 135, y: 156)
                
                /// Oval
                let oval3 = UIBezierPath()
                oval3.move(to: CGPoint(x: 2.5, y: 5))
                oval3.addCurve(to: CGPoint(x: 5, y: 2.5), controlPoint1: CGPoint(x: 3.88, y: 5), controlPoint2: CGPoint(x: 5, y: 3.88))
                oval3.addCurve(to: CGPoint(x: 2.5, y: 0), controlPoint1: CGPoint(x: 5, y: 1.12), controlPoint2: CGPoint(x: 3.88, y: 0))
                oval3.addCurve(to: CGPoint(x: 0, y: 2.5), controlPoint1: CGPoint(x: 1.12, y: 0), controlPoint2: CGPoint(x: 0, y: 1.12))
                oval3.addCurve(to: CGPoint(x: 2.5, y: 5), controlPoint1: CGPoint(x: 0, y: 3.88), controlPoint2: CGPoint(x: 1.12, y: 5))
                oval3.close()
                context.saveGState()
                oval3.usesEvenOddFillRule = true
                UIColor.black.setFill()
                oval3.fill()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Muted
            context.saveGState()
            context.setAlpha(0.2)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 82, y: 260)
                
                /// Oval
                let oval4 = UIBezierPath()
                oval4.move(to: CGPoint(x: 2.5, y: 5))
                oval4.addCurve(to: CGPoint(x: 5, y: 2.5), controlPoint1: CGPoint(x: 3.88, y: 5), controlPoint2: CGPoint(x: 5, y: 3.88))
                oval4.addCurve(to: CGPoint(x: 2.5, y: 0), controlPoint1: CGPoint(x: 5, y: 1.12), controlPoint2: CGPoint(x: 3.88, y: 0))
                oval4.addCurve(to: CGPoint(x: 0, y: 2.5), controlPoint1: CGPoint(x: 1.12, y: 0), controlPoint2: CGPoint(x: 0, y: 1.12))
                oval4.addCurve(to: CGPoint(x: 2.5, y: 5), controlPoint1: CGPoint(x: 0, y: 3.88), controlPoint2: CGPoint(x: 1.12, y: 5))
                oval4.close()
                context.saveGState()
                oval4.usesEvenOddFillRule = true
                UIColor.black.setFill()
                oval4.fill()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Muted
            context.saveGState()
            context.setAlpha(0.2)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 343, y: 260)
                
                /// Oval
                let oval5 = UIBezierPath()
                oval5.move(to: CGPoint(x: 2.5, y: 5))
                oval5.addCurve(to: CGPoint(x: 5, y: 2.5), controlPoint1: CGPoint(x: 3.88, y: 5), controlPoint2: CGPoint(x: 5, y: 3.88))
                oval5.addCurve(to: CGPoint(x: 2.5, y: 0), controlPoint1: CGPoint(x: 5, y: 1.12), controlPoint2: CGPoint(x: 3.88, y: 0))
                oval5.addCurve(to: CGPoint(x: 0, y: 2.5), controlPoint1: CGPoint(x: 1.12, y: 0), controlPoint2: CGPoint(x: 0, y: 1.12))
                oval5.addCurve(to: CGPoint(x: 2.5, y: 5), controlPoint1: CGPoint(x: 0, y: 3.88), controlPoint2: CGPoint(x: 1.12, y: 5))
                oval5.close()
                context.saveGState()
                oval5.usesEvenOddFillRule = true
                UIColor.black.setFill()
                oval5.fill()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Selected
            let selected = UIBezierPath()
            selected.move(to: CGPoint(x: 17, y: 34))
            selected.addCurve(to: CGPoint(x: 34, y: 17), controlPoint1: CGPoint(x: 26.39, y: 34), controlPoint2: CGPoint(x: 34, y: 26.39))
            selected.addCurve(to: CGPoint(x: 17, y: 0), controlPoint1: CGPoint(x: 34, y: 7.61), controlPoint2: CGPoint(x: 26.39, y: 0))
            selected.addCurve(to: CGPoint(x: 0, y: 17), controlPoint1: CGPoint(x: 7.61, y: 0), controlPoint2: CGPoint(x: 0, y: 7.61))
            selected.addCurve(to: CGPoint(x: 17, y: 34), controlPoint1: CGPoint(x: 0, y: 26.39), controlPoint2: CGPoint(x: 7.61, y: 34))
            selected.close()
            context.saveGState()
            context.translateBy(x: 223, y: 173)
            selected.usesEvenOddFillRule = true
            UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
            selected.fill()
            context.restoreGState()
            
            /// 30
            let _30 = NSMutableAttributedString(string: "30")
            _30.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: _30.length))
            _30.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: _30.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                _30.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _30.length))
            }
            context.saveGState()
            _30.draw(at: CGPoint(x: 335, y: 230))
            context.restoreGState()
            
            /// 29
            let _29 = NSMutableAttributedString(string: "29")
            _29.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: _29.length))
            _29.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: _29.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                _29.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _29.length))
            }
            context.saveGState()
            _29.draw(at: CGPoint(x: 283, y: 230))
            context.restoreGState()
            
            /// 28
            let _28 = NSMutableAttributedString(string: "28")
            _28.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: _28.length))
            _28.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: _28.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                _28.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _28.length))
            }
            context.saveGState()
            _28.draw(at: CGPoint(x: 229, y: 230))
            context.restoreGState()
            
            /// 27
            let _27 = NSMutableAttributedString(string: "27")
            _27.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: _27.length))
            _27.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: _27.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                _27.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _27.length))
            }
            context.saveGState()
            _27.draw(at: CGPoint(x: 179, y: 230))
            context.restoreGState()
            
            /// 26
            let _26 = NSMutableAttributedString(string: "26")
            _26.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: _26.length))
            _26.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: _26.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                _26.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _26.length))
            }
            context.saveGState()
            _26.draw(at: CGPoint(x: 126, y: 230))
            context.restoreGState()
            
            /// 25
            let _25 = NSMutableAttributedString(string: "25")
            _25.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: _25.length))
            _25.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: _25.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                _25.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _25.length))
            }
            context.saveGState()
            _25.draw(at: CGPoint(x: 74, y: 230))
            context.restoreGState()
            
            /// 24
            let _24 = NSMutableAttributedString(string: "24")
            _24.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: _24.length))
            _24.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: _24.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                _24.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _24.length))
            }
            context.saveGState()
            _24.draw(at: CGPoint(x: 22, y: 230))
            context.restoreGState()
            
            /// 23
            let _23 = NSMutableAttributedString(string: "23")
            _23.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: _23.length))
            _23.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: _23.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                _23.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _23.length))
            }
            context.saveGState()
            _23.draw(at: CGPoint(x: 335, y: 179))
            context.restoreGState()
            
            /// 22
            let _22 = NSMutableAttributedString(string: "22")
            _22.addAttribute(.font, value: UIFont(name: "SFProText-Semibold", size: 17)!, range: NSRange(location: 0, length: _22.length))
            _22.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: _22.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                _22.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _22.length))
            }
            _22.addAttribute(.foregroundColor, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: _22.length))
            context.saveGState()
            _22.draw(at: CGPoint(x: 283, y: 179))
            context.restoreGState()
            
            /// 21
            let _21 = NSMutableAttributedString(string: "21")
            _21.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: _21.length))
            _21.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: _21.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                _21.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _21.length))
            }
            _21.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: _21.length))
            context.saveGState()
            _21.draw(at: CGPoint(x: 231, y: 179))
            context.restoreGState()
            
            /// 20
            let _20 = NSMutableAttributedString(string: "20")
            _20.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: _20.length))
            _20.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: _20.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                _20.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _20.length))
            }
            context.saveGState()
            _20.draw(at: CGPoint(x: 179, y: 179))
            context.restoreGState()
            
            /// 19
            let _19 = NSMutableAttributedString(string: "19")
            _19.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: _19.length))
            _19.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: _19.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                _19.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _19.length))
            }
            context.saveGState()
            _19.draw(at: CGPoint(x: 128, y: 179))
            context.restoreGState()
            
            /// 18
            let _18 = NSMutableAttributedString(string: "18")
            _18.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: _18.length))
            _18.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: _18.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                _18.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _18.length))
            }
            context.saveGState()
            _18.draw(at: CGPoint(x: 75, y: 179))
            context.restoreGState()
            
            /// 17
            let _17 = NSMutableAttributedString(string: "17")
            _17.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: _17.length))
            _17.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: _17.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                _17.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _17.length))
            }
            context.saveGState()
            _17.draw(at: CGPoint(x: 24, y: 179))
            context.restoreGState()
            
            /// 16
            let _16 = NSMutableAttributedString(string: "16")
            _16.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: _16.length))
            _16.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: _16.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                _16.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _16.length))
            }
            context.saveGState()
            _16.draw(at: CGPoint(x: 337, y: 128))
            context.restoreGState()
            
            /// 15
            let _15 = NSMutableAttributedString(string: "15")
            _15.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: _15.length))
            _15.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: _15.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                _15.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _15.length))
            }
            context.saveGState()
            _15.draw(at: CGPoint(x: 284, y: 128))
            context.restoreGState()
            
            /// 14
            let _14 = NSMutableAttributedString(string: "14")
            _14.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: _14.length))
            _14.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: _14.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                _14.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _14.length))
            }
            context.saveGState()
            _14.draw(at: CGPoint(x: 230, y: 128))
            context.restoreGState()
            
            /// 13
            let _13 = NSMutableAttributedString(string: "13")
            _13.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: _13.length))
            _13.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: _13.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                _13.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _13.length))
            }
            context.saveGState()
            _13.draw(at: CGPoint(x: 180, y: 128))
            context.restoreGState()
            
            /// 12
            let _12 = NSMutableAttributedString(string: "12")
            _12.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: _12.length))
            _12.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: _12.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                _12.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _12.length))
            }
            context.saveGState()
            _12.draw(at: CGPoint(x: 128, y: 128))
            context.restoreGState()
            
            /// 11
            let _11 = NSMutableAttributedString(string: "11")
            _11.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: _11.length))
            _11.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: _11.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                _11.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _11.length))
            }
            context.saveGState()
            _11.draw(at: CGPoint(x: 76, y: 128))
            context.restoreGState()
            
            /// 10
            let _10 = NSMutableAttributedString(string: "10")
            _10.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: _10.length))
            _10.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: _10.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                _10.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _10.length))
            }
            context.saveGState()
            _10.draw(at: CGPoint(x: 23, y: 128))
            context.restoreGState()
            
            /// 9
            let _9 = NSMutableAttributedString(string: "9")
            _9.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: _9.length))
            _9.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: _9.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                _9.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _9.length))
            }
            context.saveGState()
            _9.draw(at: CGPoint(x: 340, y: 77))
            context.restoreGState()
            
            /// 8
            let _8 = NSMutableAttributedString(string: "8")
            _8.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: _8.length))
            _8.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: _8.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                _8.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _8.length))
            }
            context.saveGState()
            _8.draw(at: CGPoint(x: 288, y: 77))
            context.restoreGState()
            
            /// 7
            let _7 = NSMutableAttributedString(string: "7")
            _7.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: _7.length))
            _7.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: _7.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                _7.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _7.length))
            }
            context.saveGState()
            _7.draw(at: CGPoint(x: 235, y: 77))
            context.restoreGState()
            
            /// 6
            let _6 = NSMutableAttributedString(string: "6")
            _6.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: _6.length))
            _6.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: _6.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                _6.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _6.length))
            }
            context.saveGState()
            _6.draw(at: CGPoint(x: 184, y: 77))
            context.restoreGState()
            
            /// 5
            let _5 = NSMutableAttributedString(string: "5")
            _5.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: _5.length))
            _5.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: _5.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                _5.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _5.length))
            }
            context.saveGState()
            _5.draw(at: CGPoint(x: 131, y: 77))
            context.restoreGState()
            
            /// 4
            let _4 = NSMutableAttributedString(string: "4")
            _4.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: _4.length))
            _4.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: _4.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                _4.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _4.length))
            }
            context.saveGState()
            _4.draw(at: CGPoint(x: 79, y: 77))
            context.restoreGState()
            
            /// 3
            let _3 = NSMutableAttributedString(string: "3")
            _3.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: _3.length))
            _3.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: _3.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                _3.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _3.length))
            }
            context.saveGState()
            _3.draw(at: CGPoint(x: 27, y: 77))
            context.restoreGState()
            
            /// 2
            let _2 = NSMutableAttributedString(string: "2")
            _2.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: _2.length))
            _2.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: _2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                _2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _2.length))
            }
            context.saveGState()
            _2.draw(at: CGPoint(x: 341, y: 30))
            context.restoreGState()
            
            /// 1
            let _1 = NSMutableAttributedString(string: "1")
            _1.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: _1.length))
            _1.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: _1.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                _1.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _1.length))
            }
            context.saveGState()
            _1.draw(at: CGPoint(x: 289, y: 30))
            context.restoreGState()
            
            /// Muted
            context.saveGState()
            context.setAlpha(0.4)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 341, y: 0)
                
                /// S
                let s = NSMutableAttributedString(string: "S")
                s.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 10)!, range: NSRange(location: 0, length: s.length))
                s.addAttribute(.kern, value: 0.12, range: NSRange(location: 0, length: s.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    s.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: s.length))
                }
                context.saveGState()
                s.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// F
            let f = NSMutableAttributedString(string: "F")
            f.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 10)!, range: NSRange(location: 0, length: f.length))
            f.addAttribute(.kern, value: 0.12, range: NSRange(location: 0, length: f.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                f.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: f.length))
            }
            context.saveGState()
            f.draw(at: CGPoint(x: 289, y: 0))
            context.restoreGState()
            
            /// T
            let t = NSMutableAttributedString(string: "T")
            t.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 10)!, range: NSRange(location: 0, length: t.length))
            t.addAttribute(.kern, value: 0.12, range: NSRange(location: 0, length: t.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                t.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: t.length))
            }
            context.saveGState()
            t.draw(at: CGPoint(x: 237, y: 0))
            context.restoreGState()
            
            /// W
            let w = NSMutableAttributedString(string: "W")
            w.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 10)!, range: NSRange(location: 0, length: w.length))
            w.addAttribute(.kern, value: 0.12, range: NSRange(location: 0, length: w.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                w.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: w.length))
            }
            context.saveGState()
            w.draw(at: CGPoint(x: 183, y: 0))
            context.restoreGState()
            
            /// T
            let t2 = NSMutableAttributedString(string: "T")
            t2.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 10)!, range: NSRange(location: 0, length: t2.length))
            t2.addAttribute(.kern, value: 0.12, range: NSRange(location: 0, length: t2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                t2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: t2.length))
            }
            context.saveGState()
            t2.draw(at: CGPoint(x: 132, y: 0))
            context.restoreGState()
            
            /// M
            let m = NSMutableAttributedString(string: "M")
            m.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 10)!, range: NSRange(location: 0, length: m.length))
            m.addAttribute(.kern, value: 0.12, range: NSRange(location: 0, length: m.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                m.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: m.length))
            }
            context.saveGState()
            m.draw(at: CGPoint(x: 79, y: 0))
            context.restoreGState()
            
            /// Muted
            context.saveGState()
            context.setAlpha(0.4)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 28, y: 0)
                
                /// S
                let s2 = NSMutableAttributedString(string: "S")
                s2.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 10)!, range: NSRange(location: 0, length: s2.length))
                s2.addAttribute(.kern, value: 0.12, range: NSRange(location: 0, length: s2.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    s2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: s2.length))
                }
                context.saveGState()
                s2.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsCalendarForNavigationBar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 74), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 74), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 74)
        
        /// Background
        // Warning: New symbols are not supported.
        
        /// Container
        do {
            context.saveGState()
            context.translateBy(x: 20, y: 12)
            
            /// Numbers
            do {
                context.saveGState()
                
                /// Selected
                let selected = UIBezierPath()
                selected.move(to: CGPoint(x: 17, y: 34))
                selected.addCurve(to: CGPoint(x: 34, y: 17), controlPoint1: CGPoint(x: 26.39, y: 34), controlPoint2: CGPoint(x: 34, y: 26.39))
                selected.addCurve(to: CGPoint(x: 17, y: 0), controlPoint1: CGPoint(x: 34, y: 7.61), controlPoint2: CGPoint(x: 26.39, y: 0))
                selected.addCurve(to: CGPoint(x: 0, y: 17), controlPoint1: CGPoint(x: 7.61, y: 0), controlPoint2: CGPoint(x: 0, y: 7.61))
                selected.addCurve(to: CGPoint(x: 17, y: 34), controlPoint1: CGPoint(x: 0, y: 26.39), controlPoint2: CGPoint(x: 7.61, y: 34))
                selected.close()
                context.saveGState()
                context.translateBy(x: 201.5, y: 19.5)
                selected.usesEvenOddFillRule = true
                UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
                selected.fill()
                context.restoreGState()
                
                /// Muted
                context.saveGState()
                context.setAlpha(0.4)
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    context.translateBy(x: 314, y: 0)
                    
                    /// 30
                    let _30 = NSMutableAttributedString(string: "30")
                    _30.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: _30.length))
                    _30.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: _30.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .right
                        paragraphStyle.maximumLineHeight = 22
                        paragraphStyle.minimumLineHeight = 22
                        _30.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _30.length))
                    }
                    context.saveGState()
                    _30.draw(at: CGPoint(x: 0, y: 26))
                    context.restoreGState()
                    
                    /// S
                    let s = NSMutableAttributedString(string: "S")
                    s.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 10)!, range: NSRange(location: 0, length: s.length))
                    s.addAttribute(.kern, value: 0.12, range: NSRange(location: 0, length: s.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        s.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: s.length))
                    }
                    context.saveGState()
                    s.draw(at: CGPoint(x: 6, y: 0))
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                
                /// 29
                let _29 = NSMutableAttributedString(string: "29")
                _29.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: _29.length))
                _29.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: _29.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    paragraphStyle.maximumLineHeight = 22
                    paragraphStyle.minimumLineHeight = 22
                    _29.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _29.length))
                }
                context.saveGState()
                _29.draw(at: CGPoint(x: 261, y: 26))
                context.restoreGState()
                
                /// 28
                let _28 = NSMutableAttributedString(string: "28")
                _28.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: _28.length))
                _28.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: _28.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    paragraphStyle.maximumLineHeight = 22
                    paragraphStyle.minimumLineHeight = 22
                    _28.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _28.length))
                }
                _28.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: _28.length))
                context.saveGState()
                _28.draw(at: CGPoint(x: 207, y: 26))
                context.restoreGState()
                
                /// 27
                let _27 = NSMutableAttributedString(string: "27")
                _27.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: _27.length))
                _27.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: _27.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    paragraphStyle.maximumLineHeight = 22
                    paragraphStyle.minimumLineHeight = 22
                    _27.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _27.length))
                }
                context.saveGState()
                _27.draw(at: CGPoint(x: 157, y: 26))
                context.restoreGState()
                
                /// 26
                let _26 = NSMutableAttributedString(string: "26")
                _26.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: _26.length))
                _26.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: _26.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    paragraphStyle.maximumLineHeight = 22
                    paragraphStyle.minimumLineHeight = 22
                    _26.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _26.length))
                }
                context.saveGState()
                _26.draw(at: CGPoint(x: 104, y: 26))
                context.restoreGState()
                
                /// 25
                let _25 = NSMutableAttributedString(string: "25")
                _25.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: _25.length))
                _25.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: _25.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    paragraphStyle.maximumLineHeight = 22
                    paragraphStyle.minimumLineHeight = 22
                    _25.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _25.length))
                }
                context.saveGState()
                _25.draw(at: CGPoint(x: 52, y: 26))
                context.restoreGState()
                
                /// Muted
                context.saveGState()
                context.setAlpha(0.4)
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    
                    /// 24
                    let _24 = NSMutableAttributedString(string: "24")
                    _24.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: _24.length))
                    _24.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: _24.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .right
                        paragraphStyle.maximumLineHeight = 22
                        paragraphStyle.minimumLineHeight = 22
                        _24.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _24.length))
                    }
                    context.saveGState()
                    _24.draw(at: CGPoint(x: 0, y: 26))
                    context.restoreGState()
                    
                    /// S
                    let s2 = NSMutableAttributedString(string: "S")
                    s2.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 10)!, range: NSRange(location: 0, length: s2.length))
                    s2.addAttribute(.kern, value: 0.12, range: NSRange(location: 0, length: s2.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        s2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: s2.length))
                    }
                    context.saveGState()
                    s2.draw(at: CGPoint(x: 7, y: 0))
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Week
            do {
                context.saveGState()
                context.translateBy(x: 58, y: 0)
                
                /// F
                let f = NSMutableAttributedString(string: "F")
                f.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 10)!, range: NSRange(location: 0, length: f.length))
                f.addAttribute(.kern, value: 0.12, range: NSRange(location: 0, length: f.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    f.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: f.length))
                }
                context.saveGState()
                f.draw(at: CGPoint(x: 210, y: 0))
                context.restoreGState()
                
                /// T
                let t = NSMutableAttributedString(string: "T")
                t.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 10)!, range: NSRange(location: 0, length: t.length))
                t.addAttribute(.kern, value: 0.12, range: NSRange(location: 0, length: t.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    t.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: t.length))
                }
                context.saveGState()
                t.draw(at: CGPoint(x: 158, y: 0))
                context.restoreGState()
                
                /// W
                let w = NSMutableAttributedString(string: "W")
                w.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 10)!, range: NSRange(location: 0, length: w.length))
                w.addAttribute(.kern, value: 0.12, range: NSRange(location: 0, length: w.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    w.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: w.length))
                }
                context.saveGState()
                w.draw(at: CGPoint(x: 104, y: 0))
                context.restoreGState()
                
                /// T
                let t2 = NSMutableAttributedString(string: "T")
                t2.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 10)!, range: NSRange(location: 0, length: t2.length))
                t2.addAttribute(.kern, value: 0.12, range: NSRange(location: 0, length: t2.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    t2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: t2.length))
                }
                context.saveGState()
                t2.draw(at: CGPoint(x: 53, y: 0))
                context.restoreGState()
                
                /// M
                let m = NSMutableAttributedString(string: "M")
                m.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 10)!, range: NSRange(location: 0, length: m.length))
                m.addAttribute(.kern, value: 0.12, range: NSRange(location: 0, length: m.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    m.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: m.length))
                }
                context.saveGState()
                m.draw(at: CGPoint.zero)
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsStepper(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 249, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 249, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 249, y: resizedFrame.height / 44)
        
        /// Stepper
        do {
            context.saveGState()
            context.translateBy(x: 80, y: 7)
            
            /// Background
            let background = UIBezierPath()
            background.move(to: CGPoint(x: 44, y: 1))
            background.addLine(to: CGPoint(x: 5.36, y: 1))
            background.addCurve(to: CGPoint(x: 2.74, y: 1.45), controlPoint1: CGPoint(x: 3.84, y: 1), controlPoint2: CGPoint(x: 3.29, y: 1.16))
            background.addCurve(to: CGPoint(x: 1.45, y: 2.74), controlPoint1: CGPoint(x: 2.19, y: 1.75), controlPoint2: CGPoint(x: 1.75, y: 2.19))
            background.addCurve(to: CGPoint(x: 1, y: 5.36), controlPoint1: CGPoint(x: 1.16, y: 3.29), controlPoint2: CGPoint(x: 1, y: 3.84))
            background.addLine(to: CGPoint(x: 1, y: 24.64))
            background.addCurve(to: CGPoint(x: 1.45, y: 27.26), controlPoint1: CGPoint(x: 1, y: 26.16), controlPoint2: CGPoint(x: 1.16, y: 26.71))
            background.addCurve(to: CGPoint(x: 2.74, y: 28.55), controlPoint1: CGPoint(x: 1.75, y: 27.81), controlPoint2: CGPoint(x: 2.19, y: 28.25))
            background.addCurve(to: CGPoint(x: 5.36, y: 29), controlPoint1: CGPoint(x: 3.29, y: 28.84), controlPoint2: CGPoint(x: 3.84, y: 29))
            background.addLine(to: CGPoint(x: 44, y: 29))
            background.addLine(to: CGPoint(x: 44, y: 1))
            background.close()
            background.move(to: CGPoint(x: 45, y: 1))
            background.addLine(to: CGPoint(x: 45, y: 29))
            background.addLine(to: CGPoint(x: 83.64, y: 29))
            background.addCurve(to: CGPoint(x: 86.26, y: 28.55), controlPoint1: CGPoint(x: 85.16, y: 29), controlPoint2: CGPoint(x: 85.71, y: 28.84))
            background.addCurve(to: CGPoint(x: 87.55, y: 27.26), controlPoint1: CGPoint(x: 86.81, y: 28.25), controlPoint2: CGPoint(x: 87.25, y: 27.81))
            background.addCurve(to: CGPoint(x: 88, y: 24.64), controlPoint1: CGPoint(x: 87.84, y: 26.71), controlPoint2: CGPoint(x: 88, y: 26.16))
            background.addLine(to: CGPoint(x: 88, y: 5.36))
            background.addCurve(to: CGPoint(x: 87.55, y: 2.74), controlPoint1: CGPoint(x: 88, y: 3.84), controlPoint2: CGPoint(x: 87.84, y: 3.29))
            background.addCurve(to: CGPoint(x: 86.26, y: 1.45), controlPoint1: CGPoint(x: 87.25, y: 2.19), controlPoint2: CGPoint(x: 86.81, y: 1.75))
            background.addCurve(to: CGPoint(x: 83.64, y: 1), controlPoint1: CGPoint(x: 85.71, y: 1.16), controlPoint2: CGPoint(x: 85.16, y: 1))
            background.addLine(to: CGPoint(x: 45, y: 1))
            background.close()
            background.move(to: CGPoint(x: 5.13, y: 0))
            background.addLine(to: CGPoint(x: 83.87, y: 0))
            background.addCurve(to: CGPoint(x: 86.95, y: 0.53), controlPoint1: CGPoint(x: 85.66, y: 0), controlPoint2: CGPoint(x: 86.3, y: 0.19))
            background.addCurve(to: CGPoint(x: 88.47, y: 2.05), controlPoint1: CGPoint(x: 87.61, y: 0.88), controlPoint2: CGPoint(x: 88.12, y: 1.39))
            background.addCurve(to: CGPoint(x: 89, y: 5.13), controlPoint1: CGPoint(x: 88.81, y: 2.7), controlPoint2: CGPoint(x: 89, y: 3.34))
            background.addLine(to: CGPoint(x: 89, y: 24.87))
            background.addCurve(to: CGPoint(x: 88.47, y: 27.95), controlPoint1: CGPoint(x: 89, y: 26.66), controlPoint2: CGPoint(x: 88.81, y: 27.3))
            background.addCurve(to: CGPoint(x: 86.95, y: 29.47), controlPoint1: CGPoint(x: 88.12, y: 28.61), controlPoint2: CGPoint(x: 87.61, y: 29.12))
            background.addCurve(to: CGPoint(x: 83.87, y: 30), controlPoint1: CGPoint(x: 86.3, y: 29.81), controlPoint2: CGPoint(x: 85.66, y: 30))
            background.addLine(to: CGPoint(x: 5.13, y: 30))
            background.addCurve(to: CGPoint(x: 2.05, y: 29.47), controlPoint1: CGPoint(x: 3.34, y: 30), controlPoint2: CGPoint(x: 2.7, y: 29.81))
            background.addCurve(to: CGPoint(x: 0.53, y: 27.95), controlPoint1: CGPoint(x: 1.39, y: 29.12), controlPoint2: CGPoint(x: 0.88, y: 28.61))
            background.addCurve(to: CGPoint(x: 0, y: 24.87), controlPoint1: CGPoint(x: 0.19, y: 27.3), controlPoint2: CGPoint(x: 0, y: 26.66))
            background.addLine(to: CGPoint(x: 0, y: 5.13))
            background.addCurve(to: CGPoint(x: 0.53, y: 2.05), controlPoint1: CGPoint(x: 0, y: 3.34), controlPoint2: CGPoint(x: 0.19, y: 2.7))
            background.addCurve(to: CGPoint(x: 2.05, y: 0.53), controlPoint1: CGPoint(x: 0.88, y: 1.39), controlPoint2: CGPoint(x: 1.39, y: 0.88))
            background.addCurve(to: CGPoint(x: 5.13, y: 0), controlPoint1: CGPoint(x: 2.7, y: 0.19), controlPoint2: CGPoint(x: 3.34, y: 0))
            background.close()
            context.saveGState()
            background.usesEvenOddFillRule = true
            UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
            background.fill()
            context.restoreGState()
            
            /// Minus
            let minus = UIBezierPath()
            minus.move(to: CGPoint.zero)
            minus.addLine(to: CGPoint(x: 16, y: 0))
            minus.addLine(to: CGPoint(x: 16, y: 2))
            minus.addLine(to: CGPoint(x: 0, y: 2))
            minus.addLine(to: CGPoint.zero)
            minus.close()
            context.saveGState()
            context.translateBy(x: 14, y: 14)
            minus.usesEvenOddFillRule = true
            UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
            minus.fill()
            context.restoreGState()
            
            /// Plus
            let plus = UIBezierPath()
            plus.move(to: CGPoint(x: 9, y: 7))
            plus.addLine(to: CGPoint(x: 16, y: 7))
            plus.addLine(to: CGPoint(x: 16, y: 9))
            plus.addLine(to: CGPoint(x: 9, y: 9))
            plus.addLine(to: CGPoint(x: 9, y: 16))
            plus.addLine(to: CGPoint(x: 7, y: 16))
            plus.addLine(to: CGPoint(x: 7, y: 9))
            plus.addLine(to: CGPoint(x: 0, y: 9))
            plus.addLine(to: CGPoint(x: 0, y: 7))
            plus.addLine(to: CGPoint(x: 7, y: 7))
            plus.addLine(to: CGPoint(x: 7, y: 0))
            plus.addLine(to: CGPoint(x: 9, y: 0))
            plus.addLine(to: CGPoint(x: 9, y: 7))
            plus.close()
            context.saveGState()
            context.translateBy(x: 58, y: 7)
            plus.usesEvenOddFillRule = true
            UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
            plus.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsSwitchOn(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 250, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 250, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 250, y: resizedFrame.height / 44)
        
        /// Container
        do {
            context.saveGState()
            context.translateBy(x: 99, y: 6)
            
            /// Background
            let background = UIBezierPath()
            background.move(to: CGPoint(x: 16, y: 0))
            background.addLine(to: CGPoint(x: 36, y: 0))
            background.addCurve(to: CGPoint(x: 52, y: 16), controlPoint1: CGPoint(x: 44.84, y: 0), controlPoint2: CGPoint(x: 52, y: 7.16))
            background.addLine(to: CGPoint(x: 52, y: 16))
            background.addCurve(to: CGPoint(x: 36, y: 32), controlPoint1: CGPoint(x: 52, y: 24.84), controlPoint2: CGPoint(x: 44.84, y: 32))
            background.addLine(to: CGPoint(x: 16, y: 32))
            background.addCurve(to: CGPoint(x: 0, y: 16), controlPoint1: CGPoint(x: 7.16, y: 32), controlPoint2: CGPoint(x: 0, y: 24.84))
            background.addLine(to: CGPoint(x: 0, y: 16))
            background.addCurve(to: CGPoint(x: 16, y: 0), controlPoint1: CGPoint(x: 0, y: 7.16), controlPoint2: CGPoint(x: 7.16, y: 0))
            background.close()
            context.saveGState()
            background.usesEvenOddFillRule = true
            UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
            background.fill()
            context.restoreGState()
            
            /// Background (Outline Mask)
            context.saveGState()
            background.addClip()
            
            /// • Action Fill
            // Warning: New symbols are not supported.
            
            /// Knob
            let knob = UIBezierPath()
            knob.move(to: CGPoint(x: 14, y: 0))
            knob.addLine(to: CGPoint(x: 14, y: 0))
            knob.addCurve(to: CGPoint(x: 28, y: 14), controlPoint1: CGPoint(x: 21.73, y: 0), controlPoint2: CGPoint(x: 28, y: 6.27))
            knob.addLine(to: CGPoint(x: 28, y: 14))
            knob.addCurve(to: CGPoint(x: 14, y: 28), controlPoint1: CGPoint(x: 28, y: 21.73), controlPoint2: CGPoint(x: 21.73, y: 28))
            knob.addLine(to: CGPoint(x: 14, y: 28))
            knob.addCurve(to: CGPoint(x: 0, y: 14), controlPoint1: CGPoint(x: 6.27, y: 28), controlPoint2: CGPoint(x: 0, y: 21.73))
            knob.addLine(to: CGPoint(x: 0, y: 14))
            knob.addCurve(to: CGPoint(x: 14, y: 0), controlPoint1: CGPoint(x: 0, y: 6.27), controlPoint2: CGPoint(x: 6.27, y: 0))
            knob.close()
            context.saveGState()
            context.translateBy(x: 22, y: 2)
            knob.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -11, dy: -14))
            context.clip(using: .evenOdd)
            context.translateBy(x: -50, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 50, y: 3)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.1).cgColor)
            }
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                knob.fill()
                context.saveGState()
                knob.lineWidth = 1
                context.beginPath()
                context.addPath(knob.cgPath)
                context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
                context.clip(using: .evenOdd)
                UIColor.black.setStroke()
                knob.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.saveGState()
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -11, dy: -12))
            context.clip(using: .evenOdd)
            context.translateBy(x: -50, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 50, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.16).cgColor)
            }
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                knob.fill()
                context.saveGState()
                knob.lineWidth = 1
                context.beginPath()
                context.addPath(knob.cgPath)
                context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
                context.clip(using: .evenOdd)
                UIColor.black.setStroke()
                knob.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.saveGState()
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -18, dy: -21))
            context.clip(using: .evenOdd)
            context.translateBy(x: -57, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 57, y: 3)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 8 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.15).cgColor)
            }
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                knob.fill()
                context.saveGState()
                knob.lineWidth = 1
                context.beginPath()
                context.addPath(knob.cgPath)
                context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
                context.clip(using: .evenOdd)
                UIColor.black.setStroke()
                knob.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            knob.usesEvenOddFillRule = true
            UIColor.white.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor(white: 0, alpha: 0.04).setStroke()
            knob.stroke()
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
            // End Background (Outline Mask)
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsSwitchOff(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 250, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 250, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 250, y: resizedFrame.height / 44)
        
        /// Container
        do {
            context.saveGState()
            context.translateBy(x: 99, y: 6)
            
            /// Background
            let background = UIBezierPath()
            background.move(to: CGPoint(x: 16, y: 0))
            background.addLine(to: CGPoint(x: 36, y: 0))
            background.addCurve(to: CGPoint(x: 52, y: 16), controlPoint1: CGPoint(x: 44.84, y: 0), controlPoint2: CGPoint(x: 52, y: 7.16))
            background.addCurve(to: CGPoint(x: 36, y: 32), controlPoint1: CGPoint(x: 52, y: 24.84), controlPoint2: CGPoint(x: 44.84, y: 32))
            background.addLine(to: CGPoint(x: 16, y: 32))
            background.addCurve(to: CGPoint(x: 0, y: 16), controlPoint1: CGPoint(x: 7.16, y: 32), controlPoint2: CGPoint(x: 0, y: 24.84))
            background.addCurve(to: CGPoint(x: 16, y: 0), controlPoint1: CGPoint(x: 0, y: 7.16), controlPoint2: CGPoint(x: 7.16, y: 0))
            background.close()
            background.move(to: CGPoint(x: 16, y: 2))
            background.addCurve(to: CGPoint(x: 2, y: 16), controlPoint1: CGPoint(x: 8.27, y: 2), controlPoint2: CGPoint(x: 2, y: 8.27))
            background.addCurve(to: CGPoint(x: 16, y: 30), controlPoint1: CGPoint(x: 2, y: 23.73), controlPoint2: CGPoint(x: 8.27, y: 30))
            background.addLine(to: CGPoint(x: 36, y: 30))
            background.addCurve(to: CGPoint(x: 50, y: 16), controlPoint1: CGPoint(x: 43.73, y: 30), controlPoint2: CGPoint(x: 50, y: 23.73))
            background.addCurve(to: CGPoint(x: 36, y: 2), controlPoint1: CGPoint(x: 50, y: 8.27), controlPoint2: CGPoint(x: 43.73, y: 2))
            background.addLine(to: CGPoint(x: 16, y: 2))
            background.close()
            context.saveGState()
            background.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.021, brightness: 0.918, alpha: 1).setFill()
            background.fill()
            context.restoreGState()
            
            /// Knob
            let knob = UIBezierPath()
            knob.move(to: CGPoint(x: 14, y: 0))
            knob.addLine(to: CGPoint(x: 14, y: 0))
            knob.addCurve(to: CGPoint(x: 28, y: 14), controlPoint1: CGPoint(x: 21.73, y: 0), controlPoint2: CGPoint(x: 28, y: 6.27))
            knob.addLine(to: CGPoint(x: 28, y: 14))
            knob.addCurve(to: CGPoint(x: 14, y: 28), controlPoint1: CGPoint(x: 28, y: 21.73), controlPoint2: CGPoint(x: 21.73, y: 28))
            knob.addLine(to: CGPoint(x: 14, y: 28))
            knob.addCurve(to: CGPoint(x: 0, y: 14), controlPoint1: CGPoint(x: 6.27, y: 28), controlPoint2: CGPoint(x: 0, y: 21.73))
            knob.addLine(to: CGPoint(x: 0, y: 14))
            knob.addCurve(to: CGPoint(x: 14, y: 0), controlPoint1: CGPoint(x: 0, y: 6.27), controlPoint2: CGPoint(x: 6.27, y: 0))
            knob.close()
            context.saveGState()
            context.translateBy(x: 2, y: 2)
            knob.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -11, dy: -14))
            context.clip(using: .evenOdd)
            context.translateBy(x: -50, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 50, y: 3)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.1).cgColor)
            }
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                knob.fill()
                context.saveGState()
                knob.lineWidth = 1
                context.beginPath()
                context.addPath(knob.cgPath)
                context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
                context.clip(using: .evenOdd)
                UIColor.black.setStroke()
                knob.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.saveGState()
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -11, dy: -12))
            context.clip(using: .evenOdd)
            context.translateBy(x: -50, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 50, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.16).cgColor)
            }
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                knob.fill()
                context.saveGState()
                knob.lineWidth = 1
                context.beginPath()
                context.addPath(knob.cgPath)
                context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
                context.clip(using: .evenOdd)
                UIColor.black.setStroke()
                knob.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.saveGState()
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -18, dy: -21))
            context.clip(using: .evenOdd)
            context.translateBy(x: -57, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 57, y: 3)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 8 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.15).cgColor)
            }
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                knob.fill()
                context.saveGState()
                knob.lineWidth = 1
                context.beginPath()
                context.addPath(knob.cgPath)
                context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
                context.clip(using: .evenOdd)
                UIColor.black.setStroke()
                knob.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            knob.usesEvenOddFillRule = true
            UIColor.white.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor(white: 0, alpha: 0.04).setStroke()
            knob.stroke()
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsEditMenu2Items(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 55), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 55), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 55)
        
        /// Mask
        let mask = UIBezierPath()
        mask.move(to: CGPoint(x: 179, y: 0))
        mask.addLine(to: CGPoint(x: 179, y: 55))
        mask.addLine(to: CGPoint(x: 10.26, y: 55))
        mask.addCurve(to: CGPoint(x: 4.09, y: 53.93), controlPoint1: CGPoint(x: 6.69, y: 55), controlPoint2: CGPoint(x: 5.4, y: 54.63))
        mask.addCurve(to: CGPoint(x: 1.07, y: 50.91), controlPoint1: CGPoint(x: 2.79, y: 53.23), controlPoint2: CGPoint(x: 1.77, y: 52.21))
        mask.addCurve(to: CGPoint(x: 0, y: 44.74), controlPoint1: CGPoint(x: 0.37, y: 49.6), controlPoint2: CGPoint(x: 0, y: 48.31))
        mask.addLine(to: CGPoint(x: 0, y: 10.26))
        mask.addCurve(to: CGPoint(x: 1.07, y: 4.09), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0.37, y: 5.4))
        mask.addCurve(to: CGPoint(x: 4.09, y: 1.07), controlPoint1: CGPoint(x: 1.77, y: 2.79), controlPoint2: CGPoint(x: 2.79, y: 1.77))
        mask.addCurve(to: CGPoint(x: 10.26, y: 0), controlPoint1: CGPoint(x: 5.4, y: 0.37), controlPoint2: CGPoint(x: 6.69, y: 0))
        mask.addLine(to: CGPoint(x: 179, y: 0))
        mask.close()
        mask.move(to: CGPoint(x: 180, y: 0))
        mask.addLine(to: CGPoint(x: 348.74, y: 0))
        mask.addCurve(to: CGPoint(x: 354.91, y: 1.07), controlPoint1: CGPoint(x: 352.31, y: 0), controlPoint2: CGPoint(x: 353.6, y: 0.37))
        mask.addCurve(to: CGPoint(x: 357.93, y: 4.09), controlPoint1: CGPoint(x: 356.21, y: 1.77), controlPoint2: CGPoint(x: 357.23, y: 2.79))
        mask.addCurve(to: CGPoint(x: 359, y: 10.26), controlPoint1: CGPoint(x: 358.63, y: 5.4), controlPoint2: CGPoint(x: 359, y: 6.69))
        mask.addLine(to: CGPoint(x: 359, y: 44.74))
        mask.addCurve(to: CGPoint(x: 357.93, y: 50.91), controlPoint1: CGPoint(x: 359, y: 48.31), controlPoint2: CGPoint(x: 358.63, y: 49.6))
        mask.addCurve(to: CGPoint(x: 354.91, y: 53.93), controlPoint1: CGPoint(x: 357.23, y: 52.21), controlPoint2: CGPoint(x: 356.21, y: 53.23))
        mask.addCurve(to: CGPoint(x: 348.74, y: 55), controlPoint1: CGPoint(x: 353.6, y: 54.63), controlPoint2: CGPoint(x: 352.31, y: 55))
        mask.addLine(to: CGPoint(x: 180, y: 55))
        mask.addLine(to: CGPoint(x: 180, y: 0))
        mask.close()
        context.saveGState()
        context.translateBy(x: 8, y: 0)
        mask.usesEvenOddFillRule = true
        UIColor(white: 0.18, alpha: 0).setFill()
        mask.fill()
        context.restoreGState()
        
        /// Mask (Outline Mask)
        context.saveGState()
        mask.apply(CGAffineTransform(translationX: 8, y: 0))
        mask.addClip()
        
        /// Pin Position
        // Warning: New symbols are not supported.
        
        /// Item Two
        // Warning: New symbols are not supported.
        
        /// Item One
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Mask (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawControlsEditMenu3Items(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 55), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 55), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 55)
        
        /// Mask
        let mask = UIBezierPath()
        mask.move(to: CGPoint(x: 239, y: 0))
        mask.addLine(to: CGPoint(x: 239, y: 55))
        mask.addLine(to: CGPoint(x: 120, y: 55))
        mask.addLine(to: CGPoint(x: 120, y: 0))
        mask.addLine(to: CGPoint(x: 239, y: 0))
        mask.close()
        mask.move(to: CGPoint(x: 240, y: 0))
        mask.addLine(to: CGPoint(x: 359, y: 0))
        mask.addLine(to: CGPoint(x: 359, y: 55))
        mask.addLine(to: CGPoint(x: 240, y: 55))
        mask.addLine(to: CGPoint(x: 240, y: 0))
        mask.close()
        mask.move(to: CGPoint(x: 119, y: 0))
        mask.addLine(to: CGPoint(x: 119, y: 55))
        mask.addLine(to: CGPoint(x: 0, y: 55))
        mask.addLine(to: CGPoint.zero)
        mask.addLine(to: CGPoint(x: 119, y: 0))
        mask.close()
        context.saveGState()
        context.translateBy(x: 8, y: 0)
        mask.usesEvenOddFillRule = true
        UIColor(white: 0.18, alpha: 0).setFill()
        mask.fill()
        context.restoreGState()
        
        /// Mask (Outline Mask)
        context.saveGState()
        mask.apply(CGAffineTransform(translationX: 8, y: 0))
        mask.addClip()
        
        /// Pin Position
        // Warning: New symbols are not supported.
        
        /// Item Three
        // Warning: New symbols are not supported.
        
        /// Item Two
        // Warning: New symbols are not supported.
        
        /// Item One
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Mask (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawControlsEditMenu4Items(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 55), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 55), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 55)
        
        /// Mask
        let mask = UIBezierPath()
        mask.move(to: CGPoint(x: 268, y: 0))
        mask.addLine(to: CGPoint(x: 268, y: 55))
        mask.addLine(to: CGPoint(x: 180, y: 55))
        mask.addLine(to: CGPoint(x: 180, y: 0))
        mask.addLine(to: CGPoint(x: 268, y: 0))
        mask.close()
        mask.move(to: CGPoint(x: 269, y: 0))
        mask.addLine(to: CGPoint(x: 359, y: 0))
        mask.addLine(to: CGPoint(x: 359, y: 55))
        mask.addLine(to: CGPoint(x: 269, y: 55))
        mask.addLine(to: CGPoint(x: 269, y: 0))
        mask.close()
        mask.move(to: CGPoint(x: 179, y: 0))
        mask.addLine(to: CGPoint(x: 179, y: 55))
        mask.addLine(to: CGPoint(x: 90, y: 55))
        mask.addLine(to: CGPoint(x: 90, y: 0))
        mask.addLine(to: CGPoint(x: 179, y: 0))
        mask.close()
        mask.move(to: CGPoint(x: 89, y: 0))
        mask.addLine(to: CGPoint(x: 89, y: 55))
        mask.addLine(to: CGPoint(x: 0, y: 55))
        mask.addLine(to: CGPoint.zero)
        mask.addLine(to: CGPoint(x: 89, y: 0))
        mask.close()
        context.saveGState()
        context.translateBy(x: 8, y: 0)
        mask.usesEvenOddFillRule = true
        UIColor(white: 0.18, alpha: 0).setFill()
        mask.fill()
        context.restoreGState()
        
        /// Mask (Outline Mask)
        context.saveGState()
        mask.apply(CGAffineTransform(translationX: 8, y: 0))
        mask.addClip()
        
        /// Pin Position
        // Warning: New symbols are not supported.
        
        /// Item Four
        // Warning: New symbols are not supported.
        
        /// Item Three
        // Warning: New symbols are not supported.
        
        /// Item Two
        // Warning: New symbols are not supported.
        
        /// Item One
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Mask (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawControlsEditMenu_Label(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 302, height: 45), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 302, height: 45), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 302, y: resizedFrame.height / 45)
        
        /// ↳ Label
        let label = NSMutableAttributedString(string: "Label")
        label.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        label.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: label.length))
        context.saveGState()
        label.draw(in: CGRect(x: 10, y: 11, width: 282, height: 25))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsEditMenu_BottomLeft(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 304, height: 55), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 304, height: 55), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 304, y: resizedFrame.height / 55)
        
        /// Mask
        let mask = UIBezierPath()
        mask.move(to: CGPoint(x: 14, y: 37))
        mask.addLine(to: CGPoint(x: 10.26, y: 37))
        mask.addCurve(to: CGPoint(x: 4.09, y: 35.93), controlPoint1: CGPoint(x: 6.69, y: 37), controlPoint2: CGPoint(x: 5.4, y: 36.63))
        mask.addCurve(to: CGPoint(x: 1.07, y: 32.91), controlPoint1: CGPoint(x: 2.79, y: 35.23), controlPoint2: CGPoint(x: 1.77, y: 34.21))
        mask.addCurve(to: CGPoint(x: 0, y: 26.74), controlPoint1: CGPoint(x: 0.37, y: 31.6), controlPoint2: CGPoint(x: 0, y: 30.31))
        mask.addLine(to: CGPoint(x: 0, y: 10.26))
        mask.addCurve(to: CGPoint(x: 1.07, y: 4.09), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0.37, y: 5.4))
        mask.addCurve(to: CGPoint(x: 4.09, y: 1.07), controlPoint1: CGPoint(x: 1.77, y: 2.79), controlPoint2: CGPoint(x: 2.79, y: 1.77))
        mask.addCurve(to: CGPoint(x: 10.26, y: 0), controlPoint1: CGPoint(x: 5.4, y: 0.37), controlPoint2: CGPoint(x: 6.69, y: 0))
        mask.addLine(to: CGPoint(x: 293.74, y: 0))
        mask.addCurve(to: CGPoint(x: 299.91, y: 1.07), controlPoint1: CGPoint(x: 297.31, y: 0), controlPoint2: CGPoint(x: 298.6, y: 0.37))
        mask.addCurve(to: CGPoint(x: 302.93, y: 4.09), controlPoint1: CGPoint(x: 301.21, y: 1.77), controlPoint2: CGPoint(x: 302.23, y: 2.79))
        mask.addCurve(to: CGPoint(x: 304, y: 10.26), controlPoint1: CGPoint(x: 303.63, y: 5.4), controlPoint2: CGPoint(x: 304, y: 6.69))
        mask.addLine(to: CGPoint(x: 304, y: 26.74))
        mask.addCurve(to: CGPoint(x: 302.93, y: 32.91), controlPoint1: CGPoint(x: 304, y: 30.31), controlPoint2: CGPoint(x: 303.63, y: 31.6))
        mask.addCurve(to: CGPoint(x: 299.91, y: 35.93), controlPoint1: CGPoint(x: 302.23, y: 34.21), controlPoint2: CGPoint(x: 301.21, y: 35.23))
        mask.addCurve(to: CGPoint(x: 293.74, y: 37), controlPoint1: CGPoint(x: 298.6, y: 36.63), controlPoint2: CGPoint(x: 297.31, y: 37))
        mask.addLine(to: CGPoint(x: 32, y: 37))
        mask.addLine(to: CGPoint(x: 23, y: 46))
        mask.addLine(to: CGPoint(x: 14, y: 37))
        mask.close()
        context.saveGState()
        context.translateBy(x: 0, y: 9)
        // Warning: Blur effects are not supported.
        mask.usesEvenOddFillRule = true
        UIColor(white: 0.18, alpha: 0.88).setFill()
        mask.fill()
        context.restoreGState()
        
        /// Mask (Outline Mask)
        context.saveGState()
        mask.apply(CGAffineTransform(translationX: 0, y: 9))
        mask.addClip()
        
        // Empty.
        
        context.restoreGState()
        // End Mask (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawControlsEditMenu_BottomCenter(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 304, height: 55), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 304, height: 55), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 304, y: resizedFrame.height / 55)
        
        /// Mask
        let mask = UIBezierPath()
        mask.move(to: CGPoint(x: 143, y: 37))
        mask.addLine(to: CGPoint(x: 10.26, y: 37))
        mask.addCurve(to: CGPoint(x: 4.09, y: 35.93), controlPoint1: CGPoint(x: 6.69, y: 37), controlPoint2: CGPoint(x: 5.4, y: 36.63))
        mask.addCurve(to: CGPoint(x: 1.07, y: 32.91), controlPoint1: CGPoint(x: 2.79, y: 35.23), controlPoint2: CGPoint(x: 1.77, y: 34.21))
        mask.addCurve(to: CGPoint(x: 0, y: 26.74), controlPoint1: CGPoint(x: 0.37, y: 31.6), controlPoint2: CGPoint(x: 0, y: 30.31))
        mask.addLine(to: CGPoint(x: 0, y: 10.26))
        mask.addCurve(to: CGPoint(x: 1.07, y: 4.09), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0.37, y: 5.4))
        mask.addCurve(to: CGPoint(x: 4.09, y: 1.07), controlPoint1: CGPoint(x: 1.77, y: 2.79), controlPoint2: CGPoint(x: 2.79, y: 1.77))
        mask.addCurve(to: CGPoint(x: 10.26, y: 0), controlPoint1: CGPoint(x: 5.4, y: 0.37), controlPoint2: CGPoint(x: 6.69, y: 0))
        mask.addLine(to: CGPoint(x: 293.74, y: 0))
        mask.addCurve(to: CGPoint(x: 299.91, y: 1.07), controlPoint1: CGPoint(x: 297.31, y: 0), controlPoint2: CGPoint(x: 298.6, y: 0.37))
        mask.addCurve(to: CGPoint(x: 302.93, y: 4.09), controlPoint1: CGPoint(x: 301.21, y: 1.77), controlPoint2: CGPoint(x: 302.23, y: 2.79))
        mask.addCurve(to: CGPoint(x: 304, y: 10.26), controlPoint1: CGPoint(x: 303.63, y: 5.4), controlPoint2: CGPoint(x: 304, y: 6.69))
        mask.addLine(to: CGPoint(x: 304, y: 26.74))
        mask.addCurve(to: CGPoint(x: 302.93, y: 32.91), controlPoint1: CGPoint(x: 304, y: 30.31), controlPoint2: CGPoint(x: 303.63, y: 31.6))
        mask.addCurve(to: CGPoint(x: 299.91, y: 35.93), controlPoint1: CGPoint(x: 302.23, y: 34.21), controlPoint2: CGPoint(x: 301.21, y: 35.23))
        mask.addCurve(to: CGPoint(x: 293.74, y: 37), controlPoint1: CGPoint(x: 298.6, y: 36.63), controlPoint2: CGPoint(x: 297.31, y: 37))
        mask.addLine(to: CGPoint(x: 161, y: 37))
        mask.addLine(to: CGPoint(x: 152, y: 46))
        mask.addLine(to: CGPoint(x: 143, y: 37))
        mask.close()
        context.saveGState()
        context.translateBy(x: 0, y: 9)
        // Warning: Blur effects are not supported.
        mask.usesEvenOddFillRule = true
        UIColor(white: 0.18, alpha: 0.88).setFill()
        mask.fill()
        context.restoreGState()
        
        /// Mask (Outline Mask)
        context.saveGState()
        mask.apply(CGAffineTransform(translationX: 0, y: 9))
        mask.addClip()
        
        // Empty.
        
        context.restoreGState()
        // End Mask (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawControlsEditMenu_BottomRight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 304, height: 55), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 304, height: 55), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 304, y: resizedFrame.height / 55)
        
        /// Mask
        let mask = UIBezierPath()
        mask.move(to: CGPoint(x: 272, y: 37))
        mask.addLine(to: CGPoint(x: 10.26, y: 37))
        mask.addCurve(to: CGPoint(x: 4.09, y: 35.93), controlPoint1: CGPoint(x: 6.69, y: 37), controlPoint2: CGPoint(x: 5.4, y: 36.63))
        mask.addCurve(to: CGPoint(x: 1.07, y: 32.91), controlPoint1: CGPoint(x: 2.79, y: 35.23), controlPoint2: CGPoint(x: 1.77, y: 34.21))
        mask.addCurve(to: CGPoint(x: 0, y: 26.74), controlPoint1: CGPoint(x: 0.37, y: 31.6), controlPoint2: CGPoint(x: 0, y: 30.31))
        mask.addLine(to: CGPoint(x: 0, y: 10.26))
        mask.addCurve(to: CGPoint(x: 1.07, y: 4.09), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0.37, y: 5.4))
        mask.addCurve(to: CGPoint(x: 4.09, y: 1.07), controlPoint1: CGPoint(x: 1.77, y: 2.79), controlPoint2: CGPoint(x: 2.79, y: 1.77))
        mask.addCurve(to: CGPoint(x: 10.26, y: 0), controlPoint1: CGPoint(x: 5.4, y: 0.37), controlPoint2: CGPoint(x: 6.69, y: 0))
        mask.addLine(to: CGPoint(x: 293.74, y: 0))
        mask.addCurve(to: CGPoint(x: 299.91, y: 1.07), controlPoint1: CGPoint(x: 297.31, y: 0), controlPoint2: CGPoint(x: 298.6, y: 0.37))
        mask.addCurve(to: CGPoint(x: 302.93, y: 4.09), controlPoint1: CGPoint(x: 301.21, y: 1.77), controlPoint2: CGPoint(x: 302.23, y: 2.79))
        mask.addCurve(to: CGPoint(x: 304, y: 10.26), controlPoint1: CGPoint(x: 303.63, y: 5.4), controlPoint2: CGPoint(x: 304, y: 6.69))
        mask.addLine(to: CGPoint(x: 304, y: 26.74))
        mask.addCurve(to: CGPoint(x: 302.93, y: 32.91), controlPoint1: CGPoint(x: 304, y: 30.31), controlPoint2: CGPoint(x: 303.63, y: 31.6))
        mask.addCurve(to: CGPoint(x: 299.91, y: 35.93), controlPoint1: CGPoint(x: 302.23, y: 34.21), controlPoint2: CGPoint(x: 301.21, y: 35.23))
        mask.addCurve(to: CGPoint(x: 293.74, y: 37), controlPoint1: CGPoint(x: 298.6, y: 36.63), controlPoint2: CGPoint(x: 297.31, y: 37))
        mask.addLine(to: CGPoint(x: 290, y: 37))
        mask.addLine(to: CGPoint(x: 281, y: 46))
        mask.addLine(to: CGPoint(x: 272, y: 37))
        mask.close()
        context.saveGState()
        context.translateBy(x: 0, y: 9)
        // Warning: Blur effects are not supported.
        mask.usesEvenOddFillRule = true
        UIColor(white: 0.18, alpha: 0.88).setFill()
        mask.fill()
        context.restoreGState()
        
        /// Mask (Outline Mask)
        context.saveGState()
        mask.apply(CGAffineTransform(translationX: 0, y: 9))
        mask.addClip()
        
        // Empty.
        
        context.restoreGState()
        // End Mask (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawControlsInputOverlay(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 50), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 50)
        
        /// Field
        let field = UIBezierPath()
        field.move(to: CGPoint(x: 10.26, y: 0))
        field.addLine(to: CGPoint(x: 364.74, y: 0))
        field.addCurve(to: CGPoint(x: 370.91, y: 1.07), controlPoint1: CGPoint(x: 368.31, y: 0), controlPoint2: CGPoint(x: 369.6, y: 0.37))
        field.addCurve(to: CGPoint(x: 373.93, y: 4.09), controlPoint1: CGPoint(x: 372.21, y: 1.77), controlPoint2: CGPoint(x: 373.23, y: 2.79))
        field.addCurve(to: CGPoint(x: 375, y: 10.26), controlPoint1: CGPoint(x: 374.63, y: 5.4), controlPoint2: CGPoint(x: 375, y: 6.69))
        field.addLine(to: CGPoint(x: 375, y: 39.74))
        field.addCurve(to: CGPoint(x: 373.93, y: 45.91), controlPoint1: CGPoint(x: 375, y: 43.31), controlPoint2: CGPoint(x: 374.63, y: 44.6))
        field.addCurve(to: CGPoint(x: 370.91, y: 48.93), controlPoint1: CGPoint(x: 373.23, y: 47.21), controlPoint2: CGPoint(x: 372.21, y: 48.23))
        field.addCurve(to: CGPoint(x: 364.74, y: 50), controlPoint1: CGPoint(x: 369.6, y: 49.63), controlPoint2: CGPoint(x: 368.31, y: 50))
        field.addLine(to: CGPoint(x: 10.26, y: 50))
        field.addCurve(to: CGPoint(x: 4.09, y: 48.93), controlPoint1: CGPoint(x: 6.69, y: 50), controlPoint2: CGPoint(x: 5.4, y: 49.63))
        field.addCurve(to: CGPoint(x: 1.07, y: 45.91), controlPoint1: CGPoint(x: 2.79, y: 48.23), controlPoint2: CGPoint(x: 1.77, y: 47.21))
        field.addCurve(to: CGPoint(x: 0, y: 39.74), controlPoint1: CGPoint(x: 0.37, y: 44.6), controlPoint2: CGPoint(x: 0, y: 43.31))
        field.addLine(to: CGPoint(x: 0, y: 10.26))
        field.addCurve(to: CGPoint(x: 1.07, y: 4.09), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0.37, y: 5.4))
        field.addCurve(to: CGPoint(x: 4.09, y: 1.07), controlPoint1: CGPoint(x: 1.77, y: 2.79), controlPoint2: CGPoint(x: 2.79, y: 1.77))
        field.addCurve(to: CGPoint(x: 10.26, y: 0), controlPoint1: CGPoint(x: 5.4, y: 0.37), controlPoint2: CGPoint(x: 6.69, y: 0))
        field.close()
        context.saveGState()
        field.usesEvenOddFillRule = true
        UIColor(white: 0, alpha: 0.08).setFill()
        field.fill()
        context.restoreGState()
        
        /// Right
        // Warning: New symbols are not supported.
        
        /// Input
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsInputTextField(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background
        // Warning: New symbols are not supported.
        
        /// Input
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsInput_LPlaceholder(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 180, height: 80), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 180, height: 80), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 180, y: resizedFrame.height / 80)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.4)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 12, y: 29)
            
            /// ↳ Text
            let text12 = NSMutableAttributedString(string: "Placeholder")
            text12.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: text12.length))
            text12.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: text12.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                text12.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: text12.length))
            }
            context.saveGState()
            text12.draw(in: CGRect(x: 0, y: 0, width: 168, height: 25))
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsInput_LTyping(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 180, height: 80), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 180, height: 80), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 180, y: resizedFrame.height / 80)
        
        /// Container
        do {
            context.saveGState()
            context.translateBy(x: 12, y: 29)
            
            /// ↳ Text
            let text12 = NSMutableAttributedString(string: "Typ")
            text12.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: text12.length))
            text12.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: text12.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                text12.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: text12.length))
            }
            context.saveGState()
            text12.draw(at: CGPoint.zero)
            context.restoreGState()
            
            /// Indicator
            let indicator = UIBezierPath()
            indicator.move(to: CGPoint(x: 1, y: 0))
            indicator.addLine(to: CGPoint(x: 1, y: 0))
            indicator.addCurve(to: CGPoint(x: 2, y: 1), controlPoint1: CGPoint(x: 1.55, y: 0), controlPoint2: CGPoint(x: 2, y: 0.45))
            indicator.addLine(to: CGPoint(x: 2, y: 21))
            indicator.addCurve(to: CGPoint(x: 1, y: 22), controlPoint1: CGPoint(x: 2, y: 21.55), controlPoint2: CGPoint(x: 1.55, y: 22))
            indicator.addLine(to: CGPoint(x: 1, y: 22))
            indicator.addCurve(to: CGPoint(x: 0, y: 21), controlPoint1: CGPoint(x: 0.45, y: 22), controlPoint2: CGPoint(x: 0, y: 21.55))
            indicator.addLine(to: CGPoint(x: 0, y: 1))
            indicator.addCurve(to: CGPoint(x: 1, y: 0), controlPoint1: CGPoint(x: 0, y: 0.45), controlPoint2: CGPoint(x: 0.45, y: 0))
            indicator.close()
            context.saveGState()
            context.translateBy(x: 29, y: 0)
            indicator.usesEvenOddFillRule = true
            UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
            indicator.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsInput_LDefault(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 180, height: 80), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 180, height: 80), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 180, y: resizedFrame.height / 80)
        
        /// ↳ Text
        let text12 = NSMutableAttributedString(string: "Text")
        text12.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: text12.length))
        text12.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: text12.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            text12.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: text12.length))
        }
        context.saveGState()
        text12.draw(in: CGRect(x: 12, y: 29, width: 168, height: 25))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsInput_RShowPass(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 80), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 80), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 80)
        
        /// Shape
        let shape = UIBezierPath()
        shape.move(to: CGPoint(x: 9, y: 0))
        shape.addCurve(to: CGPoint(x: 0.13, y: 5.63), controlPoint1: CGPoint(x: 3.65, y: 0), controlPoint2: CGPoint(x: 0.19, y: 5.53))
        shape.addCurve(to: CGPoint(x: 0, y: 6), controlPoint1: CGPoint(x: 0.05, y: 5.73), controlPoint2: CGPoint(x: 0, y: 5.86))
        shape.addCurve(to: CGPoint(x: 0.1, y: 6.33), controlPoint1: CGPoint(x: 0, y: 6.12), controlPoint2: CGPoint(x: 0.03, y: 6.23))
        shape.addCurve(to: CGPoint(x: 0.1, y: 6.33), controlPoint1: CGPoint(x: 0.1, y: 6.33), controlPoint2: CGPoint(x: 0.1, y: 6.33))
        shape.addCurve(to: CGPoint(x: 9, y: 12), controlPoint1: CGPoint(x: 0.11, y: 6.35), controlPoint2: CGPoint(x: 3.01, y: 12))
        shape.addCurve(to: CGPoint(x: 17.9, y: 6.34), controlPoint1: CGPoint(x: 14.96, y: 12), controlPoint2: CGPoint(x: 17.86, y: 6.41))
        shape.addCurve(to: CGPoint(x: 17.9, y: 6.33), controlPoint1: CGPoint(x: 17.9, y: 6.33), controlPoint2: CGPoint(x: 17.9, y: 6.33))
        shape.addCurve(to: CGPoint(x: 18, y: 6), controlPoint1: CGPoint(x: 17.97, y: 6.23), controlPoint2: CGPoint(x: 18, y: 6.12))
        shape.addCurve(to: CGPoint(x: 17.87, y: 5.63), controlPoint1: CGPoint(x: 18, y: 5.87), controlPoint2: CGPoint(x: 17.95, y: 5.73))
        shape.addCurve(to: CGPoint(x: 17.87, y: 5.63), controlPoint1: CGPoint(x: 17.87, y: 5.63), controlPoint2: CGPoint(x: 17.87, y: 5.63))
        shape.addCurve(to: CGPoint(x: 9, y: 0), controlPoint1: CGPoint(x: 17.81, y: 5.53), controlPoint2: CGPoint(x: 14.35, y: 0))
        shape.close()
        shape.move(to: CGPoint(x: 9, y: 1.8))
        shape.addCurve(to: CGPoint(x: 13.2, y: 6), controlPoint1: CGPoint(x: 11.32, y: 1.8), controlPoint2: CGPoint(x: 13.2, y: 3.68))
        shape.addCurve(to: CGPoint(x: 9, y: 10.2), controlPoint1: CGPoint(x: 13.2, y: 8.32), controlPoint2: CGPoint(x: 11.32, y: 10.2))
        shape.addCurve(to: CGPoint(x: 4.8, y: 6), controlPoint1: CGPoint(x: 6.68, y: 10.2), controlPoint2: CGPoint(x: 4.8, y: 8.32))
        shape.addCurve(to: CGPoint(x: 9, y: 1.8), controlPoint1: CGPoint(x: 4.8, y: 3.68), controlPoint2: CGPoint(x: 6.68, y: 1.8))
        shape.close()
        shape.move(to: CGPoint(x: 9, y: 4.2))
        shape.addCurve(to: CGPoint(x: 7.2, y: 6), controlPoint1: CGPoint(x: 8.01, y: 4.2), controlPoint2: CGPoint(x: 7.2, y: 5.01))
        shape.addCurve(to: CGPoint(x: 9, y: 7.8), controlPoint1: CGPoint(x: 7.2, y: 6.99), controlPoint2: CGPoint(x: 8.01, y: 7.8))
        shape.addCurve(to: CGPoint(x: 10.8, y: 6), controlPoint1: CGPoint(x: 9.99, y: 7.8), controlPoint2: CGPoint(x: 10.8, y: 6.99))
        shape.addCurve(to: CGPoint(x: 9, y: 4.2), controlPoint1: CGPoint(x: 10.8, y: 5.01), controlPoint2: CGPoint(x: 9.99, y: 4.2))
        shape.close()
        context.saveGState()
        context.translateBy(x: 70, y: 34)
        UIColor(white: 0, alpha: 0.2).setFill()
        shape.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsInput_RHidePass(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 80), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 80), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 80)
        
        /// Icon
        let icon = UIBezierPath()
        icon.move(to: CGPoint(x: 10.68, y: 3.85))
        icon.addCurve(to: CGPoint(x: 8.83, y: 3.4), controlPoint1: CGPoint(x: 10.12, y: 3.56), controlPoint2: CGPoint(x: 9.49, y: 3.4))
        icon.addCurve(to: CGPoint(x: 4.71, y: 7.61), controlPoint1: CGPoint(x: 6.55, y: 3.4), controlPoint2: CGPoint(x: 4.71, y: 5.28))
        icon.addCurve(to: CGPoint(x: 5.15, y: 9.51), controlPoint1: CGPoint(x: 4.71, y: 8.3), controlPoint2: CGPoint(x: 4.87, y: 8.94))
        icon.addLine(to: CGPoint(x: 6.89, y: 7.73))
        icon.addCurve(to: CGPoint(x: 6.86, y: 7.41), controlPoint1: CGPoint(x: 6.87, y: 7.62), controlPoint2: CGPoint(x: 6.86, y: 7.52))
        icon.addCurve(to: CGPoint(x: 8.63, y: 5.61), controlPoint1: CGPoint(x: 6.86, y: 6.41), controlPoint2: CGPoint(x: 7.66, y: 5.61))
        icon.addCurve(to: CGPoint(x: 8.94, y: 5.63), controlPoint1: CGPoint(x: 8.74, y: 5.61), controlPoint2: CGPoint(x: 8.84, y: 5.61))
        icon.addLine(to: CGPoint(x: 10.68, y: 3.85))
        icon.close()
        icon.move(to: CGPoint(x: 3.14, y: 11.57))
        icon.addCurve(to: CGPoint(x: 0.1, y: 7.94), controlPoint1: CGPoint(x: 1.1, y: 9.95), controlPoint2: CGPoint(x: 0.1, y: 7.96))
        icon.addLine(to: CGPoint(x: 0.1, y: 7.94))
        icon.addCurve(to: CGPoint(x: 0, y: 7.61), controlPoint1: CGPoint(x: 0.03, y: 7.84), controlPoint2: CGPoint(x: 0, y: 7.73))
        icon.addCurve(to: CGPoint(x: 0.13, y: 7.24), controlPoint1: CGPoint(x: 0, y: 7.48), controlPoint2: CGPoint(x: 0.05, y: 7.34))
        icon.addCurve(to: CGPoint(x: 8.83, y: 1.59), controlPoint1: CGPoint(x: 0.19, y: 7.14), controlPoint2: CGPoint(x: 3.58, y: 1.59))
        icon.addCurve(to: CGPoint(x: 12.15, y: 2.35), controlPoint1: CGPoint(x: 10.04, y: 1.59), controlPoint2: CGPoint(x: 11.15, y: 1.89))
        icon.addLine(to: CGPoint(x: 14.16, y: 0.29))
        icon.addCurve(to: CGPoint(x: 15.54, y: 0.29), controlPoint1: CGPoint(x: 14.54, y: -0.1), controlPoint2: CGPoint(x: 15.16, y: -0.1))
        icon.addCurve(to: CGPoint(x: 15.54, y: 1.71), controlPoint1: CGPoint(x: 15.93, y: 0.69), controlPoint2: CGPoint(x: 15.93, y: 1.32))
        icon.addLine(to: CGPoint(x: 2.85, y: 14.71))
        icon.addCurve(to: CGPoint(x: 1.46, y: 14.71), controlPoint1: CGPoint(x: 2.46, y: 15.1), controlPoint2: CGPoint(x: 1.84, y: 15.1))
        icon.addCurve(to: CGPoint(x: 1.46, y: 13.29), controlPoint1: CGPoint(x: 1.08, y: 14.31), controlPoint2: CGPoint(x: 1.08, y: 13.68))
        icon.addLine(to: CGPoint(x: 3.14, y: 11.57))
        icon.close()
        icon.move(to: CGPoint(x: 8.4, y: 11.91))
        icon.addCurve(to: CGPoint(x: 9.17, y: 11.98), controlPoint1: CGPoint(x: 8.65, y: 11.96), controlPoint2: CGPoint(x: 8.91, y: 11.98))
        icon.addCurve(to: CGPoint(x: 13.29, y: 7.77), controlPoint1: CGPoint(x: 11.45, y: 11.98), controlPoint2: CGPoint(x: 13.29, y: 10.1))
        icon.addCurve(to: CGPoint(x: 13.22, y: 6.98), controlPoint1: CGPoint(x: 13.29, y: 7.5), controlPoint2: CGPoint(x: 13.27, y: 7.23))
        icon.addLine(to: CGPoint(x: 15.54, y: 4.6))
        icon.addCurve(to: CGPoint(x: 17.87, y: 7.39), controlPoint1: CGPoint(x: 17.01, y: 5.98), controlPoint2: CGPoint(x: 17.84, y: 7.34))
        icon.addLine(to: CGPoint(x: 17.87, y: 7.4))
        icon.addCurve(to: CGPoint(x: 18, y: 7.77), controlPoint1: CGPoint(x: 17.96, y: 7.5), controlPoint2: CGPoint(x: 18, y: 7.63))
        icon.addCurve(to: CGPoint(x: 17.9, y: 8.1), controlPoint1: CGPoint(x: 18, y: 7.88), controlPoint2: CGPoint(x: 17.97, y: 8))
        icon.addCurve(to: CGPoint(x: 17.9, y: 8.11), controlPoint1: CGPoint(x: 17.9, y: 8.1), controlPoint2: CGPoint(x: 17.9, y: 8.1))
        icon.addCurve(to: CGPoint(x: 9.17, y: 13.79), controlPoint1: CGPoint(x: 17.86, y: 8.18), controlPoint2: CGPoint(x: 15.02, y: 13.79))
        icon.addCurve(to: CGPoint(x: 6.86, y: 13.48), controlPoint1: CGPoint(x: 8.34, y: 13.79), controlPoint2: CGPoint(x: 7.57, y: 13.68))
        icon.addLine(to: CGPoint(x: 8.4, y: 11.91))
        icon.close()
        context.saveGState()
        context.translateBy(x: 70, y: 32.5)
        UIColor(white: 0, alpha: 0.2).setFill()
        icon.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsInput_TextFieldLPlaceholder(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 178, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 178, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 178, y: resizedFrame.height / 44)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.34)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 16, y: 11)
            
            /// ↳ Text
            let text12 = NSMutableAttributedString(string: "Placeholder")
            text12.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: text12.length))
            text12.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: text12.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                text12.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: text12.length))
            }
            context.saveGState()
            text12.draw(in: CGRect(x: 0, y: 0, width: 162, height: 25))
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsInput_TextFieldLDefault(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 178, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 178, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 178, y: resizedFrame.height / 44)
        
        /// Container
        do {
            context.saveGState()
            context.translateBy(x: 16, y: 11)
            
            /// ↳ Text
            let text12 = NSMutableAttributedString(string: "Text")
            text12.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: text12.length))
            text12.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: text12.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                text12.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: text12.length))
            }
            context.saveGState()
            text12.draw(at: CGPoint.zero)
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsInput_TextFieldLTyping(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 178, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 178, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 178, y: resizedFrame.height / 44)
        
        /// Container
        do {
            context.saveGState()
            context.translateBy(x: 16, y: 11)
            
            /// ↳ Text
            let text12 = NSMutableAttributedString(string: "Text")
            text12.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: text12.length))
            text12.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: text12.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                text12.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: text12.length))
            }
            context.saveGState()
            text12.draw(at: CGPoint.zero)
            context.restoreGState()
            
            /// Indicator
            let indicator = UIBezierPath()
            indicator.move(to: CGPoint(x: 1, y: 0))
            indicator.addLine(to: CGPoint(x: 1, y: 0))
            indicator.addCurve(to: CGPoint(x: 2, y: 1), controlPoint1: CGPoint(x: 1.55, y: 0), controlPoint2: CGPoint(x: 2, y: 0.45))
            indicator.addLine(to: CGPoint(x: 2, y: 21))
            indicator.addCurve(to: CGPoint(x: 1, y: 22), controlPoint1: CGPoint(x: 2, y: 21.55), controlPoint2: CGPoint(x: 1.55, y: 22))
            indicator.addLine(to: CGPoint(x: 1, y: 22))
            indicator.addCurve(to: CGPoint(x: 0, y: 21), controlPoint1: CGPoint(x: 0.45, y: 22), controlPoint2: CGPoint(x: 0, y: 21.55))
            indicator.addLine(to: CGPoint(x: 0, y: 1))
            indicator.addCurve(to: CGPoint(x: 1, y: 0), controlPoint1: CGPoint(x: 0, y: 0.45), controlPoint2: CGPoint(x: 0.45, y: 0))
            indicator.close()
            context.saveGState()
            context.translateBy(x: 32, y: 0)
            indicator.usesEvenOddFillRule = true
            UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
            indicator.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsInputMessage(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 52), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 52), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 52)
        
        /// Background
        // Warning: New symbols are not supported.
        
        /// Input
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsInput_MessageLInput1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 365, height: 52), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 365, height: 52), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 365, y: resizedFrame.height / 52)
        
        /// Field
        let field = UIBezierPath()
        field.move(to: CGPoint(x: 17, y: 0))
        field.addLine(to: CGPoint(x: 284, y: 0))
        field.addCurve(to: CGPoint(x: 301, y: 17), controlPoint1: CGPoint(x: 293.39, y: 0), controlPoint2: CGPoint(x: 301, y: 7.61))
        field.addLine(to: CGPoint(x: 301, y: 19))
        field.addCurve(to: CGPoint(x: 284, y: 36), controlPoint1: CGPoint(x: 301, y: 28.39), controlPoint2: CGPoint(x: 293.39, y: 36))
        field.addLine(to: CGPoint(x: 17, y: 36))
        field.addCurve(to: CGPoint(x: 0, y: 19), controlPoint1: CGPoint(x: 7.61, y: 36), controlPoint2: CGPoint(x: 0, y: 28.39))
        field.addLine(to: CGPoint(x: 0, y: 17))
        field.addCurve(to: CGPoint(x: 17, y: 0), controlPoint1: CGPoint(x: 0, y: 7.61), controlPoint2: CGPoint(x: 7.61, y: 0))
        field.close()
        context.saveGState()
        context.translateBy(x: 16, y: 8)
        field.usesEvenOddFillRule = true
        UIColor(white: 0.98, alpha: 1).setFill()
        field.fill()
        context.saveGState()
        field.lineWidth = 2
        context.beginPath()
        context.addPath(field.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0, alpha: 0.06).setStroke()
        field.stroke()
        context.restoreGState()
        context.restoreGState()
        
        /// Right
        // Warning: New symbols are not supported.
        
        /// Input
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsInput_MessageLInput4(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 365, height: 52), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 365, height: 52), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 365, y: resizedFrame.height / 52)
        
        /// Container
        do {
            context.saveGState()
            context.translateBy(x: 16, y: 8)
            
            /// Field
            let field = UIBezierPath()
            field.move(to: CGPoint(x: 17, y: 0))
            field.addLine(to: CGPoint(x: 316, y: 0))
            field.addCurve(to: CGPoint(x: 333, y: 17), controlPoint1: CGPoint(x: 325.39, y: 0), controlPoint2: CGPoint(x: 333, y: 7.61))
            field.addLine(to: CGPoint(x: 333, y: 19))
            field.addCurve(to: CGPoint(x: 316, y: 36), controlPoint1: CGPoint(x: 333, y: 28.39), controlPoint2: CGPoint(x: 325.39, y: 36))
            field.addLine(to: CGPoint(x: 17, y: 36))
            field.addCurve(to: CGPoint(x: 0, y: 19), controlPoint1: CGPoint(x: 7.61, y: 36), controlPoint2: CGPoint(x: 0, y: 28.39))
            field.addLine(to: CGPoint(x: 0, y: 17))
            field.addCurve(to: CGPoint(x: 17, y: 0), controlPoint1: CGPoint(x: 0, y: 7.61), controlPoint2: CGPoint(x: 7.61, y: 0))
            field.close()
            context.saveGState()
            // Warning: Blur effects are not supported.
            field.usesEvenOddFillRule = true
            UIColor(white: 1, alpha: 0.92).setFill()
            field.fill()
            field.lineWidth = 1
            UIColor(white: 0.953, alpha: 1).setStroke()
            field.stroke()
            context.restoreGState()
            
            /// Right
            // Warning: New symbols are not supported.
            
            /// ↳ Placeholder
            let placeholder = NSMutableAttributedString(string: "Placeholder")
            placeholder.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: placeholder.length))
            placeholder.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: placeholder.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                placeholder.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: placeholder.length))
            }
            context.saveGState()
            placeholder.draw(in: CGRect(x: 12, y: 7, width: 274, height: 25))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsInput_MessageLInput3(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 365, height: 52), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 365, height: 52), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 365, y: resizedFrame.height / 52)
        
        /// Container
        do {
            context.saveGState()
            context.translateBy(x: 16, y: 8)
            
            /// Field
            let field = UIBezierPath()
            field.move(to: CGPoint(x: 17, y: 0))
            field.addLine(to: CGPoint(x: 316, y: 0))
            field.addCurve(to: CGPoint(x: 333, y: 17), controlPoint1: CGPoint(x: 325.39, y: 0), controlPoint2: CGPoint(x: 333, y: 7.61))
            field.addLine(to: CGPoint(x: 333, y: 19))
            field.addCurve(to: CGPoint(x: 316, y: 36), controlPoint1: CGPoint(x: 333, y: 28.39), controlPoint2: CGPoint(x: 325.39, y: 36))
            field.addLine(to: CGPoint(x: 17, y: 36))
            field.addCurve(to: CGPoint(x: 0, y: 19), controlPoint1: CGPoint(x: 7.61, y: 36), controlPoint2: CGPoint(x: 0, y: 28.39))
            field.addLine(to: CGPoint(x: 0, y: 17))
            field.addCurve(to: CGPoint(x: 17, y: 0), controlPoint1: CGPoint(x: 0, y: 7.61), controlPoint2: CGPoint(x: 7.61, y: 0))
            field.close()
            context.saveGState()
            // Warning: Blur effects are not supported.
            field.usesEvenOddFillRule = true
            UIColor(white: 1, alpha: 0.92).setFill()
            field.fill()
            field.lineWidth = 1
            UIColor(white: 0.953, alpha: 1).setStroke()
            field.stroke()
            context.restoreGState()
            
            /// _Assets / Actions / Send
            // Warning: New symbols are not supported.
            
            /// Muted
            context.saveGState()
            context.setAlpha(0.4)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 12, y: 7)
                
                /// ↳ Placeholder
                let placeholder = NSMutableAttributedString(string: "Placeholder")
                placeholder.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: placeholder.length))
                placeholder.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: placeholder.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.maximumLineHeight = 22
                    paragraphStyle.minimumLineHeight = 22
                    placeholder.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: placeholder.length))
                }
                context.saveGState()
                placeholder.draw(in: CGRect(x: 0, y: 0, width: 274, height: 25))
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsInput_MessageLInput2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 365, height: 52), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 365, height: 52), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 365, y: resizedFrame.height / 52)
        
        /// Field
        let field = UIBezierPath()
        field.move(to: CGPoint(x: 17, y: 0))
        field.addLine(to: CGPoint(x: 289, y: 0))
        field.addCurve(to: CGPoint(x: 306, y: 17), controlPoint1: CGPoint(x: 298.39, y: 0), controlPoint2: CGPoint(x: 306, y: 7.61))
        field.addLine(to: CGPoint(x: 306, y: 19))
        field.addCurve(to: CGPoint(x: 289, y: 36), controlPoint1: CGPoint(x: 306, y: 28.39), controlPoint2: CGPoint(x: 298.39, y: 36))
        field.addLine(to: CGPoint(x: 17, y: 36))
        field.addCurve(to: CGPoint(x: 0, y: 19), controlPoint1: CGPoint(x: 7.61, y: 36), controlPoint2: CGPoint(x: 0, y: 28.39))
        field.addLine(to: CGPoint(x: 0, y: 17))
        field.addCurve(to: CGPoint(x: 17, y: 0), controlPoint1: CGPoint(x: 0, y: 7.61), controlPoint2: CGPoint(x: 7.61, y: 0))
        field.close()
        context.saveGState()
        context.translateBy(x: 47, y: 8)
        field.usesEvenOddFillRule = true
        UIColor(white: 0.98, alpha: 1).setFill()
        field.fill()
        context.saveGState()
        field.lineWidth = 2
        context.beginPath()
        context.addPath(field.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0, alpha: 0.06).setStroke()
        field.stroke()
        context.restoreGState()
        context.restoreGState()
        
        /// Field
        let field2 = UIBezierPath()
        field2.move(to: CGPoint(x: 17, y: 0))
        field2.addLine(to: CGPoint(x: 289, y: 0))
        field2.addCurve(to: CGPoint(x: 306, y: 17), controlPoint1: CGPoint(x: 298.39, y: 0), controlPoint2: CGPoint(x: 306, y: 7.61))
        field2.addLine(to: CGPoint(x: 306, y: 19))
        field2.addCurve(to: CGPoint(x: 289, y: 36), controlPoint1: CGPoint(x: 306, y: 28.39), controlPoint2: CGPoint(x: 298.39, y: 36))
        field2.addLine(to: CGPoint(x: 17, y: 36))
        field2.addCurve(to: CGPoint(x: 0, y: 19), controlPoint1: CGPoint(x: 7.61, y: 36), controlPoint2: CGPoint(x: 0, y: 28.39))
        field2.addLine(to: CGPoint(x: 0, y: 17))
        field2.addCurve(to: CGPoint(x: 17, y: 0), controlPoint1: CGPoint(x: 0, y: 7.61), controlPoint2: CGPoint(x: 7.61, y: 0))
        field2.close()
        context.saveGState()
        context.translateBy(x: 47, y: 8)
        field2.usesEvenOddFillRule = true
        UIColor(white: 0.98, alpha: 1).setFill()
        field2.fill()
        context.saveGState()
        field2.lineWidth = 2
        context.beginPath()
        context.addPath(field2.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0, alpha: 0.06).setStroke()
        field2.stroke()
        context.restoreGState()
        context.restoreGState()
        
        /// Input
        // Warning: New symbols are not supported.
        
        /// Right
        // Warning: New symbols are not supported.
        
        /// Left
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsDatePicker(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 177), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 177), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 177)
        
        /// Background
        // Warning: New symbols are not supported.
        
        /// Date Picker
        do {
            context.saveGState()
            
            /// Mask
            let mask = UIBezierPath()
            mask.move(to: CGPoint.zero)
            mask.addLine(to: CGPoint(x: 0, y: 177))
            mask.addLine(to: CGPoint(x: 375, y: 177))
            mask.addLine(to: CGPoint(x: 375, y: 0))
            mask.addLine(to: CGPoint.zero)
            mask.close()
            
            /// Mask (Outline Mask)
            context.saveGState()
            mask.addClip()
            
            /// Lines
            let lines = UIBezierPath()
            lines.move(to: CGPoint.zero)
            lines.addLine(to: CGPoint(x: 0, y: 35))
            lines.addLine(to: CGPoint(x: 375, y: 35))
            lines.addLine(to: CGPoint(x: 375, y: 0))
            lines.addLine(to: CGPoint.zero)
            lines.close()
            context.saveGState()
            context.translateBy(x: 0, y: 71)
            lines.usesEvenOddFillRule = true
            context.saveGState()
            UIRectClip(lines.bounds)
            context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
            context.setAlpha(0.16)
            context.beginTransparencyLayer(in: lines.bounds, auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                lines.fill()
                context.setBlendMode(.destinationOut)
                context.beginTransparencyLayer(in: lines.bounds, auxiliaryInfo: nil)
                do {
                    context.translateBy(x: -375, y: 0)
                    do {
                        let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                        let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                        let baseOffset = context.convertToDeviceSpace(CGPoint(x: 375, y: -1)).applying(baseTransform)
                        let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                        let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                        context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                    }
                    UIColor.black.setFill()
                    lines.fill()
                }
                context.endTransparencyLayer()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.saveGState()
            UIRectClip(lines.bounds)
            context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
            context.setAlpha(0.16)
            context.beginTransparencyLayer(in: lines.bounds, auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                lines.fill()
                context.setBlendMode(.destinationOut)
                context.beginTransparencyLayer(in: lines.bounds, auxiliaryInfo: nil)
                do {
                    context.translateBy(x: -375, y: 0)
                    do {
                        let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                        let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                        let baseOffset = context.convertToDeviceSpace(CGPoint(x: 375, y: 1)).applying(baseTransform)
                        let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                        let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                        context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                    }
                    UIColor.black.setFill()
                    lines.fill()
                }
                context.endTransparencyLayer()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            /// Tue 8 Sep + 9 + 59
            context.saveGState()
            context.setAlpha(0.4)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 85, y: 49)
                
                /// Tue 8 Sep
                let tue8Sep = UIBezierPath()
                tue8Sep.move(to: CGPoint(x: 6.41, y: 2.01))
                tue8Sep.addLine(to: CGPoint(x: 11.03, y: 2.01))
                tue8Sep.addLine(to: CGPoint(x: 11.14, y: 0.35))
                tue8Sep.addLine(to: CGPoint(x: 0.13, y: 0.35))
                tue8Sep.addLine(to: CGPoint(x: 0, y: 2.01))
                tue8Sep.addLine(to: CGPoint(x: 4.62, y: 2.01))
                tue8Sep.addLine(to: CGPoint(x: 3.67, y: 15.15))
                tue8Sep.addLine(to: CGPoint(x: 5.47, y: 15.15))
                tue8Sep.addLine(to: CGPoint(x: 6.41, y: 2.01))
                tue8Sep.close()
                tue8Sep.move(to: CGPoint(x: 18.73, y: 4.09))
                tue8Sep.addLine(to: CGPoint(x: 18.32, y: 10.63))
                tue8Sep.addCurve(to: CGPoint(x: 15.18, y: 13.73), controlPoint1: CGPoint(x: 18.2, y: 12.57), controlPoint2: CGPoint(x: 17.09, y: 13.73))
                tue8Sep.addCurve(to: CGPoint(x: 12.93, y: 10.82), controlPoint1: CGPoint(x: 13.46, y: 13.73), controlPoint2: CGPoint(x: 12.8, y: 12.81))
                tue8Sep.addLine(to: CGPoint(x: 13.38, y: 4.09))
                tue8Sep.addLine(to: CGPoint(x: 11.67, y: 4.09))
                tue8Sep.addLine(to: CGPoint(x: 11.18, y: 11.25))
                tue8Sep.addCurve(to: CGPoint(x: 14.6, y: 15.34), controlPoint1: CGPoint(x: 11.01, y: 13.86), controlPoint2: CGPoint(x: 12.17, y: 15.34))
                tue8Sep.addCurve(to: CGPoint(x: 18.07, y: 13.41), controlPoint1: CGPoint(x: 16.25, y: 15.34), controlPoint2: CGPoint(x: 17.45, y: 14.64))
                tue8Sep.addLine(to: CGPoint(x: 18.23, y: 13.41))
                tue8Sep.addLine(to: CGPoint(x: 18.12, y: 15.15))
                tue8Sep.addLine(to: CGPoint(x: 19.77, y: 15.15))
                tue8Sep.addLine(to: CGPoint(x: 20.44, y: 4.09))
                tue8Sep.addLine(to: CGPoint(x: 18.73, y: 4.09))
                tue8Sep.close()
                tue8Sep.move(to: CGPoint(x: 30.4, y: 8.71))
                tue8Sep.addLine(to: CGPoint(x: 24.47, y: 8.71))
                tue8Sep.addCurve(to: CGPoint(x: 27.69, y: 5.46), controlPoint1: CGPoint(x: 24.71, y: 6.75), controlPoint2: CGPoint(x: 25.98, y: 5.46))
                tue8Sep.addCurve(to: CGPoint(x: 30.4, y: 8.71), controlPoint1: CGPoint(x: 29.4, y: 5.46), controlPoint2: CGPoint(x: 30.46, y: 6.75))
                tue8Sep.close()
                tue8Sep.move(to: CGPoint(x: 27.29, y: 13.78))
                tue8Sep.addCurve(to: CGPoint(x: 24.38, y: 10.21), controlPoint1: CGPoint(x: 25.46, y: 13.78), controlPoint2: CGPoint(x: 24.34, y: 12.4))
                tue8Sep.addLine(to: CGPoint(x: 24.38, y: 10.13))
                tue8Sep.addLine(to: CGPoint(x: 32.13, y: 10.13))
                tue8Sep.addLine(to: CGPoint(x: 32.17, y: 9.45))
                tue8Sep.addCurve(to: CGPoint(x: 27.8, y: 3.9), controlPoint1: CGPoint(x: 32.34, y: 6.02), controlPoint2: CGPoint(x: 30.69, y: 3.9))
                tue8Sep.addCurve(to: CGPoint(x: 22.62, y: 9.63), controlPoint1: CGPoint(x: 24.85, y: 3.9), controlPoint2: CGPoint(x: 22.83, y: 6.15))
                tue8Sep.addCurve(to: CGPoint(x: 27.16, y: 15.34), controlPoint1: CGPoint(x: 22.42, y: 13.13), controlPoint2: CGPoint(x: 24.16, y: 15.34))
                tue8Sep.addCurve(to: CGPoint(x: 31.88, y: 12.28), controlPoint1: CGPoint(x: 29.53, y: 15.34), controlPoint2: CGPoint(x: 31.26, y: 14.18))
                tue8Sep.addLine(to: CGPoint(x: 30.16, y: 12.28))
                tue8Sep.addCurve(to: CGPoint(x: 27.29, y: 13.78), controlPoint1: CGPoint(x: 29.65, y: 13.26), controlPoint2: CGPoint(x: 28.68, y: 13.78))
                tue8Sep.close()
                tue8Sep.move(to: CGPoint(x: 50.32, y: 11.19))
                tue8Sep.addCurve(to: CGPoint(x: 47.48, y: 7.41), controlPoint1: CGPoint(x: 50.4, y: 9.26), controlPoint2: CGPoint(x: 49.27, y: 7.76))
                tue8Sep.addLine(to: CGPoint(x: 47.48, y: 7.25))
                tue8Sep.addCurve(to: CGPoint(x: 50.02, y: 3.95), controlPoint1: CGPoint(x: 48.99, y: 6.83), controlPoint2: CGPoint(x: 49.95, y: 5.57))
                tue8Sep.addCurve(to: CGPoint(x: 45.6, y: 0), controlPoint1: CGPoint(x: 50.11, y: 1.64), controlPoint2: CGPoint(x: 48.28, y: 0))
                tue8Sep.addCurve(to: CGPoint(x: 40.84, y: 3.95), controlPoint1: CGPoint(x: 42.92, y: 0), controlPoint2: CGPoint(x: 40.95, y: 1.64))
                tue8Sep.addCurve(to: CGPoint(x: 43.1, y: 7.25), controlPoint1: CGPoint(x: 40.77, y: 5.56), controlPoint2: CGPoint(x: 41.65, y: 6.84))
                tue8Sep.addLine(to: CGPoint(x: 43.09, y: 7.41))
                tue8Sep.addCurve(to: CGPoint(x: 39.92, y: 11.19), controlPoint1: CGPoint(x: 41.27, y: 7.76), controlPoint2: CGPoint(x: 40.01, y: 9.26))
                tue8Sep.addCurve(to: CGPoint(x: 44.94, y: 15.49), controlPoint1: CGPoint(x: 39.8, y: 13.72), controlPoint2: CGPoint(x: 41.87, y: 15.49))
                tue8Sep.addCurve(to: CGPoint(x: 50.32, y: 11.19), controlPoint1: CGPoint(x: 48.01, y: 15.49), controlPoint2: CGPoint(x: 50.23, y: 13.72))
                tue8Sep.close()
                tue8Sep.move(to: CGPoint(x: 41.75, y: 11.05))
                tue8Sep.addCurve(to: CGPoint(x: 45.25, y: 8.19), controlPoint1: CGPoint(x: 41.82, y: 9.36), controlPoint2: CGPoint(x: 43.25, y: 8.19))
                tue8Sep.addCurve(to: CGPoint(x: 48.51, y: 11.05), controlPoint1: CGPoint(x: 47.25, y: 8.19), controlPoint2: CGPoint(x: 48.58, y: 9.36))
                tue8Sep.addCurve(to: CGPoint(x: 45.01, y: 13.91), controlPoint1: CGPoint(x: 48.44, y: 12.75), controlPoint2: CGPoint(x: 47.01, y: 13.91))
                tue8Sep.addCurve(to: CGPoint(x: 41.75, y: 11.05), controlPoint1: CGPoint(x: 43, y: 13.91), controlPoint2: CGPoint(x: 41.67, y: 12.75))
                tue8Sep.close()
                tue8Sep.move(to: CGPoint(x: 42.6, y: 4.12))
                tue8Sep.addCurve(to: CGPoint(x: 45.53, y: 1.58), controlPoint1: CGPoint(x: 42.67, y: 2.59), controlPoint2: CGPoint(x: 43.83, y: 1.58))
                tue8Sep.addCurve(to: CGPoint(x: 48.25, y: 4.12), controlPoint1: CGPoint(x: 47.23, y: 1.58), controlPoint2: CGPoint(x: 48.31, y: 2.59))
                tue8Sep.addCurve(to: CGPoint(x: 45.32, y: 6.63), controlPoint1: CGPoint(x: 48.19, y: 5.63), controlPoint2: CGPoint(x: 47.01, y: 6.63))
                tue8Sep.addCurve(to: CGPoint(x: 42.6, y: 4.12), controlPoint1: CGPoint(x: 43.62, y: 6.63), controlPoint2: CGPoint(x: 42.53, y: 5.63))
                tue8Sep.close()
                tue8Sep.move(to: CGPoint(x: 63.48, y: 15.49))
                tue8Sep.addCurve(to: CGPoint(x: 69, y: 11.04), controlPoint1: CGPoint(x: 66.79, y: 15.49), controlPoint2: CGPoint(x: 68.93, y: 13.76))
                tue8Sep.addCurve(to: CGPoint(x: 64.92, y: 6.91), controlPoint1: CGPoint(x: 69.05, y: 8.87), controlPoint2: CGPoint(x: 67.88, y: 7.68))
                tue8Sep.addLine(to: CGPoint(x: 63.43, y: 6.5))
                tue8Sep.addCurve(to: CGPoint(x: 60.73, y: 4.15), controlPoint1: CGPoint(x: 61.46, y: 5.98), controlPoint2: CGPoint(x: 60.69, y: 5.31))
                tue8Sep.addCurve(to: CGPoint(x: 63.98, y: 1.67), controlPoint1: CGPoint(x: 60.78, y: 2.66), controlPoint2: CGPoint(x: 62.07, y: 1.67))
                tue8Sep.addCurve(to: CGPoint(x: 67.16, y: 4.09), controlPoint1: CGPoint(x: 65.76, y: 1.67), controlPoint2: CGPoint(x: 66.95, y: 2.57))
                tue8Sep.addLine(to: CGPoint(x: 68.96, y: 4.09))
                tue8Sep.addCurve(to: CGPoint(x: 64.08, y: 0), controlPoint1: CGPoint(x: 68.87, y: 1.7), controlPoint2: CGPoint(x: 66.85, y: 0))
                tue8Sep.addCurve(to: CGPoint(x: 58.89, y: 4.21), controlPoint1: CGPoint(x: 61.06, y: 0), controlPoint2: CGPoint(x: 58.97, y: 1.7))
                tue8Sep.addCurve(to: CGPoint(x: 62.49, y: 8.2), controlPoint1: CGPoint(x: 58.82, y: 6.32), controlPoint2: CGPoint(x: 59.91, y: 7.53))
                tue8Sep.addLine(to: CGPoint(x: 64.32, y: 8.7))
                tue8Sep.addCurve(to: CGPoint(x: 67.14, y: 11.27), controlPoint1: CGPoint(x: 66.3, y: 9.21), controlPoint2: CGPoint(x: 67.17, y: 10.01))
                tue8Sep.addCurve(to: CGPoint(x: 63.7, y: 13.81), controlPoint1: CGPoint(x: 67.1, y: 12.74), controlPoint2: CGPoint(x: 65.64, y: 13.81))
                tue8Sep.addCurve(to: CGPoint(x: 60.06, y: 11.28), controlPoint1: CGPoint(x: 61.64, y: 13.81), controlPoint2: CGPoint(x: 60.23, y: 12.83))
                tue8Sep.addLine(to: CGPoint(x: 58.24, y: 11.28))
                tue8Sep.addCurve(to: CGPoint(x: 63.48, y: 15.49), controlPoint1: CGPoint(x: 58.34, y: 13.83), controlPoint2: CGPoint(x: 60.41, y: 15.49))
                tue8Sep.close()
                tue8Sep.move(to: CGPoint(x: 78.82, y: 8.71))
                tue8Sep.addLine(to: CGPoint(x: 72.89, y: 8.71))
                tue8Sep.addCurve(to: CGPoint(x: 76, y: 5.46), controlPoint1: CGPoint(x: 73.06, y: 6.75), controlPoint2: CGPoint(x: 74.29, y: 5.46))
                tue8Sep.addCurve(to: CGPoint(x: 78.82, y: 8.71), controlPoint1: CGPoint(x: 77.71, y: 5.46), controlPoint2: CGPoint(x: 78.82, y: 6.75))
                tue8Sep.close()
                tue8Sep.move(to: CGPoint(x: 75.9, y: 13.78))
                tue8Sep.addCurve(to: CGPoint(x: 72.86, y: 10.21), controlPoint1: CGPoint(x: 74.06, y: 13.78), controlPoint2: CGPoint(x: 72.9, y: 12.4))
                tue8Sep.addLine(to: CGPoint(x: 72.86, y: 10.13))
                tue8Sep.addLine(to: CGPoint(x: 80.61, y: 10.13))
                tue8Sep.addLine(to: CGPoint(x: 80.62, y: 9.45))
                tue8Sep.addCurve(to: CGPoint(x: 76.05, y: 3.9), controlPoint1: CGPoint(x: 80.67, y: 6.02), controlPoint2: CGPoint(x: 78.95, y: 3.9))
                tue8Sep.addCurve(to: CGPoint(x: 71.08, y: 9.63), controlPoint1: CGPoint(x: 73.11, y: 3.9), controlPoint2: CGPoint(x: 71.16, y: 6.15))
                tue8Sep.addCurve(to: CGPoint(x: 75.82, y: 15.34), controlPoint1: CGPoint(x: 71, y: 13.13), controlPoint2: CGPoint(x: 72.82, y: 15.34))
                tue8Sep.addCurve(to: CGPoint(x: 80.43, y: 12.28), controlPoint1: CGPoint(x: 78.19, y: 15.34), controlPoint2: CGPoint(x: 79.88, y: 14.18))
                tue8Sep.addLine(to: CGPoint(x: 78.71, y: 12.28))
                tue8Sep.addCurve(to: CGPoint(x: 75.9, y: 13.78), controlPoint1: CGPoint(x: 78.24, y: 13.26), controlPoint2: CGPoint(x: 77.29, y: 13.78))
                tue8Sep.close()
                tue8Sep.move(to: CGPoint(x: 84.98, y: 5.94))
                tue8Sep.addLine(to: CGPoint(x: 84.82, y: 5.94))
                tue8Sep.addLine(to: CGPoint(x: 84.85, y: 4.09))
                tue8Sep.addLine(to: CGPoint(x: 83.22, y: 4.09))
                tue8Sep.addLine(to: CGPoint(x: 83, y: 18.84))
                tue8Sep.addLine(to: CGPoint(x: 84.73, y: 18.84))
                tue8Sep.addLine(to: CGPoint(x: 84.8, y: 13.48))
                tue8Sep.addLine(to: CGPoint(x: 84.96, y: 13.48))
                tue8Sep.addCurve(to: CGPoint(x: 88.32, y: 15.34), controlPoint1: CGPoint(x: 85.54, y: 14.65), controlPoint2: CGPoint(x: 86.77, y: 15.34))
                tue8Sep.addCurve(to: CGPoint(x: 92.91, y: 9.62), controlPoint1: CGPoint(x: 91.07, y: 15.34), controlPoint2: CGPoint(x: 92.88, y: 13.07))
                tue8Sep.addCurve(to: CGPoint(x: 88.44, y: 3.9), controlPoint1: CGPoint(x: 92.93, y: 6.14), controlPoint2: CGPoint(x: 91.18, y: 3.9))
                tue8Sep.addCurve(to: CGPoint(x: 84.98, y: 5.94), controlPoint1: CGPoint(x: 86.98, y: 3.9), controlPoint2: CGPoint(x: 85.69, y: 4.67))
                tue8Sep.close()
                tue8Sep.move(to: CGPoint(x: 88.03, y: 5.49))
                tue8Sep.addCurve(to: CGPoint(x: 91.13, y: 9.62), controlPoint1: CGPoint(x: 89.99, y: 5.49), controlPoint2: CGPoint(x: 91.15, y: 7.03))
                tue8Sep.addCurve(to: CGPoint(x: 87.92, y: 13.75), controlPoint1: CGPoint(x: 91.11, y: 12.2), controlPoint2: CGPoint(x: 89.91, y: 13.75))
                tue8Sep.addCurve(to: CGPoint(x: 84.8, y: 9.62), controlPoint1: CGPoint(x: 85.98, y: 13.75), controlPoint2: CGPoint(x: 84.77, y: 12.15))
                tue8Sep.addCurve(to: CGPoint(x: 88.03, y: 5.49), controlPoint1: CGPoint(x: 84.84, y: 7.08), controlPoint2: CGPoint(x: 86.08, y: 5.49))
                tue8Sep.close()
                context.saveGState()
                context.translateBy(x: 0.44, y: 0.35)
                tue8Sep.usesEvenOddFillRule = true
                UIColor.black.setFill()
                tue8Sep.fill()
                context.restoreGState()
                
                /// 9
                let _9 = UIBezierPath()
                _9.move(to: CGPoint(x: 10.51, y: 7.49))
                _9.addCurve(to: CGPoint(x: 9.71, y: 3.36), controlPoint1: CGPoint(x: 10.47, y: 5.85), controlPoint2: CGPoint(x: 10.2, y: 4.49))
                _9.addCurve(to: CGPoint(x: 4.93, y: 0), controlPoint1: CGPoint(x: 8.76, y: 1.18), controlPoint2: CGPoint(x: 7.07, y: 0))
                _9.addCurve(to: CGPoint(x: 0, y: 5.1), controlPoint1: CGPoint(x: 1.99, y: 0), controlPoint2: CGPoint(x: -0.05, y: 2.12))
                _9.addCurve(to: CGPoint(x: 4.83, y: 10.05), controlPoint1: CGPoint(x: 0.05, y: 7.97), controlPoint2: CGPoint(x: 2.08, y: 10.05))
                _9.addCurve(to: CGPoint(x: 8.61, y: 7.77), controlPoint1: CGPoint(x: 6.55, y: 10.05), controlPoint2: CGPoint(x: 7.94, y: 9.21))
                _9.addLine(to: CGPoint(x: 8.65, y: 7.77))
                _9.addLine(to: CGPoint(x: 8.69, y: 7.77))
                _9.addLine(to: CGPoint(x: 8.77, y: 7.77))
                _9.addCurve(to: CGPoint(x: 5.14, y: 13.84), controlPoint1: CGPoint(x: 8.77, y: 11.71), controlPoint2: CGPoint(x: 7.49, y: 13.84))
                _9.addCurve(to: CGPoint(x: 2.18, y: 11.62), controlPoint1: CGPoint(x: 3.71, y: 13.84), controlPoint2: CGPoint(x: 2.6, y: 13))
                _9.addLine(to: CGPoint(x: 0.33, y: 11.62))
                _9.addCurve(to: CGPoint(x: 5.15, y: 15.48), controlPoint1: CGPoint(x: 0.84, y: 14), controlPoint2: CGPoint(x: 2.69, y: 15.48))
                _9.addCurve(to: CGPoint(x: 10.51, y: 7.49), controlPoint1: CGPoint(x: 8.7, y: 15.48), controlPoint2: CGPoint(x: 10.65, y: 12.57))
                _9.close()
                _9.move(to: CGPoint(x: 1.81, y: 5.03))
                _9.addCurve(to: CGPoint(x: 4.98, y: 1.62), controlPoint1: CGPoint(x: 1.77, y: 3.1), controlPoint2: CGPoint(x: 3.14, y: 1.62))
                _9.addCurve(to: CGPoint(x: 8.31, y: 5.1), controlPoint1: CGPoint(x: 6.82, y: 1.62), controlPoint2: CGPoint(x: 8.26, y: 3.12))
                _9.addCurve(to: CGPoint(x: 5.12, y: 8.45), controlPoint1: CGPoint(x: 8.36, y: 7.05), controlPoint2: CGPoint(x: 7.02, y: 8.45))
                _9.addCurve(to: CGPoint(x: 1.81, y: 5.03), controlPoint1: CGPoint(x: 3.21, y: 8.45), controlPoint2: CGPoint(x: 1.85, y: 7.05))
                _9.close()
                context.saveGState()
                context.translateBy(x: 128.96, y: 0.35)
                _9.usesEvenOddFillRule = true
                UIColor.black.setFill()
                _9.fill()
                context.restoreGState()
                
                /// 59
                let _59 = UIBezierPath()
                _59.move(to: CGPoint(x: 9.84, y: 10.44))
                _59.addCurve(to: CGPoint(x: 4.88, y: 5.49), controlPoint1: CGPoint(x: 9.65, y: 7.53), controlPoint2: CGPoint(x: 7.61, y: 5.49))
                _59.addCurve(to: CGPoint(x: 1.91, y: 6.75), controlPoint1: CGPoint(x: 3.55, y: 5.49), controlPoint2: CGPoint(x: 2.56, y: 5.91))
                _59.addLine(to: CGPoint(x: 1.75, y: 6.75))
                _59.addLine(to: CGPoint(x: 1.88, y: 2))
                _59.addLine(to: CGPoint(x: 8.47, y: 2))
                _59.addLine(to: CGPoint(x: 8.37, y: 0.35))
                _59.addLine(to: CGPoint(x: 0.38, y: 0.35))
                _59.addLine(to: CGPoint(x: 0.09, y: 8.74))
                _59.addLine(to: CGPoint(x: 1.77, y: 8.74))
                _59.addCurve(to: CGPoint(x: 4.65, y: 7.08), controlPoint1: CGPoint(x: 2.3, y: 7.68), controlPoint2: CGPoint(x: 3.34, y: 7.08))
                _59.addCurve(to: CGPoint(x: 8.05, y: 10.49), controlPoint1: CGPoint(x: 6.53, y: 7.08), controlPoint2: CGPoint(x: 7.92, y: 8.46))
                _59.addCurve(to: CGPoint(x: 5.04, y: 13.87), controlPoint1: CGPoint(x: 8.18, y: 12.52), controlPoint2: CGPoint(x: 6.97, y: 13.87))
                _59.addCurve(to: CGPoint(x: 1.77, y: 11.21), controlPoint1: CGPoint(x: 3.33, y: 13.87), controlPoint2: CGPoint(x: 2.03, y: 12.81))
                _59.addLine(to: CGPoint(x: 0, y: 11.21))
                _59.addCurve(to: CGPoint(x: 5.12, y: 15.49), controlPoint1: CGPoint(x: 0.31, y: 13.76), controlPoint2: CGPoint(x: 2.38, y: 15.49))
                _59.addCurve(to: CGPoint(x: 9.84, y: 10.44), controlPoint1: CGPoint(x: 8.12, y: 15.49), controlPoint2: CGPoint(x: 10.04, y: 13.44))
                _59.close()
                _59.move(to: CGPoint(x: 22.47, y: 7.49))
                _59.addCurve(to: CGPoint(x: 21.46, y: 3.36), controlPoint1: CGPoint(x: 22.35, y: 5.85), controlPoint2: CGPoint(x: 22.02, y: 4.49))
                _59.addCurve(to: CGPoint(x: 16.52, y: 0), controlPoint1: CGPoint(x: 20.41, y: 1.18), controlPoint2: CGPoint(x: 18.66, y: 0))
                _59.addCurve(to: CGPoint(x: 11.84, y: 5.1), controlPoint1: CGPoint(x: 13.58, y: 0), controlPoint2: CGPoint(x: 11.64, y: 2.12))
                _59.addCurve(to: CGPoint(x: 16.92, y: 10.05), controlPoint1: CGPoint(x: 12.04, y: 7.97), controlPoint2: CGPoint(x: 14.17, y: 10.05))
                _59.addCurve(to: CGPoint(x: 20.59, y: 7.77), controlPoint1: CGPoint(x: 18.63, y: 10.05), controlPoint2: CGPoint(x: 19.98, y: 9.21))
                _59.addLine(to: CGPoint(x: 20.63, y: 7.77))
                _59.addLine(to: CGPoint(x: 20.67, y: 7.77))
                _59.addLine(to: CGPoint(x: 20.75, y: 7.77))
                _59.addCurve(to: CGPoint(x: 17.4, y: 13.84), controlPoint1: CGPoint(x: 20.94, y: 11.71), controlPoint2: CGPoint(x: 19.76, y: 13.84))
                _59.addCurve(to: CGPoint(x: 14.34, y: 11.62), controlPoint1: CGPoint(x: 15.98, y: 13.84), controlPoint2: CGPoint(x: 14.83, y: 13))
                _59.addLine(to: CGPoint(x: 12.49, y: 11.62))
                _59.addCurve(to: CGPoint(x: 17.5, y: 15.48), controlPoint1: CGPoint(x: 13.12, y: 14), controlPoint2: CGPoint(x: 15.04, y: 15.48))
                _59.addCurve(to: CGPoint(x: 22.47, y: 7.49), controlPoint1: CGPoint(x: 21.04, y: 15.48), controlPoint2: CGPoint(x: 22.85, y: 12.57))
                _59.close()
                _59.move(to: CGPoint(x: 13.65, y: 5.03))
                _59.addCurve(to: CGPoint(x: 16.66, y: 1.62), controlPoint1: CGPoint(x: 13.52, y: 3.1), controlPoint2: CGPoint(x: 14.82, y: 1.62))
                _59.addCurve(to: CGPoint(x: 20.15, y: 5.1), controlPoint1: CGPoint(x: 18.49, y: 1.62), controlPoint2: CGPoint(x: 20, y: 3.12))
                _59.addCurve(to: CGPoint(x: 17.12, y: 8.45), controlPoint1: CGPoint(x: 20.29, y: 7.05), controlPoint2: CGPoint(x: 19.03, y: 8.45))
                _59.addCurve(to: CGPoint(x: 13.65, y: 5.03), controlPoint1: CGPoint(x: 15.21, y: 8.45), controlPoint2: CGPoint(x: 13.79, y: 7.05))
                _59.close()
                context.saveGState()
                context.translateBy(x: 184.06, y: 0.35)
                _59.usesEvenOddFillRule = true
                UIColor.black.setFill()
                _59.fill()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Thu 10 Sep + 11 + 01
            do {
                context.saveGState()
                context.translateBy(x: 71, y: 112.5)
                
                /// Thu 10 Sep
                let thu10Sep = UIBezierPath()
                thu10Sep.move(to: CGPoint(x: 6.61, y: 15.44))
                thu10Sep.addLine(to: CGPoint(x: 6.61, y: 2.31))
                thu10Sep.addLine(to: CGPoint(x: 11.38, y: 2.31))
                thu10Sep.addLine(to: CGPoint(x: 11.38, y: 0.65))
                thu10Sep.addLine(to: CGPoint(x: 0, y: 0.65))
                thu10Sep.addLine(to: CGPoint(x: 0, y: 2.31))
                thu10Sep.addLine(to: CGPoint(x: 4.77, y: 2.31))
                thu10Sep.addLine(to: CGPoint(x: 4.77, y: 15.44))
                thu10Sep.addLine(to: CGPoint(x: 6.61, y: 15.44))
                thu10Sep.close()
                thu10Sep.move(to: CGPoint(x: 13.93, y: 15.44))
                thu10Sep.addLine(to: CGPoint(x: 15.69, y: 15.44))
                thu10Sep.addLine(to: CGPoint(x: 15.69, y: 8.9))
                thu10Sep.addCurve(to: CGPoint(x: 18.76, y: 5.78), controlPoint1: CGPoint(x: 15.69, y: 7.03), controlPoint2: CGPoint(x: 16.78, y: 5.78))
                thu10Sep.addCurve(to: CGPoint(x: 21.31, y: 8.72), controlPoint1: CGPoint(x: 20.43, y: 5.78), controlPoint2: CGPoint(x: 21.31, y: 6.76))
                thu10Sep.addLine(to: CGPoint(x: 21.31, y: 15.44))
                thu10Sep.addLine(to: CGPoint(x: 23.07, y: 15.44))
                thu10Sep.addLine(to: CGPoint(x: 23.07, y: 8.29))
                thu10Sep.addCurve(to: CGPoint(x: 19.26, y: 4.19), controlPoint1: CGPoint(x: 23.07, y: 5.69), controlPoint2: CGPoint(x: 21.6, y: 4.19))
                thu10Sep.addCurve(to: CGPoint(x: 15.85, y: 6.13), controlPoint1: CGPoint(x: 17.57, y: 4.19), controlPoint2: CGPoint(x: 16.41, y: 4.91))
                thu10Sep.addLine(to: CGPoint(x: 15.69, y: 6.13))
                thu10Sep.addLine(to: CGPoint(x: 15.69, y: 0))
                thu10Sep.addLine(to: CGPoint(x: 13.93, y: 0))
                thu10Sep.addLine(to: CGPoint(x: 13.93, y: 15.44))
                thu10Sep.close()
                thu10Sep.move(to: CGPoint(x: 35.05, y: 4.39))
                thu10Sep.addLine(to: CGPoint(x: 33.29, y: 4.39))
                thu10Sep.addLine(to: CGPoint(x: 33.29, y: 10.93))
                thu10Sep.addCurve(to: CGPoint(x: 30.27, y: 14.03), controlPoint1: CGPoint(x: 33.29, y: 12.87), controlPoint2: CGPoint(x: 32.22, y: 14.03))
                thu10Sep.addCurve(to: CGPoint(x: 27.77, y: 11.12), controlPoint1: CGPoint(x: 28.51, y: 14.03), controlPoint2: CGPoint(x: 27.77, y: 13.1))
                thu10Sep.addLine(to: CGPoint(x: 27.77, y: 4.39))
                thu10Sep.addLine(to: CGPoint(x: 26.01, y: 4.39))
                thu10Sep.addLine(to: CGPoint(x: 26.01, y: 11.55))
                thu10Sep.addCurve(to: CGPoint(x: 29.78, y: 15.64), controlPoint1: CGPoint(x: 26.01, y: 14.16), controlPoint2: CGPoint(x: 27.3, y: 15.64))
                thu10Sep.addCurve(to: CGPoint(x: 33.21, y: 13.71), controlPoint1: CGPoint(x: 31.47, y: 15.64), controlPoint2: CGPoint(x: 32.65, y: 14.94))
                thu10Sep.addLine(to: CGPoint(x: 33.37, y: 13.71))
                thu10Sep.addLine(to: CGPoint(x: 33.37, y: 15.44))
                thu10Sep.addLine(to: CGPoint(x: 35.05, y: 15.44))
                thu10Sep.addLine(to: CGPoint(x: 35.05, y: 4.39))
                thu10Sep.close()
                thu10Sep.move(to: CGPoint(x: 47.46, y: 15.44))
                thu10Sep.addLine(to: CGPoint(x: 49.31, y: 15.44))
                thu10Sep.addLine(to: CGPoint(x: 49.31, y: 0.65))
                thu10Sep.addLine(to: CGPoint(x: 47.47, y: 0.65))
                thu10Sep.addLine(to: CGPoint(x: 43.54, y: 3.48))
                thu10Sep.addLine(to: CGPoint(x: 43.54, y: 5.42))
                thu10Sep.addLine(to: CGPoint(x: 47.3, y: 2.7))
                thu10Sep.addLine(to: CGPoint(x: 47.46, y: 2.7))
                thu10Sep.addLine(to: CGPoint(x: 47.46, y: 15.44))
                thu10Sep.close()
                thu10Sep.move(to: CGPoint(x: 58.51, y: 15.79))
                thu10Sep.addCurve(to: CGPoint(x: 63.74, y: 8.07), controlPoint1: CGPoint(x: 61.83, y: 15.79), controlPoint2: CGPoint(x: 63.74, y: 12.98))
                thu10Sep.addCurve(to: CGPoint(x: 58.51, y: 0.3), controlPoint1: CGPoint(x: 63.74, y: 3.17), controlPoint2: CGPoint(x: 61.8, y: 0.3))
                thu10Sep.addCurve(to: CGPoint(x: 53.26, y: 8.04), controlPoint1: CGPoint(x: 55.2, y: 0.3), controlPoint2: CGPoint(x: 53.26, y: 3.16))
                thu10Sep.addCurve(to: CGPoint(x: 58.51, y: 15.79), controlPoint1: CGPoint(x: 53.26, y: 12.96), controlPoint2: CGPoint(x: 55.18, y: 15.79))
                thu10Sep.addLine(to: CGPoint(x: 58.51, y: 15.79))
                thu10Sep.close()
                thu10Sep.move(to: CGPoint(x: 58.51, y: 14.18))
                thu10Sep.addCurve(to: CGPoint(x: 55.11, y: 8.04), controlPoint1: CGPoint(x: 56.32, y: 14.18), controlPoint2: CGPoint(x: 55.11, y: 12))
                thu10Sep.addCurve(to: CGPoint(x: 58.51, y: 1.92), controlPoint1: CGPoint(x: 55.11, y: 4.13), controlPoint2: CGPoint(x: 56.34, y: 1.92))
                thu10Sep.addCurve(to: CGPoint(x: 61.88, y: 8.04), controlPoint1: CGPoint(x: 60.67, y: 1.92), controlPoint2: CGPoint(x: 61.88, y: 4.11))
                thu10Sep.addCurve(to: CGPoint(x: 58.51, y: 14.18), controlPoint1: CGPoint(x: 61.88, y: 12.01), controlPoint2: CGPoint(x: 60.69, y: 14.18))
                thu10Sep.addLine(to: CGPoint(x: 58.51, y: 14.18))
                thu10Sep.close()
                thu10Sep.move(to: CGPoint(x: 71.85, y: 11.58))
                thu10Sep.addCurve(to: CGPoint(x: 77.35, y: 15.79), controlPoint1: CGPoint(x: 72.05, y: 14.13), controlPoint2: CGPoint(x: 74.21, y: 15.79))
                thu10Sep.addCurve(to: CGPoint(x: 82.88, y: 11.34), controlPoint1: CGPoint(x: 80.73, y: 15.79), controlPoint2: CGPoint(x: 82.88, y: 14.06))
                thu10Sep.addCurve(to: CGPoint(x: 78.58, y: 7.21), controlPoint1: CGPoint(x: 82.88, y: 9.17), controlPoint2: CGPoint(x: 81.65, y: 7.98))
                thu10Sep.addLine(to: CGPoint(x: 77.03, y: 6.8))
                thu10Sep.addCurve(to: CGPoint(x: 74.18, y: 4.45), controlPoint1: CGPoint(x: 74.99, y: 6.28), controlPoint2: CGPoint(x: 74.18, y: 5.61))
                thu10Sep.addCurve(to: CGPoint(x: 77.45, y: 1.97), controlPoint1: CGPoint(x: 74.18, y: 2.95), controlPoint2: CGPoint(x: 75.48, y: 1.97))
                thu10Sep.addCurve(to: CGPoint(x: 80.8, y: 4.39), controlPoint1: CGPoint(x: 79.3, y: 1.97), controlPoint2: CGPoint(x: 80.55, y: 2.87))
                thu10Sep.addLine(to: CGPoint(x: 82.66, y: 4.39))
                thu10Sep.addCurve(to: CGPoint(x: 77.51, y: 0.3), controlPoint1: CGPoint(x: 82.51, y: 2), controlPoint2: CGPoint(x: 80.37, y: 0.3))
                thu10Sep.addCurve(to: CGPoint(x: 72.28, y: 4.51), controlPoint1: CGPoint(x: 74.39, y: 0.3), controlPoint2: CGPoint(x: 72.28, y: 2))
                thu10Sep.addCurve(to: CGPoint(x: 76.12, y: 8.5), controlPoint1: CGPoint(x: 72.28, y: 6.61), controlPoint2: CGPoint(x: 73.44, y: 7.82))
                thu10Sep.addLine(to: CGPoint(x: 78.02, y: 8.99))
                thu10Sep.addCurve(to: CGPoint(x: 80.98, y: 11.57), controlPoint1: CGPoint(x: 80.06, y: 9.51), controlPoint2: CGPoint(x: 80.98, y: 10.31))
                thu10Sep.addCurve(to: CGPoint(x: 77.52, y: 14.11), controlPoint1: CGPoint(x: 80.98, y: 13.03), controlPoint2: CGPoint(x: 79.51, y: 14.11))
                thu10Sep.addCurve(to: CGPoint(x: 73.72, y: 11.58), controlPoint1: CGPoint(x: 75.42, y: 14.11), controlPoint2: CGPoint(x: 73.94, y: 13.13))
                thu10Sep.addLine(to: CGPoint(x: 71.85, y: 11.58))
                thu10Sep.close()
                thu10Sep.move(to: CGPoint(x: 89.94, y: 5.75))
                thu10Sep.addCurve(to: CGPoint(x: 92.91, y: 9), controlPoint1: CGPoint(x: 91.7, y: 5.75), controlPoint2: CGPoint(x: 92.86, y: 7.04))
                thu10Sep.addLine(to: CGPoint(x: 86.82, y: 9))
                thu10Sep.addCurve(to: CGPoint(x: 89.94, y: 5.75), controlPoint1: CGPoint(x: 86.95, y: 7.04), controlPoint2: CGPoint(x: 88.18, y: 5.75))
                thu10Sep.addLine(to: CGPoint(x: 89.94, y: 5.75))
                thu10Sep.close()
                thu10Sep.move(to: CGPoint(x: 92.85, y: 12.58))
                thu10Sep.addCurve(to: CGPoint(x: 90, y: 14.08), controlPoint1: CGPoint(x: 92.39, y: 13.56), controlPoint2: CGPoint(x: 91.43, y: 14.08))
                thu10Sep.addCurve(to: CGPoint(x: 86.82, y: 10.51), controlPoint1: CGPoint(x: 88.13, y: 14.08), controlPoint2: CGPoint(x: 86.91, y: 12.69))
                thu10Sep.addLine(to: CGPoint(x: 86.82, y: 10.43))
                thu10Sep.addLine(to: CGPoint(x: 94.76, y: 10.43))
                thu10Sep.addLine(to: CGPoint(x: 94.76, y: 9.75))
                thu10Sep.addCurve(to: CGPoint(x: 89.96, y: 4.19), controlPoint1: CGPoint(x: 94.76, y: 6.32), controlPoint2: CGPoint(x: 92.95, y: 4.19))
                thu10Sep.addCurve(to: CGPoint(x: 84.98, y: 9.93), controlPoint1: CGPoint(x: 86.93, y: 4.19), controlPoint2: CGPoint(x: 84.98, y: 6.45))
                thu10Sep.addCurve(to: CGPoint(x: 89.96, y: 15.64), controlPoint1: CGPoint(x: 84.98, y: 13.42), controlPoint2: CGPoint(x: 86.9, y: 15.64))
                thu10Sep.addCurve(to: CGPoint(x: 94.62, y: 12.58), controlPoint1: CGPoint(x: 92.38, y: 15.64), controlPoint2: CGPoint(x: 94.09, y: 14.48))
                thu10Sep.addLine(to: CGPoint(x: 92.85, y: 12.58))
                thu10Sep.close()
                thu10Sep.move(to: CGPoint(x: 102.73, y: 4.19))
                thu10Sep.addCurve(to: CGPoint(x: 99.19, y: 6.23), controlPoint1: CGPoint(x: 101.22, y: 4.19), controlPoint2: CGPoint(x: 99.9, y: 4.96))
                thu10Sep.addLine(to: CGPoint(x: 99.03, y: 6.23))
                thu10Sep.addLine(to: CGPoint(x: 99.03, y: 4.39))
                thu10Sep.addLine(to: CGPoint(x: 97.35, y: 4.39))
                thu10Sep.addLine(to: CGPoint(x: 97.35, y: 19.13))
                thu10Sep.addLine(to: CGPoint(x: 99.11, y: 19.13))
                thu10Sep.addLine(to: CGPoint(x: 99.11, y: 13.78))
                thu10Sep.addLine(to: CGPoint(x: 99.28, y: 13.78))
                thu10Sep.addCurve(to: CGPoint(x: 102.73, y: 15.64), controlPoint1: CGPoint(x: 99.88, y: 14.95), controlPoint2: CGPoint(x: 101.15, y: 15.64))
                thu10Sep.addCurve(to: CGPoint(x: 107.38, y: 9.92), controlPoint1: CGPoint(x: 105.54, y: 15.64), controlPoint2: CGPoint(x: 107.38, y: 13.37))
                thu10Sep.addCurve(to: CGPoint(x: 102.73, y: 4.19), controlPoint1: CGPoint(x: 107.38, y: 6.44), controlPoint2: CGPoint(x: 105.55, y: 4.19))
                thu10Sep.addLine(to: CGPoint(x: 102.73, y: 4.19))
                thu10Sep.close()
                thu10Sep.move(to: CGPoint(x: 102.31, y: 14.05))
                thu10Sep.addCurve(to: CGPoint(x: 99.06, y: 9.92), controlPoint1: CGPoint(x: 100.32, y: 14.05), controlPoint2: CGPoint(x: 99.06, y: 12.45))
                thu10Sep.addCurve(to: CGPoint(x: 102.32, y: 5.78), controlPoint1: CGPoint(x: 99.06, y: 7.37), controlPoint2: CGPoint(x: 100.32, y: 5.78))
                thu10Sep.addCurve(to: CGPoint(x: 105.55, y: 9.92), controlPoint1: CGPoint(x: 104.34, y: 5.78), controlPoint2: CGPoint(x: 105.55, y: 7.33))
                thu10Sep.addCurve(to: CGPoint(x: 102.31, y: 14.05), controlPoint1: CGPoint(x: 105.55, y: 12.5), controlPoint2: CGPoint(x: 104.34, y: 14.05))
                thu10Sep.addLine(to: CGPoint(x: 102.31, y: 14.05))
                thu10Sep.close()
                context.saveGState()
                context.translateBy(x: 0.2, y: 0.06)
                thu10Sep.usesEvenOddFillRule = true
                UIColor(white: 0.6, alpha: 1).setFill()
                thu10Sep.fill()
                context.restoreGState()
                
                /// 11
                let _11 = UIBezierPath()
                _11.move(to: CGPoint(x: 3.93, y: 14.8))
                _11.addLine(to: CGPoint(x: 5.77, y: 14.8))
                _11.addLine(to: CGPoint(x: 5.77, y: 0))
                _11.addLine(to: CGPoint(x: 3.94, y: 0))
                _11.addLine(to: CGPoint(x: 0, y: 2.83))
                _11.addLine(to: CGPoint(x: 0, y: 4.78))
                _11.addLine(to: CGPoint(x: 3.76, y: 2.05))
                _11.addLine(to: CGPoint(x: 3.93, y: 2.05))
                _11.addLine(to: CGPoint(x: 3.93, y: 14.8))
                _11.close()
                _11.move(to: CGPoint(x: 13.54, y: 14.8))
                _11.addLine(to: CGPoint(x: 15.38, y: 14.8))
                _11.addLine(to: CGPoint(x: 15.38, y: 0))
                _11.addLine(to: CGPoint(x: 13.55, y: 0))
                _11.addLine(to: CGPoint(x: 9.61, y: 2.83))
                _11.addLine(to: CGPoint(x: 9.61, y: 4.78))
                _11.addLine(to: CGPoint(x: 13.37, y: 2.05))
                _11.addLine(to: CGPoint(x: 13.54, y: 2.05))
                _11.addLine(to: CGPoint(x: 13.54, y: 14.8))
                _11.close()
                context.saveGState()
                context.translateBy(x: 141.15, y: 0.7)
                _11.usesEvenOddFillRule = true
                UIColor(white: 0.6, alpha: 1).setFill()
                _11.fill()
                context.restoreGState()
                
                /// 01
                let _01 = UIBezierPath()
                _01.move(to: CGPoint(x: 5.25, y: 15.49))
                _01.addCurve(to: CGPoint(x: 10.48, y: 7.77), controlPoint1: CGPoint(x: 8.57, y: 15.49), controlPoint2: CGPoint(x: 10.48, y: 12.68))
                _01.addCurve(to: CGPoint(x: 5.25, y: 0), controlPoint1: CGPoint(x: 10.48, y: 2.87), controlPoint2: CGPoint(x: 8.54, y: 0))
                _01.addCurve(to: CGPoint(x: 0, y: 7.74), controlPoint1: CGPoint(x: 1.94, y: 0), controlPoint2: CGPoint(x: 0, y: 2.86))
                _01.addCurve(to: CGPoint(x: 5.25, y: 15.49), controlPoint1: CGPoint(x: 0, y: 12.66), controlPoint2: CGPoint(x: 1.92, y: 15.49))
                _01.addLine(to: CGPoint(x: 5.25, y: 15.49))
                _01.close()
                _01.move(to: CGPoint(x: 5.25, y: 13.88))
                _01.addCurve(to: CGPoint(x: 1.86, y: 7.74), controlPoint1: CGPoint(x: 3.07, y: 13.88), controlPoint2: CGPoint(x: 1.86, y: 11.7))
                _01.addCurve(to: CGPoint(x: 5.25, y: 1.62), controlPoint1: CGPoint(x: 1.86, y: 3.83), controlPoint2: CGPoint(x: 3.09, y: 1.62))
                _01.addCurve(to: CGPoint(x: 8.62, y: 7.74), controlPoint1: CGPoint(x: 7.41, y: 1.62), controlPoint2: CGPoint(x: 8.62, y: 3.81))
                _01.addCurve(to: CGPoint(x: 5.25, y: 13.88), controlPoint1: CGPoint(x: 8.62, y: 11.71), controlPoint2: CGPoint(x: 7.43, y: 13.88))
                _01.addLine(to: CGPoint(x: 5.25, y: 13.88))
                _01.close()
                _01.move(to: CGPoint(x: 16.86, y: 15.15))
                _01.addLine(to: CGPoint(x: 18.71, y: 15.15))
                _01.addLine(to: CGPoint(x: 18.71, y: 0.35))
                _01.addLine(to: CGPoint(x: 16.87, y: 0.35))
                _01.addLine(to: CGPoint(x: 12.93, y: 3.18))
                _01.addLine(to: CGPoint(x: 12.93, y: 5.13))
                _01.addLine(to: CGPoint(x: 16.7, y: 2.4))
                _01.addLine(to: CGPoint(x: 16.86, y: 2.4))
                _01.addLine(to: CGPoint(x: 16.86, y: 15.15))
                _01.close()
                context.saveGState()
                context.translateBy(x: 199.37, y: 0.35)
                _01.usesEvenOddFillRule = true
                UIColor(white: 0.6, alpha: 1).setFill()
                _01.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Fri 11 Sep + 12 + 02
            context.saveGState()
            context.setAlpha(0.8)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 97, y: 140)
                
                /// Fri 11 Sep
                let fri11Sep = UIBezierPath()
                fri11Sep.move(to: CGPoint(x: 2.26, y: 7.05))
                fri11Sep.addLine(to: CGPoint(x: 8.05, y: 7.05))
                fri11Sep.addLine(to: CGPoint(x: 7.94, y: 5.81))
                fri11Sep.addLine(to: CGPoint(x: 2.14, y: 5.81))
                fri11Sep.addLine(to: CGPoint(x: 1.76, y: 1.98))
                fri11Sep.addLine(to: CGPoint(x: 8.11, y: 1.98))
                fri11Sep.addLine(to: CGPoint(x: 7.99, y: 0.73))
                fri11Sep.addLine(to: CGPoint(x: 0, y: 0.73))
                fri11Sep.addLine(to: CGPoint(x: 1.11, y: 11.88))
                fri11Sep.addLine(to: CGPoint(x: 2.73, y: 11.88))
                fri11Sep.addLine(to: CGPoint(x: 2.26, y: 7.05))
                fri11Sep.close()
                fri11Sep.move(to: CGPoint(x: 12.87, y: 11.88))
                fri11Sep.addLine(to: CGPoint(x: 12.42, y: 6.72))
                fri11Sep.addCurve(to: CGPoint(x: 14.82, y: 4.69), controlPoint1: CGPoint(x: 12.32, y: 5.54), controlPoint2: CGPoint(x: 13.33, y: 4.69))
                fri11Sep.addCurve(to: CGPoint(x: 15.83, y: 4.77), controlPoint1: CGPoint(x: 15.13, y: 4.69), controlPoint2: CGPoint(x: 15.7, y: 4.74))
                fri11Sep.addLine(to: CGPoint(x: 15.72, y: 3.44))
                fri11Sep.addCurve(to: CGPoint(x: 14.93, y: 3.4), controlPoint1: CGPoint(x: 15.51, y: 3.42), controlPoint2: CGPoint(x: 15.18, y: 3.4))
                fri11Sep.addCurve(to: CGPoint(x: 12.33, y: 4.79), controlPoint1: CGPoint(x: 13.63, y: 3.4), controlPoint2: CGPoint(x: 12.55, y: 3.97))
                fri11Sep.addLine(to: CGPoint(x: 12.18, y: 4.79))
                fri11Sep.addLine(to: CGPoint(x: 12.07, y: 3.55))
                fri11Sep.addLine(to: CGPoint(x: 10.58, y: 3.55))
                fri11Sep.addLine(to: CGPoint(x: 11.32, y: 11.88))
                fri11Sep.addLine(to: CGPoint(x: 12.87, y: 11.88))
                fri11Sep.close()
                fri11Sep.move(to: CGPoint(x: 19.96, y: 11.88))
                fri11Sep.addLine(to: CGPoint(x: 19.3, y: 3.55))
                fri11Sep.addLine(to: CGPoint(x: 17.74, y: 3.55))
                fri11Sep.addLine(to: CGPoint(x: 18.41, y: 11.88))
                fri11Sep.addLine(to: CGPoint(x: 19.96, y: 11.88))
                fri11Sep.close()
                fri11Sep.move(to: CGPoint(x: 19.4, y: 0.93))
                fri11Sep.addCurve(to: CGPoint(x: 18.23, y: 0), controlPoint1: CGPoint(x: 19.36, y: 0.42), controlPoint2: CGPoint(x: 18.84, y: 0))
                fri11Sep.addCurve(to: CGPoint(x: 17.21, y: 0.93), controlPoint1: CGPoint(x: 17.63, y: 0), controlPoint2: CGPoint(x: 17.17, y: 0.42))
                fri11Sep.addCurve(to: CGPoint(x: 18.38, y: 1.86), controlPoint1: CGPoint(x: 17.26, y: 1.44), controlPoint2: CGPoint(x: 17.78, y: 1.86))
                fri11Sep.addCurve(to: CGPoint(x: 19.4, y: 0.93), controlPoint1: CGPoint(x: 18.99, y: 1.86), controlPoint2: CGPoint(x: 19.44, y: 1.44))
                fri11Sep.close()
                fri11Sep.move(to: CGPoint(x: 32.54, y: 11.88))
                fri11Sep.addLine(to: CGPoint(x: 31.8, y: 0.73))
                fri11Sep.addLine(to: CGPoint(x: 30.17, y: 0.73))
                fri11Sep.addLine(to: CGPoint(x: 26.82, y: 2.86))
                fri11Sep.addLine(to: CGPoint(x: 26.92, y: 4.33))
                fri11Sep.addLine(to: CGPoint(x: 30.12, y: 2.27))
                fri11Sep.addLine(to: CGPoint(x: 30.27, y: 2.27))
                fri11Sep.addLine(to: CGPoint(x: 30.92, y: 11.88))
                fri11Sep.addLine(to: CGPoint(x: 32.54, y: 11.88))
                fri11Sep.close()
                fri11Sep.move(to: CGPoint(x: 41, y: 11.88))
                fri11Sep.addLine(to: CGPoint(x: 40.36, y: 0.73))
                fri11Sep.addLine(to: CGPoint(x: 38.72, y: 0.73))
                fri11Sep.addLine(to: CGPoint(x: 35.35, y: 2.86))
                fri11Sep.addLine(to: CGPoint(x: 35.45, y: 4.33))
                fri11Sep.addLine(to: CGPoint(x: 38.66, y: 2.27))
                fri11Sep.addLine(to: CGPoint(x: 38.81, y: 2.27))
                fri11Sep.addLine(to: CGPoint(x: 39.37, y: 11.88))
                fri11Sep.addLine(to: CGPoint(x: 41, y: 11.88))
                fri11Sep.close()
                fri11Sep.move(to: CGPoint(x: 54.2, y: 12.15))
                fri11Sep.addCurve(to: CGPoint(x: 58.93, y: 8.79), controlPoint1: CGPoint(x: 57.18, y: 12.15), controlPoint2: CGPoint(x: 59.01, y: 10.84))
                fri11Sep.addCurve(to: CGPoint(x: 55.01, y: 5.67), controlPoint1: CGPoint(x: 58.87, y: 7.15), controlPoint2: CGPoint(x: 57.75, y: 6.25))
                fri11Sep.addLine(to: CGPoint(x: 53.63, y: 5.37))
                fri11Sep.addCurve(to: CGPoint(x: 51.02, y: 3.59), controlPoint1: CGPoint(x: 51.8, y: 4.97), controlPoint2: CGPoint(x: 51.06, y: 4.47))
                fri11Sep.addCurve(to: CGPoint(x: 53.84, y: 1.72), controlPoint1: CGPoint(x: 50.96, y: 2.47), controlPoint2: CGPoint(x: 52.09, y: 1.72))
                fri11Sep.addCurve(to: CGPoint(x: 56.89, y: 3.55), controlPoint1: CGPoint(x: 55.48, y: 1.72), controlPoint2: CGPoint(x: 56.62, y: 2.4))
                fri11Sep.addLine(to: CGPoint(x: 58.54, y: 3.55))
                fri11Sep.addCurve(to: CGPoint(x: 53.84, y: 0.46), controlPoint1: CGPoint(x: 58.33, y: 1.75), controlPoint2: CGPoint(x: 56.39, y: 0.46))
                fri11Sep.addCurve(to: CGPoint(x: 49.34, y: 3.64), controlPoint1: CGPoint(x: 51.05, y: 0.46), controlPoint2: CGPoint(x: 49.24, y: 1.75))
                fri11Sep.addCurve(to: CGPoint(x: 52.87, y: 6.65), controlPoint1: CGPoint(x: 49.41, y: 5.23), controlPoint2: CGPoint(x: 50.48, y: 6.14))
                fri11Sep.addLine(to: CGPoint(x: 54.57, y: 7.02))
                fri11Sep.addCurve(to: CGPoint(x: 57.27, y: 8.96), controlPoint1: CGPoint(x: 56.39, y: 7.41), controlPoint2: CGPoint(x: 57.23, y: 8.01))
                fri11Sep.addCurve(to: CGPoint(x: 54.3, y: 10.88), controlPoint1: CGPoint(x: 57.31, y: 10.07), controlPoint2: CGPoint(x: 56.05, y: 10.88))
                fri11Sep.addCurve(to: CGPoint(x: 50.86, y: 8.97), controlPoint1: CGPoint(x: 52.45, y: 10.88), controlPoint2: CGPoint(x: 51.11, y: 10.14))
                fri11Sep.addLine(to: CGPoint(x: 49.21, y: 8.97))
                fri11Sep.addCurve(to: CGPoint(x: 54.2, y: 12.15), controlPoint1: CGPoint(x: 49.48, y: 10.89), controlPoint2: CGPoint(x: 51.44, y: 12.15))
                fri11Sep.close()
                fri11Sep.move(to: CGPoint(x: 67.74, y: 7.03))
                fri11Sep.addLine(to: CGPoint(x: 62.35, y: 7.03))
                fri11Sep.addCurve(to: CGPoint(x: 65.04, y: 4.58), controlPoint1: CGPoint(x: 62.42, y: 5.55), controlPoint2: CGPoint(x: 63.47, y: 4.58))
                fri11Sep.addCurve(to: CGPoint(x: 67.74, y: 7.03), controlPoint1: CGPoint(x: 66.59, y: 4.58), controlPoint2: CGPoint(x: 67.66, y: 5.55))
                fri11Sep.close()
                fri11Sep.move(to: CGPoint(x: 65.29, y: 10.85))
                fri11Sep.addCurve(to: CGPoint(x: 62.39, y: 8.16), controlPoint1: CGPoint(x: 63.64, y: 10.85), controlPoint2: CGPoint(x: 62.53, y: 9.81))
                fri11Sep.addLine(to: CGPoint(x: 62.39, y: 8.1))
                fri11Sep.addLine(to: CGPoint(x: 69.41, y: 8.1))
                fri11Sep.addLine(to: CGPoint(x: 69.39, y: 7.59))
                fri11Sep.addCurve(to: CGPoint(x: 65.02, y: 3.4), controlPoint1: CGPoint(x: 69.32, y: 5), controlPoint2: CGPoint(x: 67.67, y: 3.4))
                fri11Sep.addCurve(to: CGPoint(x: 60.75, y: 7.72), controlPoint1: CGPoint(x: 62.32, y: 3.4), controlPoint2: CGPoint(x: 60.66, y: 5.1))
                fri11Sep.addCurve(to: CGPoint(x: 65.29, y: 12.03), controlPoint1: CGPoint(x: 60.85, y: 10.36), controlPoint2: CGPoint(x: 62.6, y: 12.03))
                fri11Sep.addCurve(to: CGPoint(x: 69.33, y: 9.73), controlPoint1: CGPoint(x: 67.42, y: 12.03), controlPoint2: CGPoint(x: 68.9, y: 11.16))
                fri11Sep.addLine(to: CGPoint(x: 67.77, y: 9.73))
                fri11Sep.addCurve(to: CGPoint(x: 65.29, y: 10.85), controlPoint1: CGPoint(x: 67.38, y: 10.46), controlPoint2: CGPoint(x: 66.55, y: 10.85))
                fri11Sep.close()
                fri11Sep.move(to: CGPoint(x: 73.25, y: 4.94))
                fri11Sep.addLine(to: CGPoint(x: 73.1, y: 4.94))
                fri11Sep.addLine(to: CGPoint(x: 73.07, y: 3.55))
                fri11Sep.addLine(to: CGPoint(x: 71.58, y: 3.55))
                fri11Sep.addLine(to: CGPoint(x: 71.86, y: 14.67))
                fri11Sep.addLine(to: CGPoint(x: 73.4, y: 14.67))
                fri11Sep.addLine(to: CGPoint(x: 73.31, y: 10.63))
                fri11Sep.addLine(to: CGPoint(x: 73.45, y: 10.63))
                fri11Sep.addCurve(to: CGPoint(x: 76.53, y: 12.03), controlPoint1: CGPoint(x: 74.01, y: 11.51), controlPoint2: CGPoint(x: 75.14, y: 12.03))
                fri11Sep.addCurve(to: CGPoint(x: 80.54, y: 7.72), controlPoint1: CGPoint(x: 79, y: 12.03), controlPoint2: CGPoint(x: 80.58, y: 10.32))
                fri11Sep.addCurve(to: CGPoint(x: 76.35, y: 3.4), controlPoint1: CGPoint(x: 80.5, y: 5.09), controlPoint2: CGPoint(x: 78.85, y: 3.4))
                fri11Sep.addCurve(to: CGPoint(x: 73.25, y: 4.94), controlPoint1: CGPoint(x: 75.01, y: 3.4), controlPoint2: CGPoint(x: 73.85, y: 3.98))
                fri11Sep.close()
                fri11Sep.move(to: CGPoint(x: 73.19, y: 7.72))
                fri11Sep.addCurve(to: CGPoint(x: 76.01, y: 4.6), controlPoint1: CGPoint(x: 73.15, y: 5.8), controlPoint2: CGPoint(x: 74.24, y: 4.6))
                fri11Sep.addCurve(to: CGPoint(x: 78.93, y: 7.72), controlPoint1: CGPoint(x: 77.8, y: 4.6), controlPoint2: CGPoint(x: 78.9, y: 5.77))
                fri11Sep.addCurve(to: CGPoint(x: 76.13, y: 10.83), controlPoint1: CGPoint(x: 78.96, y: 9.66), controlPoint2: CGPoint(x: 77.92, y: 10.83))
                fri11Sep.addCurve(to: CGPoint(x: 73.19, y: 7.72), controlPoint1: CGPoint(x: 74.38, y: 10.83), controlPoint2: CGPoint(x: 73.24, y: 9.63))
                fri11Sep.close()
                context.saveGState()
                context.translateBy(x: 0.49, y: 0.2)
                fri11Sep.usesEvenOddFillRule = true
                UIColor(white: 0.6, alpha: 1).setFill()
                fri11Sep.fill()
                context.restoreGState()
                
                /// 12
                let _12 = UIBezierPath()
                _12.move(to: CGPoint(x: 4.95, y: 11.42))
                _12.addLine(to: CGPoint(x: 5.2, y: 0.26))
                _12.addLine(to: CGPoint(x: 3.57, y: 0.26))
                _12.addLine(to: CGPoint(x: 0.03, y: 2.4))
                _12.addLine(to: CGPoint(x: 0, y: 3.87))
                _12.addLine(to: CGPoint(x: 3.38, y: 1.81))
                _12.addLine(to: CGPoint(x: 3.53, y: 1.81))
                _12.addLine(to: CGPoint(x: 3.32, y: 11.42))
                _12.addLine(to: CGPoint(x: 4.95, y: 11.42))
                _12.close()
                _12.move(to: CGPoint(x: 10.38, y: 3.41))
                _12.addCurve(to: CGPoint(x: 13.02, y: 1.21), controlPoint1: CGPoint(x: 10.42, y: 2.09), controlPoint2: CGPoint(x: 11.48, y: 1.21))
                _12.addCurve(to: CGPoint(x: 15.53, y: 3.19), controlPoint1: CGPoint(x: 14.47, y: 1.21), controlPoint2: CGPoint(x: 15.56, y: 2.07))
                _12.addCurve(to: CGPoint(x: 13.33, y: 6.25), controlPoint1: CGPoint(x: 15.5, y: 4.08), controlPoint2: CGPoint(x: 15.07, y: 4.69))
                _12.addLine(to: CGPoint(x: 8.69, y: 10.46))
                _12.addLine(to: CGPoint(x: 8.67, y: 11.42))
                _12.addLine(to: CGPoint(x: 17.09, y: 11.42))
                _12.addLine(to: CGPoint(x: 17.14, y: 10.17))
                _12.addLine(to: CGPoint(x: 11.03, y: 10.17))
                _12.addLine(to: CGPoint(x: 11.03, y: 10.04))
                _12.addLine(to: CGPoint(x: 14.26, y: 7.16))
                _12.addCurve(to: CGPoint(x: 17.17, y: 3.13), controlPoint1: CGPoint(x: 16.48, y: 5.2), controlPoint2: CGPoint(x: 17.13, y: 4.29))
                _12.addCurve(to: CGPoint(x: 13.11, y: 0), controlPoint1: CGPoint(x: 17.23, y: 1.36), controlPoint2: CGPoint(x: 15.47, y: 0))
                _12.addCurve(to: CGPoint(x: 8.8, y: 3.4), controlPoint1: CGPoint(x: 10.66, y: 0), controlPoint2: CGPoint(x: 8.85, y: 1.42))
                _12.addLine(to: CGPoint(x: 10.38, y: 3.41))
                _12.close()
                context.saveGState()
                context.translateBy(x: 114.8, y: 0.66)
                _12.usesEvenOddFillRule = true
                UIColor(white: 0.6, alpha: 1).setFill()
                _12.fill()
                context.restoreGState()
                
                /// 02
                let _02 = UIBezierPath()
                _02.move(to: CGPoint(x: 9.31, y: 5.86))
                _02.addCurve(to: CGPoint(x: 5.16, y: 0), controlPoint1: CGPoint(x: 9.63, y: 2.16), controlPoint2: CGPoint(x: 8.09, y: 0))
                _02.addCurve(to: CGPoint(x: 0.03, y: 5.84), controlPoint1: CGPoint(x: 2.21, y: 0), controlPoint2: CGPoint(x: 0.32, y: 2.16))
                _02.addCurve(to: CGPoint(x: 4.2, y: 11.68), controlPoint1: CGPoint(x: -0.25, y: 9.55), controlPoint2: CGPoint(x: 1.27, y: 11.68))
                _02.addCurve(to: CGPoint(x: 9.31, y: 5.86), controlPoint1: CGPoint(x: 7.12, y: 11.68), controlPoint2: CGPoint(x: 8.99, y: 9.56))
                _02.close()
                _02.move(to: CGPoint(x: 1.68, y: 5.84))
                _02.addCurve(to: CGPoint(x: 5.06, y: 1.22), controlPoint1: CGPoint(x: 1.91, y: 2.89), controlPoint2: CGPoint(x: 3.13, y: 1.22))
                _02.addCurve(to: CGPoint(x: 7.67, y: 5.84), controlPoint1: CGPoint(x: 6.98, y: 1.22), controlPoint2: CGPoint(x: 7.92, y: 2.88))
                _02.addCurve(to: CGPoint(x: 4.3, y: 10.47), controlPoint1: CGPoint(x: 7.41, y: 8.83), controlPoint2: CGPoint(x: 6.22, y: 10.47))
                _02.addCurve(to: CGPoint(x: 1.68, y: 5.84), controlPoint1: CGPoint(x: 2.38, y: 10.47), controlPoint2: CGPoint(x: 1.44, y: 8.82))
                _02.close()
                _02.move(to: CGPoint(x: 13.54, y: 3.41))
                _02.addCurve(to: CGPoint(x: 16.32, y: 1.21), controlPoint1: CGPoint(x: 13.66, y: 2.09), controlPoint2: CGPoint(x: 14.78, y: 1.21))
                _02.addCurve(to: CGPoint(x: 18.7, y: 3.19), controlPoint1: CGPoint(x: 17.77, y: 1.21), controlPoint2: CGPoint(x: 18.81, y: 2.07))
                _02.addCurve(to: CGPoint(x: 16.31, y: 6.25), controlPoint1: CGPoint(x: 18.62, y: 4.08), controlPoint2: CGPoint(x: 18.15, y: 4.69))
                _02.addLine(to: CGPoint(x: 11.41, y: 10.46))
                _02.addLine(to: CGPoint(x: 11.33, y: 11.42))
                _02.addLine(to: CGPoint(x: 19.75, y: 11.42))
                _02.addLine(to: CGPoint(x: 19.87, y: 10.17))
                _02.addLine(to: CGPoint(x: 13.77, y: 10.17))
                _02.addLine(to: CGPoint(x: 13.78, y: 10.04))
                _02.addLine(to: CGPoint(x: 17.19, y: 7.16))
                _02.addCurve(to: CGPoint(x: 20.34, y: 3.13), controlPoint1: CGPoint(x: 19.53, y: 5.2), controlPoint2: CGPoint(x: 20.23, y: 4.29))
                _02.addCurve(to: CGPoint(x: 16.48, y: 0), controlPoint1: CGPoint(x: 20.52, y: 1.36), controlPoint2: CGPoint(x: 18.84, y: 0))
                _02.addCurve(to: CGPoint(x: 11.96, y: 3.4), controlPoint1: CGPoint(x: 14.03, y: 0), controlPoint2: CGPoint(x: 12.13, y: 1.42))
                _02.addLine(to: CGPoint(x: 13.54, y: 3.41))
                _02.close()
                context.saveGState()
                context.translateBy(x: 171.55, y: 0.66)
                _02.usesEvenOddFillRule = true
                UIColor(white: 0.6, alpha: 1).setFill()
                _02.fill()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Sat 12 Sep + 13 + 03
            context.saveGState()
            context.setAlpha(0.6)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 93.5, y: 161)
                
                /// Sat 12 Sep
                let sat12Sep = UIBezierPath()
                sat12Sep.move(to: CGPoint(x: 5.09, y: 8.05))
                sat12Sep.addCurve(to: CGPoint(x: 9.38, y: 5.74), controlPoint1: CGPoint(x: 7.91, y: 8.05), controlPoint2: CGPoint(x: 9.57, y: 7.15))
                sat12Sep.addCurve(to: CGPoint(x: 5.5, y: 3.59), controlPoint1: CGPoint(x: 9.23, y: 4.61), controlPoint2: CGPoint(x: 8.12, y: 3.99))
                sat12Sep.addLine(to: CGPoint(x: 4.17, y: 3.38))
                sat12Sep.addCurve(to: CGPoint(x: 1.6, y: 2.16), controlPoint1: CGPoint(x: 2.42, y: 3.11), controlPoint2: CGPoint(x: 1.69, y: 2.76))
                sat12Sep.addCurve(to: CGPoint(x: 4.17, y: 0.87), controlPoint1: CGPoint(x: 1.49, y: 1.38), controlPoint2: CGPoint(x: 2.51, y: 0.87))
                sat12Sep.addCurve(to: CGPoint(x: 7.16, y: 2.13), controlPoint1: CGPoint(x: 5.72, y: 0.87), controlPoint2: CGPoint(x: 6.84, y: 1.34))
                sat12Sep.addLine(to: CGPoint(x: 8.72, y: 2.13))
                sat12Sep.addCurve(to: CGPoint(x: 4.1, y: 0), controlPoint1: CGPoint(x: 8.42, y: 0.88), controlPoint2: CGPoint(x: 6.51, y: 0))
                sat12Sep.addCurve(to: CGPoint(x: 0.02, y: 2.19), controlPoint1: CGPoint(x: 1.46, y: 0), controlPoint2: CGPoint(x: -0.18, y: 0.88))
                sat12Sep.addCurve(to: CGPoint(x: 3.53, y: 4.26), controlPoint1: CGPoint(x: 0.18, y: 3.28), controlPoint2: CGPoint(x: 1.24, y: 3.91))
                sat12Sep.addLine(to: CGPoint(x: 5.15, y: 4.52))
                sat12Sep.addCurve(to: CGPoint(x: 7.81, y: 5.85), controlPoint1: CGPoint(x: 6.9, y: 4.78), controlPoint2: CGPoint(x: 7.72, y: 5.2))
                sat12Sep.addCurve(to: CGPoint(x: 5.12, y: 7.18), controlPoint1: CGPoint(x: 7.92, y: 6.62), controlPoint2: CGPoint(x: 6.77, y: 7.18))
                sat12Sep.addCurve(to: CGPoint(x: 1.75, y: 5.86), controlPoint1: CGPoint(x: 3.36, y: 7.18), controlPoint2: CGPoint(x: 2.06, y: 6.66))
                sat12Sep.addLine(to: CGPoint(x: 0.2, y: 5.86))
                sat12Sep.addCurve(to: CGPoint(x: 5.09, y: 8.05), controlPoint1: CGPoint(x: 0.56, y: 7.19), controlPoint2: CGPoint(x: 2.48, y: 8.05))
                sat12Sep.close()
                sat12Sep.move(to: CGPoint(x: 12.64, y: 6.24))
                sat12Sep.addCurve(to: CGPoint(x: 14.54, y: 5.3), controlPoint1: CGPoint(x: 12.57, y: 5.66), controlPoint2: CGPoint(x: 13.14, y: 5.36))
                sat12Sep.addLine(to: CGPoint(x: 17.01, y: 5.2))
                sat12Sep.addLine(to: CGPoint(x: 17.08, y: 5.73))
                sat12Sep.addCurve(to: CGPoint(x: 14.62, y: 7.16), controlPoint1: CGPoint(x: 17.18, y: 6.55), controlPoint2: CGPoint(x: 16.13, y: 7.16))
                sat12Sep.addCurve(to: CGPoint(x: 12.64, y: 6.24), controlPoint1: CGPoint(x: 13.55, y: 7.16), controlPoint2: CGPoint(x: 12.72, y: 6.82))
                sat12Sep.close()
                sat12Sep.move(to: CGPoint(x: 17.17, y: 7.02))
                sat12Sep.addLine(to: CGPoint(x: 17.3, y: 7.02))
                sat12Sep.addLine(to: CGPoint(x: 17.41, y: 7.87))
                sat12Sep.addLine(to: CGPoint(x: 18.81, y: 7.87))
                sat12Sep.addLine(to: CGPoint(x: 18.33, y: 3.94))
                sat12Sep.addCurve(to: CGPoint(x: 14.58, y: 2.02), controlPoint1: CGPoint(x: 18.19, y: 2.74), controlPoint2: CGPoint(x: 16.84, y: 2.02))
                sat12Sep.addCurve(to: CGPoint(x: 11.13, y: 3.55), controlPoint1: CGPoint(x: 12.6, y: 2.02), controlPoint2: CGPoint(x: 11.21, y: 2.63))
                sat12Sep.addLine(to: CGPoint(x: 12.63, y: 3.55))
                sat12Sep.addCurve(to: CGPoint(x: 14.63, y: 2.84), controlPoint1: CGPoint(x: 12.78, y: 3.1), controlPoint2: CGPoint(x: 13.52, y: 2.84))
                sat12Sep.addCurve(to: CGPoint(x: 16.86, y: 3.94), controlPoint1: CGPoint(x: 16.01, y: 2.84), controlPoint2: CGPoint(x: 16.77, y: 3.23))
                sat12Sep.addLine(to: CGPoint(x: 16.92, y: 4.46))
                sat12Sep.addLine(to: CGPoint(x: 14.27, y: 4.56))
                sat12Sep.addCurve(to: CGPoint(x: 11.12, y: 6.26), controlPoint1: CGPoint(x: 12.13, y: 4.64), controlPoint2: CGPoint(x: 10.99, y: 5.23))
                sat12Sep.addCurve(to: CGPoint(x: 14.45, y: 7.97), controlPoint1: CGPoint(x: 11.26, y: 7.31), controlPoint2: CGPoint(x: 12.67, y: 7.97))
                sat12Sep.addCurve(to: CGPoint(x: 17.17, y: 7.02), controlPoint1: CGPoint(x: 15.68, y: 7.97), controlPoint2: CGPoint(x: 16.64, y: 7.63))
                sat12Sep.close()
                sat12Sep.move(to: CGPoint(x: 21.32, y: 2.13))
                sat12Sep.addLine(to: CGPoint(x: 19.82, y: 2.13))
                sat12Sep.addLine(to: CGPoint(x: 19.91, y: 2.89))
                sat12Sep.addLine(to: CGPoint(x: 21.41, y: 2.89))
                sat12Sep.addLine(to: CGPoint(x: 21.81, y: 6.38))
                sat12Sep.addCurve(to: CGPoint(x: 24.64, y: 7.91), controlPoint1: CGPoint(x: 21.94, y: 7.47), controlPoint2: CGPoint(x: 22.75, y: 7.91))
                sat12Sep.addCurve(to: CGPoint(x: 25.5, y: 7.86), controlPoint1: CGPoint(x: 24.93, y: 7.91), controlPoint2: CGPoint(x: 25.21, y: 7.89))
                sat12Sep.addLine(to: CGPoint(x: 25.41, y: 7.08))
                sat12Sep.addCurve(to: CGPoint(x: 24.73, y: 7.11), controlPoint1: CGPoint(x: 25.14, y: 7.1), controlPoint2: CGPoint(x: 24.99, y: 7.11))
                sat12Sep.addCurve(to: CGPoint(x: 23.25, y: 6.14), controlPoint1: CGPoint(x: 23.77, y: 7.11), controlPoint2: CGPoint(x: 23.33, y: 6.82))
                sat12Sep.addLine(to: CGPoint(x: 22.89, y: 2.89))
                sat12Sep.addLine(to: CGPoint(x: 24.95, y: 2.89))
                sat12Sep.addLine(to: CGPoint(x: 24.87, y: 2.13))
                sat12Sep.addLine(to: CGPoint(x: 22.8, y: 2.13))
                sat12Sep.addLine(to: CGPoint(x: 22.63, y: 0.64))
                sat12Sep.addLine(to: CGPoint(x: 21.15, y: 0.64))
                sat12Sep.addLine(to: CGPoint(x: 21.32, y: 2.13))
                sat12Sep.close()
                sat12Sep.move(to: CGPoint(x: 36.81, y: 7.87))
                sat12Sep.addLine(to: CGPoint(x: 36.1, y: 0.18))
                sat12Sep.addLine(to: CGPoint(x: 34.56, y: 0.18))
                sat12Sep.addLine(to: CGPoint(x: 31.39, y: 1.65))
                sat12Sep.addLine(to: CGPoint(x: 31.49, y: 2.66))
                sat12Sep.addLine(to: CGPoint(x: 34.51, y: 1.25))
                sat12Sep.addLine(to: CGPoint(x: 34.65, y: 1.25))
                sat12Sep.addLine(to: CGPoint(x: 35.28, y: 7.87))
                sat12Sep.addLine(to: CGPoint(x: 36.81, y: 7.87))
                sat12Sep.close()
                sat12Sep.move(to: CGPoint(x: 41.27, y: 2.35))
                sat12Sep.addCurve(to: CGPoint(x: 43.58, y: 0.84), controlPoint1: CGPoint(x: 41.19, y: 1.44), controlPoint2: CGPoint(x: 42.13, y: 0.84))
                sat12Sep.addCurve(to: CGPoint(x: 46.12, y: 2.19), controlPoint1: CGPoint(x: 44.95, y: 0.84), controlPoint2: CGPoint(x: 46.06, y: 1.43))
                sat12Sep.addCurve(to: CGPoint(x: 44.3, y: 4.3), controlPoint1: CGPoint(x: 46.17, y: 2.81), controlPoint2: CGPoint(x: 45.81, y: 3.23))
                sat12Sep.addLine(to: CGPoint(x: 40.27, y: 7.21))
                sat12Sep.addLine(to: CGPoint(x: 40.33, y: 7.87))
                sat12Sep.addLine(to: CGPoint(x: 48.3, y: 7.87))
                sat12Sep.addLine(to: CGPoint(x: 48.24, y: 7))
                sat12Sep.addLine(to: CGPoint(x: 42.46, y: 7))
                sat12Sep.addLine(to: CGPoint(x: 42.45, y: 6.92))
                sat12Sep.addLine(to: CGPoint(x: 45.26, y: 4.93))
                sat12Sep.addCurve(to: CGPoint(x: 47.67, y: 2.16), controlPoint1: CGPoint(x: 47.19, y: 3.58), controlPoint2: CGPoint(x: 47.73, y: 2.96))
                sat12Sep.addCurve(to: CGPoint(x: 43.56, y: 0), controlPoint1: CGPoint(x: 47.58, y: 0.94), controlPoint2: CGPoint(x: 45.79, y: 0))
                sat12Sep.addCurve(to: CGPoint(x: 39.77, y: 2.34), controlPoint1: CGPoint(x: 41.24, y: 0), controlPoint2: CGPoint(x: 39.65, y: 0.98))
                sat12Sep.addLine(to: CGPoint(x: 41.27, y: 2.35))
                sat12Sep.close()
                sat12Sep.move(to: CGPoint(x: 59.7, y: 8.05))
                sat12Sep.addCurve(to: CGPoint(x: 64.19, y: 5.74), controlPoint1: CGPoint(x: 62.52, y: 8.05), controlPoint2: CGPoint(x: 64.26, y: 7.15))
                sat12Sep.addCurve(to: CGPoint(x: 60.48, y: 3.59), controlPoint1: CGPoint(x: 64.13, y: 4.61), controlPoint2: CGPoint(x: 63.07, y: 3.99))
                sat12Sep.addLine(to: CGPoint(x: 59.17, y: 3.38))
                sat12Sep.addCurve(to: CGPoint(x: 56.71, y: 2.16), controlPoint1: CGPoint(x: 57.44, y: 3.11), controlPoint2: CGPoint(x: 56.74, y: 2.76))
                sat12Sep.addCurve(to: CGPoint(x: 59.38, y: 0.87), controlPoint1: CGPoint(x: 56.66, y: 1.38), controlPoint2: CGPoint(x: 57.72, y: 0.87))
                sat12Sep.addCurve(to: CGPoint(x: 62.27, y: 2.13), controlPoint1: CGPoint(x: 60.93, y: 0.87), controlPoint2: CGPoint(x: 62.01, y: 1.34))
                sat12Sep.addLine(to: CGPoint(x: 63.82, y: 2.13))
                sat12Sep.addCurve(to: CGPoint(x: 59.38, y: 0), controlPoint1: CGPoint(x: 63.63, y: 0.88), controlPoint2: CGPoint(x: 61.79, y: 0))
                sat12Sep.addCurve(to: CGPoint(x: 55.12, y: 2.19), controlPoint1: CGPoint(x: 56.75, y: 0), controlPoint2: CGPoint(x: 55.03, y: 0.88))
                sat12Sep.addCurve(to: CGPoint(x: 58.46, y: 4.26), controlPoint1: CGPoint(x: 55.19, y: 3.28), controlPoint2: CGPoint(x: 56.2, y: 3.91))
                sat12Sep.addLine(to: CGPoint(x: 60.06, y: 4.52))
                sat12Sep.addCurve(to: CGPoint(x: 62.61, y: 5.85), controlPoint1: CGPoint(x: 61.78, y: 4.78), controlPoint2: CGPoint(x: 62.57, y: 5.2))
                sat12Sep.addCurve(to: CGPoint(x: 59.8, y: 7.18), controlPoint1: CGPoint(x: 62.65, y: 6.62), controlPoint2: CGPoint(x: 61.46, y: 7.18))
                sat12Sep.addCurve(to: CGPoint(x: 56.55, y: 5.86), controlPoint1: CGPoint(x: 58.05, y: 7.18), controlPoint2: CGPoint(x: 56.79, y: 6.66))
                sat12Sep.addLine(to: CGPoint(x: 54.99, y: 5.86))
                sat12Sep.addCurve(to: CGPoint(x: 59.7, y: 8.05), controlPoint1: CGPoint(x: 55.24, y: 7.19), controlPoint2: CGPoint(x: 57.09, y: 8.05))
                sat12Sep.close()
                sat12Sep.move(to: CGPoint(x: 72.51, y: 4.52))
                sat12Sep.addLine(to: CGPoint(x: 67.42, y: 4.52))
                sat12Sep.addCurve(to: CGPoint(x: 69.97, y: 2.83), controlPoint1: CGPoint(x: 67.49, y: 3.5), controlPoint2: CGPoint(x: 68.49, y: 2.83))
                sat12Sep.addCurve(to: CGPoint(x: 72.51, y: 4.52), controlPoint1: CGPoint(x: 71.44, y: 2.83), controlPoint2: CGPoint(x: 72.44, y: 3.5))
                sat12Sep.close()
                sat12Sep.move(to: CGPoint(x: 70.2, y: 7.16))
                sat12Sep.addCurve(to: CGPoint(x: 67.45, y: 5.31), controlPoint1: CGPoint(x: 68.63, y: 7.16), controlPoint2: CGPoint(x: 67.58, y: 6.44))
                sat12Sep.addLine(to: CGPoint(x: 67.45, y: 5.26))
                sat12Sep.addLine(to: CGPoint(x: 74.09, y: 5.26))
                sat12Sep.addLine(to: CGPoint(x: 74.08, y: 4.91))
                sat12Sep.addCurve(to: CGPoint(x: 69.95, y: 2.02), controlPoint1: CGPoint(x: 74.02, y: 3.13), controlPoint2: CGPoint(x: 72.45, y: 2.02))
                sat12Sep.addCurve(to: CGPoint(x: 65.91, y: 5), controlPoint1: CGPoint(x: 67.4, y: 2.02), controlPoint2: CGPoint(x: 65.82, y: 3.2))
                sat12Sep.addCurve(to: CGPoint(x: 70.19, y: 7.97), controlPoint1: CGPoint(x: 65.99, y: 6.82), controlPoint2: CGPoint(x: 67.64, y: 7.97))
                sat12Sep.addCurve(to: CGPoint(x: 74.01, y: 6.38), controlPoint1: CGPoint(x: 72.21, y: 7.97), controlPoint2: CGPoint(x: 73.6, y: 7.37))
                sat12Sep.addLine(to: CGPoint(x: 72.54, y: 6.38))
                sat12Sep.addCurve(to: CGPoint(x: 70.2, y: 7.16), controlPoint1: CGPoint(x: 72.18, y: 6.89), controlPoint2: CGPoint(x: 71.38, y: 7.16))
                sat12Sep.close()
                sat12Sep.move(to: CGPoint(x: 77.73, y: 3.08))
                sat12Sep.addLine(to: CGPoint(x: 77.59, y: 3.08))
                sat12Sep.addLine(to: CGPoint(x: 77.56, y: 2.13))
                sat12Sep.addLine(to: CGPoint(x: 76.15, y: 2.13))
                sat12Sep.addLine(to: CGPoint(x: 76.4, y: 9.79))
                sat12Sep.addLine(to: CGPoint(x: 77.86, y: 9.79))
                sat12Sep.addLine(to: CGPoint(x: 77.78, y: 7))
                sat12Sep.addLine(to: CGPoint(x: 77.91, y: 7))
                sat12Sep.addCurve(to: CGPoint(x: 80.82, y: 7.97), controlPoint1: CGPoint(x: 78.44, y: 7.61), controlPoint2: CGPoint(x: 79.5, y: 7.97))
                sat12Sep.addCurve(to: CGPoint(x: 84.63, y: 5), controlPoint1: CGPoint(x: 83.15, y: 7.97), controlPoint2: CGPoint(x: 84.66, y: 6.79))
                sat12Sep.addCurve(to: CGPoint(x: 80.67, y: 2.02), controlPoint1: CGPoint(x: 84.59, y: 3.19), controlPoint2: CGPoint(x: 83.04, y: 2.02))
                sat12Sep.addCurve(to: CGPoint(x: 77.73, y: 3.08), controlPoint1: CGPoint(x: 79.4, y: 2.02), controlPoint2: CGPoint(x: 78.3, y: 2.42))
                sat12Sep.close()
                sat12Sep.move(to: CGPoint(x: 77.67, y: 5))
                sat12Sep.addCurve(to: CGPoint(x: 80.35, y: 2.85), controlPoint1: CGPoint(x: 77.64, y: 3.68), controlPoint2: CGPoint(x: 78.67, y: 2.85))
                sat12Sep.addCurve(to: CGPoint(x: 83.1, y: 5), controlPoint1: CGPoint(x: 82.04, y: 2.85), controlPoint2: CGPoint(x: 83.07, y: 3.65))
                sat12Sep.addCurve(to: CGPoint(x: 80.45, y: 7.14), controlPoint1: CGPoint(x: 83.13, y: 6.34), controlPoint2: CGPoint(x: 82.14, y: 7.14))
                sat12Sep.addCurve(to: CGPoint(x: 77.67, y: 5), controlPoint1: CGPoint(x: 78.79, y: 7.14), controlPoint2: CGPoint(x: 77.71, y: 6.31))
                sat12Sep.close()
                context.saveGState()
                context.translateBy(x: 0.15, y: 0.01)
                sat12Sep.usesEvenOddFillRule = true
                UIColor(white: 0.6, alpha: 1).setFill()
                sat12Sep.fill()
                context.restoreGState()
                
                /// 13
                let _13 = UIBezierPath()
                _13.move(to: CGPoint(x: 4.65, y: 7.87))
                _13.addLine(to: CGPoint(x: 4.94, y: 0.18))
                _13.addLine(to: CGPoint(x: 3.39, y: 0.18))
                _13.addLine(to: CGPoint(x: 0.03, y: 1.65))
                _13.addLine(to: CGPoint(x: 0, y: 2.66))
                _13.addLine(to: CGPoint(x: 3.21, y: 1.25))
                _13.addLine(to: CGPoint(x: 3.34, y: 1.25))
                _13.addLine(to: CGPoint(x: 3.11, y: 7.87))
                _13.addLine(to: CGPoint(x: 4.65, y: 7.87))
                _13.close()
                _13.move(to: CGPoint(x: 12.42, y: 4.33))
                _13.addCurve(to: CGPoint(x: 15.19, y: 5.77), controlPoint1: CGPoint(x: 14.17, y: 4.33), controlPoint2: CGPoint(x: 15.23, y: 4.88))
                _13.addCurve(to: CGPoint(x: 12.33, y: 7.21), controlPoint1: CGPoint(x: 15.14, y: 6.61), controlPoint2: CGPoint(x: 13.96, y: 7.21))
                _13.addCurve(to: CGPoint(x: 9.56, y: 5.86), controlPoint1: CGPoint(x: 10.74, y: 7.21), controlPoint2: CGPoint(x: 9.66, y: 6.69))
                _13.addLine(to: CGPoint(x: 8.07, y: 5.86))
                _13.addCurve(to: CGPoint(x: 12.31, y: 8.05), controlPoint1: CGPoint(x: 8.12, y: 7.18), controlPoint2: CGPoint(x: 9.81, y: 8.05))
                _13.addCurve(to: CGPoint(x: 16.77, y: 5.8), controlPoint1: CGPoint(x: 14.74, y: 8.05), controlPoint2: CGPoint(x: 16.7, y: 7.06))
                _13.addCurve(to: CGPoint(x: 14.17, y: 3.89), controlPoint1: CGPoint(x: 16.83, y: 4.75), controlPoint2: CGPoint(x: 15.85, y: 4.02))
                _13.addLine(to: CGPoint(x: 14.18, y: 3.8))
                _13.addCurve(to: CGPoint(x: 16.45, y: 2.01), controlPoint1: CGPoint(x: 15.54, y: 3.6), controlPoint2: CGPoint(x: 16.4, y: 2.93))
                _13.addCurve(to: CGPoint(x: 12.65, y: 0), controlPoint1: CGPoint(x: 16.51, y: 0.89), controlPoint2: CGPoint(x: 14.82, y: 0))
                _13.addCurve(to: CGPoint(x: 8.48, y: 2.15), controlPoint1: CGPoint(x: 10.27, y: 0), controlPoint2: CGPoint(x: 8.69, y: 0.82))
                _13.addLine(to: CGPoint(x: 9.98, y: 2.15))
                _13.addCurve(to: CGPoint(x: 12.54, y: 0.84), controlPoint1: CGPoint(x: 10.15, y: 1.33), controlPoint2: CGPoint(x: 11.11, y: 0.84))
                _13.addCurve(to: CGPoint(x: 14.86, y: 2.14), controlPoint1: CGPoint(x: 13.98, y: 0.84), controlPoint2: CGPoint(x: 14.91, y: 1.36))
                _13.addCurve(to: CGPoint(x: 12.39, y: 3.5), controlPoint1: CGPoint(x: 14.82, y: 2.94), controlPoint2: CGPoint(x: 13.8, y: 3.5))
                _13.addLine(to: CGPoint(x: 10.88, y: 3.5))
                _13.addLine(to: CGPoint(x: 10.85, y: 4.33))
                _13.addLine(to: CGPoint(x: 12.42, y: 4.33))
                _13.close()
                context.saveGState()
                context.translateBy(x: 118.21, y: 0.01)
                _13.usesEvenOddFillRule = true
                UIColor(white: 0.6, alpha: 1).setFill()
                _13.fill()
                context.restoreGState()
                
                /// 03
                let _03 = UIBezierPath()
                _03.move(to: CGPoint(x: 8.81, y: 4.04))
                _03.addCurve(to: CGPoint(x: 4.93, y: 0), controlPoint1: CGPoint(x: 9.14, y: 1.49), controlPoint2: CGPoint(x: 7.7, y: 0))
                _03.addCurve(to: CGPoint(x: 0.04, y: 4.02), controlPoint1: CGPoint(x: 2.14, y: 0), controlPoint2: CGPoint(x: 0.34, y: 1.49))
                _03.addCurve(to: CGPoint(x: 3.94, y: 8.05), controlPoint1: CGPoint(x: -0.26, y: 6.58), controlPoint2: CGPoint(x: 1.16, y: 8.05))
                _03.addCurve(to: CGPoint(x: 8.81, y: 4.04), controlPoint1: CGPoint(x: 6.7, y: 8.05), controlPoint2: CGPoint(x: 8.48, y: 6.59))
                _03.close()
                _03.move(to: CGPoint(x: 1.59, y: 4.02))
                _03.addCurve(to: CGPoint(x: 4.83, y: 0.84), controlPoint1: CGPoint(x: 1.83, y: 1.99), controlPoint2: CGPoint(x: 3.01, y: 0.84))
                _03.addCurve(to: CGPoint(x: 7.26, y: 4.02), controlPoint1: CGPoint(x: 6.65, y: 0.84), controlPoint2: CGPoint(x: 7.52, y: 1.98))
                _03.addCurve(to: CGPoint(x: 4.04, y: 7.21), controlPoint1: CGPoint(x: 6.99, y: 6.08), controlPoint2: CGPoint(x: 5.86, y: 7.21))
                _03.addCurve(to: CGPoint(x: 1.59, y: 4.02), controlPoint1: CGPoint(x: 2.22, y: 7.21), controlPoint2: CGPoint(x: 1.35, y: 6.08))
                _03.close()
                _03.move(to: CGPoint(x: 15.25, y: 4.33))
                _03.addCurve(to: CGPoint(x: 17.89, y: 5.77), controlPoint1: CGPoint(x: 17.01, y: 4.33), controlPoint2: CGPoint(x: 18.02, y: 4.88))
                _03.addCurve(to: CGPoint(x: 14.9, y: 7.21), controlPoint1: CGPoint(x: 17.77, y: 6.61), controlPoint2: CGPoint(x: 16.53, y: 7.21))
                _03.addCurve(to: CGPoint(x: 12.25, y: 5.86), controlPoint1: CGPoint(x: 13.32, y: 7.21), controlPoint2: CGPoint(x: 12.28, y: 6.69))
                _03.addLine(to: CGPoint(x: 10.76, y: 5.86))
                _03.addCurve(to: CGPoint(x: 14.8, y: 8.05), controlPoint1: CGPoint(x: 10.7, y: 7.18), controlPoint2: CGPoint(x: 12.3, y: 8.05))
                _03.addCurve(to: CGPoint(x: 19.47, y: 5.8), controlPoint1: CGPoint(x: 17.23, y: 8.05), controlPoint2: CGPoint(x: 19.28, y: 7.06))
                _03.addCurve(to: CGPoint(x: 17.04, y: 3.89), controlPoint1: CGPoint(x: 19.62, y: 4.75), controlPoint2: CGPoint(x: 18.71, y: 4.02))
                _03.addLine(to: CGPoint(x: 17.06, y: 3.8))
                _03.addCurve(to: CGPoint(x: 19.49, y: 2.01), controlPoint1: CGPoint(x: 18.44, y: 3.6), controlPoint2: CGPoint(x: 19.36, y: 2.93))
                _03.addCurve(to: CGPoint(x: 15.87, y: 0), controlPoint1: CGPoint(x: 19.65, y: 0.89), controlPoint2: CGPoint(x: 18.05, y: 0))
                _03.addCurve(to: CGPoint(x: 11.51, y: 2.15), controlPoint1: CGPoint(x: 13.5, y: 0), controlPoint2: CGPoint(x: 11.84, y: 0.82))
                _03.addLine(to: CGPoint(x: 13.02, y: 2.15))
                _03.addCurve(to: CGPoint(x: 15.7, y: 0.84), controlPoint1: CGPoint(x: 13.26, y: 1.33), controlPoint2: CGPoint(x: 14.26, y: 0.84))
                _03.addCurve(to: CGPoint(x: 17.9, y: 2.14), controlPoint1: CGPoint(x: 17.13, y: 0.84), controlPoint2: CGPoint(x: 18.01, y: 1.36))
                _03.addCurve(to: CGPoint(x: 15.3, y: 3.5), controlPoint1: CGPoint(x: 17.78, y: 2.94), controlPoint2: CGPoint(x: 16.7, y: 3.5))
                _03.addLine(to: CGPoint(x: 13.79, y: 3.5))
                _03.addLine(to: CGPoint(x: 13.68, y: 4.33))
                _03.addLine(to: CGPoint(x: 15.25, y: 4.33))
                _03.close()
                context.saveGState()
                context.translateBy(x: 173.04, y: 0.01)
                _03.usesEvenOddFillRule = true
                UIColor(white: 0.6, alpha: 1).setFill()
                _03.fill()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Sun 13 Sep + 14 + 04
            context.saveGState()
            context.setAlpha(0.4)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 95, y: 173.5)
                
                /// Sun 13 Sep
                let sun13Sep = UIBezierPath()
                sun13Sep.move(to: CGPoint(x: 4.84, y: 6.07))
                sun13Sep.addCurve(to: CGPoint(x: 8.85, y: 4.33), controlPoint1: CGPoint(x: 7.49, y: 6.07), controlPoint2: CGPoint(x: 9.04, y: 5.39))
                sun13Sep.addCurve(to: CGPoint(x: 5.18, y: 2.71), controlPoint1: CGPoint(x: 8.69, y: 3.47), controlPoint2: CGPoint(x: 7.64, y: 3.01))
                sun13Sep.addLine(to: CGPoint(x: 3.93, y: 2.55))
                sun13Sep.addCurve(to: CGPoint(x: 1.51, y: 1.63), controlPoint1: CGPoint(x: 2.28, y: 2.34), controlPoint2: CGPoint(x: 1.6, y: 2.08))
                sun13Sep.addCurve(to: CGPoint(x: 3.9, y: 0.65), controlPoint1: CGPoint(x: 1.39, y: 1.04), controlPoint2: CGPoint(x: 2.35, y: 0.65))
                sun13Sep.addCurve(to: CGPoint(x: 6.73, y: 1.6), controlPoint1: CGPoint(x: 5.36, y: 0.65), controlPoint2: CGPoint(x: 6.41, y: 1.01))
                sun13Sep.addLine(to: CGPoint(x: 8.19, y: 1.6))
                sun13Sep.addCurve(to: CGPoint(x: 3.83, y: 0), controlPoint1: CGPoint(x: 7.9, y: 0.67), controlPoint2: CGPoint(x: 6.09, y: 0))
                sun13Sep.addCurve(to: CGPoint(x: 0.02, y: 1.65), controlPoint1: CGPoint(x: 1.35, y: 0), controlPoint2: CGPoint(x: -0.18, y: 0.67))
                sun13Sep.addCurve(to: CGPoint(x: 3.34, y: 3.21), controlPoint1: CGPoint(x: 0.18, y: 2.47), controlPoint2: CGPoint(x: 1.18, y: 2.95))
                sun13Sep.addLine(to: CGPoint(x: 4.86, y: 3.41))
                sun13Sep.addCurve(to: CGPoint(x: 7.38, y: 4.41), controlPoint1: CGPoint(x: 6.5, y: 3.61), controlPoint2: CGPoint(x: 7.29, y: 3.92))
                sun13Sep.addCurve(to: CGPoint(x: 4.86, y: 5.41), controlPoint1: CGPoint(x: 7.48, y: 4.99), controlPoint2: CGPoint(x: 6.41, y: 5.41))
                sun13Sep.addCurve(to: CGPoint(x: 1.69, y: 4.42), controlPoint1: CGPoint(x: 3.21, y: 5.41), controlPoint2: CGPoint(x: 1.98, y: 5.02))
                sun13Sep.addLine(to: CGPoint(x: 0.22, y: 4.42))
                sun13Sep.addCurve(to: CGPoint(x: 4.84, y: 6.07), controlPoint1: CGPoint(x: 0.57, y: 5.42), controlPoint2: CGPoint(x: 2.39, y: 6.07))
                sun13Sep.close()
                sun13Sep.move(to: CGPoint(x: 16.11, y: 1.6))
                sun13Sep.addLine(to: CGPoint(x: 16.53, y: 4.17))
                sun13Sep.addCurve(to: CGPoint(x: 14.37, y: 5.38), controlPoint1: CGPoint(x: 16.66, y: 4.92), controlPoint2: CGPoint(x: 15.9, y: 5.38))
                sun13Sep.addCurve(to: CGPoint(x: 12.22, y: 4.24), controlPoint1: CGPoint(x: 12.99, y: 5.38), controlPoint2: CGPoint(x: 12.35, y: 5.02))
                sun13Sep.addLine(to: CGPoint(x: 11.76, y: 1.6))
                sun13Sep.addLine(to: CGPoint(x: 10.37, y: 1.6))
                sun13Sep.addLine(to: CGPoint(x: 10.87, y: 4.41))
                sun13Sep.addCurve(to: CGPoint(x: 14.1, y: 6.01), controlPoint1: CGPoint(x: 11.05, y: 5.43), controlPoint2: CGPoint(x: 12.16, y: 6.01))
                sun13Sep.addCurve(to: CGPoint(x: 16.65, y: 5.25), controlPoint1: CGPoint(x: 15.42, y: 6.01), controlPoint2: CGPoint(x: 16.29, y: 5.74))
                sun13Sep.addLine(to: CGPoint(x: 16.78, y: 5.25))
                sun13Sep.addLine(to: CGPoint(x: 16.89, y: 5.93))
                sun13Sep.addLine(to: CGPoint(x: 18.2, y: 5.93))
                sun13Sep.addLine(to: CGPoint(x: 17.5, y: 1.6))
                sun13Sep.addLine(to: CGPoint(x: 16.11, y: 1.6))
                sun13Sep.close()
                sun13Sep.move(to: CGPoint(x: 22.03, y: 5.93))
                sun13Sep.addLine(to: CGPoint(x: 21.64, y: 3.37))
                sun13Sep.addCurve(to: CGPoint(x: 23.74, y: 2.15), controlPoint1: CGPoint(x: 21.52, y: 2.61), controlPoint2: CGPoint(x: 22.35, y: 2.15))
                sun13Sep.addCurve(to: CGPoint(x: 25.96, y: 3.3), controlPoint1: CGPoint(x: 25.13, y: 2.15), controlPoint2: CGPoint(x: 25.84, y: 2.52))
                sun13Sep.addLine(to: CGPoint(x: 26.34, y: 5.93))
                sun13Sep.addLine(to: CGPoint(x: 27.71, y: 5.93))
                sun13Sep.addLine(to: CGPoint(x: 27.32, y: 3.13))
                sun13Sep.addCurve(to: CGPoint(x: 24.04, y: 1.53), controlPoint1: CGPoint(x: 27.17, y: 2.1), controlPoint2: CGPoint(x: 26, y: 1.53))
                sun13Sep.addCurve(to: CGPoint(x: 21.54, y: 2.29), controlPoint1: CGPoint(x: 22.71, y: 1.53), controlPoint2: CGPoint(x: 21.9, y: 1.81))
                sun13Sep.addLine(to: CGPoint(x: 21.41, y: 2.29))
                sun13Sep.addLine(to: CGPoint(x: 21.31, y: 1.6))
                sun13Sep.addLine(to: CGPoint(x: 19.98, y: 1.6))
                sun13Sep.addLine(to: CGPoint(x: 20.65, y: 5.93))
                sun13Sep.addLine(to: CGPoint(x: 22.03, y: 5.93))
                sun13Sep.close()
                sun13Sep.move(to: CGPoint(x: 38.78, y: 5.93))
                sun13Sep.addLine(to: CGPoint(x: 38.09, y: 0.14))
                sun13Sep.addLine(to: CGPoint(x: 36.64, y: 0.14))
                sun13Sep.addLine(to: CGPoint(x: 33.66, y: 1.25))
                sun13Sep.addLine(to: CGPoint(x: 33.76, y: 2.01))
                sun13Sep.addLine(to: CGPoint(x: 36.6, y: 0.94))
                sun13Sep.addLine(to: CGPoint(x: 36.73, y: 0.94))
                sun13Sep.addLine(to: CGPoint(x: 37.33, y: 5.93))
                sun13Sep.addLine(to: CGPoint(x: 38.78, y: 5.93))
                sun13Sep.close()
                sun13Sep.move(to: CGPoint(x: 45.63, y: 3.26))
                sun13Sep.addCurve(to: CGPoint(x: 48.41, y: 4.35), controlPoint1: CGPoint(x: 47.28, y: 3.26), controlPoint2: CGPoint(x: 48.35, y: 3.68))
                sun13Sep.addCurve(to: CGPoint(x: 45.91, y: 5.44), controlPoint1: CGPoint(x: 48.48, y: 4.98), controlPoint2: CGPoint(x: 47.44, y: 5.44))
                sun13Sep.addCurve(to: CGPoint(x: 43.14, y: 4.42), controlPoint1: CGPoint(x: 44.42, y: 5.44), controlPoint2: CGPoint(x: 43.34, y: 5.04))
                sun13Sep.addLine(to: CGPoint(x: 41.74, y: 4.42))
                sun13Sep.addCurve(to: CGPoint(x: 46, y: 6.07), controlPoint1: CGPoint(x: 41.96, y: 5.41), controlPoint2: CGPoint(x: 43.65, y: 6.07))
                sun13Sep.addCurve(to: CGPoint(x: 49.9, y: 4.37), controlPoint1: CGPoint(x: 48.28, y: 6.07), controlPoint2: CGPoint(x: 49.99, y: 5.33))
                sun13Sep.addCurve(to: CGPoint(x: 47.23, y: 2.93), controlPoint1: CGPoint(x: 49.83, y: 3.58), controlPoint2: CGPoint(x: 48.82, y: 3.03))
                sun13Sep.addLine(to: CGPoint(x: 47.22, y: 2.87))
                sun13Sep.addCurve(to: CGPoint(x: 49.13, y: 1.52), controlPoint1: CGPoint(x: 48.48, y: 2.72), controlPoint2: CGPoint(x: 49.2, y: 2.21))
                sun13Sep.addCurve(to: CGPoint(x: 45.31, y: 0), controlPoint1: CGPoint(x: 49.05, y: 0.67), controlPoint2: CGPoint(x: 47.35, y: 0))
                sun13Sep.addCurve(to: CGPoint(x: 41.66, y: 1.62), controlPoint1: CGPoint(x: 43.08, y: 0), controlPoint2: CGPoint(x: 41.69, y: 0.62))
                sun13Sep.addLine(to: CGPoint(x: 43.08, y: 1.62))
                sun13Sep.addCurve(to: CGPoint(x: 45.32, y: 0.63), controlPoint1: CGPoint(x: 43.13, y: 1), controlPoint2: CGPoint(x: 43.97, y: 0.63))
                sun13Sep.addCurve(to: CGPoint(x: 47.66, y: 1.61), controlPoint1: CGPoint(x: 46.66, y: 0.63), controlPoint2: CGPoint(x: 47.6, y: 1.02))
                sun13Sep.addCurve(to: CGPoint(x: 45.5, y: 2.64), controlPoint1: CGPoint(x: 47.72, y: 2.22), controlPoint2: CGPoint(x: 46.83, y: 2.64))
                sun13Sep.addLine(to: CGPoint(x: 44.09, y: 2.64))
                sun13Sep.addLine(to: CGPoint(x: 44.16, y: 3.26))
                sun13Sep.addLine(to: CGPoint(x: 45.63, y: 3.26))
                sun13Sep.close()
                sun13Sep.move(to: CGPoint(x: 60.65, y: 6.07))
                sun13Sep.addCurve(to: CGPoint(x: 64.86, y: 4.33), controlPoint1: CGPoint(x: 63.29, y: 6.07), controlPoint2: CGPoint(x: 64.92, y: 5.39))
                sun13Sep.addCurve(to: CGPoint(x: 61.37, y: 2.71), controlPoint1: CGPoint(x: 64.8, y: 3.47), controlPoint2: CGPoint(x: 63.8, y: 3.01))
                sun13Sep.addLine(to: CGPoint(x: 60.14, y: 2.55))
                sun13Sep.addCurve(to: CGPoint(x: 57.83, y: 1.63), controlPoint1: CGPoint(x: 58.52, y: 2.34), controlPoint2: CGPoint(x: 57.86, y: 2.08))
                sun13Sep.addCurve(to: CGPoint(x: 60.33, y: 0.65), controlPoint1: CGPoint(x: 57.78, y: 1.04), controlPoint2: CGPoint(x: 58.78, y: 0.65))
                sun13Sep.addCurve(to: CGPoint(x: 63.05, y: 1.6), controlPoint1: CGPoint(x: 61.79, y: 0.65), controlPoint2: CGPoint(x: 62.8, y: 1.01))
                sun13Sep.addLine(to: CGPoint(x: 64.51, y: 1.6))
                sun13Sep.addCurve(to: CGPoint(x: 60.33, y: 0), controlPoint1: CGPoint(x: 64.33, y: 0.67), controlPoint2: CGPoint(x: 62.6, y: 0))
                sun13Sep.addCurve(to: CGPoint(x: 56.33, y: 1.65), controlPoint1: CGPoint(x: 57.86, y: 0), controlPoint2: CGPoint(x: 56.25, y: 0.67))
                sun13Sep.addCurve(to: CGPoint(x: 59.47, y: 3.21), controlPoint1: CGPoint(x: 56.4, y: 2.47), controlPoint2: CGPoint(x: 57.35, y: 2.95))
                sun13Sep.addLine(to: CGPoint(x: 60.98, y: 3.41))
                sun13Sep.addCurve(to: CGPoint(x: 63.37, y: 4.41), controlPoint1: CGPoint(x: 62.59, y: 3.61), controlPoint2: CGPoint(x: 63.34, y: 3.92))
                sun13Sep.addCurve(to: CGPoint(x: 60.74, y: 5.41), controlPoint1: CGPoint(x: 63.41, y: 4.99), controlPoint2: CGPoint(x: 62.29, y: 5.41))
                sun13Sep.addCurve(to: CGPoint(x: 57.68, y: 4.42), controlPoint1: CGPoint(x: 59.09, y: 5.41), controlPoint2: CGPoint(x: 57.91, y: 5.02))
                sun13Sep.addLine(to: CGPoint(x: 56.22, y: 4.42))
                sun13Sep.addCurve(to: CGPoint(x: 60.65, y: 6.07), controlPoint1: CGPoint(x: 56.46, y: 5.42), controlPoint2: CGPoint(x: 58.2, y: 6.07))
                sun13Sep.close()
                sun13Sep.move(to: CGPoint(x: 72.68, y: 3.41))
                sun13Sep.addLine(to: CGPoint(x: 67.89, y: 3.41))
                sun13Sep.addCurve(to: CGPoint(x: 70.28, y: 2.14), controlPoint1: CGPoint(x: 67.95, y: 2.64), controlPoint2: CGPoint(x: 68.89, y: 2.14))
                sun13Sep.addCurve(to: CGPoint(x: 72.68, y: 3.41), controlPoint1: CGPoint(x: 71.66, y: 2.14), controlPoint2: CGPoint(x: 72.61, y: 2.64))
                sun13Sep.close()
                sun13Sep.move(to: CGPoint(x: 70.5, y: 5.4))
                sun13Sep.addCurve(to: CGPoint(x: 67.93, y: 4), controlPoint1: CGPoint(x: 69.03, y: 5.4), controlPoint2: CGPoint(x: 68.05, y: 4.86))
                sun13Sep.addLine(to: CGPoint(x: 67.92, y: 3.97))
                sun13Sep.addLine(to: CGPoint(x: 74.16, y: 3.97))
                sun13Sep.addLine(to: CGPoint(x: 74.15, y: 3.7))
                sun13Sep.addCurve(to: CGPoint(x: 70.26, y: 1.53), controlPoint1: CGPoint(x: 74.09, y: 2.36), controlPoint2: CGPoint(x: 72.62, y: 1.53))
                sun13Sep.addCurve(to: CGPoint(x: 66.47, y: 3.77), controlPoint1: CGPoint(x: 67.87, y: 1.53), controlPoint2: CGPoint(x: 66.39, y: 2.41))
                sun13Sep.addCurve(to: CGPoint(x: 70.5, y: 6.01), controlPoint1: CGPoint(x: 66.56, y: 5.14), controlPoint2: CGPoint(x: 68.11, y: 6.01))
                sun13Sep.addCurve(to: CGPoint(x: 74.09, y: 4.81), controlPoint1: CGPoint(x: 72.39, y: 6.01), controlPoint2: CGPoint(x: 73.7, y: 5.55))
                sun13Sep.addLine(to: CGPoint(x: 72.7, y: 4.81))
                sun13Sep.addCurve(to: CGPoint(x: 70.5, y: 5.4), controlPoint1: CGPoint(x: 72.36, y: 5.19), controlPoint2: CGPoint(x: 71.62, y: 5.4))
                sun13Sep.close()
                sun13Sep.move(to: CGPoint(x: 77.57, y: 2.33))
                sun13Sep.addLine(to: CGPoint(x: 77.44, y: 2.33))
                sun13Sep.addLine(to: CGPoint(x: 77.42, y: 1.6))
                sun13Sep.addLine(to: CGPoint(x: 76.09, y: 1.6))
                sun13Sep.addLine(to: CGPoint(x: 76.33, y: 7.38))
                sun13Sep.addLine(to: CGPoint(x: 77.7, y: 7.38))
                sun13Sep.addLine(to: CGPoint(x: 77.62, y: 5.28))
                sun13Sep.addLine(to: CGPoint(x: 77.75, y: 5.28))
                sun13Sep.addCurve(to: CGPoint(x: 80.48, y: 6.01), controlPoint1: CGPoint(x: 78.24, y: 5.74), controlPoint2: CGPoint(x: 79.25, y: 6.01))
                sun13Sep.addCurve(to: CGPoint(x: 84.05, y: 3.77), controlPoint1: CGPoint(x: 82.67, y: 6.01), controlPoint2: CGPoint(x: 84.09, y: 5.12))
                sun13Sep.addCurve(to: CGPoint(x: 80.33, y: 1.53), controlPoint1: CGPoint(x: 84.02, y: 2.41), controlPoint2: CGPoint(x: 82.56, y: 1.53))
                sun13Sep.addCurve(to: CGPoint(x: 77.57, y: 2.33), controlPoint1: CGPoint(x: 79.14, y: 1.53), controlPoint2: CGPoint(x: 78.11, y: 1.83))
                sun13Sep.close()
                sun13Sep.move(to: CGPoint(x: 77.52, y: 3.77))
                sun13Sep.addCurve(to: CGPoint(x: 80.03, y: 2.15), controlPoint1: CGPoint(x: 77.49, y: 2.77), controlPoint2: CGPoint(x: 78.45, y: 2.15))
                sun13Sep.addCurve(to: CGPoint(x: 82.62, y: 3.77), controlPoint1: CGPoint(x: 81.62, y: 2.15), controlPoint2: CGPoint(x: 82.59, y: 2.76))
                sun13Sep.addCurve(to: CGPoint(x: 80.13, y: 5.39), controlPoint1: CGPoint(x: 82.65, y: 4.78), controlPoint2: CGPoint(x: 81.72, y: 5.39))
                sun13Sep.addCurve(to: CGPoint(x: 77.52, y: 3.77), controlPoint1: CGPoint(x: 78.57, y: 5.39), controlPoint2: CGPoint(x: 77.56, y: 4.76))
                sun13Sep.close()
                context.saveGState()
                context.translateBy(x: 0.34, y: 0.12)
                sun13Sep.usesEvenOddFillRule = true
                UIColor(white: 0.6, alpha: 1).setFill()
                sun13Sep.fill()
                context.restoreGState()
                
                /// 14
                let _14 = UIBezierPath()
                _14.move(to: CGPoint(x: 4.35, y: 5.8))
                _14.addLine(to: CGPoint(x: 4.64, y: 0))
                _14.addLine(to: CGPoint(x: 3.19, y: 0))
                _14.addLine(to: CGPoint(x: 0.03, y: 1.11))
                _14.addLine(to: CGPoint(x: 0, y: 1.87))
                _14.addLine(to: CGPoint(x: 3.02, y: 0.8))
                _14.addLine(to: CGPoint(x: 3.14, y: 0.8))
                _14.addLine(to: CGPoint(x: 2.91, y: 5.8))
                _14.addLine(to: CGPoint(x: 4.35, y: 5.8))
                _14.close()
                _14.move(to: CGPoint(x: 14.34, y: 5.8))
                _14.addLine(to: CGPoint(x: 14.43, y: 4.59))
                _14.addLine(to: CGPoint(x: 16.08, y: 4.59))
                _14.addLine(to: CGPoint(x: 16.12, y: 3.95))
                _14.addLine(to: CGPoint(x: 14.48, y: 3.95))
                _14.addLine(to: CGPoint(x: 14.76, y: 0))
                _14.addLine(to: CGPoint(x: 12.64, y: 0))
                _14.addCurve(to: CGPoint(x: 7.41, y: 3.94), controlPoint1: CGPoint(x: 10.43, y: 1.56), controlPoint2: CGPoint(x: 8.5, y: 3.02))
                _14.addLine(to: CGPoint(x: 7.37, y: 4.59))
                _14.addLine(to: CGPoint(x: 13.02, y: 4.59))
                _14.addLine(to: CGPoint(x: 12.93, y: 5.8))
                _14.addLine(to: CGPoint(x: 14.34, y: 5.8))
                _14.close()
                _14.move(to: CGPoint(x: 13.19, y: 0.67))
                _14.addLine(to: CGPoint(x: 13.29, y: 0.67))
                _14.addLine(to: CGPoint(x: 13.07, y: 3.95))
                _14.addLine(to: CGPoint(x: 8.88, y: 3.95))
                _14.addLine(to: CGPoint(x: 8.89, y: 3.9))
                _14.addCurve(to: CGPoint(x: 13.19, y: 0.67), controlPoint1: CGPoint(x: 10.34, y: 2.73), controlPoint2: CGPoint(x: 11.94, y: 1.53))
                _14.close()
                context.saveGState()
                context.translateBy(x: 117.43, y: 0.25)
                _14.usesEvenOddFillRule = true
                UIColor(white: 0.6, alpha: 1).setFill()
                _14.fill()
                context.restoreGState()
                
                /// 04
                let _04 = UIBezierPath()
                _04.move(to: CGPoint(x: 8.28, y: 3.04))
                _04.addCurve(to: CGPoint(x: 4.67, y: 0), controlPoint1: CGPoint(x: 8.61, y: 1.12), controlPoint2: CGPoint(x: 7.27, y: 0))
                _04.addCurve(to: CGPoint(x: 0.04, y: 3.03), controlPoint1: CGPoint(x: 2.05, y: 0), controlPoint2: CGPoint(x: 0.34, y: 1.12))
                _04.addCurve(to: CGPoint(x: 3.67, y: 6.07), controlPoint1: CGPoint(x: -0.26, y: 4.96), controlPoint2: CGPoint(x: 1.07, y: 6.07))
                _04.addCurve(to: CGPoint(x: 8.28, y: 3.04), controlPoint1: CGPoint(x: 6.26, y: 6.07), controlPoint2: CGPoint(x: 7.95, y: 4.97))
                _04.close()
                _04.move(to: CGPoint(x: 1.5, y: 3.03))
                _04.addCurve(to: CGPoint(x: 4.56, y: 0.63), controlPoint1: CGPoint(x: 1.74, y: 1.5), controlPoint2: CGPoint(x: 2.86, y: 0.63))
                _04.addCurve(to: CGPoint(x: 6.82, y: 3.03), controlPoint1: CGPoint(x: 6.27, y: 0.63), controlPoint2: CGPoint(x: 7.08, y: 1.49))
                _04.addCurve(to: CGPoint(x: 3.77, y: 5.44), controlPoint1: CGPoint(x: 6.56, y: 4.59), controlPoint2: CGPoint(x: 5.48, y: 5.44))
                _04.addCurve(to: CGPoint(x: 1.5, y: 3.03), controlPoint1: CGPoint(x: 2.06, y: 5.44), controlPoint2: CGPoint(x: 1.25, y: 4.58))
                _04.close()
                _04.move(to: CGPoint(x: 16.69, y: 5.93))
                _04.addLine(to: CGPoint(x: 16.92, y: 4.73))
                _04.addLine(to: CGPoint(x: 18.57, y: 4.73))
                _04.addLine(to: CGPoint(x: 18.69, y: 4.08))
                _04.addLine(to: CGPoint(x: 17.04, y: 4.08))
                _04.addLine(to: CGPoint(x: 17.8, y: 0.14))
                _04.addLine(to: CGPoint(x: 15.68, y: 0.14))
                _04.addCurve(to: CGPoint(x: 9.98, y: 4.07), controlPoint1: CGPoint(x: 13.29, y: 1.7), controlPoint2: CGPoint(x: 11.18, y: 3.15))
                _04.addLine(to: CGPoint(x: 9.86, y: 4.73))
                _04.addLine(to: CGPoint(x: 15.51, y: 4.73))
                _04.addLine(to: CGPoint(x: 15.28, y: 5.93))
                _04.addLine(to: CGPoint(x: 16.69, y: 5.93))
                _04.close()
                _04.move(to: CGPoint(x: 16.16, y: 0.81))
                _04.addLine(to: CGPoint(x: 16.26, y: 0.81))
                _04.addLine(to: CGPoint(x: 15.64, y: 4.09))
                _04.addLine(to: CGPoint(x: 11.45, y: 4.09))
                _04.addLine(to: CGPoint(x: 11.46, y: 4.04))
                _04.addCurve(to: CGPoint(x: 16.16, y: 0.81), controlPoint1: CGPoint(x: 13.06, y: 2.87), controlPoint2: CGPoint(x: 14.8, y: 1.67))
                _04.close()
                context.saveGState()
                context.translateBy(x: 170.55, y: 0.12)
                _04.usesEvenOddFillRule = true
                UIColor(white: 0.6, alpha: 1).setFill()
                _04.fill()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Mon 7 Sep + 8 + 58
            context.saveGState()
            context.setAlpha(0.3)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 87.5, y: 23.5)
                
                /// Mon 7 Sep
                let mon7Sep = UIBezierPath()
                mon7Sep.move(to: CGPoint(x: 2.37, y: 2.98))
                mon7Sep.addLine(to: CGPoint(x: 2.48, y: 2.98))
                mon7Sep.addLine(to: CGPoint(x: 5.75, y: 11.67))
                mon7Sep.addLine(to: CGPoint(x: 7.13, y: 11.67))
                mon7Sep.addLine(to: CGPoint(x: 12.01, y: 2.98))
                mon7Sep.addLine(to: CGPoint(x: 12.11, y: 2.98))
                mon7Sep.addLine(to: CGPoint(x: 11.35, y: 11.75))
                mon7Sep.addLine(to: CGPoint(x: 12.87, y: 11.75))
                mon7Sep.addLine(to: CGPoint(x: 13.85, y: 0.27))
                mon7Sep.addLine(to: CGPoint(x: 11.98, y: 0.27))
                mon7Sep.addLine(to: CGPoint(x: 6.69, y: 9.77))
                mon7Sep.addLine(to: CGPoint(x: 6.54, y: 9.77))
                mon7Sep.addLine(to: CGPoint(x: 3, y: 0.27))
                mon7Sep.addLine(to: CGPoint(x: 1.13, y: 0.27))
                mon7Sep.addLine(to: CGPoint(x: 0, y: 11.75))
                mon7Sep.addLine(to: CGPoint(x: 1.52, y: 11.75))
                mon7Sep.addLine(to: CGPoint(x: 2.37, y: 2.98))
                mon7Sep.close()
                mon7Sep.move(to: CGPoint(x: 17.31, y: 7.46))
                mon7Sep.addCurve(to: CGPoint(x: 20.44, y: 4.25), controlPoint1: CGPoint(x: 17.48, y: 5.42), controlPoint2: CGPoint(x: 18.6, y: 4.25))
                mon7Sep.addCurve(to: CGPoint(x: 23.06, y: 7.46), controlPoint1: CGPoint(x: 22.27, y: 4.25), controlPoint2: CGPoint(x: 23.21, y: 5.42))
                mon7Sep.addCurve(to: CGPoint(x: 19.93, y: 10.66), controlPoint1: CGPoint(x: 22.9, y: 9.49), controlPoint2: CGPoint(x: 21.77, y: 10.66))
                mon7Sep.addCurve(to: CGPoint(x: 17.31, y: 7.46), controlPoint1: CGPoint(x: 18.08, y: 10.66), controlPoint2: CGPoint(x: 17.14, y: 9.49))
                mon7Sep.close()
                mon7Sep.move(to: CGPoint(x: 24.66, y: 7.46))
                mon7Sep.addCurve(to: CGPoint(x: 20.53, y: 3.02), controlPoint1: CGPoint(x: 24.87, y: 4.7), controlPoint2: CGPoint(x: 23.29, y: 3.02))
                mon7Sep.addCurve(to: CGPoint(x: 15.7, y: 7.46), controlPoint1: CGPoint(x: 17.78, y: 3.02), controlPoint2: CGPoint(x: 15.94, y: 4.7))
                mon7Sep.addCurve(to: CGPoint(x: 19.83, y: 11.9), controlPoint1: CGPoint(x: 15.47, y: 10.21), controlPoint2: CGPoint(x: 17.05, y: 11.9))
                mon7Sep.addCurve(to: CGPoint(x: 24.66, y: 7.46), controlPoint1: CGPoint(x: 22.61, y: 11.9), controlPoint2: CGPoint(x: 24.45, y: 10.21))
                mon7Sep.close()
                mon7Sep.move(to: CGPoint(x: 28.18, y: 11.75))
                mon7Sep.addLine(to: CGPoint(x: 28.54, y: 6.67))
                mon7Sep.addCurve(to: CGPoint(x: 31.25, y: 4.25), controlPoint1: CGPoint(x: 28.64, y: 5.17), controlPoint2: CGPoint(x: 29.71, y: 4.25))
                mon7Sep.addCurve(to: CGPoint(x: 33.38, y: 6.53), controlPoint1: CGPoint(x: 32.79, y: 4.25), controlPoint2: CGPoint(x: 33.48, y: 4.99))
                mon7Sep.addLine(to: CGPoint(x: 33.04, y: 11.75))
                mon7Sep.addLine(to: CGPoint(x: 34.59, y: 11.75))
                mon7Sep.addLine(to: CGPoint(x: 34.95, y: 6.19))
                mon7Sep.addCurve(to: CGPoint(x: 31.77, y: 3.02), controlPoint1: CGPoint(x: 35.08, y: 4.16), controlPoint2: CGPoint(x: 33.94, y: 3.02))
                mon7Sep.addCurve(to: CGPoint(x: 28.76, y: 4.52), controlPoint1: CGPoint(x: 30.29, y: 3.02), controlPoint2: CGPoint(x: 29.31, y: 3.58))
                mon7Sep.addLine(to: CGPoint(x: 28.62, y: 4.52))
                mon7Sep.addLine(to: CGPoint(x: 28.71, y: 3.17))
                mon7Sep.addLine(to: CGPoint(x: 27.24, y: 3.17))
                mon7Sep.addLine(to: CGPoint(x: 26.62, y: 11.75))
                mon7Sep.addLine(to: CGPoint(x: 28.18, y: 11.75))
                mon7Sep.close()
                mon7Sep.move(to: CGPoint(x: 44.58, y: 11.75))
                mon7Sep.addLine(to: CGPoint(x: 50.89, y: 1.6))
                mon7Sep.addLine(to: CGPoint(x: 50.95, y: 0.27))
                mon7Sep.addLine(to: CGPoint(x: 42.41, y: 0.27))
                mon7Sep.addLine(to: CGPoint(x: 42.34, y: 1.55))
                mon7Sep.addLine(to: CGPoint(x: 49.25, y: 1.55))
                mon7Sep.addLine(to: CGPoint(x: 49.25, y: 1.66))
                mon7Sep.addLine(to: CGPoint(x: 42.87, y: 11.75))
                mon7Sep.addLine(to: CGPoint(x: 44.58, y: 11.75))
                mon7Sep.close()
                mon7Sep.move(to: CGPoint(x: 62.22, y: 12.02))
                mon7Sep.addCurve(to: CGPoint(x: 67.21, y: 8.56), controlPoint1: CGPoint(x: 65.21, y: 12.02), controlPoint2: CGPoint(x: 67.14, y: 10.67))
                mon7Sep.addCurve(to: CGPoint(x: 63.55, y: 5.36), controlPoint1: CGPoint(x: 67.26, y: 6.88), controlPoint2: CGPoint(x: 66.21, y: 5.96))
                mon7Sep.addLine(to: CGPoint(x: 62.2, y: 5.04))
                mon7Sep.addCurve(to: CGPoint(x: 59.78, y: 3.22), controlPoint1: CGPoint(x: 60.43, y: 4.64), controlPoint2: CGPoint(x: 59.74, y: 4.12))
                mon7Sep.addCurve(to: CGPoint(x: 62.71, y: 1.3), controlPoint1: CGPoint(x: 59.82, y: 2.06), controlPoint2: CGPoint(x: 60.99, y: 1.3))
                mon7Sep.addCurve(to: CGPoint(x: 65.57, y: 3.17), controlPoint1: CGPoint(x: 64.32, y: 1.3), controlPoint2: CGPoint(x: 65.39, y: 2))
                mon7Sep.addLine(to: CGPoint(x: 67.2, y: 3.17))
                mon7Sep.addCurve(to: CGPoint(x: 62.81, y: 0), controlPoint1: CGPoint(x: 67.12, y: 1.32), controlPoint2: CGPoint(x: 65.31, y: 0))
                mon7Sep.addCurve(to: CGPoint(x: 58.11, y: 3.27), controlPoint1: CGPoint(x: 60.08, y: 0), controlPoint2: CGPoint(x: 58.2, y: 1.32))
                mon7Sep.addCurve(to: CGPoint(x: 61.35, y: 6.36), controlPoint1: CGPoint(x: 58.05, y: 4.9), controlPoint2: CGPoint(x: 59.02, y: 5.84))
                mon7Sep.addLine(to: CGPoint(x: 63, y: 6.74))
                mon7Sep.addCurve(to: CGPoint(x: 65.53, y: 8.74), controlPoint1: CGPoint(x: 64.78, y: 7.14), controlPoint2: CGPoint(x: 65.57, y: 7.76))
                mon7Sep.addCurve(to: CGPoint(x: 62.42, y: 10.71), controlPoint1: CGPoint(x: 65.5, y: 9.88), controlPoint2: CGPoint(x: 64.17, y: 10.71))
                mon7Sep.addCurve(to: CGPoint(x: 59.15, y: 8.75), controlPoint1: CGPoint(x: 60.57, y: 10.71), controlPoint2: CGPoint(x: 59.3, y: 9.95))
                mon7Sep.addLine(to: CGPoint(x: 57.51, y: 8.75))
                mon7Sep.addCurve(to: CGPoint(x: 62.22, y: 12.02), controlPoint1: CGPoint(x: 57.59, y: 10.73), controlPoint2: CGPoint(x: 59.45, y: 12.02))
                mon7Sep.close()
                mon7Sep.move(to: CGPoint(x: 76.07, y: 6.75))
                mon7Sep.addLine(to: CGPoint(x: 70.73, y: 6.75))
                mon7Sep.addCurve(to: CGPoint(x: 73.54, y: 4.23), controlPoint1: CGPoint(x: 70.89, y: 5.23), controlPoint2: CGPoint(x: 71.99, y: 4.23))
                mon7Sep.addCurve(to: CGPoint(x: 76.07, y: 6.75), controlPoint1: CGPoint(x: 75.07, y: 4.23), controlPoint2: CGPoint(x: 76.07, y: 5.23))
                mon7Sep.close()
                mon7Sep.move(to: CGPoint(x: 73.42, y: 10.69))
                mon7Sep.addCurve(to: CGPoint(x: 70.69, y: 7.92), controlPoint1: CGPoint(x: 71.77, y: 10.69), controlPoint2: CGPoint(x: 70.72, y: 9.61))
                mon7Sep.addLine(to: CGPoint(x: 70.69, y: 7.86))
                mon7Sep.addLine(to: CGPoint(x: 77.68, y: 7.86))
                mon7Sep.addLine(to: CGPoint(x: 77.69, y: 7.33))
                mon7Sep.addCurve(to: CGPoint(x: 73.59, y: 3.02), controlPoint1: CGPoint(x: 77.75, y: 4.67), controlPoint2: CGPoint(x: 76.2, y: 3.02))
                mon7Sep.addCurve(to: CGPoint(x: 69.09, y: 7.47), controlPoint1: CGPoint(x: 70.93, y: 3.02), controlPoint2: CGPoint(x: 69.18, y: 4.77))
                mon7Sep.addCurve(to: CGPoint(x: 73.36, y: 11.9), controlPoint1: CGPoint(x: 69.01, y: 10.18), controlPoint2: CGPoint(x: 70.65, y: 11.9))
                mon7Sep.addCurve(to: CGPoint(x: 77.52, y: 9.53), controlPoint1: CGPoint(x: 75.49, y: 11.9), controlPoint2: CGPoint(x: 77.01, y: 11))
                mon7Sep.addLine(to: CGPoint(x: 75.96, y: 9.53))
                mon7Sep.addCurve(to: CGPoint(x: 73.42, y: 10.69), controlPoint1: CGPoint(x: 75.54, y: 10.28), controlPoint2: CGPoint(x: 74.68, y: 10.69))
                mon7Sep.close()
                mon7Sep.move(to: CGPoint(x: 81.63, y: 4.6))
                mon7Sep.addLine(to: CGPoint(x: 81.49, y: 4.6))
                mon7Sep.addLine(to: CGPoint(x: 81.52, y: 3.17))
                mon7Sep.addLine(to: CGPoint(x: 80.05, y: 3.17))
                mon7Sep.addLine(to: CGPoint(x: 79.82, y: 14.61))
                mon7Sep.addLine(to: CGPoint(x: 81.38, y: 14.61))
                mon7Sep.addLine(to: CGPoint(x: 81.45, y: 10.46))
                mon7Sep.addLine(to: CGPoint(x: 81.6, y: 10.46))
                mon7Sep.addCurve(to: CGPoint(x: 84.62, y: 11.9), controlPoint1: CGPoint(x: 82.12, y: 11.36), controlPoint2: CGPoint(x: 83.23, y: 11.9))
                mon7Sep.addCurve(to: CGPoint(x: 88.77, y: 7.46), controlPoint1: CGPoint(x: 87.1, y: 11.9), controlPoint2: CGPoint(x: 88.74, y: 10.14))
                mon7Sep.addCurve(to: CGPoint(x: 84.76, y: 3.02), controlPoint1: CGPoint(x: 88.8, y: 4.76), controlPoint2: CGPoint(x: 87.22, y: 3.02))
                mon7Sep.addCurve(to: CGPoint(x: 81.63, y: 4.6), controlPoint1: CGPoint(x: 83.44, y: 3.02), controlPoint2: CGPoint(x: 82.27, y: 3.62))
                mon7Sep.close()
                mon7Sep.move(to: CGPoint(x: 81.46, y: 7.46))
                mon7Sep.addCurve(to: CGPoint(x: 84.38, y: 4.25), controlPoint1: CGPoint(x: 81.5, y: 5.49), controlPoint2: CGPoint(x: 82.63, y: 4.25))
                mon7Sep.addCurve(to: CGPoint(x: 87.17, y: 7.46), controlPoint1: CGPoint(x: 86.15, y: 4.25), controlPoint2: CGPoint(x: 87.19, y: 5.46))
                mon7Sep.addCurve(to: CGPoint(x: 84.27, y: 10.66), controlPoint1: CGPoint(x: 87.14, y: 9.46), controlPoint2: CGPoint(x: 86.06, y: 10.66))
                mon7Sep.addCurve(to: CGPoint(x: 81.46, y: 7.46), controlPoint1: CGPoint(x: 82.52, y: 10.66), controlPoint2: CGPoint(x: 81.43, y: 9.42))
                mon7Sep.close()
                context.saveGState()
                context.translateBy(x: 0.48, y: 0.25)
                mon7Sep.usesEvenOddFillRule = true
                UIColor.black.setFill()
                mon7Sep.fill()
                context.restoreGState()
                
                /// 8
                let _8 = UIBezierPath()
                _8.move(to: CGPoint(x: 9.38, y: 8.68))
                _8.addCurve(to: CGPoint(x: 6.58, y: 5.75), controlPoint1: CGPoint(x: 9.33, y: 7.18), controlPoint2: CGPoint(x: 8.22, y: 6.02))
                _8.addLine(to: CGPoint(x: 6.58, y: 5.62))
                _8.addCurve(to: CGPoint(x: 8.66, y: 3.06), controlPoint1: CGPoint(x: 7.91, y: 5.3), controlPoint2: CGPoint(x: 8.7, y: 4.32))
                _8.addCurve(to: CGPoint(x: 4.44, y: 0), controlPoint1: CGPoint(x: 8.6, y: 1.27), controlPoint2: CGPoint(x: 6.85, y: 0))
                _8.addCurve(to: CGPoint(x: 0.39, y: 3.06), controlPoint1: CGPoint(x: 2.02, y: 0), controlPoint2: CGPoint(x: 0.35, y: 1.27))
                _8.addCurve(to: CGPoint(x: 2.62, y: 5.62), controlPoint1: CGPoint(x: 0.42, y: 4.31), controlPoint2: CGPoint(x: 1.29, y: 5.3))
                _8.addLine(to: CGPoint(x: 2.63, y: 5.75))
                _8.addCurve(to: CGPoint(x: 0, y: 8.68), controlPoint1: CGPoint(x: 1.01, y: 6.02), controlPoint2: CGPoint(x: -0.04, y: 7.18))
                _8.addCurve(to: CGPoint(x: 4.79, y: 12.02), controlPoint1: CGPoint(x: 0.05, y: 10.64), controlPoint2: CGPoint(x: 2.02, y: 12.02))
                _8.addCurve(to: CGPoint(x: 9.38, y: 8.68), controlPoint1: CGPoint(x: 7.56, y: 12.02), controlPoint2: CGPoint(x: 9.45, y: 10.64))
                _8.close()
                _8.move(to: CGPoint(x: 1.64, y: 8.57))
                _8.addCurve(to: CGPoint(x: 4.62, y: 6.35), controlPoint1: CGPoint(x: 1.61, y: 7.26), controlPoint2: CGPoint(x: 2.82, y: 6.35))
                _8.addCurve(to: CGPoint(x: 7.74, y: 8.57), controlPoint1: CGPoint(x: 6.42, y: 6.35), controlPoint2: CGPoint(x: 7.69, y: 7.26))
                _8.addCurve(to: CGPoint(x: 4.75, y: 10.79), controlPoint1: CGPoint(x: 7.78, y: 9.88), controlPoint2: CGPoint(x: 6.56, y: 10.79))
                _8.addCurve(to: CGPoint(x: 1.64, y: 8.57), controlPoint1: CGPoint(x: 2.95, y: 10.79), controlPoint2: CGPoint(x: 1.67, y: 9.88))
                _8.close()
                _8.move(to: CGPoint(x: 1.98, y: 3.2))
                _8.addCurve(to: CGPoint(x: 4.47, y: 1.22), controlPoint1: CGPoint(x: 1.95, y: 2.01), controlPoint2: CGPoint(x: 2.94, y: 1.22))
                _8.addCurve(to: CGPoint(x: 7.08, y: 3.2), controlPoint1: CGPoint(x: 6, y: 1.22), controlPoint2: CGPoint(x: 7.04, y: 2.01))
                _8.addCurve(to: CGPoint(x: 4.59, y: 5.14), controlPoint1: CGPoint(x: 7.12, y: 4.37), controlPoint2: CGPoint(x: 6.12, y: 5.14))
                _8.addCurve(to: CGPoint(x: 1.98, y: 3.2), controlPoint1: CGPoint(x: 3.06, y: 5.14), controlPoint2: CGPoint(x: 2.01, y: 4.37))
                _8.close()
                context.saveGState()
                context.translateBy(x: 126.3, y: 0.25)
                _8.usesEvenOddFillRule = true
                UIColor.black.setFill()
                _8.fill()
                context.restoreGState()
                
                /// 58
                let _58 = UIBezierPath()
                _58.move(to: CGPoint(x: 8.87, y: 8.1))
                _58.addCurve(to: CGPoint(x: 4.35, y: 4.25), controlPoint1: CGPoint(x: 8.68, y: 5.84), controlPoint2: CGPoint(x: 6.81, y: 4.25))
                _58.addCurve(to: CGPoint(x: 1.69, y: 5.23), controlPoint1: CGPoint(x: 3.16, y: 4.25), controlPoint2: CGPoint(x: 2.27, y: 4.58))
                _58.addLine(to: CGPoint(x: 1.55, y: 5.23))
                _58.addLine(to: CGPoint(x: 1.62, y: 1.55))
                _58.addLine(to: CGPoint(x: 7.57, y: 1.55))
                _58.addLine(to: CGPoint(x: 7.46, y: 0.27))
                _58.addLine(to: CGPoint(x: 0.26, y: 0.27))
                _58.addLine(to: CGPoint(x: 0.06, y: 6.78))
                _58.addLine(to: CGPoint(x: 1.58, y: 6.78))
                _58.addCurve(to: CGPoint(x: 4.16, y: 5.49), controlPoint1: CGPoint(x: 2.05, y: 5.96), controlPoint2: CGPoint(x: 2.98, y: 5.49))
                _58.addCurve(to: CGPoint(x: 7.25, y: 8.13), controlPoint1: CGPoint(x: 5.86, y: 5.49), controlPoint2: CGPoint(x: 7.12, y: 6.56))
                _58.addCurve(to: CGPoint(x: 4.56, y: 10.76), controlPoint1: CGPoint(x: 7.38, y: 9.71), controlPoint2: CGPoint(x: 6.31, y: 10.76))
                _58.addCurve(to: CGPoint(x: 1.6, y: 8.69), controlPoint1: CGPoint(x: 3.02, y: 10.76), controlPoint2: CGPoint(x: 1.84, y: 9.93))
                _58.addLine(to: CGPoint(x: 0, y: 8.69))
                _58.addCurve(to: CGPoint(x: 4.65, y: 12.02), controlPoint1: CGPoint(x: 0.3, y: 10.67), controlPoint2: CGPoint(x: 2.18, y: 12.02))
                _58.addCurve(to: CGPoint(x: 8.87, y: 8.1), controlPoint1: CGPoint(x: 7.35, y: 12.02), controlPoint2: CGPoint(x: 9.07, y: 10.43))
                _58.close()
                _58.move(to: CGPoint(x: 20.48, y: 8.68))
                _58.addCurve(to: CGPoint(x: 17.5, y: 5.75), controlPoint1: CGPoint(x: 20.34, y: 7.18), controlPoint2: CGPoint(x: 19.16, y: 6.02))
                _58.addLine(to: CGPoint(x: 17.49, y: 5.62))
                _58.addCurve(to: CGPoint(x: 19.41, y: 3.06), controlPoint1: CGPoint(x: 18.8, y: 5.3), controlPoint2: CGPoint(x: 19.53, y: 4.32))
                _58.addCurve(to: CGPoint(x: 14.99, y: 0), controlPoint1: CGPoint(x: 19.23, y: 1.27), controlPoint2: CGPoint(x: 17.4, y: 0))
                _58.addCurve(to: CGPoint(x: 11.14, y: 3.06), controlPoint1: CGPoint(x: 12.57, y: 0), controlPoint2: CGPoint(x: 10.98, y: 1.27))
                _58.addCurve(to: CGPoint(x: 13.53, y: 5.62), controlPoint1: CGPoint(x: 11.25, y: 4.31), controlPoint2: CGPoint(x: 12.18, y: 5.3))
                _58.addLine(to: CGPoint(x: 13.54, y: 5.75))
                _58.addCurve(to: CGPoint(x: 11.1, y: 8.68), controlPoint1: CGPoint(x: 11.94, y: 6.02), controlPoint2: CGPoint(x: 10.97, y: 7.18))
                _58.addCurve(to: CGPoint(x: 16.1, y: 12.02), controlPoint1: CGPoint(x: 11.28, y: 10.64), controlPoint2: CGPoint(x: 13.34, y: 12.02))
                _58.addCurve(to: CGPoint(x: 20.48, y: 8.68), controlPoint1: CGPoint(x: 18.87, y: 12.02), controlPoint2: CGPoint(x: 20.68, y: 10.64))
                _58.close()
                _58.move(to: CGPoint(x: 12.74, y: 8.57))
                _58.addCurve(to: CGPoint(x: 15.58, y: 6.35), controlPoint1: CGPoint(x: 12.62, y: 7.26), controlPoint2: CGPoint(x: 13.78, y: 6.35))
                _58.addCurve(to: CGPoint(x: 18.83, y: 8.57), controlPoint1: CGPoint(x: 17.38, y: 6.35), controlPoint2: CGPoint(x: 18.71, y: 7.26))
                _58.addCurve(to: CGPoint(x: 15.99, y: 10.79), controlPoint1: CGPoint(x: 18.96, y: 9.88), controlPoint2: CGPoint(x: 17.8, y: 10.79))
                _58.addCurve(to: CGPoint(x: 12.74, y: 8.57), controlPoint1: CGPoint(x: 14.18, y: 10.79), controlPoint2: CGPoint(x: 12.85, y: 9.88))
                _58.close()
                _58.move(to: CGPoint(x: 12.74, y: 3.2))
                _58.addCurve(to: CGPoint(x: 15.1, y: 1.22), controlPoint1: CGPoint(x: 12.63, y: 2.01), controlPoint2: CGPoint(x: 13.57, y: 1.22))
                _58.addCurve(to: CGPoint(x: 17.83, y: 3.2), controlPoint1: CGPoint(x: 16.63, y: 1.22), controlPoint2: CGPoint(x: 17.72, y: 2.01))
                _58.addCurve(to: CGPoint(x: 15.47, y: 5.14), controlPoint1: CGPoint(x: 17.94, y: 4.37), controlPoint2: CGPoint(x: 16.99, y: 5.14))
                _58.addCurve(to: CGPoint(x: 12.74, y: 3.2), controlPoint1: CGPoint(x: 13.94, y: 5.14), controlPoint2: CGPoint(x: 12.84, y: 4.37))
                _58.close()
                context.saveGState()
                context.translateBy(x: 179.94, y: 0.25)
                _58.usesEvenOddFillRule = true
                UIColor.black.setFill()
                _58.fill()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Sun 6 Sep + 7 + 57
            context.saveGState()
            context.setAlpha(0.2)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 96, y: 7)
                
                /// Sun 6 Sep
                let sun6Sep = UIBezierPath()
                sun6Sep.move(to: CGPoint(x: 4.26, y: 8.05))
                sun6Sep.addCurve(to: CGPoint(x: 9.19, y: 5.74), controlPoint1: CGPoint(x: 7.09, y: 8.05), controlPoint2: CGPoint(x: 9, y: 7.15))
                sun6Sep.addCurve(to: CGPoint(x: 5.91, y: 3.59), controlPoint1: CGPoint(x: 9.34, y: 4.61), controlPoint2: CGPoint(x: 8.4, y: 3.99))
                sun6Sep.addLine(to: CGPoint(x: 4.66, y: 3.38))
                sun6Sep.addCurve(to: CGPoint(x: 2.47, y: 2.16), controlPoint1: CGPoint(x: 3.01, y: 3.11), controlPoint2: CGPoint(x: 2.39, y: 2.76))
                sun6Sep.addCurve(to: CGPoint(x: 5.36, y: 0.87), controlPoint1: CGPoint(x: 2.59, y: 1.38), controlPoint2: CGPoint(x: 3.74, y: 0.87))
                sun6Sep.addCurve(to: CGPoint(x: 7.96, y: 2.13), controlPoint1: CGPoint(x: 6.89, y: 0.87), controlPoint2: CGPoint(x: 7.85, y: 1.34))
                sun6Sep.addLine(to: CGPoint(x: 9.49, y: 2.13))
                sun6Sep.addCurve(to: CGPoint(x: 5.54, y: 0), controlPoint1: CGPoint(x: 9.53, y: 0.88), controlPoint2: CGPoint(x: 7.89, y: 0))
                sun6Sep.addCurve(to: CGPoint(x: 0.9, y: 2.19), controlPoint1: CGPoint(x: 2.96, y: 0), controlPoint2: CGPoint(x: 1.09, y: 0.88))
                sun6Sep.addCurve(to: CGPoint(x: 3.78, y: 4.26), controlPoint1: CGPoint(x: 0.74, y: 3.28), controlPoint2: CGPoint(x: 1.61, y: 3.91))
                sun6Sep.addLine(to: CGPoint(x: 5.32, y: 4.52))
                sun6Sep.addCurve(to: CGPoint(x: 7.59, y: 5.85), controlPoint1: CGPoint(x: 6.97, y: 4.78), controlPoint2: CGPoint(x: 7.68, y: 5.2))
                sun6Sep.addCurve(to: CGPoint(x: 4.53, y: 7.18), controlPoint1: CGPoint(x: 7.49, y: 6.62), controlPoint2: CGPoint(x: 6.19, y: 7.18))
                sun6Sep.addCurve(to: CGPoint(x: 1.55, y: 5.86), controlPoint1: CGPoint(x: 2.78, y: 7.18), controlPoint2: CGPoint(x: 1.62, y: 6.66))
                sun6Sep.addLine(to: CGPoint(x: 0, y: 5.86))
                sun6Sep.addCurve(to: CGPoint(x: 4.26, y: 8.05), controlPoint1: CGPoint(x: -0.03, y: 7.19), controlPoint2: CGPoint(x: 1.65, y: 8.05))
                sun6Sep.close()
                sun6Sep.move(to: CGPoint(x: 17.81, y: 2.13))
                sun6Sep.addLine(to: CGPoint(x: 17.4, y: 5.52))
                sun6Sep.addCurve(to: CGPoint(x: 14.69, y: 7.13), controlPoint1: CGPoint(x: 17.27, y: 6.53), controlPoint2: CGPoint(x: 16.31, y: 7.13))
                sun6Sep.addCurve(to: CGPoint(x: 12.8, y: 5.62), controlPoint1: CGPoint(x: 13.22, y: 7.13), controlPoint2: CGPoint(x: 12.66, y: 6.65))
                sun6Sep.addLine(to: CGPoint(x: 13.24, y: 2.13))
                sun6Sep.addLine(to: CGPoint(x: 11.79, y: 2.13))
                sun6Sep.addLine(to: CGPoint(x: 11.3, y: 5.84))
                sun6Sep.addCurve(to: CGPoint(x: 14.17, y: 7.97), controlPoint1: CGPoint(x: 11.12, y: 7.2), controlPoint2: CGPoint(x: 12.1, y: 7.97))
                sun6Sep.addCurve(to: CGPoint(x: 17.15, y: 6.97), controlPoint1: CGPoint(x: 15.59, y: 7.97), controlPoint2: CGPoint(x: 16.61, y: 7.61))
                sun6Sep.addLine(to: CGPoint(x: 17.29, y: 6.97))
                sun6Sep.addLine(to: CGPoint(x: 17.18, y: 7.87))
                sun6Sep.addLine(to: CGPoint(x: 18.58, y: 7.87))
                sun6Sep.addLine(to: CGPoint(x: 19.27, y: 2.13))
                sun6Sep.addLine(to: CGPoint(x: 17.81, y: 2.13))
                sun6Sep.close()
                sun6Sep.move(to: CGPoint(x: 22.68, y: 7.87))
                sun6Sep.addLine(to: CGPoint(x: 23.06, y: 4.47))
                sun6Sep.addCurve(to: CGPoint(x: 25.64, y: 2.85), controlPoint1: CGPoint(x: 23.17, y: 3.46), controlPoint2: CGPoint(x: 24.18, y: 2.85))
                sun6Sep.addCurve(to: CGPoint(x: 27.64, y: 4.37), controlPoint1: CGPoint(x: 27.1, y: 2.85), controlPoint2: CGPoint(x: 27.75, y: 3.34))
                sun6Sep.addLine(to: CGPoint(x: 27.27, y: 7.87))
                sun6Sep.addLine(to: CGPoint(x: 28.75, y: 7.87))
                sun6Sep.addLine(to: CGPoint(x: 29.13, y: 4.15))
                sun6Sep.addCurve(to: CGPoint(x: 26.15, y: 2.02), controlPoint1: CGPoint(x: 29.27, y: 2.79), controlPoint2: CGPoint(x: 28.2, y: 2.02))
                sun6Sep.addCurve(to: CGPoint(x: 23.29, y: 3.03), controlPoint1: CGPoint(x: 24.75, y: 2.02), controlPoint2: CGPoint(x: 23.82, y: 2.4))
                sun6Sep.addLine(to: CGPoint(x: 23.15, y: 3.03))
                sun6Sep.addLine(to: CGPoint(x: 23.25, y: 2.13))
                sun6Sep.addLine(to: CGPoint(x: 21.86, y: 2.13))
                sun6Sep.addLine(to: CGPoint(x: 21.21, y: 7.87))
                sun6Sep.addLine(to: CGPoint(x: 22.68, y: 7.87))
                sun6Sep.close()
                sun6Sep.move(to: CGPoint(x: 44.95, y: 5.4))
                sun6Sep.addCurve(to: CGPoint(x: 41.13, y: 2.82), controlPoint1: CGPoint(x: 45.07, y: 3.9), controlPoint2: CGPoint(x: 43.46, y: 2.82))
                sun6Sep.addCurve(to: CGPoint(x: 37.76, y: 4.01), controlPoint1: CGPoint(x: 39.67, y: 2.82), controlPoint2: CGPoint(x: 38.43, y: 3.26))
                sun6Sep.addLine(to: CGPoint(x: 37.63, y: 4.01))
                sun6Sep.addCurve(to: CGPoint(x: 41.11, y: 0.85), controlPoint1: CGPoint(x: 37.9, y: 1.96), controlPoint2: CGPoint(x: 39.12, y: 0.85))
                sun6Sep.addCurve(to: CGPoint(x: 43.47, y: 2.01), controlPoint1: CGPoint(x: 42.31, y: 0.85), controlPoint2: CGPoint(x: 43.2, y: 1.29))
                sun6Sep.addLine(to: CGPoint(x: 45.04, y: 2.01))
                sun6Sep.addCurve(to: CGPoint(x: 41.2, y: 0), controlPoint1: CGPoint(x: 44.75, y: 0.77), controlPoint2: CGPoint(x: 43.27, y: 0))
                sun6Sep.addCurve(to: CGPoint(x: 36.12, y: 4.15), controlPoint1: CGPoint(x: 38.21, y: 0), controlPoint2: CGPoint(x: 36.37, y: 1.51))
                sun6Sep.addCurve(to: CGPoint(x: 36.53, y: 6.3), controlPoint1: CGPoint(x: 36.05, y: 5), controlPoint2: CGPoint(x: 36.18, y: 5.71))
                sun6Sep.addCurve(to: CGPoint(x: 40.42, y: 8.04), controlPoint1: CGPoint(x: 37.19, y: 7.43), controlPoint2: CGPoint(x: 38.56, y: 8.04))
                sun6Sep.addCurve(to: CGPoint(x: 44.95, y: 5.4), controlPoint1: CGPoint(x: 42.95, y: 8.04), controlPoint2: CGPoint(x: 44.83, y: 6.94))
                sun6Sep.close()
                sun6Sep.move(to: CGPoint(x: 37.84, y: 5.4))
                sun6Sep.addCurve(to: CGPoint(x: 40.79, y: 3.65), controlPoint1: CGPoint(x: 37.93, y: 4.38), controlPoint2: CGPoint(x: 39.16, y: 3.65))
                sun6Sep.addCurve(to: CGPoint(x: 43.4, y: 5.43), controlPoint1: CGPoint(x: 42.41, y: 3.65), controlPoint2: CGPoint(x: 43.48, y: 4.38))
                sun6Sep.addCurve(to: CGPoint(x: 40.47, y: 7.2), controlPoint1: CGPoint(x: 43.32, y: 6.43), controlPoint2: CGPoint(x: 42.05, y: 7.2))
                sun6Sep.addCurve(to: CGPoint(x: 37.84, y: 5.4), controlPoint1: CGPoint(x: 38.89, y: 7.2), controlPoint2: CGPoint(x: 37.75, y: 6.42))
                sun6Sep.close()
                sun6Sep.move(to: CGPoint(x: 56.06, y: 8.05))
                sun6Sep.addCurve(to: CGPoint(x: 60.8, y: 5.74), controlPoint1: CGPoint(x: 58.88, y: 8.05), controlPoint2: CGPoint(x: 60.72, y: 7.15))
                sun6Sep.addCurve(to: CGPoint(x: 57.35, y: 3.59), controlPoint1: CGPoint(x: 60.86, y: 4.61), controlPoint2: CGPoint(x: 59.87, y: 3.99))
                sun6Sep.addLine(to: CGPoint(x: 56.08, y: 3.38))
                sun6Sep.addCurve(to: CGPoint(x: 53.79, y: 2.16), controlPoint1: CGPoint(x: 54.4, y: 3.11), controlPoint2: CGPoint(x: 53.76, y: 2.76))
                sun6Sep.addCurve(to: CGPoint(x: 56.58, y: 0.87), controlPoint1: CGPoint(x: 53.84, y: 1.38), controlPoint2: CGPoint(x: 54.95, y: 0.87))
                sun6Sep.addCurve(to: CGPoint(x: 59.28, y: 2.13), controlPoint1: CGPoint(x: 58.1, y: 0.87), controlPoint2: CGPoint(x: 59.11, y: 1.34))
                sun6Sep.addLine(to: CGPoint(x: 60.81, y: 2.13))
                sun6Sep.addCurve(to: CGPoint(x: 56.68, y: 0), controlPoint1: CGPoint(x: 60.75, y: 0.88), controlPoint2: CGPoint(x: 59.04, y: 0))
                sun6Sep.addCurve(to: CGPoint(x: 52.22, y: 2.19), controlPoint1: CGPoint(x: 54.1, y: 0), controlPoint2: CGPoint(x: 52.31, y: 0.88))
                sun6Sep.addCurve(to: CGPoint(x: 55.27, y: 4.26), controlPoint1: CGPoint(x: 52.15, y: 3.28), controlPoint2: CGPoint(x: 53.07, y: 3.91))
                sun6Sep.addLine(to: CGPoint(x: 56.83, y: 4.52))
                sun6Sep.addCurve(to: CGPoint(x: 59.21, y: 5.85), controlPoint1: CGPoint(x: 58.5, y: 4.78), controlPoint2: CGPoint(x: 59.25, y: 5.2))
                sun6Sep.addCurve(to: CGPoint(x: 56.26, y: 7.18), controlPoint1: CGPoint(x: 59.17, y: 6.62), controlPoint2: CGPoint(x: 57.92, y: 7.18))
                sun6Sep.addCurve(to: CGPoint(x: 53.17, y: 5.86), controlPoint1: CGPoint(x: 54.5, y: 7.18), controlPoint2: CGPoint(x: 53.31, y: 6.66))
                sun6Sep.addLine(to: CGPoint(x: 51.62, y: 5.86))
                sun6Sep.addCurve(to: CGPoint(x: 56.06, y: 8.05), controlPoint1: CGPoint(x: 51.69, y: 7.19), controlPoint2: CGPoint(x: 53.44, y: 8.05))
                sun6Sep.close()
                sun6Sep.move(to: CGPoint(x: 69.19, y: 4.52))
                sun6Sep.addLine(to: CGPoint(x: 64.13, y: 4.52))
                sun6Sep.addCurve(to: CGPoint(x: 66.8, y: 2.83), controlPoint1: CGPoint(x: 64.29, y: 3.5), controlPoint2: CGPoint(x: 65.34, y: 2.83))
                sun6Sep.addCurve(to: CGPoint(x: 69.19, y: 4.52), controlPoint1: CGPoint(x: 68.26, y: 2.83), controlPoint2: CGPoint(x: 69.2, y: 3.5))
                sun6Sep.close()
                sun6Sep.move(to: CGPoint(x: 66.66, y: 7.16))
                sun6Sep.addCurve(to: CGPoint(x: 64.09, y: 5.31), controlPoint1: CGPoint(x: 65.1, y: 7.16), controlPoint2: CGPoint(x: 64.12, y: 6.44))
                sun6Sep.addLine(to: CGPoint(x: 64.1, y: 5.26))
                sun6Sep.addLine(to: CGPoint(x: 70.7, y: 5.26))
                sun6Sep.addLine(to: CGPoint(x: 70.72, y: 4.91))
                sun6Sep.addCurve(to: CGPoint(x: 66.86, y: 2.02), controlPoint1: CGPoint(x: 70.78, y: 3.13), controlPoint2: CGPoint(x: 69.32, y: 2.02))
                sun6Sep.addCurve(to: CGPoint(x: 62.58, y: 5), controlPoint1: CGPoint(x: 64.35, y: 2.02), controlPoint2: CGPoint(x: 62.67, y: 3.2))
                sun6Sep.addCurve(to: CGPoint(x: 66.59, y: 7.97), controlPoint1: CGPoint(x: 62.49, y: 6.82), controlPoint2: CGPoint(x: 64.03, y: 7.97))
                sun6Sep.addCurve(to: CGPoint(x: 70.54, y: 6.38), controlPoint1: CGPoint(x: 68.61, y: 7.97), controlPoint2: CGPoint(x: 70.06, y: 7.37))
                sun6Sep.addLine(to: CGPoint(x: 69.07, y: 6.38))
                sun6Sep.addCurve(to: CGPoint(x: 66.66, y: 7.16), controlPoint1: CGPoint(x: 68.67, y: 6.89), controlPoint2: CGPoint(x: 67.85, y: 7.16))
                sun6Sep.close()
                sun6Sep.move(to: CGPoint(x: 74.46, y: 3.08))
                sun6Sep.addLine(to: CGPoint(x: 74.32, y: 3.08))
                sun6Sep.addLine(to: CGPoint(x: 74.35, y: 2.13))
                sun6Sep.addLine(to: CGPoint(x: 72.96, y: 2.13))
                sun6Sep.addLine(to: CGPoint(x: 72.7, y: 9.79))
                sun6Sep.addLine(to: CGPoint(x: 74.17, y: 9.79))
                sun6Sep.addLine(to: CGPoint(x: 74.26, y: 7))
                sun6Sep.addLine(to: CGPoint(x: 74.4, y: 7))
                sun6Sep.addCurve(to: CGPoint(x: 77.25, y: 7.97), controlPoint1: CGPoint(x: 74.88, y: 7.61), controlPoint2: CGPoint(x: 75.93, y: 7.97))
                sun6Sep.addCurve(to: CGPoint(x: 81.19, y: 5), controlPoint1: CGPoint(x: 79.6, y: 7.97), controlPoint2: CGPoint(x: 81.16, y: 6.79))
                sun6Sep.addCurve(to: CGPoint(x: 77.42, y: 2.02), controlPoint1: CGPoint(x: 81.23, y: 3.19), controlPoint2: CGPoint(x: 79.75, y: 2.02))
                sun6Sep.addCurve(to: CGPoint(x: 74.46, y: 3.08), controlPoint1: CGPoint(x: 76.17, y: 2.02), controlPoint2: CGPoint(x: 75.06, y: 2.42))
                sun6Sep.close()
                sun6Sep.move(to: CGPoint(x: 74.28, y: 5))
                sun6Sep.addCurve(to: CGPoint(x: 77.05, y: 2.85), controlPoint1: CGPoint(x: 74.33, y: 3.68), controlPoint2: CGPoint(x: 75.4, y: 2.85))
                sun6Sep.addCurve(to: CGPoint(x: 79.68, y: 5), controlPoint1: CGPoint(x: 78.73, y: 2.85), controlPoint2: CGPoint(x: 79.71, y: 3.65))
                sun6Sep.addCurve(to: CGPoint(x: 76.93, y: 7.14), controlPoint1: CGPoint(x: 79.65, y: 6.34), controlPoint2: CGPoint(x: 78.62, y: 7.14))
                sun6Sep.addCurve(to: CGPoint(x: 74.28, y: 5), controlPoint1: CGPoint(x: 75.27, y: 7.14), controlPoint2: CGPoint(x: 74.24, y: 6.31))
                sun6Sep.close()
                context.saveGState()
                context.translateBy(x: 0.19, y: 0.01)
                sun6Sep.usesEvenOddFillRule = true
                UIColor.black.setFill()
                sun6Sep.fill()
                context.restoreGState()
                
                /// 7
                let _7 = UIBezierPath()
                _7.move(to: CGPoint(x: 2.95, y: 7.69))
                _7.addLine(to: CGPoint(x: 8.12, y: 0.89))
                _7.addLine(to: CGPoint(x: 8.08, y: 0))
                _7.addLine(to: CGPoint.zero)
                _7.addLine(to: CGPoint(x: 0.03, y: 0.86))
                _7.addLine(to: CGPoint(x: 6.57, y: 0.86))
                _7.addLine(to: CGPoint(x: 6.57, y: 0.93))
                _7.addLine(to: CGPoint(x: 1.34, y: 7.69))
                _7.addLine(to: CGPoint(x: 2.95, y: 7.69))
                _7.close()
                context.saveGState()
                context.translateBy(x: 117.66, y: 0.19)
                _7.usesEvenOddFillRule = true
                UIColor.black.setFill()
                _7.fill()
                context.restoreGState()
                
                /// 57
                let _57 = UIBezierPath()
                _57.move(to: CGPoint(x: 8.39, y: 5.24))
                _57.addCurve(to: CGPoint(x: 4.09, y: 2.67), controlPoint1: CGPoint(x: 8.19, y: 3.73), controlPoint2: CGPoint(x: 6.42, y: 2.67))
                _57.addCurve(to: CGPoint(x: 1.58, y: 3.32), controlPoint1: CGPoint(x: 2.96, y: 2.67), controlPoint2: CGPoint(x: 2.12, y: 2.89))
                _57.addLine(to: CGPoint(x: 1.44, y: 3.32))
                _57.addLine(to: CGPoint(x: 1.49, y: 0.86))
                _57.addLine(to: CGPoint(x: 7.12, y: 0.86))
                _57.addLine(to: CGPoint(x: 7.01, y: 0))
                _57.addLine(to: CGPoint(x: 0.2, y: 0))
                _57.addLine(to: CGPoint(x: 0.04, y: 4.36))
                _57.addLine(to: CGPoint(x: 1.48, y: 4.36))
                _57.addCurve(to: CGPoint(x: 3.91, y: 3.49), controlPoint1: CGPoint(x: 1.92, y: 3.81), controlPoint2: CGPoint(x: 2.8, y: 3.49))
                _57.addCurve(to: CGPoint(x: 6.85, y: 5.27), controlPoint1: CGPoint(x: 5.52, y: 3.49), controlPoint2: CGPoint(x: 6.72, y: 4.21))
                _57.addCurve(to: CGPoint(x: 4.33, y: 7.03), controlPoint1: CGPoint(x: 6.99, y: 6.32), controlPoint2: CGPoint(x: 5.98, y: 7.03))
                _57.addCurve(to: CGPoint(x: 1.51, y: 5.64), controlPoint1: CGPoint(x: 2.87, y: 7.03), controlPoint2: CGPoint(x: 1.75, y: 6.47))
                _57.addLine(to: CGPoint(x: 0, y: 5.64))
                _57.addCurve(to: CGPoint(x: 4.41, y: 7.87), controlPoint1: CGPoint(x: 0.29, y: 6.97), controlPoint2: CGPoint(x: 2.08, y: 7.87))
                _57.addCurve(to: CGPoint(x: 8.39, y: 5.24), controlPoint1: CGPoint(x: 6.97, y: 7.87), controlPoint2: CGPoint(x: 8.59, y: 6.8))
                _57.close()
                _57.move(to: CGPoint(x: 13.14, y: 7.69))
                _57.addLine(to: CGPoint(x: 17.64, y: 0.89))
                _57.addLine(to: CGPoint(x: 17.51, y: 0))
                _57.addLine(to: CGPoint(x: 9.43, y: 0))
                _57.addLine(to: CGPoint(x: 9.55, y: 0.86))
                _57.addLine(to: CGPoint(x: 16.09, y: 0.86))
                _57.addLine(to: CGPoint(x: 16.1, y: 0.93))
                _57.addLine(to: CGPoint(x: 11.52, y: 7.69))
                _57.addLine(to: CGPoint(x: 13.14, y: 7.69))
                _57.close()
                context.saveGState()
                context.translateBy(x: 170.81, y: 0.19)
                _57.usesEvenOddFillRule = true
                UIColor.black.setFill()
                _57.fill()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Sat 5 Sep + 6 + 56
            context.saveGState()
            context.setAlpha(0.15)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 103.5, y: -3)
                
                /// Sat 5 Sep
                let sat5Sep = UIBezierPath()
                sat5Sep.move(to: CGPoint(x: 4.04, y: 6.07))
                sat5Sep.addCurve(to: CGPoint(x: 8.74, y: 4.33), controlPoint1: CGPoint(x: 6.73, y: 6.07), controlPoint2: CGPoint(x: 8.55, y: 5.39))
                sat5Sep.addCurve(to: CGPoint(x: 5.64, y: 2.71), controlPoint1: CGPoint(x: 8.89, y: 3.47), controlPoint2: CGPoint(x: 8.01, y: 3.01))
                sat5Sep.addLine(to: CGPoint(x: 4.45, y: 2.55))
                sat5Sep.addCurve(to: CGPoint(x: 2.38, y: 1.63), controlPoint1: CGPoint(x: 2.88, y: 2.34), controlPoint2: CGPoint(x: 2.3, y: 2.08))
                sat5Sep.addCurve(to: CGPoint(x: 5.14, y: 0.65), controlPoint1: CGPoint(x: 2.5, y: 1.04), controlPoint2: CGPoint(x: 3.6, y: 0.65))
                sat5Sep.addCurve(to: CGPoint(x: 7.6, y: 1.6), controlPoint1: CGPoint(x: 6.59, y: 0.65), controlPoint2: CGPoint(x: 7.51, y: 1.01))
                sat5Sep.addLine(to: CGPoint(x: 9.06, y: 1.6))
                sat5Sep.addCurve(to: CGPoint(x: 5.31, y: 0), controlPoint1: CGPoint(x: 9.11, y: 0.67), controlPoint2: CGPoint(x: 7.55, y: 0))
                sat5Sep.addCurve(to: CGPoint(x: 0.89, y: 1.65), controlPoint1: CGPoint(x: 2.86, y: 0), controlPoint2: CGPoint(x: 1.08, y: 0.67))
                sat5Sep.addCurve(to: CGPoint(x: 3.61, y: 3.21), controlPoint1: CGPoint(x: 0.73, y: 2.47), controlPoint2: CGPoint(x: 1.55, y: 2.95))
                sat5Sep.addLine(to: CGPoint(x: 5.07, y: 3.41))
                sat5Sep.addCurve(to: CGPoint(x: 7.22, y: 4.41), controlPoint1: CGPoint(x: 6.64, y: 3.61), controlPoint2: CGPoint(x: 7.31, y: 3.92))
                sat5Sep.addCurve(to: CGPoint(x: 4.3, y: 5.41), controlPoint1: CGPoint(x: 7.12, y: 4.99), controlPoint2: CGPoint(x: 5.88, y: 5.41))
                sat5Sep.addCurve(to: CGPoint(x: 1.48, y: 4.42), controlPoint1: CGPoint(x: 2.63, y: 5.41), controlPoint2: CGPoint(x: 1.54, y: 5.02))
                sat5Sep.addLine(to: CGPoint(x: 0, y: 4.42))
                sat5Sep.addCurve(to: CGPoint(x: 4.04, y: 6.07), controlPoint1: CGPoint(x: -0.04, y: 5.42), controlPoint2: CGPoint(x: 1.55, y: 6.07))
                sat5Sep.close()
                sat5Sep.move(to: CGPoint(x: 11.7, y: 4.7))
                sat5Sep.addCurve(to: CGPoint(x: 13.74, y: 4), controlPoint1: CGPoint(x: 11.78, y: 4.27), controlPoint2: CGPoint(x: 12.4, y: 4.04))
                sat5Sep.addLine(to: CGPoint(x: 16.1, y: 3.92))
                sat5Sep.addLine(to: CGPoint(x: 16.04, y: 4.32))
                sat5Sep.addCurve(to: CGPoint(x: 13.36, y: 5.4), controlPoint1: CGPoint(x: 15.94, y: 4.94), controlPoint2: CGPoint(x: 14.8, y: 5.4))
                sat5Sep.addCurve(to: CGPoint(x: 11.7, y: 4.7), controlPoint1: CGPoint(x: 12.34, y: 5.4), controlPoint2: CGPoint(x: 11.63, y: 5.15))
                sat5Sep.close()
                sat5Sep.move(to: CGPoint(x: 15.81, y: 5.29))
                sat5Sep.addLine(to: CGPoint(x: 15.94, y: 5.29))
                sat5Sep.addLine(to: CGPoint(x: 15.84, y: 5.93))
                sat5Sep.addLine(to: CGPoint(x: 17.17, y: 5.93))
                sat5Sep.addLine(to: CGPoint(x: 17.65, y: 2.97))
                sat5Sep.addCurve(to: CGPoint(x: 14.57, y: 1.53), controlPoint1: CGPoint(x: 17.79, y: 2.07), controlPoint2: CGPoint(x: 16.69, y: 1.53))
                sat5Sep.addCurve(to: CGPoint(x: 10.96, y: 2.68), controlPoint1: CGPoint(x: 12.72, y: 1.53), controlPoint2: CGPoint(x: 11.27, y: 1.98))
                sat5Sep.addLine(to: CGPoint(x: 12.37, y: 2.68))
                sat5Sep.addCurve(to: CGPoint(x: 14.42, y: 2.14), controlPoint1: CGPoint(x: 12.62, y: 2.34), controlPoint2: CGPoint(x: 13.38, y: 2.14))
                sat5Sep.addCurve(to: CGPoint(x: 16.26, y: 2.97), controlPoint1: CGPoint(x: 15.72, y: 2.14), controlPoint2: CGPoint(x: 16.34, y: 2.43))
                sat5Sep.addLine(to: CGPoint(x: 16.19, y: 3.36))
                sat5Sep.addLine(to: CGPoint(x: 13.66, y: 3.44))
                sat5Sep.addCurve(to: CGPoint(x: 10.26, y: 4.72), controlPoint1: CGPoint(x: 11.62, y: 3.5), controlPoint2: CGPoint(x: 10.39, y: 3.94))
                sat5Sep.addCurve(to: CGPoint(x: 12.99, y: 6.01), controlPoint1: CGPoint(x: 10.12, y: 5.51), controlPoint2: CGPoint(x: 11.29, y: 6.01))
                sat5Sep.addCurve(to: CGPoint(x: 15.81, y: 5.29), controlPoint1: CGPoint(x: 14.17, y: 6.01), controlPoint2: CGPoint(x: 15.17, y: 5.76))
                sat5Sep.close()
                sat5Sep.move(to: CGPoint(x: 20.87, y: 1.6))
                sat5Sep.addLine(to: CGPoint(x: 19.47, y: 1.6))
                sat5Sep.addLine(to: CGPoint(x: 19.38, y: 2.18))
                sat5Sep.addLine(to: CGPoint(x: 20.78, y: 2.18))
                sat5Sep.addLine(to: CGPoint(x: 20.38, y: 4.81))
                sat5Sep.addCurve(to: CGPoint(x: 22.73, y: 5.96), controlPoint1: CGPoint(x: 20.25, y: 5.64), controlPoint2: CGPoint(x: 20.92, y: 5.96))
                sat5Sep.addCurve(to: CGPoint(x: 23.56, y: 5.92), controlPoint1: CGPoint(x: 23.01, y: 5.96), controlPoint2: CGPoint(x: 23.28, y: 5.95))
                sat5Sep.addLine(to: CGPoint(x: 23.65, y: 5.34))
                sat5Sep.addCurve(to: CGPoint(x: 22.99, y: 5.36), controlPoint1: CGPoint(x: 23.38, y: 5.35), controlPoint2: CGPoint(x: 23.24, y: 5.36))
                sat5Sep.addCurve(to: CGPoint(x: 21.8, y: 4.63), controlPoint1: CGPoint(x: 22.08, y: 5.36), controlPoint2: CGPoint(x: 21.72, y: 5.14))
                sat5Sep.addLine(to: CGPoint(x: 22.17, y: 2.18))
                sat5Sep.addLine(to: CGPoint(x: 24.11, y: 2.18))
                sat5Sep.addLine(to: CGPoint(x: 24.19, y: 1.6))
                sat5Sep.addLine(to: CGPoint(x: 22.26, y: 1.6))
                sat5Sep.addLine(to: CGPoint(x: 22.42, y: 0.48))
                sat5Sep.addLine(to: CGPoint(x: 21.04, y: 0.48))
                sat5Sep.addLine(to: CGPoint(x: 20.87, y: 1.6))
                sat5Sep.close()
                sat5Sep.move(to: CGPoint(x: 38.27, y: 4.09))
                sat5Sep.addCurve(to: CGPoint(x: 34.73, y: 2.15), controlPoint1: CGPoint(x: 38.4, y: 2.95), controlPoint2: CGPoint(x: 36.95, y: 2.15))
                sat5Sep.addCurve(to: CGPoint(x: 32.21, y: 2.64), controlPoint1: CGPoint(x: 33.66, y: 2.15), controlPoint2: CGPoint(x: 32.81, y: 2.31))
                sat5Sep.addLine(to: CGPoint(x: 32.08, y: 2.64))
                sat5Sep.addLine(to: CGPoint(x: 32.65, y: 0.78))
                sat5Sep.addLine(to: CGPoint(x: 37.99, y: 0.78))
                sat5Sep.addLine(to: CGPoint(x: 38.07, y: 0.14))
                sat5Sep.addLine(to: CGPoint(x: 31.6, y: 0.14))
                sat5Sep.addLine(to: CGPoint(x: 30.53, y: 3.42))
                sat5Sep.addLine(to: CGPoint(x: 31.9, y: 3.42))
                sat5Sep.addCurve(to: CGPoint(x: 34.39, y: 2.77), controlPoint1: CGPoint(x: 32.43, y: 3.01), controlPoint2: CGPoint(x: 33.33, y: 2.77))
                sat5Sep.addCurve(to: CGPoint(x: 36.81, y: 4.11), controlPoint1: CGPoint(x: 35.92, y: 2.77), controlPoint2: CGPoint(x: 36.91, y: 3.31))
                sat5Sep.addCurve(to: CGPoint(x: 34.04, y: 5.43), controlPoint1: CGPoint(x: 36.72, y: 4.9), controlPoint2: CGPoint(x: 35.61, y: 5.43))
                sat5Sep.addCurve(to: CGPoint(x: 31.65, y: 4.39), controlPoint1: CGPoint(x: 32.65, y: 5.43), controlPoint2: CGPoint(x: 31.7, y: 5.02))
                sat5Sep.addLine(to: CGPoint(x: 30.21, y: 4.39))
                sat5Sep.addCurve(to: CGPoint(x: 33.94, y: 6.07), controlPoint1: CGPoint(x: 30.21, y: 5.39), controlPoint2: CGPoint(x: 31.72, y: 6.07))
                sat5Sep.addCurve(to: CGPoint(x: 38.27, y: 4.09), controlPoint1: CGPoint(x: 36.38, y: 6.07), controlPoint2: CGPoint(x: 38.14, y: 5.27))
                sat5Sep.close()
                sat5Sep.move(to: CGPoint(x: 48.79, y: 6.07))
                sat5Sep.addCurve(to: CGPoint(x: 53.32, y: 4.33), controlPoint1: CGPoint(x: 51.48, y: 6.07), controlPoint2: CGPoint(x: 53.24, y: 5.39))
                sat5Sep.addCurve(to: CGPoint(x: 50.07, y: 2.71), controlPoint1: CGPoint(x: 53.39, y: 3.47), controlPoint2: CGPoint(x: 52.46, y: 3.01))
                sat5Sep.addLine(to: CGPoint(x: 48.86, y: 2.55))
                sat5Sep.addCurve(to: CGPoint(x: 46.7, y: 1.63), controlPoint1: CGPoint(x: 47.27, y: 2.34), controlPoint2: CGPoint(x: 46.66, y: 2.08))
                sat5Sep.addCurve(to: CGPoint(x: 49.37, y: 0.65), controlPoint1: CGPoint(x: 46.76, y: 1.04), controlPoint2: CGPoint(x: 47.82, y: 0.65))
                sat5Sep.addCurve(to: CGPoint(x: 51.92, y: 1.6), controlPoint1: CGPoint(x: 50.81, y: 0.65), controlPoint2: CGPoint(x: 51.77, y: 1.01))
                sat5Sep.addLine(to: CGPoint(x: 53.38, y: 1.6))
                sat5Sep.addCurve(to: CGPoint(x: 49.47, y: 0), controlPoint1: CGPoint(x: 53.33, y: 0.67), controlPoint2: CGPoint(x: 51.72, y: 0))
                sat5Sep.addCurve(to: CGPoint(x: 45.21, y: 1.65), controlPoint1: CGPoint(x: 47.02, y: 0), controlPoint2: CGPoint(x: 45.31, y: 0.67))
                sat5Sep.addCurve(to: CGPoint(x: 48.08, y: 3.21), controlPoint1: CGPoint(x: 45.13, y: 2.47), controlPoint2: CGPoint(x: 45.99, y: 2.95))
                sat5Sep.addLine(to: CGPoint(x: 49.56, y: 3.41))
                sat5Sep.addCurve(to: CGPoint(x: 51.82, y: 4.41), controlPoint1: CGPoint(x: 51.15, y: 3.61), controlPoint2: CGPoint(x: 51.86, y: 3.92))
                sat5Sep.addCurve(to: CGPoint(x: 48.99, y: 5.41), controlPoint1: CGPoint(x: 51.77, y: 4.99), controlPoint2: CGPoint(x: 50.57, y: 5.41))
                sat5Sep.addCurve(to: CGPoint(x: 46.07, y: 4.42), controlPoint1: CGPoint(x: 47.32, y: 5.41), controlPoint2: CGPoint(x: 46.19, y: 5.02))
                sat5Sep.addLine(to: CGPoint(x: 44.59, y: 4.42))
                sat5Sep.addCurve(to: CGPoint(x: 48.79, y: 6.07), controlPoint1: CGPoint(x: 44.65, y: 5.42), controlPoint2: CGPoint(x: 46.3, y: 6.07))
                sat5Sep.close()
                sat5Sep.move(to: CGPoint(x: 61.32, y: 3.41))
                sat5Sep.addLine(to: CGPoint(x: 56.51, y: 3.41))
                sat5Sep.addCurve(to: CGPoint(x: 59.07, y: 2.14), controlPoint1: CGPoint(x: 56.67, y: 2.64), controlPoint2: CGPoint(x: 57.68, y: 2.14))
                sat5Sep.addCurve(to: CGPoint(x: 61.32, y: 3.41), controlPoint1: CGPoint(x: 60.45, y: 2.14), controlPoint2: CGPoint(x: 61.34, y: 2.64))
                sat5Sep.close()
                sat5Sep.move(to: CGPoint(x: 58.89, y: 5.4))
                sat5Sep.addCurve(to: CGPoint(x: 56.46, y: 4), controlPoint1: CGPoint(x: 57.4, y: 5.4), controlPoint2: CGPoint(x: 56.47, y: 4.86))
                sat5Sep.addLine(to: CGPoint(x: 56.47, y: 3.97))
                sat5Sep.addLine(to: CGPoint(x: 62.75, y: 3.97))
                sat5Sep.addLine(to: CGPoint(x: 62.77, y: 3.7))
                sat5Sep.addCurve(to: CGPoint(x: 59.13, y: 1.53), controlPoint1: CGPoint(x: 62.85, y: 2.36), controlPoint2: CGPoint(x: 61.47, y: 1.53))
                sat5Sep.addCurve(to: CGPoint(x: 55.03, y: 3.77), controlPoint1: CGPoint(x: 56.74, y: 1.53), controlPoint2: CGPoint(x: 55.14, y: 2.41))
                sat5Sep.addCurve(to: CGPoint(x: 58.81, y: 6.01), controlPoint1: CGPoint(x: 54.92, y: 5.14), controlPoint2: CGPoint(x: 56.38, y: 6.01))
                sat5Sep.addCurve(to: CGPoint(x: 62.58, y: 4.81), controlPoint1: CGPoint(x: 60.74, y: 6.01), controlPoint2: CGPoint(x: 62.12, y: 5.55))
                sat5Sep.addLine(to: CGPoint(x: 61.19, y: 4.81))
                sat5Sep.addCurve(to: CGPoint(x: 58.89, y: 5.4), controlPoint1: CGPoint(x: 60.8, y: 5.19), controlPoint2: CGPoint(x: 60.02, y: 5.4))
                sat5Sep.close()
                sat5Sep.move(to: CGPoint(x: 66.34, y: 2.33))
                sat5Sep.addLine(to: CGPoint(x: 66.21, y: 2.33))
                sat5Sep.addLine(to: CGPoint(x: 66.25, y: 1.6))
                sat5Sep.addLine(to: CGPoint(x: 64.93, y: 1.6))
                sat5Sep.addLine(to: CGPoint(x: 64.6, y: 7.38))
                sat5Sep.addLine(to: CGPoint(x: 66.01, y: 7.38))
                sat5Sep.addLine(to: CGPoint(x: 66.12, y: 5.28))
                sat5Sep.addLine(to: CGPoint(x: 66.25, y: 5.28))
                sat5Sep.addCurve(to: CGPoint(x: 68.95, y: 6.01), controlPoint1: CGPoint(x: 66.7, y: 5.74), controlPoint2: CGPoint(x: 67.7, y: 6.01))
                sat5Sep.addCurve(to: CGPoint(x: 72.73, y: 3.77), controlPoint1: CGPoint(x: 71.18, y: 6.01), controlPoint2: CGPoint(x: 72.68, y: 5.12))
                sat5Sep.addCurve(to: CGPoint(x: 69.17, y: 1.53), controlPoint1: CGPoint(x: 72.78, y: 2.41), controlPoint2: CGPoint(x: 71.38, y: 1.53))
                sat5Sep.addCurve(to: CGPoint(x: 66.34, y: 2.33), controlPoint1: CGPoint(x: 67.98, y: 1.53), controlPoint2: CGPoint(x: 66.93, y: 1.83))
                sat5Sep.close()
                sat5Sep.move(to: CGPoint(x: 66.16, y: 3.77))
                sat5Sep.addCurve(to: CGPoint(x: 68.81, y: 2.15), controlPoint1: CGPoint(x: 66.21, y: 2.77), controlPoint2: CGPoint(x: 67.24, y: 2.15))
                sat5Sep.addCurve(to: CGPoint(x: 71.29, y: 3.77), controlPoint1: CGPoint(x: 70.4, y: 2.15), controlPoint2: CGPoint(x: 71.33, y: 2.76))
                sat5Sep.addCurve(to: CGPoint(x: 68.65, y: 5.39), controlPoint1: CGPoint(x: 71.25, y: 4.78), controlPoint2: CGPoint(x: 70.26, y: 5.39))
                sat5Sep.addCurve(to: CGPoint(x: 66.16, y: 3.77), controlPoint1: CGPoint(x: 67.07, y: 5.39), controlPoint2: CGPoint(x: 66.11, y: 4.76))
                sat5Sep.close()
                context.saveGState()
                context.translateBy(x: 0.46, y: 0.12)
                sat5Sep.usesEvenOddFillRule = true
                UIColor.black.setFill()
                sat5Sep.fill()
                context.restoreGState()
                
                /// 6
                let _6 = UIBezierPath()
                _6.move(to: CGPoint(x: 8.55, y: 4.07))
                _6.addCurve(to: CGPoint(x: 4.6, y: 2.13), controlPoint1: CGPoint(x: 8.48, y: 2.94), controlPoint2: CGPoint(x: 6.83, y: 2.13))
                _6.addCurve(to: CGPoint(x: 1.54, y: 3.02), controlPoint1: CGPoint(x: 3.22, y: 2.13), controlPoint2: CGPoint(x: 2.09, y: 2.46))
                _6.addLine(to: CGPoint(x: 1.41, y: 3.02))
                _6.addCurve(to: CGPoint(x: 4.35, y: 0.64), controlPoint1: CGPoint(x: 1.43, y: 1.48), controlPoint2: CGPoint(x: 2.46, y: 0.64))
                _6.addCurve(to: CGPoint(x: 6.73, y: 1.51), controlPoint1: CGPoint(x: 5.5, y: 0.64), controlPoint2: CGPoint(x: 6.39, y: 0.97))
                _6.addLine(to: CGPoint(x: 8.23, y: 1.51))
                _6.addCurve(to: CGPoint(x: 4.34, y: 0), controlPoint1: CGPoint(x: 7.8, y: 0.58), controlPoint2: CGPoint(x: 6.31, y: 0))
                _6.addCurve(to: CGPoint(x: 0, y: 3.13), controlPoint1: CGPoint(x: 1.5, y: 0), controlPoint2: CGPoint(x: -0.08, y: 1.14))
                _6.addCurve(to: CGPoint(x: 0.64, y: 4.75), controlPoint1: CGPoint(x: 0.03, y: 3.77), controlPoint2: CGPoint(x: 0.24, y: 4.31))
                _6.addCurve(to: CGPoint(x: 4.54, y: 6.06), controlPoint1: CGPoint(x: 1.4, y: 5.6), controlPoint2: CGPoint(x: 2.78, y: 6.06))
                _6.addCurve(to: CGPoint(x: 8.55, y: 4.07), controlPoint1: CGPoint(x: 6.95, y: 6.06), controlPoint2: CGPoint(x: 8.62, y: 5.23))
                _6.close()
                _6.move(to: CGPoint(x: 1.78, y: 4.07))
                _6.addCurve(to: CGPoint(x: 4.38, y: 2.76), controlPoint1: CGPoint(x: 1.75, y: 3.3), controlPoint2: CGPoint(x: 2.83, y: 2.76))
                _6.addCurve(to: CGPoint(x: 7.07, y: 4.09), controlPoint1: CGPoint(x: 5.92, y: 2.76), controlPoint2: CGPoint(x: 7.03, y: 3.3))
                _6.addCurve(to: CGPoint(x: 4.5, y: 5.43), controlPoint1: CGPoint(x: 7.11, y: 4.85), controlPoint2: CGPoint(x: 6, y: 5.43))
                _6.addCurve(to: CGPoint(x: 1.78, y: 4.07), controlPoint1: CGPoint(x: 2.99, y: 5.43), controlPoint2: CGPoint(x: 1.82, y: 4.84))
                _6.close()
                context.saveGState()
                context.translateBy(x: 108.74, y: 0.12)
                _6.usesEvenOddFillRule = true
                UIColor.black.setFill()
                _6.fill()
                context.restoreGState()
                
                /// 56
                let _56 = UIBezierPath()
                _56.move(to: CGPoint(x: 7.97, y: 4.09))
                _56.addCurve(to: CGPoint(x: 3.87, y: 2.15), controlPoint1: CGPoint(x: 7.78, y: 2.95), controlPoint2: CGPoint(x: 6.09, y: 2.15))
                _56.addCurve(to: CGPoint(x: 1.49, y: 2.64), controlPoint1: CGPoint(x: 2.8, y: 2.15), controlPoint2: CGPoint(x: 2, y: 2.31))
                _56.addLine(to: CGPoint(x: 1.36, y: 2.64))
                _56.addLine(to: CGPoint(x: 1.39, y: 0.78))
                _56.addLine(to: CGPoint(x: 6.74, y: 0.78))
                _56.addLine(to: CGPoint(x: 6.63, y: 0.14))
                _56.addLine(to: CGPoint(x: 0.16, y: 0.14))
                _56.addLine(to: CGPoint(x: 0.04, y: 3.42))
                _56.addLine(to: CGPoint(x: 1.4, y: 3.42))
                _56.addCurve(to: CGPoint(x: 3.71, y: 2.77), controlPoint1: CGPoint(x: 1.82, y: 3.01), controlPoint2: CGPoint(x: 2.65, y: 2.77))
                _56.addCurve(to: CGPoint(x: 6.52, y: 4.11), controlPoint1: CGPoint(x: 5.24, y: 2.77), controlPoint2: CGPoint(x: 6.38, y: 3.31))
                _56.addCurve(to: CGPoint(x: 4.12, y: 5.43), controlPoint1: CGPoint(x: 6.65, y: 4.9), controlPoint2: CGPoint(x: 5.69, y: 5.43))
                _56.addCurve(to: CGPoint(x: 1.44, y: 4.39), controlPoint1: CGPoint(x: 2.74, y: 5.43), controlPoint2: CGPoint(x: 1.67, y: 5.02))
                _56.addLine(to: CGPoint(x: 0, y: 4.39))
                _56.addCurve(to: CGPoint(x: 4.21, y: 6.07), controlPoint1: CGPoint(x: 0.29, y: 5.39), controlPoint2: CGPoint(x: 1.99, y: 6.07))
                _56.addCurve(to: CGPoint(x: 7.97, y: 4.09), controlPoint1: CGPoint(x: 6.65, y: 6.07), controlPoint2: CGPoint(x: 8.18, y: 5.27))
                _56.close()
                _56.move(to: CGPoint(x: 18.39, y: 4.07))
                _56.addCurve(to: CGPoint(x: 14.18, y: 2.13), controlPoint1: CGPoint(x: 18.17, y: 2.94), controlPoint2: CGPoint(x: 16.4, y: 2.13))
                _56.addCurve(to: CGPoint(x: 11.24, y: 3.02), controlPoint1: CGPoint(x: 12.79, y: 2.13), controlPoint2: CGPoint(x: 11.72, y: 2.46))
                _56.addLine(to: CGPoint(x: 11.11, y: 3.02))
                _56.addCurve(to: CGPoint(x: 13.73, y: 0.64), controlPoint1: CGPoint(x: 10.92, y: 1.48), controlPoint2: CGPoint(x: 11.84, y: 0.64))
                _56.addCurve(to: CGPoint(x: 16.23, y: 1.51), controlPoint1: CGPoint(x: 14.87, y: 0.64), controlPoint2: CGPoint(x: 15.81, y: 0.97))
                _56.addLine(to: CGPoint(x: 17.72, y: 1.51))
                _56.addCurve(to: CGPoint(x: 13.62, y: 0), controlPoint1: CGPoint(x: 17.17, y: 0.58), controlPoint2: CGPoint(x: 15.59, y: 0))
                _56.addCurve(to: CGPoint(x: 9.72, y: 3.13), controlPoint1: CGPoint(x: 10.79, y: 0), controlPoint2: CGPoint(x: 9.36, y: 1.14))
                _56.addCurve(to: CGPoint(x: 10.57, y: 4.75), controlPoint1: CGPoint(x: 9.83, y: 3.77), controlPoint2: CGPoint(x: 10.11, y: 4.31))
                _56.addCurve(to: CGPoint(x: 14.66, y: 6.06), controlPoint1: CGPoint(x: 11.46, y: 5.6), controlPoint2: CGPoint(x: 12.89, y: 6.06))
                _56.addCurve(to: CGPoint(x: 18.39, y: 4.07), controlPoint1: CGPoint(x: 17.07, y: 6.06), controlPoint2: CGPoint(x: 18.62, y: 5.23))
                _56.close()
                _56.move(to: CGPoint(x: 11.63, y: 4.07))
                _56.addCurve(to: CGPoint(x: 14.04, y: 2.76), controlPoint1: CGPoint(x: 11.49, y: 3.3), controlPoint2: CGPoint(x: 12.5, y: 2.76))
                _56.addCurve(to: CGPoint(x: 16.92, y: 4.09), controlPoint1: CGPoint(x: 15.59, y: 2.76), controlPoint2: CGPoint(x: 16.77, y: 3.3))
                _56.addCurve(to: CGPoint(x: 14.53, y: 5.43), controlPoint1: CGPoint(x: 17.07, y: 4.85), controlPoint2: CGPoint(x: 16.03, y: 5.43))
                _56.addCurve(to: CGPoint(x: 11.63, y: 4.07), controlPoint1: CGPoint(x: 13.02, y: 5.43), controlPoint2: CGPoint(x: 11.77, y: 4.84))
                _56.close()
                context.saveGState()
                context.translateBy(x: 160.62, y: 0.12)
                _56.usesEvenOddFillRule = true
                UIColor.black.setFill()
                _56.fill()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Active
            do {
                context.saveGState()
                context.translateBy(x: 62, y: 75)
                
                /// ↳ 00
                let _00 = NSMutableAttributedString(string: "00")
                _00.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: _00.length))
                _00.addAttribute(.kern, value: -0.2, range: NSRange(location: 0, length: _00.length))
                _00.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _00.length))
                context.saveGState()
                _00.draw(at: CGPoint(x: 207, y: 0))
                context.restoreGState()
                
                /// ↳ 10
                let _10 = NSMutableAttributedString(string: "10")
                _10.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: _10.length))
                _10.addAttribute(.kern, value: -0.2, range: NSRange(location: 0, length: _10.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _10.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _10.length))
                }
                _10.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _10.length))
                context.saveGState()
                _10.draw(at: CGPoint(x: 146, y: 0))
                context.restoreGState()
                
                /// ↳ Wed 9 Sep
                let wed9Sep = NSMutableAttributedString(string: "Wed 9 Sep")
                wed9Sep.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: wed9Sep.length))
                wed9Sep.addAttribute(.kern, value: -0.2, range: NSRange(location: 0, length: wed9Sep.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    wed9Sep.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: wed9Sep.length))
                }
                wed9Sep.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: wed9Sep.length))
                context.saveGState()
                wed9Sep.draw(at: CGPoint.zero)
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
            // End Mask (Outline Mask)
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawIPhoneXKeyboardsPickersDayTime(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 250), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 250), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 250)
        
        /// Background
        // Warning: New symbols are not supported.
        
        /// Bottom
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 127)
            
            /// Mask
            let mask = UIBezierPath()
            mask.move(to: CGPoint.zero)
            mask.addLine(to: CGPoint(x: 375, y: 0))
            mask.addLine(to: CGPoint(x: 375, y: 89))
            mask.addLine(to: CGPoint(x: 0, y: 89))
            mask.addLine(to: CGPoint.zero)
            mask.close()
            
            /// Mask (Outline Mask)
            context.saveGState()
            mask.addClip()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.1)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 140, y: 60)
                
                /// 45
                let _45 = NSMutableAttributedString(string: "45")
                _45.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 7)!, range: NSRange(location: 0, length: _45.length))
                _45.addAttribute(.kern, value: 0.21, range: NSRange(location: 0, length: _45.length))
                _45.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _45.length))
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                _45.draw(at: CGPoint(x: 123, y: 0))
                context.restoreGState()
                
                /// 13
                let _13 = NSMutableAttributedString(string: "13")
                _13.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 7)!, range: NSRange(location: 0, length: _13.length))
                _13.addAttribute(.kern, value: 0.21, range: NSRange(location: 0, length: _13.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _13.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _13.length))
                }
                _13.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _13.length))
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                _13.draw(at: CGPoint(x: 73, y: 0))
                context.restoreGState()
                
                /// Sun 13 Sep
                let sun13Sep = NSMutableAttributedString(string: "Sun 13 Sep")
                sun13Sep.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 7)!, range: NSRange(location: 0, length: sun13Sep.length))
                sun13Sep.addAttribute(.kern, value: 0.21, range: NSRange(location: 0, length: sun13Sep.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    sun13Sep.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: sun13Sep.length))
                }
                sun13Sep.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: sun13Sep.length))
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                sun13Sep.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.2)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 122, y: 46)
                
                /// 44
                let _44 = NSMutableAttributedString(string: "44")
                _44.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 11)!, range: NSRange(location: 0, length: _44.length))
                _44.addAttribute(.kern, value: 0.33, range: NSRange(location: 0, length: _44.length))
                _44.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _44.length))
                context.saveGState()
                _44.draw(at: CGPoint(x: 141, y: 0))
                context.restoreGState()
                
                /// 12
                let _12 = NSMutableAttributedString(string: "12")
                _12.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 11)!, range: NSRange(location: 0, length: _12.length))
                _12.addAttribute(.kern, value: 0.33, range: NSRange(location: 0, length: _12.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _12.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _12.length))
                }
                _12.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _12.length))
                context.saveGState()
                _12.draw(at: CGPoint(x: 89, y: 0))
                context.restoreGState()
                
                /// Sat 12 Sep
                let sat12Sep = NSMutableAttributedString(string: "Sat 12 Sep")
                sat12Sep.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 11)!, range: NSRange(location: 0, length: sat12Sep.length))
                sat12Sep.addAttribute(.kern, value: 0.33, range: NSRange(location: 0, length: sat12Sep.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    sat12Sep.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: sat12Sep.length))
                }
                sat12Sep.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: sat12Sep.length))
                context.saveGState()
                sat12Sep.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.3)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 109, y: 26)
                
                /// 43
                let _43 = NSMutableAttributedString(string: "43")
                _43.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 15)!, range: NSRange(location: 0, length: _43.length))
                _43.addAttribute(.kern, value: 0.46, range: NSRange(location: 0, length: _43.length))
                _43.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _43.length))
                context.saveGState()
                _43.draw(at: CGPoint(x: 154, y: 0))
                context.restoreGState()
                
                /// 11
                let _11 = NSMutableAttributedString(string: "11")
                _11.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 15)!, range: NSRange(location: 0, length: _11.length))
                _11.addAttribute(.kern, value: 0.46, range: NSRange(location: 0, length: _11.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _11.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _11.length))
                }
                _11.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _11.length))
                context.saveGState()
                _11.draw(at: CGPoint(x: 101, y: 0))
                context.restoreGState()
                
                /// Fri 11 Sep
                let fri11Sep = NSMutableAttributedString(string: "Fri 11 Sep")
                fri11Sep.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 15)!, range: NSRange(location: 0, length: fri11Sep.length))
                fri11Sep.addAttribute(.kern, value: 0.46, range: NSRange(location: 0, length: fri11Sep.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    fri11Sep.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: fri11Sep.length))
                }
                fri11Sep.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: fri11Sep.length))
                context.saveGState()
                fri11Sep.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.4)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 76, y: 0)
                
                /// 42
                let _42 = NSMutableAttributedString(string: "42")
                _42.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 19)!, range: NSRange(location: 0, length: _42.length))
                _42.addAttribute(.kern, value: 0.58, range: NSRange(location: 0, length: _42.length))
                _42.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _42.length))
                context.saveGState()
                _42.draw(at: CGPoint(x: 187, y: 0))
                context.restoreGState()
                
                /// 10
                let _10 = NSMutableAttributedString(string: "10")
                _10.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 19)!, range: NSRange(location: 0, length: _10.length))
                _10.addAttribute(.kern, value: 0.58, range: NSRange(location: 0, length: _10.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _10.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _10.length))
                }
                _10.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _10.length))
                context.saveGState()
                _10.draw(at: CGPoint(x: 130, y: 0))
                context.restoreGState()
                
                /// Thu 10 Sep
                let thu10Sep = NSMutableAttributedString(string: "Thu 10 Sep")
                thu10Sep.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 19)!, range: NSRange(location: 0, length: thu10Sep.length))
                thu10Sep.addAttribute(.kern, value: 0.58, range: NSRange(location: 0, length: thu10Sep.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    thu10Sep.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: thu10Sep.length))
                }
                thu10Sep.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: thu10Sep.length))
                context.saveGState()
                thu10Sep.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            context.restoreGState()
            // End Mask (Outline Mask)
            
            context.restoreGState()
        }
        
        /// Selected
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 91)
            
            /// Borders
            do {
                context.saveGState()
                
                /// Separator
                // Warning: New symbols are not supported.
                
                /// Separator
                // Warning: New symbols are not supported.
                
                context.restoreGState()
            }
            
            /// 41
            let _41 = NSMutableAttributedString(string: "41")
            _41.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: _41.length))
            _41.addAttribute(.kern, value: 0.7, range: NSRange(location: 0, length: _41.length))
            _41.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _41.length))
            context.saveGState()
            _41.draw(at: CGPoint(x: 263, y: 4))
            context.restoreGState()
            
            /// 9
            let _9 = NSMutableAttributedString(string: "9")
            _9.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: _9.length))
            _9.addAttribute(.kern, value: 0.7, range: NSRange(location: 0, length: _9.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                _9.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _9.length))
            }
            _9.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _9.length))
            context.saveGState()
            _9.draw(at: CGPoint(x: 210, y: 4))
            context.restoreGState()
            
            /// Wed 9 Sep
            let wed9Sep = NSMutableAttributedString(string: "Wed 9 Sep")
            wed9Sep.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: wed9Sep.length))
            wed9Sep.addAttribute(.kern, value: 0.7, range: NSRange(location: 0, length: wed9Sep.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                wed9Sep.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: wed9Sep.length))
            }
            wed9Sep.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: wed9Sep.length))
            context.saveGState()
            wed9Sep.draw(at: CGPoint(x: 59, y: 4))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Top
        do {
            context.saveGState()
            
            /// Mask
            let mask2 = UIBezierPath()
            mask2.move(to: CGPoint.zero)
            mask2.addLine(to: CGPoint(x: 375, y: 0))
            mask2.addLine(to: CGPoint(x: 375, y: 91))
            mask2.addLine(to: CGPoint(x: 0, y: 91))
            mask2.addLine(to: CGPoint.zero)
            mask2.close()
            
            /// Mask (Outline Mask)
            context.saveGState()
            mask2.addClip()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.4)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 88, y: 68)
                
                /// 40
                let _40 = NSMutableAttributedString(string: "40")
                _40.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 19)!, range: NSRange(location: 0, length: _40.length))
                _40.addAttribute(.kern, value: 0.58, range: NSRange(location: 0, length: _40.length))
                _40.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _40.length))
                context.saveGState()
                _40.draw(at: CGPoint(x: 175, y: 0))
                context.restoreGState()
                
                /// 8
                let _8 = NSMutableAttributedString(string: "8")
                _8.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 19)!, range: NSRange(location: 0, length: _8.length))
                _8.addAttribute(.kern, value: 0.58, range: NSRange(location: 0, length: _8.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _8.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _8.length))
                }
                _8.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _8.length))
                context.saveGState()
                _8.draw(at: CGPoint(x: 123, y: 0))
                context.restoreGState()
                
                /// Tue 8 Sep
                let tue8Sep = NSMutableAttributedString(string: "Tue 8 Sep")
                tue8Sep.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 19)!, range: NSRange(location: 0, length: tue8Sep.length))
                tue8Sep.addAttribute(.kern, value: 0.58, range: NSRange(location: 0, length: tue8Sep.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    tue8Sep.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: tue8Sep.length))
                }
                tue8Sep.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: tue8Sep.length))
                context.saveGState()
                tue8Sep.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.3)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 102, y: 47)
                
                /// 39
                let _39 = NSMutableAttributedString(string: "39")
                _39.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 15)!, range: NSRange(location: 0, length: _39.length))
                _39.addAttribute(.kern, value: 0.46, range: NSRange(location: 0, length: _39.length))
                _39.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _39.length))
                context.saveGState()
                _39.draw(at: CGPoint(x: 161, y: 0))
                context.restoreGState()
                
                /// 7
                let _7 = NSMutableAttributedString(string: "7")
                _7.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 15)!, range: NSRange(location: 0, length: _7.length))
                _7.addAttribute(.kern, value: 0.46, range: NSRange(location: 0, length: _7.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _7.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _7.length))
                }
                _7.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _7.length))
                context.saveGState()
                _7.draw(at: CGPoint(x: 111, y: 0))
                context.restoreGState()
                
                /// Mon 7 Sep
                let mon7Sep = NSMutableAttributedString(string: "Mon 7 Sep")
                mon7Sep.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 15)!, range: NSRange(location: 0, length: mon7Sep.length))
                mon7Sep.addAttribute(.kern, value: 0.46, range: NSRange(location: 0, length: mon7Sep.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    mon7Sep.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: mon7Sep.length))
                }
                mon7Sep.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: mon7Sep.length))
                context.saveGState()
                mon7Sep.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.2)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 124, y: 32)
                
                /// 38
                let _38 = NSMutableAttributedString(string: "38")
                _38.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 11)!, range: NSRange(location: 0, length: _38.length))
                _38.addAttribute(.kern, value: 0.33, range: NSRange(location: 0, length: _38.length))
                _38.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _38.length))
                context.saveGState()
                _38.draw(at: CGPoint(x: 139, y: 0))
                context.restoreGState()
                
                /// 6
                let _6 = NSMutableAttributedString(string: "6")
                _6.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 11)!, range: NSRange(location: 0, length: _6.length))
                _6.addAttribute(.kern, value: 0.33, range: NSRange(location: 0, length: _6.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _6.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _6.length))
                }
                _6.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _6.length))
                context.saveGState()
                _6.draw(at: CGPoint(x: 90, y: 0))
                context.restoreGState()
                
                /// Sun 6 Sep
                let sun6Sep = NSMutableAttributedString(string: "Sun 6 Sep")
                sun6Sep.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 11)!, range: NSRange(location: 0, length: sun6Sep.length))
                sun6Sep.addAttribute(.kern, value: 0.33, range: NSRange(location: 0, length: sun6Sep.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    sun6Sep.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: sun6Sep.length))
                }
                sun6Sep.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: sun6Sep.length))
                context.saveGState()
                sun6Sep.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.1)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 145, y: 22)
                
                /// 37
                let _37 = NSMutableAttributedString(string: "37")
                _37.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 7)!, range: NSRange(location: 0, length: _37.length))
                _37.addAttribute(.kern, value: 0.21, range: NSRange(location: 0, length: _37.length))
                _37.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _37.length))
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                _37.draw(at: CGPoint(x: 118, y: 0))
                context.restoreGState()
                
                /// 5
                let _5 = NSMutableAttributedString(string: "5")
                _5.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 7)!, range: NSRange(location: 0, length: _5.length))
                _5.addAttribute(.kern, value: 0.21, range: NSRange(location: 0, length: _5.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _5.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _5.length))
                }
                _5.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _5.length))
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                _5.draw(at: CGPoint(x: 70, y: 0))
                context.restoreGState()
                
                /// Sat 5 Sep
                let sat5Sep = NSMutableAttributedString(string: "Sat 5 Sep")
                sat5Sep.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 7)!, range: NSRange(location: 0, length: sat5Sep.length))
                sat5Sep.addAttribute(.kern, value: 0.21, range: NSRange(location: 0, length: sat5Sep.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    sat5Sep.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: sat5Sep.length))
                }
                sat5Sep.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: sat5Sep.length))
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                sat5Sep.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            context.restoreGState()
            // End Mask (Outline Mask)
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawIPhoneXKeyboardsPickersDateMonthYear(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 250), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 250), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 250)
        
        /// Background
        // Warning: New symbols are not supported.
        
        /// Bottom
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 127)
            
            /// Mask
            let mask = UIBezierPath()
            mask.move(to: CGPoint.zero)
            mask.addLine(to: CGPoint(x: 375, y: 0))
            mask.addLine(to: CGPoint(x: 375, y: 89))
            mask.addLine(to: CGPoint(x: 0, y: 89))
            mask.addLine(to: CGPoint.zero)
            mask.close()
            
            /// Mask (Outline Mask)
            context.saveGState()
            mask.addClip()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.1)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 78, y: 60)
                
                /// 1998
                let _1998 = NSMutableAttributedString(string: "1998")
                _1998.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 7)!, range: NSRange(location: 0, length: _1998.length))
                _1998.addAttribute(.kern, value: 0.21, range: NSRange(location: 0, length: _1998.length))
                _1998.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _1998.length))
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                _1998.draw(at: CGPoint(x: 182, y: 0))
                context.restoreGState()
                
                /// December
                let december = NSMutableAttributedString(string: "December")
                december.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 7)!, range: NSRange(location: 0, length: december.length))
                december.addAttribute(.kern, value: 0.21, range: NSRange(location: 0, length: december.length))
                december.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: december.length))
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                december.draw(at: CGPoint(x: 54, y: 0))
                context.restoreGState()
                
                /// 23
                let _23 = NSMutableAttributedString(string: "23")
                _23.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 7)!, range: NSRange(location: 0, length: _23.length))
                _23.addAttribute(.kern, value: 0.21, range: NSRange(location: 0, length: _23.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    _23.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _23.length))
                }
                _23.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _23.length))
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                _23.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.2)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 73, y: 46)
                
                /// 1997
                let _1997 = NSMutableAttributedString(string: "1997")
                _1997.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 11)!, range: NSRange(location: 0, length: _1997.length))
                _1997.addAttribute(.kern, value: 0.33, range: NSRange(location: 0, length: _1997.length))
                _1997.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _1997.length))
                context.saveGState()
                _1997.draw(at: CGPoint(x: 187, y: 0))
                context.restoreGState()
                
                /// November
                let november = NSMutableAttributedString(string: "November")
                november.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 11)!, range: NSRange(location: 0, length: november.length))
                november.addAttribute(.kern, value: 0.33, range: NSRange(location: 0, length: november.length))
                november.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: november.length))
                context.saveGState()
                november.draw(at: CGPoint(x: 56, y: 0))
                context.restoreGState()
                
                /// 22
                let _22 = NSMutableAttributedString(string: "22")
                _22.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 11)!, range: NSRange(location: 0, length: _22.length))
                _22.addAttribute(.kern, value: 0.33, range: NSRange(location: 0, length: _22.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    _22.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _22.length))
                }
                _22.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _22.length))
                context.saveGState()
                _22.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.3)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 70, y: 26)
                
                /// 1996
                let _1996 = NSMutableAttributedString(string: "1996")
                _1996.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 15)!, range: NSRange(location: 0, length: _1996.length))
                _1996.addAttribute(.kern, value: 0.46, range: NSRange(location: 0, length: _1996.length))
                _1996.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _1996.length))
                context.saveGState()
                _1996.draw(at: CGPoint(x: 190, y: 0))
                context.restoreGState()
                
                /// October
                let october = NSMutableAttributedString(string: "October")
                october.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 15)!, range: NSRange(location: 0, length: october.length))
                october.addAttribute(.kern, value: 0.46, range: NSRange(location: 0, length: october.length))
                october.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: october.length))
                context.saveGState()
                october.draw(at: CGPoint(x: 56, y: 0))
                context.restoreGState()
                
                /// 21
                let _21 = NSMutableAttributedString(string: "21")
                _21.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 15)!, range: NSRange(location: 0, length: _21.length))
                _21.addAttribute(.kern, value: 0.46, range: NSRange(location: 0, length: _21.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    _21.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _21.length))
                }
                _21.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _21.length))
                context.saveGState()
                _21.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.4)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 63, y: 0)
                
                /// 1995
                let _1995 = NSMutableAttributedString(string: "1995")
                _1995.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 19)!, range: NSRange(location: 0, length: _1995.length))
                _1995.addAttribute(.kern, value: 0.58, range: NSRange(location: 0, length: _1995.length))
                _1995.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _1995.length))
                context.saveGState()
                _1995.draw(at: CGPoint(x: 197, y: 0))
                context.restoreGState()
                
                /// September
                let september = NSMutableAttributedString(string: "September")
                september.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 19)!, range: NSRange(location: 0, length: september.length))
                september.addAttribute(.kern, value: 0.58, range: NSRange(location: 0, length: september.length))
                september.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: september.length))
                context.saveGState()
                september.draw(at: CGPoint(x: 60, y: 0))
                context.restoreGState()
                
                /// 20
                let _20 = NSMutableAttributedString(string: "20")
                _20.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 19)!, range: NSRange(location: 0, length: _20.length))
                _20.addAttribute(.kern, value: 0.58, range: NSRange(location: 0, length: _20.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    _20.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _20.length))
                }
                _20.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _20.length))
                context.saveGState()
                _20.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            context.restoreGState()
            // End Mask (Outline Mask)
            
            context.restoreGState()
        }
        
        /// Selected
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 91)
            
            /// Borders
            do {
                context.saveGState()
                
                /// Separator
                // Warning: New symbols are not supported.
                
                /// Separator
                // Warning: New symbols are not supported.
                
                context.restoreGState()
            }
            
            /// 1994
            let _1994 = NSMutableAttributedString(string: "1994")
            _1994.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: _1994.length))
            _1994.addAttribute(.kern, value: 0.7, range: NSRange(location: 0, length: _1994.length))
            _1994.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _1994.length))
            context.saveGState()
            _1994.draw(at: CGPoint(x: 260, y: 4))
            context.restoreGState()
            
            /// August
            let august = NSMutableAttributedString(string: "August")
            august.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: august.length))
            august.addAttribute(.kern, value: 0.7, range: NSRange(location: 0, length: august.length))
            august.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: august.length))
            context.saveGState()
            august.draw(at: CGPoint(x: 120, y: 4))
            context.restoreGState()
            
            /// 19
            let _19 = NSMutableAttributedString(string: "19")
            _19.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: _19.length))
            _19.addAttribute(.kern, value: 0.7, range: NSRange(location: 0, length: _19.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                _19.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _19.length))
            }
            _19.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _19.length))
            context.saveGState()
            _19.draw(at: CGPoint(x: 61, y: 4))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Top
        do {
            context.saveGState()
            
            /// Mask
            let mask2 = UIBezierPath()
            mask2.move(to: CGPoint.zero)
            mask2.addLine(to: CGPoint(x: 375, y: 0))
            mask2.addLine(to: CGPoint(x: 375, y: 91))
            mask2.addLine(to: CGPoint(x: 0, y: 91))
            mask2.addLine(to: CGPoint.zero)
            mask2.close()
            
            /// Mask (Outline Mask)
            context.saveGState()
            mask2.addClip()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.4)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 66, y: 68)
                
                /// 1993
                let _1993 = NSMutableAttributedString(string: "1993")
                _1993.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 19)!, range: NSRange(location: 0, length: _1993.length))
                _1993.addAttribute(.kern, value: 0.58, range: NSRange(location: 0, length: _1993.length))
                _1993.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _1993.length))
                context.saveGState()
                _1993.draw(at: CGPoint(x: 194, y: 0))
                context.restoreGState()
                
                /// July
                let july = NSMutableAttributedString(string: "July")
                july.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 19)!, range: NSRange(location: 0, length: july.length))
                july.addAttribute(.kern, value: 0.58, range: NSRange(location: 0, length: july.length))
                july.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: july.length))
                context.saveGState()
                july.draw(at: CGPoint(x: 57, y: 0))
                context.restoreGState()
                
                /// 18
                let _18 = NSMutableAttributedString(string: "18")
                _18.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 19)!, range: NSRange(location: 0, length: _18.length))
                _18.addAttribute(.kern, value: 0.58, range: NSRange(location: 0, length: _18.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    _18.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _18.length))
                }
                _18.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _18.length))
                context.saveGState()
                _18.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.3)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 71, y: 47)
                
                /// 1992
                let _1992 = NSMutableAttributedString(string: "1992")
                _1992.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 15)!, range: NSRange(location: 0, length: _1992.length))
                _1992.addAttribute(.kern, value: 0.46, range: NSRange(location: 0, length: _1992.length))
                _1992.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _1992.length))
                context.saveGState()
                _1992.draw(at: CGPoint(x: 189, y: 0))
                context.restoreGState()
                
                /// June
                let june = NSMutableAttributedString(string: "June")
                june.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 15)!, range: NSRange(location: 0, length: june.length))
                june.addAttribute(.kern, value: 0.46, range: NSRange(location: 0, length: june.length))
                june.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: june.length))
                context.saveGState()
                june.draw(at: CGPoint(x: 55, y: 0))
                context.restoreGState()
                
                /// 17
                let _17 = NSMutableAttributedString(string: "17")
                _17.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 15)!, range: NSRange(location: 0, length: _17.length))
                _17.addAttribute(.kern, value: 0.46, range: NSRange(location: 0, length: _17.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    _17.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _17.length))
                }
                _17.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _17.length))
                context.saveGState()
                _17.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.2)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 74, y: 32)
                
                /// 1991
                let _1991 = NSMutableAttributedString(string: "1991")
                _1991.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 11)!, range: NSRange(location: 0, length: _1991.length))
                _1991.addAttribute(.kern, value: 0.33, range: NSRange(location: 0, length: _1991.length))
                _1991.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _1991.length))
                context.saveGState()
                _1991.draw(at: CGPoint(x: 186, y: 0))
                context.restoreGState()
                
                /// May
                let may = NSMutableAttributedString(string: "May")
                may.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 11)!, range: NSRange(location: 0, length: may.length))
                may.addAttribute(.kern, value: 0.33, range: NSRange(location: 0, length: may.length))
                may.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: may.length))
                context.saveGState()
                may.draw(at: CGPoint(x: 55, y: 0))
                context.restoreGState()
                
                /// 16
                let _16 = NSMutableAttributedString(string: "16")
                _16.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 11)!, range: NSRange(location: 0, length: _16.length))
                _16.addAttribute(.kern, value: 0.33, range: NSRange(location: 0, length: _16.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    _16.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _16.length))
                }
                _16.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _16.length))
                context.saveGState()
                _16.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.1)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 79, y: 22)
                
                /// 1990
                let _1990 = NSMutableAttributedString(string: "1990")
                _1990.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 7)!, range: NSRange(location: 0, length: _1990.length))
                _1990.addAttribute(.kern, value: 0.21, range: NSRange(location: 0, length: _1990.length))
                _1990.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _1990.length))
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                _1990.draw(at: CGPoint(x: 181, y: 0))
                context.restoreGState()
                
                /// April
                let april = NSMutableAttributedString(string: "April")
                april.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 7)!, range: NSRange(location: 0, length: april.length))
                april.addAttribute(.kern, value: 0.21, range: NSRange(location: 0, length: april.length))
                april.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: april.length))
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                april.draw(at: CGPoint(x: 53, y: 0))
                context.restoreGState()
                
                /// 15
                let _15 = NSMutableAttributedString(string: "15")
                _15.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 7)!, range: NSRange(location: 0, length: _15.length))
                _15.addAttribute(.kern, value: 0.21, range: NSRange(location: 0, length: _15.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    _15.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _15.length))
                }
                _15.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _15.length))
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                _15.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            context.restoreGState()
            // End Mask (Outline Mask)
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawIPhoneXKeyboardsPickersTime(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 250), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 250), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 250)
        
        /// Background
        // Warning: New symbols are not supported.
        
        /// Bottom
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 127)
            
            /// Mask
            let mask = UIBezierPath()
            mask.move(to: CGPoint.zero)
            mask.addLine(to: CGPoint(x: 375, y: 0))
            mask.addLine(to: CGPoint(x: 375, y: 89))
            mask.addLine(to: CGPoint(x: 0, y: 89))
            mask.addLine(to: CGPoint.zero)
            mask.close()
            
            /// Mask (Outline Mask)
            context.saveGState()
            mask.addClip()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.1)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 119, y: 60)
                
                /// 45
                let _45 = NSMutableAttributedString(string: "45")
                _45.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 7)!, range: NSRange(location: 0, length: _45.length))
                _45.addAttribute(.kern, value: 0.21, range: NSRange(location: 0, length: _45.length))
                _45.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _45.length))
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                _45.draw(at: CGPoint(x: 62, y: 0))
                context.restoreGState()
                
                /// 13
                let _13 = NSMutableAttributedString(string: "13")
                _13.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 7)!, range: NSRange(location: 0, length: _13.length))
                _13.addAttribute(.kern, value: 0.21, range: NSRange(location: 0, length: _13.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    _13.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _13.length))
                }
                _13.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _13.length))
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                _13.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.2)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 115, y: 46)
                
                /// 44
                let _44 = NSMutableAttributedString(string: "44")
                _44.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 11)!, range: NSRange(location: 0, length: _44.length))
                _44.addAttribute(.kern, value: 0.33, range: NSRange(location: 0, length: _44.length))
                _44.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _44.length))
                context.saveGState()
                _44.draw(at: CGPoint(x: 63, y: 0))
                context.restoreGState()
                
                /// 12
                let _12 = NSMutableAttributedString(string: "12")
                _12.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 11)!, range: NSRange(location: 0, length: _12.length))
                _12.addAttribute(.kern, value: 0.33, range: NSRange(location: 0, length: _12.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    _12.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _12.length))
                }
                _12.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _12.length))
                context.saveGState()
                _12.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.3)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 112, y: 26)
                
                /// 43
                let _43 = NSMutableAttributedString(string: "43")
                _43.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 15)!, range: NSRange(location: 0, length: _43.length))
                _43.addAttribute(.kern, value: 0.46, range: NSRange(location: 0, length: _43.length))
                _43.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _43.length))
                context.saveGState()
                _43.draw(at: CGPoint(x: 64, y: 0))
                context.restoreGState()
                
                /// 11
                let _11 = NSMutableAttributedString(string: "11")
                _11.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 15)!, range: NSRange(location: 0, length: _11.length))
                _11.addAttribute(.kern, value: 0.46, range: NSRange(location: 0, length: _11.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    _11.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _11.length))
                }
                _11.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _11.length))
                context.saveGState()
                _11.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.4)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 105, y: 0)
                
                /// PM
                let pM = NSMutableAttributedString(string: "PM")
                pM.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 19)!, range: NSRange(location: 0, length: pM.length))
                pM.addAttribute(.kern, value: 0.58, range: NSRange(location: 0, length: pM.length))
                pM.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: pM.length))
                context.saveGState()
                pM.draw(at: CGPoint(x: 127, y: 0))
                context.restoreGState()
                
                /// 42
                let _42 = NSMutableAttributedString(string: "42")
                _42.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 19)!, range: NSRange(location: 0, length: _42.length))
                _42.addAttribute(.kern, value: 0.58, range: NSRange(location: 0, length: _42.length))
                _42.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _42.length))
                context.saveGState()
                _42.draw(at: CGPoint(x: 68, y: 0))
                context.restoreGState()
                
                /// 10
                let _10 = NSMutableAttributedString(string: "10")
                _10.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 19)!, range: NSRange(location: 0, length: _10.length))
                _10.addAttribute(.kern, value: 0.58, range: NSRange(location: 0, length: _10.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    _10.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _10.length))
                }
                _10.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _10.length))
                context.saveGState()
                _10.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            context.restoreGState()
            // End Mask (Outline Mask)
            
            context.restoreGState()
        }
        
        /// Selected
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 91)
            
            /// Borders
            do {
                context.saveGState()
                
                /// Separator
                // Warning: New symbols are not supported.
                
                /// Separator
                // Warning: New symbols are not supported.
                
                context.restoreGState()
            }
            
            /// AM
            let aM = NSMutableAttributedString(string: "AM")
            aM.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: aM.length))
            aM.addAttribute(.kern, value: 0.7, range: NSRange(location: 0, length: aM.length))
            aM.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: aM.length))
            context.saveGState()
            aM.draw(at: CGPoint(x: 228, y: 4))
            context.restoreGState()
            
            /// 41
            let _41 = NSMutableAttributedString(string: "41")
            _41.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: _41.length))
            _41.addAttribute(.kern, value: 0.7, range: NSRange(location: 0, length: _41.length))
            _41.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _41.length))
            context.saveGState()
            _41.draw(at: CGPoint(x: 172, y: 4))
            context.restoreGState()
            
            /// 9
            let _9 = NSMutableAttributedString(string: "9")
            _9.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: _9.length))
            _9.addAttribute(.kern, value: 0.7, range: NSRange(location: 0, length: _9.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                _9.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _9.length))
            }
            _9.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _9.length))
            context.saveGState()
            _9.draw(at: CGPoint(x: 112, y: 4))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Top
        do {
            context.saveGState()
            
            /// Mask
            let mask2 = UIBezierPath()
            mask2.move(to: CGPoint.zero)
            mask2.addLine(to: CGPoint(x: 375, y: 0))
            mask2.addLine(to: CGPoint(x: 375, y: 91))
            mask2.addLine(to: CGPoint(x: 0, y: 91))
            mask2.addLine(to: CGPoint.zero)
            mask2.close()
            
            /// Mask (Outline Mask)
            context.saveGState()
            mask2.addClip()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.4)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 115, y: 68)
                
                /// 40
                let _40 = NSMutableAttributedString(string: "40")
                _40.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 19)!, range: NSRange(location: 0, length: _40.length))
                _40.addAttribute(.kern, value: 0.58, range: NSRange(location: 0, length: _40.length))
                _40.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _40.length))
                context.saveGState()
                _40.draw(at: CGPoint(x: 58, y: 0))
                context.restoreGState()
                
                /// 8
                let _8 = NSMutableAttributedString(string: "8")
                _8.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 19)!, range: NSRange(location: 0, length: _8.length))
                _8.addAttribute(.kern, value: 0.58, range: NSRange(location: 0, length: _8.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    _8.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _8.length))
                }
                _8.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _8.length))
                context.saveGState()
                _8.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.3)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 118, y: 47)
                
                /// 39
                let _39 = NSMutableAttributedString(string: "39")
                _39.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 15)!, range: NSRange(location: 0, length: _39.length))
                _39.addAttribute(.kern, value: 0.46, range: NSRange(location: 0, length: _39.length))
                _39.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _39.length))
                context.saveGState()
                _39.draw(at: CGPoint(x: 58, y: 0))
                context.restoreGState()
                
                /// 7
                let _7 = NSMutableAttributedString(string: "7")
                _7.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 15)!, range: NSRange(location: 0, length: _7.length))
                _7.addAttribute(.kern, value: 0.46, range: NSRange(location: 0, length: _7.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    _7.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _7.length))
                }
                _7.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _7.length))
                context.saveGState()
                _7.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.2)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 120, y: 32)
                
                /// 38
                let _38 = NSMutableAttributedString(string: "38")
                _38.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 11)!, range: NSRange(location: 0, length: _38.length))
                _38.addAttribute(.kern, value: 0.33, range: NSRange(location: 0, length: _38.length))
                _38.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _38.length))
                context.saveGState()
                _38.draw(at: CGPoint(x: 58, y: 0))
                context.restoreGState()
                
                /// 6
                let _6 = NSMutableAttributedString(string: "6")
                _6.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 11)!, range: NSRange(location: 0, length: _6.length))
                _6.addAttribute(.kern, value: 0.33, range: NSRange(location: 0, length: _6.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    _6.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _6.length))
                }
                _6.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _6.length))
                context.saveGState()
                _6.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.1)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 122, y: 22)
                
                /// 37
                let _37 = NSMutableAttributedString(string: "37")
                _37.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 7)!, range: NSRange(location: 0, length: _37.length))
                _37.addAttribute(.kern, value: 0.21, range: NSRange(location: 0, length: _37.length))
                _37.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _37.length))
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                _37.draw(at: CGPoint(x: 59, y: 0))
                context.restoreGState()
                
                /// 5
                let _5 = NSMutableAttributedString(string: "5")
                _5.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 7)!, range: NSRange(location: 0, length: _5.length))
                _5.addAttribute(.kern, value: 0.21, range: NSRange(location: 0, length: _5.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    _5.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _5.length))
                }
                _5.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _5.length))
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                _5.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            context.restoreGState()
            // End Mask (Outline Mask)
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawKeyboardsPickersDayTime(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 216), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 216), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 216)
        
        /// Background
        // Warning: New symbols are not supported.
        
        /// Bottom
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 127)
            
            /// Mask
            let mask = UIBezierPath()
            mask.move(to: CGPoint.zero)
            mask.addLine(to: CGPoint(x: 375, y: 0))
            mask.addLine(to: CGPoint(x: 375, y: 89))
            mask.addLine(to: CGPoint(x: 0, y: 89))
            mask.addLine(to: CGPoint.zero)
            mask.close()
            
            /// Mask (Outline Mask)
            context.saveGState()
            mask.addClip()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.1)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 140, y: 60)
                
                /// 45
                let _45 = NSMutableAttributedString(string: "45")
                _45.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 7)!, range: NSRange(location: 0, length: _45.length))
                _45.addAttribute(.kern, value: 0.21, range: NSRange(location: 0, length: _45.length))
                _45.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _45.length))
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                _45.draw(at: CGPoint(x: 123, y: 0))
                context.restoreGState()
                
                /// 13
                let _13 = NSMutableAttributedString(string: "13")
                _13.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 7)!, range: NSRange(location: 0, length: _13.length))
                _13.addAttribute(.kern, value: 0.21, range: NSRange(location: 0, length: _13.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _13.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _13.length))
                }
                _13.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _13.length))
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                _13.draw(at: CGPoint(x: 73, y: 0))
                context.restoreGState()
                
                /// Sun 13 Sep
                let sun13Sep = NSMutableAttributedString(string: "Sun 13 Sep")
                sun13Sep.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 7)!, range: NSRange(location: 0, length: sun13Sep.length))
                sun13Sep.addAttribute(.kern, value: 0.21, range: NSRange(location: 0, length: sun13Sep.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    sun13Sep.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: sun13Sep.length))
                }
                sun13Sep.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: sun13Sep.length))
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                sun13Sep.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.2)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 122, y: 46)
                
                /// 44
                let _44 = NSMutableAttributedString(string: "44")
                _44.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 11)!, range: NSRange(location: 0, length: _44.length))
                _44.addAttribute(.kern, value: 0.33, range: NSRange(location: 0, length: _44.length))
                _44.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _44.length))
                context.saveGState()
                _44.draw(at: CGPoint(x: 141, y: 0))
                context.restoreGState()
                
                /// 12
                let _12 = NSMutableAttributedString(string: "12")
                _12.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 11)!, range: NSRange(location: 0, length: _12.length))
                _12.addAttribute(.kern, value: 0.33, range: NSRange(location: 0, length: _12.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _12.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _12.length))
                }
                _12.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _12.length))
                context.saveGState()
                _12.draw(at: CGPoint(x: 89, y: 0))
                context.restoreGState()
                
                /// Sat 12 Sep
                let sat12Sep = NSMutableAttributedString(string: "Sat 12 Sep")
                sat12Sep.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 11)!, range: NSRange(location: 0, length: sat12Sep.length))
                sat12Sep.addAttribute(.kern, value: 0.33, range: NSRange(location: 0, length: sat12Sep.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    sat12Sep.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: sat12Sep.length))
                }
                sat12Sep.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: sat12Sep.length))
                context.saveGState()
                sat12Sep.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.3)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 109, y: 26)
                
                /// 43
                let _43 = NSMutableAttributedString(string: "43")
                _43.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 15)!, range: NSRange(location: 0, length: _43.length))
                _43.addAttribute(.kern, value: 0.46, range: NSRange(location: 0, length: _43.length))
                _43.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _43.length))
                context.saveGState()
                _43.draw(at: CGPoint(x: 154, y: 0))
                context.restoreGState()
                
                /// 11
                let _11 = NSMutableAttributedString(string: "11")
                _11.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 15)!, range: NSRange(location: 0, length: _11.length))
                _11.addAttribute(.kern, value: 0.46, range: NSRange(location: 0, length: _11.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _11.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _11.length))
                }
                _11.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _11.length))
                context.saveGState()
                _11.draw(at: CGPoint(x: 101, y: 0))
                context.restoreGState()
                
                /// Fri 11 Sep
                let fri11Sep = NSMutableAttributedString(string: "Fri 11 Sep")
                fri11Sep.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 15)!, range: NSRange(location: 0, length: fri11Sep.length))
                fri11Sep.addAttribute(.kern, value: 0.46, range: NSRange(location: 0, length: fri11Sep.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    fri11Sep.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: fri11Sep.length))
                }
                fri11Sep.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: fri11Sep.length))
                context.saveGState()
                fri11Sep.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.4)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 76, y: 0)
                
                /// 42
                let _42 = NSMutableAttributedString(string: "42")
                _42.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 19)!, range: NSRange(location: 0, length: _42.length))
                _42.addAttribute(.kern, value: 0.58, range: NSRange(location: 0, length: _42.length))
                _42.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _42.length))
                context.saveGState()
                _42.draw(at: CGPoint(x: 187, y: 0))
                context.restoreGState()
                
                /// 10
                let _10 = NSMutableAttributedString(string: "10")
                _10.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 19)!, range: NSRange(location: 0, length: _10.length))
                _10.addAttribute(.kern, value: 0.58, range: NSRange(location: 0, length: _10.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _10.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _10.length))
                }
                _10.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _10.length))
                context.saveGState()
                _10.draw(at: CGPoint(x: 130, y: 0))
                context.restoreGState()
                
                /// Thu 10 Sep
                let thu10Sep = NSMutableAttributedString(string: "Thu 10 Sep")
                thu10Sep.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 19)!, range: NSRange(location: 0, length: thu10Sep.length))
                thu10Sep.addAttribute(.kern, value: 0.58, range: NSRange(location: 0, length: thu10Sep.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    thu10Sep.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: thu10Sep.length))
                }
                thu10Sep.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: thu10Sep.length))
                context.saveGState()
                thu10Sep.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            context.restoreGState()
            // End Mask (Outline Mask)
            
            context.restoreGState()
        }
        
        /// Selected
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 91)
            
            /// Borders
            do {
                context.saveGState()
                
                /// Separator
                // Warning: New symbols are not supported.
                
                /// Separator
                // Warning: New symbols are not supported.
                
                context.restoreGState()
            }
            
            /// 41
            let _41 = NSMutableAttributedString(string: "41")
            _41.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: _41.length))
            _41.addAttribute(.kern, value: 0.7, range: NSRange(location: 0, length: _41.length))
            _41.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _41.length))
            context.saveGState()
            _41.draw(at: CGPoint(x: 263, y: 4))
            context.restoreGState()
            
            /// 9
            let _9 = NSMutableAttributedString(string: "9")
            _9.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: _9.length))
            _9.addAttribute(.kern, value: 0.7, range: NSRange(location: 0, length: _9.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                _9.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _9.length))
            }
            _9.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _9.length))
            context.saveGState()
            _9.draw(at: CGPoint(x: 210, y: 4))
            context.restoreGState()
            
            /// Wed 9 Sep
            let wed9Sep = NSMutableAttributedString(string: "Wed 9 Sep")
            wed9Sep.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: wed9Sep.length))
            wed9Sep.addAttribute(.kern, value: 0.7, range: NSRange(location: 0, length: wed9Sep.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                wed9Sep.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: wed9Sep.length))
            }
            wed9Sep.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: wed9Sep.length))
            context.saveGState()
            wed9Sep.draw(at: CGPoint(x: 59, y: 4))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Top
        do {
            context.saveGState()
            
            /// Mask
            let mask2 = UIBezierPath()
            mask2.move(to: CGPoint.zero)
            mask2.addLine(to: CGPoint(x: 375, y: 0))
            mask2.addLine(to: CGPoint(x: 375, y: 91))
            mask2.addLine(to: CGPoint(x: 0, y: 91))
            mask2.addLine(to: CGPoint.zero)
            mask2.close()
            
            /// Mask (Outline Mask)
            context.saveGState()
            mask2.addClip()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.4)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 88, y: 68)
                
                /// 40
                let _40 = NSMutableAttributedString(string: "40")
                _40.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 19)!, range: NSRange(location: 0, length: _40.length))
                _40.addAttribute(.kern, value: 0.58, range: NSRange(location: 0, length: _40.length))
                _40.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _40.length))
                context.saveGState()
                _40.draw(at: CGPoint(x: 175, y: 0))
                context.restoreGState()
                
                /// 8
                let _8 = NSMutableAttributedString(string: "8")
                _8.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 19)!, range: NSRange(location: 0, length: _8.length))
                _8.addAttribute(.kern, value: 0.58, range: NSRange(location: 0, length: _8.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _8.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _8.length))
                }
                _8.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _8.length))
                context.saveGState()
                _8.draw(at: CGPoint(x: 123, y: 0))
                context.restoreGState()
                
                /// Tue 8 Sep
                let tue8Sep = NSMutableAttributedString(string: "Tue 8 Sep")
                tue8Sep.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 19)!, range: NSRange(location: 0, length: tue8Sep.length))
                tue8Sep.addAttribute(.kern, value: 0.58, range: NSRange(location: 0, length: tue8Sep.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    tue8Sep.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: tue8Sep.length))
                }
                tue8Sep.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: tue8Sep.length))
                context.saveGState()
                tue8Sep.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.3)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 102, y: 47)
                
                /// 39
                let _39 = NSMutableAttributedString(string: "39")
                _39.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 15)!, range: NSRange(location: 0, length: _39.length))
                _39.addAttribute(.kern, value: 0.46, range: NSRange(location: 0, length: _39.length))
                _39.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _39.length))
                context.saveGState()
                _39.draw(at: CGPoint(x: 161, y: 0))
                context.restoreGState()
                
                /// 7
                let _7 = NSMutableAttributedString(string: "7")
                _7.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 15)!, range: NSRange(location: 0, length: _7.length))
                _7.addAttribute(.kern, value: 0.46, range: NSRange(location: 0, length: _7.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _7.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _7.length))
                }
                _7.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _7.length))
                context.saveGState()
                _7.draw(at: CGPoint(x: 111, y: 0))
                context.restoreGState()
                
                /// Mon 7 Sep
                let mon7Sep = NSMutableAttributedString(string: "Mon 7 Sep")
                mon7Sep.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 15)!, range: NSRange(location: 0, length: mon7Sep.length))
                mon7Sep.addAttribute(.kern, value: 0.46, range: NSRange(location: 0, length: mon7Sep.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    mon7Sep.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: mon7Sep.length))
                }
                mon7Sep.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: mon7Sep.length))
                context.saveGState()
                mon7Sep.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.2)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 124, y: 32)
                
                /// 38
                let _38 = NSMutableAttributedString(string: "38")
                _38.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 11)!, range: NSRange(location: 0, length: _38.length))
                _38.addAttribute(.kern, value: 0.33, range: NSRange(location: 0, length: _38.length))
                _38.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _38.length))
                context.saveGState()
                _38.draw(at: CGPoint(x: 139, y: 0))
                context.restoreGState()
                
                /// 6
                let _6 = NSMutableAttributedString(string: "6")
                _6.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 11)!, range: NSRange(location: 0, length: _6.length))
                _6.addAttribute(.kern, value: 0.33, range: NSRange(location: 0, length: _6.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _6.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _6.length))
                }
                _6.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _6.length))
                context.saveGState()
                _6.draw(at: CGPoint(x: 90, y: 0))
                context.restoreGState()
                
                /// Sun 6 Sep
                let sun6Sep = NSMutableAttributedString(string: "Sun 6 Sep")
                sun6Sep.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 11)!, range: NSRange(location: 0, length: sun6Sep.length))
                sun6Sep.addAttribute(.kern, value: 0.33, range: NSRange(location: 0, length: sun6Sep.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    sun6Sep.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: sun6Sep.length))
                }
                sun6Sep.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: sun6Sep.length))
                context.saveGState()
                sun6Sep.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.1)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 145, y: 22)
                
                /// 37
                let _37 = NSMutableAttributedString(string: "37")
                _37.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 7)!, range: NSRange(location: 0, length: _37.length))
                _37.addAttribute(.kern, value: 0.21, range: NSRange(location: 0, length: _37.length))
                _37.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _37.length))
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                _37.draw(at: CGPoint(x: 118, y: 0))
                context.restoreGState()
                
                /// 5
                let _5 = NSMutableAttributedString(string: "5")
                _5.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 7)!, range: NSRange(location: 0, length: _5.length))
                _5.addAttribute(.kern, value: 0.21, range: NSRange(location: 0, length: _5.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _5.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _5.length))
                }
                _5.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _5.length))
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                _5.draw(at: CGPoint(x: 70, y: 0))
                context.restoreGState()
                
                /// Sat 5 Sep
                let sat5Sep = NSMutableAttributedString(string: "Sat 5 Sep")
                sat5Sep.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 7)!, range: NSRange(location: 0, length: sat5Sep.length))
                sat5Sep.addAttribute(.kern, value: 0.21, range: NSRange(location: 0, length: sat5Sep.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    sat5Sep.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: sat5Sep.length))
                }
                sat5Sep.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: sat5Sep.length))
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                sat5Sep.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            context.restoreGState()
            // End Mask (Outline Mask)
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawKeyboardsPickersDateMonthYear(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 216), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 216), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 216)
        
        /// Background
        // Warning: New symbols are not supported.
        
        /// Bottom
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 127)
            
            /// Mask
            let mask = UIBezierPath()
            mask.move(to: CGPoint.zero)
            mask.addLine(to: CGPoint(x: 375, y: 0))
            mask.addLine(to: CGPoint(x: 375, y: 89))
            mask.addLine(to: CGPoint(x: 0, y: 89))
            mask.addLine(to: CGPoint.zero)
            mask.close()
            
            /// Mask (Outline Mask)
            context.saveGState()
            mask.addClip()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.1)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 78, y: 60)
                
                /// 1998
                let _1998 = NSMutableAttributedString(string: "1998")
                _1998.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 7)!, range: NSRange(location: 0, length: _1998.length))
                _1998.addAttribute(.kern, value: 0.21, range: NSRange(location: 0, length: _1998.length))
                _1998.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _1998.length))
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                _1998.draw(at: CGPoint(x: 182, y: 0))
                context.restoreGState()
                
                /// December
                let december = NSMutableAttributedString(string: "December")
                december.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 7)!, range: NSRange(location: 0, length: december.length))
                december.addAttribute(.kern, value: 0.21, range: NSRange(location: 0, length: december.length))
                december.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: december.length))
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                december.draw(at: CGPoint(x: 54, y: 0))
                context.restoreGState()
                
                /// 23
                let _23 = NSMutableAttributedString(string: "23")
                _23.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 7)!, range: NSRange(location: 0, length: _23.length))
                _23.addAttribute(.kern, value: 0.21, range: NSRange(location: 0, length: _23.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    _23.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _23.length))
                }
                _23.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _23.length))
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                _23.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.2)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 73, y: 46)
                
                /// 1997
                let _1997 = NSMutableAttributedString(string: "1997")
                _1997.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 11)!, range: NSRange(location: 0, length: _1997.length))
                _1997.addAttribute(.kern, value: 0.33, range: NSRange(location: 0, length: _1997.length))
                _1997.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _1997.length))
                context.saveGState()
                _1997.draw(at: CGPoint(x: 187, y: 0))
                context.restoreGState()
                
                /// November
                let november = NSMutableAttributedString(string: "November")
                november.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 11)!, range: NSRange(location: 0, length: november.length))
                november.addAttribute(.kern, value: 0.33, range: NSRange(location: 0, length: november.length))
                november.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: november.length))
                context.saveGState()
                november.draw(at: CGPoint(x: 56, y: 0))
                context.restoreGState()
                
                /// 22
                let _22 = NSMutableAttributedString(string: "22")
                _22.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 11)!, range: NSRange(location: 0, length: _22.length))
                _22.addAttribute(.kern, value: 0.33, range: NSRange(location: 0, length: _22.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    _22.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _22.length))
                }
                _22.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _22.length))
                context.saveGState()
                _22.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.3)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 70, y: 26)
                
                /// 1996
                let _1996 = NSMutableAttributedString(string: "1996")
                _1996.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 15)!, range: NSRange(location: 0, length: _1996.length))
                _1996.addAttribute(.kern, value: 0.46, range: NSRange(location: 0, length: _1996.length))
                _1996.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _1996.length))
                context.saveGState()
                _1996.draw(at: CGPoint(x: 190, y: 0))
                context.restoreGState()
                
                /// October
                let october = NSMutableAttributedString(string: "October")
                october.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 15)!, range: NSRange(location: 0, length: october.length))
                october.addAttribute(.kern, value: 0.46, range: NSRange(location: 0, length: october.length))
                october.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: october.length))
                context.saveGState()
                october.draw(at: CGPoint(x: 56, y: 0))
                context.restoreGState()
                
                /// 21
                let _21 = NSMutableAttributedString(string: "21")
                _21.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 15)!, range: NSRange(location: 0, length: _21.length))
                _21.addAttribute(.kern, value: 0.46, range: NSRange(location: 0, length: _21.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    _21.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _21.length))
                }
                _21.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _21.length))
                context.saveGState()
                _21.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.4)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 63, y: 0)
                
                /// 1995
                let _1995 = NSMutableAttributedString(string: "1995")
                _1995.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 19)!, range: NSRange(location: 0, length: _1995.length))
                _1995.addAttribute(.kern, value: 0.58, range: NSRange(location: 0, length: _1995.length))
                _1995.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _1995.length))
                context.saveGState()
                _1995.draw(at: CGPoint(x: 197, y: 0))
                context.restoreGState()
                
                /// September
                let september = NSMutableAttributedString(string: "September")
                september.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 19)!, range: NSRange(location: 0, length: september.length))
                september.addAttribute(.kern, value: 0.58, range: NSRange(location: 0, length: september.length))
                september.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: september.length))
                context.saveGState()
                september.draw(at: CGPoint(x: 60, y: 0))
                context.restoreGState()
                
                /// 20
                let _20 = NSMutableAttributedString(string: "20")
                _20.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 19)!, range: NSRange(location: 0, length: _20.length))
                _20.addAttribute(.kern, value: 0.58, range: NSRange(location: 0, length: _20.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    _20.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _20.length))
                }
                _20.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _20.length))
                context.saveGState()
                _20.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            context.restoreGState()
            // End Mask (Outline Mask)
            
            context.restoreGState()
        }
        
        /// Selected
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 91)
            
            /// Borders
            do {
                context.saveGState()
                
                /// Separator
                // Warning: New symbols are not supported.
                
                /// Separator
                // Warning: New symbols are not supported.
                
                context.restoreGState()
            }
            
            /// 1994
            let _1994 = NSMutableAttributedString(string: "1994")
            _1994.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: _1994.length))
            _1994.addAttribute(.kern, value: 0.7, range: NSRange(location: 0, length: _1994.length))
            _1994.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _1994.length))
            context.saveGState()
            _1994.draw(at: CGPoint(x: 260, y: 4))
            context.restoreGState()
            
            /// August
            let august = NSMutableAttributedString(string: "August")
            august.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: august.length))
            august.addAttribute(.kern, value: 0.7, range: NSRange(location: 0, length: august.length))
            august.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: august.length))
            context.saveGState()
            august.draw(at: CGPoint(x: 120, y: 4))
            context.restoreGState()
            
            /// 19
            let _19 = NSMutableAttributedString(string: "19")
            _19.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: _19.length))
            _19.addAttribute(.kern, value: 0.7, range: NSRange(location: 0, length: _19.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                _19.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _19.length))
            }
            _19.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _19.length))
            context.saveGState()
            _19.draw(at: CGPoint(x: 61, y: 4))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Top
        do {
            context.saveGState()
            
            /// Mask
            let mask2 = UIBezierPath()
            mask2.move(to: CGPoint.zero)
            mask2.addLine(to: CGPoint(x: 375, y: 0))
            mask2.addLine(to: CGPoint(x: 375, y: 91))
            mask2.addLine(to: CGPoint(x: 0, y: 91))
            mask2.addLine(to: CGPoint.zero)
            mask2.close()
            
            /// Mask (Outline Mask)
            context.saveGState()
            mask2.addClip()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.4)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 66, y: 68)
                
                /// 1993
                let _1993 = NSMutableAttributedString(string: "1993")
                _1993.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 19)!, range: NSRange(location: 0, length: _1993.length))
                _1993.addAttribute(.kern, value: 0.58, range: NSRange(location: 0, length: _1993.length))
                _1993.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _1993.length))
                context.saveGState()
                _1993.draw(at: CGPoint(x: 194, y: 0))
                context.restoreGState()
                
                /// July
                let july = NSMutableAttributedString(string: "July")
                july.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 19)!, range: NSRange(location: 0, length: july.length))
                july.addAttribute(.kern, value: 0.58, range: NSRange(location: 0, length: july.length))
                july.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: july.length))
                context.saveGState()
                july.draw(at: CGPoint(x: 57, y: 0))
                context.restoreGState()
                
                /// 18
                let _18 = NSMutableAttributedString(string: "18")
                _18.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 19)!, range: NSRange(location: 0, length: _18.length))
                _18.addAttribute(.kern, value: 0.58, range: NSRange(location: 0, length: _18.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    _18.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _18.length))
                }
                _18.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _18.length))
                context.saveGState()
                _18.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.3)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 71, y: 47)
                
                /// 1992
                let _1992 = NSMutableAttributedString(string: "1992")
                _1992.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 15)!, range: NSRange(location: 0, length: _1992.length))
                _1992.addAttribute(.kern, value: 0.46, range: NSRange(location: 0, length: _1992.length))
                _1992.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _1992.length))
                context.saveGState()
                _1992.draw(at: CGPoint(x: 189, y: 0))
                context.restoreGState()
                
                /// June
                let june = NSMutableAttributedString(string: "June")
                june.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 15)!, range: NSRange(location: 0, length: june.length))
                june.addAttribute(.kern, value: 0.46, range: NSRange(location: 0, length: june.length))
                june.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: june.length))
                context.saveGState()
                june.draw(at: CGPoint(x: 55, y: 0))
                context.restoreGState()
                
                /// 17
                let _17 = NSMutableAttributedString(string: "17")
                _17.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 15)!, range: NSRange(location: 0, length: _17.length))
                _17.addAttribute(.kern, value: 0.46, range: NSRange(location: 0, length: _17.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    _17.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _17.length))
                }
                _17.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _17.length))
                context.saveGState()
                _17.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.2)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 74, y: 32)
                
                /// 1991
                let _1991 = NSMutableAttributedString(string: "1991")
                _1991.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 11)!, range: NSRange(location: 0, length: _1991.length))
                _1991.addAttribute(.kern, value: 0.33, range: NSRange(location: 0, length: _1991.length))
                _1991.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _1991.length))
                context.saveGState()
                _1991.draw(at: CGPoint(x: 186, y: 0))
                context.restoreGState()
                
                /// May
                let may = NSMutableAttributedString(string: "May")
                may.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 11)!, range: NSRange(location: 0, length: may.length))
                may.addAttribute(.kern, value: 0.33, range: NSRange(location: 0, length: may.length))
                may.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: may.length))
                context.saveGState()
                may.draw(at: CGPoint(x: 55, y: 0))
                context.restoreGState()
                
                /// 16
                let _16 = NSMutableAttributedString(string: "16")
                _16.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 11)!, range: NSRange(location: 0, length: _16.length))
                _16.addAttribute(.kern, value: 0.33, range: NSRange(location: 0, length: _16.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    _16.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _16.length))
                }
                _16.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _16.length))
                context.saveGState()
                _16.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.1)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 79, y: 22)
                
                /// 1990
                let _1990 = NSMutableAttributedString(string: "1990")
                _1990.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 7)!, range: NSRange(location: 0, length: _1990.length))
                _1990.addAttribute(.kern, value: 0.21, range: NSRange(location: 0, length: _1990.length))
                _1990.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _1990.length))
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                _1990.draw(at: CGPoint(x: 181, y: 0))
                context.restoreGState()
                
                /// April
                let april = NSMutableAttributedString(string: "April")
                april.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 7)!, range: NSRange(location: 0, length: april.length))
                april.addAttribute(.kern, value: 0.21, range: NSRange(location: 0, length: april.length))
                april.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: april.length))
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                april.draw(at: CGPoint(x: 53, y: 0))
                context.restoreGState()
                
                /// 15
                let _15 = NSMutableAttributedString(string: "15")
                _15.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 7)!, range: NSRange(location: 0, length: _15.length))
                _15.addAttribute(.kern, value: 0.21, range: NSRange(location: 0, length: _15.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    _15.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _15.length))
                }
                _15.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _15.length))
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                _15.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            context.restoreGState()
            // End Mask (Outline Mask)
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawKeyboardsPickersTime(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 216), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 216), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 216)
        
        /// Background
        // Warning: New symbols are not supported.
        
        /// Bottom
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 127)
            
            /// Mask
            let mask = UIBezierPath()
            mask.move(to: CGPoint.zero)
            mask.addLine(to: CGPoint(x: 375, y: 0))
            mask.addLine(to: CGPoint(x: 375, y: 89))
            mask.addLine(to: CGPoint(x: 0, y: 89))
            mask.addLine(to: CGPoint.zero)
            mask.close()
            
            /// Mask (Outline Mask)
            context.saveGState()
            mask.addClip()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.1)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 119, y: 60)
                
                /// 45
                let _45 = NSMutableAttributedString(string: "45")
                _45.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 7)!, range: NSRange(location: 0, length: _45.length))
                _45.addAttribute(.kern, value: 0.21, range: NSRange(location: 0, length: _45.length))
                _45.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _45.length))
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                _45.draw(at: CGPoint(x: 62, y: 0))
                context.restoreGState()
                
                /// 13
                let _13 = NSMutableAttributedString(string: "13")
                _13.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 7)!, range: NSRange(location: 0, length: _13.length))
                _13.addAttribute(.kern, value: 0.21, range: NSRange(location: 0, length: _13.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    _13.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _13.length))
                }
                _13.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _13.length))
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                _13.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.2)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 115, y: 46)
                
                /// 44
                let _44 = NSMutableAttributedString(string: "44")
                _44.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 11)!, range: NSRange(location: 0, length: _44.length))
                _44.addAttribute(.kern, value: 0.33, range: NSRange(location: 0, length: _44.length))
                _44.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _44.length))
                context.saveGState()
                _44.draw(at: CGPoint(x: 63, y: 0))
                context.restoreGState()
                
                /// 12
                let _12 = NSMutableAttributedString(string: "12")
                _12.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 11)!, range: NSRange(location: 0, length: _12.length))
                _12.addAttribute(.kern, value: 0.33, range: NSRange(location: 0, length: _12.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    _12.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _12.length))
                }
                _12.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _12.length))
                context.saveGState()
                _12.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.3)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 112, y: 26)
                
                /// 43
                let _43 = NSMutableAttributedString(string: "43")
                _43.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 15)!, range: NSRange(location: 0, length: _43.length))
                _43.addAttribute(.kern, value: 0.46, range: NSRange(location: 0, length: _43.length))
                _43.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _43.length))
                context.saveGState()
                _43.draw(at: CGPoint(x: 64, y: 0))
                context.restoreGState()
                
                /// 11
                let _11 = NSMutableAttributedString(string: "11")
                _11.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 15)!, range: NSRange(location: 0, length: _11.length))
                _11.addAttribute(.kern, value: 0.46, range: NSRange(location: 0, length: _11.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    _11.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _11.length))
                }
                _11.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _11.length))
                context.saveGState()
                _11.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.4)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 105, y: 0)
                
                /// PM
                let pM = NSMutableAttributedString(string: "PM")
                pM.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 19)!, range: NSRange(location: 0, length: pM.length))
                pM.addAttribute(.kern, value: 0.58, range: NSRange(location: 0, length: pM.length))
                pM.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: pM.length))
                context.saveGState()
                pM.draw(at: CGPoint(x: 127, y: 0))
                context.restoreGState()
                
                /// 42
                let _42 = NSMutableAttributedString(string: "42")
                _42.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 19)!, range: NSRange(location: 0, length: _42.length))
                _42.addAttribute(.kern, value: 0.58, range: NSRange(location: 0, length: _42.length))
                _42.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _42.length))
                context.saveGState()
                _42.draw(at: CGPoint(x: 68, y: 0))
                context.restoreGState()
                
                /// 10
                let _10 = NSMutableAttributedString(string: "10")
                _10.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 19)!, range: NSRange(location: 0, length: _10.length))
                _10.addAttribute(.kern, value: 0.58, range: NSRange(location: 0, length: _10.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    _10.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _10.length))
                }
                _10.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _10.length))
                context.saveGState()
                _10.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            context.restoreGState()
            // End Mask (Outline Mask)
            
            context.restoreGState()
        }
        
        /// Selected
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 91)
            
            /// Borders
            do {
                context.saveGState()
                
                /// Separator
                // Warning: New symbols are not supported.
                
                /// Separator
                // Warning: New symbols are not supported.
                
                context.restoreGState()
            }
            
            /// AM
            let aM = NSMutableAttributedString(string: "AM")
            aM.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: aM.length))
            aM.addAttribute(.kern, value: 0.7, range: NSRange(location: 0, length: aM.length))
            aM.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: aM.length))
            context.saveGState()
            aM.draw(at: CGPoint(x: 228, y: 4))
            context.restoreGState()
            
            /// 41
            let _41 = NSMutableAttributedString(string: "41")
            _41.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: _41.length))
            _41.addAttribute(.kern, value: 0.7, range: NSRange(location: 0, length: _41.length))
            _41.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _41.length))
            context.saveGState()
            _41.draw(at: CGPoint(x: 172, y: 4))
            context.restoreGState()
            
            /// 9
            let _9 = NSMutableAttributedString(string: "9")
            _9.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: _9.length))
            _9.addAttribute(.kern, value: 0.7, range: NSRange(location: 0, length: _9.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                _9.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _9.length))
            }
            _9.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _9.length))
            context.saveGState()
            _9.draw(at: CGPoint(x: 112, y: 4))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Top
        do {
            context.saveGState()
            
            /// Mask
            let mask2 = UIBezierPath()
            mask2.move(to: CGPoint.zero)
            mask2.addLine(to: CGPoint(x: 375, y: 0))
            mask2.addLine(to: CGPoint(x: 375, y: 91))
            mask2.addLine(to: CGPoint(x: 0, y: 91))
            mask2.addLine(to: CGPoint.zero)
            mask2.close()
            
            /// Mask (Outline Mask)
            context.saveGState()
            mask2.addClip()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.4)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 115, y: 68)
                
                /// 40
                let _40 = NSMutableAttributedString(string: "40")
                _40.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 19)!, range: NSRange(location: 0, length: _40.length))
                _40.addAttribute(.kern, value: 0.58, range: NSRange(location: 0, length: _40.length))
                _40.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _40.length))
                context.saveGState()
                _40.draw(at: CGPoint(x: 58, y: 0))
                context.restoreGState()
                
                /// 8
                let _8 = NSMutableAttributedString(string: "8")
                _8.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 19)!, range: NSRange(location: 0, length: _8.length))
                _8.addAttribute(.kern, value: 0.58, range: NSRange(location: 0, length: _8.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    _8.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _8.length))
                }
                _8.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _8.length))
                context.saveGState()
                _8.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.3)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 118, y: 47)
                
                /// 39
                let _39 = NSMutableAttributedString(string: "39")
                _39.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 15)!, range: NSRange(location: 0, length: _39.length))
                _39.addAttribute(.kern, value: 0.46, range: NSRange(location: 0, length: _39.length))
                _39.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _39.length))
                context.saveGState()
                _39.draw(at: CGPoint(x: 58, y: 0))
                context.restoreGState()
                
                /// 7
                let _7 = NSMutableAttributedString(string: "7")
                _7.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 15)!, range: NSRange(location: 0, length: _7.length))
                _7.addAttribute(.kern, value: 0.46, range: NSRange(location: 0, length: _7.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    _7.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _7.length))
                }
                _7.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _7.length))
                context.saveGState()
                _7.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.2)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 120, y: 32)
                
                /// 38
                let _38 = NSMutableAttributedString(string: "38")
                _38.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 11)!, range: NSRange(location: 0, length: _38.length))
                _38.addAttribute(.kern, value: 0.33, range: NSRange(location: 0, length: _38.length))
                _38.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _38.length))
                context.saveGState()
                _38.draw(at: CGPoint(x: 58, y: 0))
                context.restoreGState()
                
                /// 6
                let _6 = NSMutableAttributedString(string: "6")
                _6.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 11)!, range: NSRange(location: 0, length: _6.length))
                _6.addAttribute(.kern, value: 0.33, range: NSRange(location: 0, length: _6.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    _6.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _6.length))
                }
                _6.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _6.length))
                context.saveGState()
                _6.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Row
            context.saveGState()
            context.setAlpha(0.1)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 122, y: 22)
                
                /// 37
                let _37 = NSMutableAttributedString(string: "37")
                _37.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 7)!, range: NSRange(location: 0, length: _37.length))
                _37.addAttribute(.kern, value: 0.21, range: NSRange(location: 0, length: _37.length))
                _37.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _37.length))
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                _37.draw(at: CGPoint(x: 59, y: 0))
                context.restoreGState()
                
                /// 5
                let _5 = NSMutableAttributedString(string: "5")
                _5.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 7)!, range: NSRange(location: 0, length: _5.length))
                _5.addAttribute(.kern, value: 0.21, range: NSRange(location: 0, length: _5.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    _5.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _5.length))
                }
                _5.addAttribute(.foregroundColor, value: UIColor(white: 0.2, alpha: 1), range: NSRange(location: 0, length: _5.length))
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                _5.draw(at: CGPoint.zero)
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            context.restoreGState()
            // End Mask (Outline Mask)
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawMaps_Position(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 94, height: 94), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 94, height: 94), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 94, y: resizedFrame.height / 94)
        
        /// Container
        do {
            context.saveGState()
            
            /// Oval
            let oval = UIBezierPath()
            oval.move(to: CGPoint(x: 47, y: 94))
            oval.addCurve(to: CGPoint(x: 94, y: 47), controlPoint1: CGPoint(x: 72.96, y: 94), controlPoint2: CGPoint(x: 94, y: 72.96))
            oval.addCurve(to: CGPoint(x: 47, y: 0), controlPoint1: CGPoint(x: 94, y: 21.04), controlPoint2: CGPoint(x: 72.96, y: 0))
            oval.addCurve(to: CGPoint(x: 0, y: 47), controlPoint1: CGPoint(x: 21.04, y: 0), controlPoint2: CGPoint(x: 0, y: 21.04))
            oval.addCurve(to: CGPoint(x: 47, y: 94), controlPoint1: CGPoint(x: 0, y: 72.96), controlPoint2: CGPoint(x: 21.04, y: 94))
            oval.close()
            context.saveGState()
            oval.usesEvenOddFillRule = true
            UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 0.1).setFill()
            oval.fill()
            context.restoreGState()
            
            /// Oval
            let oval3 = UIBezierPath()
            oval3.move(to: CGPoint(x: 11, y: 22))
            oval3.addCurve(to: CGPoint(x: 22, y: 11), controlPoint1: CGPoint(x: 17.08, y: 22), controlPoint2: CGPoint(x: 22, y: 17.08))
            oval3.addCurve(to: CGPoint(x: 11, y: 0), controlPoint1: CGPoint(x: 22, y: 4.92), controlPoint2: CGPoint(x: 17.08, y: 0))
            oval3.addCurve(to: CGPoint(x: 0, y: 11), controlPoint1: CGPoint(x: 4.92, y: 0), controlPoint2: CGPoint(x: 0, y: 4.92))
            oval3.addCurve(to: CGPoint(x: 11, y: 22), controlPoint1: CGPoint(x: 0, y: 17.08), controlPoint2: CGPoint(x: 4.92, y: 22))
            oval3.close()
            context.saveGState()
            context.translateBy(x: 36, y: 36)
            oval3.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(oval3.cgPath)
            context.addRect(oval3.bounds.insetBy(dx: -4, dy: -6))
            context.clip(using: .evenOdd)
            context.translateBy(x: -27, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 27, y: 2)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 4 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.16).cgColor)
            }
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                oval3.fill()
                context.saveGState()
                oval3.lineWidth = 6
                context.beginPath()
                context.addPath(oval3.cgPath)
                context.clip(using: .evenOdd)
                UIColor.black.setStroke()
                oval3.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            oval3.usesEvenOddFillRule = true
            UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
            oval3.fill()
            context.saveGState()
            oval3.lineWidth = 6
            context.beginPath()
            context.addPath(oval3.cgPath)
            context.clip(using: .evenOdd)
            UIColor.white.setStroke()
            oval3.stroke()
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawMaps_Pin(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 94, height: 94), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 94, height: 94), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 94, y: resizedFrame.height / 94)
        
        /// Mask
        let mask = UIBezierPath()
        mask.move(to: CGPoint(x: 23.69, y: 59.33))
        mask.addCurve(to: CGPoint(x: 0, y: 30), controlPoint1: CGPoint(x: 10.15, y: 56.43), controlPoint2: CGPoint(x: 0, y: 44.4))
        mask.addCurve(to: CGPoint(x: 30, y: 0), controlPoint1: CGPoint(x: 0, y: 13.43), controlPoint2: CGPoint(x: 13.43, y: 0))
        mask.addCurve(to: CGPoint(x: 60, y: 30), controlPoint1: CGPoint(x: 46.57, y: 0), controlPoint2: CGPoint(x: 60, y: 13.43))
        mask.addCurve(to: CGPoint(x: 36.31, y: 59.33), controlPoint1: CGPoint(x: 60, y: 44.4), controlPoint2: CGPoint(x: 49.85, y: 56.43))
        mask.addCurve(to: CGPoint(x: 30.46, y: 65.81), controlPoint1: CGPoint(x: 33.84, y: 60.25), controlPoint2: CGPoint(x: 31.89, y: 62.41))
        mask.addCurve(to: CGPoint(x: 30.19, y: 66.08), controlPoint1: CGPoint(x: 30.41, y: 65.93), controlPoint2: CGPoint(x: 30.31, y: 66.03))
        mask.addCurve(to: CGPoint(x: 29.54, y: 65.81), controlPoint1: CGPoint(x: 29.94, y: 66.18), controlPoint2: CGPoint(x: 29.65, y: 66.07))
        mask.addLine(to: CGPoint(x: 29.54, y: 65.81))
        mask.addCurve(to: CGPoint(x: 23.69, y: 59.33), controlPoint1: CGPoint(x: 28.11, y: 62.41), controlPoint2: CGPoint(x: 26.16, y: 60.25))
        mask.close()
        mask.move(to: CGPoint(x: 30, y: 74))
        mask.addCurve(to: CGPoint(x: 27, y: 71), controlPoint1: CGPoint(x: 28.34, y: 74), controlPoint2: CGPoint(x: 27, y: 72.66))
        mask.addCurve(to: CGPoint(x: 30, y: 68), controlPoint1: CGPoint(x: 27, y: 69.34), controlPoint2: CGPoint(x: 28.34, y: 68))
        mask.addCurve(to: CGPoint(x: 33, y: 71), controlPoint1: CGPoint(x: 31.66, y: 68), controlPoint2: CGPoint(x: 33, y: 69.34))
        mask.addCurve(to: CGPoint(x: 30, y: 74), controlPoint1: CGPoint(x: 33, y: 72.66), controlPoint2: CGPoint(x: 31.66, y: 74))
        mask.close()
        context.saveGState()
        context.translateBy(x: 17, y: 10)
        mask.usesEvenOddFillRule = true
        context.saveGState()
        context.beginPath()
        context.addPath(mask.cgPath)
        context.addRect(mask.bounds.insetBy(dx: -6, dy: -8))
        context.clip(using: .evenOdd)
        context.translateBy(x: -67, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 67, y: 2)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 6 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.14).cgColor)
        }
        UIColor.black.setFill()
        mask.fill()
        context.restoreGState()
        mask.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 0).setFill()
        mask.fill()
        context.restoreGState()
        
        /// Mask (Outline Mask)
        context.saveGState()
        mask.apply(CGAffineTransform(translationX: 17, y: 10))
        mask.addClip()
        
        /// Style
        // Warning: New symbols are not supported.
        
        /// Oval
        let oval = UIBezierPath()
        oval.move(to: CGPoint(x: 5, y: 13.12))
        oval.addCurve(to: CGPoint(x: 6, y: 13.19), controlPoint1: CGPoint(x: 5.33, y: 13.16), controlPoint2: CGPoint(x: 5.66, y: 13.19))
        oval.addCurve(to: CGPoint(x: 7, y: 13.12), controlPoint1: CGPoint(x: 6.34, y: 13.19), controlPoint2: CGPoint(x: 6.67, y: 13.16))
        oval.addLine(to: CGPoint(x: 7, y: 30.94))
        oval.addLine(to: CGPoint(x: 6, y: 35))
        oval.addLine(to: CGPoint(x: 5, y: 30.94))
        oval.addLine(to: CGPoint(x: 5, y: 13.12))
        oval.close()
        oval.move(to: CGPoint(x: 6, y: 12.17))
        oval.addCurve(to: CGPoint(x: 0, y: 6.09), controlPoint1: CGPoint(x: 2.69, y: 12.17), controlPoint2: CGPoint(x: 0, y: 9.45))
        oval.addCurve(to: CGPoint(x: 6, y: 0), controlPoint1: CGPoint(x: 0, y: 2.73), controlPoint2: CGPoint(x: 2.69, y: 0))
        oval.addCurve(to: CGPoint(x: 12, y: 6.09), controlPoint1: CGPoint(x: 9.31, y: 0), controlPoint2: CGPoint(x: 12, y: 2.73))
        oval.addCurve(to: CGPoint(x: 6, y: 12.17), controlPoint1: CGPoint(x: 12, y: 9.45), controlPoint2: CGPoint(x: 9.31, y: 12.17))
        oval.close()
        oval.move(to: CGPoint(x: 4.25, y: 4.57))
        oval.addCurve(to: CGPoint(x: 5.5, y: 3.3), controlPoint1: CGPoint(x: 4.94, y: 4.57), controlPoint2: CGPoint(x: 5.5, y: 4))
        oval.addCurve(to: CGPoint(x: 4.25, y: 2.03), controlPoint1: CGPoint(x: 5.5, y: 2.6), controlPoint2: CGPoint(x: 4.94, y: 2.03))
        oval.addCurve(to: CGPoint(x: 3, y: 3.3), controlPoint1: CGPoint(x: 3.56, y: 2.03), controlPoint2: CGPoint(x: 3, y: 2.6))
        oval.addCurve(to: CGPoint(x: 4.25, y: 4.57), controlPoint1: CGPoint(x: 3, y: 4), controlPoint2: CGPoint(x: 3.56, y: 4.57))
        oval.close()
        context.saveGState()
        context.translateBy(x: 41, y: 24)
        oval.usesEvenOddFillRule = true
        UIColor.white.setFill()
        oval.fill()
        context.restoreGState()
        
        context.restoreGState()
        // End Mask (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawMaps_Photos(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 94, height: 94), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 94, height: 94), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 94, y: resizedFrame.height / 94)
        
        /// Mask
        let mask = UIBezierPath()
        mask.move(to: CGPoint(x: 23, y: 60))
        mask.addLine(to: CGPoint(x: 5.13, y: 60))
        mask.addCurve(to: CGPoint(x: 2.05, y: 59.47), controlPoint1: CGPoint(x: 3.34, y: 60), controlPoint2: CGPoint(x: 2.7, y: 59.81))
        mask.addCurve(to: CGPoint(x: 0.53, y: 57.95), controlPoint1: CGPoint(x: 1.39, y: 59.12), controlPoint2: CGPoint(x: 0.88, y: 58.61))
        mask.addCurve(to: CGPoint(x: 0, y: 54.87), controlPoint1: CGPoint(x: 0.19, y: 57.3), controlPoint2: CGPoint(x: 0, y: 56.66))
        mask.addLine(to: CGPoint(x: 0, y: 5.13))
        mask.addCurve(to: CGPoint(x: 0.53, y: 2.05), controlPoint1: CGPoint(x: 0, y: 3.34), controlPoint2: CGPoint(x: 0.19, y: 2.7))
        mask.addCurve(to: CGPoint(x: 2.05, y: 0.53), controlPoint1: CGPoint(x: 0.88, y: 1.39), controlPoint2: CGPoint(x: 1.39, y: 0.88))
        mask.addCurve(to: CGPoint(x: 5.13, y: 0), controlPoint1: CGPoint(x: 2.7, y: 0.19), controlPoint2: CGPoint(x: 3.34, y: 0))
        mask.addLine(to: CGPoint(x: 54.87, y: 0))
        mask.addCurve(to: CGPoint(x: 57.95, y: 0.53), controlPoint1: CGPoint(x: 56.66, y: 0), controlPoint2: CGPoint(x: 57.3, y: 0.19))
        mask.addCurve(to: CGPoint(x: 59.47, y: 2.05), controlPoint1: CGPoint(x: 58.61, y: 0.88), controlPoint2: CGPoint(x: 59.12, y: 1.39))
        mask.addCurve(to: CGPoint(x: 60, y: 5.13), controlPoint1: CGPoint(x: 59.81, y: 2.7), controlPoint2: CGPoint(x: 60, y: 3.34))
        mask.addLine(to: CGPoint(x: 60, y: 54.87))
        mask.addCurve(to: CGPoint(x: 59.47, y: 57.95), controlPoint1: CGPoint(x: 60, y: 56.66), controlPoint2: CGPoint(x: 59.81, y: 57.3))
        mask.addCurve(to: CGPoint(x: 57.95, y: 59.47), controlPoint1: CGPoint(x: 59.12, y: 58.61), controlPoint2: CGPoint(x: 58.61, y: 59.12))
        mask.addCurve(to: CGPoint(x: 54.87, y: 60), controlPoint1: CGPoint(x: 57.3, y: 59.81), controlPoint2: CGPoint(x: 56.66, y: 60))
        mask.addLine(to: CGPoint(x: 37, y: 60))
        mask.addLine(to: CGPoint(x: 30.71, y: 66.29))
        mask.addCurve(to: CGPoint(x: 29.29, y: 66.29), controlPoint1: CGPoint(x: 30.32, y: 66.68), controlPoint2: CGPoint(x: 29.68, y: 66.68))
        mask.addLine(to: CGPoint(x: 23, y: 60))
        mask.close()
        context.saveGState()
        context.translateBy(x: 17, y: 14)
        mask.usesEvenOddFillRule = true
        context.saveGState()
        context.beginPath()
        context.addPath(mask.cgPath)
        context.addRect(mask.bounds.insetBy(dx: -4, dy: -6))
        context.clip(using: .evenOdd)
        context.translateBy(x: -65, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 65, y: 2)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 4 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.16).cgColor)
        }
        UIColor.black.setFill()
        mask.fill()
        context.restoreGState()
        mask.usesEvenOddFillRule = true
        UIColor.white.setFill()
        mask.fill()
        context.restoreGState()
        
        /// Mask (Outline Mask)
        context.saveGState()
        mask.apply(CGAffineTransform(translationX: 17, y: 14))
        mask.addClip()
        
        /// Bitmap
        let bitmap = UIBezierPath()
        bitmap.move(to: CGPoint(x: 1.28, y: 0))
        bitmap.addLine(to: CGPoint(x: 52.72, y: 0))
        bitmap.addCurve(to: CGPoint(x: 53.49, y: 0.13), controlPoint1: CGPoint(x: 53.16, y: 0), controlPoint2: CGPoint(x: 53.33, y: 0.05))
        bitmap.addCurve(to: CGPoint(x: 53.87, y: 0.51), controlPoint1: CGPoint(x: 53.65, y: 0.22), controlPoint2: CGPoint(x: 53.78, y: 0.35))
        bitmap.addCurve(to: CGPoint(x: 54, y: 1.28), controlPoint1: CGPoint(x: 53.95, y: 0.67), controlPoint2: CGPoint(x: 54, y: 0.84))
        bitmap.addLine(to: CGPoint(x: 54, y: 52.72))
        bitmap.addCurve(to: CGPoint(x: 53.87, y: 53.49), controlPoint1: CGPoint(x: 54, y: 53.16), controlPoint2: CGPoint(x: 53.95, y: 53.33))
        bitmap.addCurve(to: CGPoint(x: 53.49, y: 53.87), controlPoint1: CGPoint(x: 53.78, y: 53.65), controlPoint2: CGPoint(x: 53.65, y: 53.78))
        bitmap.addCurve(to: CGPoint(x: 52.72, y: 54), controlPoint1: CGPoint(x: 53.33, y: 53.95), controlPoint2: CGPoint(x: 53.16, y: 54))
        bitmap.addLine(to: CGPoint(x: 1.28, y: 54))
        bitmap.addCurve(to: CGPoint(x: 0.51, y: 53.87), controlPoint1: CGPoint(x: 0.84, y: 54), controlPoint2: CGPoint(x: 0.67, y: 53.95))
        bitmap.addCurve(to: CGPoint(x: 0.13, y: 53.49), controlPoint1: CGPoint(x: 0.35, y: 53.78), controlPoint2: CGPoint(x: 0.22, y: 53.65))
        bitmap.addCurve(to: CGPoint(x: 0, y: 52.72), controlPoint1: CGPoint(x: 0.05, y: 53.33), controlPoint2: CGPoint(x: 0, y: 53.16))
        bitmap.addLine(to: CGPoint(x: 0, y: 1.28))
        bitmap.addCurve(to: CGPoint(x: 0.13, y: 0.51), controlPoint1: CGPoint(x: 0, y: 0.84), controlPoint2: CGPoint(x: 0.05, y: 0.67))
        bitmap.addCurve(to: CGPoint(x: 0.51, y: 0.13), controlPoint1: CGPoint(x: 0.22, y: 0.35), controlPoint2: CGPoint(x: 0.35, y: 0.22))
        bitmap.addCurve(to: CGPoint(x: 1.28, y: 0), controlPoint1: CGPoint(x: 0.67, y: 0.05), controlPoint2: CGPoint(x: 0.84, y: 0))
        bitmap.close()
        context.saveGState()
        context.translateBy(x: 20, y: 17)
        bitmap.usesEvenOddFillRule = true
        context.saveGState()
        // Warning: Image fill is not supported.
        context.restoreGState()
        context.restoreGState()
        
        context.restoreGState()
        // End Mask (Outline Mask)
        
        /// _Assets / Misc / Counter | Normal
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawMapsStreet(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 112, height: 112), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 112, height: 112), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 112, y: resizedFrame.height / 112)
        
        /// Mask
        let mask = UIBezierPath()
        mask.move(to: CGPoint.zero)
        mask.addLine(to: CGPoint(x: 112, y: 0))
        mask.addLine(to: CGPoint(x: 112, y: 112))
        mask.addLine(to: CGPoint(x: 0, y: 112))
        mask.addLine(to: CGPoint.zero)
        mask.close()
        context.saveGState()
        mask.usesEvenOddFillRule = true
        UIColor.white.setFill()
        mask.fill()
        context.restoreGState()
        
        /// Mask (Outline Mask)
        context.saveGState()
        mask.addClip()
        
        /// Map
        // Warning: Image layers are not supported.
        
        context.restoreGState()
        // End Mask (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawImagesBitmapSquared(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 110, height: 110), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 110, height: 110), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 110, y: resizedFrame.height / 110)
        
        /// ▪︎ Bitmap
        let bitmap = UIBezierPath()
        bitmap.move(to: CGPoint.zero)
        bitmap.addLine(to: CGPoint(x: 110, y: 0))
        bitmap.addLine(to: CGPoint(x: 110, y: 110))
        bitmap.addLine(to: CGPoint(x: 0, y: 110))
        bitmap.addLine(to: CGPoint.zero)
        bitmap.close()
        context.saveGState()
        bitmap.usesEvenOddFillRule = true
        context.saveGState()
        // Warning: Image fill is not supported.
        context.restoreGState()
        context.restoreGState()
        
        /// Scrim
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawMapsCity(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 111, height: 112), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 111, height: 112), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 111, y: resizedFrame.height / 112)
        
        /// Mask
        let mask = UIBezierPath()
        mask.move(to: CGPoint.zero)
        mask.addLine(to: CGPoint(x: 111, y: 0))
        mask.addLine(to: CGPoint(x: 111, y: 112))
        mask.addLine(to: CGPoint(x: 0, y: 112))
        mask.addLine(to: CGPoint.zero)
        mask.close()
        context.saveGState()
        mask.usesEvenOddFillRule = true
        UIColor.white.setFill()
        mask.fill()
        context.restoreGState()
        
        /// Mask (Outline Mask)
        context.saveGState()
        mask.addClip()
        
        /// Map
        // Warning: Image layers are not supported.
        
        context.restoreGState()
        // End Mask (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawImagesBitmapRoundedR6(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 110, height: 110), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 110, height: 110), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 110, y: resizedFrame.height / 110)
        
        /// ▪︎ Bitmap
        let bitmap = UIBezierPath()
        bitmap.move(to: CGPoint(x: 7.69, y: 0))
        bitmap.addLine(to: CGPoint(x: 102.31, y: 0))
        bitmap.addCurve(to: CGPoint(x: 106.93, y: 0.8), controlPoint1: CGPoint(x: 104.98, y: 0), controlPoint2: CGPoint(x: 105.95, y: 0.28))
        bitmap.addCurve(to: CGPoint(x: 109.2, y: 3.07), controlPoint1: CGPoint(x: 107.91, y: 1.32), controlPoint2: CGPoint(x: 108.68, y: 2.09))
        bitmap.addCurve(to: CGPoint(x: 110, y: 7.69), controlPoint1: CGPoint(x: 109.72, y: 4.05), controlPoint2: CGPoint(x: 110, y: 5.02))
        bitmap.addLine(to: CGPoint(x: 110, y: 102.31))
        bitmap.addCurve(to: CGPoint(x: 109.2, y: 106.93), controlPoint1: CGPoint(x: 110, y: 104.98), controlPoint2: CGPoint(x: 109.72, y: 105.95))
        bitmap.addCurve(to: CGPoint(x: 106.93, y: 109.2), controlPoint1: CGPoint(x: 108.68, y: 107.91), controlPoint2: CGPoint(x: 107.91, y: 108.68))
        bitmap.addCurve(to: CGPoint(x: 102.31, y: 110), controlPoint1: CGPoint(x: 105.95, y: 109.72), controlPoint2: CGPoint(x: 104.98, y: 110))
        bitmap.addLine(to: CGPoint(x: 7.69, y: 110))
        bitmap.addCurve(to: CGPoint(x: 3.07, y: 109.2), controlPoint1: CGPoint(x: 5.02, y: 110), controlPoint2: CGPoint(x: 4.05, y: 109.72))
        bitmap.addCurve(to: CGPoint(x: 0.8, y: 106.93), controlPoint1: CGPoint(x: 2.09, y: 108.68), controlPoint2: CGPoint(x: 1.32, y: 107.91))
        bitmap.addCurve(to: CGPoint(x: 0, y: 102.31), controlPoint1: CGPoint(x: 0.28, y: 105.95), controlPoint2: CGPoint(x: 0, y: 104.98))
        bitmap.addLine(to: CGPoint(x: 0, y: 7.69))
        bitmap.addCurve(to: CGPoint(x: 0.8, y: 3.07), controlPoint1: CGPoint(x: 0, y: 5.02), controlPoint2: CGPoint(x: 0.28, y: 4.05))
        bitmap.addCurve(to: CGPoint(x: 3.07, y: 0.8), controlPoint1: CGPoint(x: 1.32, y: 2.09), controlPoint2: CGPoint(x: 2.09, y: 1.32))
        bitmap.addCurve(to: CGPoint(x: 7.69, y: 0), controlPoint1: CGPoint(x: 4.05, y: 0.28), controlPoint2: CGPoint(x: 5.02, y: 0))
        bitmap.close()
        context.saveGState()
        bitmap.usesEvenOddFillRule = true
        context.saveGState()
        // Warning: Image fill is not supported.
        context.restoreGState()
        context.restoreGState()
        
        /// ▪︎ Bitmap (Outline Mask)
        context.saveGState()
        bitmap.addClip()
        
        /// Scrim
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End ▪︎ Bitmap (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawImagesBitmapRoundedR10(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 110, height: 110), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 110, height: 110), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 110, y: resizedFrame.height / 110)
        
        /// ▪︎ Bitmap
        let bitmap = UIBezierPath()
        bitmap.move(to: CGPoint(x: 12.82, y: 0))
        bitmap.addLine(to: CGPoint(x: 97.18, y: 0))
        bitmap.addCurve(to: CGPoint(x: 104.88, y: 1.34), controlPoint1: CGPoint(x: 101.64, y: 0), controlPoint2: CGPoint(x: 103.25, y: 0.46))
        bitmap.addCurve(to: CGPoint(x: 108.66, y: 5.12), controlPoint1: CGPoint(x: 106.51, y: 2.21), controlPoint2: CGPoint(x: 107.79, y: 3.49))
        bitmap.addCurve(to: CGPoint(x: 110, y: 12.82), controlPoint1: CGPoint(x: 109.54, y: 6.75), controlPoint2: CGPoint(x: 110, y: 8.36))
        bitmap.addLine(to: CGPoint(x: 110, y: 97.18))
        bitmap.addCurve(to: CGPoint(x: 108.66, y: 104.88), controlPoint1: CGPoint(x: 110, y: 101.64), controlPoint2: CGPoint(x: 109.54, y: 103.25))
        bitmap.addCurve(to: CGPoint(x: 104.88, y: 108.66), controlPoint1: CGPoint(x: 107.79, y: 106.51), controlPoint2: CGPoint(x: 106.51, y: 107.79))
        bitmap.addCurve(to: CGPoint(x: 97.18, y: 110), controlPoint1: CGPoint(x: 103.25, y: 109.54), controlPoint2: CGPoint(x: 101.64, y: 110))
        bitmap.addLine(to: CGPoint(x: 12.82, y: 110))
        bitmap.addCurve(to: CGPoint(x: 5.12, y: 108.66), controlPoint1: CGPoint(x: 8.36, y: 110), controlPoint2: CGPoint(x: 6.75, y: 109.54))
        bitmap.addCurve(to: CGPoint(x: 1.34, y: 104.88), controlPoint1: CGPoint(x: 3.49, y: 107.79), controlPoint2: CGPoint(x: 2.21, y: 106.51))
        bitmap.addCurve(to: CGPoint(x: 0, y: 97.18), controlPoint1: CGPoint(x: 0.46, y: 103.25), controlPoint2: CGPoint(x: 0, y: 101.64))
        bitmap.addLine(to: CGPoint(x: 0, y: 12.82))
        bitmap.addCurve(to: CGPoint(x: 1.34, y: 5.12), controlPoint1: CGPoint(x: 0, y: 8.36), controlPoint2: CGPoint(x: 0.46, y: 6.75))
        bitmap.addCurve(to: CGPoint(x: 5.12, y: 1.34), controlPoint1: CGPoint(x: 2.21, y: 3.49), controlPoint2: CGPoint(x: 3.49, y: 2.21))
        bitmap.addCurve(to: CGPoint(x: 12.82, y: 0), controlPoint1: CGPoint(x: 6.75, y: 0.46), controlPoint2: CGPoint(x: 8.36, y: 0))
        bitmap.close()
        context.saveGState()
        bitmap.usesEvenOddFillRule = true
        context.saveGState()
        // Warning: Image fill is not supported.
        context.restoreGState()
        context.restoreGState()
        
        /// ▪︎ Bitmap (Outline Mask)
        context.saveGState()
        bitmap.addClip()
        
        /// Scrim
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End ▪︎ Bitmap (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawImagesBitmapCircle(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 110, height: 110), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 110, height: 110), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 110, y: resizedFrame.height / 110)
        
        /// ▪︎ Bitmap
        let bitmap = UIBezierPath()
        bitmap.move(to: CGPoint(x: 55, y: 0))
        bitmap.addLine(to: CGPoint(x: 55, y: 0))
        bitmap.addCurve(to: CGPoint(x: 110, y: 55), controlPoint1: CGPoint(x: 85.38, y: 0), controlPoint2: CGPoint(x: 110, y: 24.62))
        bitmap.addLine(to: CGPoint(x: 110, y: 55))
        bitmap.addCurve(to: CGPoint(x: 55, y: 110), controlPoint1: CGPoint(x: 110, y: 85.38), controlPoint2: CGPoint(x: 85.38, y: 110))
        bitmap.addLine(to: CGPoint(x: 55, y: 110))
        bitmap.addCurve(to: CGPoint(x: 0, y: 55), controlPoint1: CGPoint(x: 24.62, y: 110), controlPoint2: CGPoint(x: 0, y: 85.38))
        bitmap.addLine(to: CGPoint(x: 0, y: 55))
        bitmap.addCurve(to: CGPoint(x: 55, y: 0), controlPoint1: CGPoint(x: 0, y: 24.62), controlPoint2: CGPoint(x: 24.62, y: 0))
        bitmap.close()
        context.saveGState()
        bitmap.usesEvenOddFillRule = true
        context.saveGState()
        // Warning: Image fill is not supported.
        context.restoreGState()
        context.restoreGState()
        
        /// ▪︎ Bitmap (Outline Mask)
        context.saveGState()
        bitmap.addClip()
        
        /// Scrim
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End ▪︎ Bitmap (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawImagesBitmapAppIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 110, height: 110), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 110, height: 110), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 110, y: resizedFrame.height / 110)
        
        /// ▪︎ Bitmap
        let bitmap = UIBezierPath()
        bitmap.move(to: CGPoint(x: 33.33, y: 0))
        bitmap.addLine(to: CGPoint(x: 76.67, y: 0))
        bitmap.addCurve(to: CGPoint(x: 96.7, y: 3.47), controlPoint1: CGPoint(x: 88.26, y: 0), controlPoint2: CGPoint(x: 92.46, y: 1.21))
        bitmap.addCurve(to: CGPoint(x: 106.53, y: 13.3), controlPoint1: CGPoint(x: 100.94, y: 5.74), controlPoint2: CGPoint(x: 104.26, y: 9.06))
        bitmap.addCurve(to: CGPoint(x: 110, y: 33.33), controlPoint1: CGPoint(x: 108.79, y: 17.54), controlPoint2: CGPoint(x: 110, y: 21.74))
        bitmap.addLine(to: CGPoint(x: 110, y: 76.67))
        bitmap.addCurve(to: CGPoint(x: 106.53, y: 96.7), controlPoint1: CGPoint(x: 110, y: 88.26), controlPoint2: CGPoint(x: 108.79, y: 92.46))
        bitmap.addCurve(to: CGPoint(x: 96.7, y: 106.53), controlPoint1: CGPoint(x: 104.26, y: 100.94), controlPoint2: CGPoint(x: 100.94, y: 104.26))
        bitmap.addCurve(to: CGPoint(x: 76.67, y: 110), controlPoint1: CGPoint(x: 92.46, y: 108.79), controlPoint2: CGPoint(x: 88.26, y: 110))
        bitmap.addLine(to: CGPoint(x: 33.33, y: 110))
        bitmap.addCurve(to: CGPoint(x: 13.3, y: 106.53), controlPoint1: CGPoint(x: 21.74, y: 110), controlPoint2: CGPoint(x: 17.54, y: 108.79))
        bitmap.addCurve(to: CGPoint(x: 3.47, y: 96.7), controlPoint1: CGPoint(x: 9.06, y: 104.26), controlPoint2: CGPoint(x: 5.74, y: 100.94))
        bitmap.addCurve(to: CGPoint(x: 0, y: 76.67), controlPoint1: CGPoint(x: 1.21, y: 92.46), controlPoint2: CGPoint(x: 0, y: 88.26))
        bitmap.addLine(to: CGPoint(x: 0, y: 33.33))
        bitmap.addCurve(to: CGPoint(x: 3.47, y: 13.3), controlPoint1: CGPoint(x: 0, y: 21.74), controlPoint2: CGPoint(x: 1.21, y: 17.54))
        bitmap.addCurve(to: CGPoint(x: 13.3, y: 3.47), controlPoint1: CGPoint(x: 5.74, y: 9.06), controlPoint2: CGPoint(x: 9.06, y: 5.74))
        bitmap.addCurve(to: CGPoint(x: 33.33, y: 0), controlPoint1: CGPoint(x: 17.54, y: 1.21), controlPoint2: CGPoint(x: 21.74, y: 0))
        bitmap.close()
        context.saveGState()
        bitmap.usesEvenOddFillRule = true
        context.saveGState()
        // Warning: Image fill is not supported.
        context.restoreGState()
        context.restoreGState()
        
        /// ▪︎ Bitmap (Outline Mask)
        context.saveGState()
        bitmap.addClip()
        
        /// Scrim
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End ▪︎ Bitmap (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawImagesBitmapMedia(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 110, height: 110), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 110, height: 110), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 110, y: resizedFrame.height / 110)
        
        /// Corners
        // Warning: New symbols are not supported.
        
        /// Attribute 2
        // Warning: New symbols are not supported.
        
        /// Attribute 1
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawImages__Empty(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 110, height: 70), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 110, height: 70), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 110, y: resizedFrame.height / 70)
        
        /// Attribute
        let attribute = UIBezierPath()
        attribute.move(to: CGPoint.zero)
        attribute.addLine(to: CGPoint(x: 110, y: 0))
        attribute.addLine(to: CGPoint(x: 110, y: 70))
        attribute.addLine(to: CGPoint(x: 0, y: 70))
        attribute.addLine(to: CGPoint.zero)
        attribute.close()
        context.saveGState()
        context.setAlpha(0)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            attribute.usesEvenOddFillRule = true
            UIColor.black.setFill()
            attribute.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawImages_TimeOverlay(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 110, height: 70), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 110, height: 70), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 110, y: resizedFrame.height / 70)
        
        /// Gradient
        let gradient = UIBezierPath()
        gradient.move(to: CGPoint.zero)
        gradient.addLine(to: CGPoint(x: 110, y: 0))
        gradient.addLine(to: CGPoint(x: 110, y: 60))
        gradient.addCurve(to: CGPoint(x: 100, y: 70), controlPoint1: CGPoint(x: 110, y: 65.52), controlPoint2: CGPoint(x: 105.52, y: 70))
        gradient.addLine(to: CGPoint(x: 10, y: 70))
        gradient.addCurve(to: CGPoint(x: 0, y: 60), controlPoint1: CGPoint(x: 4.48, y: 70), controlPoint2: CGPoint(x: 0, y: 65.52))
        gradient.addLine(to: CGPoint.zero)
        gradient.close()
        context.saveGState()
        gradient.usesEvenOddFillRule = true
        context.saveGState()
        gradient.addClip()
        context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                    UIColor.clear.cgColor,
                    UIColor(white: 0, alpha: 0.12).cgColor,
                ] as CFArray, locations: [0, 1])!,
            start: CGPoint(x: 55, y: 44.55),
            end: CGPoint(x: 55, y: 70),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()
        context.restoreGState()
        
        /// ↳ Time
        let time = NSMutableAttributedString(string: "00:00")
        time.addAttribute(.font, value: UIFont(name: "SFProText-Semibold", size: 13)!, range: NSRange(location: 0, length: time.length))
        time.addAttribute(.kern, value: -0.08, range: NSRange(location: 0, length: time.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .right
            paragraphStyle.maximumLineHeight = 18
            paragraphStyle.minimumLineHeight = 18
            time.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: time.length))
        }
        time.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: time.length))
        do {
            let shadow = NSShadow()
            shadow.shadowColor = UIColor(white: 0, alpha: 0.16)
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 0, y: 1)).applying(baseTransform)
            shadow.shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            shadow.shadowBlurRadius = 2 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            time.addAttribute(.shadow, value: shadow, range: NSRange(location: 0, length: time.length))
        }
        context.saveGState()
        time.draw(in: CGRect(x: 65, y: 46, width: 39, height: 20))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawImages_Time(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 110, height: 70), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 110, height: 70), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 110, y: resizedFrame.height / 70)
        
        /// Time
        do {
            context.saveGState()
            context.translateBy(x: 66, y: 45)
            
            /// Background
            let background = UIBezierPath()
            background.move(to: CGPoint(x: 8.4, y: 0))
            background.addLine(to: CGPoint(x: 29.6, y: 0))
            background.addCurve(to: CGPoint(x: 34.42, y: 0.93), controlPoint1: CGPoint(x: 32.03, y: 0), controlPoint2: CGPoint(x: 33.28, y: 0.32))
            background.addCurve(to: CGPoint(x: 37.07, y: 3.58), controlPoint1: CGPoint(x: 35.56, y: 1.55), controlPoint2: CGPoint(x: 36.45, y: 2.44))
            background.addCurve(to: CGPoint(x: 38, y: 8.4), controlPoint1: CGPoint(x: 37.68, y: 4.72), controlPoint2: CGPoint(x: 38, y: 5.97))
            background.addLine(to: CGPoint(x: 38, y: 10.6))
            background.addCurve(to: CGPoint(x: 37.07, y: 15.42), controlPoint1: CGPoint(x: 38, y: 13.03), controlPoint2: CGPoint(x: 37.68, y: 14.28))
            background.addCurve(to: CGPoint(x: 34.42, y: 18.07), controlPoint1: CGPoint(x: 36.45, y: 16.56), controlPoint2: CGPoint(x: 35.56, y: 17.45))
            background.addCurve(to: CGPoint(x: 29.6, y: 19), controlPoint1: CGPoint(x: 33.28, y: 18.68), controlPoint2: CGPoint(x: 32.03, y: 19))
            background.addLine(to: CGPoint(x: 8.4, y: 19))
            background.addCurve(to: CGPoint(x: 3.58, y: 18.07), controlPoint1: CGPoint(x: 5.97, y: 19), controlPoint2: CGPoint(x: 4.72, y: 18.68))
            background.addCurve(to: CGPoint(x: 0.93, y: 15.42), controlPoint1: CGPoint(x: 2.44, y: 17.45), controlPoint2: CGPoint(x: 1.55, y: 16.56))
            background.addCurve(to: CGPoint(x: 0, y: 10.6), controlPoint1: CGPoint(x: 0.32, y: 14.28), controlPoint2: CGPoint(x: 0, y: 13.03))
            background.addLine(to: CGPoint(x: 0, y: 8.4))
            background.addCurve(to: CGPoint(x: 0.93, y: 3.58), controlPoint1: CGPoint(x: 0, y: 5.97), controlPoint2: CGPoint(x: 0.32, y: 4.72))
            background.addCurve(to: CGPoint(x: 3.58, y: 0.93), controlPoint1: CGPoint(x: 1.55, y: 2.44), controlPoint2: CGPoint(x: 2.44, y: 1.55))
            background.addCurve(to: CGPoint(x: 8.4, y: 0), controlPoint1: CGPoint(x: 4.72, y: 0.32), controlPoint2: CGPoint(x: 5.97, y: 0))
            background.close()
            context.saveGState()
            // Warning: Blur effects are not supported.
            background.usesEvenOddFillRule = true
            context.saveGState()
            context.setBlendMode(.screen)
            context.beginTransparencyLayer(in: background.bounds, auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                background.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            UIColor(white: 0, alpha: 0.3).setFill()
            background.fill()
            context.restoreGState()
            
            /// ↳ Time
            let time = NSMutableAttributedString(string: "01:25")
            time.addAttribute(.font, value: UIFont(name: "SFProText-Medium", size: 10)!, range: NSRange(location: 0, length: time.length))
            time.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: time.length))
            context.saveGState()
            time.draw(at: CGPoint(x: 5, y: 3))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawImages_VolumeIndicator(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 110, height: 70), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 110, height: 70), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 110, y: resizedFrame.height / 70)
        
        /// Volume Indicator
        do {
            context.saveGState()
            context.translateBy(x: 59, y: 39)
            
            /// Background
            let background = UIBezierPath()
            background.move(to: CGPoint(x: 8.97, y: 0))
            background.addLine(to: CGPoint(x: 36.03, y: 0))
            background.addCurve(to: CGPoint(x: 41.42, y: 0.93), controlPoint1: CGPoint(x: 39.15, y: 0), controlPoint2: CGPoint(x: 40.28, y: 0.32))
            background.addCurve(to: CGPoint(x: 44.07, y: 3.58), controlPoint1: CGPoint(x: 42.56, y: 1.55), controlPoint2: CGPoint(x: 43.45, y: 2.44))
            background.addCurve(to: CGPoint(x: 45, y: 8.97), controlPoint1: CGPoint(x: 44.68, y: 4.72), controlPoint2: CGPoint(x: 45, y: 5.85))
            background.addLine(to: CGPoint(x: 45, y: 16.03))
            background.addCurve(to: CGPoint(x: 44.07, y: 21.42), controlPoint1: CGPoint(x: 45, y: 19.15), controlPoint2: CGPoint(x: 44.68, y: 20.28))
            background.addCurve(to: CGPoint(x: 41.42, y: 24.07), controlPoint1: CGPoint(x: 43.45, y: 22.56), controlPoint2: CGPoint(x: 42.56, y: 23.45))
            background.addCurve(to: CGPoint(x: 36.03, y: 25), controlPoint1: CGPoint(x: 40.28, y: 24.68), controlPoint2: CGPoint(x: 39.15, y: 25))
            background.addLine(to: CGPoint(x: 8.97, y: 25))
            background.addCurve(to: CGPoint(x: 3.58, y: 24.07), controlPoint1: CGPoint(x: 5.85, y: 25), controlPoint2: CGPoint(x: 4.72, y: 24.68))
            background.addCurve(to: CGPoint(x: 0.93, y: 21.42), controlPoint1: CGPoint(x: 2.44, y: 23.45), controlPoint2: CGPoint(x: 1.55, y: 22.56))
            background.addCurve(to: CGPoint(x: 0, y: 16.03), controlPoint1: CGPoint(x: 0.32, y: 20.28), controlPoint2: CGPoint(x: 0, y: 19.15))
            background.addLine(to: CGPoint(x: 0, y: 8.97))
            background.addCurve(to: CGPoint(x: 0.93, y: 3.58), controlPoint1: CGPoint(x: 0, y: 5.85), controlPoint2: CGPoint(x: 0.32, y: 4.72))
            background.addCurve(to: CGPoint(x: 3.58, y: 0.93), controlPoint1: CGPoint(x: 1.55, y: 2.44), controlPoint2: CGPoint(x: 2.44, y: 1.55))
            background.addCurve(to: CGPoint(x: 8.97, y: 0), controlPoint1: CGPoint(x: 4.72, y: 0.32), controlPoint2: CGPoint(x: 5.85, y: 0))
            background.close()
            context.saveGState()
            // Warning: Blur effects are not supported.
            background.usesEvenOddFillRule = true
            context.saveGState()
            context.setBlendMode(.screen)
            context.beginTransparencyLayer(in: background.bounds, auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                background.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            UIColor(white: 0, alpha: 0.3).setFill()
            background.fill()
            context.restoreGState()
            
            /// Volume Icon
            let volumeIcon = UIBezierPath()
            volumeIcon.move(to: CGPoint(x: 8, y: 8.6))
            volumeIcon.addLine(to: CGPoint(x: 8, y: 14.04))
            volumeIcon.addCurve(to: CGPoint(x: 7.5, y: 14.54), controlPoint1: CGPoint(x: 8, y: 14.32), controlPoint2: CGPoint(x: 7.78, y: 14.54))
            volumeIcon.addCurve(to: CGPoint(x: 7.13, y: 14.37), controlPoint1: CGPoint(x: 7.36, y: 14.54), controlPoint2: CGPoint(x: 7.22, y: 14.48))
            volumeIcon.addLine(to: CGPoint(x: 4.44, y: 11.35))
            volumeIcon.addLine(to: CGPoint(x: 1.54, y: 11.35))
            volumeIcon.addCurve(to: CGPoint(x: 0.61, y: 11.19), controlPoint1: CGPoint(x: 1, y: 11.35), controlPoint2: CGPoint(x: 0.81, y: 11.3))
            volumeIcon.addCurve(to: CGPoint(x: 0.16, y: 10.74), controlPoint1: CGPoint(x: 0.42, y: 11.09), controlPoint2: CGPoint(x: 0.26, y: 10.94))
            volumeIcon.addCurve(to: CGPoint(x: 0, y: 9.82), controlPoint1: CGPoint(x: 0.06, y: 10.55), controlPoint2: CGPoint(x: 0, y: 10.35))
            volumeIcon.addLine(to: CGPoint(x: 0, y: 6.89))
            volumeIcon.addCurve(to: CGPoint(x: 0.16, y: 5.97), controlPoint1: CGPoint(x: 0, y: 6.36), controlPoint2: CGPoint(x: 0.06, y: 6.16))
            volumeIcon.addCurve(to: CGPoint(x: 0.61, y: 5.52), controlPoint1: CGPoint(x: 0.26, y: 5.77), controlPoint2: CGPoint(x: 0.42, y: 5.62))
            volumeIcon.addCurve(to: CGPoint(x: 1.54, y: 5.35), controlPoint1: CGPoint(x: 0.81, y: 5.41), controlPoint2: CGPoint(x: 1, y: 5.35))
            volumeIcon.addLine(to: CGPoint(x: 2.6, y: 5.35))
            volumeIcon.addLine(to: CGPoint(x: 8, y: 8.6))
            volumeIcon.close()
            volumeIcon.move(to: CGPoint(x: 8, y: 4.51))
            volumeIcon.addLine(to: CGPoint(x: 6.17, y: 3.42))
            volumeIcon.addLine(to: CGPoint(x: 7.13, y: 2.34))
            volumeIcon.addCurve(to: CGPoint(x: 7.83, y: 2.3), controlPoint1: CGPoint(x: 7.31, y: 2.13), controlPoint2: CGPoint(x: 7.63, y: 2.11))
            volumeIcon.addCurve(to: CGPoint(x: 8, y: 2.67), controlPoint1: CGPoint(x: 7.94, y: 2.39), controlPoint2: CGPoint(x: 8, y: 2.53))
            volumeIcon.addLine(to: CGPoint(x: 8, y: 4.51))
            volumeIcon.close()
            volumeIcon.move(to: CGPoint(x: 17.05, y: 14.03))
            volumeIcon.addLine(to: CGPoint(x: 17.93, y: 14.55))
            volumeIcon.addCurve(to: CGPoint(x: 16.57, y: 15.81), controlPoint1: CGPoint(x: 17.52, y: 15.01), controlPoint2: CGPoint(x: 17.06, y: 15.43))
            volumeIcon.addCurve(to: CGPoint(x: 15.87, y: 15.71), controlPoint1: CGPoint(x: 16.35, y: 15.97), controlPoint2: CGPoint(x: 16.03, y: 15.93))
            volumeIcon.addCurve(to: CGPoint(x: 15.96, y: 15.01), controlPoint1: CGPoint(x: 15.7, y: 15.49), controlPoint2: CGPoint(x: 15.74, y: 15.18))
            volumeIcon.addCurve(to: CGPoint(x: 17.05, y: 14.03), controlPoint1: CGPoint(x: 16.35, y: 14.71), controlPoint2: CGPoint(x: 16.72, y: 14.38))
            volumeIcon.close()
            volumeIcon.move(to: CGPoint(x: 18.91, y: 11.06))
            volumeIcon.addCurve(to: CGPoint(x: 19.5, y: 7.85), controlPoint1: CGPoint(x: 19.3, y: 10.06), controlPoint2: CGPoint(x: 19.5, y: 8.97))
            volumeIcon.addCurve(to: CGPoint(x: 16.2, y: 0.89), controlPoint1: CGPoint(x: 19.5, y: 5.12), controlPoint2: CGPoint(x: 18.27, y: 2.59))
            volumeIcon.addCurve(to: CGPoint(x: 16.13, y: 0.18), controlPoint1: CGPoint(x: 15.98, y: 0.71), controlPoint2: CGPoint(x: 15.95, y: 0.4))
            volumeIcon.addCurve(to: CGPoint(x: 16.83, y: 0.11), controlPoint1: CGPoint(x: 16.3, y: -0.03), controlPoint2: CGPoint(x: 16.62, y: -0.06))
            volumeIcon.addCurve(to: CGPoint(x: 20.5, y: 7.85), controlPoint1: CGPoint(x: 19.14, y: 2), controlPoint2: CGPoint(x: 20.5, y: 4.82))
            volumeIcon.addCurve(to: CGPoint(x: 19.78, y: 11.58), controlPoint1: CGPoint(x: 20.5, y: 9.16), controlPoint2: CGPoint(x: 20.25, y: 10.42))
            volumeIcon.addLine(to: CGPoint(x: 18.91, y: 11.06))
            volumeIcon.close()
            volumeIcon.move(to: CGPoint(x: 13.99, y: 12.19))
            volumeIcon.addLine(to: CGPoint(x: 14.86, y: 12.71))
            volumeIcon.addCurve(to: CGPoint(x: 13.48, y: 14.12), controlPoint1: CGPoint(x: 14.46, y: 13.23), controlPoint2: CGPoint(x: 14, y: 13.7))
            volumeIcon.addCurve(to: CGPoint(x: 12.78, y: 14.04), controlPoint1: CGPoint(x: 13.26, y: 14.29), controlPoint2: CGPoint(x: 12.95, y: 14.25))
            volumeIcon.addCurve(to: CGPoint(x: 12.86, y: 13.33), controlPoint1: CGPoint(x: 12.61, y: 13.82), controlPoint2: CGPoint(x: 12.64, y: 13.51))
            volumeIcon.addCurve(to: CGPoint(x: 13.99, y: 12.19), controlPoint1: CGPoint(x: 13.28, y: 13), controlPoint2: CGPoint(x: 13.66, y: 12.61))
            volumeIcon.close()
            volumeIcon.move(to: CGPoint(x: 15.41, y: 8.96))
            volumeIcon.addCurve(to: CGPoint(x: 15.5, y: 7.85), controlPoint1: CGPoint(x: 15.47, y: 8.6), controlPoint2: CGPoint(x: 15.5, y: 8.23))
            volumeIcon.addCurve(to: CGPoint(x: 13.12, y: 2.59), controlPoint1: CGPoint(x: 15.5, y: 5.81), controlPoint2: CGPoint(x: 14.62, y: 3.92))
            volumeIcon.addCurve(to: CGPoint(x: 13.07, y: 1.89), controlPoint1: CGPoint(x: 12.91, y: 2.41), controlPoint2: CGPoint(x: 12.89, y: 2.1))
            volumeIcon.addCurve(to: CGPoint(x: 13.78, y: 1.84), controlPoint1: CGPoint(x: 13.26, y: 1.68), controlPoint2: CGPoint(x: 13.57, y: 1.66))
            volumeIcon.addCurve(to: CGPoint(x: 16.5, y: 7.85), controlPoint1: CGPoint(x: 15.5, y: 3.35), controlPoint2: CGPoint(x: 16.5, y: 5.52))
            volumeIcon.addCurve(to: CGPoint(x: 16.33, y: 9.51), controlPoint1: CGPoint(x: 16.5, y: 8.42), controlPoint2: CGPoint(x: 16.44, y: 8.97))
            volumeIcon.addLine(to: CGPoint(x: 15.41, y: 8.96))
            volumeIcon.close()
            volumeIcon.move(to: CGPoint(x: 10.86, y: 10.31))
            volumeIcon.addLine(to: CGPoint(x: 11.71, y: 10.82))
            volumeIcon.addCurve(to: CGPoint(x: 10.38, y: 12.43), controlPoint1: CGPoint(x: 11.37, y: 11.43), controlPoint2: CGPoint(x: 10.92, y: 11.97))
            volumeIcon.addCurve(to: CGPoint(x: 9.67, y: 12.38), controlPoint1: CGPoint(x: 10.17, y: 12.61), controlPoint2: CGPoint(x: 9.85, y: 12.59))
            volumeIcon.addCurve(to: CGPoint(x: 9.73, y: 11.67), controlPoint1: CGPoint(x: 9.49, y: 12.17), controlPoint2: CGPoint(x: 9.52, y: 11.85))
            volumeIcon.addCurve(to: CGPoint(x: 10.86, y: 10.31), controlPoint1: CGPoint(x: 10.19, y: 11.28), controlPoint2: CGPoint(x: 10.57, y: 10.82))
            volumeIcon.close()
            volumeIcon.move(to: CGPoint(x: 11.32, y: 6.5))
            volumeIcon.addCurve(to: CGPoint(x: 10.07, y: 4.35), controlPoint1: CGPoint(x: 11.09, y: 5.7), controlPoint2: CGPoint(x: 10.66, y: 4.96))
            volumeIcon.addCurve(to: CGPoint(x: 10.08, y: 3.65), controlPoint1: CGPoint(x: 9.88, y: 4.16), controlPoint2: CGPoint(x: 9.88, y: 3.84))
            volumeIcon.addCurve(to: CGPoint(x: 10.78, y: 3.65), controlPoint1: CGPoint(x: 10.27, y: 3.45), controlPoint2: CGPoint(x: 10.59, y: 3.46))
            volumeIcon.addCurve(to: CGPoint(x: 12.46, y: 7.19), controlPoint1: CGPoint(x: 11.72, y: 4.61), controlPoint2: CGPoint(x: 12.32, y: 5.85))
            volumeIcon.addLine(to: CGPoint(x: 11.32, y: 6.5))
            volumeIcon.close()
            volumeIcon.move(to: CGPoint(x: 0.61, y: 3))
            volumeIcon.addCurve(to: CGPoint(x: 0.36, y: 1.97), controlPoint1: CGPoint(x: 0.26, y: 2.78), controlPoint2: CGPoint(x: 0.14, y: 2.32))
            volumeIcon.addCurve(to: CGPoint(x: 1.39, y: 1.71), controlPoint1: CGPoint(x: 0.57, y: 1.61), controlPoint2: CGPoint(x: 1.03, y: 1.5))
            volumeIcon.addLine(to: CGPoint(x: 21.39, y: 13.71))
            volumeIcon.addCurve(to: CGPoint(x: 21.64, y: 14.74), controlPoint1: CGPoint(x: 21.74, y: 13.92), controlPoint2: CGPoint(x: 21.86, y: 14.39))
            volumeIcon.addCurve(to: CGPoint(x: 20.61, y: 15), controlPoint1: CGPoint(x: 21.43, y: 15.1), controlPoint2: CGPoint(x: 20.97, y: 15.21))
            volumeIcon.addLine(to: CGPoint(x: 0.61, y: 3))
            volumeIcon.close()
            context.saveGState()
            context.translateBy(x: 11, y: 4.65)
            volumeIcon.usesEvenOddFillRule = true
            context.saveGState()
            context.setBlendMode(.overlay)
            context.beginTransparencyLayer(in: volumeIcon.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 1, alpha: 0.8).setFill()
                volumeIcon.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            UIColor(white: 1, alpha: 0.5).setFill()
            volumeIcon.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawImages_PlayButtton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 110, height: 70), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 110, height: 70), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 110, y: resizedFrame.height / 70)
        
        /// Button
        do {
            context.saveGState()
            context.translateBy(x: 25, y: 5)
            
            /// Oval
            let oval = UIBezierPath()
            oval.move(to: CGPoint(x: 30, y: 60))
            oval.addCurve(to: CGPoint(x: 60, y: 30), controlPoint1: CGPoint(x: 46.57, y: 60), controlPoint2: CGPoint(x: 60, y: 46.57))
            oval.addCurve(to: CGPoint(x: 30, y: 0), controlPoint1: CGPoint(x: 60, y: 13.43), controlPoint2: CGPoint(x: 46.57, y: 0))
            oval.addCurve(to: CGPoint(x: 0, y: 30), controlPoint1: CGPoint(x: 13.43, y: 0), controlPoint2: CGPoint(x: 0, y: 13.43))
            oval.addCurve(to: CGPoint(x: 30, y: 60), controlPoint1: CGPoint(x: 0, y: 46.57), controlPoint2: CGPoint(x: 13.43, y: 60))
            oval.close()
            context.saveGState()
            // Warning: Blur effects are not supported.
            oval.usesEvenOddFillRule = true
            context.saveGState()
            context.setBlendMode(.screen)
            context.beginTransparencyLayer(in: oval.bounds, auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                oval.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            UIColor(white: 0, alpha: 0.3).setFill()
            oval.fill()
            context.restoreGState()
            
            /// Icon
            let icon = UIBezierPath()
            icon.move(to: CGPoint(x: 19.21, y: 12.64))
            icon.addCurve(to: CGPoint(x: 19.21, y: 10.89), controlPoint1: CGPoint(x: 20.06, y: 12.16), controlPoint2: CGPoint(x: 20.05, y: 11.38))
            icon.addLine(to: CGPoint(x: 1.53, y: 0.21))
            icon.addCurve(to: CGPoint(x: 0, y: 1.08), controlPoint1: CGPoint(x: 0.7, y: -0.28), controlPoint2: CGPoint(x: 0.01, y: 0.12))
            icon.addLine(to: CGPoint(x: 0, y: 22.19))
            icon.addCurve(to: CGPoint(x: 1.5, y: 23.08), controlPoint1: CGPoint(x: -0.01, y: 23.14), controlPoint2: CGPoint(x: 0.67, y: 23.55))
            icon.addLine(to: CGPoint(x: 19.21, y: 12.64))
            icon.close()
            context.saveGState()
            context.setAlpha(0.9)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 23, y: 19)
                icon.usesEvenOddFillRule = true
                UIColor(hue: 0.274, saturation: 0, brightness: 0.996, alpha: 1).setFill()
                icon.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawKeyboardsDefault(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 216), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 216), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 216)
        
        /// Background
        // Warning: New symbols are not supported.
        
        /// Keys
        // Warning: New symbols are not supported.
        
        /// First Row
        do {
            context.saveGState()
            context.translateBy(x: 3, y: 9)
            
            /// Background
            let background2 = UIBezierPath()
            background2.move(to: CGPoint(x: 5.5, y: 42))
            background2.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background2.addLine(to: CGPoint(x: 0, y: 5.5))
            background2.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background2.addLine(to: CGPoint(x: 26.5, y: 0))
            background2.addCurve(to: CGPoint(x: 32, y: 5.5), controlPoint1: CGPoint(x: 29.84, y: 0), controlPoint2: CGPoint(x: 32, y: 2.16))
            background2.addLine(to: CGPoint(x: 32, y: 36.5))
            background2.addCurve(to: CGPoint(x: 26.5, y: 42), controlPoint1: CGPoint(x: 32, y: 39.84), controlPoint2: CGPoint(x: 29.84, y: 42))
            background2.addLine(to: CGPoint(x: 5.5, y: 42))
            background2.close()
            context.saveGState()
            context.translateBy(x: 337, y: 0)
            background2.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background2.cgPath)
            context.addRect(background2.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -33, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 33, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background2.fill()
            context.restoreGState()
            background2.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background2.fill()
            context.restoreGState()
            
            /// Background
            let background3 = UIBezierPath()
            background3.move(to: CGPoint(x: 5.5, y: 42))
            background3.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background3.addLine(to: CGPoint(x: 0, y: 5.5))
            background3.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background3.addLine(to: CGPoint(x: 26.5, y: 0))
            background3.addCurve(to: CGPoint(x: 32, y: 5.5), controlPoint1: CGPoint(x: 29.84, y: 0), controlPoint2: CGPoint(x: 32, y: 2.16))
            background3.addLine(to: CGPoint(x: 32, y: 36.5))
            background3.addCurve(to: CGPoint(x: 26.5, y: 42), controlPoint1: CGPoint(x: 32, y: 39.84), controlPoint2: CGPoint(x: 29.84, y: 42))
            background3.addLine(to: CGPoint(x: 5.5, y: 42))
            background3.close()
            context.saveGState()
            context.translateBy(x: 300, y: 0)
            background3.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background3.cgPath)
            context.addRect(background3.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -33, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 33, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background3.fill()
            context.restoreGState()
            background3.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background3.fill()
            context.restoreGState()
            
            /// Background
            let background4 = UIBezierPath()
            background4.move(to: CGPoint(x: 5.5, y: 42))
            background4.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background4.addLine(to: CGPoint(x: 0, y: 5.5))
            background4.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background4.addLine(to: CGPoint(x: 26.5, y: 0))
            background4.addCurve(to: CGPoint(x: 32, y: 5.5), controlPoint1: CGPoint(x: 29.84, y: 0), controlPoint2: CGPoint(x: 32, y: 2.16))
            background4.addLine(to: CGPoint(x: 32, y: 36.5))
            background4.addCurve(to: CGPoint(x: 26.5, y: 42), controlPoint1: CGPoint(x: 32, y: 39.84), controlPoint2: CGPoint(x: 29.84, y: 42))
            background4.addLine(to: CGPoint(x: 5.5, y: 42))
            background4.close()
            context.saveGState()
            context.translateBy(x: 262, y: 0)
            background4.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background4.cgPath)
            context.addRect(background4.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -33, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 33, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background4.fill()
            context.restoreGState()
            background4.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background4.fill()
            context.restoreGState()
            
            /// Background
            let background5 = UIBezierPath()
            background5.move(to: CGPoint(x: 5.5, y: 42))
            background5.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background5.addLine(to: CGPoint(x: 0, y: 5.5))
            background5.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background5.addLine(to: CGPoint(x: 26.5, y: 0))
            background5.addCurve(to: CGPoint(x: 32, y: 5.5), controlPoint1: CGPoint(x: 29.84, y: 0), controlPoint2: CGPoint(x: 32, y: 2.16))
            background5.addLine(to: CGPoint(x: 32, y: 36.5))
            background5.addCurve(to: CGPoint(x: 26.5, y: 42), controlPoint1: CGPoint(x: 32, y: 39.84), controlPoint2: CGPoint(x: 29.84, y: 42))
            background5.addLine(to: CGPoint(x: 5.5, y: 42))
            background5.close()
            context.saveGState()
            context.translateBy(x: 225, y: 0)
            background5.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background5.cgPath)
            context.addRect(background5.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -33, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 33, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background5.fill()
            context.restoreGState()
            background5.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background5.fill()
            context.restoreGState()
            
            /// Background
            let background6 = UIBezierPath()
            background6.move(to: CGPoint(x: 2.41, y: 42))
            background6.addCurve(to: CGPoint(x: 0, y: 37), controlPoint1: CGPoint(x: 0.89, y: 40.98), controlPoint2: CGPoint(x: 0, y: 39.23))
            background6.addLine(to: CGPoint(x: 0, y: 6))
            background6.addCurve(to: CGPoint(x: 6, y: 0), controlPoint1: CGPoint(x: 0, y: 2.36), controlPoint2: CGPoint(x: 2.36, y: 0))
            background6.addLine(to: CGPoint(x: 27, y: 0))
            background6.addCurve(to: CGPoint(x: 32, y: 2.41), controlPoint1: CGPoint(x: 29.23, y: 0), controlPoint2: CGPoint(x: 30.98, y: 0.89))
            background6.addLine(to: CGPoint(x: 32, y: 40.59))
            background6.addCurve(to: CGPoint(x: 30.59, y: 42), controlPoint1: CGPoint(x: 31.62, y: 41.15), controlPoint2: CGPoint(x: 31.15, y: 41.62))
            background6.addLine(to: CGPoint(x: 2.41, y: 42))
            background6.close()
            context.saveGState()
            context.translateBy(x: 187, y: 0)
            background6.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background6.cgPath)
            context.addRect(background6.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -33, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 33, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background6.fill()
            context.restoreGState()
            background6.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background6.fill()
            context.restoreGState()
            
            /// Background
            let background7 = UIBezierPath()
            background7.move(to: CGPoint(x: 5.5, y: 42))
            background7.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background7.addLine(to: CGPoint(x: 0, y: 5.5))
            background7.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background7.addLine(to: CGPoint(x: 26.5, y: 0))
            background7.addCurve(to: CGPoint(x: 32, y: 5.5), controlPoint1: CGPoint(x: 29.84, y: 0), controlPoint2: CGPoint(x: 32, y: 2.16))
            background7.addLine(to: CGPoint(x: 32, y: 36.5))
            background7.addCurve(to: CGPoint(x: 26.5, y: 42), controlPoint1: CGPoint(x: 32, y: 39.84), controlPoint2: CGPoint(x: 29.84, y: 42))
            background7.addLine(to: CGPoint(x: 5.5, y: 42))
            background7.close()
            context.saveGState()
            context.translateBy(x: 150, y: 0)
            background7.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background7.cgPath)
            context.addRect(background7.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -33, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 33, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background7.fill()
            context.restoreGState()
            background7.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background7.fill()
            context.restoreGState()
            
            /// Background
            let background8 = UIBezierPath()
            background8.move(to: CGPoint(x: 5.5, y: 42))
            background8.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background8.addLine(to: CGPoint(x: 0, y: 5.5))
            background8.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background8.addLine(to: CGPoint(x: 26.5, y: 0))
            background8.addCurve(to: CGPoint(x: 32, y: 5.5), controlPoint1: CGPoint(x: 29.84, y: 0), controlPoint2: CGPoint(x: 32, y: 2.16))
            background8.addLine(to: CGPoint(x: 32, y: 36.5))
            background8.addCurve(to: CGPoint(x: 26.5, y: 42), controlPoint1: CGPoint(x: 32, y: 39.84), controlPoint2: CGPoint(x: 29.84, y: 42))
            background8.addLine(to: CGPoint(x: 5.5, y: 42))
            background8.close()
            context.saveGState()
            context.translateBy(x: 112, y: 0)
            background8.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background8.cgPath)
            context.addRect(background8.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -33, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 33, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background8.fill()
            context.restoreGState()
            background8.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background8.fill()
            context.restoreGState()
            
            /// Background
            let background9 = UIBezierPath()
            background9.move(to: CGPoint(x: 5.5, y: 42))
            background9.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background9.addLine(to: CGPoint(x: 0, y: 5.5))
            background9.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background9.addLine(to: CGPoint(x: 26.5, y: 0))
            background9.addCurve(to: CGPoint(x: 32, y: 5.5), controlPoint1: CGPoint(x: 29.84, y: 0), controlPoint2: CGPoint(x: 32, y: 2.16))
            background9.addLine(to: CGPoint(x: 32, y: 36.5))
            background9.addCurve(to: CGPoint(x: 26.5, y: 42), controlPoint1: CGPoint(x: 32, y: 39.84), controlPoint2: CGPoint(x: 29.84, y: 42))
            background9.addLine(to: CGPoint(x: 5.5, y: 42))
            background9.close()
            context.saveGState()
            context.translateBy(x: 75, y: 0)
            background9.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background9.cgPath)
            context.addRect(background9.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -33, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 33, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background9.fill()
            context.restoreGState()
            background9.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background9.fill()
            context.restoreGState()
            
            /// Background
            let background10 = UIBezierPath()
            background10.move(to: CGPoint(x: 5.5, y: 42))
            background10.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background10.addLine(to: CGPoint(x: 0, y: 5.5))
            background10.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background10.addLine(to: CGPoint(x: 26.5, y: 0))
            background10.addCurve(to: CGPoint(x: 32, y: 5.5), controlPoint1: CGPoint(x: 29.84, y: 0), controlPoint2: CGPoint(x: 32, y: 2.16))
            background10.addLine(to: CGPoint(x: 32, y: 36.5))
            background10.addCurve(to: CGPoint(x: 26.5, y: 42), controlPoint1: CGPoint(x: 32, y: 39.84), controlPoint2: CGPoint(x: 29.84, y: 42))
            background10.addLine(to: CGPoint(x: 5.5, y: 42))
            background10.close()
            context.saveGState()
            context.translateBy(x: 37, y: 0)
            background10.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background10.cgPath)
            context.addRect(background10.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -33, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 33, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background10.fill()
            context.restoreGState()
            background10.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background10.fill()
            context.restoreGState()
            
            /// Background
            let background11 = UIBezierPath()
            background11.move(to: CGPoint(x: 5.5, y: 42))
            background11.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background11.addLine(to: CGPoint(x: 0, y: 5.5))
            background11.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background11.addLine(to: CGPoint(x: 26.5, y: 0))
            background11.addCurve(to: CGPoint(x: 32, y: 5.5), controlPoint1: CGPoint(x: 29.84, y: 0), controlPoint2: CGPoint(x: 32, y: 2.16))
            background11.addLine(to: CGPoint(x: 32, y: 36.5))
            background11.addCurve(to: CGPoint(x: 26.5, y: 42), controlPoint1: CGPoint(x: 32, y: 39.84), controlPoint2: CGPoint(x: 29.84, y: 42))
            background11.addLine(to: CGPoint(x: 5.5, y: 42))
            background11.close()
            context.saveGState()
            background11.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background11.cgPath)
            context.addRect(background11.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -33, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 33, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background11.fill()
            context.restoreGState()
            background11.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background11.fill()
            context.restoreGState()
            
            /// P
            let p = NSMutableAttributedString(string: "P")
            p.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: p.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                p.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: p.length))
            }
            p.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: p.length))
            context.saveGState()
            p.draw(at: CGPoint(x: 346, y: 7))
            context.restoreGState()
            
            /// O
            let o = NSMutableAttributedString(string: "O")
            o.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: o.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                o.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: o.length))
            }
            o.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: o.length))
            context.saveGState()
            o.draw(at: CGPoint(x: 307.5, y: 7))
            context.restoreGState()
            
            /// I
            let i = NSMutableAttributedString(string: "I")
            i.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: i.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                i.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: i.length))
            }
            i.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: i.length))
            context.saveGState()
            i.draw(at: CGPoint(x: 275, y: 7))
            context.restoreGState()
            
            /// U
            let u = NSMutableAttributedString(string: "U")
            u.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: u.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                u.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: u.length))
            }
            u.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: u.length))
            context.saveGState()
            u.draw(at: CGPoint(x: 232.5, y: 7))
            context.restoreGState()
            
            /// Y
            let y = NSMutableAttributedString(string: "Y")
            y.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: y.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                y.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: y.length))
            }
            y.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: y.length))
            context.saveGState()
            y.draw(at: CGPoint(x: 195.5, y: 7))
            context.restoreGState()
            
            /// T
            let t = NSMutableAttributedString(string: "T")
            t.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: t.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                t.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: t.length))
            }
            t.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: t.length))
            context.saveGState()
            t.draw(at: CGPoint(x: 159, y: 7))
            context.restoreGState()
            
            /// R
            let r = NSMutableAttributedString(string: "R")
            r.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: r.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                r.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: r.length))
            }
            r.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: r.length))
            context.saveGState()
            r.draw(at: CGPoint(x: 121, y: 7))
            context.restoreGState()
            
            /// E
            let e = NSMutableAttributedString(string: "E")
            e.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: e.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                e.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: e.length))
            }
            e.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: e.length))
            context.saveGState()
            e.draw(at: CGPoint(x: 84.5, y: 7))
            context.restoreGState()
            
            /// W
            let w = NSMutableAttributedString(string: "W")
            w.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: w.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                w.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: w.length))
            }
            w.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: w.length))
            context.saveGState()
            w.draw(at: CGPoint(x: 42, y: 7))
            context.restoreGState()
            
            /// Q
            let q = NSMutableAttributedString(string: "Q")
            q.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: q.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                q.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: q.length))
            }
            q.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: q.length))
            context.saveGState()
            q.draw(at: CGPoint(x: 7.5, y: 7))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Second Row
        do {
            context.saveGState()
            context.translateBy(x: 21, y: 63)
            
            /// Background
            let background12 = UIBezierPath()
            background12.move(to: CGPoint(x: 5.5, y: 42))
            background12.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background12.addLine(to: CGPoint(x: 0, y: 5.5))
            background12.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background12.addLine(to: CGPoint(x: 26.5, y: 0))
            background12.addCurve(to: CGPoint(x: 32, y: 5.5), controlPoint1: CGPoint(x: 29.84, y: 0), controlPoint2: CGPoint(x: 32, y: 2.16))
            background12.addLine(to: CGPoint(x: 32, y: 36.5))
            background12.addCurve(to: CGPoint(x: 26.5, y: 42), controlPoint1: CGPoint(x: 32, y: 39.84), controlPoint2: CGPoint(x: 29.84, y: 42))
            background12.addLine(to: CGPoint(x: 5.5, y: 42))
            background12.close()
            context.saveGState()
            context.translateBy(x: 301, y: 0)
            background12.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background12.cgPath)
            context.addRect(background12.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -33, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 33, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background12.fill()
            context.restoreGState()
            background12.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background12.fill()
            context.restoreGState()
            
            /// Background
            let background13 = UIBezierPath()
            background13.move(to: CGPoint(x: 5.5, y: 42))
            background13.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background13.addLine(to: CGPoint(x: 0, y: 5.5))
            background13.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background13.addLine(to: CGPoint(x: 26.5, y: 0))
            background13.addCurve(to: CGPoint(x: 32, y: 5.5), controlPoint1: CGPoint(x: 29.84, y: 0), controlPoint2: CGPoint(x: 32, y: 2.16))
            background13.addLine(to: CGPoint(x: 32, y: 36.5))
            background13.addCurve(to: CGPoint(x: 26.5, y: 42), controlPoint1: CGPoint(x: 32, y: 39.84), controlPoint2: CGPoint(x: 29.84, y: 42))
            background13.addLine(to: CGPoint(x: 5.5, y: 42))
            background13.close()
            context.saveGState()
            context.translateBy(x: 263, y: 0)
            background13.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background13.cgPath)
            context.addRect(background13.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -33, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 33, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background13.fill()
            context.restoreGState()
            background13.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background13.fill()
            context.restoreGState()
            
            /// Background
            let background14 = UIBezierPath()
            background14.move(to: CGPoint(x: 5.5, y: 42))
            background14.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background14.addLine(to: CGPoint(x: 0, y: 5.5))
            background14.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background14.addLine(to: CGPoint(x: 26.5, y: 0))
            background14.addCurve(to: CGPoint(x: 32, y: 5.5), controlPoint1: CGPoint(x: 29.84, y: 0), controlPoint2: CGPoint(x: 32, y: 2.16))
            background14.addLine(to: CGPoint(x: 32, y: 36.5))
            background14.addCurve(to: CGPoint(x: 26.5, y: 42), controlPoint1: CGPoint(x: 32, y: 39.84), controlPoint2: CGPoint(x: 29.84, y: 42))
            background14.addLine(to: CGPoint(x: 5.5, y: 42))
            background14.close()
            context.saveGState()
            context.translateBy(x: 226, y: 0)
            background14.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background14.cgPath)
            context.addRect(background14.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -33, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 33, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background14.fill()
            context.restoreGState()
            background14.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background14.fill()
            context.restoreGState()
            
            /// Background
            let background15 = UIBezierPath()
            background15.move(to: CGPoint(x: 5.5, y: 42))
            background15.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background15.addLine(to: CGPoint(x: 0, y: 5.5))
            background15.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background15.addLine(to: CGPoint(x: 26.5, y: 0))
            background15.addCurve(to: CGPoint(x: 32, y: 5.5), controlPoint1: CGPoint(x: 29.84, y: 0), controlPoint2: CGPoint(x: 32, y: 2.16))
            background15.addLine(to: CGPoint(x: 32, y: 36.5))
            background15.addCurve(to: CGPoint(x: 26.5, y: 42), controlPoint1: CGPoint(x: 32, y: 39.84), controlPoint2: CGPoint(x: 29.84, y: 42))
            background15.addLine(to: CGPoint(x: 5.5, y: 42))
            background15.close()
            context.saveGState()
            context.translateBy(x: 188, y: 0)
            background15.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background15.cgPath)
            context.addRect(background15.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -33, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 33, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background15.fill()
            context.restoreGState()
            background15.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background15.fill()
            context.restoreGState()
            
            /// Background
            let background16 = UIBezierPath()
            background16.move(to: CGPoint(x: 5.5, y: 42))
            background16.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background16.addLine(to: CGPoint(x: 0, y: 5.5))
            background16.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background16.addLine(to: CGPoint(x: 26.5, y: 0))
            background16.addCurve(to: CGPoint(x: 32, y: 5.5), controlPoint1: CGPoint(x: 29.84, y: 0), controlPoint2: CGPoint(x: 32, y: 2.16))
            background16.addLine(to: CGPoint(x: 32, y: 36.5))
            background16.addCurve(to: CGPoint(x: 26.5, y: 42), controlPoint1: CGPoint(x: 32, y: 39.84), controlPoint2: CGPoint(x: 29.84, y: 42))
            background16.addLine(to: CGPoint(x: 5.5, y: 42))
            background16.close()
            context.saveGState()
            context.translateBy(x: 151, y: 0)
            background16.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background16.cgPath)
            context.addRect(background16.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -33, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 33, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background16.fill()
            context.restoreGState()
            background16.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background16.fill()
            context.restoreGState()
            
            /// Background
            let background17 = UIBezierPath()
            background17.move(to: CGPoint(x: 5.5, y: 42))
            background17.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background17.addLine(to: CGPoint(x: 0, y: 5.5))
            background17.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background17.addLine(to: CGPoint(x: 26.5, y: 0))
            background17.addCurve(to: CGPoint(x: 32, y: 5.5), controlPoint1: CGPoint(x: 29.84, y: 0), controlPoint2: CGPoint(x: 32, y: 2.16))
            background17.addLine(to: CGPoint(x: 32, y: 36.5))
            background17.addCurve(to: CGPoint(x: 26.5, y: 42), controlPoint1: CGPoint(x: 32, y: 39.84), controlPoint2: CGPoint(x: 29.84, y: 42))
            background17.addLine(to: CGPoint(x: 5.5, y: 42))
            background17.close()
            context.saveGState()
            context.translateBy(x: 113, y: 0)
            background17.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background17.cgPath)
            context.addRect(background17.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -33, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 33, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background17.fill()
            context.restoreGState()
            background17.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background17.fill()
            context.restoreGState()
            
            /// Background
            let background18 = UIBezierPath()
            background18.move(to: CGPoint(x: 5.5, y: 42))
            background18.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background18.addLine(to: CGPoint(x: 0, y: 5.5))
            background18.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background18.addLine(to: CGPoint(x: 26.5, y: 0))
            background18.addCurve(to: CGPoint(x: 32, y: 5.5), controlPoint1: CGPoint(x: 29.84, y: 0), controlPoint2: CGPoint(x: 32, y: 2.16))
            background18.addLine(to: CGPoint(x: 32, y: 36.5))
            background18.addCurve(to: CGPoint(x: 26.5, y: 42), controlPoint1: CGPoint(x: 32, y: 39.84), controlPoint2: CGPoint(x: 29.84, y: 42))
            background18.addLine(to: CGPoint(x: 5.5, y: 42))
            background18.close()
            context.saveGState()
            context.translateBy(x: 75, y: 0)
            background18.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background18.cgPath)
            context.addRect(background18.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -33, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 33, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background18.fill()
            context.restoreGState()
            background18.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background18.fill()
            context.restoreGState()
            
            /// Background
            let background19 = UIBezierPath()
            background19.move(to: CGPoint(x: 5.5, y: 42))
            background19.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background19.addLine(to: CGPoint(x: 0, y: 5.5))
            background19.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background19.addLine(to: CGPoint(x: 26.5, y: 0))
            background19.addCurve(to: CGPoint(x: 32, y: 5.5), controlPoint1: CGPoint(x: 29.84, y: 0), controlPoint2: CGPoint(x: 32, y: 2.16))
            background19.addLine(to: CGPoint(x: 32, y: 36.5))
            background19.addCurve(to: CGPoint(x: 26.5, y: 42), controlPoint1: CGPoint(x: 32, y: 39.84), controlPoint2: CGPoint(x: 29.84, y: 42))
            background19.addLine(to: CGPoint(x: 5.5, y: 42))
            background19.close()
            context.saveGState()
            context.translateBy(x: 38, y: 0)
            background19.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background19.cgPath)
            context.addRect(background19.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -33, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 33, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background19.fill()
            context.restoreGState()
            background19.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background19.fill()
            context.restoreGState()
            
            /// Background
            let background20 = UIBezierPath()
            background20.move(to: CGPoint(x: 5.5, y: 42))
            background20.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background20.addLine(to: CGPoint(x: 0, y: 5.5))
            background20.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background20.addLine(to: CGPoint(x: 26.5, y: 0))
            background20.addCurve(to: CGPoint(x: 32, y: 5.5), controlPoint1: CGPoint(x: 29.84, y: 0), controlPoint2: CGPoint(x: 32, y: 2.16))
            background20.addLine(to: CGPoint(x: 32, y: 36.5))
            background20.addCurve(to: CGPoint(x: 26.5, y: 42), controlPoint1: CGPoint(x: 32, y: 39.84), controlPoint2: CGPoint(x: 29.84, y: 42))
            background20.addLine(to: CGPoint(x: 5.5, y: 42))
            background20.close()
            context.saveGState()
            background20.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background20.cgPath)
            context.addRect(background20.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -33, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 33, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background20.fill()
            context.restoreGState()
            background20.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background20.fill()
            context.restoreGState()
            
            /// L
            let l = NSMutableAttributedString(string: "L")
            l.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: l.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                l.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: l.length))
            }
            l.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: l.length))
            context.saveGState()
            l.draw(at: CGPoint(x: 310.5, y: 7.25))
            context.restoreGState()
            
            /// K
            let k = NSMutableAttributedString(string: "K")
            k.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: k.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                k.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: k.length))
            }
            k.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: k.length))
            context.saveGState()
            k.draw(at: CGPoint(x: 271.5, y: 7.25))
            context.restoreGState()
            
            /// J
            let j = NSMutableAttributedString(string: "J")
            j.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: j.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                j.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: j.length))
            }
            j.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: j.length))
            context.saveGState()
            j.draw(at: CGPoint(x: 236, y: 7.25))
            context.restoreGState()
            
            /// H
            let h = NSMutableAttributedString(string: "H")
            h.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: h.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                h.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: h.length))
            }
            h.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: h.length))
            context.saveGState()
            h.draw(at: CGPoint(x: 195.5, y: 7.25))
            context.restoreGState()
            
            /// G
            let g = NSMutableAttributedString(string: "G")
            g.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: g.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                g.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: g.length))
            }
            g.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: g.length))
            context.saveGState()
            g.draw(at: CGPoint(x: 158.5, y: 7.25))
            context.restoreGState()
            
            /// F
            let f = NSMutableAttributedString(string: "F")
            f.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: f.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                f.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: f.length))
            }
            f.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: f.length))
            context.saveGState()
            f.draw(at: CGPoint(x: 122.5, y: 7.25))
            context.restoreGState()
            
            /// D
            let d = NSMutableAttributedString(string: "D")
            d.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: d.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                d.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: d.length))
            }
            d.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: d.length))
            context.saveGState()
            d.draw(at: CGPoint(x: 83, y: 7.25))
            context.restoreGState()
            
            /// S
            let s = NSMutableAttributedString(string: "S")
            s.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: s.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                s.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: s.length))
            }
            s.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: s.length))
            context.saveGState()
            s.draw(at: CGPoint(x: 47, y: 7.25))
            context.restoreGState()
            
            /// A
            let a = NSMutableAttributedString(string: "A")
            a.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: a.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                a.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: a.length))
            }
            a.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: a.length))
            context.saveGState()
            a.draw(at: CGPoint(x: 8.5, y: 7.25))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Third Row
        do {
            context.saveGState()
            context.translateBy(x: 3, y: 117)
            
            /// Background
            let background21 = UIBezierPath()
            background21.move(to: CGPoint(x: 5.5, y: 42))
            background21.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background21.addLine(to: CGPoint(x: 0, y: 5.5))
            background21.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background21.addLine(to: CGPoint(x: 26.5, y: 0))
            background21.addCurve(to: CGPoint(x: 32, y: 5.5), controlPoint1: CGPoint(x: 29.84, y: 0), controlPoint2: CGPoint(x: 32, y: 2.16))
            background21.addLine(to: CGPoint(x: 32, y: 36.5))
            background21.addCurve(to: CGPoint(x: 26.5, y: 42), controlPoint1: CGPoint(x: 32, y: 39.84), controlPoint2: CGPoint(x: 29.84, y: 42))
            background21.addLine(to: CGPoint(x: 5.5, y: 42))
            background21.close()
            context.saveGState()
            context.translateBy(x: 281, y: 0)
            background21.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background21.cgPath)
            context.addRect(background21.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -33, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 33, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background21.fill()
            context.restoreGState()
            background21.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background21.fill()
            context.restoreGState()
            
            /// Background
            let background22 = UIBezierPath()
            background22.move(to: CGPoint(x: 5.5, y: 42))
            background22.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background22.addLine(to: CGPoint(x: 0, y: 5.5))
            background22.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background22.addLine(to: CGPoint(x: 26.5, y: 0))
            background22.addCurve(to: CGPoint(x: 32, y: 5.5), controlPoint1: CGPoint(x: 29.84, y: 0), controlPoint2: CGPoint(x: 32, y: 2.16))
            background22.addLine(to: CGPoint(x: 32, y: 36.5))
            background22.addCurve(to: CGPoint(x: 26.5, y: 42), controlPoint1: CGPoint(x: 32, y: 39.84), controlPoint2: CGPoint(x: 29.84, y: 42))
            background22.addLine(to: CGPoint(x: 5.5, y: 42))
            background22.close()
            context.saveGState()
            context.translateBy(x: 244, y: 0)
            background22.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background22.cgPath)
            context.addRect(background22.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -33, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 33, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background22.fill()
            context.restoreGState()
            background22.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background22.fill()
            context.restoreGState()
            
            /// Background
            let background23 = UIBezierPath()
            background23.move(to: CGPoint(x: 5.5, y: 42))
            background23.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background23.addLine(to: CGPoint(x: 0, y: 5.5))
            background23.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background23.addLine(to: CGPoint(x: 26.5, y: 0))
            background23.addCurve(to: CGPoint(x: 32, y: 5.5), controlPoint1: CGPoint(x: 29.84, y: 0), controlPoint2: CGPoint(x: 32, y: 2.16))
            background23.addLine(to: CGPoint(x: 32, y: 36.5))
            background23.addCurve(to: CGPoint(x: 26.5, y: 42), controlPoint1: CGPoint(x: 32, y: 39.84), controlPoint2: CGPoint(x: 29.84, y: 42))
            background23.addLine(to: CGPoint(x: 5.5, y: 42))
            background23.close()
            context.saveGState()
            context.translateBy(x: 206, y: 0)
            background23.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background23.cgPath)
            context.addRect(background23.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -33, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 33, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background23.fill()
            context.restoreGState()
            background23.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background23.fill()
            context.restoreGState()
            
            /// Background
            let background24 = UIBezierPath()
            background24.move(to: CGPoint(x: 5.5, y: 42))
            background24.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background24.addLine(to: CGPoint(x: 0, y: 5.5))
            background24.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background24.addLine(to: CGPoint(x: 26.5, y: 0))
            background24.addCurve(to: CGPoint(x: 32, y: 5.5), controlPoint1: CGPoint(x: 29.84, y: 0), controlPoint2: CGPoint(x: 32, y: 2.16))
            background24.addLine(to: CGPoint(x: 32, y: 36.5))
            background24.addCurve(to: CGPoint(x: 26.5, y: 42), controlPoint1: CGPoint(x: 32, y: 39.84), controlPoint2: CGPoint(x: 29.84, y: 42))
            background24.addLine(to: CGPoint(x: 5.5, y: 42))
            background24.close()
            context.saveGState()
            context.translateBy(x: 169, y: 0)
            background24.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background24.cgPath)
            context.addRect(background24.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -33, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 33, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background24.fill()
            context.restoreGState()
            background24.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background24.fill()
            context.restoreGState()
            
            /// Background
            let background25 = UIBezierPath()
            background25.move(to: CGPoint(x: 5.5, y: 42))
            background25.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background25.addLine(to: CGPoint(x: 0, y: 5.5))
            background25.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background25.addLine(to: CGPoint(x: 26.5, y: 0))
            background25.addCurve(to: CGPoint(x: 32, y: 5.5), controlPoint1: CGPoint(x: 29.84, y: 0), controlPoint2: CGPoint(x: 32, y: 2.16))
            background25.addLine(to: CGPoint(x: 32, y: 36.5))
            background25.addCurve(to: CGPoint(x: 26.5, y: 42), controlPoint1: CGPoint(x: 32, y: 39.84), controlPoint2: CGPoint(x: 29.84, y: 42))
            background25.addLine(to: CGPoint(x: 5.5, y: 42))
            background25.close()
            context.saveGState()
            context.translateBy(x: 131, y: 0)
            background25.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background25.cgPath)
            context.addRect(background25.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -33, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 33, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background25.fill()
            context.restoreGState()
            background25.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background25.fill()
            context.restoreGState()
            
            /// Background
            let background26 = UIBezierPath()
            background26.move(to: CGPoint(x: 5.5, y: 42))
            background26.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background26.addLine(to: CGPoint(x: 0, y: 5.5))
            background26.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background26.addLine(to: CGPoint(x: 26.5, y: 0))
            background26.addCurve(to: CGPoint(x: 32, y: 5.5), controlPoint1: CGPoint(x: 29.84, y: 0), controlPoint2: CGPoint(x: 32, y: 2.16))
            background26.addLine(to: CGPoint(x: 32, y: 36.5))
            background26.addCurve(to: CGPoint(x: 26.5, y: 42), controlPoint1: CGPoint(x: 32, y: 39.84), controlPoint2: CGPoint(x: 29.84, y: 42))
            background26.addLine(to: CGPoint(x: 5.5, y: 42))
            background26.close()
            context.saveGState()
            context.translateBy(x: 94, y: 0)
            background26.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background26.cgPath)
            context.addRect(background26.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -33, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 33, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background26.fill()
            context.restoreGState()
            background26.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background26.fill()
            context.restoreGState()
            
            /// Background
            let background27 = UIBezierPath()
            background27.move(to: CGPoint(x: 5.5, y: 42))
            background27.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background27.addLine(to: CGPoint(x: 0, y: 5.5))
            background27.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background27.addLine(to: CGPoint(x: 26.5, y: 0))
            background27.addCurve(to: CGPoint(x: 32, y: 5.5), controlPoint1: CGPoint(x: 29.84, y: 0), controlPoint2: CGPoint(x: 32, y: 2.16))
            background27.addLine(to: CGPoint(x: 32, y: 36.5))
            background27.addCurve(to: CGPoint(x: 26.5, y: 42), controlPoint1: CGPoint(x: 32, y: 39.84), controlPoint2: CGPoint(x: 29.84, y: 42))
            background27.addLine(to: CGPoint(x: 5.5, y: 42))
            background27.close()
            context.saveGState()
            context.translateBy(x: 56, y: 0)
            background27.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background27.cgPath)
            context.addRect(background27.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -33, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 33, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background27.fill()
            context.restoreGState()
            background27.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background27.fill()
            context.restoreGState()
            
            /// Shift
            do {
                context.saveGState()
                
                /// Background
                let background28 = UIBezierPath()
                background28.move(to: CGPoint(x: 5.5, y: 42))
                background28.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
                background28.addLine(to: CGPoint(x: 0, y: 5.5))
                background28.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
                background28.addLine(to: CGPoint(x: 35.5, y: 0))
                background28.addCurve(to: CGPoint(x: 41, y: 5.5), controlPoint1: CGPoint(x: 38.84, y: 0), controlPoint2: CGPoint(x: 41, y: 2.16))
                background28.addLine(to: CGPoint(x: 41, y: 36.5))
                background28.addCurve(to: CGPoint(x: 35.5, y: 42), controlPoint1: CGPoint(x: 41, y: 39.84), controlPoint2: CGPoint(x: 38.84, y: 42))
                background28.addLine(to: CGPoint(x: 5.5, y: 42))
                background28.close()
                context.saveGState()
                background28.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(background28.cgPath)
                context.addRect(background28.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -42, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 42, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                background28.fill()
                context.restoreGState()
                background28.usesEvenOddFillRule = true
                UIColor.white.setFill()
                background28.fill()
                context.restoreGState()
                
                /// Shift
                let shift = UIBezierPath()
                shift.move(to: CGPoint(x: 10.24, y: 0.29))
                shift.addCurve(to: CGPoint(x: 8.83, y: 0.29), controlPoint1: CGPoint(x: 9.85, y: -0.1), controlPoint2: CGPoint(x: 9.22, y: -0.1))
                shift.addLine(to: CGPoint(x: 0.45, y: 8.67))
                shift.addCurve(to: CGPoint(x: 1.03, y: 10.09), controlPoint1: CGPoint(x: -0.33, y: 9.45), controlPoint2: CGPoint(x: -0.07, y: 10.09))
                shift.addLine(to: CGPoint(x: 5.03, y: 10.09))
                shift.addLine(to: CGPoint(x: 5.03, y: 15.1))
                shift.addCurve(to: CGPoint(x: 6.03, y: 16.09), controlPoint1: CGPoint(x: 5.03, y: 15.64), controlPoint2: CGPoint(x: 5.48, y: 16.09))
                shift.addLine(to: CGPoint(x: 13.04, y: 16.09))
                shift.addCurve(to: CGPoint(x: 14.03, y: 15.1), controlPoint1: CGPoint(x: 13.59, y: 16.09), controlPoint2: CGPoint(x: 14.03, y: 15.64))
                shift.addLine(to: CGPoint(x: 14.03, y: 10.09))
                shift.addLine(to: CGPoint(x: 18.04, y: 10.09))
                shift.addCurve(to: CGPoint(x: 18.62, y: 8.67), controlPoint1: CGPoint(x: 19.14, y: 10.09), controlPoint2: CGPoint(x: 19.4, y: 9.45))
                shift.addLine(to: CGPoint(x: 10.24, y: 0.29))
                shift.close()
                context.saveGState()
                context.translateBy(x: 11, y: 12.91)
                shift.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shift.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// M
            let m = NSMutableAttributedString(string: "M")
            m.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: m.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                m.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: m.length))
            }
            context.saveGState()
            m.draw(at: CGPoint(x: 287, y: 7.25))
            context.restoreGState()
            
            /// N
            let n = NSMutableAttributedString(string: "N")
            n.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: n.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                n.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: n.length))
            }
            context.saveGState()
            n.draw(at: CGPoint(x: 251.5, y: 7.25))
            context.restoreGState()
            
            /// B
            let b = NSMutableAttributedString(string: "B")
            b.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: b.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                b.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: b.length))
            }
            context.saveGState()
            b.draw(at: CGPoint(x: 215, y: 7.25))
            context.restoreGState()
            
            /// V
            let v = NSMutableAttributedString(string: "V")
            v.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: v.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                v.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: v.length))
            }
            context.saveGState()
            v.draw(at: CGPoint(x: 177.55, y: 7.25))
            context.restoreGState()
            
            /// C
            let c = NSMutableAttributedString(string: "C")
            c.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: c.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                c.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: c.length))
            }
            context.saveGState()
            c.draw(at: CGPoint(x: 139, y: 7.25))
            context.restoreGState()
            
            /// X
            let x = NSMutableAttributedString(string: "X")
            x.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: x.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                x.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: x.length))
            }
            context.saveGState()
            x.draw(at: CGPoint(x: 102.5, y: 7.25))
            context.restoreGState()
            
            /// Z
            let z = NSMutableAttributedString(string: "Z")
            z.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: z.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                z.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: z.length))
            }
            context.saveGState()
            z.draw(at: CGPoint(x: 64.5, y: 7.25))
            context.restoreGState()
            
            /// Delete
            do {
                context.saveGState()
                context.translateBy(x: 327, y: 0)
                
                /// Background
                let background29 = UIBezierPath()
                background29.move(to: CGPoint(x: 5.5, y: 42))
                background29.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
                background29.addLine(to: CGPoint(x: 0, y: 5.5))
                background29.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
                background29.addLine(to: CGPoint(x: 36.5, y: 0))
                background29.addCurve(to: CGPoint(x: 42, y: 5.5), controlPoint1: CGPoint(x: 39.84, y: 0), controlPoint2: CGPoint(x: 42, y: 2.16))
                background29.addLine(to: CGPoint(x: 42, y: 36.5))
                background29.addCurve(to: CGPoint(x: 36.5, y: 42), controlPoint1: CGPoint(x: 42, y: 39.84), controlPoint2: CGPoint(x: 39.84, y: 42))
                background29.addLine(to: CGPoint(x: 5.5, y: 42))
                background29.close()
                context.saveGState()
                background29.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(background29.cgPath)
                context.addRect(background29.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -43, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 43, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                background29.fill()
                context.restoreGState()
                background29.usesEvenOddFillRule = true
                UIColor(hue: 0.593, saturation: 0.095, brightness: 0.741, alpha: 0.5).setFill()
                background29.fill()
                context.saveGState()
                context.setBlendMode(.softLight)
                context.beginTransparencyLayer(in: background29.bounds, auxiliaryInfo: nil)
                do {
                    UIColor(white: 0, alpha: 0.5).setFill()
                    background29.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.saveGState()
                context.setBlendMode(.softLight)
                context.beginTransparencyLayer(in: background29.bounds, auxiliaryInfo: nil)
                do {
                    UIColor(white: 1, alpha: 0.1).setFill()
                    background29.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.restoreGState()
                
                /// Back
                let back = UIBezierPath()
                back.move(to: CGPoint(x: 0.44, y: 9.56))
                back.addCurve(to: CGPoint(x: 0.44, y: 7.44), controlPoint1: CGPoint(x: -0.15, y: 8.97), controlPoint2: CGPoint(x: -0.14, y: 8.02))
                back.addLine(to: CGPoint(x: 7.17, y: 0.71))
                back.addCurve(to: CGPoint(x: 8.88, y: 0), controlPoint1: CGPoint(x: 7.56, y: 0.32), controlPoint2: CGPoint(x: 8.33, y: 0))
                back.addLine(to: CGPoint(x: 19.38, y: 0))
                back.addCurve(to: CGPoint(x: 22.88, y: 3.5), controlPoint1: CGPoint(x: 21.31, y: 0), controlPoint2: CGPoint(x: 22.88, y: 1.57))
                back.addLine(to: CGPoint(x: 22.88, y: 13.5))
                back.addCurve(to: CGPoint(x: 19.38, y: 17), controlPoint1: CGPoint(x: 22.88, y: 15.43), controlPoint2: CGPoint(x: 21.3, y: 17))
                back.addLine(to: CGPoint(x: 8.88, y: 17))
                back.addCurve(to: CGPoint(x: 7.17, y: 16.29), controlPoint1: CGPoint(x: 8.33, y: 17), controlPoint2: CGPoint(x: 7.55, y: 16.68))
                back.addLine(to: CGPoint(x: 0.44, y: 9.56))
                back.close()
                back.move(to: CGPoint(x: 15.02, y: 8.48))
                back.addLine(to: CGPoint(x: 17.84, y: 5.65))
                back.addCurve(to: CGPoint(x: 17.85, y: 4.59), controlPoint1: CGPoint(x: 18.14, y: 5.36), controlPoint2: CGPoint(x: 18.14, y: 4.88))
                back.addCurve(to: CGPoint(x: 16.78, y: 4.59), controlPoint1: CGPoint(x: 17.55, y: 4.29), controlPoint2: CGPoint(x: 17.08, y: 4.3))
                back.addLine(to: CGPoint(x: 13.96, y: 7.42))
                back.addLine(to: CGPoint(x: 11.13, y: 4.59))
                back.addCurve(to: CGPoint(x: 10.07, y: 4.59), controlPoint1: CGPoint(x: 10.84, y: 4.3), controlPoint2: CGPoint(x: 10.36, y: 4.3))
                back.addCurve(to: CGPoint(x: 10.07, y: 5.65), controlPoint1: CGPoint(x: 9.77, y: 4.88), controlPoint2: CGPoint(x: 9.78, y: 5.36))
                back.addLine(to: CGPoint(x: 12.9, y: 8.48))
                back.addLine(to: CGPoint(x: 10.07, y: 11.3))
                back.addCurve(to: CGPoint(x: 10.07, y: 12.37), controlPoint1: CGPoint(x: 9.78, y: 11.6), controlPoint2: CGPoint(x: 9.78, y: 12.07))
                back.addCurve(to: CGPoint(x: 11.13, y: 12.36), controlPoint1: CGPoint(x: 10.36, y: 12.66), controlPoint2: CGPoint(x: 10.84, y: 12.66))
                back.addLine(to: CGPoint(x: 13.96, y: 9.54))
                back.addLine(to: CGPoint(x: 16.78, y: 12.36))
                back.addCurve(to: CGPoint(x: 17.85, y: 12.37), controlPoint1: CGPoint(x: 17.08, y: 12.66), controlPoint2: CGPoint(x: 17.56, y: 12.66))
                back.addCurve(to: CGPoint(x: 17.84, y: 11.3), controlPoint1: CGPoint(x: 18.14, y: 12.07), controlPoint2: CGPoint(x: 18.14, y: 11.6))
                back.addLine(to: CGPoint(x: 15.02, y: 8.48))
                back.close()
                back.move(to: CGPoint(x: 2.09, y: 9.21))
                back.addCurve(to: CGPoint(x: 2.09, y: 7.79), controlPoint1: CGPoint(x: 1.69, y: 8.82), controlPoint2: CGPoint(x: 1.7, y: 8.18))
                back.addLine(to: CGPoint(x: 8.02, y: 1.86))
                back.addCurve(to: CGPoint(x: 8.87, y: 1.5), controlPoint1: CGPoint(x: 8.22, y: 1.66), controlPoint2: CGPoint(x: 8.6, y: 1.5))
                back.addLine(to: CGPoint(x: 19.37, y: 1.5))
                back.addCurve(to: CGPoint(x: 21.38, y: 3.51), controlPoint1: CGPoint(x: 20.48, y: 1.5), controlPoint2: CGPoint(x: 21.38, y: 2.4))
                back.addLine(to: CGPoint(x: 21.38, y: 13.49))
                back.addCurve(to: CGPoint(x: 19.37, y: 15.5), controlPoint1: CGPoint(x: 21.38, y: 14.6), controlPoint2: CGPoint(x: 20.48, y: 15.5))
                back.addLine(to: CGPoint(x: 8.87, y: 15.5))
                back.addCurve(to: CGPoint(x: 8.02, y: 15.14), controlPoint1: CGPoint(x: 8.6, y: 15.5), controlPoint2: CGPoint(x: 8.22, y: 15.34))
                back.addLine(to: CGPoint(x: 2.09, y: 9.21))
                back.close()
                context.saveGState()
                context.translateBy(x: 9.5, y: 12.5)
                back.usesEvenOddFillRule = true
                UIColor.black.setFill()
                back.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawKeyboardsNumpad(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 216), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 216), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 216)
        
        /// Background
        // Warning: New symbols are not supported.
        
        /// First Row
        do {
            context.saveGState()
            context.translateBy(x: 6, y: 6)
            
            /// 1
            do {
                context.saveGState()
                
                /// Key
                let key = UIBezierPath()
                key.move(to: CGPoint(x: 6.41, y: 0))
                key.addLine(to: CGPoint(x: 110.59, y: 0))
                key.addCurve(to: CGPoint(x: 114.44, y: 0.67), controlPoint1: CGPoint(x: 112.82, y: 0), controlPoint2: CGPoint(x: 113.63, y: 0.23))
                key.addCurve(to: CGPoint(x: 116.33, y: 2.56), controlPoint1: CGPoint(x: 115.26, y: 1.1), controlPoint2: CGPoint(x: 115.9, y: 1.74))
                key.addCurve(to: CGPoint(x: 117, y: 6.41), controlPoint1: CGPoint(x: 116.77, y: 3.37), controlPoint2: CGPoint(x: 117, y: 4.18))
                key.addLine(to: CGPoint(x: 117, y: 39.59))
                key.addCurve(to: CGPoint(x: 116.33, y: 43.44), controlPoint1: CGPoint(x: 117, y: 41.82), controlPoint2: CGPoint(x: 116.77, y: 42.63))
                key.addCurve(to: CGPoint(x: 114.44, y: 45.33), controlPoint1: CGPoint(x: 115.9, y: 44.26), controlPoint2: CGPoint(x: 115.26, y: 44.9))
                key.addCurve(to: CGPoint(x: 110.59, y: 46), controlPoint1: CGPoint(x: 113.63, y: 45.77), controlPoint2: CGPoint(x: 112.82, y: 46))
                key.addLine(to: CGPoint(x: 6.41, y: 46))
                key.addCurve(to: CGPoint(x: 2.56, y: 45.33), controlPoint1: CGPoint(x: 4.18, y: 46), controlPoint2: CGPoint(x: 3.37, y: 45.77))
                key.addCurve(to: CGPoint(x: 0.67, y: 43.44), controlPoint1: CGPoint(x: 1.74, y: 44.9), controlPoint2: CGPoint(x: 1.1, y: 44.26))
                key.addCurve(to: CGPoint(x: 0, y: 39.59), controlPoint1: CGPoint(x: 0.23, y: 42.63), controlPoint2: CGPoint(x: 0, y: 41.82))
                key.addLine(to: CGPoint(x: 0, y: 6.41))
                key.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
                key.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
                key.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
                key.close()
                context.saveGState()
                key.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key.cgPath)
                context.addRect(key.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -118, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 118, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.08, alpha: 0.45).cgColor)
                }
                UIColor.black.setFill()
                key.fill()
                context.restoreGState()
                key.usesEvenOddFillRule = true
                UIColor.white.setFill()
                key.fill()
                context.restoreGState()
                
                /// Key (Outline Mask)
                context.saveGState()
                key.addClip()
                
                /// 1
                let _1 = NSMutableAttributedString(string: "1")
                _1.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: _1.length))
                _1.addAttribute(.kern, value: 0.35, range: NSRange(location: 0, length: _1.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _1.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _1.length))
                }
                context.saveGState()
                _1.draw(in: CGRect(x: 49, y: 0.5, width: 18, height: 33))
                context.restoreGState()
                
                context.restoreGState()
                // End Key (Outline Mask)
                
                context.restoreGState()
            }
            
            /// 2
            do {
                context.saveGState()
                context.translateBy(x: 123, y: 0)
                
                /// Key
                let key2 = UIBezierPath()
                key2.move(to: CGPoint(x: 6.41, y: 0))
                key2.addLine(to: CGPoint(x: 110.59, y: 0))
                key2.addCurve(to: CGPoint(x: 114.44, y: 0.67), controlPoint1: CGPoint(x: 112.82, y: 0), controlPoint2: CGPoint(x: 113.63, y: 0.23))
                key2.addCurve(to: CGPoint(x: 116.33, y: 2.56), controlPoint1: CGPoint(x: 115.26, y: 1.1), controlPoint2: CGPoint(x: 115.9, y: 1.74))
                key2.addCurve(to: CGPoint(x: 117, y: 6.41), controlPoint1: CGPoint(x: 116.77, y: 3.37), controlPoint2: CGPoint(x: 117, y: 4.18))
                key2.addLine(to: CGPoint(x: 117, y: 39.59))
                key2.addCurve(to: CGPoint(x: 116.33, y: 43.44), controlPoint1: CGPoint(x: 117, y: 41.82), controlPoint2: CGPoint(x: 116.77, y: 42.63))
                key2.addCurve(to: CGPoint(x: 114.44, y: 45.33), controlPoint1: CGPoint(x: 115.9, y: 44.26), controlPoint2: CGPoint(x: 115.26, y: 44.9))
                key2.addCurve(to: CGPoint(x: 110.59, y: 46), controlPoint1: CGPoint(x: 113.63, y: 45.77), controlPoint2: CGPoint(x: 112.82, y: 46))
                key2.addLine(to: CGPoint(x: 6.41, y: 46))
                key2.addCurve(to: CGPoint(x: 2.56, y: 45.33), controlPoint1: CGPoint(x: 4.18, y: 46), controlPoint2: CGPoint(x: 3.37, y: 45.77))
                key2.addCurve(to: CGPoint(x: 0.67, y: 43.44), controlPoint1: CGPoint(x: 1.74, y: 44.9), controlPoint2: CGPoint(x: 1.1, y: 44.26))
                key2.addCurve(to: CGPoint(x: 0, y: 39.59), controlPoint1: CGPoint(x: 0.23, y: 42.63), controlPoint2: CGPoint(x: 0, y: 41.82))
                key2.addLine(to: CGPoint(x: 0, y: 6.41))
                key2.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
                key2.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
                key2.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
                key2.close()
                context.saveGState()
                key2.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key2.cgPath)
                context.addRect(key2.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -118, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 118, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.08, alpha: 0.45).cgColor)
                }
                UIColor.black.setFill()
                key2.fill()
                context.restoreGState()
                key2.usesEvenOddFillRule = true
                UIColor.white.setFill()
                key2.fill()
                context.restoreGState()
                
                /// Key (Outline Mask)
                context.saveGState()
                key2.addClip()
                
                /// 2
                let _2 = NSMutableAttributedString(string: "2")
                _2.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: _2.length))
                _2.addAttribute(.kern, value: 0.35, range: NSRange(location: 0, length: _2.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _2.length))
                }
                context.saveGState()
                _2.draw(in: CGRect(x: 49.5, y: 0.5, width: 18, height: 33))
                context.restoreGState()
                
                /// ABC
                let aBC = NSMutableAttributedString(string: "ABC")
                aBC.addAttribute(.font, value: UIFont(name: "SFProText-Bold", size: 10)!, range: NSRange(location: 0, length: aBC.length))
                aBC.addAttribute(.kern, value: 2.5, range: NSRange(location: 0, length: 1))
                aBC.addAttribute(.kern, value: 1.8, range: NSRange(location: 1, length: 2))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    aBC.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: aBC.length))
                }
                context.saveGState()
                aBC.draw(at: CGPoint(x: 45, y: 29))
                context.restoreGState()
                
                context.restoreGState()
                // End Key (Outline Mask)
                
                context.restoreGState()
            }
            
            /// 3
            do {
                context.saveGState()
                context.translateBy(x: 246, y: 0)
                
                /// Key
                let key3 = UIBezierPath()
                key3.move(to: CGPoint(x: 6.41, y: 0))
                key3.addLine(to: CGPoint(x: 110.59, y: 0))
                key3.addCurve(to: CGPoint(x: 114.44, y: 0.67), controlPoint1: CGPoint(x: 112.82, y: 0), controlPoint2: CGPoint(x: 113.63, y: 0.23))
                key3.addCurve(to: CGPoint(x: 116.33, y: 2.56), controlPoint1: CGPoint(x: 115.26, y: 1.1), controlPoint2: CGPoint(x: 115.9, y: 1.74))
                key3.addCurve(to: CGPoint(x: 117, y: 6.41), controlPoint1: CGPoint(x: 116.77, y: 3.37), controlPoint2: CGPoint(x: 117, y: 4.18))
                key3.addLine(to: CGPoint(x: 117, y: 39.59))
                key3.addCurve(to: CGPoint(x: 116.33, y: 43.44), controlPoint1: CGPoint(x: 117, y: 41.82), controlPoint2: CGPoint(x: 116.77, y: 42.63))
                key3.addCurve(to: CGPoint(x: 114.44, y: 45.33), controlPoint1: CGPoint(x: 115.9, y: 44.26), controlPoint2: CGPoint(x: 115.26, y: 44.9))
                key3.addCurve(to: CGPoint(x: 110.59, y: 46), controlPoint1: CGPoint(x: 113.63, y: 45.77), controlPoint2: CGPoint(x: 112.82, y: 46))
                key3.addLine(to: CGPoint(x: 6.41, y: 46))
                key3.addCurve(to: CGPoint(x: 2.56, y: 45.33), controlPoint1: CGPoint(x: 4.18, y: 46), controlPoint2: CGPoint(x: 3.37, y: 45.77))
                key3.addCurve(to: CGPoint(x: 0.67, y: 43.44), controlPoint1: CGPoint(x: 1.74, y: 44.9), controlPoint2: CGPoint(x: 1.1, y: 44.26))
                key3.addCurve(to: CGPoint(x: 0, y: 39.59), controlPoint1: CGPoint(x: 0.23, y: 42.63), controlPoint2: CGPoint(x: 0, y: 41.82))
                key3.addLine(to: CGPoint(x: 0, y: 6.41))
                key3.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
                key3.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
                key3.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
                key3.close()
                context.saveGState()
                key3.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key3.cgPath)
                context.addRect(key3.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -118, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 118, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.08, alpha: 0.45).cgColor)
                }
                UIColor.black.setFill()
                key3.fill()
                context.restoreGState()
                key3.usesEvenOddFillRule = true
                UIColor.white.setFill()
                key3.fill()
                context.restoreGState()
                
                /// Key (Outline Mask)
                context.saveGState()
                key3.addClip()
                
                /// 3
                let _3 = NSMutableAttributedString(string: "3")
                _3.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: _3.length))
                _3.addAttribute(.kern, value: 0.35, range: NSRange(location: 0, length: _3.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _3.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _3.length))
                }
                context.saveGState()
                _3.draw(in: CGRect(x: 52, y: 0.5, width: 18, height: 33))
                context.restoreGState()
                
                /// DEF
                let dEF = NSMutableAttributedString(string: "DEF")
                dEF.addAttribute(.font, value: UIFont(name: "SFProDisplay-Bold", size: 10)!, range: NSRange(location: 0, length: dEF.length))
                dEF.addAttribute(.kern, value: 2.5, range: NSRange(location: 0, length: 2))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    dEF.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: dEF.length))
                }
                context.saveGState()
                dEF.draw(at: CGPoint(x: 48.5, y: 29))
                context.restoreGState()
                
                context.restoreGState()
                // End Key (Outline Mask)
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        /// Second Row
        do {
            context.saveGState()
            context.translateBy(x: 6, y: 59)
            
            /// 4
            do {
                context.saveGState()
                
                /// Key
                let key4 = UIBezierPath()
                key4.move(to: CGPoint(x: 6.41, y: 0))
                key4.addLine(to: CGPoint(x: 110.59, y: 0))
                key4.addCurve(to: CGPoint(x: 114.44, y: 0.67), controlPoint1: CGPoint(x: 112.82, y: 0), controlPoint2: CGPoint(x: 113.63, y: 0.23))
                key4.addCurve(to: CGPoint(x: 116.33, y: 2.56), controlPoint1: CGPoint(x: 115.26, y: 1.1), controlPoint2: CGPoint(x: 115.9, y: 1.74))
                key4.addCurve(to: CGPoint(x: 117, y: 6.41), controlPoint1: CGPoint(x: 116.77, y: 3.37), controlPoint2: CGPoint(x: 117, y: 4.18))
                key4.addLine(to: CGPoint(x: 117, y: 40.59))
                key4.addCurve(to: CGPoint(x: 116.33, y: 44.44), controlPoint1: CGPoint(x: 117, y: 42.82), controlPoint2: CGPoint(x: 116.77, y: 43.63))
                key4.addCurve(to: CGPoint(x: 114.44, y: 46.33), controlPoint1: CGPoint(x: 115.9, y: 45.26), controlPoint2: CGPoint(x: 115.26, y: 45.9))
                key4.addCurve(to: CGPoint(x: 110.59, y: 47), controlPoint1: CGPoint(x: 113.63, y: 46.77), controlPoint2: CGPoint(x: 112.82, y: 47))
                key4.addLine(to: CGPoint(x: 6.41, y: 47))
                key4.addCurve(to: CGPoint(x: 2.56, y: 46.33), controlPoint1: CGPoint(x: 4.18, y: 47), controlPoint2: CGPoint(x: 3.37, y: 46.77))
                key4.addCurve(to: CGPoint(x: 0.67, y: 44.44), controlPoint1: CGPoint(x: 1.74, y: 45.9), controlPoint2: CGPoint(x: 1.1, y: 45.26))
                key4.addCurve(to: CGPoint(x: 0, y: 40.59), controlPoint1: CGPoint(x: 0.23, y: 43.63), controlPoint2: CGPoint(x: 0, y: 42.82))
                key4.addLine(to: CGPoint(x: 0, y: 6.41))
                key4.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
                key4.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
                key4.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
                key4.close()
                context.saveGState()
                context.translateBy(x: 0, y: 0)
                key4.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key4.cgPath)
                context.addRect(key4.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -118, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 118, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.08, alpha: 0.45).cgColor)
                }
                UIColor.black.setFill()
                key4.fill()
                context.restoreGState()
                key4.usesEvenOddFillRule = true
                UIColor.white.setFill()
                key4.fill()
                context.restoreGState()
                
                /// Key (Outline Mask)
                context.saveGState()
                key4.apply(CGAffineTransform(translationX: 0, y: 0))
                key4.addClip()
                
                /// 4
                let _4 = NSMutableAttributedString(string: "4")
                _4.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: _4.length))
                _4.addAttribute(.kern, value: 0.35, range: NSRange(location: 0, length: _4.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _4.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _4.length))
                }
                context.saveGState()
                _4.draw(in: CGRect(x: 49, y: 1.5, width: 18, height: 33))
                context.restoreGState()
                
                /// GHI
                let gHI = NSMutableAttributedString(string: "GHI")
                gHI.addAttribute(.font, value: UIFont(name: "SFProDisplay-Bold", size: 10)!, range: NSRange(location: 0, length: gHI.length))
                gHI.addAttribute(.kern, value: 2.5, range: NSRange(location: 0, length: gHI.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    gHI.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: gHI.length))
                }
                context.saveGState()
                gHI.draw(at: CGPoint(x: 46.5, y: 30))
                context.restoreGState()
                
                context.restoreGState()
                // End Key (Outline Mask)
                
                context.restoreGState()
            }
            
            /// 5
            do {
                context.saveGState()
                context.translateBy(x: 123, y: 0)
                
                /// Key
                let key5 = UIBezierPath()
                key5.move(to: CGPoint(x: 6.41, y: 0))
                key5.addLine(to: CGPoint(x: 110.59, y: 0))
                key5.addCurve(to: CGPoint(x: 114.44, y: 0.67), controlPoint1: CGPoint(x: 112.82, y: 0), controlPoint2: CGPoint(x: 113.63, y: 0.23))
                key5.addCurve(to: CGPoint(x: 116.33, y: 2.56), controlPoint1: CGPoint(x: 115.26, y: 1.1), controlPoint2: CGPoint(x: 115.9, y: 1.74))
                key5.addCurve(to: CGPoint(x: 117, y: 6.41), controlPoint1: CGPoint(x: 116.77, y: 3.37), controlPoint2: CGPoint(x: 117, y: 4.18))
                key5.addLine(to: CGPoint(x: 117, y: 40.59))
                key5.addCurve(to: CGPoint(x: 116.33, y: 44.44), controlPoint1: CGPoint(x: 117, y: 42.82), controlPoint2: CGPoint(x: 116.77, y: 43.63))
                key5.addCurve(to: CGPoint(x: 114.44, y: 46.33), controlPoint1: CGPoint(x: 115.9, y: 45.26), controlPoint2: CGPoint(x: 115.26, y: 45.9))
                key5.addCurve(to: CGPoint(x: 110.59, y: 47), controlPoint1: CGPoint(x: 113.63, y: 46.77), controlPoint2: CGPoint(x: 112.82, y: 47))
                key5.addLine(to: CGPoint(x: 6.41, y: 47))
                key5.addCurve(to: CGPoint(x: 2.56, y: 46.33), controlPoint1: CGPoint(x: 4.18, y: 47), controlPoint2: CGPoint(x: 3.37, y: 46.77))
                key5.addCurve(to: CGPoint(x: 0.67, y: 44.44), controlPoint1: CGPoint(x: 1.74, y: 45.9), controlPoint2: CGPoint(x: 1.1, y: 45.26))
                key5.addCurve(to: CGPoint(x: 0, y: 40.59), controlPoint1: CGPoint(x: 0.23, y: 43.63), controlPoint2: CGPoint(x: 0, y: 42.82))
                key5.addLine(to: CGPoint(x: 0, y: 6.41))
                key5.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
                key5.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
                key5.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
                key5.close()
                context.saveGState()
                context.translateBy(x: 0, y: 0)
                key5.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key5.cgPath)
                context.addRect(key5.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -118, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 118, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.08, alpha: 0.45).cgColor)
                }
                UIColor.black.setFill()
                key5.fill()
                context.restoreGState()
                key5.usesEvenOddFillRule = true
                UIColor.white.setFill()
                key5.fill()
                context.restoreGState()
                
                /// Key (Outline Mask)
                context.saveGState()
                key5.apply(CGAffineTransform(translationX: 0, y: 0))
                key5.addClip()
                
                /// 5
                let _5 = NSMutableAttributedString(string: "5")
                _5.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: _5.length))
                _5.addAttribute(.kern, value: 0.35, range: NSRange(location: 0, length: _5.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _5.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _5.length))
                }
                context.saveGState()
                _5.draw(in: CGRect(x: 49.5, y: 1.5, width: 18, height: 33))
                context.restoreGState()
                
                /// JKL
                let jKL = NSMutableAttributedString(string: "JKL")
                jKL.addAttribute(.font, value: UIFont(name: "SFProDisplay-Bold", size: 10)!, range: NSRange(location: 0, length: jKL.length))
                jKL.addAttribute(.kern, value: 2.5, range: NSRange(location: 0, length: jKL.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    jKL.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: jKL.length))
                }
                context.saveGState()
                jKL.draw(at: CGPoint(x: 46.5, y: 30))
                context.restoreGState()
                
                context.restoreGState()
                // End Key (Outline Mask)
                
                context.restoreGState()
            }
            
            /// 6
            do {
                context.saveGState()
                context.translateBy(x: 246, y: 0)
                
                /// Key
                let key6 = UIBezierPath()
                key6.move(to: CGPoint(x: 6.41, y: 0))
                key6.addLine(to: CGPoint(x: 110.59, y: 0))
                key6.addCurve(to: CGPoint(x: 114.44, y: 0.67), controlPoint1: CGPoint(x: 112.82, y: 0), controlPoint2: CGPoint(x: 113.63, y: 0.23))
                key6.addCurve(to: CGPoint(x: 116.33, y: 2.56), controlPoint1: CGPoint(x: 115.26, y: 1.1), controlPoint2: CGPoint(x: 115.9, y: 1.74))
                key6.addCurve(to: CGPoint(x: 117, y: 6.41), controlPoint1: CGPoint(x: 116.77, y: 3.37), controlPoint2: CGPoint(x: 117, y: 4.18))
                key6.addLine(to: CGPoint(x: 117, y: 40.59))
                key6.addCurve(to: CGPoint(x: 116.33, y: 44.44), controlPoint1: CGPoint(x: 117, y: 42.82), controlPoint2: CGPoint(x: 116.77, y: 43.63))
                key6.addCurve(to: CGPoint(x: 114.44, y: 46.33), controlPoint1: CGPoint(x: 115.9, y: 45.26), controlPoint2: CGPoint(x: 115.26, y: 45.9))
                key6.addCurve(to: CGPoint(x: 110.59, y: 47), controlPoint1: CGPoint(x: 113.63, y: 46.77), controlPoint2: CGPoint(x: 112.82, y: 47))
                key6.addLine(to: CGPoint(x: 6.41, y: 47))
                key6.addCurve(to: CGPoint(x: 2.56, y: 46.33), controlPoint1: CGPoint(x: 4.18, y: 47), controlPoint2: CGPoint(x: 3.37, y: 46.77))
                key6.addCurve(to: CGPoint(x: 0.67, y: 44.44), controlPoint1: CGPoint(x: 1.74, y: 45.9), controlPoint2: CGPoint(x: 1.1, y: 45.26))
                key6.addCurve(to: CGPoint(x: 0, y: 40.59), controlPoint1: CGPoint(x: 0.23, y: 43.63), controlPoint2: CGPoint(x: 0, y: 42.82))
                key6.addLine(to: CGPoint(x: 0, y: 6.41))
                key6.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
                key6.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
                key6.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
                key6.close()
                context.saveGState()
                context.translateBy(x: 0, y: 0)
                key6.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key6.cgPath)
                context.addRect(key6.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -118, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 118, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.08, alpha: 0.45).cgColor)
                }
                UIColor.black.setFill()
                key6.fill()
                context.restoreGState()
                key6.usesEvenOddFillRule = true
                UIColor.white.setFill()
                key6.fill()
                context.restoreGState()
                
                /// Key (Outline Mask)
                context.saveGState()
                key6.apply(CGAffineTransform(translationX: 0, y: 0))
                key6.addClip()
                
                /// 6
                let _6 = NSMutableAttributedString(string: "6")
                _6.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: _6.length))
                _6.addAttribute(.kern, value: 0.35, range: NSRange(location: 0, length: _6.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _6.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _6.length))
                }
                context.saveGState()
                _6.draw(in: CGRect(x: 52, y: 1.5, width: 18, height: 33))
                context.restoreGState()
                
                /// MNO
                let mNO = NSMutableAttributedString(string: "MNO")
                mNO.addAttribute(.font, value: UIFont(name: "SFProDisplay-Bold", size: 10)!, range: NSRange(location: 0, length: mNO.length))
                mNO.addAttribute(.kern, value: 2.5, range: NSRange(location: 0, length: mNO.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    mNO.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: mNO.length))
                }
                context.saveGState()
                mNO.draw(at: CGPoint(x: 46.5, y: 30))
                context.restoreGState()
                
                context.restoreGState()
                // End Key (Outline Mask)
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        /// Third Row
        do {
            context.saveGState()
            context.translateBy(x: 6, y: 113)
            
            /// 7
            do {
                context.saveGState()
                
                /// Key
                let key7 = UIBezierPath()
                key7.move(to: CGPoint(x: 6.41, y: 0))
                key7.addLine(to: CGPoint(x: 110.59, y: 0))
                key7.addCurve(to: CGPoint(x: 114.44, y: 0.67), controlPoint1: CGPoint(x: 112.82, y: 0), controlPoint2: CGPoint(x: 113.63, y: 0.23))
                key7.addCurve(to: CGPoint(x: 116.33, y: 2.56), controlPoint1: CGPoint(x: 115.26, y: 1.1), controlPoint2: CGPoint(x: 115.9, y: 1.74))
                key7.addCurve(to: CGPoint(x: 117, y: 6.41), controlPoint1: CGPoint(x: 116.77, y: 3.37), controlPoint2: CGPoint(x: 117, y: 4.18))
                key7.addLine(to: CGPoint(x: 117, y: 40.59))
                key7.addCurve(to: CGPoint(x: 116.33, y: 44.44), controlPoint1: CGPoint(x: 117, y: 42.82), controlPoint2: CGPoint(x: 116.77, y: 43.63))
                key7.addCurve(to: CGPoint(x: 114.44, y: 46.33), controlPoint1: CGPoint(x: 115.9, y: 45.26), controlPoint2: CGPoint(x: 115.26, y: 45.9))
                key7.addCurve(to: CGPoint(x: 110.59, y: 47), controlPoint1: CGPoint(x: 113.63, y: 46.77), controlPoint2: CGPoint(x: 112.82, y: 47))
                key7.addLine(to: CGPoint(x: 6.41, y: 47))
                key7.addCurve(to: CGPoint(x: 2.56, y: 46.33), controlPoint1: CGPoint(x: 4.18, y: 47), controlPoint2: CGPoint(x: 3.37, y: 46.77))
                key7.addCurve(to: CGPoint(x: 0.67, y: 44.44), controlPoint1: CGPoint(x: 1.74, y: 45.9), controlPoint2: CGPoint(x: 1.1, y: 45.26))
                key7.addCurve(to: CGPoint(x: 0, y: 40.59), controlPoint1: CGPoint(x: 0.23, y: 43.63), controlPoint2: CGPoint(x: 0, y: 42.82))
                key7.addLine(to: CGPoint(x: 0, y: 6.41))
                key7.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
                key7.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
                key7.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
                key7.close()
                context.saveGState()
                context.translateBy(x: 0, y: 0)
                key7.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key7.cgPath)
                context.addRect(key7.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -118, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 118, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.08, alpha: 0.45).cgColor)
                }
                UIColor.black.setFill()
                key7.fill()
                context.restoreGState()
                key7.usesEvenOddFillRule = true
                UIColor.white.setFill()
                key7.fill()
                context.restoreGState()
                
                /// Key (Outline Mask)
                context.saveGState()
                key7.apply(CGAffineTransform(translationX: 0, y: 0))
                key7.addClip()
                
                /// 7
                let _7 = NSMutableAttributedString(string: "7")
                _7.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: _7.length))
                _7.addAttribute(.kern, value: 0.35, range: NSRange(location: 0, length: _7.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _7.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _7.length))
                }
                context.saveGState()
                _7.draw(in: CGRect(x: 49.5, y: 1.5, width: 18, height: 33))
                context.restoreGState()
                
                /// PQRS
                let pQRS = NSMutableAttributedString(string: "PQRS")
                pQRS.addAttribute(.font, value: UIFont(name: "SFProDisplay-Bold", size: 10)!, range: NSRange(location: 0, length: pQRS.length))
                pQRS.addAttribute(.kern, value: 2.5, range: NSRange(location: 0, length: pQRS.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    pQRS.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: pQRS.length))
                }
                context.saveGState()
                pQRS.draw(at: CGPoint(x: 40.5, y: 30))
                context.restoreGState()
                
                context.restoreGState()
                // End Key (Outline Mask)
                
                context.restoreGState()
            }
            
            /// 8
            do {
                context.saveGState()
                context.translateBy(x: 123, y: 0)
                
                /// Key
                let key8 = UIBezierPath()
                key8.move(to: CGPoint(x: 6.41, y: 0))
                key8.addLine(to: CGPoint(x: 110.59, y: 0))
                key8.addCurve(to: CGPoint(x: 114.44, y: 0.67), controlPoint1: CGPoint(x: 112.82, y: 0), controlPoint2: CGPoint(x: 113.63, y: 0.23))
                key8.addCurve(to: CGPoint(x: 116.33, y: 2.56), controlPoint1: CGPoint(x: 115.26, y: 1.1), controlPoint2: CGPoint(x: 115.9, y: 1.74))
                key8.addCurve(to: CGPoint(x: 117, y: 6.41), controlPoint1: CGPoint(x: 116.77, y: 3.37), controlPoint2: CGPoint(x: 117, y: 4.18))
                key8.addLine(to: CGPoint(x: 117, y: 40.59))
                key8.addCurve(to: CGPoint(x: 116.33, y: 44.44), controlPoint1: CGPoint(x: 117, y: 42.82), controlPoint2: CGPoint(x: 116.77, y: 43.63))
                key8.addCurve(to: CGPoint(x: 114.44, y: 46.33), controlPoint1: CGPoint(x: 115.9, y: 45.26), controlPoint2: CGPoint(x: 115.26, y: 45.9))
                key8.addCurve(to: CGPoint(x: 110.59, y: 47), controlPoint1: CGPoint(x: 113.63, y: 46.77), controlPoint2: CGPoint(x: 112.82, y: 47))
                key8.addLine(to: CGPoint(x: 6.41, y: 47))
                key8.addCurve(to: CGPoint(x: 2.56, y: 46.33), controlPoint1: CGPoint(x: 4.18, y: 47), controlPoint2: CGPoint(x: 3.37, y: 46.77))
                key8.addCurve(to: CGPoint(x: 0.67, y: 44.44), controlPoint1: CGPoint(x: 1.74, y: 45.9), controlPoint2: CGPoint(x: 1.1, y: 45.26))
                key8.addCurve(to: CGPoint(x: 0, y: 40.59), controlPoint1: CGPoint(x: 0.23, y: 43.63), controlPoint2: CGPoint(x: 0, y: 42.82))
                key8.addLine(to: CGPoint(x: 0, y: 6.41))
                key8.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
                key8.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
                key8.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
                key8.close()
                context.saveGState()
                context.translateBy(x: 0, y: 0)
                key8.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key8.cgPath)
                context.addRect(key8.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -118, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 118, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.08, alpha: 0.45).cgColor)
                }
                UIColor.black.setFill()
                key8.fill()
                context.restoreGState()
                key8.usesEvenOddFillRule = true
                UIColor.white.setFill()
                key8.fill()
                context.restoreGState()
                
                /// Key (Outline Mask)
                context.saveGState()
                key8.apply(CGAffineTransform(translationX: 0, y: 0))
                key8.addClip()
                
                /// 8
                let _8 = NSMutableAttributedString(string: "8")
                _8.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: _8.length))
                _8.addAttribute(.kern, value: 0.35, range: NSRange(location: 0, length: _8.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _8.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _8.length))
                }
                context.saveGState()
                _8.draw(in: CGRect(x: 50, y: 1.5, width: 18, height: 33))
                context.restoreGState()
                
                /// TUV
                let tUV = NSMutableAttributedString(string: "TUV")
                tUV.addAttribute(.font, value: UIFont(name: "SFProDisplay-Bold", size: 10)!, range: NSRange(location: 0, length: tUV.length))
                tUV.addAttribute(.kern, value: 2.5, range: NSRange(location: 0, length: tUV.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    tUV.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: tUV.length))
                }
                context.saveGState()
                tUV.draw(at: CGPoint(x: 45.5, y: 30))
                context.restoreGState()
                
                context.restoreGState()
                // End Key (Outline Mask)
                
                context.restoreGState()
            }
            
            /// 9
            do {
                context.saveGState()
                context.translateBy(x: 246, y: 0)
                
                /// Key
                let key9 = UIBezierPath()
                key9.move(to: CGPoint(x: 6.41, y: 0))
                key9.addLine(to: CGPoint(x: 110.59, y: 0))
                key9.addCurve(to: CGPoint(x: 114.44, y: 0.67), controlPoint1: CGPoint(x: 112.82, y: 0), controlPoint2: CGPoint(x: 113.63, y: 0.23))
                key9.addCurve(to: CGPoint(x: 116.33, y: 2.56), controlPoint1: CGPoint(x: 115.26, y: 1.1), controlPoint2: CGPoint(x: 115.9, y: 1.74))
                key9.addCurve(to: CGPoint(x: 117, y: 6.41), controlPoint1: CGPoint(x: 116.77, y: 3.37), controlPoint2: CGPoint(x: 117, y: 4.18))
                key9.addLine(to: CGPoint(x: 117, y: 40.59))
                key9.addCurve(to: CGPoint(x: 116.33, y: 44.44), controlPoint1: CGPoint(x: 117, y: 42.82), controlPoint2: CGPoint(x: 116.77, y: 43.63))
                key9.addCurve(to: CGPoint(x: 114.44, y: 46.33), controlPoint1: CGPoint(x: 115.9, y: 45.26), controlPoint2: CGPoint(x: 115.26, y: 45.9))
                key9.addCurve(to: CGPoint(x: 110.59, y: 47), controlPoint1: CGPoint(x: 113.63, y: 46.77), controlPoint2: CGPoint(x: 112.82, y: 47))
                key9.addLine(to: CGPoint(x: 6.41, y: 47))
                key9.addCurve(to: CGPoint(x: 2.56, y: 46.33), controlPoint1: CGPoint(x: 4.18, y: 47), controlPoint2: CGPoint(x: 3.37, y: 46.77))
                key9.addCurve(to: CGPoint(x: 0.67, y: 44.44), controlPoint1: CGPoint(x: 1.74, y: 45.9), controlPoint2: CGPoint(x: 1.1, y: 45.26))
                key9.addCurve(to: CGPoint(x: 0, y: 40.59), controlPoint1: CGPoint(x: 0.23, y: 43.63), controlPoint2: CGPoint(x: 0, y: 42.82))
                key9.addLine(to: CGPoint(x: 0, y: 6.41))
                key9.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
                key9.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
                key9.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
                key9.close()
                context.saveGState()
                context.translateBy(x: 0, y: 0)
                key9.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key9.cgPath)
                context.addRect(key9.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -118, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 118, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.08, alpha: 0.45).cgColor)
                }
                UIColor.black.setFill()
                key9.fill()
                context.restoreGState()
                key9.usesEvenOddFillRule = true
                UIColor.white.setFill()
                key9.fill()
                context.restoreGState()
                
                /// Key (Outline Mask)
                context.saveGState()
                key9.apply(CGAffineTransform(translationX: 0, y: 0))
                key9.addClip()
                
                /// 9
                let _9 = NSMutableAttributedString(string: "9")
                _9.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: _9.length))
                _9.addAttribute(.kern, value: 0.35, range: NSRange(location: 0, length: _9.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _9.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _9.length))
                }
                context.saveGState()
                _9.draw(in: CGRect(x: 52, y: 1.5, width: 18, height: 33))
                context.restoreGState()
                
                /// WXYZ
                let wXYZ = NSMutableAttributedString(string: "WXYZ")
                wXYZ.addAttribute(.font, value: UIFont(name: "SFProDisplay-Bold", size: 10)!, range: NSRange(location: 0, length: wXYZ.length))
                wXYZ.addAttribute(.kern, value: 2.5, range: NSRange(location: 0, length: wXYZ.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    wXYZ.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: wXYZ.length))
                }
                context.saveGState()
                wXYZ.draw(at: CGPoint(x: 42, y: 30))
                context.restoreGState()
                
                context.restoreGState()
                // End Key (Outline Mask)
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        /// Keys
        do {
            context.saveGState()
            context.translateBy(x: 129, y: 165)
            
            /// Clear
            let clear = UIBezierPath()
            clear.move(to: CGPoint(x: 0.44, y: 9.56))
            clear.addCurve(to: CGPoint(x: 0.44, y: 7.44), controlPoint1: CGPoint(x: -0.15, y: 8.97), controlPoint2: CGPoint(x: -0.14, y: 8.02))
            clear.addLine(to: CGPoint(x: 7.17, y: 0.71))
            clear.addCurve(to: CGPoint(x: 8.87, y: 0), controlPoint1: CGPoint(x: 7.56, y: 0.32), controlPoint2: CGPoint(x: 8.33, y: 0))
            clear.addLine(to: CGPoint(x: 19.49, y: 0))
            clear.addCurve(to: CGPoint(x: 23, y: 3.5), controlPoint1: CGPoint(x: 21.43, y: 0), controlPoint2: CGPoint(x: 23, y: 1.57))
            clear.addLine(to: CGPoint(x: 23, y: 13.5))
            clear.addCurve(to: CGPoint(x: 19.49, y: 17), controlPoint1: CGPoint(x: 23, y: 15.43), controlPoint2: CGPoint(x: 21.44, y: 17))
            clear.addLine(to: CGPoint(x: 8.87, y: 17))
            clear.addCurve(to: CGPoint(x: 7.17, y: 16.29), controlPoint1: CGPoint(x: 8.32, y: 17), controlPoint2: CGPoint(x: 7.55, y: 16.68))
            clear.addLine(to: CGPoint(x: 0.44, y: 9.56))
            clear.close()
            clear.move(to: CGPoint(x: 15.02, y: 8.48))
            clear.addLine(to: CGPoint(x: 17.84, y: 5.65))
            clear.addCurve(to: CGPoint(x: 17.85, y: 4.59), controlPoint1: CGPoint(x: 18.14, y: 5.36), controlPoint2: CGPoint(x: 18.14, y: 4.88))
            clear.addCurve(to: CGPoint(x: 16.78, y: 4.59), controlPoint1: CGPoint(x: 17.55, y: 4.29), controlPoint2: CGPoint(x: 17.08, y: 4.3))
            clear.addLine(to: CGPoint(x: 13.96, y: 7.42))
            clear.addLine(to: CGPoint(x: 11.13, y: 4.59))
            clear.addCurve(to: CGPoint(x: 10.07, y: 4.59), controlPoint1: CGPoint(x: 10.84, y: 4.3), controlPoint2: CGPoint(x: 10.36, y: 4.3))
            clear.addCurve(to: CGPoint(x: 10.07, y: 5.65), controlPoint1: CGPoint(x: 9.77, y: 4.88), controlPoint2: CGPoint(x: 9.78, y: 5.36))
            clear.addLine(to: CGPoint(x: 12.9, y: 8.48))
            clear.addLine(to: CGPoint(x: 10.07, y: 11.3))
            clear.addCurve(to: CGPoint(x: 10.07, y: 12.37), controlPoint1: CGPoint(x: 9.78, y: 11.6), controlPoint2: CGPoint(x: 9.78, y: 12.07))
            clear.addCurve(to: CGPoint(x: 11.13, y: 12.36), controlPoint1: CGPoint(x: 10.36, y: 12.66), controlPoint2: CGPoint(x: 10.84, y: 12.66))
            clear.addLine(to: CGPoint(x: 13.96, y: 9.54))
            clear.addLine(to: CGPoint(x: 16.78, y: 12.36))
            clear.addCurve(to: CGPoint(x: 17.85, y: 12.37), controlPoint1: CGPoint(x: 17.08, y: 12.66), controlPoint2: CGPoint(x: 17.56, y: 12.66))
            clear.addCurve(to: CGPoint(x: 17.84, y: 11.3), controlPoint1: CGPoint(x: 18.14, y: 12.07), controlPoint2: CGPoint(x: 18.14, y: 11.6))
            clear.addLine(to: CGPoint(x: 15.02, y: 8.48))
            clear.close()
            clear.move(to: CGPoint(x: 2.09, y: 9.21))
            clear.addCurve(to: CGPoint(x: 2.09, y: 7.79), controlPoint1: CGPoint(x: 1.69, y: 8.82), controlPoint2: CGPoint(x: 1.7, y: 8.18))
            clear.addLine(to: CGPoint(x: 8.02, y: 1.86))
            clear.addCurve(to: CGPoint(x: 8.88, y: 1.5), controlPoint1: CGPoint(x: 8.22, y: 1.66), controlPoint2: CGPoint(x: 8.6, y: 1.5))
            clear.addLine(to: CGPoint(x: 19.51, y: 1.5))
            clear.addCurve(to: CGPoint(x: 21.5, y: 3.51), controlPoint1: CGPoint(x: 20.61, y: 1.5), controlPoint2: CGPoint(x: 21.5, y: 2.4))
            clear.addLine(to: CGPoint(x: 21.5, y: 13.49))
            clear.addCurve(to: CGPoint(x: 19.51, y: 15.5), controlPoint1: CGPoint(x: 21.5, y: 14.6), controlPoint2: CGPoint(x: 20.6, y: 15.5))
            clear.addLine(to: CGPoint(x: 8.88, y: 15.5))
            clear.addCurve(to: CGPoint(x: 8.02, y: 15.14), controlPoint1: CGPoint(x: 8.6, y: 15.5), controlPoint2: CGPoint(x: 8.22, y: 15.34))
            clear.addLine(to: CGPoint(x: 2.09, y: 9.21))
            clear.close()
            context.saveGState()
            context.translateBy(x: 170.63, y: 14)
            clear.usesEvenOddFillRule = true
            UIColor.black.setFill()
            clear.fill()
            context.restoreGState()
            
            /// 0
            do {
                context.saveGState()
                
                /// Key
                let key10 = UIBezierPath()
                key10.move(to: CGPoint(x: 6.41, y: 0))
                key10.addLine(to: CGPoint(x: 110.59, y: 0))
                key10.addCurve(to: CGPoint(x: 114.44, y: 0.67), controlPoint1: CGPoint(x: 112.82, y: 0), controlPoint2: CGPoint(x: 113.63, y: 0.23))
                key10.addCurve(to: CGPoint(x: 116.33, y: 2.56), controlPoint1: CGPoint(x: 115.26, y: 1.1), controlPoint2: CGPoint(x: 115.9, y: 1.74))
                key10.addCurve(to: CGPoint(x: 117, y: 6.41), controlPoint1: CGPoint(x: 116.77, y: 3.37), controlPoint2: CGPoint(x: 117, y: 4.18))
                key10.addLine(to: CGPoint(x: 117, y: 39.59))
                key10.addCurve(to: CGPoint(x: 116.33, y: 43.44), controlPoint1: CGPoint(x: 117, y: 41.82), controlPoint2: CGPoint(x: 116.77, y: 42.63))
                key10.addCurve(to: CGPoint(x: 114.44, y: 45.33), controlPoint1: CGPoint(x: 115.9, y: 44.26), controlPoint2: CGPoint(x: 115.26, y: 44.9))
                key10.addCurve(to: CGPoint(x: 110.59, y: 46), controlPoint1: CGPoint(x: 113.63, y: 45.77), controlPoint2: CGPoint(x: 112.82, y: 46))
                key10.addLine(to: CGPoint(x: 6.41, y: 46))
                key10.addCurve(to: CGPoint(x: 2.56, y: 45.33), controlPoint1: CGPoint(x: 4.18, y: 46), controlPoint2: CGPoint(x: 3.37, y: 45.77))
                key10.addCurve(to: CGPoint(x: 0.67, y: 43.44), controlPoint1: CGPoint(x: 1.74, y: 44.9), controlPoint2: CGPoint(x: 1.1, y: 44.26))
                key10.addCurve(to: CGPoint(x: 0, y: 39.59), controlPoint1: CGPoint(x: 0.23, y: 42.63), controlPoint2: CGPoint(x: 0, y: 41.82))
                key10.addLine(to: CGPoint(x: 0, y: 6.41))
                key10.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
                key10.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
                key10.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
                key10.close()
                context.saveGState()
                context.translateBy(x: 0, y: 0)
                key10.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key10.cgPath)
                context.addRect(key10.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -118, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 118, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.08, alpha: 0.45).cgColor)
                }
                UIColor.black.setFill()
                key10.fill()
                context.restoreGState()
                key10.usesEvenOddFillRule = true
                UIColor.white.setFill()
                key10.fill()
                context.restoreGState()
                
                /// Key (Outline Mask)
                context.saveGState()
                key10.apply(CGAffineTransform(translationX: 0, y: 0))
                key10.addClip()
                
                /// 0
                let _0 = NSMutableAttributedString(string: "0")
                _0.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: _0.length))
                _0.addAttribute(.kern, value: 0.35, range: NSRange(location: 0, length: _0.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _0.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _0.length))
                }
                context.saveGState()
                _0.draw(in: CGRect(x: 50, y: 7, width: 18, height: 33))
                context.restoreGState()
                
                context.restoreGState()
                // End Key (Outline Mask)
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawKeyboardsEmoji(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 258), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 258), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 258)
        
        /// Background
        // Warning: New symbols are not supported.
        
        /// Mask
        let mask = UIBezierPath()
        mask.move(to: CGPoint.zero)
        mask.addLine(to: CGPoint(x: 375, y: 0))
        mask.addLine(to: CGPoint(x: 375, y: 258))
        mask.addLine(to: CGPoint(x: 0, y: 258))
        mask.addLine(to: CGPoint.zero)
        mask.close()
        
        /// Mask (Outline Mask)
        context.saveGState()
        mask.addClip()
        
        /// ABC
        let aBC = NSMutableAttributedString(string: "ABC")
        aBC.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 15)!, range: NSRange(location: 0, length: aBC.length))
        aBC.addAttribute(.kern, value: -0.52, range: NSRange(location: 0, length: aBC.length))
        aBC.addAttribute(.foregroundColor, value: UIColor(hue: 0.595, saturation: 0.151, brightness: 0.365, alpha: 1), range: NSRange(location: 0, length: aBC.length))
        context.saveGState()
        aBC.draw(at: CGPoint(x: 11.5, y: 227.5))
        context.restoreGState()
        
        /// Index Picker
        do {
            context.saveGState()
            context.translateBy(x: 48.5, y: 223)
            
            /// Highlight
            do {
                context.saveGState()
                
                /// Key
                let key = UIBezierPath()
                key.move(to: CGPoint(x: 0, y: 15))
                key.addCurve(to: CGPoint(x: 15, y: 0), controlPoint1: CGPoint(x: 0, y: 6.72), controlPoint2: CGPoint(x: 6.71, y: 0))
                key.addLine(to: CGPoint(x: 15, y: 0))
                key.addCurve(to: CGPoint(x: 30, y: 15), controlPoint1: CGPoint(x: 23.28, y: 0), controlPoint2: CGPoint(x: 30, y: 6.71))
                key.addLine(to: CGPoint(x: 30, y: 15))
                key.addCurve(to: CGPoint(x: 15, y: 30), controlPoint1: CGPoint(x: 30, y: 23.28), controlPoint2: CGPoint(x: 23.29, y: 30))
                key.addLine(to: CGPoint(x: 15, y: 30))
                key.addCurve(to: CGPoint(x: 0, y: 15), controlPoint1: CGPoint(x: 6.72, y: 30), controlPoint2: CGPoint(x: 0, y: 23.29))
                key.addLine(to: CGPoint(x: 0, y: 15))
                key.close()
                context.saveGState()
                key.usesEvenOddFillRule = true
                UIColor.clear.setFill()
                key.fill()
                context.restoreGState()
                
                /// Key (Outline Mask)
                context.saveGState()
                key.addClip()
                
                /// Blur
                let blur = UIBezierPath()
                blur.move(to: CGPoint.zero)
                blur.addLine(to: CGPoint(x: 67.5, y: 0))
                blur.addLine(to: CGPoint(x: 67.5, y: 67.5))
                blur.addLine(to: CGPoint(x: 0, y: 67.5))
                blur.addLine(to: CGPoint.zero)
                blur.close()
                context.saveGState()
                context.translateBy(x: -19, y: -19)
                // Warning: Blur effects are not supported.
                blur.usesEvenOddFillRule = true
                UIColor(hue: 0.601, saturation: 0.085, brightness: 0.847, alpha: 0.89).setFill()
                blur.fill()
                context.restoreGState()
                
                context.restoreGState()
                // End Key (Outline Mask)
                
                context.restoreGState()
            }
            
            /// Recent
            do {
                context.saveGState()
                context.translateBy(x: 7, y: 7)
                
                /// Body
                let body = UIBezierPath()
                body.move(to: CGPoint(x: 8, y: 16))
                body.addCurve(to: CGPoint(x: 16, y: 8), controlPoint1: CGPoint(x: 12.42, y: 16), controlPoint2: CGPoint(x: 16, y: 12.42))
                body.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 16, y: 3.58), controlPoint2: CGPoint(x: 12.42, y: 0))
                body.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 3.58, y: 0), controlPoint2: CGPoint(x: 0, y: 3.58))
                body.addCurve(to: CGPoint(x: 8, y: 16), controlPoint1: CGPoint(x: 0, y: 12.42), controlPoint2: CGPoint(x: 3.58, y: 16))
                body.close()
                context.saveGState()
                context.saveGState()
                body.lineWidth = 2
                context.beginPath()
                context.addPath(body.cgPath)
                context.clip(using: .evenOdd)
                UIColor(hue: 0.594, saturation: 0.237, brightness: 0.38, alpha: 1).setStroke()
                body.stroke()
                context.restoreGState()
                context.restoreGState()
                
                /// Path
                let path = UIBezierPath()
                path.move(to: CGPoint(x: 5, y: 6))
                path.addLine(to: CGPoint(x: 5, y: 7))
                path.addLine(to: CGPoint(x: 2.5, y: 7))
                path.addLine(to: CGPoint(x: 0, y: 7))
                path.addLine(to: CGPoint(x: 0, y: 6))
                path.addLine(to: CGPoint(x: 4, y: 6))
                path.addLine(to: CGPoint(x: 4, y: 0))
                path.addLine(to: CGPoint(x: 5, y: 0))
                path.addLine(to: CGPoint(x: 5, y: 6))
                path.close()
                context.saveGState()
                context.translateBy(x: 4, y: 2)
                path.usesEvenOddFillRule = true
                UIColor(hue: 0.594, saturation: 0.237, brightness: 0.38, alpha: 1).setFill()
                path.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// :D
            do {
                context.saveGState()
                context.translateBy(x: 38.5, y: 7.5)
                
                /// Head
                let head = UIBezierPath()
                head.move(to: CGPoint(x: 7.5, y: 15))
                head.addCurve(to: CGPoint(x: 15, y: 7.5), controlPoint1: CGPoint(x: 11.64, y: 15), controlPoint2: CGPoint(x: 15, y: 11.64))
                head.addCurve(to: CGPoint(x: 7.5, y: 0), controlPoint1: CGPoint(x: 15, y: 3.36), controlPoint2: CGPoint(x: 11.64, y: 0))
                head.addCurve(to: CGPoint(x: 0, y: 7.5), controlPoint1: CGPoint(x: 3.36, y: 0), controlPoint2: CGPoint(x: 0, y: 3.36))
                head.addCurve(to: CGPoint(x: 7.5, y: 15), controlPoint1: CGPoint(x: 0, y: 11.64), controlPoint2: CGPoint(x: 3.36, y: 15))
                head.close()
                context.saveGState()
                head.lineWidth = 0.79
                UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setStroke()
                head.stroke()
                context.restoreGState()
                
                /// Smile
                let smile = UIBezierPath()
                smile.move(to: CGPoint(x: 5.01, y: 5.04))
                smile.addCurve(to: CGPoint(x: 0, y: 0.7), controlPoint1: CGPoint(x: 2.24, y: 5.04), controlPoint2: CGPoint(x: 0, y: 1.89))
                smile.addCurve(to: CGPoint(x: 5.01, y: 0.7), controlPoint1: CGPoint(x: 0, y: -0.88), controlPoint2: CGPoint(x: 1.07, y: 0.7))
                smile.addCurve(to: CGPoint(x: 10.03, y: 0.7), controlPoint1: CGPoint(x: 8.95, y: 0.7), controlPoint2: CGPoint(x: 10.03, y: -0.88))
                smile.addCurve(to: CGPoint(x: 5.01, y: 5.04), controlPoint1: CGPoint(x: 10.03, y: 1.89), controlPoint2: CGPoint(x: 7.78, y: 5.04))
                smile.close()
                smile.move(to: CGPoint(x: 5.01, y: 2.48))
                smile.addCurve(to: CGPoint(x: 9.31, y: 0.96), controlPoint1: CGPoint(x: 6.45, y: 2.68), controlPoint2: CGPoint(x: 9.31, y: 1.89))
                smile.addCurve(to: CGPoint(x: 5.01, y: 1.29), controlPoint1: CGPoint(x: 9.31, y: 0.31), controlPoint2: CGPoint(x: 8.39, y: 1.1))
                smile.addCurve(to: CGPoint(x: 0.72, y: 0.96), controlPoint1: CGPoint(x: 1.64, y: 1.1), controlPoint2: CGPoint(x: 0.72, y: 0.31))
                smile.addCurve(to: CGPoint(x: 5.01, y: 2.48), controlPoint1: CGPoint(x: 0.72, y: 1.89), controlPoint2: CGPoint(x: 3.58, y: 2.68))
                smile.close()
                context.saveGState()
                context.translateBy(x: 2.49, y: 8.48)
                smile.usesEvenOddFillRule = true
                UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                smile.fill()
                context.restoreGState()
                
                /// Eyes
                let eyes = UIBezierPath()
                eyes.move(to: CGPoint(x: 0.74, y: 1.97))
                eyes.addCurve(to: CGPoint(x: 0, y: 0.99), controlPoint1: CGPoint(x: 0.33, y: 1.97), controlPoint2: CGPoint(x: 0, y: 1.53))
                eyes.addCurve(to: CGPoint(x: 0.74, y: 0), controlPoint1: CGPoint(x: 0, y: 0.44), controlPoint2: CGPoint(x: 0.33, y: 0))
                eyes.addCurve(to: CGPoint(x: 1.47, y: 0.99), controlPoint1: CGPoint(x: 1.14, y: 0), controlPoint2: CGPoint(x: 1.47, y: 0.44))
                eyes.addCurve(to: CGPoint(x: 0.74, y: 1.97), controlPoint1: CGPoint(x: 1.47, y: 1.53), controlPoint2: CGPoint(x: 1.14, y: 1.97))
                eyes.close()
                eyes.move(to: CGPoint(x: 5.24, y: 1.97))
                eyes.addCurve(to: CGPoint(x: 4.5, y: 0.99), controlPoint1: CGPoint(x: 4.83, y: 1.97), controlPoint2: CGPoint(x: 4.5, y: 1.53))
                eyes.addCurve(to: CGPoint(x: 5.24, y: 0), controlPoint1: CGPoint(x: 4.5, y: 0.44), controlPoint2: CGPoint(x: 4.83, y: 0))
                eyes.addCurve(to: CGPoint(x: 5.97, y: 0.99), controlPoint1: CGPoint(x: 5.64, y: 0), controlPoint2: CGPoint(x: 5.97, y: 0.44))
                eyes.addCurve(to: CGPoint(x: 5.24, y: 1.97), controlPoint1: CGPoint(x: 5.97, y: 1.53), controlPoint2: CGPoint(x: 5.64, y: 1.97))
                eyes.close()
                context.saveGState()
                context.translateBy(x: 4.5, y: 4.35)
                eyes.usesEvenOddFillRule = true
                UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                eyes.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Nature
            let nature = UIBezierPath()
            nature.move(to: CGPoint(x: 3.5, y: 5))
            nature.addLine(to: CGPoint(x: 1, y: 5))
            nature.addLine(to: CGPoint(x: 4.5, y: 0))
            nature.addLine(to: CGPoint(x: 8, y: 5))
            nature.addLine(to: CGPoint(x: 5.5, y: 5))
            nature.addLine(to: CGPoint(x: 9, y: 10.5))
            nature.addLine(to: CGPoint(x: 6, y: 10.5))
            nature.addLine(to: CGPoint(x: 6, y: 13.5))
            nature.addLine(to: CGPoint(x: 3, y: 13.5))
            nature.addLine(to: CGPoint(x: 3, y: 10.5))
            nature.addLine(to: CGPoint(x: 0, y: 10.5))
            nature.addLine(to: CGPoint(x: 3.5, y: 5))
            nature.close()
            context.saveGState()
            context.translateBy(x: 72.5, y: 8.5)
            context.saveGState()
            nature.lineWidth = 2
            context.beginPath()
            context.addPath(nature.cgPath)
            context.addRect(nature.bounds.insetBy(dx: -20, dy: -20))
            context.clip(using: .evenOdd)
            UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setStroke()
            nature.stroke()
            context.restoreGState()
            context.restoreGState()
            
            /// Food
            do {
                context.saveGState()
                context.translateBy(x: 101, y: 6.5)
                
                /// Drink
                let drink = UIBezierPath()
                drink.move(to: CGPoint(x: 5.5, y: 10.5))
                drink.addLine(to: CGPoint(x: 1, y: 10.5))
                drink.addLine(to: CGPoint.zero)
                drink.addLine(to: CGPoint(x: 6.5, y: 0))
                drink.addLine(to: CGPoint(x: 6.26, y: 2.48))
                context.saveGState()
                context.translateBy(x: 0, y: 5)
                context.saveGState()
                drink.lineWidth = 2
                context.beginPath()
                context.addPath(drink.cgPath)
                context.addRect(drink.bounds.insetBy(dx: -20, dy: -20))
                context.clip(using: .evenOdd)
                UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setStroke()
                drink.stroke()
                context.restoreGState()
                context.restoreGState()
                
                /// Straw
                let straw = UIBezierPath()
                straw.move(to: CGPoint(x: 1.16, y: 1))
                straw.addLine(to: CGPoint(x: 1.66, y: 4.25))
                straw.addLine(to: CGPoint(x: 0.86, y: 4.71))
                straw.addLine(to: CGPoint(x: 0.18, y: 1))
                straw.addLine(to: CGPoint(x: 0, y: 1))
                straw.addLine(to: CGPoint.zero)
                straw.addLine(to: CGPoint(x: 4, y: 0))
                straw.addLine(to: CGPoint(x: 4, y: 1))
                straw.addLine(to: CGPoint(x: 1.16, y: 1))
                straw.close()
                context.saveGState()
                context.translateBy(x: 6.86, y: 3.32)
                context.rotate(by: 384 * CGFloat.pi/180)
                context.translateBy(x: -2, y: -2.36)
                straw.usesEvenOddFillRule = true
                UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                straw.fill()
                context.restoreGState()
                
                /// Bottom Bun
                let bottomBun = UIBezierPath()
                bottomBun.move(to: CGPoint(x: 0, y: 0.75))
                bottomBun.addCurve(to: CGPoint(x: 0.76, y: 0), controlPoint1: CGPoint(x: 0, y: 0.34), controlPoint2: CGPoint(x: 0.34, y: 0))
                bottomBun.addLine(to: CGPoint(x: 9.74, y: 0))
                bottomBun.addCurve(to: CGPoint(x: 10.5, y: 0.75), controlPoint1: CGPoint(x: 10.16, y: 0), controlPoint2: CGPoint(x: 10.5, y: 0.33))
                bottomBun.addLine(to: CGPoint(x: 10.5, y: 0.75))
                bottomBun.addCurve(to: CGPoint(x: 9.74, y: 1.5), controlPoint1: CGPoint(x: 10.5, y: 1.16), controlPoint2: CGPoint(x: 10.16, y: 1.5))
                bottomBun.addLine(to: CGPoint(x: 0.76, y: 1.5))
                bottomBun.addCurve(to: CGPoint(x: 0, y: 0.75), controlPoint1: CGPoint(x: 0.34, y: 1.5), controlPoint2: CGPoint(x: 0, y: 1.17))
                bottomBun.addLine(to: CGPoint(x: 0, y: 0.75))
                bottomBun.close()
                context.saveGState()
                context.translateBy(x: 3, y: 14)
                context.saveGState()
                bottomBun.lineWidth = 2
                context.beginPath()
                context.addPath(bottomBun.cgPath)
                context.addRect(bottomBun.bounds.insetBy(dx: -20, dy: -20))
                context.clip(using: .evenOdd)
                UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setStroke()
                bottomBun.stroke()
                context.restoreGState()
                context.restoreGState()
                
                /// "Patty"
                let patty = UIBezierPath()
                patty.move(to: CGPoint(x: 2.5, y: 0))
                patty.addCurve(to: CGPoint(x: 2.43, y: 0.34), controlPoint1: CGPoint(x: 1.94, y: 0), controlPoint2: CGPoint(x: 1.92, y: 0.15))
                patty.addLine(to: CGPoint(x: 7, y: 2))
                patty.addLine(to: CGPoint(x: 11.57, y: 0.34))
                patty.addCurve(to: CGPoint(x: 11.5, y: 0), controlPoint1: CGPoint(x: 12.09, y: 0.15), controlPoint2: CGPoint(x: 12.05, y: 0))
                patty.addLine(to: CGPoint(x: 12.51, y: 0))
                patty.addCurve(to: CGPoint(x: 13.5, y: 1), controlPoint1: CGPoint(x: 13.06, y: 0), controlPoint2: CGPoint(x: 13.5, y: 0.45))
                patty.addLine(to: CGPoint(x: 13.5, y: 1.5))
                patty.addCurve(to: CGPoint(x: 12.51, y: 2.5), controlPoint1: CGPoint(x: 13.5, y: 2.05), controlPoint2: CGPoint(x: 13.05, y: 2.5))
                patty.addLine(to: CGPoint(x: 0.99, y: 2.5))
                patty.addCurve(to: CGPoint(x: 0, y: 1.5), controlPoint1: CGPoint(x: 0.44, y: 2.5), controlPoint2: CGPoint(x: 0, y: 2.05))
                patty.addLine(to: CGPoint(x: 0, y: 1))
                patty.addCurve(to: CGPoint(x: 0.99, y: 0), controlPoint1: CGPoint(x: 0, y: 0.45), controlPoint2: CGPoint(x: 0.45, y: 0))
                patty.addLine(to: CGPoint(x: 2.5, y: 0))
                patty.close()
                context.saveGState()
                context.translateBy(x: 1.5, y: 11.5)
                patty.usesEvenOddFillRule = true
                UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                patty.fill()
                context.restoreGState()
                
                /// Cheese
                let cheese = UIBezierPath()
                cheese.move(to: CGPoint(x: 1.5, y: 0))
                cheese.addLine(to: CGPoint(x: 12.5, y: 0))
                cheese.addLine(to: CGPoint(x: 14, y: 1))
                cheese.addLine(to: CGPoint(x: 0, y: 1))
                cheese.addLine(to: CGPoint(x: 1.5, y: 0))
                cheese.close()
                context.saveGState()
                context.translateBy(x: 1, y: 10.5)
                cheese.usesEvenOddFillRule = true
                UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                cheese.fill()
                context.restoreGState()
                
                /// Top Bun
                let topBun = UIBezierPath()
                topBun.move(to: CGPoint(x: 5.75, y: 2.5))
                topBun.addCurve(to: CGPoint(x: 11.5, y: 1.5), controlPoint1: CGPoint(x: 8.93, y: 2.5), controlPoint2: CGPoint(x: 11.5, y: 2.33))
                topBun.addCurve(to: CGPoint(x: 5.75, y: 0), controlPoint1: CGPoint(x: 11.5, y: 0.67), controlPoint2: CGPoint(x: 8.93, y: 0))
                topBun.addCurve(to: CGPoint(x: 0, y: 1.5), controlPoint1: CGPoint(x: 2.57, y: 0), controlPoint2: CGPoint(x: 0, y: 0.67))
                topBun.addCurve(to: CGPoint(x: 5.75, y: 2.5), controlPoint1: CGPoint(x: 0, y: 2.33), controlPoint2: CGPoint(x: 2.57, y: 2.5))
                topBun.close()
                context.saveGState()
                context.translateBy(x: 2.5, y: 8)
                context.saveGState()
                topBun.lineWidth = 1.5
                context.beginPath()
                context.addPath(topBun.cgPath)
                context.addRect(topBun.bounds.insetBy(dx: -15, dy: -15))
                context.clip(using: .evenOdd)
                UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setStroke()
                topBun.stroke()
                context.restoreGState()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Celebration
            do {
                context.saveGState()
                context.translateBy(x: 131, y: 7)
                
                /// Cone Thing
                do {
                    context.saveGState()
                    context.translateBy(x: 1.5, y: 5)
                    
                    /// Rectangle
                    let rectangle8 = UIBezierPath()
                    rectangle8.move(to: CGPoint(x: 7.5, y: 4))
                    rectangle8.addLine(to: CGPoint(x: 0, y: 7.5))
                    rectangle8.addLine(to: CGPoint(x: 3, y: 0))
                    context.saveGState()
                    context.translateBy(x: 0, y: 2.5)
                    rectangle8.lineJoinStyle = .round
                    rectangle8.lineCapStyle = .round
                    context.saveGState()
                    rectangle8.lineWidth = 2
                    context.beginPath()
                    context.addPath(rectangle8.cgPath)
                    context.addRect(rectangle8.bounds.insetBy(dx: -20, dy: -20))
                    context.clip(using: .evenOdd)
                    UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setStroke()
                    rectangle8.stroke()
                    context.restoreGState()
                    context.restoreGState()
                    
                    /// Oval
                    let oval = UIBezierPath()
                    oval.move(to: CGPoint(x: 3.75, y: 2))
                    oval.addCurve(to: CGPoint(x: 7.5, y: 1), controlPoint1: CGPoint(x: 5.82, y: 2), controlPoint2: CGPoint(x: 7.5, y: 1.55))
                    oval.addCurve(to: CGPoint(x: 3.75, y: 0), controlPoint1: CGPoint(x: 7.5, y: 0.45), controlPoint2: CGPoint(x: 5.82, y: 0))
                    oval.addCurve(to: CGPoint(x: 0, y: 1), controlPoint1: CGPoint(x: 1.68, y: 0), controlPoint2: CGPoint(x: 0, y: 0.45))
                    oval.addCurve(to: CGPoint(x: 3.75, y: 2), controlPoint1: CGPoint(x: 0, y: 1.55), controlPoint2: CGPoint(x: 1.68, y: 2))
                    oval.close()
                    context.saveGState()
                    context.translateBy(x: 6.32, y: 3.43)
                    context.rotate(by: 45 * CGFloat.pi/180)
                    context.translateBy(x: -3.75, y: -1)
                    oval.lineJoinStyle = .round
                    oval.lineCapStyle = .round
                    context.saveGState()
                    oval.lineWidth = 2
                    context.beginPath()
                    context.addPath(oval.cgPath)
                    context.addRect(oval.bounds.insetBy(dx: -20, dy: -20))
                    context.clip(using: .evenOdd)
                    UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setStroke()
                    oval.stroke()
                    context.restoreGState()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// Confetti
                do {
                    context.saveGState()
                    
                    /// Confetti
                    let confetti = UIBezierPath()
                    confetti.move(to: CGPoint.zero)
                    confetti.addLine(to: CGPoint(x: 1.2, y: 0))
                    confetti.addLine(to: CGPoint(x: 1.2, y: 1.2))
                    confetti.addLine(to: CGPoint(x: 0, y: 1.2))
                    confetti.addLine(to: CGPoint.zero)
                    confetti.close()
                    context.saveGState()
                    context.translateBy(x: 0.4, y: 6.9)
                    confetti.usesEvenOddFillRule = true
                    UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                    confetti.fill()
                    context.restoreGState()
                    
                    /// Confetti
                    let confetti2 = UIBezierPath()
                    confetti2.move(to: CGPoint.zero)
                    confetti2.addLine(to: CGPoint(x: 1.2, y: 0))
                    confetti2.addLine(to: CGPoint(x: 1.2, y: 1.2))
                    confetti2.addLine(to: CGPoint(x: 0, y: 1.2))
                    confetti2.addLine(to: CGPoint.zero)
                    confetti2.close()
                    context.saveGState()
                    context.translateBy(x: 8.4, y: 1.4)
                    confetti2.usesEvenOddFillRule = true
                    UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                    confetti2.fill()
                    context.restoreGState()
                    
                    /// Confetti
                    let confetti3 = UIBezierPath()
                    confetti3.move(to: CGPoint.zero)
                    confetti3.addLine(to: CGPoint(x: 1.2, y: 0))
                    confetti3.addLine(to: CGPoint(x: 1.2, y: 1.2))
                    confetti3.addLine(to: CGPoint(x: 0, y: 1.2))
                    confetti3.addLine(to: CGPoint.zero)
                    confetti3.close()
                    context.saveGState()
                    context.translateBy(x: 10.9, y: 0.4)
                    confetti3.usesEvenOddFillRule = true
                    UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                    confetti3.fill()
                    context.restoreGState()
                    
                    /// Confetti
                    let confetti4 = UIBezierPath()
                    confetti4.move(to: CGPoint.zero)
                    confetti4.addLine(to: CGPoint(x: 1.2, y: 0))
                    confetti4.addLine(to: CGPoint(x: 1.2, y: 1.2))
                    confetti4.addLine(to: CGPoint(x: 0, y: 1.2))
                    confetti4.addLine(to: CGPoint.zero)
                    confetti4.close()
                    context.saveGState()
                    context.translateBy(x: 9.9, y: 12.9)
                    confetti4.usesEvenOddFillRule = true
                    UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                    confetti4.fill()
                    context.restoreGState()
                    
                    /// Confetti
                    let confetti5 = UIBezierPath()
                    confetti5.move(to: CGPoint.zero)
                    confetti5.addLine(to: CGPoint(x: 1.2, y: 0))
                    confetti5.addLine(to: CGPoint(x: 1.2, y: 1.2))
                    confetti5.addLine(to: CGPoint(x: 0, y: 1.2))
                    confetti5.addLine(to: CGPoint.zero)
                    confetti5.close()
                    context.saveGState()
                    context.translateBy(x: 13.9, y: 13.9)
                    confetti5.usesEvenOddFillRule = true
                    UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                    confetti5.fill()
                    context.restoreGState()
                    
                    /// Confetti
                    let confetti6 = UIBezierPath()
                    confetti6.move(to: CGPoint.zero)
                    confetti6.addLine(to: CGPoint(x: 1.2, y: 0))
                    confetti6.addLine(to: CGPoint(x: 1.2, y: 1.2))
                    confetti6.addLine(to: CGPoint(x: 0, y: 1.2))
                    confetti6.addLine(to: CGPoint.zero)
                    confetti6.close()
                    context.saveGState()
                    context.translateBy(x: 12.9, y: 10.9)
                    confetti6.usesEvenOddFillRule = true
                    UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                    confetti6.fill()
                    context.restoreGState()
                    
                    /// Confetti
                    let confetti7 = UIBezierPath()
                    confetti7.move(to: CGPoint.zero)
                    confetti7.addLine(to: CGPoint(x: 1.2, y: 0))
                    confetti7.addLine(to: CGPoint(x: 1.2, y: 1.2))
                    confetti7.addLine(to: CGPoint(x: 0, y: 1.2))
                    confetti7.addLine(to: CGPoint.zero)
                    confetti7.close()
                    context.saveGState()
                    context.translateBy(x: 14.9, y: 9.4)
                    confetti7.usesEvenOddFillRule = true
                    UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                    confetti7.fill()
                    context.restoreGState()
                    
                    /// Streamers
                    let streamers = UIBezierPath()
                    streamers.move(to: CGPoint(x: 1.1, y: 0))
                    streamers.addCurve(to: CGPoint(x: 0.1, y: 1.5), controlPoint1: CGPoint(x: 1.1, y: 0), controlPoint2: CGPoint(x: -0.4, y: 1))
                    streamers.addCurve(to: CGPoint(x: 1.6, y: 2.5), controlPoint1: CGPoint(x: 0.6, y: 2), controlPoint2: CGPoint(x: 2.1, y: 2))
                    streamers.addCurve(to: CGPoint(x: 0.6, y: 4), controlPoint1: CGPoint(x: 1.1, y: 3), controlPoint2: CGPoint(x: 0.1, y: 4))
                    streamers.addCurve(to: CGPoint(x: 3.1, y: 3.5), controlPoint1: CGPoint(x: 1.1, y: 4), controlPoint2: CGPoint(x: 3.1, y: 3))
                    streamers.addCurve(to: CGPoint(x: 2.1, y: 5.5), controlPoint1: CGPoint(x: 3.1, y: 4), controlPoint2: CGPoint(x: 2.1, y: 5.5))
                    context.saveGState()
                    context.translateBy(x: 0.4, y: 0)
                    streamers.lineWidth = 0.75
                    UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setStroke()
                    streamers.stroke()
                    context.restoreGState()
                    
                    /// Streamers
                    let streamers2 = UIBezierPath()
                    streamers2.move(to: CGPoint(x: 0, y: 1.08))
                    streamers2.addCurve(to: CGPoint(x: 1, y: 5.58), controlPoint1: CGPoint(x: 0, y: -1.42), controlPoint2: CGPoint(x: 4, y: 0.58))
                    context.saveGState()
                    context.translateBy(x: 5, y: 2.42)
                    streamers2.lineWidth = 0.75
                    UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setStroke()
                    streamers2.stroke()
                    context.restoreGState()
                    
                    /// Streamers
                    let streamers3 = UIBezierPath()
                    streamers3.move(to: CGPoint(x: 0, y: 2))
                    streamers3.addCurve(to: CGPoint(x: 6.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2), controlPoint2: CGPoint(x: 1, y: 0))
                    context.saveGState()
                    context.translateBy(x: 8, y: 8)
                    streamers3.lineWidth = 0.75
                    UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setStroke()
                    streamers3.stroke()
                    context.restoreGState()
                    
                    /// Streamers
                    let streamers4 = UIBezierPath()
                    streamers4.move(to: CGPoint(x: 0.13, y: 5))
                    streamers4.addCurve(to: CGPoint(x: 0.63, y: 3), controlPoint1: CGPoint(x: 0.13, y: 5), controlPoint2: CGPoint(x: -0.38, y: 3.5))
                    streamers4.addCurve(to: CGPoint(x: 2.63, y: 4), controlPoint1: CGPoint(x: 1.63, y: 2.5), controlPoint2: CGPoint(x: 1.63, y: 4.5))
                    streamers4.addCurve(to: CGPoint(x: 2.63, y: 2), controlPoint1: CGPoint(x: 3.63, y: 3.5), controlPoint2: CGPoint(x: 2.13, y: 2.5))
                    streamers4.addCurve(to: CGPoint(x: 4.63, y: 1.5), controlPoint1: CGPoint(x: 3.13, y: 1.5), controlPoint2: CGPoint(x: 4.13, y: 2.5))
                    streamers4.addCurve(to: CGPoint(x: 3.63, y: 0), controlPoint1: CGPoint(x: 5.13, y: 0.5), controlPoint2: CGPoint(x: 3.63, y: 0))
                    context.saveGState()
                    context.translateBy(x: 10.87, y: 1)
                    streamers4.lineWidth = 0.75
                    UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setStroke()
                    streamers4.stroke()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            /// Activities
            do {
                context.saveGState()
                context.translateBy(x: 162.5, y: 7)
                
                /// Body
                let body2 = UIBezierPath()
                body2.move(to: CGPoint(x: 6, y: 0))
                body2.addLine(to: CGPoint(x: 9, y: 0.5))
                body2.addLine(to: CGPoint(x: 11, y: 2.5))
                body2.addLine(to: CGPoint(x: 11.5, y: 4))
                body2.addLine(to: CGPoint(x: 15, y: 4.5))
                body2.addLine(to: CGPoint(x: 14.5, y: 5.25))
                body2.addLine(to: CGPoint(x: 11, y: 5.25))
                body2.addLine(to: CGPoint(x: 9.5, y: 3.5))
                body2.addLine(to: CGPoint(x: 8, y: 6))
                body2.addLine(to: CGPoint(x: 11.5, y: 8.5))
                body2.addLine(to: CGPoint(x: 8.5, y: 13.5))
                body2.addLine(to: CGPoint(x: 7, y: 12.5))
                body2.addLine(to: CGPoint(x: 9.5, y: 9))
                body2.addLine(to: CGPoint(x: 7, y: 7))
                body2.addLine(to: CGPoint(x: 5, y: 9.5))
                body2.addLine(to: CGPoint(x: 0, y: 9))
                body2.addLine(to: CGPoint(x: 0, y: 7.5))
                body2.addLine(to: CGPoint(x: 4, y: 8))
                body2.addLine(to: CGPoint(x: 7.5, y: 1.5))
                body2.addLine(to: CGPoint(x: 5.5, y: 1.5))
                body2.addLine(to: CGPoint(x: 3.5, y: 3))
                body2.addLine(to: CGPoint(x: 3, y: 2))
                body2.addLine(to: CGPoint(x: 6, y: 0))
                body2.close()
                context.saveGState()
                context.translateBy(x: 0, y: 2.5)
                body2.usesEvenOddFillRule = true
                UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                body2.fill()
                context.restoreGState()
                
                /// Head
                let head2 = UIBezierPath()
                head2.move(to: CGPoint(x: 1.63, y: 3.25))
                head2.addCurve(to: CGPoint(x: 3.25, y: 1.63), controlPoint1: CGPoint(x: 2.52, y: 3.25), controlPoint2: CGPoint(x: 3.25, y: 2.52))
                head2.addCurve(to: CGPoint(x: 1.63, y: 0), controlPoint1: CGPoint(x: 3.25, y: 0.73), controlPoint2: CGPoint(x: 2.52, y: 0))
                head2.addCurve(to: CGPoint(x: 0, y: 1.63), controlPoint1: CGPoint(x: 0.73, y: 0), controlPoint2: CGPoint(x: 0, y: 0.73))
                head2.addCurve(to: CGPoint(x: 1.63, y: 3.25), controlPoint1: CGPoint(x: 0, y: 2.52), controlPoint2: CGPoint(x: 0.73, y: 3.25))
                head2.close()
                context.saveGState()
                context.translateBy(x: 9.5, y: 0)
                head2.usesEvenOddFillRule = true
                UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                head2.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Transport
            do {
                context.saveGState()
                context.translateBy(x: 193, y: 7)
                
                /// Skyline
                let skyline = UIBezierPath()
                skyline.move(to: CGPoint(x: 10.5, y: 5))
                skyline.addLine(to: CGPoint(x: 10.5, y: 6))
                skyline.addLine(to: CGPoint(x: 9.5, y: 6))
                skyline.addLine(to: CGPoint(x: 9.5, y: 1))
                skyline.addLine(to: CGPoint(x: 4.5, y: 1))
                skyline.addLine(to: CGPoint(x: 4.5, y: 7))
                skyline.addLine(to: CGPoint(x: 3.5, y: 7))
                skyline.addLine(to: CGPoint(x: 1, y: 7))
                skyline.addLine(to: CGPoint(x: 1, y: 15))
                skyline.addLine(to: CGPoint(x: 0, y: 15))
                skyline.addLine(to: CGPoint(x: 0, y: 6))
                skyline.addLine(to: CGPoint(x: 1, y: 6))
                skyline.addLine(to: CGPoint(x: 3.5, y: 6))
                skyline.addLine(to: CGPoint(x: 3.5, y: 0))
                skyline.addLine(to: CGPoint(x: 4.5, y: 0))
                skyline.addLine(to: CGPoint(x: 9.5, y: 0))
                skyline.addLine(to: CGPoint(x: 10.5, y: 0))
                skyline.addLine(to: CGPoint(x: 10.5, y: 4))
                skyline.addLine(to: CGPoint(x: 15, y: 4))
                skyline.addLine(to: CGPoint(x: 16, y: 4))
                skyline.addLine(to: CGPoint(x: 16, y: 15))
                skyline.addLine(to: CGPoint(x: 15, y: 15))
                skyline.addLine(to: CGPoint(x: 15, y: 5))
                skyline.addLine(to: CGPoint(x: 10.5, y: 5))
                skyline.close()
                context.saveGState()
                skyline.usesEvenOddFillRule = true
                UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                skyline.fill()
                context.restoreGState()
                
                /// Windows
                do {
                    context.saveGState()
                    context.translateBy(x: 2, y: 2)
                    
                    /// Window
                    let window = UIBezierPath()
                    window.move(to: CGPoint.zero)
                    window.addLine(to: CGPoint(x: 1, y: 0))
                    window.addLine(to: CGPoint(x: 1, y: 1))
                    window.addLine(to: CGPoint(x: 0, y: 1))
                    window.addLine(to: CGPoint.zero)
                    window.close()
                    context.saveGState()
                    context.translateBy(x: 0, y: 6)
                    window.usesEvenOddFillRule = true
                    UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                    window.fill()
                    context.restoreGState()
                    
                    /// Window
                    let window2 = UIBezierPath()
                    window2.move(to: CGPoint.zero)
                    window2.addLine(to: CGPoint(x: 1, y: 0))
                    window2.addLine(to: CGPoint(x: 1, y: 1))
                    window2.addLine(to: CGPoint(x: 0, y: 1))
                    window2.addLine(to: CGPoint.zero)
                    window2.close()
                    context.saveGState()
                    context.translateBy(x: 3.5, y: 0)
                    window2.usesEvenOddFillRule = true
                    UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                    window2.fill()
                    context.restoreGState()
                    
                    /// Window
                    let window3 = UIBezierPath()
                    window3.move(to: CGPoint.zero)
                    window3.addLine(to: CGPoint(x: 1, y: 0))
                    window3.addLine(to: CGPoint(x: 1, y: 1))
                    window3.addLine(to: CGPoint(x: 0, y: 1))
                    window3.addLine(to: CGPoint.zero)
                    window3.close()
                    context.saveGState()
                    context.translateBy(x: 5.5, y: 0)
                    window3.usesEvenOddFillRule = true
                    UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                    window3.fill()
                    context.restoreGState()
                    
                    /// Window
                    let window4 = UIBezierPath()
                    window4.move(to: CGPoint.zero)
                    window4.addLine(to: CGPoint(x: 1, y: 0))
                    window4.addLine(to: CGPoint(x: 1, y: 1))
                    window4.addLine(to: CGPoint(x: 0, y: 1))
                    window4.addLine(to: CGPoint.zero)
                    window4.close()
                    context.saveGState()
                    context.translateBy(x: 5.5, y: 2)
                    window4.usesEvenOddFillRule = true
                    UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                    window4.fill()
                    context.restoreGState()
                    
                    /// Window
                    let window5 = UIBezierPath()
                    window5.move(to: CGPoint.zero)
                    window5.addLine(to: CGPoint(x: 1, y: 0))
                    window5.addLine(to: CGPoint(x: 1, y: 1))
                    window5.addLine(to: CGPoint(x: 0, y: 1))
                    window5.addLine(to: CGPoint.zero)
                    window5.close()
                    context.saveGState()
                    context.translateBy(x: 3.5, y: 2)
                    window5.usesEvenOddFillRule = true
                    UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                    window5.fill()
                    context.restoreGState()
                    
                    /// Window
                    let window6 = UIBezierPath()
                    window6.move(to: CGPoint.zero)
                    window6.addLine(to: CGPoint(x: 1, y: 0))
                    window6.addLine(to: CGPoint(x: 1, y: 1))
                    window6.addLine(to: CGPoint(x: 0, y: 1))
                    window6.addLine(to: CGPoint.zero)
                    window6.close()
                    context.saveGState()
                    context.translateBy(x: 11, y: 4)
                    window6.usesEvenOddFillRule = true
                    UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                    window6.fill()
                    context.restoreGState()
                    
                    /// Window
                    let window7 = UIBezierPath()
                    window7.move(to: CGPoint.zero)
                    window7.addLine(to: CGPoint(x: 1, y: 0))
                    window7.addLine(to: CGPoint(x: 1, y: 1))
                    window7.addLine(to: CGPoint(x: 0, y: 1))
                    window7.addLine(to: CGPoint.zero)
                    window7.close()
                    context.saveGState()
                    context.translateBy(x: 11, y: 6)
                    window7.usesEvenOddFillRule = true
                    UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                    window7.fill()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// Car
                do {
                    context.saveGState()
                    context.translateBy(x: 2.5, y: 6.5)
                    
                    /// Body
                    let body3 = UIBezierPath()
                    body3.move(to: CGPoint(x: 8.5, y: 4))
                    body3.addLine(to: CGPoint(x: 2.5, y: 4))
                    body3.addLine(to: CGPoint(x: 2.5, y: 5.5))
                    body3.addLine(to: CGPoint(x: 0.5, y: 5.5))
                    body3.addLine(to: CGPoint(x: 0.5, y: 3.87))
                    body3.addCurve(to: CGPoint(x: 0, y: 2.99), controlPoint1: CGPoint(x: 0.2, y: 3.7), controlPoint2: CGPoint(x: 0, y: 3.37))
                    body3.addLine(to: CGPoint(x: 0, y: 1.01))
                    body3.addCurve(to: CGPoint(x: 1, y: 0), controlPoint1: CGPoint(x: 0, y: 0.45), controlPoint2: CGPoint(x: 0.44, y: 0))
                    body3.addLine(to: CGPoint(x: 10, y: 0))
                    body3.addCurve(to: CGPoint(x: 11, y: 1.01), controlPoint1: CGPoint(x: 10.55, y: 0), controlPoint2: CGPoint(x: 11, y: 0.44))
                    body3.addLine(to: CGPoint(x: 11, y: 2.99))
                    body3.addCurve(to: CGPoint(x: 10.5, y: 3.87), controlPoint1: CGPoint(x: 11, y: 3.37), controlPoint2: CGPoint(x: 10.8, y: 3.69))
                    body3.addLine(to: CGPoint(x: 10.5, y: 5.5))
                    body3.addLine(to: CGPoint(x: 8.5, y: 5.5))
                    body3.addLine(to: CGPoint(x: 8.5, y: 4))
                    body3.close()
                    body3.move(to: CGPoint(x: 8.5, y: 3.5))
                    body3.addLine(to: CGPoint(x: 10.5, y: 3.5))
                    body3.addLine(to: CGPoint(x: 10.5, y: 3))
                    body3.addLine(to: CGPoint(x: 0.5, y: 3))
                    body3.addLine(to: CGPoint(x: 0.5, y: 3.5))
                    body3.addLine(to: CGPoint(x: 2.5, y: 3.5))
                    body3.addLine(to: CGPoint(x: 8.5, y: 3.5))
                    body3.close()
                    body3.move(to: CGPoint(x: 1.75, y: 2.5))
                    body3.addCurve(to: CGPoint(x: 2.5, y: 1.75), controlPoint1: CGPoint(x: 2.16, y: 2.5), controlPoint2: CGPoint(x: 2.5, y: 2.16))
                    body3.addCurve(to: CGPoint(x: 1.75, y: 1), controlPoint1: CGPoint(x: 2.5, y: 1.34), controlPoint2: CGPoint(x: 2.16, y: 1))
                    body3.addCurve(to: CGPoint(x: 1, y: 1.75), controlPoint1: CGPoint(x: 1.34, y: 1), controlPoint2: CGPoint(x: 1, y: 1.34))
                    body3.addCurve(to: CGPoint(x: 1.75, y: 2.5), controlPoint1: CGPoint(x: 1, y: 2.16), controlPoint2: CGPoint(x: 1.34, y: 2.5))
                    body3.close()
                    body3.move(to: CGPoint(x: 9.25, y: 2.5))
                    body3.addCurve(to: CGPoint(x: 10, y: 1.75), controlPoint1: CGPoint(x: 9.66, y: 2.5), controlPoint2: CGPoint(x: 10, y: 2.16))
                    body3.addCurve(to: CGPoint(x: 9.25, y: 1), controlPoint1: CGPoint(x: 10, y: 1.34), controlPoint2: CGPoint(x: 9.66, y: 1))
                    body3.addCurve(to: CGPoint(x: 8.5, y: 1.75), controlPoint1: CGPoint(x: 8.84, y: 1), controlPoint2: CGPoint(x: 8.5, y: 1.34))
                    body3.addCurve(to: CGPoint(x: 9.25, y: 2.5), controlPoint1: CGPoint(x: 8.5, y: 2.16), controlPoint2: CGPoint(x: 8.84, y: 2.5))
                    body3.close()
                    body3.move(to: CGPoint(x: 3, y: 2.5))
                    body3.addLine(to: CGPoint(x: 3, y: 3))
                    body3.addLine(to: CGPoint(x: 8, y: 3))
                    body3.addLine(to: CGPoint(x: 8, y: 2.5))
                    body3.addLine(to: CGPoint(x: 3, y: 2.5))
                    body3.close()
                    context.saveGState()
                    context.translateBy(x: 0, y: 4)
                    body3.usesEvenOddFillRule = true
                    UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                    body3.fill()
                    context.restoreGState()
                    
                    /// Roof
                    let roof = UIBezierPath()
                    roof.move(to: CGPoint(x: 0, y: 4.5))
                    roof.addLine(to: CGPoint(x: 0, y: 3))
                    roof.addCurve(to: CGPoint(x: 3, y: 0), controlPoint1: CGPoint(x: 0, y: 1.34), controlPoint2: CGPoint(x: 1.34, y: 0))
                    roof.addLine(to: CGPoint(x: 5, y: 0))
                    roof.addCurve(to: CGPoint(x: 8, y: 3), controlPoint1: CGPoint(x: 6.66, y: 0), controlPoint2: CGPoint(x: 8, y: 1.35))
                    roof.addLine(to: CGPoint(x: 8, y: 5))
                    context.saveGState()
                    context.translateBy(x: 1.5, y: 0)
                    context.saveGState()
                    roof.lineWidth = 2
                    context.beginPath()
                    context.addPath(roof.cgPath)
                    context.clip(using: .evenOdd)
                    UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setStroke()
                    roof.stroke()
                    context.restoreGState()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            /// Flag
            do {
                context.saveGState()
                context.translateBy(x: 226.5, y: 8.5)
                
                /// Pole
                let pole = UIBezierPath()
                pole.move(to: CGPoint.zero)
                pole.addLine(to: CGPoint(x: 1, y: 0))
                pole.addLine(to: CGPoint(x: 1, y: 14))
                pole.addLine(to: CGPoint(x: 0, y: 14))
                pole.addLine(to: CGPoint.zero)
                pole.close()
                context.saveGState()
                pole.usesEvenOddFillRule = true
                UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                pole.fill()
                context.restoreGState()
                
                /// Flag
                let flag = UIBezierPath()
                flag.move(to: CGPoint(x: 0, y: 0.25))
                flag.addCurve(to: CGPoint(x: 2.5, y: 1.25), controlPoint1: CGPoint(x: 0, y: 0.25), controlPoint2: CGPoint(x: 0.25, y: 1.25))
                flag.addCurve(to: CGPoint(x: 7, y: 0), controlPoint1: CGPoint(x: 4.75, y: 1.25), controlPoint2: CGPoint(x: 5, y: -0))
                flag.addCurve(to: CGPoint(x: 9, y: 0.75), controlPoint1: CGPoint(x: 9, y: -0), controlPoint2: CGPoint(x: 9, y: 0.75))
                flag.addLine(to: CGPoint(x: 9, y: 6.75))
                flag.addCurve(to: CGPoint(x: 7, y: 5.75), controlPoint1: CGPoint(x: 9, y: 6.75), controlPoint2: CGPoint(x: 9, y: 5.75))
                flag.addCurve(to: CGPoint(x: 2.5, y: 7.25), controlPoint1: CGPoint(x: 5, y: 5.75), controlPoint2: CGPoint(x: 3.81, y: 7.25))
                flag.addCurve(to: CGPoint(x: 0, y: 6.25), controlPoint1: CGPoint(x: 1.19, y: 7.25), controlPoint2: CGPoint(x: 0, y: 6.25))
                flag.addLine(to: CGPoint(x: 0, y: 0.25))
                flag.close()
                context.saveGState()
                context.translateBy(x: 1, y: 0.75)
                flag.lineJoinStyle = .round
                context.saveGState()
                flag.lineWidth = 2
                context.beginPath()
                context.addPath(flag.cgPath)
                context.addRect(flag.bounds.insetBy(dx: -20, dy: -20))
                context.clip(using: .evenOdd)
                UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setStroke()
                flag.stroke()
                context.restoreGState()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Objects & Symbols
            do {
                context.saveGState()
                context.translateBy(x: 255.5, y: 7)
                
                /// Thing
                do {
                    context.saveGState()
                    context.translateBy(x: 0, y: 0.5)
                    
                    /// Rectangle
                    let rectangle9 = UIBezierPath()
                    rectangle9.move(to: CGPoint.zero)
                    rectangle9.addLine(to: CGPoint(x: 7, y: 0))
                    rectangle9.addLine(to: CGPoint(x: 7, y: 1))
                    rectangle9.addLine(to: CGPoint(x: 0, y: 1))
                    rectangle9.addLine(to: CGPoint.zero)
                    rectangle9.close()
                    context.saveGState()
                    rectangle9.usesEvenOddFillRule = true
                    UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                    rectangle9.fill()
                    context.restoreGState()
                    
                    /// Rectangle
                    let rectangle10 = UIBezierPath()
                    rectangle10.move(to: CGPoint.zero)
                    rectangle10.addLine(to: CGPoint(x: 7, y: 0))
                    rectangle10.addLine(to: CGPoint(x: 7, y: 1))
                    rectangle10.addLine(to: CGPoint(x: 0, y: 1))
                    rectangle10.addLine(to: CGPoint.zero)
                    rectangle10.close()
                    context.saveGState()
                    context.translateBy(x: 0, y: 2)
                    rectangle10.usesEvenOddFillRule = true
                    UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                    rectangle10.fill()
                    context.restoreGState()
                    
                    /// Rectangle
                    let rectangle11 = UIBezierPath()
                    rectangle11.move(to: CGPoint.zero)
                    rectangle11.addLine(to: CGPoint(x: 1, y: 0))
                    rectangle11.addLine(to: CGPoint(x: 1, y: 4))
                    rectangle11.addLine(to: CGPoint(x: 0, y: 4))
                    rectangle11.addLine(to: CGPoint.zero)
                    rectangle11.close()
                    context.saveGState()
                    context.translateBy(x: 3, y: 3)
                    rectangle11.usesEvenOddFillRule = true
                    UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                    rectangle11.fill()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// Note
                let note = UIBezierPath()
                note.move(to: CGPoint(x: 3.32, y: 1.39))
                note.addLine(to: CGPoint(x: 3.32, y: 6))
                note.addLine(to: CGPoint(x: 3.27, y: 6))
                note.addCurve(to: CGPoint(x: 2.14, y: 7.47), controlPoint1: CGPoint(x: 3.29, y: 6.56), controlPoint2: CGPoint(x: 2.85, y: 7.16))
                note.addCurve(to: CGPoint(x: 0.08, y: 7.02), controlPoint1: CGPoint(x: 1.29, y: 7.86), controlPoint2: CGPoint(x: 0.36, y: 7.65))
                note.addCurve(to: CGPoint(x: 1.13, y: 5.19), controlPoint1: CGPoint(x: -0.2, y: 6.39), controlPoint2: CGPoint(x: 0.27, y: 5.57))
                note.addCurve(to: CGPoint(x: 2.57, y: 5.09), controlPoint1: CGPoint(x: 1.63, y: 4.96), controlPoint2: CGPoint(x: 2.16, y: 4.94))
                note.addLine(to: CGPoint(x: 2.57, y: 0))
                note.addLine(to: CGPoint(x: 3.32, y: 0))
                note.addLine(to: CGPoint(x: 3.32, y: 0.16))
                note.addCurve(to: CGPoint(x: 5.32, y: 2.5), controlPoint1: CGPoint(x: 4.13, y: 0.41), controlPoint2: CGPoint(x: 5.32, y: 1.02))
                note.addCurve(to: CGPoint(x: 4.32, y: 5.5), controlPoint1: CGPoint(x: 5.32, y: 4.75), controlPoint2: CGPoint(x: 4.32, y: 5.5))
                note.addCurve(to: CGPoint(x: 4.57, y: 3.25), controlPoint1: CGPoint(x: 4.32, y: 5.5), controlPoint2: CGPoint(x: 4.57, y: 4.25))
                note.addCurve(to: CGPoint(x: 3.32, y: 1.39), controlPoint1: CGPoint(x: 4.57, y: 2.08), controlPoint2: CGPoint(x: 3.89, y: 1.6))
                note.close()
                context.saveGState()
                context.translateBy(x: 8.43, y: -0)
                note.usesEvenOddFillRule = true
                UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                note.fill()
                context.restoreGState()
                
                /// &
                let layer = NSMutableAttributedString(string: "&")
                layer.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 9.5)!, range: NSRange(location: 0, length: layer.length))
                layer.addAttribute(.foregroundColor, value: UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1), range: NSRange(location: 0, length: layer.length))
                context.saveGState()
                layer.draw(at: CGPoint(x: 0.25, y: 7))
                context.restoreGState()
                
                /// %
                let layer2 = NSMutableAttributedString(string: "%")
                layer2.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 9.5)!, range: NSRange(location: 0, length: layer2.length))
                layer2.addAttribute(.foregroundColor, value: UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1), range: NSRange(location: 0, length: layer2.length))
                context.saveGState()
                layer2.draw(at: CGPoint(x: 7.75, y: 7))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        /// Backspace
        do {
            context.saveGState()
            context.translateBy(x: 340.5, y: 229.5)
            
            /// Backspace
            let backspace = UIBezierPath()
            backspace.move(to: CGPoint(x: 7.24, y: 1.01))
            backspace.addCurve(to: CGPoint(x: 7.63, y: 0.69), controlPoint1: CGPoint(x: 7.36, y: 0.9), controlPoint2: CGPoint(x: 7.49, y: 0.79))
            backspace.addCurve(to: CGPoint(x: 7.65, y: 0.67), controlPoint1: CGPoint(x: 7.64, y: 0.68), controlPoint2: CGPoint(x: 7.65, y: 0.67))
            backspace.addCurve(to: CGPoint(x: 7.87, y: 0.53), controlPoint1: CGPoint(x: 7.73, y: 0.61), controlPoint2: CGPoint(x: 7.8, y: 0.56))
            backspace.addCurve(to: CGPoint(x: 9.77, y: 0), controlPoint1: CGPoint(x: 8.43, y: 0.19), controlPoint2: CGPoint(x: 9.08, y: 0))
            backspace.addLine(to: CGPoint(x: 19.31, y: 0))
            backspace.addCurve(to: CGPoint(x: 23, y: 3.71), controlPoint1: CGPoint(x: 21.35, y: 0), controlPoint2: CGPoint(x: 23, y: 1.66))
            backspace.addLine(to: CGPoint(x: 23, y: 13.29))
            backspace.addCurve(to: CGPoint(x: 19.31, y: 17), controlPoint1: CGPoint(x: 23, y: 15.34), controlPoint2: CGPoint(x: 21.35, y: 17))
            backspace.addLine(to: CGPoint(x: 9.77, y: 17))
            backspace.addCurve(to: CGPoint(x: 7.88, y: 16.47), controlPoint1: CGPoint(x: 9.08, y: 17), controlPoint2: CGPoint(x: 8.43, y: 16.81))
            backspace.addCurve(to: CGPoint(x: 7.65, y: 16.33), controlPoint1: CGPoint(x: 7.8, y: 16.44), controlPoint2: CGPoint(x: 7.73, y: 16.39))
            backspace.addCurve(to: CGPoint(x: 7.63, y: 16.31), controlPoint1: CGPoint(x: 7.65, y: 16.33), controlPoint2: CGPoint(x: 7.64, y: 16.32))
            backspace.addCurve(to: CGPoint(x: 7.24, y: 15.99), controlPoint1: CGPoint(x: 7.49, y: 16.21), controlPoint2: CGPoint(x: 7.36, y: 16.1))
            backspace.addCurve(to: CGPoint(x: 0, y: 8.5), controlPoint1: CGPoint(x: 5.65, y: 14.66), controlPoint2: CGPoint(x: 0, y: 9.87))
            backspace.addCurve(to: CGPoint(x: 7.24, y: 1.01), controlPoint1: CGPoint(x: 0, y: 7.13), controlPoint2: CGPoint(x: 5.65, y: 2.34))
            backspace.close()
            context.saveGState()
            backspace.lineJoinStyle = .round
            backspace.lineCapStyle = .round
            context.saveGState()
            backspace.lineWidth = 3
            context.beginPath()
            context.addPath(backspace.cgPath)
            context.clip(using: .evenOdd)
            UIColor(hue: 0.595, saturation: 0.151, brightness: 0.365, alpha: 1).setStroke()
            backspace.stroke()
            context.restoreGState()
            context.restoreGState()
            
            /// Cross
            let cross = UIBezierPath()
            cross.move(to: CGPoint(x: 3.07, y: 3.95))
            cross.addLine(to: CGPoint(x: 0.18, y: 1.07))
            cross.addCurve(to: CGPoint(x: 0.18, y: 0.18), controlPoint1: CGPoint(x: -0.06, y: 0.82), controlPoint2: CGPoint(x: -0.06, y: 0.43))
            cross.addCurve(to: CGPoint(x: 1.07, y: 0.18), controlPoint1: CGPoint(x: 0.43, y: -0.06), controlPoint2: CGPoint(x: 0.82, y: -0.06))
            cross.addLine(to: CGPoint(x: 3.95, y: 3.07))
            cross.addLine(to: CGPoint(x: 6.83, y: 0.18))
            cross.addCurve(to: CGPoint(x: 7.72, y: 0.18), controlPoint1: CGPoint(x: 7.08, y: -0.06), controlPoint2: CGPoint(x: 7.47, y: -0.06))
            cross.addCurve(to: CGPoint(x: 7.72, y: 1.07), controlPoint1: CGPoint(x: 7.96, y: 0.43), controlPoint2: CGPoint(x: 7.96, y: 0.82))
            cross.addLine(to: CGPoint(x: 4.83, y: 3.95))
            cross.addLine(to: CGPoint(x: 7.61, y: 6.72))
            cross.addCurve(to: CGPoint(x: 7.61, y: 7.61), controlPoint1: CGPoint(x: 7.85, y: 6.97), controlPoint2: CGPoint(x: 7.85, y: 7.36))
            cross.addCurve(to: CGPoint(x: 6.72, y: 7.61), controlPoint1: CGPoint(x: 7.36, y: 7.85), controlPoint2: CGPoint(x: 6.97, y: 7.85))
            cross.addLine(to: CGPoint(x: 3.95, y: 4.83))
            cross.addLine(to: CGPoint(x: 1.18, y: 7.61))
            cross.addCurve(to: CGPoint(x: 0.29, y: 7.61), controlPoint1: CGPoint(x: 0.93, y: 7.85), controlPoint2: CGPoint(x: 0.54, y: 7.85))
            cross.addCurve(to: CGPoint(x: 0.29, y: 6.72), controlPoint1: CGPoint(x: 0.05, y: 7.36), controlPoint2: CGPoint(x: 0.05, y: 6.97))
            cross.addLine(to: CGPoint(x: 3.07, y: 3.95))
            cross.close()
            context.saveGState()
            context.translateBy(x: 9.93, y: 4.54)
            cross.usesEvenOddFillRule = true
            UIColor(hue: 0.595, saturation: 0.151, brightness: 0.365, alpha: 1).setFill()
            cross.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Container
        do {
            context.saveGState()
            context.translateBy(x: 10, y: 8)
            
            /// Frequently Used
            do {
                context.saveGState()
                context.translateBy(x: 0.5, y: 0)
                
                /// 😂
                let layer3 = NSMutableAttributedString(string: "😂")
                layer3.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer3.length))
                context.saveGState()
                layer3.draw(at: CGPoint(x: 0, y: 19.5))
                context.restoreGState()
                
                /// 🍕
                let layer4 = NSMutableAttributedString(string: "🍕")
                layer4.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer4.length))
                context.saveGState()
                layer4.draw(at: CGPoint(x: 46, y: 19.5))
                context.restoreGState()
                
                /// 🚀
                let layer5 = NSMutableAttributedString(string: "🚀")
                layer5.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer5.length))
                context.saveGState()
                layer5.draw(at: CGPoint(x: 92, y: 20.5))
                context.restoreGState()
                
                /// 👍
                let layer6 = NSMutableAttributedString(string: "👍")
                layer6.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer6.length))
                context.saveGState()
                layer6.draw(at: CGPoint(x: 138, y: 19.5))
                context.restoreGState()
                
                /// 🙄
                let layer7 = NSMutableAttributedString(string: "🙄")
                layer7.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer7.length))
                context.saveGState()
                layer7.draw(at: CGPoint(x: 184, y: 19.5))
                context.restoreGState()
                
                /// 👻
                let layer8 = NSMutableAttributedString(string: "👻")
                layer8.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer8.length))
                context.saveGState()
                layer8.draw(at: CGPoint(x: 230, y: 19.5))
                context.restoreGState()
                
                /// ❤️
                let layer9 = NSMutableAttributedString(string: "❤️")
                layer9.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer9.length))
                context.saveGState()
                layer9.draw(at: CGPoint(x: 0, y: 57.5))
                context.restoreGState()
                
                /// 🙈
                let layer10 = NSMutableAttributedString(string: "🙈")
                layer10.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer10.length))
                context.saveGState()
                layer10.draw(at: CGPoint(x: 46, y: 57.5))
                context.restoreGState()
                
                /// 🦁
                let layer11 = NSMutableAttributedString(string: "🦁")
                layer11.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer11.length))
                context.saveGState()
                layer11.draw(at: CGPoint(x: 92, y: 57.5))
                context.restoreGState()
                
                /// ✌️
                let layer12 = NSMutableAttributedString(string: "✌️")
                layer12.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer12.length))
                context.saveGState()
                layer12.draw(at: CGPoint(x: 138, y: 57.5))
                context.restoreGState()
                
                /// 😎
                let layer13 = NSMutableAttributedString(string: "😎")
                layer13.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer13.length))
                context.saveGState()
                layer13.draw(at: CGPoint(x: 184, y: 57.5))
                context.restoreGState()
                
                /// 😄
                let layer14 = NSMutableAttributedString(string: "😄")
                layer14.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer14.length))
                context.saveGState()
                layer14.draw(at: CGPoint(x: 230, y: 57.5))
                context.restoreGState()
                
                /// 😍
                let layer15 = NSMutableAttributedString(string: "😍")
                layer15.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer15.length))
                context.saveGState()
                layer15.draw(at: CGPoint(x: 0, y: 95.5))
                context.restoreGState()
                
                /// 🐵
                let layer16 = NSMutableAttributedString(string: "🐵")
                layer16.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer16.length))
                context.saveGState()
                layer16.draw(at: CGPoint(x: 46, y: 95.5))
                context.restoreGState()
                
                /// 😏
                let layer17 = NSMutableAttributedString(string: "😏")
                layer17.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer17.length))
                context.saveGState()
                layer17.draw(at: CGPoint(x: 92, y: 95.5))
                context.restoreGState()
                
                /// 😉
                let layer18 = NSMutableAttributedString(string: "😉")
                layer18.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer18.length))
                context.saveGState()
                layer18.draw(at: CGPoint(x: 138, y: 95.5))
                context.restoreGState()
                
                /// 🎶
                let layer19 = NSMutableAttributedString(string: "🎶")
                layer19.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer19.length))
                context.saveGState()
                layer19.draw(at: CGPoint(x: 184, y: 95.5))
                context.restoreGState()
                
                /// 😜
                let layer20 = NSMutableAttributedString(string: "😜")
                layer20.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer20.length))
                context.saveGState()
                layer20.draw(at: CGPoint(x: 230, y: 95.5))
                context.restoreGState()
                
                /// 🤓
                let layer21 = NSMutableAttributedString(string: "🤓")
                layer21.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer21.length))
                context.saveGState()
                layer21.draw(at: CGPoint(x: 0, y: 133.5))
                context.restoreGState()
                
                /// 🙉
                let layer22 = NSMutableAttributedString(string: "🙉")
                layer22.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer22.length))
                context.saveGState()
                layer22.draw(at: CGPoint(x: 46, y: 133.5))
                context.restoreGState()
                
                /// 😁
                let layer23 = NSMutableAttributedString(string: "😁")
                layer23.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer23.length))
                context.saveGState()
                layer23.draw(at: CGPoint(x: 92, y: 133.5))
                context.restoreGState()
                
                /// 😌
                let layer24 = NSMutableAttributedString(string: "😌")
                layer24.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer24.length))
                context.saveGState()
                layer24.draw(at: CGPoint(x: 138, y: 133.5))
                context.restoreGState()
                
                /// 👀
                let layer25 = NSMutableAttributedString(string: "👀")
                layer25.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer25.length))
                context.saveGState()
                layer25.draw(at: CGPoint(x: 184, y: 133.5))
                context.restoreGState()
                
                /// 😋
                let layer26 = NSMutableAttributedString(string: "😋")
                layer26.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer26.length))
                context.saveGState()
                layer26.draw(at: CGPoint(x: 230, y: 133.5))
                context.restoreGState()
                
                /// 🙊
                let layer27 = NSMutableAttributedString(string: "🙊")
                layer27.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer27.length))
                context.saveGState()
                layer27.draw(at: CGPoint(x: 0, y: 171.5))
                context.restoreGState()
                
                /// 😩
                let layer28 = NSMutableAttributedString(string: "😩")
                layer28.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer28.length))
                context.saveGState()
                layer28.draw(at: CGPoint(x: 46, y: 171.5))
                context.restoreGState()
                
                /// 😳
                let layer29 = NSMutableAttributedString(string: "😳")
                layer29.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer29.length))
                context.saveGState()
                layer29.draw(at: CGPoint(x: 92, y: 171.5))
                context.restoreGState()
                
                /// ⛏
                let layer30 = NSMutableAttributedString(string: "⛏")
                layer30.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer30.length))
                context.saveGState()
                layer30.draw(at: CGPoint(x: 138, y: 171.5))
                context.restoreGState()
                
                /// 🍰
                let layer31 = NSMutableAttributedString(string: "🍰")
                layer31.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer31.length))
                context.saveGState()
                layer31.draw(at: CGPoint(x: 184, y: 171.5))
                context.restoreGState()
                
                /// 🍳
                let layer32 = NSMutableAttributedString(string: "🍳")
                layer32.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer32.length))
                context.saveGState()
                layer32.draw(at: CGPoint(x: 230, y: 171.5))
                context.restoreGState()
                
                /// FREQUENTLY USED
                let fREQUENTLYUSED = NSMutableAttributedString(string: "FREQUENTLY USED")
                fREQUENTLYUSED.addAttribute(.font, value: UIFont(name: "SFProDisplay-Semibold", size: 12)!, range: NSRange(location: 0, length: fREQUENTLYUSED.length))
                fREQUENTLYUSED.addAttribute(.kern, value: 0.5, range: NSRange(location: 0, length: fREQUENTLYUSED.length))
                fREQUENTLYUSED.addAttribute(.foregroundColor, value: UIColor(hue: 0.625, saturation: 0.024, brightness: 0.663, alpha: 1), range: NSRange(location: 0, length: fREQUENTLYUSED.length))
                context.saveGState()
                fREQUENTLYUSED.draw(at: CGPoint(x: 1.5, y: 0))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// People
            do {
                context.saveGState()
                context.translateBy(x: 291.5, y: 0)
                
                /// 😀
                let layer33 = NSMutableAttributedString(string: "😀")
                layer33.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer33.length))
                context.saveGState()
                layer33.draw(at: CGPoint(x: 0, y: 19.5))
                context.restoreGState()
                
                /// 😅
                let layer34 = NSMutableAttributedString(string: "😅")
                layer34.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer34.length))
                context.saveGState()
                layer34.draw(at: CGPoint(x: 46, y: 19.5))
                context.restoreGState()
                
                /// 😁
                let layer35 = NSMutableAttributedString(string: "😁")
                layer35.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer35.length))
                context.saveGState()
                layer35.draw(at: CGPoint(x: 0, y: 57.5))
                context.restoreGState()
                
                /// 😆
                let layer36 = NSMutableAttributedString(string: "😆")
                layer36.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer36.length))
                context.saveGState()
                layer36.draw(at: CGPoint(x: 46, y: 57.5))
                context.restoreGState()
                
                /// 😂
                let layer37 = NSMutableAttributedString(string: "😂")
                layer37.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer37.length))
                context.saveGState()
                layer37.draw(at: CGPoint(x: 0, y: 95.5))
                context.restoreGState()
                
                /// 😇
                let layer38 = NSMutableAttributedString(string: "😇")
                layer38.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer38.length))
                context.saveGState()
                layer38.draw(at: CGPoint(x: 46, y: 95.5))
                context.restoreGState()
                
                /// 😃
                let layer39 = NSMutableAttributedString(string: "😃")
                layer39.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer39.length))
                context.saveGState()
                layer39.draw(at: CGPoint(x: 0, y: 133.5))
                context.restoreGState()
                
                /// 🤣
                let layer40 = NSMutableAttributedString(string: "🤣")
                layer40.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer40.length))
                context.saveGState()
                layer40.draw(at: CGPoint(x: 46, y: 133.5))
                context.restoreGState()
                
                /// 😄
                let layer41 = NSMutableAttributedString(string: "😄")
                layer41.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer41.length))
                context.saveGState()
                layer41.draw(at: CGPoint(x: 0, y: 171.5))
                context.restoreGState()
                
                /// 🙂
                let layer42 = NSMutableAttributedString(string: "🙂")
                layer42.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer42.length))
                context.saveGState()
                layer42.draw(at: CGPoint(x: 46, y: 171.5))
                context.restoreGState()
                
                /// PEOPLE
                let pEOPLE = NSMutableAttributedString(string: "PEOPLE")
                pEOPLE.addAttribute(.font, value: UIFont(name: "SFProDisplay-Semibold", size: 12)!, range: NSRange(location: 0, length: pEOPLE.length))
                pEOPLE.addAttribute(.kern, value: 0.5, range: NSRange(location: 0, length: pEOPLE.length))
                pEOPLE.addAttribute(.foregroundColor, value: UIColor(hue: 0.625, saturation: 0.024, brightness: 0.663, alpha: 1), range: NSRange(location: 0, length: pEOPLE.length))
                context.saveGState()
                pEOPLE.draw(at: CGPoint(x: 3.5, y: 0))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
        // End Mask (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawKeyboardsDefaultLandscape(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 667, height: 162), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 667, height: 162), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 667, y: resizedFrame.height / 162)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Background
        // Warning: New symbols are not supported.
        
        /// Keyboards /_/ Complex + Button Default Landscape
        // Warning: New symbols are not supported.
        
        /// Third Row
        do {
            context.saveGState()
            context.translateBy(x: 73, y: 86)
            
            /// Background
            let background2 = UIBezierPath()
            background2.move(to: CGPoint(x: 2.41, y: 32))
            background2.addCurve(to: CGPoint(x: 0, y: 27), controlPoint1: CGPoint(x: 0.89, y: 30.98), controlPoint2: CGPoint(x: 0, y: 29.23))
            background2.addLine(to: CGPoint(x: 0, y: 6))
            background2.addCurve(to: CGPoint(x: 6, y: 0), controlPoint1: CGPoint(x: 0, y: 2.36), controlPoint2: CGPoint(x: 2.36, y: 0))
            background2.addLine(to: CGPoint(x: 42, y: 0))
            background2.addCurve(to: CGPoint(x: 47, y: 2.41), controlPoint1: CGPoint(x: 44.23, y: 0), controlPoint2: CGPoint(x: 45.98, y: 0.89))
            background2.addLine(to: CGPoint(x: 47, y: 30.59))
            background2.addCurve(to: CGPoint(x: 45.59, y: 32), controlPoint1: CGPoint(x: 46.62, y: 31.15), controlPoint2: CGPoint(x: 46.15, y: 31.62))
            background2.addLine(to: CGPoint(x: 2.41, y: 32))
            background2.close()
            context.saveGState()
            context.translateBy(x: 396, y: 0)
            background2.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background2.cgPath)
            context.addRect(background2.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -48, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 48, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background2.fill()
            context.restoreGState()
            background2.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background2.fill()
            context.restoreGState()
            
            /// M
            let m = NSMutableAttributedString(string: "M")
            m.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: m.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                m.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: m.length))
            }
            m.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: m.length))
            context.saveGState()
            m.draw(at: CGPoint(x: 411, y: 3))
            context.restoreGState()
            
            /// Background
            let background3 = UIBezierPath()
            background3.move(to: CGPoint(x: 5.5, y: 32))
            background3.addCurve(to: CGPoint(x: 0, y: 26.5), controlPoint1: CGPoint(x: 2.16, y: 32), controlPoint2: CGPoint(x: 0, y: 29.84))
            background3.addLine(to: CGPoint(x: 0, y: 5.5))
            background3.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background3.addLine(to: CGPoint(x: 41.5, y: 0))
            background3.addCurve(to: CGPoint(x: 47, y: 5.5), controlPoint1: CGPoint(x: 44.84, y: 0), controlPoint2: CGPoint(x: 47, y: 2.16))
            background3.addLine(to: CGPoint(x: 47, y: 26.5))
            background3.addCurve(to: CGPoint(x: 41.5, y: 32), controlPoint1: CGPoint(x: 47, y: 29.84), controlPoint2: CGPoint(x: 44.84, y: 32))
            background3.addLine(to: CGPoint(x: 5.5, y: 32))
            background3.close()
            context.saveGState()
            context.translateBy(x: 343, y: 0)
            background3.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background3.cgPath)
            context.addRect(background3.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -48, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 48, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background3.fill()
            context.restoreGState()
            background3.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background3.fill()
            context.restoreGState()
            
            /// N
            let n = NSMutableAttributedString(string: "N")
            n.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: n.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                n.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: n.length))
            }
            n.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: n.length))
            context.saveGState()
            n.draw(at: CGPoint(x: 359, y: 3))
            context.restoreGState()
            
            /// Background
            let background4 = UIBezierPath()
            background4.move(to: CGPoint(x: 5.5, y: 32))
            background4.addCurve(to: CGPoint(x: 0, y: 26.5), controlPoint1: CGPoint(x: 2.16, y: 32), controlPoint2: CGPoint(x: 0, y: 29.84))
            background4.addLine(to: CGPoint(x: 0, y: 5.5))
            background4.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background4.addLine(to: CGPoint(x: 41.5, y: 0))
            background4.addCurve(to: CGPoint(x: 47, y: 5.5), controlPoint1: CGPoint(x: 44.84, y: 0), controlPoint2: CGPoint(x: 47, y: 2.16))
            background4.addLine(to: CGPoint(x: 47, y: 26.5))
            background4.addCurve(to: CGPoint(x: 41.5, y: 32), controlPoint1: CGPoint(x: 47, y: 29.84), controlPoint2: CGPoint(x: 44.84, y: 32))
            background4.addLine(to: CGPoint(x: 5.5, y: 32))
            background4.close()
            context.saveGState()
            context.translateBy(x: 290, y: 0)
            background4.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background4.cgPath)
            context.addRect(background4.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -48, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 48, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background4.fill()
            context.restoreGState()
            background4.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background4.fill()
            context.restoreGState()
            
            /// B
            let b = NSMutableAttributedString(string: "B")
            b.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: b.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                b.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: b.length))
            }
            b.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: b.length))
            context.saveGState()
            b.draw(at: CGPoint(x: 308, y: 3))
            context.restoreGState()
            
            /// Background
            let background5 = UIBezierPath()
            background5.move(to: CGPoint(x: 5.5, y: 32))
            background5.addCurve(to: CGPoint(x: 0, y: 26.5), controlPoint1: CGPoint(x: 2.16, y: 32), controlPoint2: CGPoint(x: 0, y: 29.84))
            background5.addLine(to: CGPoint(x: 0, y: 5.5))
            background5.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background5.addLine(to: CGPoint(x: 41.5, y: 0))
            background5.addCurve(to: CGPoint(x: 47, y: 5.5), controlPoint1: CGPoint(x: 44.84, y: 0), controlPoint2: CGPoint(x: 47, y: 2.16))
            background5.addLine(to: CGPoint(x: 47, y: 26.5))
            background5.addCurve(to: CGPoint(x: 41.5, y: 32), controlPoint1: CGPoint(x: 47, y: 29.84), controlPoint2: CGPoint(x: 44.84, y: 32))
            background5.addLine(to: CGPoint(x: 5.5, y: 32))
            background5.close()
            context.saveGState()
            context.translateBy(x: 237, y: 0)
            background5.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background5.cgPath)
            context.addRect(background5.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -48, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 48, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background5.fill()
            context.restoreGState()
            background5.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background5.fill()
            context.restoreGState()
            
            /// V
            let v = NSMutableAttributedString(string: "V")
            v.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: v.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                v.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: v.length))
            }
            v.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: v.length))
            context.saveGState()
            v.draw(at: CGPoint(x: 253.5, y: 3))
            context.restoreGState()
            
            /// Background
            let background6 = UIBezierPath()
            background6.move(to: CGPoint(x: 5.5, y: 32))
            background6.addCurve(to: CGPoint(x: 0, y: 26.5), controlPoint1: CGPoint(x: 2.16, y: 32), controlPoint2: CGPoint(x: 0, y: 29.84))
            background6.addLine(to: CGPoint(x: 0, y: 5.5))
            background6.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background6.addLine(to: CGPoint(x: 41.5, y: 0))
            background6.addCurve(to: CGPoint(x: 47, y: 5.5), controlPoint1: CGPoint(x: 44.84, y: 0), controlPoint2: CGPoint(x: 47, y: 2.16))
            background6.addLine(to: CGPoint(x: 47, y: 26.5))
            background6.addCurve(to: CGPoint(x: 41.5, y: 32), controlPoint1: CGPoint(x: 47, y: 29.84), controlPoint2: CGPoint(x: 44.84, y: 32))
            background6.addLine(to: CGPoint(x: 5.5, y: 32))
            background6.close()
            context.saveGState()
            context.translateBy(x: 184, y: 0)
            background6.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background6.cgPath)
            context.addRect(background6.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -48, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 48, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background6.fill()
            context.restoreGState()
            background6.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background6.fill()
            context.restoreGState()
            
            /// C
            let c = NSMutableAttributedString(string: "C")
            c.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: c.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                c.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: c.length))
            }
            c.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: c.length))
            context.saveGState()
            c.draw(at: CGPoint(x: 201, y: 3))
            context.restoreGState()
            
            /// Background
            let background7 = UIBezierPath()
            background7.move(to: CGPoint(x: 5.5, y: 32))
            background7.addCurve(to: CGPoint(x: 0, y: 26.5), controlPoint1: CGPoint(x: 2.16, y: 32), controlPoint2: CGPoint(x: 0, y: 29.84))
            background7.addLine(to: CGPoint(x: 0, y: 5.5))
            background7.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background7.addLine(to: CGPoint(x: 41.5, y: 0))
            background7.addCurve(to: CGPoint(x: 47, y: 5.5), controlPoint1: CGPoint(x: 44.84, y: 0), controlPoint2: CGPoint(x: 47, y: 2.16))
            background7.addLine(to: CGPoint(x: 47, y: 26.5))
            background7.addCurve(to: CGPoint(x: 41.5, y: 32), controlPoint1: CGPoint(x: 47, y: 29.84), controlPoint2: CGPoint(x: 44.84, y: 32))
            background7.addLine(to: CGPoint(x: 5.5, y: 32))
            background7.close()
            context.saveGState()
            context.translateBy(x: 131, y: 0)
            background7.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background7.cgPath)
            context.addRect(background7.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -48, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 48, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background7.fill()
            context.restoreGState()
            background7.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background7.fill()
            context.restoreGState()
            
            /// X
            let x = NSMutableAttributedString(string: "X")
            x.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: x.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                x.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: x.length))
            }
            x.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: x.length))
            context.saveGState()
            x.draw(at: CGPoint(x: 148.5, y: 3))
            context.restoreGState()
            
            /// Background
            let background8 = UIBezierPath()
            background8.move(to: CGPoint(x: 5.5, y: 32))
            background8.addCurve(to: CGPoint(x: 0, y: 26.5), controlPoint1: CGPoint(x: 2.16, y: 32), controlPoint2: CGPoint(x: 0, y: 29.84))
            background8.addLine(to: CGPoint(x: 0, y: 5.5))
            background8.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background8.addLine(to: CGPoint(x: 41.5, y: 0))
            background8.addCurve(to: CGPoint(x: 47, y: 5.5), controlPoint1: CGPoint(x: 44.84, y: 0), controlPoint2: CGPoint(x: 47, y: 2.16))
            background8.addLine(to: CGPoint(x: 47, y: 26.5))
            background8.addCurve(to: CGPoint(x: 41.5, y: 32), controlPoint1: CGPoint(x: 47, y: 29.84), controlPoint2: CGPoint(x: 44.84, y: 32))
            background8.addLine(to: CGPoint(x: 5.5, y: 32))
            background8.close()
            context.saveGState()
            context.translateBy(x: 78, y: 0)
            background8.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background8.cgPath)
            context.addRect(background8.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -48, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 48, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background8.fill()
            context.restoreGState()
            background8.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background8.fill()
            context.restoreGState()
            
            /// Z
            let z = NSMutableAttributedString(string: "Z")
            z.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: z.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                z.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: z.length))
            }
            z.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: z.length))
            context.saveGState()
            z.draw(at: CGPoint(x: 95.5, y: 3))
            context.restoreGState()
            
            /// Shift
            do {
                context.saveGState()
                
                /// Background
                let background9 = UIBezierPath()
                background9.move(to: CGPoint(x: 5.5, y: 32))
                background9.addCurve(to: CGPoint(x: 0, y: 26.5), controlPoint1: CGPoint(x: 2.16, y: 32), controlPoint2: CGPoint(x: 0, y: 29.84))
                background9.addLine(to: CGPoint(x: 0, y: 5.5))
                background9.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
                background9.addLine(to: CGPoint(x: 56.5, y: 0))
                background9.addCurve(to: CGPoint(x: 62, y: 5.5), controlPoint1: CGPoint(x: 59.84, y: 0), controlPoint2: CGPoint(x: 62, y: 2.16))
                background9.addLine(to: CGPoint(x: 62, y: 26.5))
                background9.addCurve(to: CGPoint(x: 56.5, y: 32), controlPoint1: CGPoint(x: 62, y: 29.84), controlPoint2: CGPoint(x: 59.84, y: 32))
                background9.addLine(to: CGPoint(x: 5.5, y: 32))
                background9.close()
                context.saveGState()
                background9.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(background9.cgPath)
                context.addRect(background9.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -63, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 63, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                background9.fill()
                context.restoreGState()
                background9.usesEvenOddFillRule = true
                UIColor.white.setFill()
                background9.fill()
                context.restoreGState()
                
                /// Shift
                let shift = UIBezierPath()
                shift.move(to: CGPoint(x: 10.24, y: 0.29))
                shift.addCurve(to: CGPoint(x: 8.83, y: 0.29), controlPoint1: CGPoint(x: 9.85, y: -0.1), controlPoint2: CGPoint(x: 9.22, y: -0.1))
                shift.addLine(to: CGPoint(x: 0.45, y: 8.67))
                shift.addCurve(to: CGPoint(x: 1.03, y: 10.09), controlPoint1: CGPoint(x: -0.33, y: 9.45), controlPoint2: CGPoint(x: -0.07, y: 10.09))
                shift.addLine(to: CGPoint(x: 5.03, y: 10.09))
                shift.addLine(to: CGPoint(x: 5.03, y: 15.1))
                shift.addCurve(to: CGPoint(x: 6.03, y: 16.09), controlPoint1: CGPoint(x: 5.03, y: 15.64), controlPoint2: CGPoint(x: 5.48, y: 16.09))
                shift.addLine(to: CGPoint(x: 13.04, y: 16.09))
                shift.addCurve(to: CGPoint(x: 14.03, y: 15.1), controlPoint1: CGPoint(x: 13.59, y: 16.09), controlPoint2: CGPoint(x: 14.03, y: 15.64))
                shift.addLine(to: CGPoint(x: 14.03, y: 10.09))
                shift.addLine(to: CGPoint(x: 18.04, y: 10.09))
                shift.addCurve(to: CGPoint(x: 18.62, y: 8.67), controlPoint1: CGPoint(x: 19.14, y: 10.09), controlPoint2: CGPoint(x: 19.4, y: 9.45))
                shift.addLine(to: CGPoint(x: 10.24, y: 0.29))
                shift.close()
                context.saveGState()
                context.translateBy(x: 21, y: 7.91)
                shift.usesEvenOddFillRule = true
                UIColor.black.setFill()
                shift.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Delete
            do {
                context.saveGState()
                context.translateBy(x: 459, y: 0)
                
                /// Background
                let background10 = UIBezierPath()
                background10.move(to: CGPoint(x: 5.5, y: 32))
                background10.addCurve(to: CGPoint(x: 0, y: 26.5), controlPoint1: CGPoint(x: 2.16, y: 32), controlPoint2: CGPoint(x: 0, y: 29.84))
                background10.addLine(to: CGPoint(x: 0, y: 5.5))
                background10.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
                background10.addLine(to: CGPoint(x: 56.5, y: 0))
                background10.addCurve(to: CGPoint(x: 62, y: 5.5), controlPoint1: CGPoint(x: 59.84, y: 0), controlPoint2: CGPoint(x: 62, y: 2.16))
                background10.addLine(to: CGPoint(x: 62, y: 26.5))
                background10.addCurve(to: CGPoint(x: 56.5, y: 32), controlPoint1: CGPoint(x: 62, y: 29.84), controlPoint2: CGPoint(x: 59.84, y: 32))
                background10.addLine(to: CGPoint(x: 5.5, y: 32))
                background10.close()
                context.saveGState()
                background10.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(background10.cgPath)
                context.addRect(background10.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -63, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 63, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                background10.fill()
                context.restoreGState()
                background10.usesEvenOddFillRule = true
                UIColor(hue: 0.593, saturation: 0.095, brightness: 0.741, alpha: 0.5).setFill()
                background10.fill()
                context.saveGState()
                context.setBlendMode(.softLight)
                context.beginTransparencyLayer(in: background10.bounds, auxiliaryInfo: nil)
                do {
                    UIColor(white: 0, alpha: 0.5).setFill()
                    background10.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.saveGState()
                context.setBlendMode(.softLight)
                context.beginTransparencyLayer(in: background10.bounds, auxiliaryInfo: nil)
                do {
                    UIColor(white: 1, alpha: 0.1).setFill()
                    background10.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.restoreGState()
                
                /// Back
                let back = UIBezierPath()
                back.move(to: CGPoint(x: 0.44, y: 9.56))
                back.addCurve(to: CGPoint(x: 0.44, y: 7.44), controlPoint1: CGPoint(x: -0.15, y: 8.97), controlPoint2: CGPoint(x: -0.14, y: 8.02))
                back.addLine(to: CGPoint(x: 7.17, y: 0.71))
                back.addCurve(to: CGPoint(x: 8.88, y: 0), controlPoint1: CGPoint(x: 7.56, y: 0.32), controlPoint2: CGPoint(x: 8.33, y: 0))
                back.addLine(to: CGPoint(x: 19.38, y: 0))
                back.addCurve(to: CGPoint(x: 22.88, y: 3.5), controlPoint1: CGPoint(x: 21.31, y: 0), controlPoint2: CGPoint(x: 22.88, y: 1.57))
                back.addLine(to: CGPoint(x: 22.88, y: 13.5))
                back.addCurve(to: CGPoint(x: 19.38, y: 17), controlPoint1: CGPoint(x: 22.88, y: 15.43), controlPoint2: CGPoint(x: 21.3, y: 17))
                back.addLine(to: CGPoint(x: 8.88, y: 17))
                back.addCurve(to: CGPoint(x: 7.17, y: 16.29), controlPoint1: CGPoint(x: 8.33, y: 17), controlPoint2: CGPoint(x: 7.55, y: 16.68))
                back.addLine(to: CGPoint(x: 0.44, y: 9.56))
                back.close()
                back.move(to: CGPoint(x: 15.02, y: 8.48))
                back.addLine(to: CGPoint(x: 17.84, y: 5.65))
                back.addCurve(to: CGPoint(x: 17.85, y: 4.59), controlPoint1: CGPoint(x: 18.14, y: 5.36), controlPoint2: CGPoint(x: 18.14, y: 4.88))
                back.addCurve(to: CGPoint(x: 16.78, y: 4.59), controlPoint1: CGPoint(x: 17.55, y: 4.29), controlPoint2: CGPoint(x: 17.08, y: 4.3))
                back.addLine(to: CGPoint(x: 13.96, y: 7.42))
                back.addLine(to: CGPoint(x: 11.13, y: 4.59))
                back.addCurve(to: CGPoint(x: 10.07, y: 4.59), controlPoint1: CGPoint(x: 10.84, y: 4.3), controlPoint2: CGPoint(x: 10.36, y: 4.3))
                back.addCurve(to: CGPoint(x: 10.07, y: 5.65), controlPoint1: CGPoint(x: 9.77, y: 4.88), controlPoint2: CGPoint(x: 9.78, y: 5.36))
                back.addLine(to: CGPoint(x: 12.9, y: 8.48))
                back.addLine(to: CGPoint(x: 10.07, y: 11.3))
                back.addCurve(to: CGPoint(x: 10.07, y: 12.37), controlPoint1: CGPoint(x: 9.78, y: 11.6), controlPoint2: CGPoint(x: 9.78, y: 12.07))
                back.addCurve(to: CGPoint(x: 11.13, y: 12.36), controlPoint1: CGPoint(x: 10.36, y: 12.66), controlPoint2: CGPoint(x: 10.84, y: 12.66))
                back.addLine(to: CGPoint(x: 13.96, y: 9.54))
                back.addLine(to: CGPoint(x: 16.78, y: 12.36))
                back.addCurve(to: CGPoint(x: 17.85, y: 12.37), controlPoint1: CGPoint(x: 17.08, y: 12.66), controlPoint2: CGPoint(x: 17.56, y: 12.66))
                back.addCurve(to: CGPoint(x: 17.84, y: 11.3), controlPoint1: CGPoint(x: 18.14, y: 12.07), controlPoint2: CGPoint(x: 18.14, y: 11.6))
                back.addLine(to: CGPoint(x: 15.02, y: 8.48))
                back.close()
                back.move(to: CGPoint(x: 2.09, y: 9.21))
                back.addCurve(to: CGPoint(x: 2.09, y: 7.79), controlPoint1: CGPoint(x: 1.69, y: 8.82), controlPoint2: CGPoint(x: 1.7, y: 8.18))
                back.addLine(to: CGPoint(x: 8.02, y: 1.86))
                back.addCurve(to: CGPoint(x: 8.87, y: 1.5), controlPoint1: CGPoint(x: 8.22, y: 1.66), controlPoint2: CGPoint(x: 8.6, y: 1.5))
                back.addLine(to: CGPoint(x: 19.37, y: 1.5))
                back.addCurve(to: CGPoint(x: 21.38, y: 3.51), controlPoint1: CGPoint(x: 20.48, y: 1.5), controlPoint2: CGPoint(x: 21.38, y: 2.4))
                back.addLine(to: CGPoint(x: 21.38, y: 13.49))
                back.addCurve(to: CGPoint(x: 19.37, y: 15.5), controlPoint1: CGPoint(x: 21.38, y: 14.6), controlPoint2: CGPoint(x: 20.48, y: 15.5))
                back.addLine(to: CGPoint(x: 8.87, y: 15.5))
                back.addCurve(to: CGPoint(x: 8.02, y: 15.14), controlPoint1: CGPoint(x: 8.6, y: 15.5), controlPoint2: CGPoint(x: 8.22, y: 15.34))
                back.addLine(to: CGPoint(x: 2.09, y: 9.21))
                back.close()
                context.saveGState()
                context.translateBy(x: 19.5, y: 7.5)
                back.usesEvenOddFillRule = true
                UIColor.black.setFill()
                back.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        /// Second Row
        do {
            context.saveGState()
            context.translateBy(x: 98, y: 46)
            
            /// Background
            let background11 = UIBezierPath()
            background11.move(to: CGPoint(x: 5.5, y: 32))
            background11.addCurve(to: CGPoint(x: 0, y: 26.5), controlPoint1: CGPoint(x: 2.16, y: 32), controlPoint2: CGPoint(x: 0, y: 29.84))
            background11.addLine(to: CGPoint(x: 0, y: 5.5))
            background11.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background11.addLine(to: CGPoint(x: 41.5, y: 0))
            background11.addCurve(to: CGPoint(x: 47, y: 5.5), controlPoint1: CGPoint(x: 44.84, y: 0), controlPoint2: CGPoint(x: 47, y: 2.16))
            background11.addLine(to: CGPoint(x: 47, y: 26.5))
            background11.addCurve(to: CGPoint(x: 41.5, y: 32), controlPoint1: CGPoint(x: 47, y: 29.84), controlPoint2: CGPoint(x: 44.84, y: 32))
            background11.addLine(to: CGPoint(x: 5.5, y: 32))
            background11.close()
            context.saveGState()
            context.translateBy(x: 424, y: 0)
            background11.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background11.cgPath)
            context.addRect(background11.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -48, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 48, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background11.fill()
            context.restoreGState()
            background11.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background11.fill()
            context.restoreGState()
            
            /// L
            let l = NSMutableAttributedString(string: "L")
            l.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: l.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                l.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: l.length))
            }
            l.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: l.length))
            context.saveGState()
            l.draw(at: CGPoint(x: 442, y: 3))
            context.restoreGState()
            
            /// Background
            let background12 = UIBezierPath()
            background12.move(to: CGPoint(x: 5.5, y: 32))
            background12.addCurve(to: CGPoint(x: 0, y: 26.5), controlPoint1: CGPoint(x: 2.16, y: 32), controlPoint2: CGPoint(x: 0, y: 29.84))
            background12.addLine(to: CGPoint(x: 0, y: 5.5))
            background12.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background12.addLine(to: CGPoint(x: 41.5, y: 0))
            background12.addCurve(to: CGPoint(x: 47, y: 5.5), controlPoint1: CGPoint(x: 44.84, y: 0), controlPoint2: CGPoint(x: 47, y: 2.16))
            background12.addLine(to: CGPoint(x: 47, y: 26.5))
            background12.addCurve(to: CGPoint(x: 41.5, y: 32), controlPoint1: CGPoint(x: 47, y: 29.84), controlPoint2: CGPoint(x: 44.84, y: 32))
            background12.addLine(to: CGPoint(x: 5.5, y: 32))
            background12.close()
            context.saveGState()
            context.translateBy(x: 371, y: 0)
            background12.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background12.cgPath)
            context.addRect(background12.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -48, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 48, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background12.fill()
            context.restoreGState()
            background12.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background12.fill()
            context.restoreGState()
            
            /// K
            let k = NSMutableAttributedString(string: "K")
            k.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: k.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                k.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: k.length))
            }
            k.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: k.length))
            context.saveGState()
            k.draw(at: CGPoint(x: 388, y: 3))
            context.restoreGState()
            
            /// Background
            let background13 = UIBezierPath()
            background13.move(to: CGPoint(x: 5.5, y: 32))
            background13.addCurve(to: CGPoint(x: 0, y: 26.5), controlPoint1: CGPoint(x: 2.16, y: 32), controlPoint2: CGPoint(x: 0, y: 29.84))
            background13.addLine(to: CGPoint(x: 0, y: 5.5))
            background13.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background13.addLine(to: CGPoint(x: 41.5, y: 0))
            background13.addCurve(to: CGPoint(x: 47, y: 5.5), controlPoint1: CGPoint(x: 44.84, y: 0), controlPoint2: CGPoint(x: 47, y: 2.16))
            background13.addLine(to: CGPoint(x: 47, y: 26.5))
            background13.addCurve(to: CGPoint(x: 41.5, y: 32), controlPoint1: CGPoint(x: 47, y: 29.84), controlPoint2: CGPoint(x: 44.84, y: 32))
            background13.addLine(to: CGPoint(x: 5.5, y: 32))
            background13.close()
            context.saveGState()
            context.translateBy(x: 318, y: 0)
            background13.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background13.cgPath)
            context.addRect(background13.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -48, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 48, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background13.fill()
            context.restoreGState()
            background13.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background13.fill()
            context.restoreGState()
            
            /// J
            let j = NSMutableAttributedString(string: "J")
            j.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: j.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                j.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: j.length))
            }
            j.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: j.length))
            context.saveGState()
            j.draw(at: CGPoint(x: 336.5, y: 3))
            context.restoreGState()
            
            /// Background
            let background14 = UIBezierPath()
            background14.move(to: CGPoint(x: 5.5, y: 32))
            background14.addCurve(to: CGPoint(x: 0, y: 26.5), controlPoint1: CGPoint(x: 2.16, y: 32), controlPoint2: CGPoint(x: 0, y: 29.84))
            background14.addLine(to: CGPoint(x: 0, y: 5.5))
            background14.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background14.addLine(to: CGPoint(x: 41.5, y: 0))
            background14.addCurve(to: CGPoint(x: 47, y: 5.5), controlPoint1: CGPoint(x: 44.84, y: 0), controlPoint2: CGPoint(x: 47, y: 2.16))
            background14.addLine(to: CGPoint(x: 47, y: 26.5))
            background14.addCurve(to: CGPoint(x: 41.5, y: 32), controlPoint1: CGPoint(x: 47, y: 29.84), controlPoint2: CGPoint(x: 44.84, y: 32))
            background14.addLine(to: CGPoint(x: 5.5, y: 32))
            background14.close()
            context.saveGState()
            context.translateBy(x: 265, y: 0)
            background14.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background14.cgPath)
            context.addRect(background14.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -48, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 48, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background14.fill()
            context.restoreGState()
            background14.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background14.fill()
            context.restoreGState()
            
            /// H
            let h = NSMutableAttributedString(string: "H")
            h.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: h.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                h.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: h.length))
            }
            h.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: h.length))
            context.saveGState()
            h.draw(at: CGPoint(x: 281, y: 3))
            context.restoreGState()
            
            /// Background
            let background15 = UIBezierPath()
            background15.move(to: CGPoint(x: 5.5, y: 32))
            background15.addCurve(to: CGPoint(x: 0, y: 26.5), controlPoint1: CGPoint(x: 2.16, y: 32), controlPoint2: CGPoint(x: 0, y: 29.84))
            background15.addLine(to: CGPoint(x: 0, y: 5.5))
            background15.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background15.addLine(to: CGPoint(x: 41.5, y: 0))
            background15.addCurve(to: CGPoint(x: 47, y: 5.5), controlPoint1: CGPoint(x: 44.84, y: 0), controlPoint2: CGPoint(x: 47, y: 2.16))
            background15.addLine(to: CGPoint(x: 47, y: 26.5))
            background15.addCurve(to: CGPoint(x: 41.5, y: 32), controlPoint1: CGPoint(x: 47, y: 29.84), controlPoint2: CGPoint(x: 44.84, y: 32))
            background15.addLine(to: CGPoint(x: 5.5, y: 32))
            background15.close()
            context.saveGState()
            context.translateBy(x: 212, y: 0)
            background15.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background15.cgPath)
            context.addRect(background15.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -48, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 48, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background15.fill()
            context.restoreGState()
            background15.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background15.fill()
            context.restoreGState()
            
            /// G
            let g = NSMutableAttributedString(string: "G")
            g.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: g.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                g.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: g.length))
            }
            g.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: g.length))
            context.saveGState()
            g.draw(at: CGPoint(x: 229, y: 3))
            context.restoreGState()
            
            /// Background
            let background16 = UIBezierPath()
            background16.move(to: CGPoint(x: 5.5, y: 32))
            background16.addCurve(to: CGPoint(x: 0, y: 26.5), controlPoint1: CGPoint(x: 2.16, y: 32), controlPoint2: CGPoint(x: 0, y: 29.84))
            background16.addLine(to: CGPoint(x: 0, y: 5.5))
            background16.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background16.addLine(to: CGPoint(x: 41.5, y: 0))
            background16.addCurve(to: CGPoint(x: 47, y: 5.5), controlPoint1: CGPoint(x: 44.84, y: 0), controlPoint2: CGPoint(x: 47, y: 2.16))
            background16.addLine(to: CGPoint(x: 47, y: 26.5))
            background16.addCurve(to: CGPoint(x: 41.5, y: 32), controlPoint1: CGPoint(x: 47, y: 29.84), controlPoint2: CGPoint(x: 44.84, y: 32))
            background16.addLine(to: CGPoint(x: 5.5, y: 32))
            background16.close()
            context.saveGState()
            context.translateBy(x: 159, y: 0)
            background16.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background16.cgPath)
            context.addRect(background16.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -48, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 48, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background16.fill()
            context.restoreGState()
            background16.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background16.fill()
            context.restoreGState()
            
            /// F
            let f = NSMutableAttributedString(string: "F")
            f.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: f.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                f.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: f.length))
            }
            f.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: f.length))
            context.saveGState()
            f.draw(at: CGPoint(x: 176.5, y: 3))
            context.restoreGState()
            
            /// Background
            let background17 = UIBezierPath()
            background17.move(to: CGPoint(x: 5.5, y: 32))
            background17.addCurve(to: CGPoint(x: 0, y: 26.5), controlPoint1: CGPoint(x: 2.16, y: 32), controlPoint2: CGPoint(x: 0, y: 29.84))
            background17.addLine(to: CGPoint(x: 0, y: 5.5))
            background17.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background17.addLine(to: CGPoint(x: 41.5, y: 0))
            background17.addCurve(to: CGPoint(x: 47, y: 5.5), controlPoint1: CGPoint(x: 44.84, y: 0), controlPoint2: CGPoint(x: 47, y: 2.16))
            background17.addLine(to: CGPoint(x: 47, y: 26.5))
            background17.addCurve(to: CGPoint(x: 41.5, y: 32), controlPoint1: CGPoint(x: 47, y: 29.84), controlPoint2: CGPoint(x: 44.84, y: 32))
            background17.addLine(to: CGPoint(x: 5.5, y: 32))
            background17.close()
            context.saveGState()
            context.translateBy(x: 106, y: 0)
            background17.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background17.cgPath)
            context.addRect(background17.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -48, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 48, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background17.fill()
            context.restoreGState()
            background17.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background17.fill()
            context.restoreGState()
            
            /// D
            let d = NSMutableAttributedString(string: "D")
            d.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: d.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                d.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: d.length))
            }
            d.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: d.length))
            context.saveGState()
            d.draw(at: CGPoint(x: 123, y: 3))
            context.restoreGState()
            
            /// Background
            let background18 = UIBezierPath()
            background18.move(to: CGPoint(x: 5.5, y: 32))
            background18.addCurve(to: CGPoint(x: 0, y: 26.5), controlPoint1: CGPoint(x: 2.16, y: 32), controlPoint2: CGPoint(x: 0, y: 29.84))
            background18.addLine(to: CGPoint(x: 0, y: 5.5))
            background18.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background18.addLine(to: CGPoint(x: 41.5, y: 0))
            background18.addCurve(to: CGPoint(x: 47, y: 5.5), controlPoint1: CGPoint(x: 44.84, y: 0), controlPoint2: CGPoint(x: 47, y: 2.16))
            background18.addLine(to: CGPoint(x: 47, y: 26.5))
            background18.addCurve(to: CGPoint(x: 41.5, y: 32), controlPoint1: CGPoint(x: 47, y: 29.84), controlPoint2: CGPoint(x: 44.84, y: 32))
            background18.addLine(to: CGPoint(x: 5.5, y: 32))
            background18.close()
            context.saveGState()
            context.translateBy(x: 53, y: 0)
            background18.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background18.cgPath)
            context.addRect(background18.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -48, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 48, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background18.fill()
            context.restoreGState()
            background18.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background18.fill()
            context.restoreGState()
            
            /// S
            let s = NSMutableAttributedString(string: "S")
            s.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: s.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                s.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: s.length))
            }
            s.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: s.length))
            context.saveGState()
            s.draw(at: CGPoint(x: 71, y: 3))
            context.restoreGState()
            
            /// Background
            let background19 = UIBezierPath()
            background19.move(to: CGPoint(x: 5.5, y: 32))
            background19.addCurve(to: CGPoint(x: 0, y: 26.5), controlPoint1: CGPoint(x: 2.16, y: 32), controlPoint2: CGPoint(x: 0, y: 29.84))
            background19.addLine(to: CGPoint(x: 0, y: 5.5))
            background19.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background19.addLine(to: CGPoint(x: 41.5, y: 0))
            background19.addCurve(to: CGPoint(x: 47, y: 5.5), controlPoint1: CGPoint(x: 44.84, y: 0), controlPoint2: CGPoint(x: 47, y: 2.16))
            background19.addLine(to: CGPoint(x: 47, y: 26.5))
            background19.addCurve(to: CGPoint(x: 41.5, y: 32), controlPoint1: CGPoint(x: 47, y: 29.84), controlPoint2: CGPoint(x: 44.84, y: 32))
            background19.addLine(to: CGPoint(x: 5.5, y: 32))
            background19.close()
            context.saveGState()
            background19.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background19.cgPath)
            context.addRect(background19.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -48, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 48, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background19.fill()
            context.restoreGState()
            background19.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background19.fill()
            context.restoreGState()
            
            /// A
            let a = NSMutableAttributedString(string: "A")
            a.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: a.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                a.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: a.length))
            }
            a.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: a.length))
            context.saveGState()
            a.draw(at: CGPoint(x: 17, y: 3))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// First Row
        do {
            context.saveGState()
            context.translateBy(x: 72, y: 6)
            
            /// Background
            let background20 = UIBezierPath()
            background20.move(to: CGPoint(x: 5.5, y: 32))
            background20.addCurve(to: CGPoint(x: 0, y: 26.5), controlPoint1: CGPoint(x: 2.16, y: 32), controlPoint2: CGPoint(x: 0, y: 29.84))
            background20.addLine(to: CGPoint(x: 0, y: 5.5))
            background20.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background20.addLine(to: CGPoint(x: 41.5, y: 0))
            background20.addCurve(to: CGPoint(x: 47, y: 5.5), controlPoint1: CGPoint(x: 44.84, y: 0), controlPoint2: CGPoint(x: 47, y: 2.16))
            background20.addLine(to: CGPoint(x: 47, y: 26.5))
            background20.addCurve(to: CGPoint(x: 41.5, y: 32), controlPoint1: CGPoint(x: 47, y: 29.84), controlPoint2: CGPoint(x: 44.84, y: 32))
            background20.addLine(to: CGPoint(x: 5.5, y: 32))
            background20.close()
            context.saveGState()
            context.translateBy(x: 476, y: 0)
            background20.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background20.cgPath)
            context.addRect(background20.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -48, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 48, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background20.fill()
            context.restoreGState()
            background20.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background20.fill()
            context.restoreGState()
            
            /// P
            let p = NSMutableAttributedString(string: "P")
            p.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: p.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                p.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: p.length))
            }
            p.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: p.length))
            context.saveGState()
            p.draw(at: CGPoint(x: 492, y: 3))
            context.restoreGState()
            
            /// Background
            let background21 = UIBezierPath()
            background21.move(to: CGPoint(x: 5.5, y: 32))
            background21.addCurve(to: CGPoint(x: 0, y: 26.5), controlPoint1: CGPoint(x: 2.16, y: 32), controlPoint2: CGPoint(x: 0, y: 29.84))
            background21.addLine(to: CGPoint(x: 0, y: 5.5))
            background21.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background21.addLine(to: CGPoint(x: 41.5, y: 0))
            background21.addCurve(to: CGPoint(x: 47, y: 5.5), controlPoint1: CGPoint(x: 44.84, y: 0), controlPoint2: CGPoint(x: 47, y: 2.16))
            background21.addLine(to: CGPoint(x: 47, y: 26.5))
            background21.addCurve(to: CGPoint(x: 41.5, y: 32), controlPoint1: CGPoint(x: 47, y: 29.84), controlPoint2: CGPoint(x: 44.84, y: 32))
            background21.addLine(to: CGPoint(x: 5.5, y: 32))
            background21.close()
            context.saveGState()
            context.translateBy(x: 423, y: 0)
            background21.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background21.cgPath)
            context.addRect(background21.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -48, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 48, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background21.fill()
            context.restoreGState()
            background21.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background21.fill()
            context.restoreGState()
            
            /// O
            let o = NSMutableAttributedString(string: "O")
            o.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: o.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                o.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: o.length))
            }
            o.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: o.length))
            context.saveGState()
            o.draw(at: CGPoint(x: 438, y: 3))
            context.restoreGState()
            
            /// Background
            let background22 = UIBezierPath()
            background22.move(to: CGPoint(x: 5.5, y: 32))
            background22.addCurve(to: CGPoint(x: 0, y: 26.5), controlPoint1: CGPoint(x: 2.16, y: 32), controlPoint2: CGPoint(x: 0, y: 29.84))
            background22.addLine(to: CGPoint(x: 0, y: 5.5))
            background22.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background22.addLine(to: CGPoint(x: 41.5, y: 0))
            background22.addCurve(to: CGPoint(x: 47, y: 5.5), controlPoint1: CGPoint(x: 44.84, y: 0), controlPoint2: CGPoint(x: 47, y: 2.16))
            background22.addLine(to: CGPoint(x: 47, y: 26.5))
            background22.addCurve(to: CGPoint(x: 41.5, y: 32), controlPoint1: CGPoint(x: 47, y: 29.84), controlPoint2: CGPoint(x: 44.84, y: 32))
            background22.addLine(to: CGPoint(x: 5.5, y: 32))
            background22.close()
            context.saveGState()
            context.translateBy(x: 370, y: 0)
            background22.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background22.cgPath)
            context.addRect(background22.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -48, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 48, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background22.fill()
            context.restoreGState()
            background22.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background22.fill()
            context.restoreGState()
            
            /// I
            let i = NSMutableAttributedString(string: "I")
            i.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: i.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                i.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: i.length))
            }
            i.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: i.length))
            context.saveGState()
            i.draw(at: CGPoint(x: 390.5, y: 3))
            context.restoreGState()
            
            /// Background
            let background23 = UIBezierPath()
            background23.move(to: CGPoint(x: 5.5, y: 32))
            background23.addCurve(to: CGPoint(x: 0, y: 26.5), controlPoint1: CGPoint(x: 2.16, y: 32), controlPoint2: CGPoint(x: 0, y: 29.84))
            background23.addLine(to: CGPoint(x: 0, y: 5.5))
            background23.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background23.addLine(to: CGPoint(x: 41.5, y: 0))
            background23.addCurve(to: CGPoint(x: 47, y: 5.5), controlPoint1: CGPoint(x: 44.84, y: 0), controlPoint2: CGPoint(x: 47, y: 2.16))
            background23.addLine(to: CGPoint(x: 47, y: 26.5))
            background23.addCurve(to: CGPoint(x: 41.5, y: 32), controlPoint1: CGPoint(x: 47, y: 29.84), controlPoint2: CGPoint(x: 44.84, y: 32))
            background23.addLine(to: CGPoint(x: 5.5, y: 32))
            background23.close()
            context.saveGState()
            context.translateBy(x: 317, y: 0)
            background23.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background23.cgPath)
            context.addRect(background23.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -48, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 48, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background23.fill()
            context.restoreGState()
            background23.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background23.fill()
            context.restoreGState()
            
            /// U
            let u = NSMutableAttributedString(string: "U")
            u.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: u.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                u.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: u.length))
            }
            u.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: u.length))
            context.saveGState()
            u.draw(at: CGPoint(x: 332.5, y: 3))
            context.restoreGState()
            
            /// Background
            let background24 = UIBezierPath()
            background24.move(to: CGPoint(x: 5.5, y: 32))
            background24.addCurve(to: CGPoint(x: 0, y: 26.5), controlPoint1: CGPoint(x: 2.16, y: 32), controlPoint2: CGPoint(x: 0, y: 29.84))
            background24.addLine(to: CGPoint(x: 0, y: 5.5))
            background24.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background24.addLine(to: CGPoint(x: 41.5, y: 0))
            background24.addCurve(to: CGPoint(x: 47, y: 5.5), controlPoint1: CGPoint(x: 44.84, y: 0), controlPoint2: CGPoint(x: 47, y: 2.16))
            background24.addLine(to: CGPoint(x: 47, y: 26.5))
            background24.addCurve(to: CGPoint(x: 41.5, y: 32), controlPoint1: CGPoint(x: 47, y: 29.84), controlPoint2: CGPoint(x: 44.84, y: 32))
            background24.addLine(to: CGPoint(x: 5.5, y: 32))
            background24.close()
            context.saveGState()
            context.translateBy(x: 264, y: 0)
            background24.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background24.cgPath)
            context.addRect(background24.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -48, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 48, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background24.fill()
            context.restoreGState()
            background24.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background24.fill()
            context.restoreGState()
            
            /// Y
            let y = NSMutableAttributedString(string: "Y")
            y.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: y.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                y.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: y.length))
            }
            y.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: y.length))
            context.saveGState()
            y.draw(at: CGPoint(x: 281, y: 3))
            context.restoreGState()
            
            /// Background
            let background25 = UIBezierPath()
            background25.move(to: CGPoint(x: 5.5, y: 32))
            background25.addCurve(to: CGPoint(x: 0, y: 26.5), controlPoint1: CGPoint(x: 2.16, y: 32), controlPoint2: CGPoint(x: 0, y: 29.84))
            background25.addLine(to: CGPoint(x: 0, y: 5.5))
            background25.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background25.addLine(to: CGPoint(x: 41.5, y: 0))
            background25.addCurve(to: CGPoint(x: 47, y: 5.5), controlPoint1: CGPoint(x: 44.84, y: 0), controlPoint2: CGPoint(x: 47, y: 2.16))
            background25.addLine(to: CGPoint(x: 47, y: 26.5))
            background25.addCurve(to: CGPoint(x: 41.5, y: 32), controlPoint1: CGPoint(x: 47, y: 29.84), controlPoint2: CGPoint(x: 44.84, y: 32))
            background25.addLine(to: CGPoint(x: 5.5, y: 32))
            background25.close()
            context.saveGState()
            context.translateBy(x: 212, y: 0)
            background25.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background25.cgPath)
            context.addRect(background25.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -48, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 48, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background25.fill()
            context.restoreGState()
            background25.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background25.fill()
            context.restoreGState()
            
            /// T
            let t = NSMutableAttributedString(string: "T")
            t.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: t.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                t.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: t.length))
            }
            t.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: t.length))
            context.saveGState()
            t.draw(at: CGPoint(x: 229, y: 3))
            context.restoreGState()
            
            /// Background
            let background26 = UIBezierPath()
            background26.move(to: CGPoint(x: 5.5, y: 32))
            background26.addCurve(to: CGPoint(x: 0, y: 26.5), controlPoint1: CGPoint(x: 2.16, y: 32), controlPoint2: CGPoint(x: 0, y: 29.84))
            background26.addLine(to: CGPoint(x: 0, y: 5.5))
            background26.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background26.addLine(to: CGPoint(x: 41.5, y: 0))
            background26.addCurve(to: CGPoint(x: 47, y: 5.5), controlPoint1: CGPoint(x: 44.84, y: 0), controlPoint2: CGPoint(x: 47, y: 2.16))
            background26.addLine(to: CGPoint(x: 47, y: 26.5))
            background26.addCurve(to: CGPoint(x: 41.5, y: 32), controlPoint1: CGPoint(x: 47, y: 29.84), controlPoint2: CGPoint(x: 44.84, y: 32))
            background26.addLine(to: CGPoint(x: 5.5, y: 32))
            background26.close()
            context.saveGState()
            context.translateBy(x: 159, y: 0)
            background26.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background26.cgPath)
            context.addRect(background26.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -48, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 48, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background26.fill()
            context.restoreGState()
            background26.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background26.fill()
            context.restoreGState()
            
            /// R
            let r = NSMutableAttributedString(string: "R")
            r.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: r.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                r.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: r.length))
            }
            r.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: r.length))
            context.saveGState()
            r.draw(at: CGPoint(x: 176, y: 3))
            context.restoreGState()
            
            /// Background
            let background27 = UIBezierPath()
            background27.move(to: CGPoint(x: 5.5, y: 32))
            background27.addCurve(to: CGPoint(x: 0, y: 26.5), controlPoint1: CGPoint(x: 2.16, y: 32), controlPoint2: CGPoint(x: 0, y: 29.84))
            background27.addLine(to: CGPoint(x: 0, y: 5.5))
            background27.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background27.addLine(to: CGPoint(x: 41.5, y: 0))
            background27.addCurve(to: CGPoint(x: 47, y: 5.5), controlPoint1: CGPoint(x: 44.84, y: 0), controlPoint2: CGPoint(x: 47, y: 2.16))
            background27.addLine(to: CGPoint(x: 47, y: 26.5))
            background27.addCurve(to: CGPoint(x: 41.5, y: 32), controlPoint1: CGPoint(x: 47, y: 29.84), controlPoint2: CGPoint(x: 44.84, y: 32))
            background27.addLine(to: CGPoint(x: 5.5, y: 32))
            background27.close()
            context.saveGState()
            context.translateBy(x: 106, y: 0)
            background27.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background27.cgPath)
            context.addRect(background27.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -48, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 48, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background27.fill()
            context.restoreGState()
            background27.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background27.fill()
            context.restoreGState()
            
            /// E
            let e = NSMutableAttributedString(string: "E")
            e.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: e.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                e.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: e.length))
            }
            e.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: e.length))
            context.saveGState()
            e.draw(at: CGPoint(x: 123.5, y: 3))
            context.restoreGState()
            
            /// Background
            let background28 = UIBezierPath()
            background28.move(to: CGPoint(x: 5.5, y: 32))
            background28.addCurve(to: CGPoint(x: 0, y: 26.5), controlPoint1: CGPoint(x: 2.16, y: 32), controlPoint2: CGPoint(x: 0, y: 29.84))
            background28.addLine(to: CGPoint(x: 0, y: 5.5))
            background28.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background28.addLine(to: CGPoint(x: 41.5, y: 0))
            background28.addCurve(to: CGPoint(x: 47, y: 5.5), controlPoint1: CGPoint(x: 44.84, y: 0), controlPoint2: CGPoint(x: 47, y: 2.16))
            background28.addLine(to: CGPoint(x: 47, y: 26.5))
            background28.addCurve(to: CGPoint(x: 41.5, y: 32), controlPoint1: CGPoint(x: 47, y: 29.84), controlPoint2: CGPoint(x: 44.84, y: 32))
            background28.addLine(to: CGPoint(x: 5.5, y: 32))
            background28.close()
            context.saveGState()
            context.translateBy(x: 53, y: 0)
            background28.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background28.cgPath)
            context.addRect(background28.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -48, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 48, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background28.fill()
            context.restoreGState()
            background28.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background28.fill()
            context.restoreGState()
            
            /// W
            let w = NSMutableAttributedString(string: "W")
            w.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: w.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                w.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: w.length))
            }
            w.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: w.length))
            context.saveGState()
            w.draw(at: CGPoint(x: 66.5, y: 3))
            context.restoreGState()
            
            /// Background
            let background29 = UIBezierPath()
            background29.move(to: CGPoint(x: 5.5, y: 32))
            background29.addCurve(to: CGPoint(x: 0, y: 26.5), controlPoint1: CGPoint(x: 2.16, y: 32), controlPoint2: CGPoint(x: 0, y: 29.84))
            background29.addLine(to: CGPoint(x: 0, y: 5.5))
            background29.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background29.addLine(to: CGPoint(x: 41.5, y: 0))
            background29.addCurve(to: CGPoint(x: 47, y: 5.5), controlPoint1: CGPoint(x: 44.84, y: 0), controlPoint2: CGPoint(x: 47, y: 2.16))
            background29.addLine(to: CGPoint(x: 47, y: 26.5))
            background29.addCurve(to: CGPoint(x: 41.5, y: 32), controlPoint1: CGPoint(x: 47, y: 29.84), controlPoint2: CGPoint(x: 44.84, y: 32))
            background29.addLine(to: CGPoint(x: 5.5, y: 32))
            background29.close()
            context.saveGState()
            background29.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background29.cgPath)
            context.addRect(background29.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -48, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 48, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background29.fill()
            context.restoreGState()
            background29.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background29.fill()
            context.restoreGState()
            
            /// Q
            let q = NSMutableAttributedString(string: "Q")
            q.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: q.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                q.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: q.length))
            }
            q.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: q.length))
            context.saveGState()
            q.draw(at: CGPoint(x: 15, y: 3))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawIPhoneXKeyboardsDefault(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 291), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 291), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 291)
        
        /// Background
        // Warning: New symbols are not supported.
        
        /// Shift
        do {
            context.saveGState()
            context.translateBy(x: 3, y: 117)
            
            /// Background
            let background2 = UIBezierPath()
            background2.move(to: CGPoint(x: 5.5, y: 42))
            background2.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background2.addLine(to: CGPoint(x: 0, y: 5.5))
            background2.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background2.addLine(to: CGPoint(x: 35.5, y: 0))
            background2.addCurve(to: CGPoint(x: 41, y: 5.5), controlPoint1: CGPoint(x: 38.84, y: 0), controlPoint2: CGPoint(x: 41, y: 2.16))
            background2.addLine(to: CGPoint(x: 41, y: 36.5))
            background2.addCurve(to: CGPoint(x: 35.5, y: 42), controlPoint1: CGPoint(x: 41, y: 39.84), controlPoint2: CGPoint(x: 38.84, y: 42))
            background2.addLine(to: CGPoint(x: 5.5, y: 42))
            background2.close()
            context.saveGState()
            background2.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background2.cgPath)
            context.addRect(background2.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -42, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 42, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background2.fill()
            context.restoreGState()
            background2.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background2.fill()
            context.restoreGState()
            
            /// Shift
            let shift = UIBezierPath()
            shift.move(to: CGPoint(x: 10.24, y: 0.29))
            shift.addCurve(to: CGPoint(x: 8.83, y: 0.29), controlPoint1: CGPoint(x: 9.85, y: -0.1), controlPoint2: CGPoint(x: 9.22, y: -0.1))
            shift.addLine(to: CGPoint(x: 0.45, y: 8.67))
            shift.addCurve(to: CGPoint(x: 1.03, y: 10.09), controlPoint1: CGPoint(x: -0.33, y: 9.45), controlPoint2: CGPoint(x: -0.07, y: 10.09))
            shift.addLine(to: CGPoint(x: 5.03, y: 10.09))
            shift.addLine(to: CGPoint(x: 5.03, y: 15.1))
            shift.addCurve(to: CGPoint(x: 6.03, y: 16.09), controlPoint1: CGPoint(x: 5.03, y: 15.64), controlPoint2: CGPoint(x: 5.48, y: 16.09))
            shift.addLine(to: CGPoint(x: 13.04, y: 16.09))
            shift.addCurve(to: CGPoint(x: 14.03, y: 15.1), controlPoint1: CGPoint(x: 13.59, y: 16.09), controlPoint2: CGPoint(x: 14.03, y: 15.64))
            shift.addLine(to: CGPoint(x: 14.03, y: 10.09))
            shift.addLine(to: CGPoint(x: 18.04, y: 10.09))
            shift.addCurve(to: CGPoint(x: 18.62, y: 8.67), controlPoint1: CGPoint(x: 19.14, y: 10.09), controlPoint2: CGPoint(x: 19.4, y: 9.45))
            shift.addLine(to: CGPoint(x: 10.24, y: 0.29))
            shift.close()
            context.saveGState()
            context.translateBy(x: 11, y: 12.91)
            shift.usesEvenOddFillRule = true
            UIColor.black.setFill()
            shift.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Keys
        // Warning: New symbols are not supported.
        
        /// Emoji Glyph
        let emojiGlyph = UIBezierPath()
        emojiGlyph.move(to: CGPoint(x: 13.5, y: 0))
        emojiGlyph.addCurve(to: CGPoint(x: 27, y: 13.5), controlPoint1: CGPoint(x: 20.96, y: 0), controlPoint2: CGPoint(x: 27, y: 6.04))
        emojiGlyph.addCurve(to: CGPoint(x: 13.5, y: 27), controlPoint1: CGPoint(x: 27, y: 20.96), controlPoint2: CGPoint(x: 20.96, y: 27))
        emojiGlyph.addCurve(to: CGPoint(x: 0, y: 13.5), controlPoint1: CGPoint(x: 6.04, y: 27), controlPoint2: CGPoint(x: 0, y: 20.96))
        emojiGlyph.addCurve(to: CGPoint(x: 13.5, y: 0), controlPoint1: CGPoint(x: 0, y: 6.04), controlPoint2: CGPoint(x: 6.04, y: 0))
        emojiGlyph.close()
        emojiGlyph.move(to: CGPoint(x: 13.5, y: 1.57))
        emojiGlyph.addCurve(to: CGPoint(x: 5.07, y: 5.07), controlPoint1: CGPoint(x: 10.34, y: 1.57), controlPoint2: CGPoint(x: 7.3, y: 2.83))
        emojiGlyph.addCurve(to: CGPoint(x: 1.57, y: 13.5), controlPoint1: CGPoint(x: 2.83, y: 7.3), controlPoint2: CGPoint(x: 1.57, y: 10.34))
        emojiGlyph.addCurve(to: CGPoint(x: 13.5, y: 25.43), controlPoint1: CGPoint(x: 1.57, y: 20.09), controlPoint2: CGPoint(x: 6.91, y: 25.43))
        emojiGlyph.addCurve(to: CGPoint(x: 25.43, y: 13.5), controlPoint1: CGPoint(x: 20.09, y: 25.43), controlPoint2: CGPoint(x: 25.43, y: 20.09))
        emojiGlyph.addCurve(to: CGPoint(x: 13.5, y: 1.57), controlPoint1: CGPoint(x: 25.43, y: 6.91), controlPoint2: CGPoint(x: 20.09, y: 1.57))
        emojiGlyph.close()
        emojiGlyph.move(to: CGPoint(x: 9.23, y: 7.64))
        emojiGlyph.addCurve(to: CGPoint(x: 10.34, y: 8.1), controlPoint1: CGPoint(x: 9.65, y: 7.64), controlPoint2: CGPoint(x: 10.05, y: 7.8))
        emojiGlyph.addCurve(to: CGPoint(x: 10.81, y: 9.21), controlPoint1: CGPoint(x: 10.64, y: 8.39), controlPoint2: CGPoint(x: 10.81, y: 8.79))
        emojiGlyph.addCurve(to: CGPoint(x: 9.23, y: 10.78), controlPoint1: CGPoint(x: 10.81, y: 10.08), controlPoint2: CGPoint(x: 10.1, y: 10.78))
        emojiGlyph.addCurve(to: CGPoint(x: 7.65, y: 9.21), controlPoint1: CGPoint(x: 8.36, y: 10.78), controlPoint2: CGPoint(x: 7.65, y: 10.08))
        emojiGlyph.addCurve(to: CGPoint(x: 8.11, y: 8.1), controlPoint1: CGPoint(x: 7.65, y: 8.79), controlPoint2: CGPoint(x: 7.82, y: 8.39))
        emojiGlyph.addCurve(to: CGPoint(x: 9.23, y: 7.64), controlPoint1: CGPoint(x: 8.41, y: 7.8), controlPoint2: CGPoint(x: 8.81, y: 7.64))
        emojiGlyph.close()
        emojiGlyph.move(to: CGPoint(x: 17.78, y: 7.64))
        emojiGlyph.addCurve(to: CGPoint(x: 18.89, y: 8.1), controlPoint1: CGPoint(x: 18.2, y: 7.64), controlPoint2: CGPoint(x: 18.6, y: 7.8))
        emojiGlyph.addCurve(to: CGPoint(x: 19.36, y: 9.21), controlPoint1: CGPoint(x: 19.19, y: 8.39), controlPoint2: CGPoint(x: 19.36, y: 8.79))
        emojiGlyph.addCurve(to: CGPoint(x: 18.57, y: 10.59), controlPoint1: CGPoint(x: 19.36, y: 9.78), controlPoint2: CGPoint(x: 19.07, y: 10.31))
        emojiGlyph.addCurve(to: CGPoint(x: 16.98, y: 10.59), controlPoint1: CGPoint(x: 18.08, y: 10.88), controlPoint2: CGPoint(x: 17.48, y: 10.88))
        emojiGlyph.addCurve(to: CGPoint(x: 16.2, y: 9.21), controlPoint1: CGPoint(x: 16.49, y: 10.31), controlPoint2: CGPoint(x: 16.19, y: 9.78))
        emojiGlyph.addCurve(to: CGPoint(x: 16.66, y: 8.1), controlPoint1: CGPoint(x: 16.2, y: 8.79), controlPoint2: CGPoint(x: 16.37, y: 8.39))
        emojiGlyph.addCurve(to: CGPoint(x: 17.78, y: 7.64), controlPoint1: CGPoint(x: 16.96, y: 7.8), controlPoint2: CGPoint(x: 17.36, y: 7.64))
        emojiGlyph.close()
        emojiGlyph.move(to: CGPoint(x: 22.5, y: 15.83))
        emojiGlyph.addCurve(to: CGPoint(x: 13.5, y: 22.95), controlPoint1: CGPoint(x: 21.78, y: 19.71), controlPoint2: CGPoint(x: 18.03, y: 22.95))
        emojiGlyph.addCurve(to: CGPoint(x: 4.52, y: 15.92), controlPoint1: CGPoint(x: 9, y: 22.95), controlPoint2: CGPoint(x: 5.28, y: 19.76))
        emojiGlyph.addCurve(to: CGPoint(x: 5.89, y: 14.91), controlPoint1: CGPoint(x: 4.36, y: 14.96), controlPoint2: CGPoint(x: 5.15, y: 14.73))
        emojiGlyph.addCurve(to: CGPoint(x: 13.5, y: 15.94), controlPoint1: CGPoint(x: 8.36, y: 15.63), controlPoint2: CGPoint(x: 10.93, y: 15.97))
        emojiGlyph.addCurve(to: CGPoint(x: 21.1, y: 14.91), controlPoint1: CGPoint(x: 16.07, y: 15.97), controlPoint2: CGPoint(x: 18.63, y: 15.63))
        emojiGlyph.addCurve(to: CGPoint(x: 22.5, y: 15.83), controlPoint1: CGPoint(x: 21.82, y: 14.73), controlPoint2: CGPoint(x: 22.59, y: 14.94))
        emojiGlyph.close()
        emojiGlyph.move(to: CGPoint(x: 20.06, y: 16.37))
        emojiGlyph.addCurve(to: CGPoint(x: 19.84, y: 16.44), controlPoint1: CGPoint(x: 19.99, y: 16.39), controlPoint2: CGPoint(x: 19.91, y: 16.41))
        emojiGlyph.addCurve(to: CGPoint(x: 20.07, y: 16.37), controlPoint1: CGPoint(x: 19.84, y: 16.44), controlPoint2: CGPoint(x: 20.07, y: 16.36))
        emojiGlyph.addCurve(to: CGPoint(x: 13.51, y: 17.21), controlPoint1: CGPoint(x: 17.93, y: 16.95), controlPoint2: CGPoint(x: 15.72, y: 17.24))
        emojiGlyph.addCurve(to: CGPoint(x: 6.88, y: 16.34), controlPoint1: CGPoint(x: 10.87, y: 17.21), controlPoint2: CGPoint(x: 8.51, y: 16.92))
        emojiGlyph.addCurve(to: CGPoint(x: 6.76, y: 17.8), controlPoint1: CGPoint(x: 5.7, y: 15.98), controlPoint2: CGPoint(x: 5.93, y: 17.37))
        emojiGlyph.addCurve(to: CGPoint(x: 13.51, y: 19.22), controlPoint1: CGPoint(x: 8.88, y: 18.76), controlPoint2: CGPoint(x: 11.18, y: 19.25))
        emojiGlyph.addCurve(to: CGPoint(x: 20.38, y: 17.74), controlPoint1: CGPoint(x: 16.28, y: 19.22), controlPoint2: CGPoint(x: 18.75, y: 18.58))
        emojiGlyph.addCurve(to: CGPoint(x: 20.06, y: 16.37), controlPoint1: CGPoint(x: 21.15, y: 17.25), controlPoint2: CGPoint(x: 21.3, y: 15.92))
        emojiGlyph.close()
        context.saveGState()
        context.translateBy(x: 25, y: 240)
        emojiGlyph.usesEvenOddFillRule = true
        UIColor(hue: 0.597, saturation: 0.13, brightness: 0.361, alpha: 1).setFill()
        emojiGlyph.fill()
        context.restoreGState()
        
        /// Dictation Glyph
        let dictationGlyph = UIBezierPath()
        dictationGlyph.move(to: CGPoint(x: 11.47, y: 25))
        dictationGlyph.addLine(to: CGPoint(x: 11.47, y: 25))
        dictationGlyph.addLine(to: CGPoint(x: 3.53, y: 25))
        dictationGlyph.addLine(to: CGPoint(x: 3.53, y: 25))
        dictationGlyph.addCurve(to: CGPoint(x: 3.5, y: 25), controlPoint1: CGPoint(x: 3.52, y: 25), controlPoint2: CGPoint(x: 3.51, y: 25))
        dictationGlyph.addCurve(to: CGPoint(x: 2.67, y: 24.17), controlPoint1: CGPoint(x: 3.04, y: 25), controlPoint2: CGPoint(x: 2.67, y: 24.63))
        dictationGlyph.addCurve(to: CGPoint(x: 3.5, y: 23.33), controlPoint1: CGPoint(x: 2.67, y: 23.71), controlPoint2: CGPoint(x: 3.04, y: 23.33))
        dictationGlyph.addCurve(to: CGPoint(x: 3.53, y: 23.33), controlPoint1: CGPoint(x: 3.51, y: 23.33), controlPoint2: CGPoint(x: 3.52, y: 23.33))
        dictationGlyph.addLine(to: CGPoint(x: 3.53, y: 23.32))
        dictationGlyph.addLine(to: CGPoint(x: 6.68, y: 23.32))
        dictationGlyph.addLine(to: CGPoint(x: 6.68, y: 20.79))
        dictationGlyph.addCurve(to: CGPoint(x: 0, y: 13.28), controlPoint1: CGPoint(x: 2.87, y: 20.35), controlPoint2: CGPoint(x: -0, y: 17.12))
        dictationGlyph.addCurve(to: CGPoint(x: 0.01, y: 13.18), controlPoint1: CGPoint(x: 0, y: 13.25), controlPoint2: CGPoint(x: 0.01, y: 13.21))
        dictationGlyph.addLine(to: CGPoint(x: 0.01, y: 11.27))
        dictationGlyph.addCurve(to: CGPoint(x: 0, y: 11.17), controlPoint1: CGPoint(x: 0, y: 11.23), controlPoint2: CGPoint(x: 0, y: 11.2))
        dictationGlyph.addCurve(to: CGPoint(x: 0.83, y: 10.33), controlPoint1: CGPoint(x: 0, y: 10.7), controlPoint2: CGPoint(x: 0.37, y: 10.33))
        dictationGlyph.addCurve(to: CGPoint(x: 1.67, y: 11.17), controlPoint1: CGPoint(x: 1.29, y: 10.33), controlPoint2: CGPoint(x: 1.67, y: 10.7))
        dictationGlyph.addCurve(to: CGPoint(x: 1.66, y: 11.25), controlPoint1: CGPoint(x: 1.67, y: 11.19), controlPoint2: CGPoint(x: 1.67, y: 11.22))
        dictationGlyph.addLine(to: CGPoint(x: 1.66, y: 13.54))
        dictationGlyph.addLine(to: CGPoint(x: 1.66, y: 13.54))
        dictationGlyph.addLine(to: CGPoint(x: 1.66, y: 13.55))
        dictationGlyph.addCurve(to: CGPoint(x: 1.66, y: 13.64), controlPoint1: CGPoint(x: 1.66, y: 13.58), controlPoint2: CGPoint(x: 1.66, y: 13.61))
        dictationGlyph.addLine(to: CGPoint(x: 1.66, y: 13.95))
        dictationGlyph.addLine(to: CGPoint(x: 1.68, y: 13.95))
        dictationGlyph.addCurve(to: CGPoint(x: 7.32, y: 19.33), controlPoint1: CGPoint(x: 1.93, y: 16.92), controlPoint2: CGPoint(x: 4.35, y: 19.23))
        dictationGlyph.addLine(to: CGPoint(x: 7.66, y: 19.33))
        dictationGlyph.addCurve(to: CGPoint(x: 13.31, y: 13.95), controlPoint1: CGPoint(x: 10.63, y: 19.23), controlPoint2: CGPoint(x: 13.06, y: 16.92))
        dictationGlyph.addLine(to: CGPoint(x: 13.33, y: 13.95))
        dictationGlyph.addLine(to: CGPoint(x: 13.33, y: 11.18))
        dictationGlyph.addLine(to: CGPoint(x: 13.33, y: 11.18))
        dictationGlyph.addCurve(to: CGPoint(x: 13.33, y: 11.17), controlPoint1: CGPoint(x: 13.33, y: 11.17), controlPoint2: CGPoint(x: 13.33, y: 11.17))
        dictationGlyph.addCurve(to: CGPoint(x: 14.17, y: 10.33), controlPoint1: CGPoint(x: 13.33, y: 10.7), controlPoint2: CGPoint(x: 13.71, y: 10.33))
        dictationGlyph.addCurve(to: CGPoint(x: 15, y: 11.17), controlPoint1: CGPoint(x: 14.63, y: 10.33), controlPoint2: CGPoint(x: 15, y: 10.7))
        dictationGlyph.addCurve(to: CGPoint(x: 15, y: 11.24), controlPoint1: CGPoint(x: 15, y: 11.19), controlPoint2: CGPoint(x: 15, y: 11.21))
        dictationGlyph.addLine(to: CGPoint(x: 15, y: 13.28))
        dictationGlyph.addLine(to: CGPoint(x: 14.99, y: 13.28))
        dictationGlyph.addLine(to: CGPoint(x: 14.99, y: 13.28))
        dictationGlyph.addCurve(to: CGPoint(x: 8.33, y: 20.79), controlPoint1: CGPoint(x: 14.99, y: 17.11), controlPoint2: CGPoint(x: 12.13, y: 20.34))
        dictationGlyph.addLine(to: CGPoint(x: 8.33, y: 23.32))
        dictationGlyph.addLine(to: CGPoint(x: 11.47, y: 23.32))
        dictationGlyph.addLine(to: CGPoint(x: 11.47, y: 23.33))
        dictationGlyph.addCurve(to: CGPoint(x: 11.5, y: 23.33), controlPoint1: CGPoint(x: 11.48, y: 23.33), controlPoint2: CGPoint(x: 11.49, y: 23.33))
        dictationGlyph.addCurve(to: CGPoint(x: 12.33, y: 24.17), controlPoint1: CGPoint(x: 11.96, y: 23.33), controlPoint2: CGPoint(x: 12.33, y: 23.71))
        dictationGlyph.addCurve(to: CGPoint(x: 11.5, y: 25), controlPoint1: CGPoint(x: 12.33, y: 24.63), controlPoint2: CGPoint(x: 11.96, y: 25))
        dictationGlyph.addCurve(to: CGPoint(x: 11.47, y: 25), controlPoint1: CGPoint(x: 11.49, y: 25), controlPoint2: CGPoint(x: 11.48, y: 25))
        dictationGlyph.close()
        dictationGlyph.move(to: CGPoint(x: 11.99, y: 11.88))
        dictationGlyph.addCurve(to: CGPoint(x: 11.97, y: 13.42), controlPoint1: CGPoint(x: 11.99, y: 12.38), controlPoint2: CGPoint(x: 11.99, y: 12.91))
        dictationGlyph.addCurve(to: CGPoint(x: 11.76, y: 14.76), controlPoint1: CGPoint(x: 11.95, y: 13.87), controlPoint2: CGPoint(x: 11.88, y: 14.32))
        dictationGlyph.addCurve(to: CGPoint(x: 10.18, y: 17.07), controlPoint1: CGPoint(x: 11.5, y: 15.68), controlPoint2: CGPoint(x: 10.94, y: 16.49))
        dictationGlyph.addCurve(to: CGPoint(x: 4.82, y: 17.07), controlPoint1: CGPoint(x: 8.61, y: 18.31), controlPoint2: CGPoint(x: 6.39, y: 18.31))
        dictationGlyph.addCurve(to: CGPoint(x: 3.23, y: 14.76), controlPoint1: CGPoint(x: 4.05, y: 16.49), controlPoint2: CGPoint(x: 3.49, y: 15.68))
        dictationGlyph.addCurve(to: CGPoint(x: 3.03, y: 13.42), controlPoint1: CGPoint(x: 3.12, y: 14.32), controlPoint2: CGPoint(x: 3.05, y: 13.87))
        dictationGlyph.addCurve(to: CGPoint(x: 3, y: 11.88), controlPoint1: CGPoint(x: 3, y: 12.91), controlPoint2: CGPoint(x: 3, y: 12.38))
        dictationGlyph.addLine(to: CGPoint(x: 3, y: 7.66))
        dictationGlyph.addCurve(to: CGPoint(x: 3, y: 4.58), controlPoint1: CGPoint(x: 3, y: 7.16), controlPoint2: CGPoint(x: 3, y: 4.95))
        dictationGlyph.addCurve(to: CGPoint(x: 3.23, y: 3.24), controlPoint1: CGPoint(x: 3.01, y: 4.12), controlPoint2: CGPoint(x: 3.09, y: 3.67))
        dictationGlyph.addCurve(to: CGPoint(x: 7.5, y: 0), controlPoint1: CGPoint(x: 3.77, y: 1.32), controlPoint2: CGPoint(x: 5.51, y: 0))
        dictationGlyph.addCurve(to: CGPoint(x: 11.76, y: 3.24), controlPoint1: CGPoint(x: 9.48, y: 0), controlPoint2: CGPoint(x: 11.23, y: 1.32))
        dictationGlyph.addCurve(to: CGPoint(x: 11.99, y: 4.58), controlPoint1: CGPoint(x: 11.89, y: 3.68), controlPoint2: CGPoint(x: 11.96, y: 4.13))
        dictationGlyph.addCurve(to: CGPoint(x: 11.99, y: 7.66), controlPoint1: CGPoint(x: 12.02, y: 5.08), controlPoint2: CGPoint(x: 11.99, y: 7.16))
        dictationGlyph.addLine(to: CGPoint(x: 11.99, y: 11.88))
        dictationGlyph.addLine(to: CGPoint(x: 11.99, y: 11.88))
        dictationGlyph.close()
        dictationGlyph.move(to: CGPoint(x: 10.33, y: 12.67))
        dictationGlyph.addCurve(to: CGPoint(x: 10.33, y: 4.59), controlPoint1: CGPoint(x: 10.33, y: 8.22), controlPoint2: CGPoint(x: 10.35, y: 4.97))
        dictationGlyph.addCurve(to: CGPoint(x: 10.17, y: 3.73), controlPoint1: CGPoint(x: 10.31, y: 4.3), controlPoint2: CGPoint(x: 10.25, y: 4.01))
        dictationGlyph.addCurve(to: CGPoint(x: 9.18, y: 2.24), controlPoint1: CGPoint(x: 10.01, y: 3.14), controlPoint2: CGPoint(x: 9.66, y: 2.62))
        dictationGlyph.addCurve(to: CGPoint(x: 5.82, y: 2.24), controlPoint1: CGPoint(x: 8.19, y: 1.48), controlPoint2: CGPoint(x: 6.81, y: 1.48))
        dictationGlyph.addCurve(to: CGPoint(x: 4.82, y: 3.73), controlPoint1: CGPoint(x: 5.33, y: 2.62), controlPoint2: CGPoint(x: 4.98, y: 3.14))
        dictationGlyph.addCurve(to: CGPoint(x: 4.68, y: 4.59), controlPoint1: CGPoint(x: 4.75, y: 4.01), controlPoint2: CGPoint(x: 4.7, y: 4.3))
        dictationGlyph.addCurve(to: CGPoint(x: 4.67, y: 12.67), controlPoint1: CGPoint(x: 4.65, y: 4.94), controlPoint2: CGPoint(x: 4.67, y: 8.23))
        dictationGlyph.addCurve(to: CGPoint(x: 4.69, y: 13.41), controlPoint1: CGPoint(x: 4.67, y: 12.99), controlPoint2: CGPoint(x: 4.68, y: 13.09))
        dictationGlyph.addCurve(to: CGPoint(x: 4.82, y: 14.27), controlPoint1: CGPoint(x: 4.71, y: 13.7), controlPoint2: CGPoint(x: 4.75, y: 13.99))
        dictationGlyph.addCurve(to: CGPoint(x: 5.82, y: 15.76), controlPoint1: CGPoint(x: 4.98, y: 14.86), controlPoint2: CGPoint(x: 5.33, y: 15.39))
        dictationGlyph.addCurve(to: CGPoint(x: 9.18, y: 15.76), controlPoint1: CGPoint(x: 6.81, y: 16.53), controlPoint2: CGPoint(x: 8.19, y: 16.53))
        dictationGlyph.addCurve(to: CGPoint(x: 10.17, y: 14.27), controlPoint1: CGPoint(x: 9.66, y: 15.38), controlPoint2: CGPoint(x: 10.01, y: 14.86))
        dictationGlyph.addCurve(to: CGPoint(x: 10.3, y: 13.41), controlPoint1: CGPoint(x: 10.24, y: 13.99), controlPoint2: CGPoint(x: 10.29, y: 13.7))
        dictationGlyph.addCurve(to: CGPoint(x: 10.33, y: 12.67), controlPoint1: CGPoint(x: 10.32, y: 13.09), controlPoint2: CGPoint(x: 10.33, y: 12.99))
        dictationGlyph.close()
        context.saveGState()
        context.translateBy(x: 330, y: 241)
        dictationGlyph.usesEvenOddFillRule = true
        UIColor(hue: 0.597, saturation: 0.13, brightness: 0.361, alpha: 1).setFill()
        dictationGlyph.fill()
        context.restoreGState()
        
        /// First Row
        do {
            context.saveGState()
            context.translateBy(x: 3, y: 9)
            
            /// Background
            let background3 = UIBezierPath()
            background3.move(to: CGPoint(x: 5.5, y: 42))
            background3.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background3.addLine(to: CGPoint(x: 0, y: 5.5))
            background3.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background3.addLine(to: CGPoint(x: 26.47, y: 0))
            background3.addCurve(to: CGPoint(x: 31.97, y: 5.5), controlPoint1: CGPoint(x: 29.81, y: 0), controlPoint2: CGPoint(x: 31.97, y: 2.16))
            background3.addLine(to: CGPoint(x: 31.97, y: 36.5))
            background3.addCurve(to: CGPoint(x: 26.47, y: 42), controlPoint1: CGPoint(x: 31.97, y: 39.84), controlPoint2: CGPoint(x: 29.81, y: 42))
            background3.addLine(to: CGPoint(x: 5.5, y: 42))
            background3.close()
            context.saveGState()
            context.translateBy(x: 336.71, y: 0)
            background3.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background3.cgPath)
            context.addRect(background3.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -32.97, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.97, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background3.fill()
            context.restoreGState()
            background3.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background3.fill()
            context.restoreGState()
            
            /// Background
            let background4 = UIBezierPath()
            background4.move(to: CGPoint(x: 5.5, y: 42))
            background4.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background4.addLine(to: CGPoint(x: 0, y: 5.5))
            background4.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background4.addLine(to: CGPoint(x: 26.47, y: 0))
            background4.addCurve(to: CGPoint(x: 31.97, y: 5.5), controlPoint1: CGPoint(x: 29.81, y: 0), controlPoint2: CGPoint(x: 31.97, y: 2.16))
            background4.addLine(to: CGPoint(x: 31.97, y: 36.5))
            background4.addCurve(to: CGPoint(x: 26.47, y: 42), controlPoint1: CGPoint(x: 31.97, y: 39.84), controlPoint2: CGPoint(x: 29.81, y: 42))
            background4.addLine(to: CGPoint(x: 5.5, y: 42))
            background4.close()
            context.saveGState()
            context.translateBy(x: 299.74, y: 0)
            background4.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background4.cgPath)
            context.addRect(background4.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -32.97, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.97, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background4.fill()
            context.restoreGState()
            background4.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background4.fill()
            context.restoreGState()
            
            /// Background
            let background5 = UIBezierPath()
            background5.move(to: CGPoint(x: 5.5, y: 42))
            background5.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background5.addLine(to: CGPoint(x: 0, y: 5.5))
            background5.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background5.addLine(to: CGPoint(x: 26.47, y: 0))
            background5.addCurve(to: CGPoint(x: 31.97, y: 5.5), controlPoint1: CGPoint(x: 29.81, y: 0), controlPoint2: CGPoint(x: 31.97, y: 2.16))
            background5.addLine(to: CGPoint(x: 31.97, y: 36.5))
            background5.addCurve(to: CGPoint(x: 26.47, y: 42), controlPoint1: CGPoint(x: 31.97, y: 39.84), controlPoint2: CGPoint(x: 29.81, y: 42))
            background5.addLine(to: CGPoint(x: 5.5, y: 42))
            background5.close()
            context.saveGState()
            context.translateBy(x: 261.77, y: 0)
            background5.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background5.cgPath)
            context.addRect(background5.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -32.97, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.97, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background5.fill()
            context.restoreGState()
            background5.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background5.fill()
            context.restoreGState()
            
            /// Background
            let background6 = UIBezierPath()
            background6.move(to: CGPoint(x: 5.5, y: 42))
            background6.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background6.addLine(to: CGPoint(x: 0, y: 5.5))
            background6.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background6.addLine(to: CGPoint(x: 26.47, y: 0))
            background6.addCurve(to: CGPoint(x: 31.97, y: 5.5), controlPoint1: CGPoint(x: 29.81, y: 0), controlPoint2: CGPoint(x: 31.97, y: 2.16))
            background6.addLine(to: CGPoint(x: 31.97, y: 36.5))
            background6.addCurve(to: CGPoint(x: 26.47, y: 42), controlPoint1: CGPoint(x: 31.97, y: 39.84), controlPoint2: CGPoint(x: 29.81, y: 42))
            background6.addLine(to: CGPoint(x: 5.5, y: 42))
            background6.close()
            context.saveGState()
            context.translateBy(x: 224.8, y: 0)
            background6.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background6.cgPath)
            context.addRect(background6.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -32.97, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.97, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background6.fill()
            context.restoreGState()
            background6.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background6.fill()
            context.restoreGState()
            
            /// Background
            let background7 = UIBezierPath()
            background7.move(to: CGPoint(x: 5.5, y: 42))
            background7.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background7.addLine(to: CGPoint(x: 0, y: 5.5))
            background7.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background7.addLine(to: CGPoint(x: 26.47, y: 0))
            background7.addCurve(to: CGPoint(x: 31.97, y: 5.5), controlPoint1: CGPoint(x: 29.81, y: 0), controlPoint2: CGPoint(x: 31.97, y: 2.16))
            background7.addLine(to: CGPoint(x: 31.97, y: 36.5))
            background7.addCurve(to: CGPoint(x: 26.47, y: 42), controlPoint1: CGPoint(x: 31.97, y: 39.84), controlPoint2: CGPoint(x: 29.81, y: 42))
            background7.addLine(to: CGPoint(x: 5.5, y: 42))
            background7.close()
            context.saveGState()
            context.translateBy(x: 186.84, y: 0)
            background7.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background7.cgPath)
            context.addRect(background7.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -32.97, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.97, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background7.fill()
            context.restoreGState()
            background7.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background7.fill()
            context.restoreGState()
            
            /// Background
            let background8 = UIBezierPath()
            background8.move(to: CGPoint(x: 5.5, y: 42))
            background8.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background8.addLine(to: CGPoint(x: 0, y: 5.5))
            background8.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background8.addLine(to: CGPoint(x: 26.47, y: 0))
            background8.addCurve(to: CGPoint(x: 31.97, y: 5.5), controlPoint1: CGPoint(x: 29.81, y: 0), controlPoint2: CGPoint(x: 31.97, y: 2.16))
            background8.addLine(to: CGPoint(x: 31.97, y: 36.5))
            background8.addCurve(to: CGPoint(x: 26.47, y: 42), controlPoint1: CGPoint(x: 31.97, y: 39.84), controlPoint2: CGPoint(x: 29.81, y: 42))
            background8.addLine(to: CGPoint(x: 5.5, y: 42))
            background8.close()
            context.saveGState()
            context.translateBy(x: 149.87, y: 0)
            background8.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background8.cgPath)
            context.addRect(background8.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -32.97, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.97, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background8.fill()
            context.restoreGState()
            background8.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background8.fill()
            context.restoreGState()
            
            /// Background
            let background9 = UIBezierPath()
            background9.move(to: CGPoint(x: 5.5, y: 42))
            background9.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background9.addLine(to: CGPoint(x: 0, y: 5.5))
            background9.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background9.addLine(to: CGPoint(x: 26.47, y: 0))
            background9.addCurve(to: CGPoint(x: 31.97, y: 5.5), controlPoint1: CGPoint(x: 29.81, y: 0), controlPoint2: CGPoint(x: 31.97, y: 2.16))
            background9.addLine(to: CGPoint(x: 31.97, y: 36.5))
            background9.addCurve(to: CGPoint(x: 26.47, y: 42), controlPoint1: CGPoint(x: 31.97, y: 39.84), controlPoint2: CGPoint(x: 29.81, y: 42))
            background9.addLine(to: CGPoint(x: 5.5, y: 42))
            background9.close()
            context.saveGState()
            context.translateBy(x: 111.9, y: 0)
            background9.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background9.cgPath)
            context.addRect(background9.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -32.97, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.97, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background9.fill()
            context.restoreGState()
            background9.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background9.fill()
            context.restoreGState()
            
            /// Background
            let background10 = UIBezierPath()
            background10.move(to: CGPoint(x: 5.5, y: 42))
            background10.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background10.addLine(to: CGPoint(x: 0, y: 5.5))
            background10.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background10.addLine(to: CGPoint(x: 26.47, y: 0))
            background10.addCurve(to: CGPoint(x: 31.97, y: 5.5), controlPoint1: CGPoint(x: 29.81, y: 0), controlPoint2: CGPoint(x: 31.97, y: 2.16))
            background10.addLine(to: CGPoint(x: 31.97, y: 36.5))
            background10.addCurve(to: CGPoint(x: 26.47, y: 42), controlPoint1: CGPoint(x: 31.97, y: 39.84), controlPoint2: CGPoint(x: 29.81, y: 42))
            background10.addLine(to: CGPoint(x: 5.5, y: 42))
            background10.close()
            context.saveGState()
            context.translateBy(x: 74.93, y: 0)
            background10.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background10.cgPath)
            context.addRect(background10.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -32.97, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.97, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background10.fill()
            context.restoreGState()
            background10.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background10.fill()
            context.restoreGState()
            
            /// Background
            let background11 = UIBezierPath()
            background11.move(to: CGPoint(x: 5.5, y: 42))
            background11.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background11.addLine(to: CGPoint(x: 0, y: 5.5))
            background11.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background11.addLine(to: CGPoint(x: 26.47, y: 0))
            background11.addCurve(to: CGPoint(x: 31.97, y: 5.5), controlPoint1: CGPoint(x: 29.81, y: 0), controlPoint2: CGPoint(x: 31.97, y: 2.16))
            background11.addLine(to: CGPoint(x: 31.97, y: 36.5))
            background11.addCurve(to: CGPoint(x: 26.47, y: 42), controlPoint1: CGPoint(x: 31.97, y: 39.84), controlPoint2: CGPoint(x: 29.81, y: 42))
            background11.addLine(to: CGPoint(x: 5.5, y: 42))
            background11.close()
            context.saveGState()
            context.translateBy(x: 36.97, y: 0)
            background11.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background11.cgPath)
            context.addRect(background11.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -32.97, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.97, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background11.fill()
            context.restoreGState()
            background11.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background11.fill()
            context.restoreGState()
            
            /// Background
            let background12 = UIBezierPath()
            background12.move(to: CGPoint(x: 5.5, y: 42))
            background12.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background12.addLine(to: CGPoint(x: 0, y: 5.5))
            background12.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background12.addLine(to: CGPoint(x: 26.47, y: 0))
            background12.addCurve(to: CGPoint(x: 31.97, y: 5.5), controlPoint1: CGPoint(x: 29.81, y: 0), controlPoint2: CGPoint(x: 31.97, y: 2.16))
            background12.addLine(to: CGPoint(x: 31.97, y: 36.5))
            background12.addCurve(to: CGPoint(x: 26.47, y: 42), controlPoint1: CGPoint(x: 31.97, y: 39.84), controlPoint2: CGPoint(x: 29.81, y: 42))
            background12.addLine(to: CGPoint(x: 5.5, y: 42))
            background12.close()
            context.saveGState()
            background12.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background12.cgPath)
            context.addRect(background12.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -32.97, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.97, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background12.fill()
            context.restoreGState()
            background12.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background12.fill()
            context.restoreGState()
            
            /// P
            let p = NSMutableAttributedString(string: "P")
            p.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: p.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                p.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: p.length))
            }
            p.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: p.length))
            context.saveGState()
            p.draw(in: CGRect(x: 345.7, y: 7, width: 13.99, height: 31))
            context.restoreGState()
            
            /// O
            let o = NSMutableAttributedString(string: "O")
            o.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: o.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                o.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: o.length))
            }
            o.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: o.length))
            context.saveGState()
            o.draw(in: CGRect(x: 307.23, y: 7, width: 16.99, height: 31))
            context.restoreGState()
            
            /// I
            let i = NSMutableAttributedString(string: "I")
            i.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: i.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                i.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: i.length))
            }
            i.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: i.length))
            context.saveGState()
            i.draw(in: CGRect(x: 274.76, y: 7, width: 5.99, height: 31))
            context.restoreGState()
            
            /// U
            let u = NSMutableAttributedString(string: "U")
            u.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: u.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                u.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: u.length))
            }
            u.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: u.length))
            context.saveGState()
            u.draw(in: CGRect(x: 232.3, y: 7, width: 16.99, height: 31))
            context.restoreGState()
            
            /// Y
            let y = NSMutableAttributedString(string: "Y")
            y.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: y.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                y.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: y.length))
            }
            y.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: y.length))
            context.saveGState()
            y.draw(in: CGRect(x: 195.33, y: 7, width: 14.99, height: 31))
            context.restoreGState()
            
            /// T
            let t = NSMutableAttributedString(string: "T")
            t.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: t.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                t.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: t.length))
            }
            t.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: t.length))
            context.saveGState()
            t.draw(in: CGRect(x: 158.86, y: 7, width: 13.99, height: 31))
            context.restoreGState()
            
            /// R
            let r = NSMutableAttributedString(string: "R")
            r.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: r.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                r.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: r.length))
            }
            r.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: r.length))
            context.saveGState()
            r.draw(in: CGRect(x: 120.89, y: 7, width: 13.99, height: 31))
            context.restoreGState()
            
            /// E
            let e = NSMutableAttributedString(string: "E")
            e.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: e.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                e.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: e.length))
            }
            e.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: e.length))
            context.saveGState()
            e.draw(in: CGRect(x: 84.43, y: 7, width: 12.99, height: 31))
            context.restoreGState()
            
            /// W
            let w = NSMutableAttributedString(string: "W")
            w.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: w.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                w.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: w.length))
            }
            w.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: w.length))
            context.saveGState()
            w.draw(in: CGRect(x: 41.96, y: 7, width: 21.98, height: 31))
            context.restoreGState()
            
            /// Q
            let q = NSMutableAttributedString(string: "Q")
            q.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: q.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                q.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: q.length))
            }
            q.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: q.length))
            context.saveGState()
            q.draw(in: CGRect(x: 7.49, y: 7, width: 16.99, height: 31))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Second Row
        do {
            context.saveGState()
            context.translateBy(x: 21, y: 63)
            
            /// Background
            let background13 = UIBezierPath()
            background13.move(to: CGPoint(x: 5.5, y: 42))
            background13.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background13.addLine(to: CGPoint(x: 0, y: 5.5))
            background13.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background13.addLine(to: CGPoint(x: 26.49, y: 0))
            background13.addCurve(to: CGPoint(x: 31.99, y: 5.5), controlPoint1: CGPoint(x: 29.82, y: 0), controlPoint2: CGPoint(x: 31.99, y: 2.16))
            background13.addLine(to: CGPoint(x: 31.99, y: 36.5))
            background13.addCurve(to: CGPoint(x: 26.49, y: 42), controlPoint1: CGPoint(x: 31.99, y: 39.84), controlPoint2: CGPoint(x: 29.82, y: 42))
            background13.addLine(to: CGPoint(x: 5.5, y: 42))
            background13.close()
            context.saveGState()
            context.translateBy(x: 300.88, y: 0)
            background13.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background13.cgPath)
            context.addRect(background13.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -32.99, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.99, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background13.fill()
            context.restoreGState()
            background13.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background13.fill()
            context.restoreGState()
            
            /// Background
            let background14 = UIBezierPath()
            background14.move(to: CGPoint(x: 5.5, y: 42))
            background14.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background14.addLine(to: CGPoint(x: 0, y: 5.5))
            background14.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background14.addLine(to: CGPoint(x: 26.49, y: 0))
            background14.addCurve(to: CGPoint(x: 31.99, y: 5.5), controlPoint1: CGPoint(x: 29.82, y: 0), controlPoint2: CGPoint(x: 31.99, y: 2.16))
            background14.addLine(to: CGPoint(x: 31.99, y: 36.5))
            background14.addCurve(to: CGPoint(x: 26.49, y: 42), controlPoint1: CGPoint(x: 31.99, y: 39.84), controlPoint2: CGPoint(x: 29.82, y: 42))
            background14.addLine(to: CGPoint(x: 5.5, y: 42))
            background14.close()
            context.saveGState()
            context.translateBy(x: 262.89, y: 0)
            background14.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background14.cgPath)
            context.addRect(background14.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -32.99, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.99, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background14.fill()
            context.restoreGState()
            background14.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background14.fill()
            context.restoreGState()
            
            /// Background
            let background15 = UIBezierPath()
            background15.move(to: CGPoint(x: 5.5, y: 42))
            background15.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background15.addLine(to: CGPoint(x: 0, y: 5.5))
            background15.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background15.addLine(to: CGPoint(x: 26.49, y: 0))
            background15.addCurve(to: CGPoint(x: 31.99, y: 5.5), controlPoint1: CGPoint(x: 29.82, y: 0), controlPoint2: CGPoint(x: 31.99, y: 2.16))
            background15.addLine(to: CGPoint(x: 31.99, y: 36.5))
            background15.addCurve(to: CGPoint(x: 26.49, y: 42), controlPoint1: CGPoint(x: 31.99, y: 39.84), controlPoint2: CGPoint(x: 29.82, y: 42))
            background15.addLine(to: CGPoint(x: 5.5, y: 42))
            background15.close()
            context.saveGState()
            context.translateBy(x: 225.91, y: 0)
            background15.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background15.cgPath)
            context.addRect(background15.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -32.99, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.99, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background15.fill()
            context.restoreGState()
            background15.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background15.fill()
            context.restoreGState()
            
            /// Background
            let background16 = UIBezierPath()
            background16.move(to: CGPoint(x: 5.5, y: 42))
            background16.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background16.addLine(to: CGPoint(x: 0, y: 5.5))
            background16.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background16.addLine(to: CGPoint(x: 26.49, y: 0))
            background16.addCurve(to: CGPoint(x: 31.99, y: 5.5), controlPoint1: CGPoint(x: 29.82, y: 0), controlPoint2: CGPoint(x: 31.99, y: 2.16))
            background16.addLine(to: CGPoint(x: 31.99, y: 36.5))
            background16.addCurve(to: CGPoint(x: 26.49, y: 42), controlPoint1: CGPoint(x: 31.99, y: 39.84), controlPoint2: CGPoint(x: 29.82, y: 42))
            background16.addLine(to: CGPoint(x: 5.5, y: 42))
            background16.close()
            context.saveGState()
            context.translateBy(x: 187.92, y: 0)
            background16.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background16.cgPath)
            context.addRect(background16.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -32.99, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.99, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background16.fill()
            context.restoreGState()
            background16.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background16.fill()
            context.restoreGState()
            
            /// Background
            let background17 = UIBezierPath()
            background17.move(to: CGPoint(x: 5.5, y: 42))
            background17.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background17.addLine(to: CGPoint(x: 0, y: 5.5))
            background17.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background17.addLine(to: CGPoint(x: 26.49, y: 0))
            background17.addCurve(to: CGPoint(x: 31.99, y: 5.5), controlPoint1: CGPoint(x: 29.82, y: 0), controlPoint2: CGPoint(x: 31.99, y: 2.16))
            background17.addLine(to: CGPoint(x: 31.99, y: 36.5))
            background17.addCurve(to: CGPoint(x: 26.49, y: 42), controlPoint1: CGPoint(x: 31.99, y: 39.84), controlPoint2: CGPoint(x: 29.82, y: 42))
            background17.addLine(to: CGPoint(x: 5.5, y: 42))
            background17.close()
            context.saveGState()
            context.translateBy(x: 150.94, y: 0)
            background17.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background17.cgPath)
            context.addRect(background17.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -32.99, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.99, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background17.fill()
            context.restoreGState()
            background17.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background17.fill()
            context.restoreGState()
            
            /// Background
            let background18 = UIBezierPath()
            background18.move(to: CGPoint(x: 5.5, y: 42))
            background18.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background18.addLine(to: CGPoint(x: 0, y: 5.5))
            background18.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background18.addLine(to: CGPoint(x: 26.49, y: 0))
            background18.addCurve(to: CGPoint(x: 31.99, y: 5.5), controlPoint1: CGPoint(x: 29.82, y: 0), controlPoint2: CGPoint(x: 31.99, y: 2.16))
            background18.addLine(to: CGPoint(x: 31.99, y: 36.5))
            background18.addCurve(to: CGPoint(x: 26.49, y: 42), controlPoint1: CGPoint(x: 31.99, y: 39.84), controlPoint2: CGPoint(x: 29.82, y: 42))
            background18.addLine(to: CGPoint(x: 5.5, y: 42))
            background18.close()
            context.saveGState()
            context.translateBy(x: 112.95, y: 0)
            background18.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background18.cgPath)
            context.addRect(background18.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -32.99, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.99, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background18.fill()
            context.restoreGState()
            background18.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background18.fill()
            context.restoreGState()
            
            /// Background
            let background19 = UIBezierPath()
            background19.move(to: CGPoint(x: 5.5, y: 42))
            background19.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background19.addLine(to: CGPoint(x: 0, y: 5.5))
            background19.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background19.addLine(to: CGPoint(x: 26.49, y: 0))
            background19.addCurve(to: CGPoint(x: 31.99, y: 5.5), controlPoint1: CGPoint(x: 29.82, y: 0), controlPoint2: CGPoint(x: 31.99, y: 2.16))
            background19.addLine(to: CGPoint(x: 31.99, y: 36.5))
            background19.addCurve(to: CGPoint(x: 26.49, y: 42), controlPoint1: CGPoint(x: 31.99, y: 39.84), controlPoint2: CGPoint(x: 29.82, y: 42))
            background19.addLine(to: CGPoint(x: 5.5, y: 42))
            background19.close()
            context.saveGState()
            context.translateBy(x: 74.97, y: 0)
            background19.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background19.cgPath)
            context.addRect(background19.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -32.99, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.99, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background19.fill()
            context.restoreGState()
            background19.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background19.fill()
            context.restoreGState()
            
            /// Background
            let background20 = UIBezierPath()
            background20.move(to: CGPoint(x: 5.5, y: 42))
            background20.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background20.addLine(to: CGPoint(x: 0, y: 5.5))
            background20.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background20.addLine(to: CGPoint(x: 26.49, y: 0))
            background20.addCurve(to: CGPoint(x: 31.99, y: 5.5), controlPoint1: CGPoint(x: 29.82, y: 0), controlPoint2: CGPoint(x: 31.99, y: 2.16))
            background20.addLine(to: CGPoint(x: 31.99, y: 36.5))
            background20.addCurve(to: CGPoint(x: 26.49, y: 42), controlPoint1: CGPoint(x: 31.99, y: 39.84), controlPoint2: CGPoint(x: 29.82, y: 42))
            background20.addLine(to: CGPoint(x: 5.5, y: 42))
            background20.close()
            context.saveGState()
            context.translateBy(x: 37.98, y: 0)
            background20.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background20.cgPath)
            context.addRect(background20.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -32.99, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.99, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background20.fill()
            context.restoreGState()
            background20.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background20.fill()
            context.restoreGState()
            
            /// Background
            let background21 = UIBezierPath()
            background21.move(to: CGPoint(x: 5.5, y: 42))
            background21.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background21.addLine(to: CGPoint(x: 0, y: 5.5))
            background21.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background21.addLine(to: CGPoint(x: 26.49, y: 0))
            background21.addCurve(to: CGPoint(x: 31.99, y: 5.5), controlPoint1: CGPoint(x: 29.82, y: 0), controlPoint2: CGPoint(x: 31.99, y: 2.16))
            background21.addLine(to: CGPoint(x: 31.99, y: 36.5))
            background21.addCurve(to: CGPoint(x: 26.49, y: 42), controlPoint1: CGPoint(x: 31.99, y: 39.84), controlPoint2: CGPoint(x: 29.82, y: 42))
            background21.addLine(to: CGPoint(x: 5.5, y: 42))
            background21.close()
            context.saveGState()
            background21.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background21.cgPath)
            context.addRect(background21.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -32.99, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.99, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background21.fill()
            context.restoreGState()
            background21.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background21.fill()
            context.restoreGState()
            
            /// L
            let l = NSMutableAttributedString(string: "L")
            l.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: l.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                l.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: l.length))
            }
            l.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: l.length))
            context.saveGState()
            l.draw(in: CGRect(x: 310.37, y: 7.25, width: 12.99, height: 31))
            context.restoreGState()
            
            /// K
            let k = NSMutableAttributedString(string: "K")
            k.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: k.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                k.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: k.length))
            }
            k.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: k.length))
            context.saveGState()
            k.draw(in: CGRect(x: 271.39, y: 7.25, width: 14.99, height: 31))
            context.restoreGState()
            
            /// J
            let j = NSMutableAttributedString(string: "J")
            j.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: j.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                j.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: j.length))
            }
            j.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: j.length))
            context.saveGState()
            j.draw(in: CGRect(x: 235.9, y: 7.25, width: 12, height: 31))
            context.restoreGState()
            
            /// H
            let h = NSMutableAttributedString(string: "H")
            h.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: h.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                h.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: h.length))
            }
            h.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: h.length))
            context.saveGState()
            h.draw(in: CGRect(x: 195.42, y: 7.25, width: 16.99, height: 31))
            context.restoreGState()
            
            /// G
            let g = NSMutableAttributedString(string: "G")
            g.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: g.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                g.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: g.length))
            }
            g.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: g.length))
            context.saveGState()
            g.draw(in: CGRect(x: 158.44, y: 7.25, width: 16.99, height: 31))
            context.restoreGState()
            
            /// F
            let f = NSMutableAttributedString(string: "F")
            f.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: f.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                f.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: f.length))
            }
            f.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: f.length))
            context.saveGState()
            f.draw(in: CGRect(x: 122.45, y: 7.25, width: 12.99, height: 31))
            context.restoreGState()
            
            /// D
            let d = NSMutableAttributedString(string: "D")
            d.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: d.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                d.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: d.length))
            }
            d.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: d.length))
            context.saveGState()
            d.draw(in: CGRect(x: 82.97, y: 7.25, width: 15.99, height: 31))
            context.restoreGState()
            
            /// S
            let s = NSMutableAttributedString(string: "S")
            s.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: s.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                s.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: s.length))
            }
            s.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: s.length))
            context.saveGState()
            s.draw(in: CGRect(x: 46.98, y: 7.25, width: 13.99, height: 31))
            context.restoreGState()
            
            /// A
            let a = NSMutableAttributedString(string: "A")
            a.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: a.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                a.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: a.length))
            }
            a.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: a.length))
            context.saveGState()
            a.draw(in: CGRect(x: 8.5, y: 7.25, width: 14.99, height: 31))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Third Row
        do {
            context.saveGState()
            context.translateBy(x: 59, y: 117)
            
            /// Background
            let background22 = UIBezierPath()
            background22.move(to: CGPoint(x: 5.5, y: 42))
            background22.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background22.addLine(to: CGPoint(x: 0, y: 5.5))
            background22.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background22.addLine(to: CGPoint(x: 26.63, y: 0))
            background22.addCurve(to: CGPoint(x: 32.13, y: 5.5), controlPoint1: CGPoint(x: 29.96, y: 0), controlPoint2: CGPoint(x: 32.13, y: 2.16))
            background22.addLine(to: CGPoint(x: 32.13, y: 36.5))
            background22.addCurve(to: CGPoint(x: 26.63, y: 42), controlPoint1: CGPoint(x: 32.13, y: 39.84), controlPoint2: CGPoint(x: 29.96, y: 42))
            background22.addLine(to: CGPoint(x: 5.5, y: 42))
            background22.close()
            context.saveGState()
            context.translateBy(x: 225.89, y: 0)
            background22.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background22.cgPath)
            context.addRect(background22.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -33.13, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 33.13, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background22.fill()
            context.restoreGState()
            background22.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background22.fill()
            context.restoreGState()
            
            /// Background
            let background23 = UIBezierPath()
            background23.move(to: CGPoint(x: 5.5, y: 42))
            background23.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background23.addLine(to: CGPoint(x: 0, y: 5.5))
            background23.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background23.addLine(to: CGPoint(x: 26.63, y: 0))
            background23.addCurve(to: CGPoint(x: 32.13, y: 5.5), controlPoint1: CGPoint(x: 29.96, y: 0), controlPoint2: CGPoint(x: 32.13, y: 2.16))
            background23.addLine(to: CGPoint(x: 32.13, y: 36.5))
            background23.addCurve(to: CGPoint(x: 26.63, y: 42), controlPoint1: CGPoint(x: 32.13, y: 39.84), controlPoint2: CGPoint(x: 29.96, y: 42))
            background23.addLine(to: CGPoint(x: 5.5, y: 42))
            background23.close()
            context.saveGState()
            context.translateBy(x: 188.75, y: 0)
            background23.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background23.cgPath)
            context.addRect(background23.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -33.13, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 33.13, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background23.fill()
            context.restoreGState()
            background23.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background23.fill()
            context.restoreGState()
            
            /// Background
            let background24 = UIBezierPath()
            background24.move(to: CGPoint(x: 5.5, y: 42))
            background24.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background24.addLine(to: CGPoint(x: 0, y: 5.5))
            background24.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background24.addLine(to: CGPoint(x: 26.63, y: 0))
            background24.addCurve(to: CGPoint(x: 32.13, y: 5.5), controlPoint1: CGPoint(x: 29.96, y: 0), controlPoint2: CGPoint(x: 32.13, y: 2.16))
            background24.addLine(to: CGPoint(x: 32.13, y: 36.5))
            background24.addCurve(to: CGPoint(x: 26.63, y: 42), controlPoint1: CGPoint(x: 32.13, y: 39.84), controlPoint2: CGPoint(x: 29.96, y: 42))
            background24.addLine(to: CGPoint(x: 5.5, y: 42))
            background24.close()
            context.saveGState()
            context.translateBy(x: 150.59, y: 0)
            background24.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background24.cgPath)
            context.addRect(background24.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -33.13, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 33.13, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background24.fill()
            context.restoreGState()
            background24.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background24.fill()
            context.restoreGState()
            
            /// Background
            let background25 = UIBezierPath()
            background25.move(to: CGPoint(x: 5.5, y: 42))
            background25.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background25.addLine(to: CGPoint(x: 0, y: 5.5))
            background25.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background25.addLine(to: CGPoint(x: 26.63, y: 0))
            background25.addCurve(to: CGPoint(x: 32.13, y: 5.5), controlPoint1: CGPoint(x: 29.96, y: 0), controlPoint2: CGPoint(x: 32.13, y: 2.16))
            background25.addLine(to: CGPoint(x: 32.13, y: 36.5))
            background25.addCurve(to: CGPoint(x: 26.63, y: 42), controlPoint1: CGPoint(x: 32.13, y: 39.84), controlPoint2: CGPoint(x: 29.96, y: 42))
            background25.addLine(to: CGPoint(x: 5.5, y: 42))
            background25.close()
            context.saveGState()
            context.translateBy(x: 113.45, y: 0)
            background25.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background25.cgPath)
            context.addRect(background25.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -33.13, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 33.13, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background25.fill()
            context.restoreGState()
            background25.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background25.fill()
            context.restoreGState()
            
            /// Background
            let background26 = UIBezierPath()
            background26.move(to: CGPoint(x: 5.5, y: 42))
            background26.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background26.addLine(to: CGPoint(x: 0, y: 5.5))
            background26.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background26.addLine(to: CGPoint(x: 26.63, y: 0))
            background26.addCurve(to: CGPoint(x: 32.13, y: 5.5), controlPoint1: CGPoint(x: 29.96, y: 0), controlPoint2: CGPoint(x: 32.13, y: 2.16))
            background26.addLine(to: CGPoint(x: 32.13, y: 36.5))
            background26.addCurve(to: CGPoint(x: 26.63, y: 42), controlPoint1: CGPoint(x: 32.13, y: 39.84), controlPoint2: CGPoint(x: 29.96, y: 42))
            background26.addLine(to: CGPoint(x: 5.5, y: 42))
            background26.close()
            context.saveGState()
            context.translateBy(x: 75.3, y: 0)
            background26.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background26.cgPath)
            context.addRect(background26.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -33.13, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 33.13, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background26.fill()
            context.restoreGState()
            background26.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background26.fill()
            context.restoreGState()
            
            /// Background
            let background27 = UIBezierPath()
            background27.move(to: CGPoint(x: 5.5, y: 42))
            background27.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background27.addLine(to: CGPoint(x: 0, y: 5.5))
            background27.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background27.addLine(to: CGPoint(x: 26.63, y: 0))
            background27.addCurve(to: CGPoint(x: 32.13, y: 5.5), controlPoint1: CGPoint(x: 29.96, y: 0), controlPoint2: CGPoint(x: 32.13, y: 2.16))
            background27.addLine(to: CGPoint(x: 32.13, y: 36.5))
            background27.addCurve(to: CGPoint(x: 26.63, y: 42), controlPoint1: CGPoint(x: 32.13, y: 39.84), controlPoint2: CGPoint(x: 29.96, y: 42))
            background27.addLine(to: CGPoint(x: 5.5, y: 42))
            background27.close()
            context.saveGState()
            context.translateBy(x: 38.15, y: 0)
            background27.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background27.cgPath)
            context.addRect(background27.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -33.13, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 33.13, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background27.fill()
            context.restoreGState()
            background27.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background27.fill()
            context.restoreGState()
            
            /// Background
            let background28 = UIBezierPath()
            background28.move(to: CGPoint(x: 5.5, y: 42))
            background28.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background28.addLine(to: CGPoint(x: 0, y: 5.5))
            background28.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background28.addLine(to: CGPoint(x: 26.63, y: 0))
            background28.addCurve(to: CGPoint(x: 32.13, y: 5.5), controlPoint1: CGPoint(x: 29.96, y: 0), controlPoint2: CGPoint(x: 32.13, y: 2.16))
            background28.addLine(to: CGPoint(x: 32.13, y: 36.5))
            background28.addCurve(to: CGPoint(x: 26.63, y: 42), controlPoint1: CGPoint(x: 32.13, y: 39.84), controlPoint2: CGPoint(x: 29.96, y: 42))
            background28.addLine(to: CGPoint(x: 5.5, y: 42))
            background28.close()
            context.saveGState()
            background28.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background28.cgPath)
            context.addRect(background28.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -33.13, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 33.13, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background28.fill()
            context.restoreGState()
            background28.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background28.fill()
            context.restoreGState()
            
            /// M
            let m = NSMutableAttributedString(string: "M")
            m.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: m.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                m.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: m.length))
            }
            context.saveGState()
            m.draw(in: CGRect(x: 231.92, y: 7.25, width: 20.08, height: 31))
            context.restoreGState()
            
            /// N
            let n = NSMutableAttributedString(string: "N")
            n.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: n.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                n.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: n.length))
            }
            context.saveGState()
            n.draw(in: CGRect(x: 196.27, y: 7.25, width: 17.07, height: 31))
            context.restoreGState()
            
            /// B
            let b = NSMutableAttributedString(string: "B")
            b.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: b.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                b.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: b.length))
            }
            context.saveGState()
            b.draw(in: CGRect(x: 159.63, y: 7.25, width: 14.06, height: 31))
            context.restoreGState()
            
            /// V
            let v = NSMutableAttributedString(string: "V")
            v.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: v.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                v.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: v.length))
            }
            context.saveGState()
            v.draw(in: CGRect(x: 122.03, y: 7.25, width: 15.06, height: 31))
            context.restoreGState()
            
            /// C
            let c = NSMutableAttributedString(string: "C")
            c.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: c.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                c.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: c.length))
            }
            context.saveGState()
            c.draw(in: CGRect(x: 83.33, y: 7.25, width: 16.06, height: 31))
            context.restoreGState()
            
            /// X
            let x = NSMutableAttributedString(string: "X")
            x.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: x.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                x.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: x.length))
            }
            context.saveGState()
            x.draw(in: CGRect(x: 46.68, y: 7.25, width: 15.06, height: 31))
            context.restoreGState()
            
            /// Z
            let z = NSMutableAttributedString(string: "Z")
            z.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: z.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                z.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: z.length))
            }
            context.saveGState()
            z.draw(in: CGRect(x: 8.53, y: 7.25, width: 15.06, height: 31))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Delete
        do {
            context.saveGState()
            context.translateBy(x: 331, y: 117)
            
            /// Background
            let background29 = UIBezierPath()
            background29.move(to: CGPoint(x: 5.5, y: 42))
            background29.addCurve(to: CGPoint(x: 0, y: 36.5), controlPoint1: CGPoint(x: 2.16, y: 42), controlPoint2: CGPoint(x: 0, y: 39.84))
            background29.addLine(to: CGPoint(x: 0, y: 5.5))
            background29.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background29.addLine(to: CGPoint(x: 36.5, y: 0))
            background29.addCurve(to: CGPoint(x: 42, y: 5.5), controlPoint1: CGPoint(x: 39.84, y: 0), controlPoint2: CGPoint(x: 42, y: 2.16))
            background29.addLine(to: CGPoint(x: 42, y: 36.5))
            background29.addCurve(to: CGPoint(x: 36.5, y: 42), controlPoint1: CGPoint(x: 42, y: 39.84), controlPoint2: CGPoint(x: 39.84, y: 42))
            background29.addLine(to: CGPoint(x: 5.5, y: 42))
            background29.close()
            context.saveGState()
            background29.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background29.cgPath)
            context.addRect(background29.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -43, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 43, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background29.fill()
            context.restoreGState()
            background29.usesEvenOddFillRule = true
            UIColor(hue: 0.593, saturation: 0.095, brightness: 0.741, alpha: 0.5).setFill()
            background29.fill()
            context.saveGState()
            context.setBlendMode(.softLight)
            context.beginTransparencyLayer(in: background29.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 0, alpha: 0.5).setFill()
                background29.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.saveGState()
            context.setBlendMode(.softLight)
            context.beginTransparencyLayer(in: background29.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 1, alpha: 0.1).setFill()
                background29.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            /// Back
            let back = UIBezierPath()
            back.move(to: CGPoint(x: 0.44, y: 9.56))
            back.addCurve(to: CGPoint(x: 0.44, y: 7.44), controlPoint1: CGPoint(x: -0.15, y: 8.97), controlPoint2: CGPoint(x: -0.14, y: 8.02))
            back.addLine(to: CGPoint(x: 7.17, y: 0.71))
            back.addCurve(to: CGPoint(x: 8.88, y: 0), controlPoint1: CGPoint(x: 7.56, y: 0.32), controlPoint2: CGPoint(x: 8.33, y: 0))
            back.addLine(to: CGPoint(x: 19.38, y: 0))
            back.addCurve(to: CGPoint(x: 22.88, y: 3.5), controlPoint1: CGPoint(x: 21.31, y: 0), controlPoint2: CGPoint(x: 22.88, y: 1.57))
            back.addLine(to: CGPoint(x: 22.88, y: 13.5))
            back.addCurve(to: CGPoint(x: 19.38, y: 17), controlPoint1: CGPoint(x: 22.88, y: 15.43), controlPoint2: CGPoint(x: 21.3, y: 17))
            back.addLine(to: CGPoint(x: 8.88, y: 17))
            back.addCurve(to: CGPoint(x: 7.17, y: 16.29), controlPoint1: CGPoint(x: 8.33, y: 17), controlPoint2: CGPoint(x: 7.55, y: 16.68))
            back.addLine(to: CGPoint(x: 0.44, y: 9.56))
            back.close()
            back.move(to: CGPoint(x: 15.02, y: 8.48))
            back.addLine(to: CGPoint(x: 17.84, y: 5.65))
            back.addCurve(to: CGPoint(x: 17.85, y: 4.59), controlPoint1: CGPoint(x: 18.14, y: 5.36), controlPoint2: CGPoint(x: 18.14, y: 4.88))
            back.addCurve(to: CGPoint(x: 16.78, y: 4.59), controlPoint1: CGPoint(x: 17.55, y: 4.29), controlPoint2: CGPoint(x: 17.08, y: 4.3))
            back.addLine(to: CGPoint(x: 13.96, y: 7.42))
            back.addLine(to: CGPoint(x: 11.13, y: 4.59))
            back.addCurve(to: CGPoint(x: 10.07, y: 4.59), controlPoint1: CGPoint(x: 10.84, y: 4.3), controlPoint2: CGPoint(x: 10.36, y: 4.3))
            back.addCurve(to: CGPoint(x: 10.07, y: 5.65), controlPoint1: CGPoint(x: 9.77, y: 4.88), controlPoint2: CGPoint(x: 9.78, y: 5.36))
            back.addLine(to: CGPoint(x: 12.9, y: 8.48))
            back.addLine(to: CGPoint(x: 10.07, y: 11.3))
            back.addCurve(to: CGPoint(x: 10.07, y: 12.37), controlPoint1: CGPoint(x: 9.78, y: 11.6), controlPoint2: CGPoint(x: 9.78, y: 12.07))
            back.addCurve(to: CGPoint(x: 11.13, y: 12.36), controlPoint1: CGPoint(x: 10.36, y: 12.66), controlPoint2: CGPoint(x: 10.84, y: 12.66))
            back.addLine(to: CGPoint(x: 13.96, y: 9.54))
            back.addLine(to: CGPoint(x: 16.78, y: 12.36))
            back.addCurve(to: CGPoint(x: 17.85, y: 12.37), controlPoint1: CGPoint(x: 17.08, y: 12.66), controlPoint2: CGPoint(x: 17.56, y: 12.66))
            back.addCurve(to: CGPoint(x: 17.84, y: 11.3), controlPoint1: CGPoint(x: 18.14, y: 12.07), controlPoint2: CGPoint(x: 18.14, y: 11.6))
            back.addLine(to: CGPoint(x: 15.02, y: 8.48))
            back.close()
            back.move(to: CGPoint(x: 2.09, y: 9.21))
            back.addCurve(to: CGPoint(x: 2.09, y: 7.79), controlPoint1: CGPoint(x: 1.69, y: 8.82), controlPoint2: CGPoint(x: 1.7, y: 8.18))
            back.addLine(to: CGPoint(x: 8.02, y: 1.86))
            back.addCurve(to: CGPoint(x: 8.87, y: 1.5), controlPoint1: CGPoint(x: 8.22, y: 1.66), controlPoint2: CGPoint(x: 8.6, y: 1.5))
            back.addLine(to: CGPoint(x: 19.37, y: 1.5))
            back.addCurve(to: CGPoint(x: 21.38, y: 3.51), controlPoint1: CGPoint(x: 20.48, y: 1.5), controlPoint2: CGPoint(x: 21.38, y: 2.4))
            back.addLine(to: CGPoint(x: 21.38, y: 13.49))
            back.addCurve(to: CGPoint(x: 19.37, y: 15.5), controlPoint1: CGPoint(x: 21.38, y: 14.6), controlPoint2: CGPoint(x: 20.48, y: 15.5))
            back.addLine(to: CGPoint(x: 8.87, y: 15.5))
            back.addCurve(to: CGPoint(x: 8.02, y: 15.14), controlPoint1: CGPoint(x: 8.6, y: 15.5), controlPoint2: CGPoint(x: 8.22, y: 15.34))
            back.addLine(to: CGPoint(x: 2.09, y: 9.21))
            back.close()
            context.saveGState()
            context.translateBy(x: 9.5, y: 12.5)
            back.usesEvenOddFillRule = true
            UIColor.black.setFill()
            back.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawIPhoneXKeyboardsNumpad(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 291), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 291), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 291)
        
        /// Background
        // Warning: New symbols are not supported.
        
        /// Keys
        do {
            context.saveGState()
            context.translateBy(x: 40, y: 165)
            
            /// Clear
            let clear = UIBezierPath()
            clear.move(to: CGPoint(x: 0.44, y: 9.56))
            clear.addCurve(to: CGPoint(x: 0.44, y: 7.44), controlPoint1: CGPoint(x: -0.15, y: 8.97), controlPoint2: CGPoint(x: -0.14, y: 8.02))
            clear.addLine(to: CGPoint(x: 7.17, y: 0.71))
            clear.addCurve(to: CGPoint(x: 8.87, y: 0), controlPoint1: CGPoint(x: 7.56, y: 0.32), controlPoint2: CGPoint(x: 8.33, y: 0))
            clear.addLine(to: CGPoint(x: 19.49, y: 0))
            clear.addCurve(to: CGPoint(x: 23, y: 3.5), controlPoint1: CGPoint(x: 21.43, y: 0), controlPoint2: CGPoint(x: 23, y: 1.57))
            clear.addLine(to: CGPoint(x: 23, y: 13.5))
            clear.addCurve(to: CGPoint(x: 19.49, y: 17), controlPoint1: CGPoint(x: 23, y: 15.43), controlPoint2: CGPoint(x: 21.44, y: 17))
            clear.addLine(to: CGPoint(x: 8.87, y: 17))
            clear.addCurve(to: CGPoint(x: 7.17, y: 16.29), controlPoint1: CGPoint(x: 8.32, y: 17), controlPoint2: CGPoint(x: 7.55, y: 16.68))
            clear.addLine(to: CGPoint(x: 0.44, y: 9.56))
            clear.close()
            clear.move(to: CGPoint(x: 15.02, y: 8.48))
            clear.addLine(to: CGPoint(x: 17.84, y: 5.65))
            clear.addCurve(to: CGPoint(x: 17.85, y: 4.59), controlPoint1: CGPoint(x: 18.14, y: 5.36), controlPoint2: CGPoint(x: 18.14, y: 4.88))
            clear.addCurve(to: CGPoint(x: 16.78, y: 4.59), controlPoint1: CGPoint(x: 17.55, y: 4.29), controlPoint2: CGPoint(x: 17.08, y: 4.3))
            clear.addLine(to: CGPoint(x: 13.96, y: 7.42))
            clear.addLine(to: CGPoint(x: 11.13, y: 4.59))
            clear.addCurve(to: CGPoint(x: 10.07, y: 4.59), controlPoint1: CGPoint(x: 10.84, y: 4.3), controlPoint2: CGPoint(x: 10.36, y: 4.3))
            clear.addCurve(to: CGPoint(x: 10.07, y: 5.65), controlPoint1: CGPoint(x: 9.77, y: 4.88), controlPoint2: CGPoint(x: 9.78, y: 5.36))
            clear.addLine(to: CGPoint(x: 12.9, y: 8.48))
            clear.addLine(to: CGPoint(x: 10.07, y: 11.3))
            clear.addCurve(to: CGPoint(x: 10.07, y: 12.37), controlPoint1: CGPoint(x: 9.78, y: 11.6), controlPoint2: CGPoint(x: 9.78, y: 12.07))
            clear.addCurve(to: CGPoint(x: 11.13, y: 12.36), controlPoint1: CGPoint(x: 10.36, y: 12.66), controlPoint2: CGPoint(x: 10.84, y: 12.66))
            clear.addLine(to: CGPoint(x: 13.96, y: 9.54))
            clear.addLine(to: CGPoint(x: 16.78, y: 12.36))
            clear.addCurve(to: CGPoint(x: 17.85, y: 12.37), controlPoint1: CGPoint(x: 17.08, y: 12.66), controlPoint2: CGPoint(x: 17.56, y: 12.66))
            clear.addCurve(to: CGPoint(x: 17.84, y: 11.3), controlPoint1: CGPoint(x: 18.14, y: 12.07), controlPoint2: CGPoint(x: 18.14, y: 11.6))
            clear.addLine(to: CGPoint(x: 15.02, y: 8.48))
            clear.close()
            clear.move(to: CGPoint(x: 2.09, y: 9.21))
            clear.addCurve(to: CGPoint(x: 2.09, y: 7.79), controlPoint1: CGPoint(x: 1.69, y: 8.82), controlPoint2: CGPoint(x: 1.7, y: 8.18))
            clear.addLine(to: CGPoint(x: 8.02, y: 1.86))
            clear.addCurve(to: CGPoint(x: 8.88, y: 1.5), controlPoint1: CGPoint(x: 8.22, y: 1.66), controlPoint2: CGPoint(x: 8.6, y: 1.5))
            clear.addLine(to: CGPoint(x: 19.51, y: 1.5))
            clear.addCurve(to: CGPoint(x: 21.5, y: 3.51), controlPoint1: CGPoint(x: 20.61, y: 1.5), controlPoint2: CGPoint(x: 21.5, y: 2.4))
            clear.addLine(to: CGPoint(x: 21.5, y: 13.49))
            clear.addCurve(to: CGPoint(x: 19.51, y: 15.5), controlPoint1: CGPoint(x: 21.5, y: 14.6), controlPoint2: CGPoint(x: 20.6, y: 15.5))
            clear.addLine(to: CGPoint(x: 8.88, y: 15.5))
            clear.addCurve(to: CGPoint(x: 8.02, y: 15.14), controlPoint1: CGPoint(x: 8.6, y: 15.5), controlPoint2: CGPoint(x: 8.22, y: 15.34))
            clear.addLine(to: CGPoint(x: 2.09, y: 9.21))
            clear.close()
            context.saveGState()
            context.translateBy(x: 259.63, y: 14)
            clear.usesEvenOddFillRule = true
            UIColor.black.setFill()
            clear.fill()
            context.restoreGState()
            
            /// 0
            do {
                context.saveGState()
                context.translateBy(x: 89, y: 0)
                
                /// Key
                let key = UIBezierPath()
                key.move(to: CGPoint(x: 6.41, y: 0))
                key.addLine(to: CGPoint(x: 110.59, y: 0))
                key.addCurve(to: CGPoint(x: 114.44, y: 0.67), controlPoint1: CGPoint(x: 112.82, y: 0), controlPoint2: CGPoint(x: 113.63, y: 0.23))
                key.addCurve(to: CGPoint(x: 116.33, y: 2.56), controlPoint1: CGPoint(x: 115.26, y: 1.1), controlPoint2: CGPoint(x: 115.9, y: 1.74))
                key.addCurve(to: CGPoint(x: 117, y: 6.41), controlPoint1: CGPoint(x: 116.77, y: 3.37), controlPoint2: CGPoint(x: 117, y: 4.18))
                key.addLine(to: CGPoint(x: 117, y: 39.59))
                key.addCurve(to: CGPoint(x: 116.33, y: 43.44), controlPoint1: CGPoint(x: 117, y: 41.82), controlPoint2: CGPoint(x: 116.77, y: 42.63))
                key.addCurve(to: CGPoint(x: 114.44, y: 45.33), controlPoint1: CGPoint(x: 115.9, y: 44.26), controlPoint2: CGPoint(x: 115.26, y: 44.9))
                key.addCurve(to: CGPoint(x: 110.59, y: 46), controlPoint1: CGPoint(x: 113.63, y: 45.77), controlPoint2: CGPoint(x: 112.82, y: 46))
                key.addLine(to: CGPoint(x: 6.41, y: 46))
                key.addCurve(to: CGPoint(x: 2.56, y: 45.33), controlPoint1: CGPoint(x: 4.18, y: 46), controlPoint2: CGPoint(x: 3.37, y: 45.77))
                key.addCurve(to: CGPoint(x: 0.67, y: 43.44), controlPoint1: CGPoint(x: 1.74, y: 44.9), controlPoint2: CGPoint(x: 1.1, y: 44.26))
                key.addCurve(to: CGPoint(x: 0, y: 39.59), controlPoint1: CGPoint(x: 0.23, y: 42.63), controlPoint2: CGPoint(x: 0, y: 41.82))
                key.addLine(to: CGPoint(x: 0, y: 6.41))
                key.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
                key.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
                key.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
                key.close()
                context.saveGState()
                context.translateBy(x: 0, y: 0)
                key.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(key.cgPath)
                context.addRect(key.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -118, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 118, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.08, alpha: 0.45).cgColor)
                }
                UIColor.black.setFill()
                key.fill()
                context.restoreGState()
                key.usesEvenOddFillRule = true
                UIColor.white.setFill()
                key.fill()
                context.restoreGState()
                
                /// Key (Outline Mask)
                context.saveGState()
                key.apply(CGAffineTransform(translationX: 0, y: 0))
                key.addClip()
                
                /// 0
                let _0 = NSMutableAttributedString(string: "0")
                _0.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: _0.length))
                _0.addAttribute(.kern, value: 0.35, range: NSRange(location: 0, length: _0.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _0.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _0.length))
                }
                context.saveGState()
                _0.draw(in: CGRect(x: 50, y: 7, width: 18, height: 33))
                context.restoreGState()
                
                context.restoreGState()
                // End Key (Outline Mask)
                
                context.restoreGState()
            }
            
            /// Glyphs
            do {
                context.saveGState()
                context.translateBy(x: 0.66, y: 15)
                
                /// Plus
                let plus = UIBezierPath()
                plus.move(to: CGPoint(x: 6.6, y: 5.5))
                plus.addLine(to: CGPoint(x: 11.55, y: 5.5))
                plus.addCurve(to: CGPoint(x: 12.1, y: 6.05), controlPoint1: CGPoint(x: 11.85, y: 5.5), controlPoint2: CGPoint(x: 12.1, y: 5.75))
                plus.addCurve(to: CGPoint(x: 11.55, y: 6.6), controlPoint1: CGPoint(x: 12.1, y: 6.35), controlPoint2: CGPoint(x: 11.85, y: 6.6))
                plus.addLine(to: CGPoint(x: 6.6, y: 6.6))
                plus.addLine(to: CGPoint(x: 6.6, y: 11.55))
                plus.addCurve(to: CGPoint(x: 6.05, y: 12.1), controlPoint1: CGPoint(x: 6.6, y: 11.85), controlPoint2: CGPoint(x: 6.35, y: 12.1))
                plus.addCurve(to: CGPoint(x: 5.5, y: 11.55), controlPoint1: CGPoint(x: 5.75, y: 12.1), controlPoint2: CGPoint(x: 5.5, y: 11.85))
                plus.addLine(to: CGPoint(x: 5.5, y: 6.6))
                plus.addLine(to: CGPoint(x: 0.55, y: 6.6))
                plus.addCurve(to: CGPoint(x: 0, y: 6.05), controlPoint1: CGPoint(x: 0.25, y: 6.6), controlPoint2: CGPoint(x: 0, y: 6.35))
                plus.addCurve(to: CGPoint(x: 0.55, y: 5.5), controlPoint1: CGPoint(x: 0, y: 5.75), controlPoint2: CGPoint(x: 0.25, y: 5.5))
                plus.addLine(to: CGPoint(x: 5.5, y: 5.5))
                plus.addLine(to: CGPoint(x: 5.5, y: 0.55))
                plus.addCurve(to: CGPoint(x: 6.05, y: 0), controlPoint1: CGPoint(x: 5.5, y: 0.25), controlPoint2: CGPoint(x: 5.75, y: 0))
                plus.addCurve(to: CGPoint(x: 6.6, y: 0.55), controlPoint1: CGPoint(x: 6.35, y: 0), controlPoint2: CGPoint(x: 6.6, y: 0.25))
                plus.addLine(to: CGPoint(x: 6.6, y: 5.5))
                plus.close()
                context.saveGState()
                UIColor.black.setFill()
                plus.fill()
                context.restoreGState()
                
                /// Hash
                let hash = UIBezierPath()
                hash.move(to: CGPoint(x: 8.77, y: 4.26))
                hash.addLine(to: CGPoint(x: 8.77, y: 7.79))
                hash.addLine(to: CGPoint(x: 11.5, y: 7.79))
                hash.addCurve(to: CGPoint(x: 12, y: 8.29), controlPoint1: CGPoint(x: 11.78, y: 7.79), controlPoint2: CGPoint(x: 12, y: 8.02))
                hash.addCurve(to: CGPoint(x: 11.5, y: 8.79), controlPoint1: CGPoint(x: 12, y: 8.57), controlPoint2: CGPoint(x: 11.78, y: 8.79))
                hash.addLine(to: CGPoint(x: 8.77, y: 8.79))
                hash.addLine(to: CGPoint(x: 8.77, y: 11.5))
                hash.addCurve(to: CGPoint(x: 8.27, y: 12), controlPoint1: CGPoint(x: 8.77, y: 11.78), controlPoint2: CGPoint(x: 8.54, y: 12))
                hash.addCurve(to: CGPoint(x: 7.77, y: 11.5), controlPoint1: CGPoint(x: 7.99, y: 12), controlPoint2: CGPoint(x: 7.77, y: 11.78))
                hash.addLine(to: CGPoint(x: 7.77, y: 8.79))
                hash.addLine(to: CGPoint(x: 4.23, y: 8.79))
                hash.addLine(to: CGPoint(x: 4.23, y: 11.5))
                hash.addCurve(to: CGPoint(x: 3.73, y: 12), controlPoint1: CGPoint(x: 4.23, y: 11.78), controlPoint2: CGPoint(x: 4.01, y: 12))
                hash.addCurve(to: CGPoint(x: 3.23, y: 11.5), controlPoint1: CGPoint(x: 3.46, y: 12), controlPoint2: CGPoint(x: 3.23, y: 11.78))
                hash.addLine(to: CGPoint(x: 3.23, y: 8.79))
                hash.addLine(to: CGPoint(x: 0.5, y: 8.79))
                hash.addCurve(to: CGPoint(x: 0, y: 8.29), controlPoint1: CGPoint(x: 0.22, y: 8.79), controlPoint2: CGPoint(x: 0, y: 8.57))
                hash.addCurve(to: CGPoint(x: 0.5, y: 7.79), controlPoint1: CGPoint(x: 0, y: 8.02), controlPoint2: CGPoint(x: 0.22, y: 7.79))
                hash.addLine(to: CGPoint(x: 3.23, y: 7.79))
                hash.addLine(to: CGPoint(x: 3.23, y: 4.26))
                hash.addLine(to: CGPoint(x: 0.5, y: 4.26))
                hash.addCurve(to: CGPoint(x: 0, y: 3.76), controlPoint1: CGPoint(x: 0.22, y: 4.26), controlPoint2: CGPoint(x: 0, y: 4.03))
                hash.addCurve(to: CGPoint(x: 0.5, y: 3.26), controlPoint1: CGPoint(x: 0, y: 3.48), controlPoint2: CGPoint(x: 0.22, y: 3.26))
                hash.addLine(to: CGPoint(x: 3.23, y: 3.26))
                hash.addLine(to: CGPoint(x: 3.23, y: 0.5))
                hash.addCurve(to: CGPoint(x: 3.73, y: 0), controlPoint1: CGPoint(x: 3.23, y: 0.22), controlPoint2: CGPoint(x: 3.46, y: 0))
                hash.addCurve(to: CGPoint(x: 4.23, y: 0.5), controlPoint1: CGPoint(x: 4.01, y: 0), controlPoint2: CGPoint(x: 4.23, y: 0.22))
                hash.addLine(to: CGPoint(x: 4.23, y: 3.26))
                hash.addLine(to: CGPoint(x: 7.77, y: 3.26))
                hash.addLine(to: CGPoint(x: 7.77, y: 0.5))
                hash.addCurve(to: CGPoint(x: 8.27, y: 0), controlPoint1: CGPoint(x: 7.77, y: 0.22), controlPoint2: CGPoint(x: 7.99, y: 0))
                hash.addCurve(to: CGPoint(x: 8.77, y: 0.5), controlPoint1: CGPoint(x: 8.54, y: 0), controlPoint2: CGPoint(x: 8.77, y: 0.22))
                hash.addLine(to: CGPoint(x: 8.77, y: 3.26))
                hash.addLine(to: CGPoint(x: 11.5, y: 3.26))
                hash.addCurve(to: CGPoint(x: 12, y: 3.76), controlPoint1: CGPoint(x: 11.78, y: 3.26), controlPoint2: CGPoint(x: 12, y: 3.48))
                hash.addCurve(to: CGPoint(x: 11.5, y: 4.26), controlPoint1: CGPoint(x: 12, y: 4.03), controlPoint2: CGPoint(x: 11.78, y: 4.26))
                hash.addLine(to: CGPoint(x: 8.77, y: 4.26))
                hash.close()
                hash.move(to: CGPoint(x: 7.77, y: 4.26))
                hash.addLine(to: CGPoint(x: 4.23, y: 4.26))
                hash.addLine(to: CGPoint(x: 4.23, y: 7.79))
                hash.addLine(to: CGPoint(x: 7.77, y: 7.79))
                hash.addLine(to: CGPoint(x: 7.77, y: 4.26))
                hash.close()
                context.saveGState()
                context.translateBy(x: 36, y: 0)
                UIColor.black.setFill()
                hash.fill()
                context.restoreGState()
                
                /// Asterisk
                let asterisk = UIBezierPath()
                asterisk.move(to: CGPoint(x: 5.06, y: 4.66))
                asterisk.addLine(to: CGPoint(x: 2.67, y: 0.84))
                asterisk.addCurve(to: CGPoint(x: 2.84, y: 0.08), controlPoint1: CGPoint(x: 2.51, y: 0.58), controlPoint2: CGPoint(x: 2.59, y: 0.24))
                asterisk.addCurve(to: CGPoint(x: 3.6, y: 0.26), controlPoint1: CGPoint(x: 3.1, y: -0.08), controlPoint2: CGPoint(x: 3.44, y: 0))
                asterisk.addLine(to: CGPoint(x: 6.05, y: 4.18))
                asterisk.addLine(to: CGPoint(x: 8.5, y: 0.26))
                asterisk.addCurve(to: CGPoint(x: 9.26, y: 0.08), controlPoint1: CGPoint(x: 8.66, y: 0), controlPoint2: CGPoint(x: 9, y: -0.08))
                asterisk.addCurve(to: CGPoint(x: 9.43, y: 0.84), controlPoint1: CGPoint(x: 9.51, y: 0.24), controlPoint2: CGPoint(x: 9.59, y: 0.58))
                asterisk.addLine(to: CGPoint(x: 7.04, y: 4.66))
                asterisk.addLine(to: CGPoint(x: 11.55, y: 4.66))
                asterisk.addCurve(to: CGPoint(x: 12.1, y: 5.21), controlPoint1: CGPoint(x: 11.85, y: 4.66), controlPoint2: CGPoint(x: 12.1, y: 4.91))
                asterisk.addCurve(to: CGPoint(x: 11.55, y: 5.76), controlPoint1: CGPoint(x: 12.1, y: 5.52), controlPoint2: CGPoint(x: 11.85, y: 5.76))
                asterisk.addLine(to: CGPoint(x: 7.04, y: 5.76))
                asterisk.addLine(to: CGPoint(x: 9.43, y: 9.59))
                asterisk.addCurve(to: CGPoint(x: 9.26, y: 10.35), controlPoint1: CGPoint(x: 9.59, y: 9.84), controlPoint2: CGPoint(x: 9.51, y: 10.18))
                asterisk.addCurve(to: CGPoint(x: 8.5, y: 10.17), controlPoint1: CGPoint(x: 9, y: 10.51), controlPoint2: CGPoint(x: 8.66, y: 10.43))
                asterisk.addLine(to: CGPoint(x: 6.05, y: 6.25))
                asterisk.addLine(to: CGPoint(x: 3.6, y: 10.17))
                asterisk.addCurve(to: CGPoint(x: 2.84, y: 10.35), controlPoint1: CGPoint(x: 3.44, y: 10.43), controlPoint2: CGPoint(x: 3.1, y: 10.51))
                asterisk.addCurve(to: CGPoint(x: 2.67, y: 9.59), controlPoint1: CGPoint(x: 2.59, y: 10.18), controlPoint2: CGPoint(x: 2.51, y: 9.84))
                asterisk.addLine(to: CGPoint(x: 5.06, y: 5.76))
                asterisk.addLine(to: CGPoint(x: 0.55, y: 5.76))
                asterisk.addCurve(to: CGPoint(x: 0, y: 5.21), controlPoint1: CGPoint(x: 0.25, y: 5.76), controlPoint2: CGPoint(x: 0, y: 5.52))
                asterisk.addCurve(to: CGPoint(x: 0.55, y: 4.66), controlPoint1: CGPoint(x: 0, y: 4.91), controlPoint2: CGPoint(x: 0.25, y: 4.66))
                asterisk.addLine(to: CGPoint(x: 5.06, y: 4.66))
                asterisk.close()
                context.saveGState()
                context.translateBy(x: 18.45, y: 0.84)
                UIColor.black.setFill()
                asterisk.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        /// 1
        do {
            context.saveGState()
            context.translateBy(x: 6, y: 6)
            
            /// Key
            let key2 = UIBezierPath()
            key2.move(to: CGPoint(x: 6.41, y: 0))
            key2.addLine(to: CGPoint(x: 110.59, y: 0))
            key2.addCurve(to: CGPoint(x: 114.44, y: 0.67), controlPoint1: CGPoint(x: 112.82, y: 0), controlPoint2: CGPoint(x: 113.63, y: 0.23))
            key2.addCurve(to: CGPoint(x: 116.33, y: 2.56), controlPoint1: CGPoint(x: 115.26, y: 1.1), controlPoint2: CGPoint(x: 115.9, y: 1.74))
            key2.addCurve(to: CGPoint(x: 117, y: 6.41), controlPoint1: CGPoint(x: 116.77, y: 3.37), controlPoint2: CGPoint(x: 117, y: 4.18))
            key2.addLine(to: CGPoint(x: 117, y: 39.59))
            key2.addCurve(to: CGPoint(x: 116.33, y: 43.44), controlPoint1: CGPoint(x: 117, y: 41.82), controlPoint2: CGPoint(x: 116.77, y: 42.63))
            key2.addCurve(to: CGPoint(x: 114.44, y: 45.33), controlPoint1: CGPoint(x: 115.9, y: 44.26), controlPoint2: CGPoint(x: 115.26, y: 44.9))
            key2.addCurve(to: CGPoint(x: 110.59, y: 46), controlPoint1: CGPoint(x: 113.63, y: 45.77), controlPoint2: CGPoint(x: 112.82, y: 46))
            key2.addLine(to: CGPoint(x: 6.41, y: 46))
            key2.addCurve(to: CGPoint(x: 2.56, y: 45.33), controlPoint1: CGPoint(x: 4.18, y: 46), controlPoint2: CGPoint(x: 3.37, y: 45.77))
            key2.addCurve(to: CGPoint(x: 0.67, y: 43.44), controlPoint1: CGPoint(x: 1.74, y: 44.9), controlPoint2: CGPoint(x: 1.1, y: 44.26))
            key2.addCurve(to: CGPoint(x: 0, y: 39.59), controlPoint1: CGPoint(x: 0.23, y: 42.63), controlPoint2: CGPoint(x: 0, y: 41.82))
            key2.addLine(to: CGPoint(x: 0, y: 6.41))
            key2.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
            key2.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
            key2.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
            key2.close()
            context.saveGState()
            key2.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(key2.cgPath)
            context.addRect(key2.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -118, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 118, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.08, alpha: 0.45).cgColor)
            }
            UIColor.black.setFill()
            key2.fill()
            context.restoreGState()
            key2.usesEvenOddFillRule = true
            UIColor.white.setFill()
            key2.fill()
            context.restoreGState()
            
            /// Key (Outline Mask)
            context.saveGState()
            key2.addClip()
            
            /// 1
            let _1 = NSMutableAttributedString(string: "1")
            _1.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: _1.length))
            _1.addAttribute(.kern, value: 0.35, range: NSRange(location: 0, length: _1.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                _1.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _1.length))
            }
            context.saveGState()
            _1.draw(in: CGRect(x: 49, y: 0.5, width: 18, height: 33))
            context.restoreGState()
            
            context.restoreGState()
            // End Key (Outline Mask)
            
            context.restoreGState()
        }
        
        /// 2
        do {
            context.saveGState()
            context.translateBy(x: 129, y: 6)
            
            /// Key
            let key3 = UIBezierPath()
            key3.move(to: CGPoint(x: 6.41, y: 0))
            key3.addLine(to: CGPoint(x: 110.59, y: 0))
            key3.addCurve(to: CGPoint(x: 114.44, y: 0.67), controlPoint1: CGPoint(x: 112.82, y: 0), controlPoint2: CGPoint(x: 113.63, y: 0.23))
            key3.addCurve(to: CGPoint(x: 116.33, y: 2.56), controlPoint1: CGPoint(x: 115.26, y: 1.1), controlPoint2: CGPoint(x: 115.9, y: 1.74))
            key3.addCurve(to: CGPoint(x: 117, y: 6.41), controlPoint1: CGPoint(x: 116.77, y: 3.37), controlPoint2: CGPoint(x: 117, y: 4.18))
            key3.addLine(to: CGPoint(x: 117, y: 39.59))
            key3.addCurve(to: CGPoint(x: 116.33, y: 43.44), controlPoint1: CGPoint(x: 117, y: 41.82), controlPoint2: CGPoint(x: 116.77, y: 42.63))
            key3.addCurve(to: CGPoint(x: 114.44, y: 45.33), controlPoint1: CGPoint(x: 115.9, y: 44.26), controlPoint2: CGPoint(x: 115.26, y: 44.9))
            key3.addCurve(to: CGPoint(x: 110.59, y: 46), controlPoint1: CGPoint(x: 113.63, y: 45.77), controlPoint2: CGPoint(x: 112.82, y: 46))
            key3.addLine(to: CGPoint(x: 6.41, y: 46))
            key3.addCurve(to: CGPoint(x: 2.56, y: 45.33), controlPoint1: CGPoint(x: 4.18, y: 46), controlPoint2: CGPoint(x: 3.37, y: 45.77))
            key3.addCurve(to: CGPoint(x: 0.67, y: 43.44), controlPoint1: CGPoint(x: 1.74, y: 44.9), controlPoint2: CGPoint(x: 1.1, y: 44.26))
            key3.addCurve(to: CGPoint(x: 0, y: 39.59), controlPoint1: CGPoint(x: 0.23, y: 42.63), controlPoint2: CGPoint(x: 0, y: 41.82))
            key3.addLine(to: CGPoint(x: 0, y: 6.41))
            key3.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
            key3.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
            key3.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
            key3.close()
            context.saveGState()
            key3.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(key3.cgPath)
            context.addRect(key3.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -118, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 118, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.08, alpha: 0.45).cgColor)
            }
            UIColor.black.setFill()
            key3.fill()
            context.restoreGState()
            key3.usesEvenOddFillRule = true
            UIColor.white.setFill()
            key3.fill()
            context.restoreGState()
            
            /// Key (Outline Mask)
            context.saveGState()
            key3.addClip()
            
            /// 2
            let _2 = NSMutableAttributedString(string: "2")
            _2.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: _2.length))
            _2.addAttribute(.kern, value: 0.35, range: NSRange(location: 0, length: _2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                _2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _2.length))
            }
            context.saveGState()
            _2.draw(in: CGRect(x: 49.5, y: 0.5, width: 18, height: 33))
            context.restoreGState()
            
            /// ABC
            let aBC = NSMutableAttributedString(string: "ABC")
            aBC.addAttribute(.font, value: UIFont(name: "SFProText-Bold", size: 10)!, range: NSRange(location: 0, length: aBC.length))
            aBC.addAttribute(.kern, value: 2.5, range: NSRange(location: 0, length: 1))
            aBC.addAttribute(.kern, value: 1.8, range: NSRange(location: 1, length: 2))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                aBC.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: aBC.length))
            }
            context.saveGState()
            aBC.draw(at: CGPoint(x: 45, y: 29))
            context.restoreGState()
            
            context.restoreGState()
            // End Key (Outline Mask)
            
            context.restoreGState()
        }
        
        /// 3
        do {
            context.saveGState()
            context.translateBy(x: 252, y: 6)
            
            /// Key
            let key4 = UIBezierPath()
            key4.move(to: CGPoint(x: 6.41, y: 0))
            key4.addLine(to: CGPoint(x: 110.59, y: 0))
            key4.addCurve(to: CGPoint(x: 114.44, y: 0.67), controlPoint1: CGPoint(x: 112.82, y: 0), controlPoint2: CGPoint(x: 113.63, y: 0.23))
            key4.addCurve(to: CGPoint(x: 116.33, y: 2.56), controlPoint1: CGPoint(x: 115.26, y: 1.1), controlPoint2: CGPoint(x: 115.9, y: 1.74))
            key4.addCurve(to: CGPoint(x: 117, y: 6.41), controlPoint1: CGPoint(x: 116.77, y: 3.37), controlPoint2: CGPoint(x: 117, y: 4.18))
            key4.addLine(to: CGPoint(x: 117, y: 39.59))
            key4.addCurve(to: CGPoint(x: 116.33, y: 43.44), controlPoint1: CGPoint(x: 117, y: 41.82), controlPoint2: CGPoint(x: 116.77, y: 42.63))
            key4.addCurve(to: CGPoint(x: 114.44, y: 45.33), controlPoint1: CGPoint(x: 115.9, y: 44.26), controlPoint2: CGPoint(x: 115.26, y: 44.9))
            key4.addCurve(to: CGPoint(x: 110.59, y: 46), controlPoint1: CGPoint(x: 113.63, y: 45.77), controlPoint2: CGPoint(x: 112.82, y: 46))
            key4.addLine(to: CGPoint(x: 6.41, y: 46))
            key4.addCurve(to: CGPoint(x: 2.56, y: 45.33), controlPoint1: CGPoint(x: 4.18, y: 46), controlPoint2: CGPoint(x: 3.37, y: 45.77))
            key4.addCurve(to: CGPoint(x: 0.67, y: 43.44), controlPoint1: CGPoint(x: 1.74, y: 44.9), controlPoint2: CGPoint(x: 1.1, y: 44.26))
            key4.addCurve(to: CGPoint(x: 0, y: 39.59), controlPoint1: CGPoint(x: 0.23, y: 42.63), controlPoint2: CGPoint(x: 0, y: 41.82))
            key4.addLine(to: CGPoint(x: 0, y: 6.41))
            key4.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
            key4.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
            key4.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
            key4.close()
            context.saveGState()
            key4.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(key4.cgPath)
            context.addRect(key4.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -118, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 118, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.08, alpha: 0.45).cgColor)
            }
            UIColor.black.setFill()
            key4.fill()
            context.restoreGState()
            key4.usesEvenOddFillRule = true
            UIColor.white.setFill()
            key4.fill()
            context.restoreGState()
            
            /// Key (Outline Mask)
            context.saveGState()
            key4.addClip()
            
            /// 3
            let _3 = NSMutableAttributedString(string: "3")
            _3.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: _3.length))
            _3.addAttribute(.kern, value: 0.35, range: NSRange(location: 0, length: _3.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                _3.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _3.length))
            }
            context.saveGState()
            _3.draw(in: CGRect(x: 52, y: 0.5, width: 18, height: 33))
            context.restoreGState()
            
            /// DEF
            let dEF = NSMutableAttributedString(string: "DEF")
            dEF.addAttribute(.font, value: UIFont(name: "SFProDisplay-Bold", size: 10)!, range: NSRange(location: 0, length: dEF.length))
            dEF.addAttribute(.kern, value: 2.5, range: NSRange(location: 0, length: 2))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                dEF.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: dEF.length))
            }
            context.saveGState()
            dEF.draw(at: CGPoint(x: 48.5, y: 29))
            context.restoreGState()
            
            context.restoreGState()
            // End Key (Outline Mask)
            
            context.restoreGState()
        }
        
        /// 4
        do {
            context.saveGState()
            context.translateBy(x: 6, y: 59)
            
            /// Key
            let key5 = UIBezierPath()
            key5.move(to: CGPoint(x: 6.41, y: 0))
            key5.addLine(to: CGPoint(x: 110.59, y: 0))
            key5.addCurve(to: CGPoint(x: 114.44, y: 0.67), controlPoint1: CGPoint(x: 112.82, y: 0), controlPoint2: CGPoint(x: 113.63, y: 0.23))
            key5.addCurve(to: CGPoint(x: 116.33, y: 2.56), controlPoint1: CGPoint(x: 115.26, y: 1.1), controlPoint2: CGPoint(x: 115.9, y: 1.74))
            key5.addCurve(to: CGPoint(x: 117, y: 6.41), controlPoint1: CGPoint(x: 116.77, y: 3.37), controlPoint2: CGPoint(x: 117, y: 4.18))
            key5.addLine(to: CGPoint(x: 117, y: 40.59))
            key5.addCurve(to: CGPoint(x: 116.33, y: 44.44), controlPoint1: CGPoint(x: 117, y: 42.82), controlPoint2: CGPoint(x: 116.77, y: 43.63))
            key5.addCurve(to: CGPoint(x: 114.44, y: 46.33), controlPoint1: CGPoint(x: 115.9, y: 45.26), controlPoint2: CGPoint(x: 115.26, y: 45.9))
            key5.addCurve(to: CGPoint(x: 110.59, y: 47), controlPoint1: CGPoint(x: 113.63, y: 46.77), controlPoint2: CGPoint(x: 112.82, y: 47))
            key5.addLine(to: CGPoint(x: 6.41, y: 47))
            key5.addCurve(to: CGPoint(x: 2.56, y: 46.33), controlPoint1: CGPoint(x: 4.18, y: 47), controlPoint2: CGPoint(x: 3.37, y: 46.77))
            key5.addCurve(to: CGPoint(x: 0.67, y: 44.44), controlPoint1: CGPoint(x: 1.74, y: 45.9), controlPoint2: CGPoint(x: 1.1, y: 45.26))
            key5.addCurve(to: CGPoint(x: 0, y: 40.59), controlPoint1: CGPoint(x: 0.23, y: 43.63), controlPoint2: CGPoint(x: 0, y: 42.82))
            key5.addLine(to: CGPoint(x: 0, y: 6.41))
            key5.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
            key5.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
            key5.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
            key5.close()
            context.saveGState()
            context.translateBy(x: 0, y: 0)
            key5.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(key5.cgPath)
            context.addRect(key5.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -118, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 118, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.08, alpha: 0.45).cgColor)
            }
            UIColor.black.setFill()
            key5.fill()
            context.restoreGState()
            key5.usesEvenOddFillRule = true
            UIColor.white.setFill()
            key5.fill()
            context.restoreGState()
            
            /// Key (Outline Mask)
            context.saveGState()
            key5.apply(CGAffineTransform(translationX: 0, y: 0))
            key5.addClip()
            
            /// 4
            let _4 = NSMutableAttributedString(string: "4")
            _4.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: _4.length))
            _4.addAttribute(.kern, value: 0.35, range: NSRange(location: 0, length: _4.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                _4.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _4.length))
            }
            context.saveGState()
            _4.draw(in: CGRect(x: 49, y: 1.5, width: 18, height: 33))
            context.restoreGState()
            
            /// GHI
            let gHI = NSMutableAttributedString(string: "GHI")
            gHI.addAttribute(.font, value: UIFont(name: "SFProDisplay-Bold", size: 10)!, range: NSRange(location: 0, length: gHI.length))
            gHI.addAttribute(.kern, value: 2.5, range: NSRange(location: 0, length: gHI.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                gHI.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: gHI.length))
            }
            context.saveGState()
            gHI.draw(at: CGPoint(x: 46.5, y: 30))
            context.restoreGState()
            
            context.restoreGState()
            // End Key (Outline Mask)
            
            context.restoreGState()
        }
        
        /// 5
        do {
            context.saveGState()
            context.translateBy(x: 129, y: 59)
            
            /// Key
            let key6 = UIBezierPath()
            key6.move(to: CGPoint(x: 6.41, y: 0))
            key6.addLine(to: CGPoint(x: 110.59, y: 0))
            key6.addCurve(to: CGPoint(x: 114.44, y: 0.67), controlPoint1: CGPoint(x: 112.82, y: 0), controlPoint2: CGPoint(x: 113.63, y: 0.23))
            key6.addCurve(to: CGPoint(x: 116.33, y: 2.56), controlPoint1: CGPoint(x: 115.26, y: 1.1), controlPoint2: CGPoint(x: 115.9, y: 1.74))
            key6.addCurve(to: CGPoint(x: 117, y: 6.41), controlPoint1: CGPoint(x: 116.77, y: 3.37), controlPoint2: CGPoint(x: 117, y: 4.18))
            key6.addLine(to: CGPoint(x: 117, y: 40.59))
            key6.addCurve(to: CGPoint(x: 116.33, y: 44.44), controlPoint1: CGPoint(x: 117, y: 42.82), controlPoint2: CGPoint(x: 116.77, y: 43.63))
            key6.addCurve(to: CGPoint(x: 114.44, y: 46.33), controlPoint1: CGPoint(x: 115.9, y: 45.26), controlPoint2: CGPoint(x: 115.26, y: 45.9))
            key6.addCurve(to: CGPoint(x: 110.59, y: 47), controlPoint1: CGPoint(x: 113.63, y: 46.77), controlPoint2: CGPoint(x: 112.82, y: 47))
            key6.addLine(to: CGPoint(x: 6.41, y: 47))
            key6.addCurve(to: CGPoint(x: 2.56, y: 46.33), controlPoint1: CGPoint(x: 4.18, y: 47), controlPoint2: CGPoint(x: 3.37, y: 46.77))
            key6.addCurve(to: CGPoint(x: 0.67, y: 44.44), controlPoint1: CGPoint(x: 1.74, y: 45.9), controlPoint2: CGPoint(x: 1.1, y: 45.26))
            key6.addCurve(to: CGPoint(x: 0, y: 40.59), controlPoint1: CGPoint(x: 0.23, y: 43.63), controlPoint2: CGPoint(x: 0, y: 42.82))
            key6.addLine(to: CGPoint(x: 0, y: 6.41))
            key6.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
            key6.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
            key6.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
            key6.close()
            context.saveGState()
            context.translateBy(x: 0, y: 0)
            key6.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(key6.cgPath)
            context.addRect(key6.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -118, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 118, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.08, alpha: 0.45).cgColor)
            }
            UIColor.black.setFill()
            key6.fill()
            context.restoreGState()
            key6.usesEvenOddFillRule = true
            UIColor.white.setFill()
            key6.fill()
            context.restoreGState()
            
            /// Key (Outline Mask)
            context.saveGState()
            key6.apply(CGAffineTransform(translationX: 0, y: 0))
            key6.addClip()
            
            /// 5
            let _5 = NSMutableAttributedString(string: "5")
            _5.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: _5.length))
            _5.addAttribute(.kern, value: 0.35, range: NSRange(location: 0, length: _5.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                _5.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _5.length))
            }
            context.saveGState()
            _5.draw(in: CGRect(x: 49.5, y: 1.5, width: 18, height: 33))
            context.restoreGState()
            
            /// JKL
            let jKL = NSMutableAttributedString(string: "JKL")
            jKL.addAttribute(.font, value: UIFont(name: "SFProDisplay-Bold", size: 10)!, range: NSRange(location: 0, length: jKL.length))
            jKL.addAttribute(.kern, value: 2.5, range: NSRange(location: 0, length: jKL.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                jKL.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: jKL.length))
            }
            context.saveGState()
            jKL.draw(at: CGPoint(x: 46.5, y: 30))
            context.restoreGState()
            
            context.restoreGState()
            // End Key (Outline Mask)
            
            context.restoreGState()
        }
        
        /// 6
        do {
            context.saveGState()
            context.translateBy(x: 252, y: 59)
            
            /// Key
            let key7 = UIBezierPath()
            key7.move(to: CGPoint(x: 6.41, y: 0))
            key7.addLine(to: CGPoint(x: 110.59, y: 0))
            key7.addCurve(to: CGPoint(x: 114.44, y: 0.67), controlPoint1: CGPoint(x: 112.82, y: 0), controlPoint2: CGPoint(x: 113.63, y: 0.23))
            key7.addCurve(to: CGPoint(x: 116.33, y: 2.56), controlPoint1: CGPoint(x: 115.26, y: 1.1), controlPoint2: CGPoint(x: 115.9, y: 1.74))
            key7.addCurve(to: CGPoint(x: 117, y: 6.41), controlPoint1: CGPoint(x: 116.77, y: 3.37), controlPoint2: CGPoint(x: 117, y: 4.18))
            key7.addLine(to: CGPoint(x: 117, y: 40.59))
            key7.addCurve(to: CGPoint(x: 116.33, y: 44.44), controlPoint1: CGPoint(x: 117, y: 42.82), controlPoint2: CGPoint(x: 116.77, y: 43.63))
            key7.addCurve(to: CGPoint(x: 114.44, y: 46.33), controlPoint1: CGPoint(x: 115.9, y: 45.26), controlPoint2: CGPoint(x: 115.26, y: 45.9))
            key7.addCurve(to: CGPoint(x: 110.59, y: 47), controlPoint1: CGPoint(x: 113.63, y: 46.77), controlPoint2: CGPoint(x: 112.82, y: 47))
            key7.addLine(to: CGPoint(x: 6.41, y: 47))
            key7.addCurve(to: CGPoint(x: 2.56, y: 46.33), controlPoint1: CGPoint(x: 4.18, y: 47), controlPoint2: CGPoint(x: 3.37, y: 46.77))
            key7.addCurve(to: CGPoint(x: 0.67, y: 44.44), controlPoint1: CGPoint(x: 1.74, y: 45.9), controlPoint2: CGPoint(x: 1.1, y: 45.26))
            key7.addCurve(to: CGPoint(x: 0, y: 40.59), controlPoint1: CGPoint(x: 0.23, y: 43.63), controlPoint2: CGPoint(x: 0, y: 42.82))
            key7.addLine(to: CGPoint(x: 0, y: 6.41))
            key7.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
            key7.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
            key7.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
            key7.close()
            context.saveGState()
            context.translateBy(x: 0, y: 0)
            key7.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(key7.cgPath)
            context.addRect(key7.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -118, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 118, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.08, alpha: 0.45).cgColor)
            }
            UIColor.black.setFill()
            key7.fill()
            context.restoreGState()
            key7.usesEvenOddFillRule = true
            UIColor.white.setFill()
            key7.fill()
            context.restoreGState()
            
            /// Key (Outline Mask)
            context.saveGState()
            key7.apply(CGAffineTransform(translationX: 0, y: 0))
            key7.addClip()
            
            /// 6
            let _6 = NSMutableAttributedString(string: "6")
            _6.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: _6.length))
            _6.addAttribute(.kern, value: 0.35, range: NSRange(location: 0, length: _6.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                _6.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _6.length))
            }
            context.saveGState()
            _6.draw(in: CGRect(x: 52, y: 1.5, width: 18, height: 33))
            context.restoreGState()
            
            /// MNO
            let mNO = NSMutableAttributedString(string: "MNO")
            mNO.addAttribute(.font, value: UIFont(name: "SFProDisplay-Bold", size: 10)!, range: NSRange(location: 0, length: mNO.length))
            mNO.addAttribute(.kern, value: 2.5, range: NSRange(location: 0, length: mNO.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                mNO.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: mNO.length))
            }
            context.saveGState()
            mNO.draw(at: CGPoint(x: 46.5, y: 30))
            context.restoreGState()
            
            context.restoreGState()
            // End Key (Outline Mask)
            
            context.restoreGState()
        }
        
        /// 7
        do {
            context.saveGState()
            context.translateBy(x: 6, y: 113)
            
            /// Key
            let key8 = UIBezierPath()
            key8.move(to: CGPoint(x: 6.41, y: 0))
            key8.addLine(to: CGPoint(x: 110.59, y: 0))
            key8.addCurve(to: CGPoint(x: 114.44, y: 0.67), controlPoint1: CGPoint(x: 112.82, y: 0), controlPoint2: CGPoint(x: 113.63, y: 0.23))
            key8.addCurve(to: CGPoint(x: 116.33, y: 2.56), controlPoint1: CGPoint(x: 115.26, y: 1.1), controlPoint2: CGPoint(x: 115.9, y: 1.74))
            key8.addCurve(to: CGPoint(x: 117, y: 6.41), controlPoint1: CGPoint(x: 116.77, y: 3.37), controlPoint2: CGPoint(x: 117, y: 4.18))
            key8.addLine(to: CGPoint(x: 117, y: 40.59))
            key8.addCurve(to: CGPoint(x: 116.33, y: 44.44), controlPoint1: CGPoint(x: 117, y: 42.82), controlPoint2: CGPoint(x: 116.77, y: 43.63))
            key8.addCurve(to: CGPoint(x: 114.44, y: 46.33), controlPoint1: CGPoint(x: 115.9, y: 45.26), controlPoint2: CGPoint(x: 115.26, y: 45.9))
            key8.addCurve(to: CGPoint(x: 110.59, y: 47), controlPoint1: CGPoint(x: 113.63, y: 46.77), controlPoint2: CGPoint(x: 112.82, y: 47))
            key8.addLine(to: CGPoint(x: 6.41, y: 47))
            key8.addCurve(to: CGPoint(x: 2.56, y: 46.33), controlPoint1: CGPoint(x: 4.18, y: 47), controlPoint2: CGPoint(x: 3.37, y: 46.77))
            key8.addCurve(to: CGPoint(x: 0.67, y: 44.44), controlPoint1: CGPoint(x: 1.74, y: 45.9), controlPoint2: CGPoint(x: 1.1, y: 45.26))
            key8.addCurve(to: CGPoint(x: 0, y: 40.59), controlPoint1: CGPoint(x: 0.23, y: 43.63), controlPoint2: CGPoint(x: 0, y: 42.82))
            key8.addLine(to: CGPoint(x: 0, y: 6.41))
            key8.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
            key8.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
            key8.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
            key8.close()
            context.saveGState()
            context.translateBy(x: 0, y: 0)
            key8.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(key8.cgPath)
            context.addRect(key8.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -118, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 118, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.08, alpha: 0.45).cgColor)
            }
            UIColor.black.setFill()
            key8.fill()
            context.restoreGState()
            key8.usesEvenOddFillRule = true
            UIColor.white.setFill()
            key8.fill()
            context.restoreGState()
            
            /// Key (Outline Mask)
            context.saveGState()
            key8.apply(CGAffineTransform(translationX: 0, y: 0))
            key8.addClip()
            
            /// 7
            let _7 = NSMutableAttributedString(string: "7")
            _7.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: _7.length))
            _7.addAttribute(.kern, value: 0.35, range: NSRange(location: 0, length: _7.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                _7.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _7.length))
            }
            context.saveGState()
            _7.draw(in: CGRect(x: 49.5, y: 1.5, width: 18, height: 33))
            context.restoreGState()
            
            /// PQRS
            let pQRS = NSMutableAttributedString(string: "PQRS")
            pQRS.addAttribute(.font, value: UIFont(name: "SFProDisplay-Bold", size: 10)!, range: NSRange(location: 0, length: pQRS.length))
            pQRS.addAttribute(.kern, value: 2.5, range: NSRange(location: 0, length: pQRS.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                pQRS.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: pQRS.length))
            }
            context.saveGState()
            pQRS.draw(at: CGPoint(x: 40.5, y: 30))
            context.restoreGState()
            
            context.restoreGState()
            // End Key (Outline Mask)
            
            context.restoreGState()
        }
        
        /// 8
        do {
            context.saveGState()
            context.translateBy(x: 129, y: 113)
            
            /// Key
            let key9 = UIBezierPath()
            key9.move(to: CGPoint(x: 6.41, y: 0))
            key9.addLine(to: CGPoint(x: 110.59, y: 0))
            key9.addCurve(to: CGPoint(x: 114.44, y: 0.67), controlPoint1: CGPoint(x: 112.82, y: 0), controlPoint2: CGPoint(x: 113.63, y: 0.23))
            key9.addCurve(to: CGPoint(x: 116.33, y: 2.56), controlPoint1: CGPoint(x: 115.26, y: 1.1), controlPoint2: CGPoint(x: 115.9, y: 1.74))
            key9.addCurve(to: CGPoint(x: 117, y: 6.41), controlPoint1: CGPoint(x: 116.77, y: 3.37), controlPoint2: CGPoint(x: 117, y: 4.18))
            key9.addLine(to: CGPoint(x: 117, y: 40.59))
            key9.addCurve(to: CGPoint(x: 116.33, y: 44.44), controlPoint1: CGPoint(x: 117, y: 42.82), controlPoint2: CGPoint(x: 116.77, y: 43.63))
            key9.addCurve(to: CGPoint(x: 114.44, y: 46.33), controlPoint1: CGPoint(x: 115.9, y: 45.26), controlPoint2: CGPoint(x: 115.26, y: 45.9))
            key9.addCurve(to: CGPoint(x: 110.59, y: 47), controlPoint1: CGPoint(x: 113.63, y: 46.77), controlPoint2: CGPoint(x: 112.82, y: 47))
            key9.addLine(to: CGPoint(x: 6.41, y: 47))
            key9.addCurve(to: CGPoint(x: 2.56, y: 46.33), controlPoint1: CGPoint(x: 4.18, y: 47), controlPoint2: CGPoint(x: 3.37, y: 46.77))
            key9.addCurve(to: CGPoint(x: 0.67, y: 44.44), controlPoint1: CGPoint(x: 1.74, y: 45.9), controlPoint2: CGPoint(x: 1.1, y: 45.26))
            key9.addCurve(to: CGPoint(x: 0, y: 40.59), controlPoint1: CGPoint(x: 0.23, y: 43.63), controlPoint2: CGPoint(x: 0, y: 42.82))
            key9.addLine(to: CGPoint(x: 0, y: 6.41))
            key9.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
            key9.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
            key9.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
            key9.close()
            context.saveGState()
            context.translateBy(x: 0, y: 0)
            key9.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(key9.cgPath)
            context.addRect(key9.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -118, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 118, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.08, alpha: 0.45).cgColor)
            }
            UIColor.black.setFill()
            key9.fill()
            context.restoreGState()
            key9.usesEvenOddFillRule = true
            UIColor.white.setFill()
            key9.fill()
            context.restoreGState()
            
            /// Key (Outline Mask)
            context.saveGState()
            key9.apply(CGAffineTransform(translationX: 0, y: 0))
            key9.addClip()
            
            /// 8
            let _8 = NSMutableAttributedString(string: "8")
            _8.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: _8.length))
            _8.addAttribute(.kern, value: 0.35, range: NSRange(location: 0, length: _8.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                _8.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _8.length))
            }
            context.saveGState()
            _8.draw(in: CGRect(x: 50, y: 1.5, width: 18, height: 33))
            context.restoreGState()
            
            /// TUV
            let tUV = NSMutableAttributedString(string: "TUV")
            tUV.addAttribute(.font, value: UIFont(name: "SFProDisplay-Bold", size: 10)!, range: NSRange(location: 0, length: tUV.length))
            tUV.addAttribute(.kern, value: 2.5, range: NSRange(location: 0, length: tUV.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                tUV.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: tUV.length))
            }
            context.saveGState()
            tUV.draw(at: CGPoint(x: 45.5, y: 30))
            context.restoreGState()
            
            context.restoreGState()
            // End Key (Outline Mask)
            
            context.restoreGState()
        }
        
        /// 9
        do {
            context.saveGState()
            context.translateBy(x: 252, y: 113)
            
            /// Key
            let key10 = UIBezierPath()
            key10.move(to: CGPoint(x: 6.41, y: 0))
            key10.addLine(to: CGPoint(x: 110.59, y: 0))
            key10.addCurve(to: CGPoint(x: 114.44, y: 0.67), controlPoint1: CGPoint(x: 112.82, y: 0), controlPoint2: CGPoint(x: 113.63, y: 0.23))
            key10.addCurve(to: CGPoint(x: 116.33, y: 2.56), controlPoint1: CGPoint(x: 115.26, y: 1.1), controlPoint2: CGPoint(x: 115.9, y: 1.74))
            key10.addCurve(to: CGPoint(x: 117, y: 6.41), controlPoint1: CGPoint(x: 116.77, y: 3.37), controlPoint2: CGPoint(x: 117, y: 4.18))
            key10.addLine(to: CGPoint(x: 117, y: 40.59))
            key10.addCurve(to: CGPoint(x: 116.33, y: 44.44), controlPoint1: CGPoint(x: 117, y: 42.82), controlPoint2: CGPoint(x: 116.77, y: 43.63))
            key10.addCurve(to: CGPoint(x: 114.44, y: 46.33), controlPoint1: CGPoint(x: 115.9, y: 45.26), controlPoint2: CGPoint(x: 115.26, y: 45.9))
            key10.addCurve(to: CGPoint(x: 110.59, y: 47), controlPoint1: CGPoint(x: 113.63, y: 46.77), controlPoint2: CGPoint(x: 112.82, y: 47))
            key10.addLine(to: CGPoint(x: 6.41, y: 47))
            key10.addCurve(to: CGPoint(x: 2.56, y: 46.33), controlPoint1: CGPoint(x: 4.18, y: 47), controlPoint2: CGPoint(x: 3.37, y: 46.77))
            key10.addCurve(to: CGPoint(x: 0.67, y: 44.44), controlPoint1: CGPoint(x: 1.74, y: 45.9), controlPoint2: CGPoint(x: 1.1, y: 45.26))
            key10.addCurve(to: CGPoint(x: 0, y: 40.59), controlPoint1: CGPoint(x: 0.23, y: 43.63), controlPoint2: CGPoint(x: 0, y: 42.82))
            key10.addLine(to: CGPoint(x: 0, y: 6.41))
            key10.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
            key10.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
            key10.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
            key10.close()
            context.saveGState()
            context.translateBy(x: 0, y: 0)
            key10.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(key10.cgPath)
            context.addRect(key10.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -118, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 118, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.08, alpha: 0.45).cgColor)
            }
            UIColor.black.setFill()
            key10.fill()
            context.restoreGState()
            key10.usesEvenOddFillRule = true
            UIColor.white.setFill()
            key10.fill()
            context.restoreGState()
            
            /// Key (Outline Mask)
            context.saveGState()
            key10.apply(CGAffineTransform(translationX: 0, y: 0))
            key10.addClip()
            
            /// 9
            let _9 = NSMutableAttributedString(string: "9")
            _9.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: _9.length))
            _9.addAttribute(.kern, value: 0.35, range: NSRange(location: 0, length: _9.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                _9.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _9.length))
            }
            context.saveGState()
            _9.draw(in: CGRect(x: 52, y: 1.5, width: 18, height: 33))
            context.restoreGState()
            
            /// WXYZ
            let wXYZ = NSMutableAttributedString(string: "WXYZ")
            wXYZ.addAttribute(.font, value: UIFont(name: "SFProDisplay-Bold", size: 10)!, range: NSRange(location: 0, length: wXYZ.length))
            wXYZ.addAttribute(.kern, value: 2.5, range: NSRange(location: 0, length: wXYZ.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                wXYZ.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: wXYZ.length))
            }
            context.saveGState()
            wXYZ.draw(at: CGPoint(x: 42, y: 30))
            context.restoreGState()
            
            context.restoreGState()
            // End Key (Outline Mask)
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawIPhoneXKeyboardsEmoji(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 333), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 333), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 333)
        
        /// Background
        // Warning: New symbols are not supported.
        
        /// ABC
        let aBC = NSMutableAttributedString(string: "ABC")
        aBC.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 15)!, range: NSRange(location: 0, length: aBC.length))
        aBC.addAttribute(.kern, value: -0.52, range: NSRange(location: 0, length: aBC.length))
        aBC.addAttribute(.foregroundColor, value: UIColor(hue: 0.595, saturation: 0.151, brightness: 0.365, alpha: 1), range: NSRange(location: 0, length: aBC.length))
        context.saveGState()
        aBC.draw(at: CGPoint(x: 24.5, y: 286.5))
        context.restoreGState()
        
        /// Dictation Glyph
        let dictationGlyph = UIBezierPath()
        dictationGlyph.move(to: CGPoint(x: 11.47, y: 25))
        dictationGlyph.addLine(to: CGPoint(x: 11.47, y: 25))
        dictationGlyph.addLine(to: CGPoint(x: 3.53, y: 25))
        dictationGlyph.addLine(to: CGPoint(x: 3.53, y: 25))
        dictationGlyph.addCurve(to: CGPoint(x: 3.5, y: 25), controlPoint1: CGPoint(x: 3.52, y: 25), controlPoint2: CGPoint(x: 3.51, y: 25))
        dictationGlyph.addCurve(to: CGPoint(x: 2.67, y: 24.16), controlPoint1: CGPoint(x: 3.04, y: 25), controlPoint2: CGPoint(x: 2.67, y: 24.62))
        dictationGlyph.addCurve(to: CGPoint(x: 3.5, y: 23.33), controlPoint1: CGPoint(x: 2.67, y: 23.7), controlPoint2: CGPoint(x: 3.04, y: 23.33))
        dictationGlyph.addCurve(to: CGPoint(x: 3.53, y: 23.33), controlPoint1: CGPoint(x: 3.51, y: 23.33), controlPoint2: CGPoint(x: 3.52, y: 23.33))
        dictationGlyph.addLine(to: CGPoint(x: 3.53, y: 23.32))
        dictationGlyph.addLine(to: CGPoint(x: 6.68, y: 23.32))
        dictationGlyph.addLine(to: CGPoint(x: 6.68, y: 20.79))
        dictationGlyph.addCurve(to: CGPoint(x: 0, y: 13.28), controlPoint1: CGPoint(x: 2.87, y: 20.34), controlPoint2: CGPoint(x: -0, y: 17.12))
        dictationGlyph.addCurve(to: CGPoint(x: 0.01, y: 13.18), controlPoint1: CGPoint(x: 0, y: 13.24), controlPoint2: CGPoint(x: 0.01, y: 13.21))
        dictationGlyph.addLine(to: CGPoint(x: 0.01, y: 11.27))
        dictationGlyph.addCurve(to: CGPoint(x: 0, y: 11.16), controlPoint1: CGPoint(x: 0, y: 11.23), controlPoint2: CGPoint(x: 0, y: 11.2))
        dictationGlyph.addCurve(to: CGPoint(x: 0.83, y: 10.33), controlPoint1: CGPoint(x: 0, y: 10.7), controlPoint2: CGPoint(x: 0.37, y: 10.33))
        dictationGlyph.addCurve(to: CGPoint(x: 1.67, y: 11.16), controlPoint1: CGPoint(x: 1.29, y: 10.33), controlPoint2: CGPoint(x: 1.67, y: 10.7))
        dictationGlyph.addCurve(to: CGPoint(x: 1.66, y: 11.25), controlPoint1: CGPoint(x: 1.67, y: 11.19), controlPoint2: CGPoint(x: 1.67, y: 11.22))
        dictationGlyph.addLine(to: CGPoint(x: 1.66, y: 13.54))
        dictationGlyph.addLine(to: CGPoint(x: 1.66, y: 13.54))
        dictationGlyph.addLine(to: CGPoint(x: 1.66, y: 13.55))
        dictationGlyph.addCurve(to: CGPoint(x: 1.66, y: 13.64), controlPoint1: CGPoint(x: 1.66, y: 13.58), controlPoint2: CGPoint(x: 1.66, y: 13.61))
        dictationGlyph.addLine(to: CGPoint(x: 1.66, y: 13.95))
        dictationGlyph.addLine(to: CGPoint(x: 1.68, y: 13.95))
        dictationGlyph.addCurve(to: CGPoint(x: 7.32, y: 19.33), controlPoint1: CGPoint(x: 1.93, y: 16.91), controlPoint2: CGPoint(x: 4.35, y: 19.22))
        dictationGlyph.addLine(to: CGPoint(x: 7.66, y: 19.33))
        dictationGlyph.addCurve(to: CGPoint(x: 13.31, y: 13.95), controlPoint1: CGPoint(x: 10.63, y: 19.23), controlPoint2: CGPoint(x: 13.06, y: 16.92))
        dictationGlyph.addLine(to: CGPoint(x: 13.33, y: 13.95))
        dictationGlyph.addLine(to: CGPoint(x: 13.33, y: 11.17))
        dictationGlyph.addLine(to: CGPoint(x: 13.33, y: 11.17))
        dictationGlyph.addCurve(to: CGPoint(x: 13.33, y: 11.16), controlPoint1: CGPoint(x: 13.33, y: 11.17), controlPoint2: CGPoint(x: 13.33, y: 11.17))
        dictationGlyph.addCurve(to: CGPoint(x: 14.17, y: 10.33), controlPoint1: CGPoint(x: 13.33, y: 10.7), controlPoint2: CGPoint(x: 13.71, y: 10.33))
        dictationGlyph.addCurve(to: CGPoint(x: 15, y: 11.16), controlPoint1: CGPoint(x: 14.63, y: 10.33), controlPoint2: CGPoint(x: 15, y: 10.7))
        dictationGlyph.addCurve(to: CGPoint(x: 15, y: 11.24), controlPoint1: CGPoint(x: 15, y: 11.19), controlPoint2: CGPoint(x: 15, y: 11.21))
        dictationGlyph.addLine(to: CGPoint(x: 15, y: 13.28))
        dictationGlyph.addLine(to: CGPoint(x: 14.99, y: 13.28))
        dictationGlyph.addLine(to: CGPoint(x: 14.99, y: 13.28))
        dictationGlyph.addCurve(to: CGPoint(x: 8.33, y: 20.79), controlPoint1: CGPoint(x: 14.99, y: 17.11), controlPoint2: CGPoint(x: 12.13, y: 20.33))
        dictationGlyph.addLine(to: CGPoint(x: 8.33, y: 23.32))
        dictationGlyph.addLine(to: CGPoint(x: 11.47, y: 23.32))
        dictationGlyph.addLine(to: CGPoint(x: 11.47, y: 23.33))
        dictationGlyph.addCurve(to: CGPoint(x: 11.5, y: 23.33), controlPoint1: CGPoint(x: 11.48, y: 23.33), controlPoint2: CGPoint(x: 11.49, y: 23.33))
        dictationGlyph.addCurve(to: CGPoint(x: 12.33, y: 24.16), controlPoint1: CGPoint(x: 11.96, y: 23.33), controlPoint2: CGPoint(x: 12.33, y: 23.7))
        dictationGlyph.addCurve(to: CGPoint(x: 11.5, y: 25), controlPoint1: CGPoint(x: 12.33, y: 24.62), controlPoint2: CGPoint(x: 11.96, y: 25))
        dictationGlyph.addCurve(to: CGPoint(x: 11.47, y: 25), controlPoint1: CGPoint(x: 11.49, y: 25), controlPoint2: CGPoint(x: 11.48, y: 25))
        dictationGlyph.close()
        dictationGlyph.move(to: CGPoint(x: 11.99, y: 11.88))
        dictationGlyph.addCurve(to: CGPoint(x: 11.97, y: 13.41), controlPoint1: CGPoint(x: 11.99, y: 12.38), controlPoint2: CGPoint(x: 11.99, y: 12.91))
        dictationGlyph.addCurve(to: CGPoint(x: 11.76, y: 14.76), controlPoint1: CGPoint(x: 11.95, y: 13.87), controlPoint2: CGPoint(x: 11.88, y: 14.32))
        dictationGlyph.addCurve(to: CGPoint(x: 10.18, y: 17.06), controlPoint1: CGPoint(x: 11.5, y: 15.68), controlPoint2: CGPoint(x: 10.94, y: 16.49))
        dictationGlyph.addCurve(to: CGPoint(x: 4.82, y: 17.06), controlPoint1: CGPoint(x: 8.61, y: 18.3), controlPoint2: CGPoint(x: 6.39, y: 18.3))
        dictationGlyph.addCurve(to: CGPoint(x: 3.23, y: 14.76), controlPoint1: CGPoint(x: 4.05, y: 16.49), controlPoint2: CGPoint(x: 3.49, y: 15.68))
        dictationGlyph.addCurve(to: CGPoint(x: 3.03, y: 13.41), controlPoint1: CGPoint(x: 3.12, y: 14.32), controlPoint2: CGPoint(x: 3.05, y: 13.87))
        dictationGlyph.addCurve(to: CGPoint(x: 3, y: 11.88), controlPoint1: CGPoint(x: 3, y: 12.91), controlPoint2: CGPoint(x: 3, y: 12.38))
        dictationGlyph.addLine(to: CGPoint(x: 3, y: 7.66))
        dictationGlyph.addCurve(to: CGPoint(x: 3, y: 4.58), controlPoint1: CGPoint(x: 3, y: 7.16), controlPoint2: CGPoint(x: 3, y: 4.95))
        dictationGlyph.addCurve(to: CGPoint(x: 3.23, y: 3.24), controlPoint1: CGPoint(x: 3.01, y: 4.12), controlPoint2: CGPoint(x: 3.09, y: 3.67))
        dictationGlyph.addCurve(to: CGPoint(x: 7.5, y: 0), controlPoint1: CGPoint(x: 3.77, y: 1.32), controlPoint2: CGPoint(x: 5.51, y: 0))
        dictationGlyph.addCurve(to: CGPoint(x: 11.76, y: 3.24), controlPoint1: CGPoint(x: 9.48, y: 0), controlPoint2: CGPoint(x: 11.23, y: 1.32))
        dictationGlyph.addCurve(to: CGPoint(x: 11.99, y: 4.58), controlPoint1: CGPoint(x: 11.89, y: 3.68), controlPoint2: CGPoint(x: 11.96, y: 4.13))
        dictationGlyph.addCurve(to: CGPoint(x: 11.99, y: 7.66), controlPoint1: CGPoint(x: 12.02, y: 5.08), controlPoint2: CGPoint(x: 11.99, y: 7.16))
        dictationGlyph.addLine(to: CGPoint(x: 11.99, y: 11.88))
        dictationGlyph.addLine(to: CGPoint(x: 11.99, y: 11.88))
        dictationGlyph.close()
        dictationGlyph.move(to: CGPoint(x: 10.33, y: 12.66))
        dictationGlyph.addCurve(to: CGPoint(x: 10.33, y: 4.59), controlPoint1: CGPoint(x: 10.33, y: 8.22), controlPoint2: CGPoint(x: 10.35, y: 4.97))
        dictationGlyph.addCurve(to: CGPoint(x: 10.17, y: 3.73), controlPoint1: CGPoint(x: 10.31, y: 4.3), controlPoint2: CGPoint(x: 10.25, y: 4.01))
        dictationGlyph.addCurve(to: CGPoint(x: 9.18, y: 2.24), controlPoint1: CGPoint(x: 10.01, y: 3.14), controlPoint2: CGPoint(x: 9.66, y: 2.62))
        dictationGlyph.addCurve(to: CGPoint(x: 5.82, y: 2.24), controlPoint1: CGPoint(x: 8.19, y: 1.48), controlPoint2: CGPoint(x: 6.81, y: 1.48))
        dictationGlyph.addCurve(to: CGPoint(x: 4.82, y: 3.73), controlPoint1: CGPoint(x: 5.33, y: 2.62), controlPoint2: CGPoint(x: 4.98, y: 3.14))
        dictationGlyph.addCurve(to: CGPoint(x: 4.68, y: 4.59), controlPoint1: CGPoint(x: 4.75, y: 4.01), controlPoint2: CGPoint(x: 4.7, y: 4.3))
        dictationGlyph.addCurve(to: CGPoint(x: 4.67, y: 12.66), controlPoint1: CGPoint(x: 4.65, y: 4.94), controlPoint2: CGPoint(x: 4.67, y: 8.23))
        dictationGlyph.addCurve(to: CGPoint(x: 4.69, y: 13.41), controlPoint1: CGPoint(x: 4.67, y: 12.98), controlPoint2: CGPoint(x: 4.68, y: 13.09))
        dictationGlyph.addCurve(to: CGPoint(x: 4.82, y: 14.27), controlPoint1: CGPoint(x: 4.71, y: 13.7), controlPoint2: CGPoint(x: 4.75, y: 13.99))
        dictationGlyph.addCurve(to: CGPoint(x: 5.82, y: 15.76), controlPoint1: CGPoint(x: 4.98, y: 14.86), controlPoint2: CGPoint(x: 5.33, y: 15.38))
        dictationGlyph.addCurve(to: CGPoint(x: 9.18, y: 15.76), controlPoint1: CGPoint(x: 6.81, y: 16.53), controlPoint2: CGPoint(x: 8.19, y: 16.53))
        dictationGlyph.addCurve(to: CGPoint(x: 10.17, y: 14.27), controlPoint1: CGPoint(x: 9.66, y: 15.38), controlPoint2: CGPoint(x: 10.01, y: 14.86))
        dictationGlyph.addCurve(to: CGPoint(x: 10.3, y: 13.41), controlPoint1: CGPoint(x: 10.24, y: 13.99), controlPoint2: CGPoint(x: 10.29, y: 13.7))
        dictationGlyph.addCurve(to: CGPoint(x: 10.33, y: 12.66), controlPoint1: CGPoint(x: 10.32, y: 13.09), controlPoint2: CGPoint(x: 10.33, y: 12.98))
        dictationGlyph.close()
        context.saveGState()
        context.translateBy(x: 330, y: 283)
        dictationGlyph.usesEvenOddFillRule = true
        UIColor(hue: 0.597, saturation: 0.13, brightness: 0.361, alpha: 1).setFill()
        dictationGlyph.fill()
        context.restoreGState()
        
        /// Container
        do {
            context.saveGState()
            
            /// Mask
            let mask = UIBezierPath()
            mask.move(to: CGPoint.zero)
            mask.addLine(to: CGPoint(x: 375, y: 0))
            mask.addLine(to: CGPoint(x: 375, y: 258))
            mask.addLine(to: CGPoint(x: 0, y: 258))
            mask.addLine(to: CGPoint.zero)
            mask.close()
            
            /// Mask (Outline Mask)
            context.saveGState()
            mask.addClip()
            
            /// Index Picker
            do {
                context.saveGState()
                context.translateBy(x: 11.5, y: 223)
                
                /// Highlight
                do {
                    context.saveGState()
                    
                    /// Key
                    let key = UIBezierPath()
                    key.move(to: CGPoint(x: 0, y: 15))
                    key.addCurve(to: CGPoint(x: 15, y: 0), controlPoint1: CGPoint(x: 0, y: 6.72), controlPoint2: CGPoint(x: 6.71, y: 0))
                    key.addLine(to: CGPoint(x: 15, y: 0))
                    key.addCurve(to: CGPoint(x: 30, y: 15), controlPoint1: CGPoint(x: 23.28, y: 0), controlPoint2: CGPoint(x: 30, y: 6.71))
                    key.addLine(to: CGPoint(x: 30, y: 15))
                    key.addCurve(to: CGPoint(x: 15, y: 30), controlPoint1: CGPoint(x: 30, y: 23.28), controlPoint2: CGPoint(x: 23.29, y: 30))
                    key.addLine(to: CGPoint(x: 15, y: 30))
                    key.addCurve(to: CGPoint(x: 0, y: 15), controlPoint1: CGPoint(x: 6.72, y: 30), controlPoint2: CGPoint(x: 0, y: 23.29))
                    key.addLine(to: CGPoint(x: 0, y: 15))
                    key.close()
                    context.saveGState()
                    key.usesEvenOddFillRule = true
                    UIColor.clear.setFill()
                    key.fill()
                    context.restoreGState()
                    
                    /// Key (Outline Mask)
                    context.saveGState()
                    key.addClip()
                    
                    /// Blur
                    let blur = UIBezierPath()
                    blur.move(to: CGPoint.zero)
                    blur.addLine(to: CGPoint(x: 67.5, y: 0))
                    blur.addLine(to: CGPoint(x: 67.5, y: 67.5))
                    blur.addLine(to: CGPoint(x: 0, y: 67.5))
                    blur.addLine(to: CGPoint.zero)
                    blur.close()
                    context.saveGState()
                    context.translateBy(x: -19, y: -19)
                    // Warning: Blur effects are not supported.
                    blur.usesEvenOddFillRule = true
                    UIColor(hue: 0.601, saturation: 0.085, brightness: 0.847, alpha: 0.89).setFill()
                    blur.fill()
                    context.restoreGState()
                    
                    context.restoreGState()
                    // End Key (Outline Mask)
                    
                    context.restoreGState()
                }
                
                /// Recent
                do {
                    context.saveGState()
                    context.translateBy(x: 7, y: 7)
                    
                    /// Body
                    let body = UIBezierPath()
                    body.move(to: CGPoint(x: 8, y: 16))
                    body.addCurve(to: CGPoint(x: 16, y: 8), controlPoint1: CGPoint(x: 12.42, y: 16), controlPoint2: CGPoint(x: 16, y: 12.42))
                    body.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 16, y: 3.58), controlPoint2: CGPoint(x: 12.42, y: 0))
                    body.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 3.58, y: 0), controlPoint2: CGPoint(x: 0, y: 3.58))
                    body.addCurve(to: CGPoint(x: 8, y: 16), controlPoint1: CGPoint(x: 0, y: 12.42), controlPoint2: CGPoint(x: 3.58, y: 16))
                    body.close()
                    context.saveGState()
                    context.saveGState()
                    body.lineWidth = 2
                    context.beginPath()
                    context.addPath(body.cgPath)
                    context.clip(using: .evenOdd)
                    UIColor(hue: 0.594, saturation: 0.237, brightness: 0.38, alpha: 1).setStroke()
                    body.stroke()
                    context.restoreGState()
                    context.restoreGState()
                    
                    /// Shape
                    let shape = UIBezierPath()
                    shape.move(to: CGPoint(x: 5, y: 6))
                    shape.addLine(to: CGPoint(x: 5, y: 7))
                    shape.addLine(to: CGPoint(x: 2.5, y: 7))
                    shape.addLine(to: CGPoint(x: 0, y: 7))
                    shape.addLine(to: CGPoint(x: 0, y: 6))
                    shape.addLine(to: CGPoint(x: 4, y: 6))
                    shape.addLine(to: CGPoint(x: 4, y: 0))
                    shape.addLine(to: CGPoint(x: 5, y: 0))
                    shape.addLine(to: CGPoint(x: 5, y: 6))
                    shape.close()
                    context.saveGState()
                    context.translateBy(x: 4, y: 2)
                    shape.usesEvenOddFillRule = true
                    UIColor(hue: 0.594, saturation: 0.237, brightness: 0.38, alpha: 1).setFill()
                    shape.fill()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// :D
                do {
                    context.saveGState()
                    context.translateBy(x: 44.5, y: 7.5)
                    
                    /// Head
                    let head = UIBezierPath()
                    head.move(to: CGPoint(x: 7.5, y: 15))
                    head.addCurve(to: CGPoint(x: 15, y: 7.5), controlPoint1: CGPoint(x: 11.64, y: 15), controlPoint2: CGPoint(x: 15, y: 11.64))
                    head.addCurve(to: CGPoint(x: 7.5, y: 0), controlPoint1: CGPoint(x: 15, y: 3.36), controlPoint2: CGPoint(x: 11.64, y: 0))
                    head.addCurve(to: CGPoint(x: 0, y: 7.5), controlPoint1: CGPoint(x: 3.36, y: 0), controlPoint2: CGPoint(x: 0, y: 3.36))
                    head.addCurve(to: CGPoint(x: 7.5, y: 15), controlPoint1: CGPoint(x: 0, y: 11.64), controlPoint2: CGPoint(x: 3.36, y: 15))
                    head.close()
                    context.saveGState()
                    head.lineWidth = 0.79
                    UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setStroke()
                    head.stroke()
                    context.restoreGState()
                    
                    /// Smile
                    let smile = UIBezierPath()
                    smile.move(to: CGPoint(x: 5.01, y: 5.04))
                    smile.addCurve(to: CGPoint(x: 0, y: 0.7), controlPoint1: CGPoint(x: 2.24, y: 5.04), controlPoint2: CGPoint(x: 0, y: 1.89))
                    smile.addCurve(to: CGPoint(x: 5.01, y: 0.7), controlPoint1: CGPoint(x: 0, y: -0.88), controlPoint2: CGPoint(x: 1.07, y: 0.7))
                    smile.addCurve(to: CGPoint(x: 10.03, y: 0.7), controlPoint1: CGPoint(x: 8.95, y: 0.7), controlPoint2: CGPoint(x: 10.03, y: -0.88))
                    smile.addCurve(to: CGPoint(x: 5.01, y: 5.04), controlPoint1: CGPoint(x: 10.03, y: 1.89), controlPoint2: CGPoint(x: 7.78, y: 5.04))
                    smile.close()
                    smile.move(to: CGPoint(x: 5.01, y: 2.48))
                    smile.addCurve(to: CGPoint(x: 9.31, y: 0.96), controlPoint1: CGPoint(x: 6.45, y: 2.68), controlPoint2: CGPoint(x: 9.31, y: 1.89))
                    smile.addCurve(to: CGPoint(x: 5.01, y: 1.29), controlPoint1: CGPoint(x: 9.31, y: 0.31), controlPoint2: CGPoint(x: 8.39, y: 1.1))
                    smile.addCurve(to: CGPoint(x: 0.72, y: 0.96), controlPoint1: CGPoint(x: 1.64, y: 1.1), controlPoint2: CGPoint(x: 0.72, y: 0.31))
                    smile.addCurve(to: CGPoint(x: 5.01, y: 2.48), controlPoint1: CGPoint(x: 0.72, y: 1.89), controlPoint2: CGPoint(x: 3.58, y: 2.68))
                    smile.close()
                    context.saveGState()
                    context.translateBy(x: 2.49, y: 8.48)
                    smile.usesEvenOddFillRule = true
                    UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                    smile.fill()
                    context.restoreGState()
                    
                    /// Eyes
                    let eyes = UIBezierPath()
                    eyes.move(to: CGPoint(x: 0.74, y: 1.97))
                    eyes.addCurve(to: CGPoint(x: 0, y: 0.99), controlPoint1: CGPoint(x: 0.33, y: 1.97), controlPoint2: CGPoint(x: 0, y: 1.53))
                    eyes.addCurve(to: CGPoint(x: 0.74, y: 0), controlPoint1: CGPoint(x: 0, y: 0.44), controlPoint2: CGPoint(x: 0.33, y: 0))
                    eyes.addCurve(to: CGPoint(x: 1.47, y: 0.99), controlPoint1: CGPoint(x: 1.14, y: 0), controlPoint2: CGPoint(x: 1.47, y: 0.44))
                    eyes.addCurve(to: CGPoint(x: 0.74, y: 1.97), controlPoint1: CGPoint(x: 1.47, y: 1.53), controlPoint2: CGPoint(x: 1.14, y: 1.97))
                    eyes.close()
                    eyes.move(to: CGPoint(x: 5.24, y: 1.97))
                    eyes.addCurve(to: CGPoint(x: 4.5, y: 0.99), controlPoint1: CGPoint(x: 4.83, y: 1.97), controlPoint2: CGPoint(x: 4.5, y: 1.53))
                    eyes.addCurve(to: CGPoint(x: 5.24, y: 0), controlPoint1: CGPoint(x: 4.5, y: 0.44), controlPoint2: CGPoint(x: 4.83, y: 0))
                    eyes.addCurve(to: CGPoint(x: 5.97, y: 0.99), controlPoint1: CGPoint(x: 5.64, y: 0), controlPoint2: CGPoint(x: 5.97, y: 0.44))
                    eyes.addCurve(to: CGPoint(x: 5.24, y: 1.97), controlPoint1: CGPoint(x: 5.97, y: 1.53), controlPoint2: CGPoint(x: 5.64, y: 1.97))
                    eyes.close()
                    context.saveGState()
                    context.translateBy(x: 4.5, y: 4.35)
                    eyes.usesEvenOddFillRule = true
                    UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                    eyes.fill()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// Nature
                let nature = UIBezierPath()
                nature.move(to: CGPoint(x: 3.5, y: 5))
                nature.addLine(to: CGPoint(x: 1, y: 5))
                nature.addLine(to: CGPoint(x: 4.5, y: 0))
                nature.addLine(to: CGPoint(x: 8, y: 5))
                nature.addLine(to: CGPoint(x: 5.5, y: 5))
                nature.addLine(to: CGPoint(x: 9, y: 10.5))
                nature.addLine(to: CGPoint(x: 6, y: 10.5))
                nature.addLine(to: CGPoint(x: 6, y: 13.5))
                nature.addLine(to: CGPoint(x: 3, y: 13.5))
                nature.addLine(to: CGPoint(x: 3, y: 10.5))
                nature.addLine(to: CGPoint(x: 0, y: 10.5))
                nature.addLine(to: CGPoint(x: 3.5, y: 5))
                nature.close()
                context.saveGState()
                context.translateBy(x: 81.5, y: 8.5)
                context.saveGState()
                nature.lineWidth = 2
                context.beginPath()
                context.addPath(nature.cgPath)
                context.addRect(nature.bounds.insetBy(dx: -20, dy: -20))
                context.clip(using: .evenOdd)
                UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setStroke()
                nature.stroke()
                context.restoreGState()
                context.restoreGState()
                
                /// Food
                do {
                    context.saveGState()
                    context.translateBy(x: 111.5, y: 6.5)
                    
                    /// Drink
                    let drink = UIBezierPath()
                    drink.move(to: CGPoint(x: 5.5, y: 10.5))
                    drink.addLine(to: CGPoint(x: 1, y: 10.5))
                    drink.addLine(to: CGPoint.zero)
                    drink.addLine(to: CGPoint(x: 6.5, y: 0))
                    drink.addLine(to: CGPoint(x: 6.26, y: 2.48))
                    context.saveGState()
                    context.translateBy(x: 0, y: 5)
                    context.saveGState()
                    drink.lineWidth = 2
                    context.beginPath()
                    context.addPath(drink.cgPath)
                    context.addRect(drink.bounds.insetBy(dx: -20, dy: -20))
                    context.clip(using: .evenOdd)
                    UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setStroke()
                    drink.stroke()
                    context.restoreGState()
                    context.restoreGState()
                    
                    /// Straw
                    let straw = UIBezierPath()
                    straw.move(to: CGPoint(x: 1.16, y: 1))
                    straw.addLine(to: CGPoint(x: 1.66, y: 4.25))
                    straw.addLine(to: CGPoint(x: 0.86, y: 4.71))
                    straw.addLine(to: CGPoint(x: 0.18, y: 1))
                    straw.addLine(to: CGPoint(x: 0, y: 1))
                    straw.addLine(to: CGPoint.zero)
                    straw.addLine(to: CGPoint(x: 4, y: 0))
                    straw.addLine(to: CGPoint(x: 4, y: 1))
                    straw.addLine(to: CGPoint(x: 1.16, y: 1))
                    straw.close()
                    context.saveGState()
                    context.translateBy(x: 6.86, y: 3.32)
                    context.rotate(by: 384 * CGFloat.pi/180)
                    context.translateBy(x: -2, y: -2.36)
                    straw.usesEvenOddFillRule = true
                    UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                    straw.fill()
                    context.restoreGState()
                    
                    /// Bottom Bun
                    let bottomBun = UIBezierPath()
                    bottomBun.move(to: CGPoint(x: 0, y: 0.75))
                    bottomBun.addCurve(to: CGPoint(x: 0.76, y: 0), controlPoint1: CGPoint(x: 0, y: 0.34), controlPoint2: CGPoint(x: 0.34, y: 0))
                    bottomBun.addLine(to: CGPoint(x: 9.74, y: 0))
                    bottomBun.addCurve(to: CGPoint(x: 10.5, y: 0.75), controlPoint1: CGPoint(x: 10.16, y: 0), controlPoint2: CGPoint(x: 10.5, y: 0.33))
                    bottomBun.addLine(to: CGPoint(x: 10.5, y: 0.75))
                    bottomBun.addCurve(to: CGPoint(x: 9.74, y: 1.5), controlPoint1: CGPoint(x: 10.5, y: 1.16), controlPoint2: CGPoint(x: 10.16, y: 1.5))
                    bottomBun.addLine(to: CGPoint(x: 0.76, y: 1.5))
                    bottomBun.addCurve(to: CGPoint(x: 0, y: 0.75), controlPoint1: CGPoint(x: 0.34, y: 1.5), controlPoint2: CGPoint(x: 0, y: 1.17))
                    bottomBun.addLine(to: CGPoint(x: 0, y: 0.75))
                    bottomBun.close()
                    context.saveGState()
                    context.translateBy(x: 3, y: 14)
                    context.saveGState()
                    bottomBun.lineWidth = 2
                    context.beginPath()
                    context.addPath(bottomBun.cgPath)
                    context.addRect(bottomBun.bounds.insetBy(dx: -20, dy: -20))
                    context.clip(using: .evenOdd)
                    UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setStroke()
                    bottomBun.stroke()
                    context.restoreGState()
                    context.restoreGState()
                    
                    /// "Patty"
                    let patty = UIBezierPath()
                    patty.move(to: CGPoint(x: 2.5, y: 0))
                    patty.addCurve(to: CGPoint(x: 2.43, y: 0.34), controlPoint1: CGPoint(x: 1.94, y: 0), controlPoint2: CGPoint(x: 1.92, y: 0.15))
                    patty.addLine(to: CGPoint(x: 7, y: 2))
                    patty.addLine(to: CGPoint(x: 11.57, y: 0.34))
                    patty.addCurve(to: CGPoint(x: 11.5, y: 0), controlPoint1: CGPoint(x: 12.09, y: 0.15), controlPoint2: CGPoint(x: 12.05, y: 0))
                    patty.addLine(to: CGPoint(x: 12.51, y: 0))
                    patty.addCurve(to: CGPoint(x: 13.5, y: 1), controlPoint1: CGPoint(x: 13.06, y: 0), controlPoint2: CGPoint(x: 13.5, y: 0.45))
                    patty.addLine(to: CGPoint(x: 13.5, y: 1.5))
                    patty.addCurve(to: CGPoint(x: 12.51, y: 2.5), controlPoint1: CGPoint(x: 13.5, y: 2.05), controlPoint2: CGPoint(x: 13.05, y: 2.5))
                    patty.addLine(to: CGPoint(x: 0.99, y: 2.5))
                    patty.addCurve(to: CGPoint(x: 0, y: 1.5), controlPoint1: CGPoint(x: 0.44, y: 2.5), controlPoint2: CGPoint(x: 0, y: 2.05))
                    patty.addLine(to: CGPoint(x: 0, y: 1))
                    patty.addCurve(to: CGPoint(x: 0.99, y: 0), controlPoint1: CGPoint(x: 0, y: 0.45), controlPoint2: CGPoint(x: 0.45, y: 0))
                    patty.addLine(to: CGPoint(x: 2.5, y: 0))
                    patty.close()
                    context.saveGState()
                    context.translateBy(x: 1.5, y: 11.5)
                    patty.usesEvenOddFillRule = true
                    UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                    patty.fill()
                    context.restoreGState()
                    
                    /// Cheese
                    let cheese = UIBezierPath()
                    cheese.move(to: CGPoint(x: 1.5, y: 0))
                    cheese.addLine(to: CGPoint(x: 12.5, y: 0))
                    cheese.addLine(to: CGPoint(x: 14, y: 1))
                    cheese.addLine(to: CGPoint(x: 0, y: 1))
                    cheese.addLine(to: CGPoint(x: 1.5, y: 0))
                    cheese.close()
                    context.saveGState()
                    context.translateBy(x: 1, y: 10.5)
                    cheese.usesEvenOddFillRule = true
                    UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                    cheese.fill()
                    context.restoreGState()
                    
                    /// Top Bun
                    let topBun = UIBezierPath()
                    topBun.move(to: CGPoint(x: 5.75, y: 2.5))
                    topBun.addCurve(to: CGPoint(x: 11.5, y: 1.5), controlPoint1: CGPoint(x: 8.93, y: 2.5), controlPoint2: CGPoint(x: 11.5, y: 2.33))
                    topBun.addCurve(to: CGPoint(x: 5.75, y: 0), controlPoint1: CGPoint(x: 11.5, y: 0.67), controlPoint2: CGPoint(x: 8.93, y: 0))
                    topBun.addCurve(to: CGPoint(x: 0, y: 1.5), controlPoint1: CGPoint(x: 2.57, y: 0), controlPoint2: CGPoint(x: 0, y: 0.67))
                    topBun.addCurve(to: CGPoint(x: 5.75, y: 2.5), controlPoint1: CGPoint(x: 0, y: 2.33), controlPoint2: CGPoint(x: 2.57, y: 2.5))
                    topBun.close()
                    context.saveGState()
                    context.translateBy(x: 2.5, y: 8)
                    context.saveGState()
                    topBun.lineWidth = 1.5
                    context.beginPath()
                    context.addPath(topBun.cgPath)
                    context.addRect(topBun.bounds.insetBy(dx: -15, dy: -15))
                    context.clip(using: .evenOdd)
                    UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setStroke()
                    topBun.stroke()
                    context.restoreGState()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// Celebration
                do {
                    context.saveGState()
                    context.translateBy(x: 148.5, y: 7)
                    
                    /// Cone Thing
                    do {
                        context.saveGState()
                        context.translateBy(x: 1.5, y: 5)
                        
                        /// Shape
                        let shape2 = UIBezierPath()
                        shape2.move(to: CGPoint(x: 7.5, y: 4))
                        shape2.addLine(to: CGPoint(x: 0, y: 7.5))
                        shape2.addLine(to: CGPoint(x: 3, y: 0))
                        context.saveGState()
                        context.translateBy(x: 0, y: 2.5)
                        shape2.lineJoinStyle = .round
                        shape2.lineCapStyle = .round
                        context.saveGState()
                        shape2.lineWidth = 2
                        context.beginPath()
                        context.addPath(shape2.cgPath)
                        context.addRect(shape2.bounds.insetBy(dx: -20, dy: -20))
                        context.clip(using: .evenOdd)
                        UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setStroke()
                        shape2.stroke()
                        context.restoreGState()
                        context.restoreGState()
                        
                        /// Oval
                        let oval = UIBezierPath()
                        oval.move(to: CGPoint(x: 3.75, y: 2))
                        oval.addCurve(to: CGPoint(x: 7.5, y: 1), controlPoint1: CGPoint(x: 5.82, y: 2), controlPoint2: CGPoint(x: 7.5, y: 1.55))
                        oval.addCurve(to: CGPoint(x: 3.75, y: 0), controlPoint1: CGPoint(x: 7.5, y: 0.45), controlPoint2: CGPoint(x: 5.82, y: 0))
                        oval.addCurve(to: CGPoint(x: 0, y: 1), controlPoint1: CGPoint(x: 1.68, y: 0), controlPoint2: CGPoint(x: 0, y: 0.45))
                        oval.addCurve(to: CGPoint(x: 3.75, y: 2), controlPoint1: CGPoint(x: 0, y: 1.55), controlPoint2: CGPoint(x: 1.68, y: 2))
                        oval.close()
                        context.saveGState()
                        context.translateBy(x: 6.32, y: 3.43)
                        context.rotate(by: 45 * CGFloat.pi/180)
                        context.translateBy(x: -3.75, y: -1)
                        oval.lineJoinStyle = .round
                        oval.lineCapStyle = .round
                        context.saveGState()
                        oval.lineWidth = 2
                        context.beginPath()
                        context.addPath(oval.cgPath)
                        context.addRect(oval.bounds.insetBy(dx: -20, dy: -20))
                        context.clip(using: .evenOdd)
                        UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setStroke()
                        oval.stroke()
                        context.restoreGState()
                        context.restoreGState()
                        
                        context.restoreGState()
                    }
                    
                    /// Confetti
                    do {
                        context.saveGState()
                        
                        /// Confetti
                        let confetti = UIBezierPath()
                        confetti.move(to: CGPoint.zero)
                        confetti.addLine(to: CGPoint(x: 1.2, y: 0))
                        confetti.addLine(to: CGPoint(x: 1.2, y: 1.2))
                        confetti.addLine(to: CGPoint(x: 0, y: 1.2))
                        confetti.addLine(to: CGPoint.zero)
                        confetti.close()
                        context.saveGState()
                        context.translateBy(x: 0.4, y: 6.9)
                        confetti.usesEvenOddFillRule = true
                        UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                        confetti.fill()
                        context.restoreGState()
                        
                        /// Confetti
                        let confetti2 = UIBezierPath()
                        confetti2.move(to: CGPoint.zero)
                        confetti2.addLine(to: CGPoint(x: 1.2, y: 0))
                        confetti2.addLine(to: CGPoint(x: 1.2, y: 1.2))
                        confetti2.addLine(to: CGPoint(x: 0, y: 1.2))
                        confetti2.addLine(to: CGPoint.zero)
                        confetti2.close()
                        context.saveGState()
                        context.translateBy(x: 8.4, y: 1.4)
                        confetti2.usesEvenOddFillRule = true
                        UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                        confetti2.fill()
                        context.restoreGState()
                        
                        /// Confetti
                        let confetti3 = UIBezierPath()
                        confetti3.move(to: CGPoint.zero)
                        confetti3.addLine(to: CGPoint(x: 1.2, y: 0))
                        confetti3.addLine(to: CGPoint(x: 1.2, y: 1.2))
                        confetti3.addLine(to: CGPoint(x: 0, y: 1.2))
                        confetti3.addLine(to: CGPoint.zero)
                        confetti3.close()
                        context.saveGState()
                        context.translateBy(x: 10.9, y: 0.4)
                        confetti3.usesEvenOddFillRule = true
                        UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                        confetti3.fill()
                        context.restoreGState()
                        
                        /// Confetti
                        let confetti4 = UIBezierPath()
                        confetti4.move(to: CGPoint.zero)
                        confetti4.addLine(to: CGPoint(x: 1.2, y: 0))
                        confetti4.addLine(to: CGPoint(x: 1.2, y: 1.2))
                        confetti4.addLine(to: CGPoint(x: 0, y: 1.2))
                        confetti4.addLine(to: CGPoint.zero)
                        confetti4.close()
                        context.saveGState()
                        context.translateBy(x: 9.9, y: 12.9)
                        confetti4.usesEvenOddFillRule = true
                        UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                        confetti4.fill()
                        context.restoreGState()
                        
                        /// Confetti
                        let confetti5 = UIBezierPath()
                        confetti5.move(to: CGPoint.zero)
                        confetti5.addLine(to: CGPoint(x: 1.2, y: 0))
                        confetti5.addLine(to: CGPoint(x: 1.2, y: 1.2))
                        confetti5.addLine(to: CGPoint(x: 0, y: 1.2))
                        confetti5.addLine(to: CGPoint.zero)
                        confetti5.close()
                        context.saveGState()
                        context.translateBy(x: 13.9, y: 13.9)
                        confetti5.usesEvenOddFillRule = true
                        UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                        confetti5.fill()
                        context.restoreGState()
                        
                        /// Confetti
                        let confetti6 = UIBezierPath()
                        confetti6.move(to: CGPoint.zero)
                        confetti6.addLine(to: CGPoint(x: 1.2, y: 0))
                        confetti6.addLine(to: CGPoint(x: 1.2, y: 1.2))
                        confetti6.addLine(to: CGPoint(x: 0, y: 1.2))
                        confetti6.addLine(to: CGPoint.zero)
                        confetti6.close()
                        context.saveGState()
                        context.translateBy(x: 12.9, y: 10.9)
                        confetti6.usesEvenOddFillRule = true
                        UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                        confetti6.fill()
                        context.restoreGState()
                        
                        /// Confetti
                        let confetti7 = UIBezierPath()
                        confetti7.move(to: CGPoint.zero)
                        confetti7.addLine(to: CGPoint(x: 1.2, y: 0))
                        confetti7.addLine(to: CGPoint(x: 1.2, y: 1.2))
                        confetti7.addLine(to: CGPoint(x: 0, y: 1.2))
                        confetti7.addLine(to: CGPoint.zero)
                        confetti7.close()
                        context.saveGState()
                        context.translateBy(x: 14.9, y: 9.4)
                        confetti7.usesEvenOddFillRule = true
                        UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                        confetti7.fill()
                        context.restoreGState()
                        
                        /// Streamers
                        let streamers = UIBezierPath()
                        streamers.move(to: CGPoint(x: 1.1, y: 0))
                        streamers.addCurve(to: CGPoint(x: 0.1, y: 1.5), controlPoint1: CGPoint(x: 1.1, y: 0), controlPoint2: CGPoint(x: -0.4, y: 1))
                        streamers.addCurve(to: CGPoint(x: 1.6, y: 2.5), controlPoint1: CGPoint(x: 0.6, y: 2), controlPoint2: CGPoint(x: 2.1, y: 2))
                        streamers.addCurve(to: CGPoint(x: 0.6, y: 4), controlPoint1: CGPoint(x: 1.1, y: 3), controlPoint2: CGPoint(x: 0.1, y: 4))
                        streamers.addCurve(to: CGPoint(x: 3.1, y: 3.5), controlPoint1: CGPoint(x: 1.1, y: 4), controlPoint2: CGPoint(x: 3.1, y: 3))
                        streamers.addCurve(to: CGPoint(x: 2.1, y: 5.5), controlPoint1: CGPoint(x: 3.1, y: 4), controlPoint2: CGPoint(x: 2.1, y: 5.5))
                        context.saveGState()
                        context.translateBy(x: 0.4, y: 0)
                        streamers.lineWidth = 0.75
                        UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setStroke()
                        streamers.stroke()
                        context.restoreGState()
                        
                        /// Streamers
                        let streamers2 = UIBezierPath()
                        streamers2.move(to: CGPoint(x: 0, y: 1.08))
                        streamers2.addCurve(to: CGPoint(x: 1, y: 5.58), controlPoint1: CGPoint(x: 0, y: -1.42), controlPoint2: CGPoint(x: 4, y: 0.58))
                        context.saveGState()
                        context.translateBy(x: 5, y: 2.42)
                        streamers2.lineWidth = 0.75
                        UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setStroke()
                        streamers2.stroke()
                        context.restoreGState()
                        
                        /// Streamers
                        let streamers3 = UIBezierPath()
                        streamers3.move(to: CGPoint(x: 0, y: 2))
                        streamers3.addCurve(to: CGPoint(x: 6.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2), controlPoint2: CGPoint(x: 1, y: 0))
                        context.saveGState()
                        context.translateBy(x: 8, y: 8)
                        streamers3.lineWidth = 0.75
                        UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setStroke()
                        streamers3.stroke()
                        context.restoreGState()
                        
                        /// Streamers
                        let streamers4 = UIBezierPath()
                        streamers4.move(to: CGPoint(x: 0.13, y: 5))
                        streamers4.addCurve(to: CGPoint(x: 0.63, y: 3), controlPoint1: CGPoint(x: 0.13, y: 5), controlPoint2: CGPoint(x: -0.38, y: 3.5))
                        streamers4.addCurve(to: CGPoint(x: 2.63, y: 4), controlPoint1: CGPoint(x: 1.63, y: 2.5), controlPoint2: CGPoint(x: 1.63, y: 4.5))
                        streamers4.addCurve(to: CGPoint(x: 2.63, y: 2), controlPoint1: CGPoint(x: 3.63, y: 3.5), controlPoint2: CGPoint(x: 2.13, y: 2.5))
                        streamers4.addCurve(to: CGPoint(x: 4.63, y: 1.5), controlPoint1: CGPoint(x: 3.13, y: 1.5), controlPoint2: CGPoint(x: 4.13, y: 2.5))
                        streamers4.addCurve(to: CGPoint(x: 3.63, y: 0), controlPoint1: CGPoint(x: 5.13, y: 0.5), controlPoint2: CGPoint(x: 3.63, y: 0))
                        context.saveGState()
                        context.translateBy(x: 10.87, y: 1)
                        streamers4.lineWidth = 0.75
                        UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setStroke()
                        streamers4.stroke()
                        context.restoreGState()
                        
                        context.restoreGState()
                    }
                    
                    context.restoreGState()
                }
                
                /// Activities
                do {
                    context.saveGState()
                    context.translateBy(x: 186.5, y: 7)
                    
                    /// Body
                    let body2 = UIBezierPath()
                    body2.move(to: CGPoint(x: 6, y: 0))
                    body2.addLine(to: CGPoint(x: 9, y: 0.5))
                    body2.addLine(to: CGPoint(x: 11, y: 2.5))
                    body2.addLine(to: CGPoint(x: 11.5, y: 4))
                    body2.addLine(to: CGPoint(x: 15, y: 4.5))
                    body2.addLine(to: CGPoint(x: 14.5, y: 5.25))
                    body2.addLine(to: CGPoint(x: 11, y: 5.25))
                    body2.addLine(to: CGPoint(x: 9.5, y: 3.5))
                    body2.addLine(to: CGPoint(x: 8, y: 6))
                    body2.addLine(to: CGPoint(x: 11.5, y: 8.5))
                    body2.addLine(to: CGPoint(x: 8.5, y: 13.5))
                    body2.addLine(to: CGPoint(x: 7, y: 12.5))
                    body2.addLine(to: CGPoint(x: 9.5, y: 9))
                    body2.addLine(to: CGPoint(x: 7, y: 7))
                    body2.addLine(to: CGPoint(x: 5, y: 9.5))
                    body2.addLine(to: CGPoint(x: 0, y: 9))
                    body2.addLine(to: CGPoint(x: 0, y: 7.5))
                    body2.addLine(to: CGPoint(x: 4, y: 8))
                    body2.addLine(to: CGPoint(x: 7.5, y: 1.5))
                    body2.addLine(to: CGPoint(x: 5.5, y: 1.5))
                    body2.addLine(to: CGPoint(x: 3.5, y: 3))
                    body2.addLine(to: CGPoint(x: 3, y: 2))
                    body2.addLine(to: CGPoint(x: 6, y: 0))
                    body2.close()
                    context.saveGState()
                    context.translateBy(x: 0, y: 2.5)
                    body2.usesEvenOddFillRule = true
                    UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                    body2.fill()
                    context.restoreGState()
                    
                    /// Head
                    let head2 = UIBezierPath()
                    head2.move(to: CGPoint(x: 1.63, y: 3.25))
                    head2.addCurve(to: CGPoint(x: 3.25, y: 1.63), controlPoint1: CGPoint(x: 2.52, y: 3.25), controlPoint2: CGPoint(x: 3.25, y: 2.52))
                    head2.addCurve(to: CGPoint(x: 1.63, y: 0), controlPoint1: CGPoint(x: 3.25, y: 0.73), controlPoint2: CGPoint(x: 2.52, y: 0))
                    head2.addCurve(to: CGPoint(x: 0, y: 1.63), controlPoint1: CGPoint(x: 0.73, y: 0), controlPoint2: CGPoint(x: 0, y: 0.73))
                    head2.addCurve(to: CGPoint(x: 1.63, y: 3.25), controlPoint1: CGPoint(x: 0, y: 2.52), controlPoint2: CGPoint(x: 0.73, y: 3.25))
                    head2.close()
                    context.saveGState()
                    context.translateBy(x: 9.5, y: 0)
                    head2.usesEvenOddFillRule = true
                    UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                    head2.fill()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// Transport
                do {
                    context.saveGState()
                    context.translateBy(x: 223.5, y: 7)
                    
                    /// Skyline
                    let skyline = UIBezierPath()
                    skyline.move(to: CGPoint(x: 10.5, y: 5))
                    skyline.addLine(to: CGPoint(x: 10.5, y: 6))
                    skyline.addLine(to: CGPoint(x: 9.5, y: 6))
                    skyline.addLine(to: CGPoint(x: 9.5, y: 1))
                    skyline.addLine(to: CGPoint(x: 4.5, y: 1))
                    skyline.addLine(to: CGPoint(x: 4.5, y: 7))
                    skyline.addLine(to: CGPoint(x: 3.5, y: 7))
                    skyline.addLine(to: CGPoint(x: 1, y: 7))
                    skyline.addLine(to: CGPoint(x: 1, y: 15))
                    skyline.addLine(to: CGPoint(x: 0, y: 15))
                    skyline.addLine(to: CGPoint(x: 0, y: 6))
                    skyline.addLine(to: CGPoint(x: 1, y: 6))
                    skyline.addLine(to: CGPoint(x: 3.5, y: 6))
                    skyline.addLine(to: CGPoint(x: 3.5, y: 0))
                    skyline.addLine(to: CGPoint(x: 4.5, y: 0))
                    skyline.addLine(to: CGPoint(x: 9.5, y: 0))
                    skyline.addLine(to: CGPoint(x: 10.5, y: 0))
                    skyline.addLine(to: CGPoint(x: 10.5, y: 4))
                    skyline.addLine(to: CGPoint(x: 15, y: 4))
                    skyline.addLine(to: CGPoint(x: 16, y: 4))
                    skyline.addLine(to: CGPoint(x: 16, y: 15))
                    skyline.addLine(to: CGPoint(x: 15, y: 15))
                    skyline.addLine(to: CGPoint(x: 15, y: 5))
                    skyline.addLine(to: CGPoint(x: 10.5, y: 5))
                    skyline.close()
                    context.saveGState()
                    skyline.usesEvenOddFillRule = true
                    UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                    skyline.fill()
                    context.restoreGState()
                    
                    /// Windows
                    do {
                        context.saveGState()
                        context.translateBy(x: 2, y: 2)
                        
                        /// Window
                        let window = UIBezierPath()
                        window.move(to: CGPoint.zero)
                        window.addLine(to: CGPoint(x: 1, y: 0))
                        window.addLine(to: CGPoint(x: 1, y: 1))
                        window.addLine(to: CGPoint(x: 0, y: 1))
                        window.addLine(to: CGPoint.zero)
                        window.close()
                        context.saveGState()
                        context.translateBy(x: 0, y: 6)
                        window.usesEvenOddFillRule = true
                        UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                        window.fill()
                        context.restoreGState()
                        
                        /// Window
                        let window2 = UIBezierPath()
                        window2.move(to: CGPoint.zero)
                        window2.addLine(to: CGPoint(x: 1, y: 0))
                        window2.addLine(to: CGPoint(x: 1, y: 1))
                        window2.addLine(to: CGPoint(x: 0, y: 1))
                        window2.addLine(to: CGPoint.zero)
                        window2.close()
                        context.saveGState()
                        context.translateBy(x: 3.5, y: 0)
                        window2.usesEvenOddFillRule = true
                        UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                        window2.fill()
                        context.restoreGState()
                        
                        /// Window
                        let window3 = UIBezierPath()
                        window3.move(to: CGPoint.zero)
                        window3.addLine(to: CGPoint(x: 1, y: 0))
                        window3.addLine(to: CGPoint(x: 1, y: 1))
                        window3.addLine(to: CGPoint(x: 0, y: 1))
                        window3.addLine(to: CGPoint.zero)
                        window3.close()
                        context.saveGState()
                        context.translateBy(x: 5.5, y: 0)
                        window3.usesEvenOddFillRule = true
                        UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                        window3.fill()
                        context.restoreGState()
                        
                        /// Window
                        let window4 = UIBezierPath()
                        window4.move(to: CGPoint.zero)
                        window4.addLine(to: CGPoint(x: 1, y: 0))
                        window4.addLine(to: CGPoint(x: 1, y: 1))
                        window4.addLine(to: CGPoint(x: 0, y: 1))
                        window4.addLine(to: CGPoint.zero)
                        window4.close()
                        context.saveGState()
                        context.translateBy(x: 5.5, y: 2)
                        window4.usesEvenOddFillRule = true
                        UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                        window4.fill()
                        context.restoreGState()
                        
                        /// Window
                        let window5 = UIBezierPath()
                        window5.move(to: CGPoint.zero)
                        window5.addLine(to: CGPoint(x: 1, y: 0))
                        window5.addLine(to: CGPoint(x: 1, y: 1))
                        window5.addLine(to: CGPoint(x: 0, y: 1))
                        window5.addLine(to: CGPoint.zero)
                        window5.close()
                        context.saveGState()
                        context.translateBy(x: 3.5, y: 2)
                        window5.usesEvenOddFillRule = true
                        UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                        window5.fill()
                        context.restoreGState()
                        
                        /// Window
                        let window6 = UIBezierPath()
                        window6.move(to: CGPoint.zero)
                        window6.addLine(to: CGPoint(x: 1, y: 0))
                        window6.addLine(to: CGPoint(x: 1, y: 1))
                        window6.addLine(to: CGPoint(x: 0, y: 1))
                        window6.addLine(to: CGPoint.zero)
                        window6.close()
                        context.saveGState()
                        context.translateBy(x: 11, y: 4)
                        window6.usesEvenOddFillRule = true
                        UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                        window6.fill()
                        context.restoreGState()
                        
                        /// Window
                        let window7 = UIBezierPath()
                        window7.move(to: CGPoint.zero)
                        window7.addLine(to: CGPoint(x: 1, y: 0))
                        window7.addLine(to: CGPoint(x: 1, y: 1))
                        window7.addLine(to: CGPoint(x: 0, y: 1))
                        window7.addLine(to: CGPoint.zero)
                        window7.close()
                        context.saveGState()
                        context.translateBy(x: 11, y: 6)
                        window7.usesEvenOddFillRule = true
                        UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                        window7.fill()
                        context.restoreGState()
                        
                        context.restoreGState()
                    }
                    
                    /// Car
                    do {
                        context.saveGState()
                        context.translateBy(x: 2.5, y: 6.5)
                        
                        /// Body
                        let body3 = UIBezierPath()
                        body3.move(to: CGPoint(x: 8.5, y: 4))
                        body3.addLine(to: CGPoint(x: 2.5, y: 4))
                        body3.addLine(to: CGPoint(x: 2.5, y: 5.5))
                        body3.addLine(to: CGPoint(x: 0.5, y: 5.5))
                        body3.addLine(to: CGPoint(x: 0.5, y: 3.87))
                        body3.addCurve(to: CGPoint(x: 0, y: 2.99), controlPoint1: CGPoint(x: 0.2, y: 3.7), controlPoint2: CGPoint(x: 0, y: 3.37))
                        body3.addLine(to: CGPoint(x: 0, y: 1.01))
                        body3.addCurve(to: CGPoint(x: 1, y: 0), controlPoint1: CGPoint(x: 0, y: 0.45), controlPoint2: CGPoint(x: 0.44, y: 0))
                        body3.addLine(to: CGPoint(x: 10, y: 0))
                        body3.addCurve(to: CGPoint(x: 11, y: 1.01), controlPoint1: CGPoint(x: 10.55, y: 0), controlPoint2: CGPoint(x: 11, y: 0.44))
                        body3.addLine(to: CGPoint(x: 11, y: 2.99))
                        body3.addCurve(to: CGPoint(x: 10.5, y: 3.87), controlPoint1: CGPoint(x: 11, y: 3.37), controlPoint2: CGPoint(x: 10.8, y: 3.69))
                        body3.addLine(to: CGPoint(x: 10.5, y: 5.5))
                        body3.addLine(to: CGPoint(x: 8.5, y: 5.5))
                        body3.addLine(to: CGPoint(x: 8.5, y: 4))
                        body3.close()
                        body3.move(to: CGPoint(x: 8.5, y: 3.5))
                        body3.addLine(to: CGPoint(x: 10.5, y: 3.5))
                        body3.addLine(to: CGPoint(x: 10.5, y: 3))
                        body3.addLine(to: CGPoint(x: 0.5, y: 3))
                        body3.addLine(to: CGPoint(x: 0.5, y: 3.5))
                        body3.addLine(to: CGPoint(x: 2.5, y: 3.5))
                        body3.addLine(to: CGPoint(x: 8.5, y: 3.5))
                        body3.close()
                        body3.move(to: CGPoint(x: 1.75, y: 2.5))
                        body3.addCurve(to: CGPoint(x: 2.5, y: 1.75), controlPoint1: CGPoint(x: 2.16, y: 2.5), controlPoint2: CGPoint(x: 2.5, y: 2.16))
                        body3.addCurve(to: CGPoint(x: 1.75, y: 1), controlPoint1: CGPoint(x: 2.5, y: 1.34), controlPoint2: CGPoint(x: 2.16, y: 1))
                        body3.addCurve(to: CGPoint(x: 1, y: 1.75), controlPoint1: CGPoint(x: 1.34, y: 1), controlPoint2: CGPoint(x: 1, y: 1.34))
                        body3.addCurve(to: CGPoint(x: 1.75, y: 2.5), controlPoint1: CGPoint(x: 1, y: 2.16), controlPoint2: CGPoint(x: 1.34, y: 2.5))
                        body3.close()
                        body3.move(to: CGPoint(x: 9.25, y: 2.5))
                        body3.addCurve(to: CGPoint(x: 10, y: 1.75), controlPoint1: CGPoint(x: 9.66, y: 2.5), controlPoint2: CGPoint(x: 10, y: 2.16))
                        body3.addCurve(to: CGPoint(x: 9.25, y: 1), controlPoint1: CGPoint(x: 10, y: 1.34), controlPoint2: CGPoint(x: 9.66, y: 1))
                        body3.addCurve(to: CGPoint(x: 8.5, y: 1.75), controlPoint1: CGPoint(x: 8.84, y: 1), controlPoint2: CGPoint(x: 8.5, y: 1.34))
                        body3.addCurve(to: CGPoint(x: 9.25, y: 2.5), controlPoint1: CGPoint(x: 8.5, y: 2.16), controlPoint2: CGPoint(x: 8.84, y: 2.5))
                        body3.close()
                        body3.move(to: CGPoint(x: 3, y: 2.5))
                        body3.addLine(to: CGPoint(x: 3, y: 3))
                        body3.addLine(to: CGPoint(x: 8, y: 3))
                        body3.addLine(to: CGPoint(x: 8, y: 2.5))
                        body3.addLine(to: CGPoint(x: 3, y: 2.5))
                        body3.close()
                        context.saveGState()
                        context.translateBy(x: 0, y: 4)
                        body3.usesEvenOddFillRule = true
                        UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                        body3.fill()
                        context.restoreGState()
                        
                        /// Roof
                        let roof = UIBezierPath()
                        roof.move(to: CGPoint(x: 0, y: 4.5))
                        roof.addLine(to: CGPoint(x: 0, y: 3))
                        roof.addCurve(to: CGPoint(x: 3, y: 0), controlPoint1: CGPoint(x: 0, y: 1.34), controlPoint2: CGPoint(x: 1.34, y: 0))
                        roof.addLine(to: CGPoint(x: 5, y: 0))
                        roof.addCurve(to: CGPoint(x: 8, y: 3), controlPoint1: CGPoint(x: 6.66, y: 0), controlPoint2: CGPoint(x: 8, y: 1.35))
                        roof.addLine(to: CGPoint(x: 8, y: 5))
                        context.saveGState()
                        context.translateBy(x: 1.5, y: 0)
                        context.saveGState()
                        roof.lineWidth = 2
                        context.beginPath()
                        context.addPath(roof.cgPath)
                        context.clip(using: .evenOdd)
                        UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setStroke()
                        roof.stroke()
                        context.restoreGState()
                        context.restoreGState()
                        
                        context.restoreGState()
                    }
                    
                    context.restoreGState()
                }
                
                /// Flag
                do {
                    context.saveGState()
                    context.translateBy(x: 260.5, y: 8.5)
                    
                    /// Pole
                    let pole = UIBezierPath()
                    pole.move(to: CGPoint.zero)
                    pole.addLine(to: CGPoint(x: 1, y: 0))
                    pole.addLine(to: CGPoint(x: 1, y: 14))
                    pole.addLine(to: CGPoint(x: 0, y: 14))
                    pole.addLine(to: CGPoint.zero)
                    pole.close()
                    context.saveGState()
                    pole.usesEvenOddFillRule = true
                    UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                    pole.fill()
                    context.restoreGState()
                    
                    /// Flag
                    let flag = UIBezierPath()
                    flag.move(to: CGPoint(x: 0, y: 0.25))
                    flag.addCurve(to: CGPoint(x: 2.5, y: 1.25), controlPoint1: CGPoint(x: 0, y: 0.25), controlPoint2: CGPoint(x: 0.25, y: 1.25))
                    flag.addCurve(to: CGPoint(x: 7, y: 0), controlPoint1: CGPoint(x: 4.75, y: 1.25), controlPoint2: CGPoint(x: 5, y: -0))
                    flag.addCurve(to: CGPoint(x: 9, y: 0.75), controlPoint1: CGPoint(x: 9, y: -0), controlPoint2: CGPoint(x: 9, y: 0.75))
                    flag.addLine(to: CGPoint(x: 9, y: 6.75))
                    flag.addCurve(to: CGPoint(x: 7, y: 5.75), controlPoint1: CGPoint(x: 9, y: 6.75), controlPoint2: CGPoint(x: 9, y: 5.75))
                    flag.addCurve(to: CGPoint(x: 2.5, y: 7.25), controlPoint1: CGPoint(x: 5, y: 5.75), controlPoint2: CGPoint(x: 3.81, y: 7.25))
                    flag.addCurve(to: CGPoint(x: 0, y: 6.25), controlPoint1: CGPoint(x: 1.19, y: 7.25), controlPoint2: CGPoint(x: 0, y: 6.25))
                    flag.addLine(to: CGPoint(x: 0, y: 0.25))
                    flag.close()
                    context.saveGState()
                    context.translateBy(x: 1, y: 0.75)
                    flag.lineJoinStyle = .round
                    context.saveGState()
                    flag.lineWidth = 2
                    context.beginPath()
                    context.addPath(flag.cgPath)
                    context.addRect(flag.bounds.insetBy(dx: -20, dy: -20))
                    context.clip(using: .evenOdd)
                    UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setStroke()
                    flag.stroke()
                    context.restoreGState()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// Objects & Symbols
                do {
                    context.saveGState()
                    context.translateBy(x: 292.5, y: 7)
                    
                    /// Thing
                    do {
                        context.saveGState()
                        context.translateBy(x: 0, y: 0.5)
                        
                        /// Shape
                        let shape3 = UIBezierPath()
                        shape3.move(to: CGPoint.zero)
                        shape3.addLine(to: CGPoint(x: 7, y: 0))
                        shape3.addLine(to: CGPoint(x: 7, y: 1))
                        shape3.addLine(to: CGPoint(x: 0, y: 1))
                        shape3.addLine(to: CGPoint.zero)
                        shape3.close()
                        context.saveGState()
                        shape3.usesEvenOddFillRule = true
                        UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                        shape3.fill()
                        context.restoreGState()
                        
                        /// Shape
                        let shape4 = UIBezierPath()
                        shape4.move(to: CGPoint.zero)
                        shape4.addLine(to: CGPoint(x: 7, y: 0))
                        shape4.addLine(to: CGPoint(x: 7, y: 1))
                        shape4.addLine(to: CGPoint(x: 0, y: 1))
                        shape4.addLine(to: CGPoint.zero)
                        shape4.close()
                        context.saveGState()
                        context.translateBy(x: 0, y: 2)
                        shape4.usesEvenOddFillRule = true
                        UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                        shape4.fill()
                        context.restoreGState()
                        
                        /// Shape
                        let shape5 = UIBezierPath()
                        shape5.move(to: CGPoint.zero)
                        shape5.addLine(to: CGPoint(x: 1, y: 0))
                        shape5.addLine(to: CGPoint(x: 1, y: 4))
                        shape5.addLine(to: CGPoint(x: 0, y: 4))
                        shape5.addLine(to: CGPoint.zero)
                        shape5.close()
                        context.saveGState()
                        context.translateBy(x: 3, y: 3)
                        shape5.usesEvenOddFillRule = true
                        UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                        shape5.fill()
                        context.restoreGState()
                        
                        context.restoreGState()
                    }
                    
                    /// Note
                    let note = UIBezierPath()
                    note.move(to: CGPoint(x: 3.32, y: 1.39))
                    note.addLine(to: CGPoint(x: 3.32, y: 6))
                    note.addLine(to: CGPoint(x: 3.27, y: 6))
                    note.addCurve(to: CGPoint(x: 2.14, y: 7.47), controlPoint1: CGPoint(x: 3.29, y: 6.56), controlPoint2: CGPoint(x: 2.85, y: 7.16))
                    note.addCurve(to: CGPoint(x: 0.08, y: 7.02), controlPoint1: CGPoint(x: 1.29, y: 7.86), controlPoint2: CGPoint(x: 0.36, y: 7.65))
                    note.addCurve(to: CGPoint(x: 1.13, y: 5.19), controlPoint1: CGPoint(x: -0.2, y: 6.39), controlPoint2: CGPoint(x: 0.27, y: 5.57))
                    note.addCurve(to: CGPoint(x: 2.57, y: 5.09), controlPoint1: CGPoint(x: 1.63, y: 4.96), controlPoint2: CGPoint(x: 2.16, y: 4.94))
                    note.addLine(to: CGPoint(x: 2.57, y: 0))
                    note.addLine(to: CGPoint(x: 3.32, y: 0))
                    note.addLine(to: CGPoint(x: 3.32, y: 0.16))
                    note.addCurve(to: CGPoint(x: 5.32, y: 2.5), controlPoint1: CGPoint(x: 4.13, y: 0.41), controlPoint2: CGPoint(x: 5.32, y: 1.02))
                    note.addCurve(to: CGPoint(x: 4.32, y: 5.5), controlPoint1: CGPoint(x: 5.32, y: 4.75), controlPoint2: CGPoint(x: 4.32, y: 5.5))
                    note.addCurve(to: CGPoint(x: 4.57, y: 3.25), controlPoint1: CGPoint(x: 4.32, y: 5.5), controlPoint2: CGPoint(x: 4.57, y: 4.25))
                    note.addCurve(to: CGPoint(x: 3.32, y: 1.39), controlPoint1: CGPoint(x: 4.57, y: 2.08), controlPoint2: CGPoint(x: 3.89, y: 1.6))
                    note.close()
                    context.saveGState()
                    context.translateBy(x: 8.43, y: -0)
                    note.usesEvenOddFillRule = true
                    UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1).setFill()
                    note.fill()
                    context.restoreGState()
                    
                    /// &
                    let layer = NSMutableAttributedString(string: "&")
                    layer.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 9.5)!, range: NSRange(location: 0, length: layer.length))
                    layer.addAttribute(.foregroundColor, value: UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1), range: NSRange(location: 0, length: layer.length))
                    context.saveGState()
                    layer.draw(at: CGPoint(x: 0.25, y: 7))
                    context.restoreGState()
                    
                    /// %
                    let layer2 = NSMutableAttributedString(string: "%")
                    layer2.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 9.5)!, range: NSRange(location: 0, length: layer2.length))
                    layer2.addAttribute(.foregroundColor, value: UIColor(hue: 0.6, saturation: 0.054, brightness: 0.729, alpha: 1), range: NSRange(location: 0, length: layer2.length))
                    context.saveGState()
                    layer2.draw(at: CGPoint(x: 7.75, y: 7))
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            /// Backspace
            do {
                context.saveGState()
                context.translateBy(x: 340.5, y: 229.5)
                
                /// Backspace
                let backspace = UIBezierPath()
                backspace.move(to: CGPoint(x: 7.24, y: 1.01))
                backspace.addCurve(to: CGPoint(x: 7.63, y: 0.69), controlPoint1: CGPoint(x: 7.36, y: 0.9), controlPoint2: CGPoint(x: 7.49, y: 0.79))
                backspace.addCurve(to: CGPoint(x: 7.65, y: 0.67), controlPoint1: CGPoint(x: 7.64, y: 0.68), controlPoint2: CGPoint(x: 7.65, y: 0.67))
                backspace.addCurve(to: CGPoint(x: 7.87, y: 0.53), controlPoint1: CGPoint(x: 7.73, y: 0.61), controlPoint2: CGPoint(x: 7.8, y: 0.56))
                backspace.addCurve(to: CGPoint(x: 9.77, y: 0), controlPoint1: CGPoint(x: 8.43, y: 0.19), controlPoint2: CGPoint(x: 9.08, y: 0))
                backspace.addLine(to: CGPoint(x: 19.31, y: 0))
                backspace.addCurve(to: CGPoint(x: 23, y: 3.71), controlPoint1: CGPoint(x: 21.35, y: 0), controlPoint2: CGPoint(x: 23, y: 1.66))
                backspace.addLine(to: CGPoint(x: 23, y: 13.29))
                backspace.addCurve(to: CGPoint(x: 19.31, y: 17), controlPoint1: CGPoint(x: 23, y: 15.34), controlPoint2: CGPoint(x: 21.35, y: 17))
                backspace.addLine(to: CGPoint(x: 9.77, y: 17))
                backspace.addCurve(to: CGPoint(x: 7.88, y: 16.47), controlPoint1: CGPoint(x: 9.08, y: 17), controlPoint2: CGPoint(x: 8.43, y: 16.81))
                backspace.addCurve(to: CGPoint(x: 7.65, y: 16.33), controlPoint1: CGPoint(x: 7.8, y: 16.44), controlPoint2: CGPoint(x: 7.73, y: 16.39))
                backspace.addCurve(to: CGPoint(x: 7.63, y: 16.31), controlPoint1: CGPoint(x: 7.65, y: 16.33), controlPoint2: CGPoint(x: 7.64, y: 16.32))
                backspace.addCurve(to: CGPoint(x: 7.24, y: 15.99), controlPoint1: CGPoint(x: 7.49, y: 16.21), controlPoint2: CGPoint(x: 7.36, y: 16.1))
                backspace.addCurve(to: CGPoint(x: 0, y: 8.5), controlPoint1: CGPoint(x: 5.65, y: 14.66), controlPoint2: CGPoint(x: 0, y: 9.87))
                backspace.addCurve(to: CGPoint(x: 7.24, y: 1.01), controlPoint1: CGPoint(x: 0, y: 7.13), controlPoint2: CGPoint(x: 5.65, y: 2.34))
                backspace.close()
                context.saveGState()
                backspace.lineJoinStyle = .round
                backspace.lineCapStyle = .round
                context.saveGState()
                backspace.lineWidth = 3
                context.beginPath()
                context.addPath(backspace.cgPath)
                context.clip(using: .evenOdd)
                UIColor(hue: 0.595, saturation: 0.151, brightness: 0.365, alpha: 1).setStroke()
                backspace.stroke()
                context.restoreGState()
                context.restoreGState()
                
                /// Cross
                let cross = UIBezierPath()
                cross.move(to: CGPoint(x: 3.07, y: 3.95))
                cross.addLine(to: CGPoint(x: 0.18, y: 1.07))
                cross.addCurve(to: CGPoint(x: 0.18, y: 0.18), controlPoint1: CGPoint(x: -0.06, y: 0.82), controlPoint2: CGPoint(x: -0.06, y: 0.43))
                cross.addCurve(to: CGPoint(x: 1.07, y: 0.18), controlPoint1: CGPoint(x: 0.43, y: -0.06), controlPoint2: CGPoint(x: 0.82, y: -0.06))
                cross.addLine(to: CGPoint(x: 3.95, y: 3.07))
                cross.addLine(to: CGPoint(x: 6.83, y: 0.18))
                cross.addCurve(to: CGPoint(x: 7.72, y: 0.18), controlPoint1: CGPoint(x: 7.08, y: -0.06), controlPoint2: CGPoint(x: 7.47, y: -0.06))
                cross.addCurve(to: CGPoint(x: 7.72, y: 1.07), controlPoint1: CGPoint(x: 7.96, y: 0.43), controlPoint2: CGPoint(x: 7.96, y: 0.82))
                cross.addLine(to: CGPoint(x: 4.83, y: 3.95))
                cross.addLine(to: CGPoint(x: 7.61, y: 6.72))
                cross.addCurve(to: CGPoint(x: 7.61, y: 7.61), controlPoint1: CGPoint(x: 7.85, y: 6.97), controlPoint2: CGPoint(x: 7.85, y: 7.36))
                cross.addCurve(to: CGPoint(x: 6.72, y: 7.61), controlPoint1: CGPoint(x: 7.36, y: 7.85), controlPoint2: CGPoint(x: 6.97, y: 7.85))
                cross.addLine(to: CGPoint(x: 3.95, y: 4.83))
                cross.addLine(to: CGPoint(x: 1.18, y: 7.61))
                cross.addCurve(to: CGPoint(x: 0.29, y: 7.61), controlPoint1: CGPoint(x: 0.93, y: 7.85), controlPoint2: CGPoint(x: 0.54, y: 7.85))
                cross.addCurve(to: CGPoint(x: 0.29, y: 6.72), controlPoint1: CGPoint(x: 0.05, y: 7.36), controlPoint2: CGPoint(x: 0.05, y: 6.97))
                cross.addLine(to: CGPoint(x: 3.07, y: 3.95))
                cross.close()
                context.saveGState()
                context.translateBy(x: 9.93, y: 4.54)
                cross.usesEvenOddFillRule = true
                UIColor(hue: 0.595, saturation: 0.151, brightness: 0.365, alpha: 1).setFill()
                cross.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Frequently Used
            do {
                context.saveGState()
                context.translateBy(x: 10.5, y: 8)
                
                /// 😂
                let layer3 = NSMutableAttributedString(string: "😂")
                layer3.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer3.length))
                context.saveGState()
                layer3.draw(at: CGPoint(x: 0, y: 19.5))
                context.restoreGState()
                
                /// 🍕
                let layer4 = NSMutableAttributedString(string: "🍕")
                layer4.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer4.length))
                context.saveGState()
                layer4.draw(at: CGPoint(x: 46, y: 19.5))
                context.restoreGState()
                
                /// 🚀
                let layer5 = NSMutableAttributedString(string: "🚀")
                layer5.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer5.length))
                context.saveGState()
                layer5.draw(at: CGPoint(x: 92, y: 20.5))
                context.restoreGState()
                
                /// 👍
                let layer6 = NSMutableAttributedString(string: "👍")
                layer6.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer6.length))
                context.saveGState()
                layer6.draw(at: CGPoint(x: 138, y: 19.5))
                context.restoreGState()
                
                /// 🙄
                let layer7 = NSMutableAttributedString(string: "🙄")
                layer7.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer7.length))
                context.saveGState()
                layer7.draw(at: CGPoint(x: 184, y: 19.5))
                context.restoreGState()
                
                /// 👻
                let layer8 = NSMutableAttributedString(string: "👻")
                layer8.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer8.length))
                context.saveGState()
                layer8.draw(at: CGPoint(x: 230, y: 19.5))
                context.restoreGState()
                
                /// ❤️
                let layer9 = NSMutableAttributedString(string: "❤️")
                layer9.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer9.length))
                context.saveGState()
                layer9.draw(at: CGPoint(x: 0, y: 57.5))
                context.restoreGState()
                
                /// 🙈
                let layer10 = NSMutableAttributedString(string: "🙈")
                layer10.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer10.length))
                context.saveGState()
                layer10.draw(at: CGPoint(x: 46, y: 57.5))
                context.restoreGState()
                
                /// 🦁
                let layer11 = NSMutableAttributedString(string: "🦁")
                layer11.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer11.length))
                context.saveGState()
                layer11.draw(at: CGPoint(x: 92, y: 57.5))
                context.restoreGState()
                
                /// ✌️
                let layer12 = NSMutableAttributedString(string: "✌️")
                layer12.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer12.length))
                context.saveGState()
                layer12.draw(at: CGPoint(x: 138, y: 57.5))
                context.restoreGState()
                
                /// 😎
                let layer13 = NSMutableAttributedString(string: "😎")
                layer13.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer13.length))
                context.saveGState()
                layer13.draw(at: CGPoint(x: 184, y: 57.5))
                context.restoreGState()
                
                /// 😄
                let layer14 = NSMutableAttributedString(string: "😄")
                layer14.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer14.length))
                context.saveGState()
                layer14.draw(at: CGPoint(x: 230, y: 57.5))
                context.restoreGState()
                
                /// 😍
                let layer15 = NSMutableAttributedString(string: "😍")
                layer15.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer15.length))
                context.saveGState()
                layer15.draw(at: CGPoint(x: 0, y: 95.5))
                context.restoreGState()
                
                /// 🐵
                let layer16 = NSMutableAttributedString(string: "🐵")
                layer16.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer16.length))
                context.saveGState()
                layer16.draw(at: CGPoint(x: 46, y: 95.5))
                context.restoreGState()
                
                /// 😏
                let layer17 = NSMutableAttributedString(string: "😏")
                layer17.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer17.length))
                context.saveGState()
                layer17.draw(at: CGPoint(x: 92, y: 95.5))
                context.restoreGState()
                
                /// 😉
                let layer18 = NSMutableAttributedString(string: "😉")
                layer18.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer18.length))
                context.saveGState()
                layer18.draw(at: CGPoint(x: 138, y: 95.5))
                context.restoreGState()
                
                /// 🎶
                let layer19 = NSMutableAttributedString(string: "🎶")
                layer19.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer19.length))
                context.saveGState()
                layer19.draw(at: CGPoint(x: 184, y: 95.5))
                context.restoreGState()
                
                /// 😜
                let layer20 = NSMutableAttributedString(string: "😜")
                layer20.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer20.length))
                context.saveGState()
                layer20.draw(at: CGPoint(x: 230, y: 95.5))
                context.restoreGState()
                
                /// 🤓
                let layer21 = NSMutableAttributedString(string: "🤓")
                layer21.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer21.length))
                context.saveGState()
                layer21.draw(at: CGPoint(x: 0, y: 133.5))
                context.restoreGState()
                
                /// 🙉
                let layer22 = NSMutableAttributedString(string: "🙉")
                layer22.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer22.length))
                context.saveGState()
                layer22.draw(at: CGPoint(x: 46, y: 133.5))
                context.restoreGState()
                
                /// 😁
                let layer23 = NSMutableAttributedString(string: "😁")
                layer23.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer23.length))
                context.saveGState()
                layer23.draw(at: CGPoint(x: 92, y: 133.5))
                context.restoreGState()
                
                /// 😌
                let layer24 = NSMutableAttributedString(string: "😌")
                layer24.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer24.length))
                context.saveGState()
                layer24.draw(at: CGPoint(x: 138, y: 133.5))
                context.restoreGState()
                
                /// 👀
                let layer25 = NSMutableAttributedString(string: "👀")
                layer25.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer25.length))
                context.saveGState()
                layer25.draw(at: CGPoint(x: 184, y: 133.5))
                context.restoreGState()
                
                /// 😋
                let layer26 = NSMutableAttributedString(string: "😋")
                layer26.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer26.length))
                context.saveGState()
                layer26.draw(at: CGPoint(x: 230, y: 133.5))
                context.restoreGState()
                
                /// 🙊
                let layer27 = NSMutableAttributedString(string: "🙊")
                layer27.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer27.length))
                context.saveGState()
                layer27.draw(at: CGPoint(x: 0, y: 171.5))
                context.restoreGState()
                
                /// 😩
                let layer28 = NSMutableAttributedString(string: "😩")
                layer28.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer28.length))
                context.saveGState()
                layer28.draw(at: CGPoint(x: 46, y: 171.5))
                context.restoreGState()
                
                /// 😳
                let layer29 = NSMutableAttributedString(string: "😳")
                layer29.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer29.length))
                context.saveGState()
                layer29.draw(at: CGPoint(x: 92, y: 171.5))
                context.restoreGState()
                
                /// ⛏
                let layer30 = NSMutableAttributedString(string: "⛏")
                layer30.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer30.length))
                context.saveGState()
                layer30.draw(at: CGPoint(x: 138, y: 171.5))
                context.restoreGState()
                
                /// 🍰
                let layer31 = NSMutableAttributedString(string: "🍰")
                layer31.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer31.length))
                context.saveGState()
                layer31.draw(at: CGPoint(x: 184, y: 171.5))
                context.restoreGState()
                
                /// 🍳
                let layer32 = NSMutableAttributedString(string: "🍳")
                layer32.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer32.length))
                context.saveGState()
                layer32.draw(at: CGPoint(x: 230, y: 171.5))
                context.restoreGState()
                
                /// FREQUENTLY USED
                let fREQUENTLYUSED = NSMutableAttributedString(string: "FREQUENTLY USED")
                fREQUENTLYUSED.addAttribute(.font, value: UIFont(name: "SFProDisplay-Semibold", size: 12)!, range: NSRange(location: 0, length: fREQUENTLYUSED.length))
                fREQUENTLYUSED.addAttribute(.kern, value: 0.5, range: NSRange(location: 0, length: fREQUENTLYUSED.length))
                fREQUENTLYUSED.addAttribute(.foregroundColor, value: UIColor(hue: 0.625, saturation: 0.024, brightness: 0.663, alpha: 1), range: NSRange(location: 0, length: fREQUENTLYUSED.length))
                context.saveGState()
                fREQUENTLYUSED.draw(at: CGPoint(x: 1.5, y: 0))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// People
            do {
                context.saveGState()
                context.translateBy(x: 300.5, y: 8)
                
                /// 😀
                let layer33 = NSMutableAttributedString(string: "😀")
                layer33.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer33.length))
                context.saveGState()
                layer33.draw(at: CGPoint(x: 0, y: 19.5))
                context.restoreGState()
                
                /// 😅
                let layer34 = NSMutableAttributedString(string: "😅")
                layer34.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer34.length))
                context.saveGState()
                layer34.draw(at: CGPoint(x: 46, y: 19.5))
                context.restoreGState()
                
                /// 😁
                let layer35 = NSMutableAttributedString(string: "😁")
                layer35.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer35.length))
                context.saveGState()
                layer35.draw(at: CGPoint(x: 0, y: 57.5))
                context.restoreGState()
                
                /// 😆
                let layer36 = NSMutableAttributedString(string: "😆")
                layer36.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer36.length))
                context.saveGState()
                layer36.draw(at: CGPoint(x: 46, y: 57.5))
                context.restoreGState()
                
                /// 😂
                let layer37 = NSMutableAttributedString(string: "😂")
                layer37.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer37.length))
                context.saveGState()
                layer37.draw(at: CGPoint(x: 0, y: 95.5))
                context.restoreGState()
                
                /// 😇
                let layer38 = NSMutableAttributedString(string: "😇")
                layer38.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer38.length))
                context.saveGState()
                layer38.draw(at: CGPoint(x: 46, y: 95.5))
                context.restoreGState()
                
                /// 😃
                let layer39 = NSMutableAttributedString(string: "😃")
                layer39.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer39.length))
                context.saveGState()
                layer39.draw(at: CGPoint(x: 0, y: 133.5))
                context.restoreGState()
                
                /// 😈
                let layer40 = NSMutableAttributedString(string: "😈")
                layer40.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer40.length))
                context.saveGState()
                layer40.draw(at: CGPoint(x: 46, y: 133.5))
                context.restoreGState()
                
                /// 😄
                let layer41 = NSMutableAttributedString(string: "😄")
                layer41.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer41.length))
                context.saveGState()
                layer41.draw(at: CGPoint(x: 0, y: 171.5))
                context.restoreGState()
                
                /// 👿
                let layer42 = NSMutableAttributedString(string: "👿")
                layer42.addAttribute(.font, value: UIFont(name: "AppleColorEmoji", size: 32)!, range: NSRange(location: 0, length: layer42.length))
                context.saveGState()
                layer42.draw(at: CGPoint(x: 46, y: 171.5))
                context.restoreGState()
                
                /// PEOPLE
                let pEOPLE = NSMutableAttributedString(string: "PEOPLE")
                pEOPLE.addAttribute(.font, value: UIFont(name: "SFProDisplay-Semibold", size: 12)!, range: NSRange(location: 0, length: pEOPLE.length))
                pEOPLE.addAttribute(.kern, value: 0.5, range: NSRange(location: 0, length: pEOPLE.length))
                pEOPLE.addAttribute(.foregroundColor, value: UIColor(hue: 0.625, saturation: 0.024, brightness: 0.663, alpha: 1), range: NSRange(location: 0, length: pEOPLE.length))
                context.saveGState()
                pEOPLE.draw(at: CGPoint(x: 3.5, y: 0))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
            // End Mask (Outline Mask)
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawIPhoneXKeyboardsDefaultLandscape(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 812, height: 172), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 812, height: 172), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 812, y: resizedFrame.height / 172)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Background
        // Warning: New symbols are not supported.
        
        /// Keyboards /_/ Complex + Button Default Landscape X
        // Warning: New symbols are not supported.
        
        /// Third Row
        do {
            context.saveGState()
            context.translateBy(x: 78, y: 81)
            
            /// Background
            let background2 = UIBezierPath()
            background2.move(to: CGPoint(x: 2.41, y: 30))
            background2.addCurve(to: CGPoint(x: 0, y: 25), controlPoint1: CGPoint(x: 0.89, y: 28.98), controlPoint2: CGPoint(x: 0, y: 27.23))
            background2.addLine(to: CGPoint(x: 0, y: 6))
            background2.addCurve(to: CGPoint(x: 6, y: 0), controlPoint1: CGPoint(x: 0, y: 2.36), controlPoint2: CGPoint(x: 2.36, y: 0))
            background2.addLine(to: CGPoint(x: 75, y: 0))
            background2.addCurve(to: CGPoint(x: 80, y: 2.41), controlPoint1: CGPoint(x: 77.23, y: 0), controlPoint2: CGPoint(x: 78.98, y: 0.89))
            background2.addLine(to: CGPoint(x: 80, y: 28.59))
            background2.addCurve(to: CGPoint(x: 78.59, y: 30), controlPoint1: CGPoint(x: 79.62, y: 29.15), controlPoint2: CGPoint(x: 79.15, y: 29.62))
            background2.addLine(to: CGPoint(x: 2.41, y: 30))
            background2.close()
            context.saveGState()
            background2.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background2.cgPath)
            context.addRect(background2.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -81, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 81, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background2.fill()
            context.restoreGState()
            background2.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background2.fill()
            context.restoreGState()
            
            /// Background
            let background3 = UIBezierPath()
            background3.move(to: CGPoint(x: 5.5, y: 30))
            background3.addCurve(to: CGPoint(x: 0, y: 24.5), controlPoint1: CGPoint(x: 2.16, y: 30), controlPoint2: CGPoint(x: 0, y: 27.84))
            background3.addLine(to: CGPoint(x: 0, y: 5.5))
            background3.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background3.addLine(to: CGPoint(x: 54.5, y: 0))
            background3.addCurve(to: CGPoint(x: 60, y: 5.5), controlPoint1: CGPoint(x: 57.84, y: 0), controlPoint2: CGPoint(x: 60, y: 2.16))
            background3.addLine(to: CGPoint(x: 60, y: 24.5))
            background3.addCurve(to: CGPoint(x: 54.5, y: 30), controlPoint1: CGPoint(x: 60, y: 27.84), controlPoint2: CGPoint(x: 57.84, y: 30))
            background3.addLine(to: CGPoint(x: 5.5, y: 30))
            background3.close()
            context.saveGState()
            context.translateBy(x: 100, y: 0)
            background3.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background3.cgPath)
            context.addRect(background3.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -61, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 61, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background3.fill()
            context.restoreGState()
            background3.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background3.fill()
            context.restoreGState()
            
            /// Shift
            let shift = UIBezierPath()
            shift.move(to: CGPoint(x: 10.24, y: 0.29))
            shift.addCurve(to: CGPoint(x: 8.83, y: 0.29), controlPoint1: CGPoint(x: 9.85, y: -0.1), controlPoint2: CGPoint(x: 9.22, y: -0.1))
            shift.addLine(to: CGPoint(x: 0.45, y: 8.67))
            shift.addCurve(to: CGPoint(x: 1.03, y: 10.09), controlPoint1: CGPoint(x: -0.33, y: 9.45), controlPoint2: CGPoint(x: -0.07, y: 10.09))
            shift.addLine(to: CGPoint(x: 5.03, y: 10.09))
            shift.addLine(to: CGPoint(x: 5.03, y: 15.1))
            shift.addCurve(to: CGPoint(x: 6.03, y: 16.09), controlPoint1: CGPoint(x: 5.03, y: 15.64), controlPoint2: CGPoint(x: 5.48, y: 16.09))
            shift.addLine(to: CGPoint(x: 13.04, y: 16.09))
            shift.addCurve(to: CGPoint(x: 14.03, y: 15.1), controlPoint1: CGPoint(x: 13.59, y: 16.09), controlPoint2: CGPoint(x: 14.03, y: 15.64))
            shift.addLine(to: CGPoint(x: 14.03, y: 10.09))
            shift.addLine(to: CGPoint(x: 18.04, y: 10.09))
            shift.addCurve(to: CGPoint(x: 18.62, y: 8.67), controlPoint1: CGPoint(x: 19.14, y: 10.09), controlPoint2: CGPoint(x: 19.4, y: 9.45))
            shift.addLine(to: CGPoint(x: 10.24, y: 0.29))
            shift.close()
            context.saveGState()
            context.translateBy(x: 31, y: 7.91)
            shift.usesEvenOddFillRule = true
            UIColor.black.setFill()
            shift.fill()
            context.restoreGState()
            
            /// Z
            let z = NSMutableAttributedString(string: "Z")
            z.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: z.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                z.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: z.length))
            }
            z.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: z.length))
            context.saveGState()
            z.draw(at: CGPoint(x: 123.5, y: 3))
            context.restoreGState()
            
            /// Background
            let background4 = UIBezierPath()
            background4.move(to: CGPoint(x: 5.5, y: 30))
            background4.addCurve(to: CGPoint(x: 0, y: 24.5), controlPoint1: CGPoint(x: 2.16, y: 30), controlPoint2: CGPoint(x: 0, y: 27.84))
            background4.addLine(to: CGPoint(x: 0, y: 5.5))
            background4.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background4.addLine(to: CGPoint(x: 56.5, y: 0))
            background4.addCurve(to: CGPoint(x: 62, y: 5.5), controlPoint1: CGPoint(x: 59.84, y: 0), controlPoint2: CGPoint(x: 62, y: 2.16))
            background4.addLine(to: CGPoint(x: 62, y: 24.5))
            background4.addCurve(to: CGPoint(x: 56.5, y: 30), controlPoint1: CGPoint(x: 62, y: 27.84), controlPoint2: CGPoint(x: 59.84, y: 30))
            background4.addLine(to: CGPoint(x: 5.5, y: 30))
            background4.close()
            context.saveGState()
            context.translateBy(x: 165, y: 0)
            background4.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background4.cgPath)
            context.addRect(background4.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -63, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 63, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background4.fill()
            context.restoreGState()
            background4.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background4.fill()
            context.restoreGState()
            
            /// X
            let x = NSMutableAttributedString(string: "X")
            x.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: x.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                x.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: x.length))
            }
            x.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: x.length))
            context.saveGState()
            x.draw(at: CGPoint(x: 189, y: 3))
            context.restoreGState()
            
            /// Background
            let background5 = UIBezierPath()
            background5.move(to: CGPoint(x: 5.5, y: 30))
            background5.addCurve(to: CGPoint(x: 0, y: 24.5), controlPoint1: CGPoint(x: 2.16, y: 30), controlPoint2: CGPoint(x: 0, y: 27.84))
            background5.addLine(to: CGPoint(x: 0, y: 5.5))
            background5.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background5.addLine(to: CGPoint(x: 54.5, y: 0))
            background5.addCurve(to: CGPoint(x: 60, y: 5.5), controlPoint1: CGPoint(x: 57.84, y: 0), controlPoint2: CGPoint(x: 60, y: 2.16))
            background5.addLine(to: CGPoint(x: 60, y: 24.5))
            background5.addCurve(to: CGPoint(x: 54.5, y: 30), controlPoint1: CGPoint(x: 60, y: 27.84), controlPoint2: CGPoint(x: 57.84, y: 30))
            background5.addLine(to: CGPoint(x: 5.5, y: 30))
            background5.close()
            context.saveGState()
            context.translateBy(x: 232, y: 0)
            background5.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background5.cgPath)
            context.addRect(background5.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -61, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 61, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background5.fill()
            context.restoreGState()
            background5.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background5.fill()
            context.restoreGState()
            
            /// C
            let c = NSMutableAttributedString(string: "C")
            c.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: c.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                c.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: c.length))
            }
            c.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: c.length))
            context.saveGState()
            c.draw(at: CGPoint(x: 254.5, y: 3))
            context.restoreGState()
            
            /// Background
            let background6 = UIBezierPath()
            background6.move(to: CGPoint(x: 5.5, y: 30))
            background6.addCurve(to: CGPoint(x: 0, y: 24.5), controlPoint1: CGPoint(x: 2.16, y: 30), controlPoint2: CGPoint(x: 0, y: 27.84))
            background6.addLine(to: CGPoint(x: 0, y: 5.5))
            background6.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background6.addLine(to: CGPoint(x: 56.5, y: 0))
            background6.addCurve(to: CGPoint(x: 62, y: 5.5), controlPoint1: CGPoint(x: 59.84, y: 0), controlPoint2: CGPoint(x: 62, y: 2.16))
            background6.addLine(to: CGPoint(x: 62, y: 24.5))
            background6.addCurve(to: CGPoint(x: 56.5, y: 30), controlPoint1: CGPoint(x: 62, y: 27.84), controlPoint2: CGPoint(x: 59.84, y: 30))
            background6.addLine(to: CGPoint(x: 5.5, y: 30))
            background6.close()
            context.saveGState()
            context.translateBy(x: 297, y: 0)
            background6.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background6.cgPath)
            context.addRect(background6.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -63, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 63, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background6.fill()
            context.restoreGState()
            background6.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background6.fill()
            context.restoreGState()
            
            /// V
            let v = NSMutableAttributedString(string: "V")
            v.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: v.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                v.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: v.length))
            }
            v.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: v.length))
            context.saveGState()
            v.draw(at: CGPoint(x: 321, y: 3))
            context.restoreGState()
            
            /// Background
            let background7 = UIBezierPath()
            background7.move(to: CGPoint(x: 5.5, y: 30))
            background7.addCurve(to: CGPoint(x: 0, y: 24.5), controlPoint1: CGPoint(x: 2.16, y: 30), controlPoint2: CGPoint(x: 0, y: 27.84))
            background7.addLine(to: CGPoint(x: 0, y: 5.5))
            background7.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background7.addLine(to: CGPoint(x: 55.5, y: 0))
            background7.addCurve(to: CGPoint(x: 61, y: 5.5), controlPoint1: CGPoint(x: 58.84, y: 0), controlPoint2: CGPoint(x: 61, y: 2.16))
            background7.addLine(to: CGPoint(x: 61, y: 24.5))
            background7.addCurve(to: CGPoint(x: 55.5, y: 30), controlPoint1: CGPoint(x: 61, y: 27.84), controlPoint2: CGPoint(x: 58.84, y: 30))
            background7.addLine(to: CGPoint(x: 5.5, y: 30))
            background7.close()
            context.saveGState()
            context.translateBy(x: 363, y: 0)
            background7.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background7.cgPath)
            context.addRect(background7.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -62, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 62, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background7.fill()
            context.restoreGState()
            background7.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background7.fill()
            context.restoreGState()
            
            /// B
            let b = NSMutableAttributedString(string: "B")
            b.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: b.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                b.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: b.length))
            }
            b.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: b.length))
            context.saveGState()
            b.draw(at: CGPoint(x: 387.5, y: 3))
            context.restoreGState()
            
            /// Background
            let background8 = UIBezierPath()
            background8.move(to: CGPoint(x: 5.5, y: 30))
            background8.addCurve(to: CGPoint(x: 0, y: 24.5), controlPoint1: CGPoint(x: 2.16, y: 30), controlPoint2: CGPoint(x: 0, y: 27.84))
            background8.addLine(to: CGPoint(x: 0, y: 5.5))
            background8.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background8.addLine(to: CGPoint(x: 55.5, y: 0))
            background8.addCurve(to: CGPoint(x: 61, y: 5.5), controlPoint1: CGPoint(x: 58.84, y: 0), controlPoint2: CGPoint(x: 61, y: 2.16))
            background8.addLine(to: CGPoint(x: 61, y: 24.5))
            background8.addCurve(to: CGPoint(x: 55.5, y: 30), controlPoint1: CGPoint(x: 61, y: 27.84), controlPoint2: CGPoint(x: 58.84, y: 30))
            background8.addLine(to: CGPoint(x: 5.5, y: 30))
            background8.close()
            context.saveGState()
            context.translateBy(x: 430, y: 0)
            background8.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background8.cgPath)
            context.addRect(background8.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -62, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 62, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background8.fill()
            context.restoreGState()
            background8.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background8.fill()
            context.restoreGState()
            
            /// N
            let n = NSMutableAttributedString(string: "N")
            n.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: n.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                n.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: n.length))
            }
            n.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: n.length))
            context.saveGState()
            n.draw(at: CGPoint(x: 452.5, y: 3))
            context.restoreGState()
            
            /// Background
            let background9 = UIBezierPath()
            background9.move(to: CGPoint(x: 5.5, y: 30))
            background9.addCurve(to: CGPoint(x: 0, y: 24.5), controlPoint1: CGPoint(x: 2.16, y: 30), controlPoint2: CGPoint(x: 0, y: 27.84))
            background9.addLine(to: CGPoint(x: 0, y: 5.5))
            background9.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background9.addLine(to: CGPoint(x: 54.5, y: 0))
            background9.addCurve(to: CGPoint(x: 60, y: 5.5), controlPoint1: CGPoint(x: 57.84, y: 0), controlPoint2: CGPoint(x: 60, y: 2.16))
            background9.addLine(to: CGPoint(x: 60, y: 24.5))
            background9.addCurve(to: CGPoint(x: 54.5, y: 30), controlPoint1: CGPoint(x: 60, y: 27.84), controlPoint2: CGPoint(x: 57.84, y: 30))
            background9.addLine(to: CGPoint(x: 5.5, y: 30))
            background9.close()
            context.saveGState()
            context.translateBy(x: 496, y: 0)
            background9.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background9.cgPath)
            context.addRect(background9.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -61, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 61, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background9.fill()
            context.restoreGState()
            background9.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background9.fill()
            context.restoreGState()
            
            /// Background
            let background10 = UIBezierPath()
            background10.move(to: CGPoint(x: 2.41, y: 30))
            background10.addCurve(to: CGPoint(x: 0, y: 25), controlPoint1: CGPoint(x: 0.89, y: 28.98), controlPoint2: CGPoint(x: 0, y: 27.23))
            background10.addLine(to: CGPoint(x: 0, y: 6))
            background10.addCurve(to: CGPoint(x: 6, y: 0), controlPoint1: CGPoint(x: 0, y: 2.36), controlPoint2: CGPoint(x: 2.36, y: 0))
            background10.addLine(to: CGPoint(x: 75, y: 0))
            background10.addCurve(to: CGPoint(x: 80, y: 2.41), controlPoint1: CGPoint(x: 77.23, y: 0), controlPoint2: CGPoint(x: 78.98, y: 0.89))
            background10.addLine(to: CGPoint(x: 80, y: 28.59))
            background10.addCurve(to: CGPoint(x: 78.59, y: 30), controlPoint1: CGPoint(x: 79.62, y: 29.15), controlPoint2: CGPoint(x: 79.15, y: 29.62))
            background10.addLine(to: CGPoint(x: 2.41, y: 30))
            background10.close()
            context.saveGState()
            context.translateBy(x: 575, y: 0)
            background10.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background10.cgPath)
            context.addRect(background10.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -81, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 81, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background10.fill()
            context.restoreGState()
            background10.usesEvenOddFillRule = true
            UIColor(hue: 0.593, saturation: 0.095, brightness: 0.741, alpha: 0.5).setFill()
            background10.fill()
            context.saveGState()
            context.setBlendMode(.softLight)
            context.beginTransparencyLayer(in: background10.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 0, alpha: 0.5).setFill()
                background10.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.saveGState()
            context.setBlendMode(.softLight)
            context.beginTransparencyLayer(in: background10.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 1, alpha: 0.1).setFill()
                background10.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            /// Back
            let back = UIBezierPath()
            back.move(to: CGPoint(x: 0.44, y: 9.56))
            back.addCurve(to: CGPoint(x: 0.44, y: 7.44), controlPoint1: CGPoint(x: -0.15, y: 8.97), controlPoint2: CGPoint(x: -0.14, y: 8.02))
            back.addLine(to: CGPoint(x: 7.17, y: 0.71))
            back.addCurve(to: CGPoint(x: 8.88, y: 0), controlPoint1: CGPoint(x: 7.56, y: 0.32), controlPoint2: CGPoint(x: 8.33, y: 0))
            back.addLine(to: CGPoint(x: 19.38, y: 0))
            back.addCurve(to: CGPoint(x: 22.88, y: 3.5), controlPoint1: CGPoint(x: 21.31, y: 0), controlPoint2: CGPoint(x: 22.88, y: 1.57))
            back.addLine(to: CGPoint(x: 22.88, y: 13.5))
            back.addCurve(to: CGPoint(x: 19.38, y: 17), controlPoint1: CGPoint(x: 22.88, y: 15.43), controlPoint2: CGPoint(x: 21.3, y: 17))
            back.addLine(to: CGPoint(x: 8.88, y: 17))
            back.addCurve(to: CGPoint(x: 7.17, y: 16.29), controlPoint1: CGPoint(x: 8.33, y: 17), controlPoint2: CGPoint(x: 7.55, y: 16.68))
            back.addLine(to: CGPoint(x: 0.44, y: 9.56))
            back.close()
            back.move(to: CGPoint(x: 15.02, y: 8.48))
            back.addLine(to: CGPoint(x: 17.84, y: 5.65))
            back.addCurve(to: CGPoint(x: 17.85, y: 4.59), controlPoint1: CGPoint(x: 18.14, y: 5.36), controlPoint2: CGPoint(x: 18.14, y: 4.88))
            back.addCurve(to: CGPoint(x: 16.78, y: 4.59), controlPoint1: CGPoint(x: 17.55, y: 4.29), controlPoint2: CGPoint(x: 17.08, y: 4.3))
            back.addLine(to: CGPoint(x: 13.96, y: 7.42))
            back.addLine(to: CGPoint(x: 11.13, y: 4.59))
            back.addCurve(to: CGPoint(x: 10.07, y: 4.59), controlPoint1: CGPoint(x: 10.84, y: 4.3), controlPoint2: CGPoint(x: 10.36, y: 4.3))
            back.addCurve(to: CGPoint(x: 10.07, y: 5.65), controlPoint1: CGPoint(x: 9.77, y: 4.88), controlPoint2: CGPoint(x: 9.78, y: 5.36))
            back.addLine(to: CGPoint(x: 12.9, y: 8.48))
            back.addLine(to: CGPoint(x: 10.07, y: 11.3))
            back.addCurve(to: CGPoint(x: 10.07, y: 12.37), controlPoint1: CGPoint(x: 9.78, y: 11.6), controlPoint2: CGPoint(x: 9.78, y: 12.07))
            back.addCurve(to: CGPoint(x: 11.13, y: 12.36), controlPoint1: CGPoint(x: 10.36, y: 12.66), controlPoint2: CGPoint(x: 10.84, y: 12.66))
            back.addLine(to: CGPoint(x: 13.96, y: 9.54))
            back.addLine(to: CGPoint(x: 16.78, y: 12.36))
            back.addCurve(to: CGPoint(x: 17.85, y: 12.37), controlPoint1: CGPoint(x: 17.08, y: 12.66), controlPoint2: CGPoint(x: 17.56, y: 12.66))
            back.addCurve(to: CGPoint(x: 17.84, y: 11.3), controlPoint1: CGPoint(x: 18.14, y: 12.07), controlPoint2: CGPoint(x: 18.14, y: 11.6))
            back.addLine(to: CGPoint(x: 15.02, y: 8.48))
            back.close()
            back.move(to: CGPoint(x: 2.09, y: 9.21))
            back.addCurve(to: CGPoint(x: 2.09, y: 7.79), controlPoint1: CGPoint(x: 1.69, y: 8.82), controlPoint2: CGPoint(x: 1.7, y: 8.18))
            back.addLine(to: CGPoint(x: 8.02, y: 1.86))
            back.addCurve(to: CGPoint(x: 8.87, y: 1.5), controlPoint1: CGPoint(x: 8.22, y: 1.66), controlPoint2: CGPoint(x: 8.6, y: 1.5))
            back.addLine(to: CGPoint(x: 19.37, y: 1.5))
            back.addCurve(to: CGPoint(x: 21.38, y: 3.51), controlPoint1: CGPoint(x: 20.48, y: 1.5), controlPoint2: CGPoint(x: 21.38, y: 2.4))
            back.addLine(to: CGPoint(x: 21.38, y: 13.49))
            back.addCurve(to: CGPoint(x: 19.37, y: 15.5), controlPoint1: CGPoint(x: 21.38, y: 14.6), controlPoint2: CGPoint(x: 20.48, y: 15.5))
            back.addLine(to: CGPoint(x: 8.87, y: 15.5))
            back.addCurve(to: CGPoint(x: 8.02, y: 15.14), controlPoint1: CGPoint(x: 8.6, y: 15.5), controlPoint2: CGPoint(x: 8.22, y: 15.34))
            back.addLine(to: CGPoint(x: 2.09, y: 9.21))
            back.close()
            context.saveGState()
            context.translateBy(x: 603.5, y: 6.5)
            back.usesEvenOddFillRule = true
            UIColor.black.setFill()
            back.fill()
            context.restoreGState()
            
            /// M
            let m = NSMutableAttributedString(string: "M")
            m.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: m.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                m.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: m.length))
            }
            m.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: m.length))
            context.saveGState()
            m.draw(at: CGPoint(x: 518, y: 3))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Second Row
        do {
            context.saveGState()
            context.translateBy(x: 112, y: 43)
            
            /// Background
            let background11 = UIBezierPath()
            background11.move(to: CGPoint(x: 5.5, y: 30))
            background11.addCurve(to: CGPoint(x: 0, y: 24.5), controlPoint1: CGPoint(x: 2.16, y: 30), controlPoint2: CGPoint(x: 0, y: 27.84))
            background11.addLine(to: CGPoint(x: 0, y: 5.5))
            background11.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background11.addLine(to: CGPoint(x: 54.5, y: 0))
            background11.addCurve(to: CGPoint(x: 60, y: 5.5), controlPoint1: CGPoint(x: 57.84, y: 0), controlPoint2: CGPoint(x: 60, y: 2.16))
            background11.addLine(to: CGPoint(x: 60, y: 24.5))
            background11.addCurve(to: CGPoint(x: 54.5, y: 30), controlPoint1: CGPoint(x: 60, y: 27.84), controlPoint2: CGPoint(x: 57.84, y: 30))
            background11.addLine(to: CGPoint(x: 5.5, y: 30))
            background11.close()
            context.saveGState()
            background11.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background11.cgPath)
            context.addRect(background11.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -61, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 61, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background11.fill()
            context.restoreGState()
            background11.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background11.fill()
            context.restoreGState()
            
            /// A
            let a = NSMutableAttributedString(string: "A")
            a.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: a.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                a.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: a.length))
            }
            a.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: a.length))
            context.saveGState()
            a.draw(at: CGPoint(x: 23, y: 3))
            context.restoreGState()
            
            /// Background
            let background12 = UIBezierPath()
            background12.move(to: CGPoint(x: 5.5, y: 30))
            background12.addCurve(to: CGPoint(x: 0, y: 24.5), controlPoint1: CGPoint(x: 2.16, y: 30), controlPoint2: CGPoint(x: 0, y: 27.84))
            background12.addLine(to: CGPoint(x: 0, y: 5.5))
            background12.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background12.addLine(to: CGPoint(x: 56.5, y: 0))
            background12.addCurve(to: CGPoint(x: 62, y: 5.5), controlPoint1: CGPoint(x: 59.84, y: 0), controlPoint2: CGPoint(x: 62, y: 2.16))
            background12.addLine(to: CGPoint(x: 62, y: 24.5))
            background12.addCurve(to: CGPoint(x: 56.5, y: 30), controlPoint1: CGPoint(x: 62, y: 27.84), controlPoint2: CGPoint(x: 59.84, y: 30))
            background12.addLine(to: CGPoint(x: 5.5, y: 30))
            background12.close()
            context.saveGState()
            context.translateBy(x: 65, y: 0)
            background12.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background12.cgPath)
            context.addRect(background12.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -63, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 63, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background12.fill()
            context.restoreGState()
            background12.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background12.fill()
            context.restoreGState()
            
            /// S
            let s = NSMutableAttributedString(string: "S")
            s.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: s.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                s.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: s.length))
            }
            s.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: s.length))
            context.saveGState()
            s.draw(at: CGPoint(x: 89.5, y: 3))
            context.restoreGState()
            
            /// Background
            let background13 = UIBezierPath()
            background13.move(to: CGPoint(x: 5.5, y: 30))
            background13.addCurve(to: CGPoint(x: 0, y: 24.5), controlPoint1: CGPoint(x: 2.16, y: 30), controlPoint2: CGPoint(x: 0, y: 27.84))
            background13.addLine(to: CGPoint(x: 0, y: 5.5))
            background13.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background13.addLine(to: CGPoint(x: 54.5, y: 0))
            background13.addCurve(to: CGPoint(x: 60, y: 5.5), controlPoint1: CGPoint(x: 57.84, y: 0), controlPoint2: CGPoint(x: 60, y: 2.16))
            background13.addLine(to: CGPoint(x: 60, y: 24.5))
            background13.addCurve(to: CGPoint(x: 54.5, y: 30), controlPoint1: CGPoint(x: 60, y: 27.84), controlPoint2: CGPoint(x: 57.84, y: 30))
            background13.addLine(to: CGPoint(x: 5.5, y: 30))
            background13.close()
            context.saveGState()
            context.translateBy(x: 132, y: 0)
            background13.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background13.cgPath)
            context.addRect(background13.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -61, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 61, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background13.fill()
            context.restoreGState()
            background13.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background13.fill()
            context.restoreGState()
            
            /// D
            let d = NSMutableAttributedString(string: "D")
            d.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: d.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                d.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: d.length))
            }
            d.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: d.length))
            context.saveGState()
            d.draw(at: CGPoint(x: 154.5, y: 3))
            context.restoreGState()
            
            /// Background
            let background14 = UIBezierPath()
            background14.move(to: CGPoint(x: 5.5, y: 30))
            background14.addCurve(to: CGPoint(x: 0, y: 24.5), controlPoint1: CGPoint(x: 2.16, y: 30), controlPoint2: CGPoint(x: 0, y: 27.84))
            background14.addLine(to: CGPoint(x: 0, y: 5.5))
            background14.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background14.addLine(to: CGPoint(x: 56.5, y: 0))
            background14.addCurve(to: CGPoint(x: 62, y: 5.5), controlPoint1: CGPoint(x: 59.84, y: 0), controlPoint2: CGPoint(x: 62, y: 2.16))
            background14.addLine(to: CGPoint(x: 62, y: 24.5))
            background14.addCurve(to: CGPoint(x: 56.5, y: 30), controlPoint1: CGPoint(x: 62, y: 27.84), controlPoint2: CGPoint(x: 59.84, y: 30))
            background14.addLine(to: CGPoint(x: 5.5, y: 30))
            background14.close()
            context.saveGState()
            context.translateBy(x: 197, y: 0)
            background14.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background14.cgPath)
            context.addRect(background14.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -63, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 63, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background14.fill()
            context.restoreGState()
            background14.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background14.fill()
            context.restoreGState()
            
            /// F
            let f = NSMutableAttributedString(string: "F")
            f.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: f.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                f.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: f.length))
            }
            f.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: f.length))
            context.saveGState()
            f.draw(at: CGPoint(x: 223, y: 3))
            context.restoreGState()
            
            /// Background
            let background15 = UIBezierPath()
            background15.move(to: CGPoint(x: 5.5, y: 30))
            background15.addCurve(to: CGPoint(x: 0, y: 24.5), controlPoint1: CGPoint(x: 2.16, y: 30), controlPoint2: CGPoint(x: 0, y: 27.84))
            background15.addLine(to: CGPoint(x: 0, y: 5.5))
            background15.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background15.addLine(to: CGPoint(x: 55.5, y: 0))
            background15.addCurve(to: CGPoint(x: 61, y: 5.5), controlPoint1: CGPoint(x: 58.84, y: 0), controlPoint2: CGPoint(x: 61, y: 2.16))
            background15.addLine(to: CGPoint(x: 61, y: 24.5))
            background15.addCurve(to: CGPoint(x: 55.5, y: 30), controlPoint1: CGPoint(x: 61, y: 27.84), controlPoint2: CGPoint(x: 58.84, y: 30))
            background15.addLine(to: CGPoint(x: 5.5, y: 30))
            background15.close()
            context.saveGState()
            context.translateBy(x: 263, y: 0)
            background15.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background15.cgPath)
            context.addRect(background15.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -62, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 62, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background15.fill()
            context.restoreGState()
            background15.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background15.fill()
            context.restoreGState()
            
            /// G
            let g = NSMutableAttributedString(string: "G")
            g.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: g.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                g.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: g.length))
            }
            g.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: g.length))
            context.saveGState()
            g.draw(at: CGPoint(x: 286.5, y: 3))
            context.restoreGState()
            
            /// Background
            let background16 = UIBezierPath()
            background16.move(to: CGPoint(x: 5.5, y: 30))
            background16.addCurve(to: CGPoint(x: 0, y: 24.5), controlPoint1: CGPoint(x: 2.16, y: 30), controlPoint2: CGPoint(x: 0, y: 27.84))
            background16.addLine(to: CGPoint(x: 0, y: 5.5))
            background16.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background16.addLine(to: CGPoint(x: 55.5, y: 0))
            background16.addCurve(to: CGPoint(x: 61, y: 5.5), controlPoint1: CGPoint(x: 58.84, y: 0), controlPoint2: CGPoint(x: 61, y: 2.16))
            background16.addLine(to: CGPoint(x: 61, y: 24.5))
            background16.addCurve(to: CGPoint(x: 55.5, y: 30), controlPoint1: CGPoint(x: 61, y: 27.84), controlPoint2: CGPoint(x: 58.84, y: 30))
            background16.addLine(to: CGPoint(x: 5.5, y: 30))
            background16.close()
            context.saveGState()
            context.translateBy(x: 330, y: 0)
            background16.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background16.cgPath)
            context.addRect(background16.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -62, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 62, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background16.fill()
            context.restoreGState()
            background16.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background16.fill()
            context.restoreGState()
            
            /// H
            let h = NSMutableAttributedString(string: "H")
            h.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: h.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                h.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: h.length))
            }
            h.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: h.length))
            context.saveGState()
            h.draw(at: CGPoint(x: 352.5, y: 3))
            context.restoreGState()
            
            /// Background
            let background17 = UIBezierPath()
            background17.move(to: CGPoint(x: 5.5, y: 30))
            background17.addCurve(to: CGPoint(x: 0, y: 24.5), controlPoint1: CGPoint(x: 2.16, y: 30), controlPoint2: CGPoint(x: 0, y: 27.84))
            background17.addLine(to: CGPoint(x: 0, y: 5.5))
            background17.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background17.addLine(to: CGPoint(x: 54.5, y: 0))
            background17.addCurve(to: CGPoint(x: 60, y: 5.5), controlPoint1: CGPoint(x: 57.84, y: 0), controlPoint2: CGPoint(x: 60, y: 2.16))
            background17.addLine(to: CGPoint(x: 60, y: 24.5))
            background17.addCurve(to: CGPoint(x: 54.5, y: 30), controlPoint1: CGPoint(x: 60, y: 27.84), controlPoint2: CGPoint(x: 57.84, y: 30))
            background17.addLine(to: CGPoint(x: 5.5, y: 30))
            background17.close()
            context.saveGState()
            context.translateBy(x: 396, y: 0)
            background17.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background17.cgPath)
            context.addRect(background17.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -61, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 61, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background17.fill()
            context.restoreGState()
            background17.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background17.fill()
            context.restoreGState()
            
            /// J
            let j = NSMutableAttributedString(string: "J")
            j.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: j.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                j.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: j.length))
            }
            j.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: j.length))
            context.saveGState()
            j.draw(at: CGPoint(x: 420.5, y: 3))
            context.restoreGState()
            
            /// Background
            let background18 = UIBezierPath()
            background18.move(to: CGPoint(x: 5.5, y: 30))
            background18.addCurve(to: CGPoint(x: 0, y: 24.5), controlPoint1: CGPoint(x: 2.16, y: 30), controlPoint2: CGPoint(x: 0, y: 27.84))
            background18.addLine(to: CGPoint(x: 0, y: 5.5))
            background18.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background18.addLine(to: CGPoint(x: 54.5, y: 0))
            background18.addCurve(to: CGPoint(x: 60, y: 5.5), controlPoint1: CGPoint(x: 57.84, y: 0), controlPoint2: CGPoint(x: 60, y: 2.16))
            background18.addLine(to: CGPoint(x: 60, y: 24.5))
            background18.addCurve(to: CGPoint(x: 54.5, y: 30), controlPoint1: CGPoint(x: 60, y: 27.84), controlPoint2: CGPoint(x: 57.84, y: 30))
            background18.addLine(to: CGPoint(x: 5.5, y: 30))
            background18.close()
            context.saveGState()
            context.translateBy(x: 463, y: 0)
            background18.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background18.cgPath)
            context.addRect(background18.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -61, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 61, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background18.fill()
            context.restoreGState()
            background18.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background18.fill()
            context.restoreGState()
            
            /// K
            let k = NSMutableAttributedString(string: "K")
            k.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: k.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                k.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: k.length))
            }
            k.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: k.length))
            context.saveGState()
            k.draw(at: CGPoint(x: 486.5, y: 3))
            context.restoreGState()
            
            /// Background
            let background19 = UIBezierPath()
            background19.move(to: CGPoint(x: 5.5, y: 30))
            background19.addCurve(to: CGPoint(x: 0, y: 24.5), controlPoint1: CGPoint(x: 2.16, y: 30), controlPoint2: CGPoint(x: 0, y: 27.84))
            background19.addLine(to: CGPoint(x: 0, y: 5.5))
            background19.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background19.addLine(to: CGPoint(x: 55.5, y: 0))
            background19.addCurve(to: CGPoint(x: 61, y: 5.5), controlPoint1: CGPoint(x: 58.84, y: 0), controlPoint2: CGPoint(x: 61, y: 2.16))
            background19.addLine(to: CGPoint(x: 61, y: 24.5))
            background19.addCurve(to: CGPoint(x: 55.5, y: 30), controlPoint1: CGPoint(x: 61, y: 27.84), controlPoint2: CGPoint(x: 58.84, y: 30))
            background19.addLine(to: CGPoint(x: 5.5, y: 30))
            background19.close()
            context.saveGState()
            context.translateBy(x: 528, y: 0)
            background19.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background19.cgPath)
            context.addRect(background19.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -62, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 62, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background19.fill()
            context.restoreGState()
            background19.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background19.fill()
            context.restoreGState()
            
            /// L
            let l = NSMutableAttributedString(string: "L")
            l.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: l.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                l.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: l.length))
            }
            l.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: l.length))
            context.saveGState()
            l.draw(at: CGPoint(x: 552, y: 3))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// First Row
        do {
            context.saveGState()
            context.translateBy(x: 78, y: 6)
            
            /// Background
            let background20 = UIBezierPath()
            background20.move(to: CGPoint(x: 5.5, y: 30))
            background20.addCurve(to: CGPoint(x: 0, y: 24.5), controlPoint1: CGPoint(x: 2.16, y: 30), controlPoint2: CGPoint(x: 0, y: 27.84))
            background20.addLine(to: CGPoint(x: 0, y: 5.5))
            background20.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background20.addLine(to: CGPoint(x: 54.5, y: 0))
            background20.addCurve(to: CGPoint(x: 60, y: 5.5), controlPoint1: CGPoint(x: 57.84, y: 0), controlPoint2: CGPoint(x: 60, y: 2.16))
            background20.addLine(to: CGPoint(x: 60, y: 24.5))
            background20.addCurve(to: CGPoint(x: 54.5, y: 30), controlPoint1: CGPoint(x: 60, y: 27.84), controlPoint2: CGPoint(x: 57.84, y: 30))
            background20.addLine(to: CGPoint(x: 5.5, y: 30))
            background20.close()
            context.saveGState()
            background20.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background20.cgPath)
            context.addRect(background20.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -61, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 61, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background20.fill()
            context.restoreGState()
            background20.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background20.fill()
            context.restoreGState()
            
            /// Q
            let q = NSMutableAttributedString(string: "Q")
            q.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: q.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                q.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: q.length))
            }
            q.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: q.length))
            context.saveGState()
            q.draw(at: CGPoint(x: 22, y: 3))
            context.restoreGState()
            
            /// Background
            let background21 = UIBezierPath()
            background21.move(to: CGPoint(x: 5.5, y: 30))
            background21.addCurve(to: CGPoint(x: 0, y: 24.5), controlPoint1: CGPoint(x: 2.16, y: 30), controlPoint2: CGPoint(x: 0, y: 27.84))
            background21.addLine(to: CGPoint(x: 0, y: 5.5))
            background21.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background21.addLine(to: CGPoint(x: 56.5, y: 0))
            background21.addCurve(to: CGPoint(x: 62, y: 5.5), controlPoint1: CGPoint(x: 59.84, y: 0), controlPoint2: CGPoint(x: 62, y: 2.16))
            background21.addLine(to: CGPoint(x: 62, y: 24.5))
            background21.addCurve(to: CGPoint(x: 56.5, y: 30), controlPoint1: CGPoint(x: 62, y: 27.84), controlPoint2: CGPoint(x: 59.84, y: 30))
            background21.addLine(to: CGPoint(x: 5.5, y: 30))
            background21.close()
            context.saveGState()
            context.translateBy(x: 65, y: 0)
            background21.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background21.cgPath)
            context.addRect(background21.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -63, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 63, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background21.fill()
            context.restoreGState()
            background21.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background21.fill()
            context.restoreGState()
            
            /// W
            let w = NSMutableAttributedString(string: "W")
            w.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: w.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                w.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: w.length))
            }
            w.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: w.length))
            context.saveGState()
            w.draw(at: CGPoint(x: 86, y: 3))
            context.restoreGState()
            
            /// Background
            let background22 = UIBezierPath()
            background22.move(to: CGPoint(x: 5.5, y: 30))
            background22.addCurve(to: CGPoint(x: 0, y: 24.5), controlPoint1: CGPoint(x: 2.16, y: 30), controlPoint2: CGPoint(x: 0, y: 27.84))
            background22.addLine(to: CGPoint(x: 0, y: 5.5))
            background22.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background22.addLine(to: CGPoint(x: 54.5, y: 0))
            background22.addCurve(to: CGPoint(x: 60, y: 5.5), controlPoint1: CGPoint(x: 57.84, y: 0), controlPoint2: CGPoint(x: 60, y: 2.16))
            background22.addLine(to: CGPoint(x: 60, y: 24.5))
            background22.addCurve(to: CGPoint(x: 54.5, y: 30), controlPoint1: CGPoint(x: 60, y: 27.84), controlPoint2: CGPoint(x: 57.84, y: 30))
            background22.addLine(to: CGPoint(x: 5.5, y: 30))
            background22.close()
            context.saveGState()
            context.translateBy(x: 132, y: 0)
            background22.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background22.cgPath)
            context.addRect(background22.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -61, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 61, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background22.fill()
            context.restoreGState()
            background22.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background22.fill()
            context.restoreGState()
            
            /// E
            let e = NSMutableAttributedString(string: "E")
            e.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: e.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                e.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: e.length))
            }
            e.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: e.length))
            context.saveGState()
            e.draw(at: CGPoint(x: 157, y: 3))
            context.restoreGState()
            
            /// Background
            let background23 = UIBezierPath()
            background23.move(to: CGPoint(x: 5.5, y: 30))
            background23.addCurve(to: CGPoint(x: 0, y: 24.5), controlPoint1: CGPoint(x: 2.16, y: 30), controlPoint2: CGPoint(x: 0, y: 27.84))
            background23.addLine(to: CGPoint(x: 0, y: 5.5))
            background23.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background23.addLine(to: CGPoint(x: 54.5, y: 0))
            background23.addCurve(to: CGPoint(x: 60, y: 5.5), controlPoint1: CGPoint(x: 57.84, y: 0), controlPoint2: CGPoint(x: 60, y: 2.16))
            background23.addLine(to: CGPoint(x: 60, y: 24.5))
            background23.addCurve(to: CGPoint(x: 54.5, y: 30), controlPoint1: CGPoint(x: 60, y: 27.84), controlPoint2: CGPoint(x: 57.84, y: 30))
            background23.addLine(to: CGPoint(x: 5.5, y: 30))
            background23.close()
            context.saveGState()
            context.translateBy(x: 199, y: 0)
            background23.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background23.cgPath)
            context.addRect(background23.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -61, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 61, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background23.fill()
            context.restoreGState()
            background23.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background23.fill()
            context.restoreGState()
            
            /// R
            let r = NSMutableAttributedString(string: "R")
            r.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: r.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                r.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: r.length))
            }
            r.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: r.length))
            context.saveGState()
            r.draw(at: CGPoint(x: 222.5, y: 3))
            context.restoreGState()
            
            /// Background
            let background24 = UIBezierPath()
            background24.move(to: CGPoint(x: 5.5, y: 30))
            background24.addCurve(to: CGPoint(x: 0, y: 24.5), controlPoint1: CGPoint(x: 2.16, y: 30), controlPoint2: CGPoint(x: 0, y: 27.84))
            background24.addLine(to: CGPoint(x: 0, y: 5.5))
            background24.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background24.addLine(to: CGPoint(x: 54.5, y: 0))
            background24.addCurve(to: CGPoint(x: 60, y: 5.5), controlPoint1: CGPoint(x: 57.84, y: 0), controlPoint2: CGPoint(x: 60, y: 2.16))
            background24.addLine(to: CGPoint(x: 60, y: 24.5))
            background24.addCurve(to: CGPoint(x: 54.5, y: 30), controlPoint1: CGPoint(x: 60, y: 27.84), controlPoint2: CGPoint(x: 57.84, y: 30))
            background24.addLine(to: CGPoint(x: 5.5, y: 30))
            background24.close()
            context.saveGState()
            context.translateBy(x: 265, y: 0)
            background24.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background24.cgPath)
            context.addRect(background24.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -61, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 61, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background24.fill()
            context.restoreGState()
            background24.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background24.fill()
            context.restoreGState()
            
            /// T
            let t = NSMutableAttributedString(string: "T")
            t.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: t.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                t.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: t.length))
            }
            t.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: t.length))
            context.saveGState()
            t.draw(at: CGPoint(x: 288.5, y: 3))
            context.restoreGState()
            
            /// Background
            let background25 = UIBezierPath()
            background25.move(to: CGPoint(x: 5.5, y: 30))
            background25.addCurve(to: CGPoint(x: 0, y: 24.5), controlPoint1: CGPoint(x: 2.16, y: 30), controlPoint2: CGPoint(x: 0, y: 27.84))
            background25.addLine(to: CGPoint(x: 0, y: 5.5))
            background25.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background25.addLine(to: CGPoint(x: 54.5, y: 0))
            background25.addCurve(to: CGPoint(x: 60, y: 5.5), controlPoint1: CGPoint(x: 57.84, y: 0), controlPoint2: CGPoint(x: 60, y: 2.16))
            background25.addLine(to: CGPoint(x: 60, y: 24.5))
            background25.addCurve(to: CGPoint(x: 54.5, y: 30), controlPoint1: CGPoint(x: 60, y: 27.84), controlPoint2: CGPoint(x: 57.84, y: 30))
            background25.addLine(to: CGPoint(x: 5.5, y: 30))
            background25.close()
            context.saveGState()
            context.translateBy(x: 331, y: 0)
            background25.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background25.cgPath)
            context.addRect(background25.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -61, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 61, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background25.fill()
            context.restoreGState()
            background25.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background25.fill()
            context.restoreGState()
            
            /// Y
            let y = NSMutableAttributedString(string: "Y")
            y.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: y.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                y.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: y.length))
            }
            y.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: y.length))
            context.saveGState()
            y.draw(at: CGPoint(x: 354.5, y: 3))
            context.restoreGState()
            
            /// Background
            let background26 = UIBezierPath()
            background26.move(to: CGPoint(x: 5.5, y: 30))
            background26.addCurve(to: CGPoint(x: 0, y: 24.5), controlPoint1: CGPoint(x: 2.16, y: 30), controlPoint2: CGPoint(x: 0, y: 27.84))
            background26.addLine(to: CGPoint(x: 0, y: 5.5))
            background26.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background26.addLine(to: CGPoint(x: 54.5, y: 0))
            background26.addCurve(to: CGPoint(x: 60, y: 5.5), controlPoint1: CGPoint(x: 57.84, y: 0), controlPoint2: CGPoint(x: 60, y: 2.16))
            background26.addLine(to: CGPoint(x: 60, y: 24.5))
            background26.addCurve(to: CGPoint(x: 54.5, y: 30), controlPoint1: CGPoint(x: 60, y: 27.84), controlPoint2: CGPoint(x: 57.84, y: 30))
            background26.addLine(to: CGPoint(x: 5.5, y: 30))
            background26.close()
            context.saveGState()
            context.translateBy(x: 397, y: 0)
            background26.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background26.cgPath)
            context.addRect(background26.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -61, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 61, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background26.fill()
            context.restoreGState()
            background26.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background26.fill()
            context.restoreGState()
            
            /// U
            let u = NSMutableAttributedString(string: "U")
            u.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: u.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                u.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: u.length))
            }
            u.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: u.length))
            context.saveGState()
            u.draw(at: CGPoint(x: 419.5, y: 3))
            context.restoreGState()
            
            /// Background
            let background27 = UIBezierPath()
            background27.move(to: CGPoint(x: 5.5, y: 30))
            background27.addCurve(to: CGPoint(x: 0, y: 24.5), controlPoint1: CGPoint(x: 2.16, y: 30), controlPoint2: CGPoint(x: 0, y: 27.84))
            background27.addLine(to: CGPoint(x: 0, y: 5.5))
            background27.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background27.addLine(to: CGPoint(x: 54.5, y: 0))
            background27.addCurve(to: CGPoint(x: 60, y: 5.5), controlPoint1: CGPoint(x: 57.84, y: 0), controlPoint2: CGPoint(x: 60, y: 2.16))
            background27.addLine(to: CGPoint(x: 60, y: 24.5))
            background27.addCurve(to: CGPoint(x: 54.5, y: 30), controlPoint1: CGPoint(x: 60, y: 27.84), controlPoint2: CGPoint(x: 57.84, y: 30))
            background27.addLine(to: CGPoint(x: 5.5, y: 30))
            background27.close()
            context.saveGState()
            context.translateBy(x: 463, y: 0)
            background27.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background27.cgPath)
            context.addRect(background27.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -61, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 61, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background27.fill()
            context.restoreGState()
            background27.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background27.fill()
            context.restoreGState()
            
            /// I
            let i = NSMutableAttributedString(string: "I")
            i.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: i.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                i.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: i.length))
            }
            i.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: i.length))
            context.saveGState()
            i.draw(at: CGPoint(x: 490.5, y: 3))
            context.restoreGState()
            
            /// Background
            let background28 = UIBezierPath()
            background28.move(to: CGPoint(x: 5.5, y: 30))
            background28.addCurve(to: CGPoint(x: 0, y: 24.5), controlPoint1: CGPoint(x: 2.16, y: 30), controlPoint2: CGPoint(x: 0, y: 27.84))
            background28.addLine(to: CGPoint(x: 0, y: 5.5))
            background28.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background28.addLine(to: CGPoint(x: 54.5, y: 0))
            background28.addCurve(to: CGPoint(x: 60, y: 5.5), controlPoint1: CGPoint(x: 57.84, y: 0), controlPoint2: CGPoint(x: 60, y: 2.16))
            background28.addLine(to: CGPoint(x: 60, y: 24.5))
            background28.addCurve(to: CGPoint(x: 54.5, y: 30), controlPoint1: CGPoint(x: 60, y: 27.84), controlPoint2: CGPoint(x: 57.84, y: 30))
            background28.addLine(to: CGPoint(x: 5.5, y: 30))
            background28.close()
            context.saveGState()
            context.translateBy(x: 530, y: 0)
            background28.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background28.cgPath)
            context.addRect(background28.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -61, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 61, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background28.fill()
            context.restoreGState()
            background28.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background28.fill()
            context.restoreGState()
            
            /// O
            let o = NSMutableAttributedString(string: "O")
            o.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: o.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                o.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: o.length))
            }
            o.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: o.length))
            context.saveGState()
            o.draw(at: CGPoint(x: 552, y: 3))
            context.restoreGState()
            
            /// Background
            let background29 = UIBezierPath()
            background29.move(to: CGPoint(x: 5.5, y: 30))
            background29.addCurve(to: CGPoint(x: 0, y: 24.5), controlPoint1: CGPoint(x: 2.16, y: 30), controlPoint2: CGPoint(x: 0, y: 27.84))
            background29.addLine(to: CGPoint(x: 0, y: 5.5))
            background29.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.16), controlPoint2: CGPoint(x: 2.16, y: 0))
            background29.addLine(to: CGPoint(x: 54.5, y: 0))
            background29.addCurve(to: CGPoint(x: 60, y: 5.5), controlPoint1: CGPoint(x: 57.84, y: 0), controlPoint2: CGPoint(x: 60, y: 2.16))
            background29.addLine(to: CGPoint(x: 60, y: 24.5))
            background29.addCurve(to: CGPoint(x: 54.5, y: 30), controlPoint1: CGPoint(x: 60, y: 27.84), controlPoint2: CGPoint(x: 57.84, y: 30))
            background29.addLine(to: CGPoint(x: 5.5, y: 30))
            background29.close()
            context.saveGState()
            context.translateBy(x: 596, y: 0)
            background29.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background29.cgPath)
            context.addRect(background29.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -61, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 61, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background29.fill()
            context.restoreGState()
            background29.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background29.fill()
            context.restoreGState()
            
            /// P
            let p = NSMutableAttributedString(string: "P")
            p.addAttribute(.font, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: p.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                p.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: p.length))
            }
            p.addAttribute(.foregroundColor, value: UIColor(white: 0.097, alpha: 1), range: NSRange(location: 0, length: p.length))
            context.saveGState()
            p.draw(at: CGPoint(x: 619.5, y: 3))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawKeyboards_SimpleButtonDefault(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 374, height: 52), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 374, height: 52), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 374, y: resizedFrame.height / 52)
        
        /// Symbols
        do {
            context.saveGState()
            context.translateBy(x: 2.99, y: 5)
            
            /// Background
            let background = UIBezierPath()
            background.move(to: CGPoint(x: 5, y: 0))
            background.addLine(to: CGPoint(x: 82.77, y: 0))
            background.addCurve(to: CGPoint(x: 87.77, y: 5), controlPoint1: CGPoint(x: 85.53, y: 0), controlPoint2: CGPoint(x: 87.77, y: 2.24))
            background.addLine(to: CGPoint(x: 87.77, y: 37))
            background.addCurve(to: CGPoint(x: 82.77, y: 42), controlPoint1: CGPoint(x: 87.77, y: 39.76), controlPoint2: CGPoint(x: 85.53, y: 42))
            background.addLine(to: CGPoint(x: 5, y: 42))
            background.addCurve(to: CGPoint(x: 0, y: 37), controlPoint1: CGPoint(x: 2.24, y: 42), controlPoint2: CGPoint(x: 0, y: 39.76))
            background.addLine(to: CGPoint(x: 0, y: 5))
            background.addCurve(to: CGPoint(x: 5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.24), controlPoint2: CGPoint(x: 2.24, y: 0))
            background.close()
            context.saveGState()
            background.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background.cgPath)
            context.addRect(background.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -88.77, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 88.77, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background.fill()
            context.restoreGState()
            background.usesEvenOddFillRule = true
            UIColor(hue: 0.593, saturation: 0.095, brightness: 0.741, alpha: 0.5).setFill()
            background.fill()
            context.saveGState()
            context.setBlendMode(.softLight)
            context.beginTransparencyLayer(in: background.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 0, alpha: 0.5).setFill()
                background.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.saveGState()
            context.setBlendMode(.softLight)
            context.beginTransparencyLayer(in: background.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 1, alpha: 0.1).setFill()
                background.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            /// 123
            let _123 = NSMutableAttributedString(string: "123")
            _123.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: _123.length))
            _123.addAttribute(.kern, value: -0.32, range: NSRange(location: 0, length: _123.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                _123.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _123.length))
            }
            context.saveGState()
            _123.draw(in: CGRect(x: 29.88, y: 12, width: 27, height: 21))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Space
        do {
            context.saveGState()
            context.translateBy(x: 95.74, y: 5)
            
            /// Background
            let background2 = UIBezierPath()
            background2.move(to: CGPoint(x: 6.41, y: 0))
            background2.addLine(to: CGPoint(x: 177.1, y: 0))
            background2.addCurve(to: CGPoint(x: 180.95, y: 0.67), controlPoint1: CGPoint(x: 179.33, y: 0), controlPoint2: CGPoint(x: 180.14, y: 0.23))
            background2.addCurve(to: CGPoint(x: 182.84, y: 2.56), controlPoint1: CGPoint(x: 181.77, y: 1.1), controlPoint2: CGPoint(x: 182.41, y: 1.74))
            background2.addCurve(to: CGPoint(x: 183.51, y: 6.41), controlPoint1: CGPoint(x: 183.28, y: 3.37), controlPoint2: CGPoint(x: 183.51, y: 4.18))
            background2.addLine(to: CGPoint(x: 183.51, y: 35.59))
            background2.addCurve(to: CGPoint(x: 182.84, y: 39.44), controlPoint1: CGPoint(x: 183.51, y: 37.82), controlPoint2: CGPoint(x: 183.28, y: 38.63))
            background2.addCurve(to: CGPoint(x: 180.95, y: 41.33), controlPoint1: CGPoint(x: 182.41, y: 40.26), controlPoint2: CGPoint(x: 181.77, y: 40.9))
            background2.addCurve(to: CGPoint(x: 177.1, y: 42), controlPoint1: CGPoint(x: 180.14, y: 41.77), controlPoint2: CGPoint(x: 179.33, y: 42))
            background2.addLine(to: CGPoint(x: 6.41, y: 42))
            background2.addCurve(to: CGPoint(x: 2.56, y: 41.33), controlPoint1: CGPoint(x: 4.18, y: 42), controlPoint2: CGPoint(x: 3.37, y: 41.77))
            background2.addCurve(to: CGPoint(x: 0.67, y: 39.44), controlPoint1: CGPoint(x: 1.74, y: 40.9), controlPoint2: CGPoint(x: 1.1, y: 40.26))
            background2.addCurve(to: CGPoint(x: 0, y: 35.59), controlPoint1: CGPoint(x: 0.23, y: 38.63), controlPoint2: CGPoint(x: 0, y: 37.82))
            background2.addLine(to: CGPoint(x: 0, y: 6.41))
            background2.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
            background2.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
            background2.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
            background2.close()
            context.saveGState()
            background2.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background2.cgPath)
            context.addRect(background2.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -184.51, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 184.51, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background2.fill()
            context.restoreGState()
            background2.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background2.fill()
            context.restoreGState()
            
            /// Space
            let space = NSMutableAttributedString(string: "space")
            space.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: space.length))
            space.addAttribute(.kern, value: -0.32, range: NSRange(location: 0, length: space.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                space.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: space.length))
            }
            context.saveGState()
            space.draw(in: CGRect(x: 69.81, y: 11, width: 43.88, height: 21))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Button
        do {
            context.saveGState()
            context.translateBy(x: 284, y: 5)
            
            /// Background
            let background3 = UIBezierPath()
            background3.move(to: CGPoint(x: 6.41, y: 0))
            background3.addLine(to: CGPoint(x: 80.59, y: 0))
            background3.addCurve(to: CGPoint(x: 84.44, y: 0.67), controlPoint1: CGPoint(x: 82.82, y: 0), controlPoint2: CGPoint(x: 83.63, y: 0.23))
            background3.addCurve(to: CGPoint(x: 86.33, y: 2.56), controlPoint1: CGPoint(x: 85.26, y: 1.1), controlPoint2: CGPoint(x: 85.9, y: 1.74))
            background3.addCurve(to: CGPoint(x: 87, y: 6.41), controlPoint1: CGPoint(x: 86.77, y: 3.37), controlPoint2: CGPoint(x: 87, y: 4.18))
            background3.addLine(to: CGPoint(x: 87, y: 35.59))
            background3.addCurve(to: CGPoint(x: 86.33, y: 39.44), controlPoint1: CGPoint(x: 87, y: 37.82), controlPoint2: CGPoint(x: 86.77, y: 38.63))
            background3.addCurve(to: CGPoint(x: 84.44, y: 41.33), controlPoint1: CGPoint(x: 85.9, y: 40.26), controlPoint2: CGPoint(x: 85.26, y: 40.9))
            background3.addCurve(to: CGPoint(x: 80.59, y: 42), controlPoint1: CGPoint(x: 83.63, y: 41.77), controlPoint2: CGPoint(x: 82.82, y: 42))
            background3.addLine(to: CGPoint(x: 6.41, y: 42))
            background3.addCurve(to: CGPoint(x: 2.56, y: 41.33), controlPoint1: CGPoint(x: 4.18, y: 42), controlPoint2: CGPoint(x: 3.37, y: 41.77))
            background3.addCurve(to: CGPoint(x: 0.67, y: 39.44), controlPoint1: CGPoint(x: 1.74, y: 40.9), controlPoint2: CGPoint(x: 1.1, y: 40.26))
            background3.addCurve(to: CGPoint(x: 0, y: 35.59), controlPoint1: CGPoint(x: 0.23, y: 38.63), controlPoint2: CGPoint(x: 0, y: 37.82))
            background3.addLine(to: CGPoint(x: 0, y: 6.41))
            background3.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
            background3.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
            background3.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
            background3.close()
            context.saveGState()
            background3.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background3.cgPath)
            context.addRect(background3.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -88, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 88, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background3.fill()
            context.restoreGState()
            background3.usesEvenOddFillRule = true
            UIColor(hue: 0.593, saturation: 0.095, brightness: 0.741, alpha: 0.5).setFill()
            background3.fill()
            context.saveGState()
            context.setBlendMode(.softLight)
            context.beginTransparencyLayer(in: background3.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 0, alpha: 0.5).setFill()
                background3.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.saveGState()
            context.setBlendMode(.softLight)
            context.beginTransparencyLayer(in: background3.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 1, alpha: 0.1).setFill()
                background3.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            /// ↳ Label
            let label = NSMutableAttributedString(string: "Label")
            label.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: label.length))
            label.addAttribute(.kern, value: -0.32, range: NSRange(location: 0, length: label.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
            }
            context.saveGState()
            label.draw(in: CGRect(x: 8, y: 11, width: 72, height: 21))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawKeyboards_SimpleButtonActive(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 374, height: 52), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 374, height: 52), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 374, y: resizedFrame.height / 52)
        
        /// Symbols
        do {
            context.saveGState()
            context.translateBy(x: 2.99, y: 5)
            
            /// Background
            let background = UIBezierPath()
            background.move(to: CGPoint(x: 5, y: 0))
            background.addLine(to: CGPoint(x: 82.77, y: 0))
            background.addCurve(to: CGPoint(x: 87.77, y: 5), controlPoint1: CGPoint(x: 85.53, y: 0), controlPoint2: CGPoint(x: 87.77, y: 2.24))
            background.addLine(to: CGPoint(x: 87.77, y: 37))
            background.addCurve(to: CGPoint(x: 82.77, y: 42), controlPoint1: CGPoint(x: 87.77, y: 39.76), controlPoint2: CGPoint(x: 85.53, y: 42))
            background.addLine(to: CGPoint(x: 5, y: 42))
            background.addCurve(to: CGPoint(x: 0, y: 37), controlPoint1: CGPoint(x: 2.24, y: 42), controlPoint2: CGPoint(x: 0, y: 39.76))
            background.addLine(to: CGPoint(x: 0, y: 5))
            background.addCurve(to: CGPoint(x: 5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.24), controlPoint2: CGPoint(x: 2.24, y: 0))
            background.close()
            context.saveGState()
            background.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background.cgPath)
            context.addRect(background.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -88.77, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 88.77, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background.fill()
            context.restoreGState()
            background.usesEvenOddFillRule = true
            UIColor(hue: 0.593, saturation: 0.095, brightness: 0.741, alpha: 0.5).setFill()
            background.fill()
            context.saveGState()
            context.setBlendMode(.softLight)
            context.beginTransparencyLayer(in: background.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 0, alpha: 0.5).setFill()
                background.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.saveGState()
            context.setBlendMode(.softLight)
            context.beginTransparencyLayer(in: background.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 1, alpha: 0.1).setFill()
                background.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            /// 123
            let _123 = NSMutableAttributedString(string: "123")
            _123.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: _123.length))
            _123.addAttribute(.kern, value: -0.32, range: NSRange(location: 0, length: _123.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                _123.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _123.length))
            }
            context.saveGState()
            _123.draw(in: CGRect(x: 29.88, y: 12, width: 27, height: 21))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Space
        do {
            context.saveGState()
            context.translateBy(x: 95.74, y: 5)
            
            /// Background
            let background2 = UIBezierPath()
            background2.move(to: CGPoint(x: 6.41, y: 0))
            background2.addLine(to: CGPoint(x: 177.1, y: 0))
            background2.addCurve(to: CGPoint(x: 180.95, y: 0.67), controlPoint1: CGPoint(x: 179.33, y: 0), controlPoint2: CGPoint(x: 180.14, y: 0.23))
            background2.addCurve(to: CGPoint(x: 182.84, y: 2.56), controlPoint1: CGPoint(x: 181.77, y: 1.1), controlPoint2: CGPoint(x: 182.41, y: 1.74))
            background2.addCurve(to: CGPoint(x: 183.51, y: 6.41), controlPoint1: CGPoint(x: 183.28, y: 3.37), controlPoint2: CGPoint(x: 183.51, y: 4.18))
            background2.addLine(to: CGPoint(x: 183.51, y: 35.59))
            background2.addCurve(to: CGPoint(x: 182.84, y: 39.44), controlPoint1: CGPoint(x: 183.51, y: 37.82), controlPoint2: CGPoint(x: 183.28, y: 38.63))
            background2.addCurve(to: CGPoint(x: 180.95, y: 41.33), controlPoint1: CGPoint(x: 182.41, y: 40.26), controlPoint2: CGPoint(x: 181.77, y: 40.9))
            background2.addCurve(to: CGPoint(x: 177.1, y: 42), controlPoint1: CGPoint(x: 180.14, y: 41.77), controlPoint2: CGPoint(x: 179.33, y: 42))
            background2.addLine(to: CGPoint(x: 6.41, y: 42))
            background2.addCurve(to: CGPoint(x: 2.56, y: 41.33), controlPoint1: CGPoint(x: 4.18, y: 42), controlPoint2: CGPoint(x: 3.37, y: 41.77))
            background2.addCurve(to: CGPoint(x: 0.67, y: 39.44), controlPoint1: CGPoint(x: 1.74, y: 40.9), controlPoint2: CGPoint(x: 1.1, y: 40.26))
            background2.addCurve(to: CGPoint(x: 0, y: 35.59), controlPoint1: CGPoint(x: 0.23, y: 38.63), controlPoint2: CGPoint(x: 0, y: 37.82))
            background2.addLine(to: CGPoint(x: 0, y: 6.41))
            background2.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
            background2.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
            background2.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
            background2.close()
            context.saveGState()
            background2.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background2.cgPath)
            context.addRect(background2.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -184.51, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 184.51, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background2.fill()
            context.restoreGState()
            background2.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background2.fill()
            context.restoreGState()
            
            /// Space
            let space = NSMutableAttributedString(string: "space")
            space.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: space.length))
            space.addAttribute(.kern, value: -0.32, range: NSRange(location: 0, length: space.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                space.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: space.length))
            }
            context.saveGState()
            space.draw(in: CGRect(x: 69.81, y: 11, width: 43.88, height: 21))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Button
        do {
            context.saveGState()
            context.translateBy(x: 284, y: 5)
            
            /// Background
            let background3 = UIBezierPath()
            background3.move(to: CGPoint(x: 6.41, y: 0))
            background3.addLine(to: CGPoint(x: 80.59, y: 0))
            background3.addCurve(to: CGPoint(x: 84.44, y: 0.67), controlPoint1: CGPoint(x: 82.82, y: 0), controlPoint2: CGPoint(x: 83.63, y: 0.23))
            background3.addCurve(to: CGPoint(x: 86.33, y: 2.56), controlPoint1: CGPoint(x: 85.26, y: 1.1), controlPoint2: CGPoint(x: 85.9, y: 1.74))
            background3.addCurve(to: CGPoint(x: 87, y: 6.41), controlPoint1: CGPoint(x: 86.77, y: 3.37), controlPoint2: CGPoint(x: 87, y: 4.18))
            background3.addLine(to: CGPoint(x: 87, y: 35.59))
            background3.addCurve(to: CGPoint(x: 86.33, y: 39.44), controlPoint1: CGPoint(x: 87, y: 37.82), controlPoint2: CGPoint(x: 86.77, y: 38.63))
            background3.addCurve(to: CGPoint(x: 84.44, y: 41.33), controlPoint1: CGPoint(x: 85.9, y: 40.26), controlPoint2: CGPoint(x: 85.26, y: 40.9))
            background3.addCurve(to: CGPoint(x: 80.59, y: 42), controlPoint1: CGPoint(x: 83.63, y: 41.77), controlPoint2: CGPoint(x: 82.82, y: 42))
            background3.addLine(to: CGPoint(x: 6.41, y: 42))
            background3.addCurve(to: CGPoint(x: 2.56, y: 41.33), controlPoint1: CGPoint(x: 4.18, y: 42), controlPoint2: CGPoint(x: 3.37, y: 41.77))
            background3.addCurve(to: CGPoint(x: 0.67, y: 39.44), controlPoint1: CGPoint(x: 1.74, y: 40.9), controlPoint2: CGPoint(x: 1.1, y: 40.26))
            background3.addCurve(to: CGPoint(x: 0, y: 35.59), controlPoint1: CGPoint(x: 0.23, y: 38.63), controlPoint2: CGPoint(x: 0, y: 37.82))
            background3.addLine(to: CGPoint(x: 0, y: 6.41))
            background3.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
            background3.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
            background3.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
            background3.close()
            context.saveGState()
            background3.usesEvenOddFillRule = true
            UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
            background3.fill()
            background3.usesEvenOddFillRule = true
            context.saveGState()
            UIRectClip(background3.bounds)
            context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
            context.setAlpha(0.35)
            context.beginTransparencyLayer(in: background3.bounds, auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                background3.fill()
                context.setBlendMode(.destinationOut)
                context.beginTransparencyLayer(in: background3.bounds, auxiliaryInfo: nil)
                do {
                    context.translateBy(x: -87, y: 0)
                    do {
                        let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                        let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                        let baseOffset = context.convertToDeviceSpace(CGPoint(x: 87, y: -1)).applying(baseTransform)
                        let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                        let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                        context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                    }
                    UIColor.black.setFill()
                    background3.fill()
                }
                context.endTransparencyLayer()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            /// ↳ Label
            let label = NSMutableAttributedString(string: "Label")
            label.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: label.length))
            label.addAttribute(.kern, value: -0.32, range: NSRange(location: 0, length: label.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
            }
            label.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: label.length))
            context.saveGState()
            label.draw(in: CGRect(x: 8, y: 11, width: 72, height: 21))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawKeyboards_ComplexButtonDefault(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 374, height: 52), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 374, height: 52), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 374, y: resizedFrame.height / 52)
        
        /// Symbols
        do {
            context.saveGState()
            context.translateBy(x: 2.99, y: 5)
            
            /// Background
            let background = UIBezierPath()
            background.move(to: CGPoint(x: 5, y: 0))
            background.addLine(to: CGPoint(x: 35.89, y: 0))
            background.addCurve(to: CGPoint(x: 40.89, y: 5), controlPoint1: CGPoint(x: 38.65, y: 0), controlPoint2: CGPoint(x: 40.89, y: 2.24))
            background.addLine(to: CGPoint(x: 40.89, y: 37))
            background.addCurve(to: CGPoint(x: 35.89, y: 42), controlPoint1: CGPoint(x: 40.89, y: 39.76), controlPoint2: CGPoint(x: 38.65, y: 42))
            background.addLine(to: CGPoint(x: 5, y: 42))
            background.addCurve(to: CGPoint(x: 0, y: 37), controlPoint1: CGPoint(x: 2.24, y: 42), controlPoint2: CGPoint(x: 0, y: 39.76))
            background.addLine(to: CGPoint(x: 0, y: 5))
            background.addCurve(to: CGPoint(x: 5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.24), controlPoint2: CGPoint(x: 2.24, y: 0))
            background.close()
            context.saveGState()
            context.translateBy(x: -0, y: 0)
            background.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background.cgPath)
            context.addRect(background.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -41.89, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 41.89, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background.fill()
            context.restoreGState()
            background.usesEvenOddFillRule = true
            UIColor(hue: 0.593, saturation: 0.095, brightness: 0.741, alpha: 0.5).setFill()
            background.fill()
            context.saveGState()
            context.setBlendMode(.softLight)
            context.beginTransparencyLayer(in: background.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 0, alpha: 0.5).setFill()
                background.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.saveGState()
            context.setBlendMode(.softLight)
            context.beginTransparencyLayer(in: background.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 1, alpha: 0.1).setFill()
                background.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            /// 123
            let _123 = NSMutableAttributedString(string: "123")
            _123.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: _123.length))
            _123.addAttribute(.kern, value: -0.32, range: NSRange(location: 0, length: _123.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                _123.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _123.length))
            }
            context.saveGState()
            _123.draw(in: CGRect(x: 6.45, y: 12, width: 27, height: 21))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Emoji
        do {
            context.saveGState()
            context.translateBy(x: 48.87, y: 5)
            
            /// Background
            let background2 = UIBezierPath()
            background2.move(to: CGPoint(x: 6.41, y: 0))
            background2.addLine(to: CGPoint(x: 35.48, y: 0))
            background2.addCurve(to: CGPoint(x: 39.33, y: 0.67), controlPoint1: CGPoint(x: 37.71, y: 0), controlPoint2: CGPoint(x: 38.52, y: 0.23))
            background2.addCurve(to: CGPoint(x: 41.22, y: 2.56), controlPoint1: CGPoint(x: 40.14, y: 1.1), controlPoint2: CGPoint(x: 40.78, y: 1.74))
            background2.addCurve(to: CGPoint(x: 41.89, y: 6.41), controlPoint1: CGPoint(x: 41.66, y: 3.37), controlPoint2: CGPoint(x: 41.89, y: 4.18))
            background2.addLine(to: CGPoint(x: 41.89, y: 35.59))
            background2.addCurve(to: CGPoint(x: 41.22, y: 39.44), controlPoint1: CGPoint(x: 41.89, y: 37.82), controlPoint2: CGPoint(x: 41.66, y: 38.63))
            background2.addCurve(to: CGPoint(x: 39.33, y: 41.33), controlPoint1: CGPoint(x: 40.78, y: 40.26), controlPoint2: CGPoint(x: 40.14, y: 40.9))
            background2.addCurve(to: CGPoint(x: 35.48, y: 42), controlPoint1: CGPoint(x: 38.52, y: 41.77), controlPoint2: CGPoint(x: 37.71, y: 42))
            background2.addLine(to: CGPoint(x: 6.41, y: 42))
            background2.addCurve(to: CGPoint(x: 2.56, y: 41.33), controlPoint1: CGPoint(x: 4.18, y: 42), controlPoint2: CGPoint(x: 3.37, y: 41.77))
            background2.addCurve(to: CGPoint(x: 0.67, y: 39.44), controlPoint1: CGPoint(x: 1.74, y: 40.9), controlPoint2: CGPoint(x: 1.1, y: 40.26))
            background2.addCurve(to: CGPoint(x: 0, y: 35.59), controlPoint1: CGPoint(x: 0.23, y: 38.63), controlPoint2: CGPoint(x: 0, y: 37.82))
            background2.addLine(to: CGPoint(x: 0, y: 6.41))
            background2.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
            background2.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
            background2.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
            background2.close()
            context.saveGState()
            background2.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background2.cgPath)
            context.addRect(background2.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -42.89, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 42.89, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background2.fill()
            context.restoreGState()
            background2.usesEvenOddFillRule = true
            UIColor(hue: 0.593, saturation: 0.095, brightness: 0.741, alpha: 0.5).setFill()
            background2.fill()
            context.saveGState()
            context.setBlendMode(.softLight)
            context.beginTransparencyLayer(in: background2.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 0, alpha: 0.5).setFill()
                background2.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.saveGState()
            context.setBlendMode(.softLight)
            context.beginTransparencyLayer(in: background2.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 1, alpha: 0.1).setFill()
                background2.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            /// Emoji
            let emoji = UIBezierPath()
            emoji.move(to: CGPoint(x: 9.75, y: 19.5))
            emoji.addCurve(to: CGPoint(x: 0, y: 9.75), controlPoint1: CGPoint(x: 4.37, y: 19.5), controlPoint2: CGPoint(x: 0, y: 15.13))
            emoji.addCurve(to: CGPoint(x: 9.75, y: 0), controlPoint1: CGPoint(x: 0, y: 4.37), controlPoint2: CGPoint(x: 4.37, y: 0))
            emoji.addCurve(to: CGPoint(x: 19.5, y: 9.75), controlPoint1: CGPoint(x: 15.13, y: 0), controlPoint2: CGPoint(x: 19.5, y: 4.37))
            emoji.addCurve(to: CGPoint(x: 9.75, y: 19.5), controlPoint1: CGPoint(x: 19.5, y: 15.13), controlPoint2: CGPoint(x: 15.13, y: 19.5))
            emoji.close()
            emoji.move(to: CGPoint(x: 9.75, y: 18.5))
            emoji.addCurve(to: CGPoint(x: 18.5, y: 9.75), controlPoint1: CGPoint(x: 14.58, y: 18.5), controlPoint2: CGPoint(x: 18.5, y: 14.58))
            emoji.addCurve(to: CGPoint(x: 9.75, y: 1), controlPoint1: CGPoint(x: 18.5, y: 4.92), controlPoint2: CGPoint(x: 14.58, y: 1))
            emoji.addCurve(to: CGPoint(x: 1, y: 9.75), controlPoint1: CGPoint(x: 4.92, y: 1), controlPoint2: CGPoint(x: 1, y: 4.92))
            emoji.addCurve(to: CGPoint(x: 9.75, y: 18.5), controlPoint1: CGPoint(x: 1, y: 14.58), controlPoint2: CGPoint(x: 4.92, y: 18.5))
            emoji.close()
            emoji.move(to: CGPoint(x: 6.75, y: 8))
            emoji.addCurve(to: CGPoint(x: 5.5, y: 6.75), controlPoint1: CGPoint(x: 6.06, y: 8), controlPoint2: CGPoint(x: 5.5, y: 7.44))
            emoji.addCurve(to: CGPoint(x: 6.75, y: 5.5), controlPoint1: CGPoint(x: 5.5, y: 6.06), controlPoint2: CGPoint(x: 6.06, y: 5.5))
            emoji.addCurve(to: CGPoint(x: 8, y: 6.75), controlPoint1: CGPoint(x: 7.44, y: 5.5), controlPoint2: CGPoint(x: 8, y: 6.06))
            emoji.addCurve(to: CGPoint(x: 6.75, y: 8), controlPoint1: CGPoint(x: 8, y: 7.44), controlPoint2: CGPoint(x: 7.44, y: 8))
            emoji.close()
            emoji.move(to: CGPoint(x: 12.75, y: 8))
            emoji.addCurve(to: CGPoint(x: 11.5, y: 6.75), controlPoint1: CGPoint(x: 12.06, y: 8), controlPoint2: CGPoint(x: 11.5, y: 7.44))
            emoji.addCurve(to: CGPoint(x: 12.75, y: 5.5), controlPoint1: CGPoint(x: 11.5, y: 6.06), controlPoint2: CGPoint(x: 12.06, y: 5.5))
            emoji.addCurve(to: CGPoint(x: 14, y: 6.75), controlPoint1: CGPoint(x: 13.44, y: 5.5), controlPoint2: CGPoint(x: 14, y: 6.06))
            emoji.addCurve(to: CGPoint(x: 12.75, y: 8), controlPoint1: CGPoint(x: 14, y: 7.44), controlPoint2: CGPoint(x: 13.44, y: 8))
            emoji.close()
            emoji.move(to: CGPoint(x: 2.89, y: 11.16))
            emoji.addCurve(to: CGPoint(x: 3.85, y: 10.23), controlPoint1: CGPoint(x: 2.64, y: 10.38), controlPoint2: CGPoint(x: 3.07, y: 9.98))
            emoji.addCurve(to: CGPoint(x: 9.75, y: 11.21), controlPoint1: CGPoint(x: 3.85, y: 10.23), controlPoint2: CGPoint(x: 6.09, y: 11.21))
            emoji.addCurve(to: CGPoint(x: 15.65, y: 10.23), controlPoint1: CGPoint(x: 13.41, y: 11.21), controlPoint2: CGPoint(x: 15.65, y: 10.23))
            emoji.addCurve(to: CGPoint(x: 16.61, y: 11.18), controlPoint1: CGPoint(x: 16.43, y: 9.97), controlPoint2: CGPoint(x: 16.88, y: 10.4))
            emoji.addCurve(to: CGPoint(x: 9.75, y: 16.58), controlPoint1: CGPoint(x: 16.61, y: 11.18), controlPoint2: CGPoint(x: 15.6, y: 16.58))
            emoji.addCurve(to: CGPoint(x: 2.89, y: 11.16), controlPoint1: CGPoint(x: 3.9, y: 16.58), controlPoint2: CGPoint(x: 2.89, y: 11.16))
            emoji.close()
            emoji.move(to: CGPoint(x: 9.75, y: 12.19))
            emoji.addCurve(to: CGPoint(x: 4.85, y: 11.47), controlPoint1: CGPoint(x: 7.07, y: 12.19), controlPoint2: CGPoint(x: 4.85, y: 11.47))
            emoji.addCurve(to: CGPoint(x: 4.56, y: 11.96), controlPoint1: CGPoint(x: 4.33, y: 11.33), controlPoint2: CGPoint(x: 4.18, y: 11.57))
            emoji.addCurve(to: CGPoint(x: 9.75, y: 13.65), controlPoint1: CGPoint(x: 4.56, y: 11.96), controlPoint2: CGPoint(x: 5.36, y: 13.65))
            emoji.addCurve(to: CGPoint(x: 14.95, y: 11.94), controlPoint1: CGPoint(x: 14.14, y: 13.65), controlPoint2: CGPoint(x: 14.95, y: 11.94))
            emoji.addCurve(to: CGPoint(x: 14.64, y: 11.48), controlPoint1: CGPoint(x: 15.31, y: 11.54), controlPoint2: CGPoint(x: 15.17, y: 11.34))
            emoji.addCurve(to: CGPoint(x: 9.75, y: 12.19), controlPoint1: CGPoint(x: 14.64, y: 11.48), controlPoint2: CGPoint(x: 12.43, y: 12.19))
            emoji.close()
            context.saveGState()
            context.translateBy(x: 10.94, y: 11)
            emoji.usesEvenOddFillRule = true
            UIColor.black.setFill()
            emoji.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Speech
        do {
            context.saveGState()
            context.translateBy(x: 95.74, y: 5)
            
            /// Background
            let background3 = UIBezierPath()
            background3.move(to: CGPoint(x: 6.41, y: 0))
            background3.addLine(to: CGPoint(x: 25.5, y: 0))
            background3.addCurve(to: CGPoint(x: 29.36, y: 0.67), controlPoint1: CGPoint(x: 27.73, y: 0), controlPoint2: CGPoint(x: 28.54, y: 0.23))
            background3.addCurve(to: CGPoint(x: 31.25, y: 2.56), controlPoint1: CGPoint(x: 30.17, y: 1.1), controlPoint2: CGPoint(x: 30.81, y: 1.74))
            background3.addCurve(to: CGPoint(x: 31.91, y: 6.41), controlPoint1: CGPoint(x: 31.68, y: 3.37), controlPoint2: CGPoint(x: 31.91, y: 4.18))
            background3.addLine(to: CGPoint(x: 31.91, y: 35.59))
            background3.addCurve(to: CGPoint(x: 31.25, y: 39.44), controlPoint1: CGPoint(x: 31.91, y: 37.82), controlPoint2: CGPoint(x: 31.68, y: 38.63))
            background3.addCurve(to: CGPoint(x: 29.36, y: 41.33), controlPoint1: CGPoint(x: 30.81, y: 40.26), controlPoint2: CGPoint(x: 30.17, y: 40.9))
            background3.addCurve(to: CGPoint(x: 25.5, y: 42), controlPoint1: CGPoint(x: 28.54, y: 41.77), controlPoint2: CGPoint(x: 27.73, y: 42))
            background3.addLine(to: CGPoint(x: 6.41, y: 42))
            background3.addCurve(to: CGPoint(x: 2.56, y: 41.33), controlPoint1: CGPoint(x: 4.18, y: 42), controlPoint2: CGPoint(x: 3.37, y: 41.77))
            background3.addCurve(to: CGPoint(x: 0.67, y: 39.44), controlPoint1: CGPoint(x: 1.74, y: 40.9), controlPoint2: CGPoint(x: 1.1, y: 40.26))
            background3.addCurve(to: CGPoint(x: 0, y: 35.59), controlPoint1: CGPoint(x: 0.23, y: 38.63), controlPoint2: CGPoint(x: 0, y: 37.82))
            background3.addLine(to: CGPoint(x: 0, y: 6.41))
            background3.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
            background3.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
            background3.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
            background3.close()
            context.saveGState()
            context.translateBy(x: -0, y: 0)
            background3.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background3.cgPath)
            context.addRect(background3.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -32.91, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.91, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background3.fill()
            context.restoreGState()
            background3.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background3.fill()
            context.restoreGState()
            
            /// Speech
            let speech = UIBezierPath()
            speech.move(to: CGPoint(x: 10, y: 19.25))
            speech.addCurve(to: CGPoint(x: 9.25, y: 20), controlPoint1: CGPoint(x: 10, y: 19.66), controlPoint2: CGPoint(x: 9.66, y: 20))
            speech.addLine(to: CGPoint(x: 2.75, y: 20))
            speech.addCurve(to: CGPoint(x: 2, y: 19.25), controlPoint1: CGPoint(x: 2.34, y: 20), controlPoint2: CGPoint(x: 2, y: 19.67))
            speech.addCurve(to: CGPoint(x: 2.75, y: 18.5), controlPoint1: CGPoint(x: 2, y: 18.84), controlPoint2: CGPoint(x: 2.34, y: 18.5))
            speech.addLine(to: CGPoint(x: 5.25, y: 18.5))
            speech.addLine(to: CGPoint(x: 5.25, y: 16.5))
            speech.addCurve(to: CGPoint(x: 0, y: 11.48), controlPoint1: CGPoint(x: 2.75, y: 16.5), controlPoint2: CGPoint(x: 0, y: 13.47))
            speech.addCurve(to: CGPoint(x: 0, y: 8.25), controlPoint1: CGPoint(x: 0, y: 9.99), controlPoint2: CGPoint(x: 0, y: 8.25))
            speech.addCurve(to: CGPoint(x: 0.75, y: 7.5), controlPoint1: CGPoint(x: 0, y: 7.84), controlPoint2: CGPoint(x: 0.33, y: 7.5))
            speech.addCurve(to: CGPoint(x: 1.5, y: 8.25), controlPoint1: CGPoint(x: 1.16, y: 7.5), controlPoint2: CGPoint(x: 1.5, y: 7.84))
            speech.addLine(to: CGPoint(x: 1.5, y: 11.48))
            speech.addCurve(to: CGPoint(x: 6, y: 14.98), controlPoint1: CGPoint(x: 1.5, y: 12.98), controlPoint2: CGPoint(x: 3.5, y: 14.98))
            speech.addCurve(to: CGPoint(x: 10.5, y: 11.48), controlPoint1: CGPoint(x: 8.5, y: 14.98), controlPoint2: CGPoint(x: 10.5, y: 12.98))
            speech.addLine(to: CGPoint(x: 10.5, y: 8.25))
            speech.addCurve(to: CGPoint(x: 11.25, y: 7.5), controlPoint1: CGPoint(x: 10.5, y: 7.83), controlPoint2: CGPoint(x: 10.83, y: 7.5))
            speech.addCurve(to: CGPoint(x: 12, y: 8.26), controlPoint1: CGPoint(x: 11.66, y: 7.5), controlPoint2: CGPoint(x: 12, y: 7.84))
            speech.addLine(to: CGPoint(x: 12, y: 11.48))
            speech.addCurve(to: CGPoint(x: 6.75, y: 16.5), controlPoint1: CGPoint(x: 12, y: 13.47), controlPoint2: CGPoint(x: 9.25, y: 16.5))
            speech.addLine(to: CGPoint(x: 6.75, y: 18.5))
            speech.addLine(to: CGPoint(x: 9.25, y: 18.5))
            speech.addCurve(to: CGPoint(x: 10, y: 19.25), controlPoint1: CGPoint(x: 9.66, y: 18.5), controlPoint2: CGPoint(x: 10, y: 18.83))
            speech.close()
            speech.move(to: CGPoint(x: 2.5, y: 3.5))
            speech.addCurve(to: CGPoint(x: 6, y: 0), controlPoint1: CGPoint(x: 2.5, y: 1.57), controlPoint2: CGPoint(x: 4.07, y: 0))
            speech.addCurve(to: CGPoint(x: 9.5, y: 3.5), controlPoint1: CGPoint(x: 7.93, y: 0), controlPoint2: CGPoint(x: 9.5, y: 1.57))
            speech.addLine(to: CGPoint(x: 9.5, y: 10.5))
            speech.addCurve(to: CGPoint(x: 6, y: 14), controlPoint1: CGPoint(x: 9.5, y: 12.43), controlPoint2: CGPoint(x: 7.93, y: 14))
            speech.addCurve(to: CGPoint(x: 2.5, y: 10.5), controlPoint1: CGPoint(x: 4.07, y: 14), controlPoint2: CGPoint(x: 2.5, y: 12.43))
            speech.addLine(to: CGPoint(x: 2.5, y: 3.5))
            speech.close()
            speech.move(to: CGPoint(x: 4, y: 3.49))
            speech.addLine(to: CGPoint(x: 4, y: 10.51))
            speech.addCurve(to: CGPoint(x: 6, y: 12.5), controlPoint1: CGPoint(x: 4, y: 11.6), controlPoint2: CGPoint(x: 4.9, y: 12.5))
            speech.addCurve(to: CGPoint(x: 8, y: 10.51), controlPoint1: CGPoint(x: 7.11, y: 12.5), controlPoint2: CGPoint(x: 8, y: 11.61))
            speech.addLine(to: CGPoint(x: 8, y: 3.49))
            speech.addCurve(to: CGPoint(x: 6, y: 1.5), controlPoint1: CGPoint(x: 8, y: 2.4), controlPoint2: CGPoint(x: 7.1, y: 1.5))
            speech.addCurve(to: CGPoint(x: 4, y: 3.49), controlPoint1: CGPoint(x: 4.89, y: 1.5), controlPoint2: CGPoint(x: 4, y: 2.39))
            speech.close()
            context.saveGState()
            context.translateBy(x: 9.96, y: 11.5)
            speech.usesEvenOddFillRule = true
            UIColor.black.setFill()
            speech.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Space
        do {
            context.saveGState()
            context.translateBy(x: 132.65, y: 5)
            
            /// Background
            let background4 = UIBezierPath()
            background4.move(to: CGPoint(x: 6.41, y: 0))
            background4.addLine(to: CGPoint(x: 140.2, y: 0))
            background4.addCurve(to: CGPoint(x: 144.05, y: 0.67), controlPoint1: CGPoint(x: 142.43, y: 0), controlPoint2: CGPoint(x: 143.24, y: 0.23))
            background4.addCurve(to: CGPoint(x: 145.94, y: 2.56), controlPoint1: CGPoint(x: 144.86, y: 1.1), controlPoint2: CGPoint(x: 145.5, y: 1.74))
            background4.addCurve(to: CGPoint(x: 146.61, y: 6.41), controlPoint1: CGPoint(x: 146.38, y: 3.37), controlPoint2: CGPoint(x: 146.61, y: 4.18))
            background4.addLine(to: CGPoint(x: 146.61, y: 35.59))
            background4.addCurve(to: CGPoint(x: 145.94, y: 39.44), controlPoint1: CGPoint(x: 146.61, y: 37.82), controlPoint2: CGPoint(x: 146.38, y: 38.63))
            background4.addCurve(to: CGPoint(x: 144.05, y: 41.33), controlPoint1: CGPoint(x: 145.5, y: 40.26), controlPoint2: CGPoint(x: 144.86, y: 40.9))
            background4.addCurve(to: CGPoint(x: 140.2, y: 42), controlPoint1: CGPoint(x: 143.24, y: 41.77), controlPoint2: CGPoint(x: 142.43, y: 42))
            background4.addLine(to: CGPoint(x: 6.41, y: 42))
            background4.addCurve(to: CGPoint(x: 2.56, y: 41.33), controlPoint1: CGPoint(x: 4.18, y: 42), controlPoint2: CGPoint(x: 3.37, y: 41.77))
            background4.addCurve(to: CGPoint(x: 0.67, y: 39.44), controlPoint1: CGPoint(x: 1.74, y: 40.9), controlPoint2: CGPoint(x: 1.1, y: 40.26))
            background4.addCurve(to: CGPoint(x: 0, y: 35.59), controlPoint1: CGPoint(x: 0.23, y: 38.63), controlPoint2: CGPoint(x: 0, y: 37.82))
            background4.addLine(to: CGPoint(x: 0, y: 6.41))
            background4.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
            background4.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
            background4.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
            background4.close()
            context.saveGState()
            background4.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background4.cgPath)
            context.addRect(background4.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -147.61, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 147.61, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background4.fill()
            context.restoreGState()
            background4.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background4.fill()
            context.restoreGState()
            
            /// Space
            let space = NSMutableAttributedString(string: "space")
            space.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: space.length))
            space.addAttribute(.kern, value: -0.32, range: NSRange(location: 0, length: space.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                space.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: space.length))
            }
            context.saveGState()
            space.draw(in: CGRect(x: 51.86, y: 11, width: 43.88, height: 21))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Button
        do {
            context.saveGState()
            context.translateBy(x: 284, y: 5)
            
            /// Background
            let background5 = UIBezierPath()
            background5.move(to: CGPoint(x: 6.41, y: 0))
            background5.addLine(to: CGPoint(x: 80.59, y: 0))
            background5.addCurve(to: CGPoint(x: 84.44, y: 0.67), controlPoint1: CGPoint(x: 82.82, y: 0), controlPoint2: CGPoint(x: 83.63, y: 0.23))
            background5.addCurve(to: CGPoint(x: 86.33, y: 2.56), controlPoint1: CGPoint(x: 85.26, y: 1.1), controlPoint2: CGPoint(x: 85.9, y: 1.74))
            background5.addCurve(to: CGPoint(x: 87, y: 6.41), controlPoint1: CGPoint(x: 86.77, y: 3.37), controlPoint2: CGPoint(x: 87, y: 4.18))
            background5.addLine(to: CGPoint(x: 87, y: 35.59))
            background5.addCurve(to: CGPoint(x: 86.33, y: 39.44), controlPoint1: CGPoint(x: 87, y: 37.82), controlPoint2: CGPoint(x: 86.77, y: 38.63))
            background5.addCurve(to: CGPoint(x: 84.44, y: 41.33), controlPoint1: CGPoint(x: 85.9, y: 40.26), controlPoint2: CGPoint(x: 85.26, y: 40.9))
            background5.addCurve(to: CGPoint(x: 80.59, y: 42), controlPoint1: CGPoint(x: 83.63, y: 41.77), controlPoint2: CGPoint(x: 82.82, y: 42))
            background5.addLine(to: CGPoint(x: 6.41, y: 42))
            background5.addCurve(to: CGPoint(x: 2.56, y: 41.33), controlPoint1: CGPoint(x: 4.18, y: 42), controlPoint2: CGPoint(x: 3.37, y: 41.77))
            background5.addCurve(to: CGPoint(x: 0.67, y: 39.44), controlPoint1: CGPoint(x: 1.74, y: 40.9), controlPoint2: CGPoint(x: 1.1, y: 40.26))
            background5.addCurve(to: CGPoint(x: 0, y: 35.59), controlPoint1: CGPoint(x: 0.23, y: 38.63), controlPoint2: CGPoint(x: 0, y: 37.82))
            background5.addLine(to: CGPoint(x: 0, y: 6.41))
            background5.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
            background5.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
            background5.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
            background5.close()
            context.saveGState()
            background5.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background5.cgPath)
            context.addRect(background5.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -88, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 88, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background5.fill()
            context.restoreGState()
            background5.usesEvenOddFillRule = true
            UIColor(hue: 0.593, saturation: 0.095, brightness: 0.741, alpha: 0.5).setFill()
            background5.fill()
            context.saveGState()
            context.setBlendMode(.softLight)
            context.beginTransparencyLayer(in: background5.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 0, alpha: 0.5).setFill()
                background5.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.saveGState()
            context.setBlendMode(.softLight)
            context.beginTransparencyLayer(in: background5.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 1, alpha: 0.1).setFill()
                background5.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            /// ↳ Label
            let label = NSMutableAttributedString(string: "Label")
            label.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: label.length))
            label.addAttribute(.kern, value: -0.32, range: NSRange(location: 0, length: label.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
            }
            context.saveGState()
            label.draw(in: CGRect(x: 8, y: 11, width: 72, height: 21))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawKeyboards_ComplexButtonActive(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 374, height: 52), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 374, height: 52), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 374, y: resizedFrame.height / 52)
        
        /// Symbols
        do {
            context.saveGState()
            context.translateBy(x: 2.99, y: 5)
            
            /// Background
            let background = UIBezierPath()
            background.move(to: CGPoint(x: 5, y: 0))
            background.addLine(to: CGPoint(x: 35.89, y: 0))
            background.addCurve(to: CGPoint(x: 40.89, y: 5), controlPoint1: CGPoint(x: 38.65, y: 0), controlPoint2: CGPoint(x: 40.89, y: 2.24))
            background.addLine(to: CGPoint(x: 40.89, y: 37))
            background.addCurve(to: CGPoint(x: 35.89, y: 42), controlPoint1: CGPoint(x: 40.89, y: 39.76), controlPoint2: CGPoint(x: 38.65, y: 42))
            background.addLine(to: CGPoint(x: 5, y: 42))
            background.addCurve(to: CGPoint(x: 0, y: 37), controlPoint1: CGPoint(x: 2.24, y: 42), controlPoint2: CGPoint(x: 0, y: 39.76))
            background.addLine(to: CGPoint(x: 0, y: 5))
            background.addCurve(to: CGPoint(x: 5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.24), controlPoint2: CGPoint(x: 2.24, y: 0))
            background.close()
            context.saveGState()
            context.translateBy(x: -0, y: 0)
            background.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background.cgPath)
            context.addRect(background.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -41.89, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 41.89, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background.fill()
            context.restoreGState()
            background.usesEvenOddFillRule = true
            UIColor(hue: 0.593, saturation: 0.095, brightness: 0.741, alpha: 0.5).setFill()
            background.fill()
            context.saveGState()
            context.setBlendMode(.softLight)
            context.beginTransparencyLayer(in: background.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 0, alpha: 0.5).setFill()
                background.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.saveGState()
            context.setBlendMode(.softLight)
            context.beginTransparencyLayer(in: background.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 1, alpha: 0.1).setFill()
                background.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            /// 123
            let _123 = NSMutableAttributedString(string: "123")
            _123.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: _123.length))
            _123.addAttribute(.kern, value: -0.32, range: NSRange(location: 0, length: _123.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                _123.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _123.length))
            }
            context.saveGState()
            _123.draw(in: CGRect(x: 6.45, y: 12, width: 27, height: 21))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Emoji
        do {
            context.saveGState()
            context.translateBy(x: 48.87, y: 5)
            
            /// Background
            let background2 = UIBezierPath()
            background2.move(to: CGPoint(x: 6.41, y: 0))
            background2.addLine(to: CGPoint(x: 35.48, y: 0))
            background2.addCurve(to: CGPoint(x: 39.33, y: 0.67), controlPoint1: CGPoint(x: 37.71, y: 0), controlPoint2: CGPoint(x: 38.52, y: 0.23))
            background2.addCurve(to: CGPoint(x: 41.22, y: 2.56), controlPoint1: CGPoint(x: 40.14, y: 1.1), controlPoint2: CGPoint(x: 40.78, y: 1.74))
            background2.addCurve(to: CGPoint(x: 41.89, y: 6.41), controlPoint1: CGPoint(x: 41.66, y: 3.37), controlPoint2: CGPoint(x: 41.89, y: 4.18))
            background2.addLine(to: CGPoint(x: 41.89, y: 35.59))
            background2.addCurve(to: CGPoint(x: 41.22, y: 39.44), controlPoint1: CGPoint(x: 41.89, y: 37.82), controlPoint2: CGPoint(x: 41.66, y: 38.63))
            background2.addCurve(to: CGPoint(x: 39.33, y: 41.33), controlPoint1: CGPoint(x: 40.78, y: 40.26), controlPoint2: CGPoint(x: 40.14, y: 40.9))
            background2.addCurve(to: CGPoint(x: 35.48, y: 42), controlPoint1: CGPoint(x: 38.52, y: 41.77), controlPoint2: CGPoint(x: 37.71, y: 42))
            background2.addLine(to: CGPoint(x: 6.41, y: 42))
            background2.addCurve(to: CGPoint(x: 2.56, y: 41.33), controlPoint1: CGPoint(x: 4.18, y: 42), controlPoint2: CGPoint(x: 3.37, y: 41.77))
            background2.addCurve(to: CGPoint(x: 0.67, y: 39.44), controlPoint1: CGPoint(x: 1.74, y: 40.9), controlPoint2: CGPoint(x: 1.1, y: 40.26))
            background2.addCurve(to: CGPoint(x: 0, y: 35.59), controlPoint1: CGPoint(x: 0.23, y: 38.63), controlPoint2: CGPoint(x: 0, y: 37.82))
            background2.addLine(to: CGPoint(x: 0, y: 6.41))
            background2.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
            background2.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
            background2.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
            background2.close()
            context.saveGState()
            background2.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background2.cgPath)
            context.addRect(background2.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -42.89, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 42.89, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background2.fill()
            context.restoreGState()
            background2.usesEvenOddFillRule = true
            UIColor(hue: 0.593, saturation: 0.095, brightness: 0.741, alpha: 0.5).setFill()
            background2.fill()
            context.saveGState()
            context.setBlendMode(.softLight)
            context.beginTransparencyLayer(in: background2.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 0, alpha: 0.5).setFill()
                background2.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.saveGState()
            context.setBlendMode(.softLight)
            context.beginTransparencyLayer(in: background2.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 1, alpha: 0.1).setFill()
                background2.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            /// Emoji
            let emoji = UIBezierPath()
            emoji.move(to: CGPoint(x: 9.75, y: 19.5))
            emoji.addCurve(to: CGPoint(x: 0, y: 9.75), controlPoint1: CGPoint(x: 4.37, y: 19.5), controlPoint2: CGPoint(x: 0, y: 15.13))
            emoji.addCurve(to: CGPoint(x: 9.75, y: 0), controlPoint1: CGPoint(x: 0, y: 4.37), controlPoint2: CGPoint(x: 4.37, y: 0))
            emoji.addCurve(to: CGPoint(x: 19.5, y: 9.75), controlPoint1: CGPoint(x: 15.13, y: 0), controlPoint2: CGPoint(x: 19.5, y: 4.37))
            emoji.addCurve(to: CGPoint(x: 9.75, y: 19.5), controlPoint1: CGPoint(x: 19.5, y: 15.13), controlPoint2: CGPoint(x: 15.13, y: 19.5))
            emoji.close()
            emoji.move(to: CGPoint(x: 9.75, y: 18.5))
            emoji.addCurve(to: CGPoint(x: 18.5, y: 9.75), controlPoint1: CGPoint(x: 14.58, y: 18.5), controlPoint2: CGPoint(x: 18.5, y: 14.58))
            emoji.addCurve(to: CGPoint(x: 9.75, y: 1), controlPoint1: CGPoint(x: 18.5, y: 4.92), controlPoint2: CGPoint(x: 14.58, y: 1))
            emoji.addCurve(to: CGPoint(x: 1, y: 9.75), controlPoint1: CGPoint(x: 4.92, y: 1), controlPoint2: CGPoint(x: 1, y: 4.92))
            emoji.addCurve(to: CGPoint(x: 9.75, y: 18.5), controlPoint1: CGPoint(x: 1, y: 14.58), controlPoint2: CGPoint(x: 4.92, y: 18.5))
            emoji.close()
            emoji.move(to: CGPoint(x: 6.75, y: 8))
            emoji.addCurve(to: CGPoint(x: 5.5, y: 6.75), controlPoint1: CGPoint(x: 6.06, y: 8), controlPoint2: CGPoint(x: 5.5, y: 7.44))
            emoji.addCurve(to: CGPoint(x: 6.75, y: 5.5), controlPoint1: CGPoint(x: 5.5, y: 6.06), controlPoint2: CGPoint(x: 6.06, y: 5.5))
            emoji.addCurve(to: CGPoint(x: 8, y: 6.75), controlPoint1: CGPoint(x: 7.44, y: 5.5), controlPoint2: CGPoint(x: 8, y: 6.06))
            emoji.addCurve(to: CGPoint(x: 6.75, y: 8), controlPoint1: CGPoint(x: 8, y: 7.44), controlPoint2: CGPoint(x: 7.44, y: 8))
            emoji.close()
            emoji.move(to: CGPoint(x: 12.75, y: 8))
            emoji.addCurve(to: CGPoint(x: 11.5, y: 6.75), controlPoint1: CGPoint(x: 12.06, y: 8), controlPoint2: CGPoint(x: 11.5, y: 7.44))
            emoji.addCurve(to: CGPoint(x: 12.75, y: 5.5), controlPoint1: CGPoint(x: 11.5, y: 6.06), controlPoint2: CGPoint(x: 12.06, y: 5.5))
            emoji.addCurve(to: CGPoint(x: 14, y: 6.75), controlPoint1: CGPoint(x: 13.44, y: 5.5), controlPoint2: CGPoint(x: 14, y: 6.06))
            emoji.addCurve(to: CGPoint(x: 12.75, y: 8), controlPoint1: CGPoint(x: 14, y: 7.44), controlPoint2: CGPoint(x: 13.44, y: 8))
            emoji.close()
            emoji.move(to: CGPoint(x: 2.89, y: 11.16))
            emoji.addCurve(to: CGPoint(x: 3.85, y: 10.23), controlPoint1: CGPoint(x: 2.64, y: 10.38), controlPoint2: CGPoint(x: 3.07, y: 9.98))
            emoji.addCurve(to: CGPoint(x: 9.75, y: 11.21), controlPoint1: CGPoint(x: 3.85, y: 10.23), controlPoint2: CGPoint(x: 6.09, y: 11.21))
            emoji.addCurve(to: CGPoint(x: 15.65, y: 10.23), controlPoint1: CGPoint(x: 13.41, y: 11.21), controlPoint2: CGPoint(x: 15.65, y: 10.23))
            emoji.addCurve(to: CGPoint(x: 16.61, y: 11.18), controlPoint1: CGPoint(x: 16.43, y: 9.97), controlPoint2: CGPoint(x: 16.88, y: 10.4))
            emoji.addCurve(to: CGPoint(x: 9.75, y: 16.58), controlPoint1: CGPoint(x: 16.61, y: 11.18), controlPoint2: CGPoint(x: 15.6, y: 16.58))
            emoji.addCurve(to: CGPoint(x: 2.89, y: 11.16), controlPoint1: CGPoint(x: 3.9, y: 16.58), controlPoint2: CGPoint(x: 2.89, y: 11.16))
            emoji.close()
            emoji.move(to: CGPoint(x: 9.75, y: 12.19))
            emoji.addCurve(to: CGPoint(x: 4.85, y: 11.47), controlPoint1: CGPoint(x: 7.07, y: 12.19), controlPoint2: CGPoint(x: 4.85, y: 11.47))
            emoji.addCurve(to: CGPoint(x: 4.56, y: 11.96), controlPoint1: CGPoint(x: 4.33, y: 11.33), controlPoint2: CGPoint(x: 4.18, y: 11.57))
            emoji.addCurve(to: CGPoint(x: 9.75, y: 13.65), controlPoint1: CGPoint(x: 4.56, y: 11.96), controlPoint2: CGPoint(x: 5.36, y: 13.65))
            emoji.addCurve(to: CGPoint(x: 14.95, y: 11.94), controlPoint1: CGPoint(x: 14.14, y: 13.65), controlPoint2: CGPoint(x: 14.95, y: 11.94))
            emoji.addCurve(to: CGPoint(x: 14.64, y: 11.48), controlPoint1: CGPoint(x: 15.31, y: 11.54), controlPoint2: CGPoint(x: 15.17, y: 11.34))
            emoji.addCurve(to: CGPoint(x: 9.75, y: 12.19), controlPoint1: CGPoint(x: 14.64, y: 11.48), controlPoint2: CGPoint(x: 12.43, y: 12.19))
            emoji.close()
            context.saveGState()
            context.translateBy(x: 10.94, y: 11)
            emoji.usesEvenOddFillRule = true
            UIColor.black.setFill()
            emoji.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Speech
        do {
            context.saveGState()
            context.translateBy(x: 95.74, y: 5)
            
            /// Background
            let background3 = UIBezierPath()
            background3.move(to: CGPoint(x: 6.41, y: 0))
            background3.addLine(to: CGPoint(x: 25.5, y: 0))
            background3.addCurve(to: CGPoint(x: 29.36, y: 0.67), controlPoint1: CGPoint(x: 27.73, y: 0), controlPoint2: CGPoint(x: 28.54, y: 0.23))
            background3.addCurve(to: CGPoint(x: 31.25, y: 2.56), controlPoint1: CGPoint(x: 30.17, y: 1.1), controlPoint2: CGPoint(x: 30.81, y: 1.74))
            background3.addCurve(to: CGPoint(x: 31.91, y: 6.41), controlPoint1: CGPoint(x: 31.68, y: 3.37), controlPoint2: CGPoint(x: 31.91, y: 4.18))
            background3.addLine(to: CGPoint(x: 31.91, y: 35.59))
            background3.addCurve(to: CGPoint(x: 31.25, y: 39.44), controlPoint1: CGPoint(x: 31.91, y: 37.82), controlPoint2: CGPoint(x: 31.68, y: 38.63))
            background3.addCurve(to: CGPoint(x: 29.36, y: 41.33), controlPoint1: CGPoint(x: 30.81, y: 40.26), controlPoint2: CGPoint(x: 30.17, y: 40.9))
            background3.addCurve(to: CGPoint(x: 25.5, y: 42), controlPoint1: CGPoint(x: 28.54, y: 41.77), controlPoint2: CGPoint(x: 27.73, y: 42))
            background3.addLine(to: CGPoint(x: 6.41, y: 42))
            background3.addCurve(to: CGPoint(x: 2.56, y: 41.33), controlPoint1: CGPoint(x: 4.18, y: 42), controlPoint2: CGPoint(x: 3.37, y: 41.77))
            background3.addCurve(to: CGPoint(x: 0.67, y: 39.44), controlPoint1: CGPoint(x: 1.74, y: 40.9), controlPoint2: CGPoint(x: 1.1, y: 40.26))
            background3.addCurve(to: CGPoint(x: 0, y: 35.59), controlPoint1: CGPoint(x: 0.23, y: 38.63), controlPoint2: CGPoint(x: 0, y: 37.82))
            background3.addLine(to: CGPoint(x: 0, y: 6.41))
            background3.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
            background3.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
            background3.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
            background3.close()
            context.saveGState()
            context.translateBy(x: -0, y: 0)
            background3.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background3.cgPath)
            context.addRect(background3.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -32.91, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.91, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background3.fill()
            context.restoreGState()
            background3.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background3.fill()
            context.restoreGState()
            
            /// Speech
            let speech = UIBezierPath()
            speech.move(to: CGPoint(x: 10, y: 19.25))
            speech.addCurve(to: CGPoint(x: 9.25, y: 20), controlPoint1: CGPoint(x: 10, y: 19.66), controlPoint2: CGPoint(x: 9.66, y: 20))
            speech.addLine(to: CGPoint(x: 2.75, y: 20))
            speech.addCurve(to: CGPoint(x: 2, y: 19.25), controlPoint1: CGPoint(x: 2.34, y: 20), controlPoint2: CGPoint(x: 2, y: 19.67))
            speech.addCurve(to: CGPoint(x: 2.75, y: 18.5), controlPoint1: CGPoint(x: 2, y: 18.84), controlPoint2: CGPoint(x: 2.34, y: 18.5))
            speech.addLine(to: CGPoint(x: 5.25, y: 18.5))
            speech.addLine(to: CGPoint(x: 5.25, y: 16.5))
            speech.addCurve(to: CGPoint(x: 0, y: 11.48), controlPoint1: CGPoint(x: 2.75, y: 16.5), controlPoint2: CGPoint(x: 0, y: 13.47))
            speech.addCurve(to: CGPoint(x: 0, y: 8.25), controlPoint1: CGPoint(x: 0, y: 9.99), controlPoint2: CGPoint(x: 0, y: 8.25))
            speech.addCurve(to: CGPoint(x: 0.75, y: 7.5), controlPoint1: CGPoint(x: 0, y: 7.84), controlPoint2: CGPoint(x: 0.33, y: 7.5))
            speech.addCurve(to: CGPoint(x: 1.5, y: 8.25), controlPoint1: CGPoint(x: 1.16, y: 7.5), controlPoint2: CGPoint(x: 1.5, y: 7.84))
            speech.addLine(to: CGPoint(x: 1.5, y: 11.48))
            speech.addCurve(to: CGPoint(x: 6, y: 14.98), controlPoint1: CGPoint(x: 1.5, y: 12.98), controlPoint2: CGPoint(x: 3.5, y: 14.98))
            speech.addCurve(to: CGPoint(x: 10.5, y: 11.48), controlPoint1: CGPoint(x: 8.5, y: 14.98), controlPoint2: CGPoint(x: 10.5, y: 12.98))
            speech.addLine(to: CGPoint(x: 10.5, y: 8.25))
            speech.addCurve(to: CGPoint(x: 11.25, y: 7.5), controlPoint1: CGPoint(x: 10.5, y: 7.83), controlPoint2: CGPoint(x: 10.83, y: 7.5))
            speech.addCurve(to: CGPoint(x: 12, y: 8.26), controlPoint1: CGPoint(x: 11.66, y: 7.5), controlPoint2: CGPoint(x: 12, y: 7.84))
            speech.addLine(to: CGPoint(x: 12, y: 11.48))
            speech.addCurve(to: CGPoint(x: 6.75, y: 16.5), controlPoint1: CGPoint(x: 12, y: 13.47), controlPoint2: CGPoint(x: 9.25, y: 16.5))
            speech.addLine(to: CGPoint(x: 6.75, y: 18.5))
            speech.addLine(to: CGPoint(x: 9.25, y: 18.5))
            speech.addCurve(to: CGPoint(x: 10, y: 19.25), controlPoint1: CGPoint(x: 9.66, y: 18.5), controlPoint2: CGPoint(x: 10, y: 18.83))
            speech.close()
            speech.move(to: CGPoint(x: 2.5, y: 3.5))
            speech.addCurve(to: CGPoint(x: 6, y: 0), controlPoint1: CGPoint(x: 2.5, y: 1.57), controlPoint2: CGPoint(x: 4.07, y: 0))
            speech.addCurve(to: CGPoint(x: 9.5, y: 3.5), controlPoint1: CGPoint(x: 7.93, y: 0), controlPoint2: CGPoint(x: 9.5, y: 1.57))
            speech.addLine(to: CGPoint(x: 9.5, y: 10.5))
            speech.addCurve(to: CGPoint(x: 6, y: 14), controlPoint1: CGPoint(x: 9.5, y: 12.43), controlPoint2: CGPoint(x: 7.93, y: 14))
            speech.addCurve(to: CGPoint(x: 2.5, y: 10.5), controlPoint1: CGPoint(x: 4.07, y: 14), controlPoint2: CGPoint(x: 2.5, y: 12.43))
            speech.addLine(to: CGPoint(x: 2.5, y: 3.5))
            speech.close()
            speech.move(to: CGPoint(x: 4, y: 3.49))
            speech.addLine(to: CGPoint(x: 4, y: 10.51))
            speech.addCurve(to: CGPoint(x: 6, y: 12.5), controlPoint1: CGPoint(x: 4, y: 11.6), controlPoint2: CGPoint(x: 4.9, y: 12.5))
            speech.addCurve(to: CGPoint(x: 8, y: 10.51), controlPoint1: CGPoint(x: 7.11, y: 12.5), controlPoint2: CGPoint(x: 8, y: 11.61))
            speech.addLine(to: CGPoint(x: 8, y: 3.49))
            speech.addCurve(to: CGPoint(x: 6, y: 1.5), controlPoint1: CGPoint(x: 8, y: 2.4), controlPoint2: CGPoint(x: 7.1, y: 1.5))
            speech.addCurve(to: CGPoint(x: 4, y: 3.49), controlPoint1: CGPoint(x: 4.89, y: 1.5), controlPoint2: CGPoint(x: 4, y: 2.39))
            speech.close()
            context.saveGState()
            context.translateBy(x: 9.96, y: 11.5)
            speech.usesEvenOddFillRule = true
            UIColor.black.setFill()
            speech.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Space
        do {
            context.saveGState()
            context.translateBy(x: 132.65, y: 5)
            
            /// Background
            let background4 = UIBezierPath()
            background4.move(to: CGPoint(x: 6.41, y: 0))
            background4.addLine(to: CGPoint(x: 140.2, y: 0))
            background4.addCurve(to: CGPoint(x: 144.05, y: 0.67), controlPoint1: CGPoint(x: 142.43, y: 0), controlPoint2: CGPoint(x: 143.24, y: 0.23))
            background4.addCurve(to: CGPoint(x: 145.94, y: 2.56), controlPoint1: CGPoint(x: 144.86, y: 1.1), controlPoint2: CGPoint(x: 145.5, y: 1.74))
            background4.addCurve(to: CGPoint(x: 146.61, y: 6.41), controlPoint1: CGPoint(x: 146.38, y: 3.37), controlPoint2: CGPoint(x: 146.61, y: 4.18))
            background4.addLine(to: CGPoint(x: 146.61, y: 35.59))
            background4.addCurve(to: CGPoint(x: 145.94, y: 39.44), controlPoint1: CGPoint(x: 146.61, y: 37.82), controlPoint2: CGPoint(x: 146.38, y: 38.63))
            background4.addCurve(to: CGPoint(x: 144.05, y: 41.33), controlPoint1: CGPoint(x: 145.5, y: 40.26), controlPoint2: CGPoint(x: 144.86, y: 40.9))
            background4.addCurve(to: CGPoint(x: 140.2, y: 42), controlPoint1: CGPoint(x: 143.24, y: 41.77), controlPoint2: CGPoint(x: 142.43, y: 42))
            background4.addLine(to: CGPoint(x: 6.41, y: 42))
            background4.addCurve(to: CGPoint(x: 2.56, y: 41.33), controlPoint1: CGPoint(x: 4.18, y: 42), controlPoint2: CGPoint(x: 3.37, y: 41.77))
            background4.addCurve(to: CGPoint(x: 0.67, y: 39.44), controlPoint1: CGPoint(x: 1.74, y: 40.9), controlPoint2: CGPoint(x: 1.1, y: 40.26))
            background4.addCurve(to: CGPoint(x: 0, y: 35.59), controlPoint1: CGPoint(x: 0.23, y: 38.63), controlPoint2: CGPoint(x: 0, y: 37.82))
            background4.addLine(to: CGPoint(x: 0, y: 6.41))
            background4.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
            background4.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
            background4.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
            background4.close()
            context.saveGState()
            background4.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background4.cgPath)
            context.addRect(background4.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -147.61, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 147.61, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background4.fill()
            context.restoreGState()
            background4.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background4.fill()
            context.restoreGState()
            
            /// Space
            let space = NSMutableAttributedString(string: "space")
            space.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: space.length))
            space.addAttribute(.kern, value: -0.32, range: NSRange(location: 0, length: space.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                space.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: space.length))
            }
            context.saveGState()
            space.draw(in: CGRect(x: 51.35, y: 11, width: 44, height: 21))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Button
        do {
            context.saveGState()
            context.translateBy(x: 284, y: 5)
            
            /// Background
            let background5 = UIBezierPath()
            background5.move(to: CGPoint(x: 6.41, y: 0))
            background5.addLine(to: CGPoint(x: 80.59, y: 0))
            background5.addCurve(to: CGPoint(x: 84.44, y: 0.67), controlPoint1: CGPoint(x: 82.82, y: 0), controlPoint2: CGPoint(x: 83.63, y: 0.23))
            background5.addCurve(to: CGPoint(x: 86.33, y: 2.56), controlPoint1: CGPoint(x: 85.26, y: 1.1), controlPoint2: CGPoint(x: 85.9, y: 1.74))
            background5.addCurve(to: CGPoint(x: 87, y: 6.41), controlPoint1: CGPoint(x: 86.77, y: 3.37), controlPoint2: CGPoint(x: 87, y: 4.18))
            background5.addLine(to: CGPoint(x: 87, y: 35.59))
            background5.addCurve(to: CGPoint(x: 86.33, y: 39.44), controlPoint1: CGPoint(x: 87, y: 37.82), controlPoint2: CGPoint(x: 86.77, y: 38.63))
            background5.addCurve(to: CGPoint(x: 84.44, y: 41.33), controlPoint1: CGPoint(x: 85.9, y: 40.26), controlPoint2: CGPoint(x: 85.26, y: 40.9))
            background5.addCurve(to: CGPoint(x: 80.59, y: 42), controlPoint1: CGPoint(x: 83.63, y: 41.77), controlPoint2: CGPoint(x: 82.82, y: 42))
            background5.addLine(to: CGPoint(x: 6.41, y: 42))
            background5.addCurve(to: CGPoint(x: 2.56, y: 41.33), controlPoint1: CGPoint(x: 4.18, y: 42), controlPoint2: CGPoint(x: 3.37, y: 41.77))
            background5.addCurve(to: CGPoint(x: 0.67, y: 39.44), controlPoint1: CGPoint(x: 1.74, y: 40.9), controlPoint2: CGPoint(x: 1.1, y: 40.26))
            background5.addCurve(to: CGPoint(x: 0, y: 35.59), controlPoint1: CGPoint(x: 0.23, y: 38.63), controlPoint2: CGPoint(x: 0, y: 37.82))
            background5.addLine(to: CGPoint(x: 0, y: 6.41))
            background5.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
            background5.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
            background5.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
            background5.close()
            context.saveGState()
            background5.usesEvenOddFillRule = true
            UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
            background5.fill()
            background5.usesEvenOddFillRule = true
            context.saveGState()
            UIRectClip(background5.bounds)
            context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
            context.setAlpha(0.35)
            context.beginTransparencyLayer(in: background5.bounds, auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                background5.fill()
                context.setBlendMode(.destinationOut)
                context.beginTransparencyLayer(in: background5.bounds, auxiliaryInfo: nil)
                do {
                    context.translateBy(x: -87, y: 0)
                    do {
                        let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                        let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                        let baseOffset = context.convertToDeviceSpace(CGPoint(x: 87, y: -1)).applying(baseTransform)
                        let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                        let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                        context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                    }
                    UIColor.black.setFill()
                    background5.fill()
                }
                context.endTransparencyLayer()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            /// ↳ Label
            let label = NSMutableAttributedString(string: "Label")
            label.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: label.length))
            label.addAttribute(.kern, value: -0.32, range: NSRange(location: 0, length: label.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
            }
            label.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: label.length))
            context.saveGState()
            label.draw(in: CGRect(x: 8, y: 11, width: 72, height: 21))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawKeyboards_SimpleButtonDefaultLandscape(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 667, height: 40), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 667, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 667, y: resizedFrame.height / 40)
        
        /// Buttons
        do {
            context.saveGState()
            context.translateBy(x: 73, y: 4)
            
            /// Symbols
            do {
                context.saveGState()
                
                /// Background
                let background = UIBezierPath()
                background.move(to: CGPoint(x: 5, y: 0))
                background.addLine(to: CGPoint(x: 127, y: 0))
                background.addCurve(to: CGPoint(x: 132, y: 5), controlPoint1: CGPoint(x: 129.76, y: 0), controlPoint2: CGPoint(x: 132, y: 2.24))
                background.addLine(to: CGPoint(x: 132, y: 27))
                background.addCurve(to: CGPoint(x: 127, y: 32), controlPoint1: CGPoint(x: 132, y: 29.76), controlPoint2: CGPoint(x: 129.76, y: 32))
                background.addLine(to: CGPoint(x: 5, y: 32))
                background.addCurve(to: CGPoint(x: 0, y: 27), controlPoint1: CGPoint(x: 2.24, y: 32), controlPoint2: CGPoint(x: 0, y: 29.76))
                background.addLine(to: CGPoint(x: 0, y: 5))
                background.addCurve(to: CGPoint(x: 5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.24), controlPoint2: CGPoint(x: 2.24, y: 0))
                background.close()
                context.saveGState()
                background.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(background.cgPath)
                context.addRect(background.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -133, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 133, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                background.fill()
                context.restoreGState()
                background.usesEvenOddFillRule = true
                UIColor(hue: 0.593, saturation: 0.095, brightness: 0.741, alpha: 0.5).setFill()
                background.fill()
                context.saveGState()
                context.setBlendMode(.softLight)
                context.beginTransparencyLayer(in: background.bounds, auxiliaryInfo: nil)
                do {
                    UIColor(white: 0, alpha: 0.5).setFill()
                    background.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.saveGState()
                context.setBlendMode(.softLight)
                context.beginTransparencyLayer(in: background.bounds, auxiliaryInfo: nil)
                do {
                    UIColor(white: 1, alpha: 0.1).setFill()
                    background.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.restoreGState()
                
                /// 123
                let _123 = NSMutableAttributedString(string: "123")
                _123.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: _123.length))
                _123.addAttribute(.kern, value: -0.32, range: NSRange(location: 0, length: _123.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _123.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _123.length))
                }
                context.saveGState()
                _123.draw(in: CGRect(x: 52, y: 7, width: 27, height: 21))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Space
            do {
                context.saveGState()
                context.translateBy(x: 139, y: 0)
                
                /// Background
                let background2 = UIBezierPath()
                background2.move(to: CGPoint(x: 6.41, y: 0))
                background2.addLine(to: CGPoint(x: 237.59, y: 0))
                background2.addCurve(to: CGPoint(x: 241.44, y: 0.67), controlPoint1: CGPoint(x: 239.82, y: 0), controlPoint2: CGPoint(x: 240.63, y: 0.23))
                background2.addCurve(to: CGPoint(x: 243.33, y: 2.56), controlPoint1: CGPoint(x: 242.26, y: 1.1), controlPoint2: CGPoint(x: 242.9, y: 1.74))
                background2.addCurve(to: CGPoint(x: 244, y: 6.41), controlPoint1: CGPoint(x: 243.77, y: 3.37), controlPoint2: CGPoint(x: 244, y: 4.18))
                background2.addLine(to: CGPoint(x: 244, y: 25.59))
                background2.addCurve(to: CGPoint(x: 243.33, y: 29.44), controlPoint1: CGPoint(x: 244, y: 27.82), controlPoint2: CGPoint(x: 243.77, y: 28.63))
                background2.addCurve(to: CGPoint(x: 241.44, y: 31.33), controlPoint1: CGPoint(x: 242.9, y: 30.26), controlPoint2: CGPoint(x: 242.26, y: 30.9))
                background2.addCurve(to: CGPoint(x: 237.59, y: 32), controlPoint1: CGPoint(x: 240.63, y: 31.77), controlPoint2: CGPoint(x: 239.82, y: 32))
                background2.addLine(to: CGPoint(x: 6.41, y: 32))
                background2.addCurve(to: CGPoint(x: 2.56, y: 31.33), controlPoint1: CGPoint(x: 4.18, y: 32), controlPoint2: CGPoint(x: 3.37, y: 31.77))
                background2.addCurve(to: CGPoint(x: 0.67, y: 29.44), controlPoint1: CGPoint(x: 1.74, y: 30.9), controlPoint2: CGPoint(x: 1.1, y: 30.26))
                background2.addCurve(to: CGPoint(x: 0, y: 25.59), controlPoint1: CGPoint(x: 0.23, y: 28.63), controlPoint2: CGPoint(x: 0, y: 27.82))
                background2.addLine(to: CGPoint(x: 0, y: 6.41))
                background2.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
                background2.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
                background2.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
                background2.close()
                context.saveGState()
                background2.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(background2.cgPath)
                context.addRect(background2.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -245, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 245, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                background2.fill()
                context.restoreGState()
                background2.usesEvenOddFillRule = true
                UIColor.white.setFill()
                background2.fill()
                context.restoreGState()
                
                /// Space
                let space = NSMutableAttributedString(string: "space")
                space.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: space.length))
                space.addAttribute(.kern, value: -0.32, range: NSRange(location: 0, length: space.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    paragraphStyle.maximumLineHeight = 20
                    paragraphStyle.minimumLineHeight = 20
                    space.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: space.length))
                }
                context.saveGState()
                space.draw(in: CGRect(x: 100, y: 5, width: 44, height: 22))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Button
            do {
                context.saveGState()
                context.translateBy(x: 390, y: 0)
                
                /// Background
                let background3 = UIBezierPath()
                background3.move(to: CGPoint(x: 6.41, y: 0))
                background3.addLine(to: CGPoint(x: 125.59, y: 0))
                background3.addCurve(to: CGPoint(x: 129.44, y: 0.67), controlPoint1: CGPoint(x: 127.82, y: 0), controlPoint2: CGPoint(x: 128.63, y: 0.23))
                background3.addCurve(to: CGPoint(x: 131.33, y: 2.56), controlPoint1: CGPoint(x: 130.26, y: 1.1), controlPoint2: CGPoint(x: 130.9, y: 1.74))
                background3.addCurve(to: CGPoint(x: 132, y: 6.41), controlPoint1: CGPoint(x: 131.77, y: 3.37), controlPoint2: CGPoint(x: 132, y: 4.18))
                background3.addLine(to: CGPoint(x: 132, y: 25.59))
                background3.addCurve(to: CGPoint(x: 131.33, y: 29.44), controlPoint1: CGPoint(x: 132, y: 27.82), controlPoint2: CGPoint(x: 131.77, y: 28.63))
                background3.addCurve(to: CGPoint(x: 129.44, y: 31.33), controlPoint1: CGPoint(x: 130.9, y: 30.26), controlPoint2: CGPoint(x: 130.26, y: 30.9))
                background3.addCurve(to: CGPoint(x: 125.59, y: 32), controlPoint1: CGPoint(x: 128.63, y: 31.77), controlPoint2: CGPoint(x: 127.82, y: 32))
                background3.addLine(to: CGPoint(x: 6.41, y: 32))
                background3.addCurve(to: CGPoint(x: 2.56, y: 31.33), controlPoint1: CGPoint(x: 4.18, y: 32), controlPoint2: CGPoint(x: 3.37, y: 31.77))
                background3.addCurve(to: CGPoint(x: 0.67, y: 29.44), controlPoint1: CGPoint(x: 1.74, y: 30.9), controlPoint2: CGPoint(x: 1.1, y: 30.26))
                background3.addCurve(to: CGPoint(x: 0, y: 25.59), controlPoint1: CGPoint(x: 0.23, y: 28.63), controlPoint2: CGPoint(x: 0, y: 27.82))
                background3.addLine(to: CGPoint(x: 0, y: 6.41))
                background3.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
                background3.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
                background3.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
                background3.close()
                context.saveGState()
                background3.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(background3.cgPath)
                context.addRect(background3.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -133, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 133, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                background3.fill()
                context.restoreGState()
                background3.usesEvenOddFillRule = true
                UIColor(hue: 0.593, saturation: 0.095, brightness: 0.741, alpha: 0.5).setFill()
                background3.fill()
                context.saveGState()
                context.setBlendMode(.softLight)
                context.beginTransparencyLayer(in: background3.bounds, auxiliaryInfo: nil)
                do {
                    UIColor(white: 0, alpha: 0.5).setFill()
                    background3.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.saveGState()
                context.setBlendMode(.softLight)
                context.beginTransparencyLayer(in: background3.bounds, auxiliaryInfo: nil)
                do {
                    UIColor(white: 1, alpha: 0.1).setFill()
                    background3.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.restoreGState()
                
                /// ↳ Label
                let label = NSMutableAttributedString(string: "Label")
                label.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: label.length))
                label.addAttribute(.kern, value: -0.32, range: NSRange(location: 0, length: label.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
                }
                context.saveGState()
                label.draw(at: CGPoint(x: 46, y: 7))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawKeyboards_SimpleButtonActiveLandscape(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 667, height: 40), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 667, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 667, y: resizedFrame.height / 40)
        
        /// Buttons
        do {
            context.saveGState()
            context.translateBy(x: 73, y: 4)
            
            /// Symbols
            do {
                context.saveGState()
                
                /// Background
                let background = UIBezierPath()
                background.move(to: CGPoint(x: 5, y: 0))
                background.addLine(to: CGPoint(x: 127, y: 0))
                background.addCurve(to: CGPoint(x: 132, y: 5), controlPoint1: CGPoint(x: 129.76, y: 0), controlPoint2: CGPoint(x: 132, y: 2.24))
                background.addLine(to: CGPoint(x: 132, y: 27))
                background.addCurve(to: CGPoint(x: 127, y: 32), controlPoint1: CGPoint(x: 132, y: 29.76), controlPoint2: CGPoint(x: 129.76, y: 32))
                background.addLine(to: CGPoint(x: 5, y: 32))
                background.addCurve(to: CGPoint(x: 0, y: 27), controlPoint1: CGPoint(x: 2.24, y: 32), controlPoint2: CGPoint(x: 0, y: 29.76))
                background.addLine(to: CGPoint(x: 0, y: 5))
                background.addCurve(to: CGPoint(x: 5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.24), controlPoint2: CGPoint(x: 2.24, y: 0))
                background.close()
                context.saveGState()
                background.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(background.cgPath)
                context.addRect(background.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -133, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 133, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                background.fill()
                context.restoreGState()
                background.usesEvenOddFillRule = true
                UIColor(hue: 0.593, saturation: 0.095, brightness: 0.741, alpha: 0.5).setFill()
                background.fill()
                context.saveGState()
                context.setBlendMode(.softLight)
                context.beginTransparencyLayer(in: background.bounds, auxiliaryInfo: nil)
                do {
                    UIColor(white: 0, alpha: 0.5).setFill()
                    background.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.saveGState()
                context.setBlendMode(.softLight)
                context.beginTransparencyLayer(in: background.bounds, auxiliaryInfo: nil)
                do {
                    UIColor(white: 1, alpha: 0.1).setFill()
                    background.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.restoreGState()
                
                /// 123
                let _123 = NSMutableAttributedString(string: "123")
                _123.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: _123.length))
                _123.addAttribute(.kern, value: -0.32, range: NSRange(location: 0, length: _123.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _123.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _123.length))
                }
                context.saveGState()
                _123.draw(in: CGRect(x: 52, y: 7, width: 27, height: 21))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Space
            do {
                context.saveGState()
                context.translateBy(x: 139, y: 0)
                
                /// Background
                let background2 = UIBezierPath()
                background2.move(to: CGPoint(x: 6.41, y: 0))
                background2.addLine(to: CGPoint(x: 237.59, y: 0))
                background2.addCurve(to: CGPoint(x: 241.44, y: 0.67), controlPoint1: CGPoint(x: 239.82, y: 0), controlPoint2: CGPoint(x: 240.63, y: 0.23))
                background2.addCurve(to: CGPoint(x: 243.33, y: 2.56), controlPoint1: CGPoint(x: 242.26, y: 1.1), controlPoint2: CGPoint(x: 242.9, y: 1.74))
                background2.addCurve(to: CGPoint(x: 244, y: 6.41), controlPoint1: CGPoint(x: 243.77, y: 3.37), controlPoint2: CGPoint(x: 244, y: 4.18))
                background2.addLine(to: CGPoint(x: 244, y: 25.59))
                background2.addCurve(to: CGPoint(x: 243.33, y: 29.44), controlPoint1: CGPoint(x: 244, y: 27.82), controlPoint2: CGPoint(x: 243.77, y: 28.63))
                background2.addCurve(to: CGPoint(x: 241.44, y: 31.33), controlPoint1: CGPoint(x: 242.9, y: 30.26), controlPoint2: CGPoint(x: 242.26, y: 30.9))
                background2.addCurve(to: CGPoint(x: 237.59, y: 32), controlPoint1: CGPoint(x: 240.63, y: 31.77), controlPoint2: CGPoint(x: 239.82, y: 32))
                background2.addLine(to: CGPoint(x: 6.41, y: 32))
                background2.addCurve(to: CGPoint(x: 2.56, y: 31.33), controlPoint1: CGPoint(x: 4.18, y: 32), controlPoint2: CGPoint(x: 3.37, y: 31.77))
                background2.addCurve(to: CGPoint(x: 0.67, y: 29.44), controlPoint1: CGPoint(x: 1.74, y: 30.9), controlPoint2: CGPoint(x: 1.1, y: 30.26))
                background2.addCurve(to: CGPoint(x: 0, y: 25.59), controlPoint1: CGPoint(x: 0.23, y: 28.63), controlPoint2: CGPoint(x: 0, y: 27.82))
                background2.addLine(to: CGPoint(x: 0, y: 6.41))
                background2.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
                background2.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
                background2.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
                background2.close()
                context.saveGState()
                background2.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(background2.cgPath)
                context.addRect(background2.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -245, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 245, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                background2.fill()
                context.restoreGState()
                background2.usesEvenOddFillRule = true
                UIColor.white.setFill()
                background2.fill()
                context.restoreGState()
                
                /// Space
                let space = NSMutableAttributedString(string: "space")
                space.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: space.length))
                space.addAttribute(.kern, value: -0.32, range: NSRange(location: 0, length: space.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    paragraphStyle.maximumLineHeight = 20
                    paragraphStyle.minimumLineHeight = 20
                    space.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: space.length))
                }
                context.saveGState()
                space.draw(in: CGRect(x: 100, y: 5, width: 44, height: 22))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Button
            do {
                context.saveGState()
                context.translateBy(x: 390, y: 0)
                
                /// Background
                let background3 = UIBezierPath()
                background3.move(to: CGPoint(x: 6.41, y: 0))
                background3.addLine(to: CGPoint(x: 125.59, y: 0))
                background3.addCurve(to: CGPoint(x: 129.44, y: 0.67), controlPoint1: CGPoint(x: 127.82, y: 0), controlPoint2: CGPoint(x: 128.63, y: 0.23))
                background3.addCurve(to: CGPoint(x: 131.33, y: 2.56), controlPoint1: CGPoint(x: 130.26, y: 1.1), controlPoint2: CGPoint(x: 130.9, y: 1.74))
                background3.addCurve(to: CGPoint(x: 132, y: 6.41), controlPoint1: CGPoint(x: 131.77, y: 3.37), controlPoint2: CGPoint(x: 132, y: 4.18))
                background3.addLine(to: CGPoint(x: 132, y: 25.59))
                background3.addCurve(to: CGPoint(x: 131.33, y: 29.44), controlPoint1: CGPoint(x: 132, y: 27.82), controlPoint2: CGPoint(x: 131.77, y: 28.63))
                background3.addCurve(to: CGPoint(x: 129.44, y: 31.33), controlPoint1: CGPoint(x: 130.9, y: 30.26), controlPoint2: CGPoint(x: 130.26, y: 30.9))
                background3.addCurve(to: CGPoint(x: 125.59, y: 32), controlPoint1: CGPoint(x: 128.63, y: 31.77), controlPoint2: CGPoint(x: 127.82, y: 32))
                background3.addLine(to: CGPoint(x: 6.41, y: 32))
                background3.addCurve(to: CGPoint(x: 2.56, y: 31.33), controlPoint1: CGPoint(x: 4.18, y: 32), controlPoint2: CGPoint(x: 3.37, y: 31.77))
                background3.addCurve(to: CGPoint(x: 0.67, y: 29.44), controlPoint1: CGPoint(x: 1.74, y: 30.9), controlPoint2: CGPoint(x: 1.1, y: 30.26))
                background3.addCurve(to: CGPoint(x: 0, y: 25.59), controlPoint1: CGPoint(x: 0.23, y: 28.63), controlPoint2: CGPoint(x: 0, y: 27.82))
                background3.addLine(to: CGPoint(x: 0, y: 6.41))
                background3.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
                background3.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
                background3.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
                background3.close()
                context.saveGState()
                background3.usesEvenOddFillRule = true
                UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
                background3.fill()
                background3.usesEvenOddFillRule = true
                context.saveGState()
                UIRectClip(background3.bounds)
                context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
                context.setAlpha(0.35)
                context.beginTransparencyLayer(in: background3.bounds, auxiliaryInfo: nil)
                do {
                    UIColor.black.setFill()
                    background3.fill()
                    context.setBlendMode(.destinationOut)
                    context.beginTransparencyLayer(in: background3.bounds, auxiliaryInfo: nil)
                    do {
                        context.translateBy(x: -132, y: 0)
                        do {
                            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 132, y: -1)).applying(baseTransform)
                            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                            let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                        }
                        UIColor.black.setFill()
                        background3.fill()
                    }
                    context.endTransparencyLayer()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.restoreGState()
                
                /// Label
                let label = NSMutableAttributedString(string: "Label")
                label.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: label.length))
                label.addAttribute(.kern, value: -0.32, range: NSRange(location: 0, length: label.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
                }
                label.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: label.length))
                context.saveGState()
                label.draw(at: CGPoint(x: 46, y: 7))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawKeyboards_ComplexButtonDefaultLandscape(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 667, height: 40), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 667, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 667, y: resizedFrame.height / 40)
        
        /// Buttons
        do {
            context.saveGState()
            context.translateBy(x: 73, y: 4)
            
            /// Symbols
            do {
                context.saveGState()
                context.translateBy(x: 69, y: 0)
                
                /// Background
                let background = UIBezierPath()
                background.move(to: CGPoint(x: 5, y: 0))
                background.addLine(to: CGPoint(x: 57, y: 0))
                background.addCurve(to: CGPoint(x: 62, y: 5), controlPoint1: CGPoint(x: 59.76, y: 0), controlPoint2: CGPoint(x: 62, y: 2.24))
                background.addLine(to: CGPoint(x: 62, y: 27))
                background.addCurve(to: CGPoint(x: 57, y: 32), controlPoint1: CGPoint(x: 62, y: 29.76), controlPoint2: CGPoint(x: 59.76, y: 32))
                background.addLine(to: CGPoint(x: 5, y: 32))
                background.addCurve(to: CGPoint(x: 0, y: 27), controlPoint1: CGPoint(x: 2.24, y: 32), controlPoint2: CGPoint(x: 0, y: 29.76))
                background.addLine(to: CGPoint(x: 0, y: 5))
                background.addCurve(to: CGPoint(x: 5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.24), controlPoint2: CGPoint(x: 2.24, y: 0))
                background.close()
                context.saveGState()
                background.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(background.cgPath)
                context.addRect(background.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -63, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 63, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                background.fill()
                context.restoreGState()
                background.usesEvenOddFillRule = true
                UIColor(hue: 0.593, saturation: 0.095, brightness: 0.741, alpha: 0.5).setFill()
                background.fill()
                context.saveGState()
                context.setBlendMode(.softLight)
                context.beginTransparencyLayer(in: background.bounds, auxiliaryInfo: nil)
                do {
                    UIColor(white: 0, alpha: 0.5).setFill()
                    background.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.saveGState()
                context.setBlendMode(.softLight)
                context.beginTransparencyLayer(in: background.bounds, auxiliaryInfo: nil)
                do {
                    UIColor(white: 1, alpha: 0.1).setFill()
                    background.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.restoreGState()
                
                /// 123
                let _123 = NSMutableAttributedString(string: "123")
                _123.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: _123.length))
                _123.addAttribute(.kern, value: -0.32, range: NSRange(location: 0, length: _123.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _123.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _123.length))
                }
                context.saveGState()
                _123.draw(in: CGRect(x: 18, y: 7, width: 27, height: 21))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Space
            do {
                context.saveGState()
                context.translateBy(x: 138, y: 0)
                
                /// Background
                let background2 = UIBezierPath()
                background2.move(to: CGPoint(x: 6.41, y: 0))
                background2.addLine(to: CGPoint(x: 237.59, y: 0))
                background2.addCurve(to: CGPoint(x: 241.44, y: 0.67), controlPoint1: CGPoint(x: 239.82, y: 0), controlPoint2: CGPoint(x: 240.63, y: 0.23))
                background2.addCurve(to: CGPoint(x: 243.33, y: 2.56), controlPoint1: CGPoint(x: 242.26, y: 1.1), controlPoint2: CGPoint(x: 242.9, y: 1.74))
                background2.addCurve(to: CGPoint(x: 244, y: 6.41), controlPoint1: CGPoint(x: 243.77, y: 3.37), controlPoint2: CGPoint(x: 244, y: 4.18))
                background2.addLine(to: CGPoint(x: 244, y: 25.59))
                background2.addCurve(to: CGPoint(x: 243.33, y: 29.44), controlPoint1: CGPoint(x: 244, y: 27.82), controlPoint2: CGPoint(x: 243.77, y: 28.63))
                background2.addCurve(to: CGPoint(x: 241.44, y: 31.33), controlPoint1: CGPoint(x: 242.9, y: 30.26), controlPoint2: CGPoint(x: 242.26, y: 30.9))
                background2.addCurve(to: CGPoint(x: 237.59, y: 32), controlPoint1: CGPoint(x: 240.63, y: 31.77), controlPoint2: CGPoint(x: 239.82, y: 32))
                background2.addLine(to: CGPoint(x: 6.41, y: 32))
                background2.addCurve(to: CGPoint(x: 2.56, y: 31.33), controlPoint1: CGPoint(x: 4.18, y: 32), controlPoint2: CGPoint(x: 3.37, y: 31.77))
                background2.addCurve(to: CGPoint(x: 0.67, y: 29.44), controlPoint1: CGPoint(x: 1.74, y: 30.9), controlPoint2: CGPoint(x: 1.1, y: 30.26))
                background2.addCurve(to: CGPoint(x: 0, y: 25.59), controlPoint1: CGPoint(x: 0.23, y: 28.63), controlPoint2: CGPoint(x: 0, y: 27.82))
                background2.addLine(to: CGPoint(x: 0, y: 6.41))
                background2.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
                background2.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
                background2.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
                background2.close()
                context.saveGState()
                background2.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(background2.cgPath)
                context.addRect(background2.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -245, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 245, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                background2.fill()
                context.restoreGState()
                background2.usesEvenOddFillRule = true
                UIColor.white.setFill()
                background2.fill()
                context.restoreGState()
                
                /// Space
                let space = NSMutableAttributedString(string: "space")
                space.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: space.length))
                space.addAttribute(.kern, value: -0.32, range: NSRange(location: 0, length: space.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    paragraphStyle.maximumLineHeight = 20
                    paragraphStyle.minimumLineHeight = 20
                    space.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: space.length))
                }
                context.saveGState()
                space.draw(in: CGRect(x: 100, y: 5, width: 44, height: 22))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Button
            do {
                context.saveGState()
                context.translateBy(x: 389, y: 0)
                
                /// Background
                let background3 = UIBezierPath()
                background3.move(to: CGPoint(x: 6.41, y: 0))
                background3.addLine(to: CGPoint(x: 33.59, y: 0))
                background3.addCurve(to: CGPoint(x: 37.44, y: 0.67), controlPoint1: CGPoint(x: 35.82, y: 0), controlPoint2: CGPoint(x: 36.63, y: 0.23))
                background3.addCurve(to: CGPoint(x: 39.33, y: 2.56), controlPoint1: CGPoint(x: 38.26, y: 1.1), controlPoint2: CGPoint(x: 38.9, y: 1.74))
                background3.addCurve(to: CGPoint(x: 40, y: 6.41), controlPoint1: CGPoint(x: 39.77, y: 3.37), controlPoint2: CGPoint(x: 40, y: 4.18))
                background3.addLine(to: CGPoint(x: 40, y: 25.59))
                background3.addCurve(to: CGPoint(x: 39.33, y: 29.44), controlPoint1: CGPoint(x: 40, y: 27.82), controlPoint2: CGPoint(x: 39.77, y: 28.63))
                background3.addCurve(to: CGPoint(x: 37.44, y: 31.33), controlPoint1: CGPoint(x: 38.9, y: 30.26), controlPoint2: CGPoint(x: 38.26, y: 30.9))
                background3.addCurve(to: CGPoint(x: 33.59, y: 32), controlPoint1: CGPoint(x: 36.63, y: 31.77), controlPoint2: CGPoint(x: 35.82, y: 32))
                background3.addLine(to: CGPoint(x: 6.41, y: 32))
                background3.addCurve(to: CGPoint(x: 2.56, y: 31.33), controlPoint1: CGPoint(x: 4.18, y: 32), controlPoint2: CGPoint(x: 3.37, y: 31.77))
                background3.addCurve(to: CGPoint(x: 0.67, y: 29.44), controlPoint1: CGPoint(x: 1.74, y: 30.9), controlPoint2: CGPoint(x: 1.1, y: 30.26))
                background3.addCurve(to: CGPoint(x: 0, y: 25.59), controlPoint1: CGPoint(x: 0.23, y: 28.63), controlPoint2: CGPoint(x: 0, y: 27.82))
                background3.addLine(to: CGPoint(x: 0, y: 6.41))
                background3.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
                background3.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
                background3.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
                background3.close()
                context.saveGState()
                background3.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(background3.cgPath)
                context.addRect(background3.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -41, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 41, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                background3.fill()
                context.restoreGState()
                background3.usesEvenOddFillRule = true
                UIColor(hue: 0.593, saturation: 0.095, brightness: 0.741, alpha: 0.5).setFill()
                background3.fill()
                context.saveGState()
                context.setBlendMode(.softLight)
                context.beginTransparencyLayer(in: background3.bounds, auxiliaryInfo: nil)
                do {
                    UIColor(white: 0, alpha: 0.5).setFill()
                    background3.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.saveGState()
                context.setBlendMode(.softLight)
                context.beginTransparencyLayer(in: background3.bounds, auxiliaryInfo: nil)
                do {
                    UIColor(white: 1, alpha: 0.1).setFill()
                    background3.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.restoreGState()
                
                /// ↳ Label
                let label = NSMutableAttributedString(string: "Label")
                label.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 13)!, range: NSRange(location: 0, length: label.length))
                label.addAttribute(.kern, value: -0.26, range: NSRange(location: 0, length: label.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
                }
                context.saveGState()
                label.draw(at: CGPoint(x: 4, y: 9))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Mic
            do {
                context.saveGState()
                context.translateBy(x: 483, y: 0)
                
                /// Background
                let background4 = UIBezierPath()
                background4.move(to: CGPoint(x: 6.41, y: 0))
                background4.addLine(to: CGPoint(x: 31.59, y: 0))
                background4.addCurve(to: CGPoint(x: 35.44, y: 0.67), controlPoint1: CGPoint(x: 33.82, y: 0), controlPoint2: CGPoint(x: 34.63, y: 0.23))
                background4.addCurve(to: CGPoint(x: 37.33, y: 2.56), controlPoint1: CGPoint(x: 36.26, y: 1.1), controlPoint2: CGPoint(x: 36.9, y: 1.74))
                background4.addCurve(to: CGPoint(x: 38, y: 6.41), controlPoint1: CGPoint(x: 37.77, y: 3.37), controlPoint2: CGPoint(x: 38, y: 4.18))
                background4.addLine(to: CGPoint(x: 38, y: 25.59))
                background4.addCurve(to: CGPoint(x: 37.33, y: 29.44), controlPoint1: CGPoint(x: 38, y: 27.82), controlPoint2: CGPoint(x: 37.77, y: 28.63))
                background4.addCurve(to: CGPoint(x: 35.44, y: 31.33), controlPoint1: CGPoint(x: 36.9, y: 30.26), controlPoint2: CGPoint(x: 36.26, y: 30.9))
                background4.addCurve(to: CGPoint(x: 31.59, y: 32), controlPoint1: CGPoint(x: 34.63, y: 31.77), controlPoint2: CGPoint(x: 33.82, y: 32))
                background4.addLine(to: CGPoint(x: 6.41, y: 32))
                background4.addCurve(to: CGPoint(x: 2.56, y: 31.33), controlPoint1: CGPoint(x: 4.18, y: 32), controlPoint2: CGPoint(x: 3.37, y: 31.77))
                background4.addCurve(to: CGPoint(x: 0.67, y: 29.44), controlPoint1: CGPoint(x: 1.74, y: 30.9), controlPoint2: CGPoint(x: 1.1, y: 30.26))
                background4.addCurve(to: CGPoint(x: 0, y: 25.59), controlPoint1: CGPoint(x: 0.23, y: 28.63), controlPoint2: CGPoint(x: 0, y: 27.82))
                background4.addLine(to: CGPoint(x: 0, y: 6.41))
                background4.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
                background4.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
                background4.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
                background4.close()
                context.saveGState()
                background4.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(background4.cgPath)
                context.addRect(background4.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -39, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 39, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                background4.fill()
                context.restoreGState()
                background4.usesEvenOddFillRule = true
                UIColor(hue: 0.593, saturation: 0.095, brightness: 0.741, alpha: 0.5).setFill()
                background4.fill()
                context.saveGState()
                context.setBlendMode(.softLight)
                context.beginTransparencyLayer(in: background4.bounds, auxiliaryInfo: nil)
                do {
                    UIColor(white: 0, alpha: 0.5).setFill()
                    background4.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.saveGState()
                context.setBlendMode(.softLight)
                context.beginTransparencyLayer(in: background4.bounds, auxiliaryInfo: nil)
                do {
                    UIColor(white: 1, alpha: 0.1).setFill()
                    background4.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.restoreGState()
                
                /// Speech
                let speech = UIBezierPath()
                speech.move(to: CGPoint(x: 10, y: 19.25))
                speech.addCurve(to: CGPoint(x: 9.25, y: 20), controlPoint1: CGPoint(x: 10, y: 19.66), controlPoint2: CGPoint(x: 9.66, y: 20))
                speech.addLine(to: CGPoint(x: 2.75, y: 20))
                speech.addCurve(to: CGPoint(x: 2, y: 19.25), controlPoint1: CGPoint(x: 2.34, y: 20), controlPoint2: CGPoint(x: 2, y: 19.67))
                speech.addCurve(to: CGPoint(x: 2.75, y: 18.5), controlPoint1: CGPoint(x: 2, y: 18.84), controlPoint2: CGPoint(x: 2.34, y: 18.5))
                speech.addLine(to: CGPoint(x: 5.25, y: 18.5))
                speech.addLine(to: CGPoint(x: 5.25, y: 16.5))
                speech.addCurve(to: CGPoint(x: 0, y: 11.48), controlPoint1: CGPoint(x: 2.75, y: 16.5), controlPoint2: CGPoint(x: 0, y: 13.47))
                speech.addCurve(to: CGPoint(x: 0, y: 8.25), controlPoint1: CGPoint(x: 0, y: 9.99), controlPoint2: CGPoint(x: 0, y: 8.25))
                speech.addCurve(to: CGPoint(x: 0.75, y: 7.5), controlPoint1: CGPoint(x: 0, y: 7.84), controlPoint2: CGPoint(x: 0.33, y: 7.5))
                speech.addCurve(to: CGPoint(x: 1.5, y: 8.25), controlPoint1: CGPoint(x: 1.16, y: 7.5), controlPoint2: CGPoint(x: 1.5, y: 7.84))
                speech.addLine(to: CGPoint(x: 1.5, y: 11.48))
                speech.addCurve(to: CGPoint(x: 6, y: 14.98), controlPoint1: CGPoint(x: 1.5, y: 12.98), controlPoint2: CGPoint(x: 3.5, y: 14.98))
                speech.addCurve(to: CGPoint(x: 10.5, y: 11.48), controlPoint1: CGPoint(x: 8.5, y: 14.98), controlPoint2: CGPoint(x: 10.5, y: 12.98))
                speech.addLine(to: CGPoint(x: 10.5, y: 8.25))
                speech.addCurve(to: CGPoint(x: 11.25, y: 7.5), controlPoint1: CGPoint(x: 10.5, y: 7.83), controlPoint2: CGPoint(x: 10.83, y: 7.5))
                speech.addCurve(to: CGPoint(x: 12, y: 8.26), controlPoint1: CGPoint(x: 11.66, y: 7.5), controlPoint2: CGPoint(x: 12, y: 7.84))
                speech.addLine(to: CGPoint(x: 12, y: 11.48))
                speech.addCurve(to: CGPoint(x: 6.75, y: 16.5), controlPoint1: CGPoint(x: 12, y: 13.47), controlPoint2: CGPoint(x: 9.25, y: 16.5))
                speech.addLine(to: CGPoint(x: 6.75, y: 18.5))
                speech.addLine(to: CGPoint(x: 9.25, y: 18.5))
                speech.addCurve(to: CGPoint(x: 10, y: 19.25), controlPoint1: CGPoint(x: 9.66, y: 18.5), controlPoint2: CGPoint(x: 10, y: 18.83))
                speech.close()
                speech.move(to: CGPoint(x: 2.5, y: 3.5))
                speech.addCurve(to: CGPoint(x: 6, y: 0), controlPoint1: CGPoint(x: 2.5, y: 1.57), controlPoint2: CGPoint(x: 4.07, y: 0))
                speech.addCurve(to: CGPoint(x: 9.5, y: 3.5), controlPoint1: CGPoint(x: 7.93, y: 0), controlPoint2: CGPoint(x: 9.5, y: 1.57))
                speech.addLine(to: CGPoint(x: 9.5, y: 10.5))
                speech.addCurve(to: CGPoint(x: 6, y: 14), controlPoint1: CGPoint(x: 9.5, y: 12.43), controlPoint2: CGPoint(x: 7.93, y: 14))
                speech.addCurve(to: CGPoint(x: 2.5, y: 10.5), controlPoint1: CGPoint(x: 4.07, y: 14), controlPoint2: CGPoint(x: 2.5, y: 12.43))
                speech.addLine(to: CGPoint(x: 2.5, y: 3.5))
                speech.close()
                speech.move(to: CGPoint(x: 4, y: 3.49))
                speech.addLine(to: CGPoint(x: 4, y: 10.51))
                speech.addCurve(to: CGPoint(x: 6, y: 12.5), controlPoint1: CGPoint(x: 4, y: 11.6), controlPoint2: CGPoint(x: 4.9, y: 12.5))
                speech.addCurve(to: CGPoint(x: 8, y: 10.51), controlPoint1: CGPoint(x: 7.11, y: 12.5), controlPoint2: CGPoint(x: 8, y: 11.61))
                speech.addLine(to: CGPoint(x: 8, y: 3.49))
                speech.addCurve(to: CGPoint(x: 6, y: 1.5), controlPoint1: CGPoint(x: 8, y: 2.4), controlPoint2: CGPoint(x: 7.1, y: 1.5))
                speech.addCurve(to: CGPoint(x: 4, y: 3.49), controlPoint1: CGPoint(x: 4.89, y: 1.5), controlPoint2: CGPoint(x: 4, y: 2.39))
                speech.close()
                context.saveGState()
                context.translateBy(x: 12.96, y: 5.5)
                speech.usesEvenOddFillRule = true
                UIColor.black.setFill()
                speech.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Brush
            do {
                context.saveGState()
                context.translateBy(x: 436, y: 0)
                
                /// Background
                let background5 = UIBezierPath()
                background5.move(to: CGPoint(x: 6.41, y: 0))
                background5.addLine(to: CGPoint(x: 33.59, y: 0))
                background5.addCurve(to: CGPoint(x: 37.44, y: 0.67), controlPoint1: CGPoint(x: 35.82, y: 0), controlPoint2: CGPoint(x: 36.63, y: 0.23))
                background5.addCurve(to: CGPoint(x: 39.33, y: 2.56), controlPoint1: CGPoint(x: 38.26, y: 1.1), controlPoint2: CGPoint(x: 38.9, y: 1.74))
                background5.addCurve(to: CGPoint(x: 40, y: 6.41), controlPoint1: CGPoint(x: 39.77, y: 3.37), controlPoint2: CGPoint(x: 40, y: 4.18))
                background5.addLine(to: CGPoint(x: 40, y: 25.59))
                background5.addCurve(to: CGPoint(x: 39.33, y: 29.44), controlPoint1: CGPoint(x: 40, y: 27.82), controlPoint2: CGPoint(x: 39.77, y: 28.63))
                background5.addCurve(to: CGPoint(x: 37.44, y: 31.33), controlPoint1: CGPoint(x: 38.9, y: 30.26), controlPoint2: CGPoint(x: 38.26, y: 30.9))
                background5.addCurve(to: CGPoint(x: 33.59, y: 32), controlPoint1: CGPoint(x: 36.63, y: 31.77), controlPoint2: CGPoint(x: 35.82, y: 32))
                background5.addLine(to: CGPoint(x: 6.41, y: 32))
                background5.addCurve(to: CGPoint(x: 2.56, y: 31.33), controlPoint1: CGPoint(x: 4.18, y: 32), controlPoint2: CGPoint(x: 3.37, y: 31.77))
                background5.addCurve(to: CGPoint(x: 0.67, y: 29.44), controlPoint1: CGPoint(x: 1.74, y: 30.9), controlPoint2: CGPoint(x: 1.1, y: 30.26))
                background5.addCurve(to: CGPoint(x: 0, y: 25.59), controlPoint1: CGPoint(x: 0.23, y: 28.63), controlPoint2: CGPoint(x: 0, y: 27.82))
                background5.addLine(to: CGPoint(x: 0, y: 6.41))
                background5.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
                background5.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
                background5.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
                background5.close()
                context.saveGState()
                background5.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(background5.cgPath)
                context.addRect(background5.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -41, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 41, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                background5.fill()
                context.restoreGState()
                background5.usesEvenOddFillRule = true
                UIColor(hue: 0.593, saturation: 0.095, brightness: 0.741, alpha: 0.5).setFill()
                background5.fill()
                context.saveGState()
                context.setBlendMode(.softLight)
                context.beginTransparencyLayer(in: background5.bounds, auxiliaryInfo: nil)
                do {
                    UIColor(white: 0, alpha: 0.5).setFill()
                    background5.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.saveGState()
                context.setBlendMode(.softLight)
                context.beginTransparencyLayer(in: background5.bounds, auxiliaryInfo: nil)
                do {
                    UIColor(white: 1, alpha: 0.1).setFill()
                    background5.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.restoreGState()
                
                /// Brush
                let brush = UIBezierPath()
                brush.move(to: CGPoint(x: 3.04, y: 2.07))
                brush.addCurve(to: CGPoint(x: 11.4, y: 0.09), controlPoint1: CGPoint(x: 5.44, y: 0.67), controlPoint2: CGPoint(x: 8.35, y: -0.31))
                brush.addCurve(to: CGPoint(x: 12.52, y: 0.35), controlPoint1: CGPoint(x: 11.71, y: 0.13), controlPoint2: CGPoint(x: 12.09, y: 0.22))
                brush.addCurve(to: CGPoint(x: 14.28, y: 1.07), controlPoint1: CGPoint(x: 13.14, y: 0.51), controlPoint2: CGPoint(x: 13.73, y: 0.75))
                brush.addCurve(to: CGPoint(x: 15.3, y: 1.39), controlPoint1: CGPoint(x: 14.66, y: 1.29), controlPoint2: CGPoint(x: 15.03, y: 1.36))
                brush.addCurve(to: CGPoint(x: 17.24, y: 1.11), controlPoint1: CGPoint(x: 15.91, y: 1.47), controlPoint2: CGPoint(x: 16.63, y: 1.27))
                brush.addCurve(to: CGPoint(x: 19.07, y: 0.85), controlPoint1: CGPoint(x: 17.84, y: 0.95), controlPoint2: CGPoint(x: 18.62, y: 0.9))
                brush.addLine(to: CGPoint(x: 23.18, y: 0.64))
                brush.addCurve(to: CGPoint(x: 24, y: 1.39), controlPoint1: CGPoint(x: 23.61, y: 0.62), controlPoint2: CGPoint(x: 23.98, y: 0.96))
                brush.addCurve(to: CGPoint(x: 23.48, y: 2.18), controlPoint1: CGPoint(x: 24.02, y: 1.74), controlPoint2: CGPoint(x: 23.81, y: 2.06))
                brush.addCurve(to: CGPoint(x: 16.58, y: 2.65), controlPoint1: CGPoint(x: 23.35, y: 2.22), controlPoint2: CGPoint(x: 17.19, y: 1.75))
                brush.addCurve(to: CGPoint(x: 16.29, y: 5.33), controlPoint1: CGPoint(x: 15.96, y: 3.54), controlPoint2: CGPoint(x: 16.27, y: 4.54))
                brush.addCurve(to: CGPoint(x: 16.13, y: 7.49), controlPoint1: CGPoint(x: 16.31, y: 6.06), controlPoint2: CGPoint(x: 16.25, y: 6.77))
                brush.addCurve(to: CGPoint(x: 13.84, y: 11.07), controlPoint1: CGPoint(x: 15.74, y: 8.71), controlPoint2: CGPoint(x: 14.98, y: 9.91))
                brush.addCurve(to: CGPoint(x: 11.79, y: 13.04), controlPoint1: CGPoint(x: 12.71, y: 12.24), controlPoint2: CGPoint(x: 12.14, y: 12.81))
                brush.addCurve(to: CGPoint(x: 7.8, y: 14.92), controlPoint1: CGPoint(x: 10.43, y: 13.95), controlPoint2: CGPoint(x: 8.66, y: 14.79))
                brush.addCurve(to: CGPoint(x: 4.39, y: 14.43), controlPoint1: CGPoint(x: 6.18, y: 15.12), controlPoint2: CGPoint(x: 5.05, y: 14.95))
                brush.addCurve(to: CGPoint(x: 3.28, y: 11.95), controlPoint1: CGPoint(x: 3.4, y: 13.65), controlPoint2: CGPoint(x: 3.28, y: 13.26))
                brush.addCurve(to: CGPoint(x: 4.39, y: 9.13), controlPoint1: CGPoint(x: 3.28, y: 10.65), controlPoint2: CGPoint(x: 3.75, y: 9.94))
                brush.addLine(to: CGPoint(x: 5.18, y: 8.14))
                brush.addCurve(to: CGPoint(x: 7.34, y: 5.83), controlPoint1: CGPoint(x: 5.68, y: 7.52), controlPoint2: CGPoint(x: 6.4, y: 6.74))
                brush.addCurve(to: CGPoint(x: 11.2, y: 3.34), controlPoint1: CGPoint(x: 8.45, y: 4.75), controlPoint2: CGPoint(x: 9.76, y: 3.91))
                brush.addLine(to: CGPoint(x: 11.77, y: 3.12))
                brush.addCurve(to: CGPoint(x: 12.21, y: 2.47), controlPoint1: CGPoint(x: 12.03, y: 3.02), controlPoint2: CGPoint(x: 12.21, y: 2.76))
                brush.addCurve(to: CGPoint(x: 11.16, y: 1.75), controlPoint1: CGPoint(x: 12.21, y: 2.36), controlPoint2: CGPoint(x: 11.8, y: 1.96))
                brush.addCurve(to: CGPoint(x: 6.41, y: 1.75), controlPoint1: CGPoint(x: 9.63, y: 1.27), controlPoint2: CGPoint(x: 7.81, y: 1.45))
                brush.addCurve(to: CGPoint(x: 3.63, y: 2.65), controlPoint1: CGPoint(x: 4.42, y: 2.18), controlPoint2: CGPoint(x: 4.84, y: 2.05))
                brush.addCurve(to: CGPoint(x: 0, y: 5.26), controlPoint1: CGPoint(x: 2.83, y: 3.05), controlPoint2: CGPoint(x: 1.62, y: 3.92))
                brush.addCurve(to: CGPoint(x: 3.04, y: 2.07), controlPoint1: CGPoint(x: 0.56, y: 4.08), controlPoint2: CGPoint(x: 1.94, y: 2.77))
                brush.close()
                brush.move(to: CGPoint(x: 8.94, y: 6.72))
                brush.addCurve(to: CGPoint(x: 7.02, y: 9.13), controlPoint1: CGPoint(x: 7.64, y: 8.08), controlPoint2: CGPoint(x: 7.8, y: 7.87))
                brush.addCurve(to: CGPoint(x: 6.54, y: 11.62), controlPoint1: CGPoint(x: 6.91, y: 9.31), controlPoint2: CGPoint(x: 6.27, y: 10.54))
                brush.addCurve(to: CGPoint(x: 8.61, y: 13.04), controlPoint1: CGPoint(x: 6.85, y: 12.82), controlPoint2: CGPoint(x: 7.31, y: 13.21))
                brush.addCurve(to: CGPoint(x: 10.84, y: 11.63), controlPoint1: CGPoint(x: 9.15, y: 12.97), controlPoint2: CGPoint(x: 9.89, y: 12.5))
                brush.addCurve(to: CGPoint(x: 13.67, y: 7.02), controlPoint1: CGPoint(x: 12.2, y: 10.39), controlPoint2: CGPoint(x: 13.17, y: 8.79))
                brush.addCurve(to: CGPoint(x: 13.85, y: 6.23), controlPoint1: CGPoint(x: 13.77, y: 6.68), controlPoint2: CGPoint(x: 13.83, y: 6.41))
                brush.addCurve(to: CGPoint(x: 13.85, y: 4.43), controlPoint1: CGPoint(x: 13.91, y: 5.8), controlPoint2: CGPoint(x: 13.94, y: 5.33))
                brush.addCurve(to: CGPoint(x: 13.84, y: 4.34), controlPoint1: CGPoint(x: 13.85, y: 4.4), controlPoint2: CGPoint(x: 13.85, y: 4.37))
                brush.addCurve(to: CGPoint(x: 13.24, y: 4), controlPoint1: CGPoint(x: 13.77, y: 4.08), controlPoint2: CGPoint(x: 13.5, y: 3.93))
                brush.addCurve(to: CGPoint(x: 8.94, y: 6.72), controlPoint1: CGPoint(x: 12.59, y: 4.17), controlPoint2: CGPoint(x: 10.24, y: 5.35))
                brush.close()
                context.saveGState()
                context.translateBy(x: 8, y: 9)
                brush.usesEvenOddFillRule = true
                UIColor.black.setFill()
                brush.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Smile
            do {
                context.saveGState()
                
                /// Background
                let background6 = UIBezierPath()
                background6.move(to: CGPoint(x: 6.41, y: 0))
                background6.addLine(to: CGPoint(x: 55.59, y: 0))
                background6.addCurve(to: CGPoint(x: 59.44, y: 0.67), controlPoint1: CGPoint(x: 57.82, y: 0), controlPoint2: CGPoint(x: 58.63, y: 0.23))
                background6.addCurve(to: CGPoint(x: 61.33, y: 2.56), controlPoint1: CGPoint(x: 60.26, y: 1.1), controlPoint2: CGPoint(x: 60.9, y: 1.74))
                background6.addCurve(to: CGPoint(x: 62, y: 6.41), controlPoint1: CGPoint(x: 61.77, y: 3.37), controlPoint2: CGPoint(x: 62, y: 4.18))
                background6.addLine(to: CGPoint(x: 62, y: 25.59))
                background6.addCurve(to: CGPoint(x: 61.33, y: 29.44), controlPoint1: CGPoint(x: 62, y: 27.82), controlPoint2: CGPoint(x: 61.77, y: 28.63))
                background6.addCurve(to: CGPoint(x: 59.44, y: 31.33), controlPoint1: CGPoint(x: 60.9, y: 30.26), controlPoint2: CGPoint(x: 60.26, y: 30.9))
                background6.addCurve(to: CGPoint(x: 55.59, y: 32), controlPoint1: CGPoint(x: 58.63, y: 31.77), controlPoint2: CGPoint(x: 57.82, y: 32))
                background6.addLine(to: CGPoint(x: 6.41, y: 32))
                background6.addCurve(to: CGPoint(x: 2.56, y: 31.33), controlPoint1: CGPoint(x: 4.18, y: 32), controlPoint2: CGPoint(x: 3.37, y: 31.77))
                background6.addCurve(to: CGPoint(x: 0.67, y: 29.44), controlPoint1: CGPoint(x: 1.74, y: 30.9), controlPoint2: CGPoint(x: 1.1, y: 30.26))
                background6.addCurve(to: CGPoint(x: 0, y: 25.59), controlPoint1: CGPoint(x: 0.23, y: 28.63), controlPoint2: CGPoint(x: 0, y: 27.82))
                background6.addLine(to: CGPoint(x: 0, y: 6.41))
                background6.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
                background6.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
                background6.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
                background6.close()
                context.saveGState()
                background6.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(background6.cgPath)
                context.addRect(background6.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -63, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 63, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                background6.fill()
                context.restoreGState()
                background6.usesEvenOddFillRule = true
                UIColor(hue: 0.593, saturation: 0.095, brightness: 0.741, alpha: 0.5).setFill()
                background6.fill()
                context.saveGState()
                context.setBlendMode(.softLight)
                context.beginTransparencyLayer(in: background6.bounds, auxiliaryInfo: nil)
                do {
                    UIColor(white: 0, alpha: 0.5).setFill()
                    background6.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.saveGState()
                context.setBlendMode(.softLight)
                context.beginTransparencyLayer(in: background6.bounds, auxiliaryInfo: nil)
                do {
                    UIColor(white: 1, alpha: 0.1).setFill()
                    background6.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.restoreGState()
                
                /// Emoji
                let emoji = UIBezierPath()
                emoji.move(to: CGPoint(x: 9.75, y: 19.5))
                emoji.addCurve(to: CGPoint(x: 0, y: 9.75), controlPoint1: CGPoint(x: 4.37, y: 19.5), controlPoint2: CGPoint(x: 0, y: 15.13))
                emoji.addCurve(to: CGPoint(x: 9.75, y: 0), controlPoint1: CGPoint(x: 0, y: 4.37), controlPoint2: CGPoint(x: 4.37, y: 0))
                emoji.addCurve(to: CGPoint(x: 19.5, y: 9.75), controlPoint1: CGPoint(x: 15.13, y: 0), controlPoint2: CGPoint(x: 19.5, y: 4.37))
                emoji.addCurve(to: CGPoint(x: 9.75, y: 19.5), controlPoint1: CGPoint(x: 19.5, y: 15.13), controlPoint2: CGPoint(x: 15.13, y: 19.5))
                emoji.close()
                emoji.move(to: CGPoint(x: 9.75, y: 18.5))
                emoji.addCurve(to: CGPoint(x: 18.5, y: 9.75), controlPoint1: CGPoint(x: 14.58, y: 18.5), controlPoint2: CGPoint(x: 18.5, y: 14.58))
                emoji.addCurve(to: CGPoint(x: 9.75, y: 1), controlPoint1: CGPoint(x: 18.5, y: 4.92), controlPoint2: CGPoint(x: 14.58, y: 1))
                emoji.addCurve(to: CGPoint(x: 1, y: 9.75), controlPoint1: CGPoint(x: 4.92, y: 1), controlPoint2: CGPoint(x: 1, y: 4.92))
                emoji.addCurve(to: CGPoint(x: 9.75, y: 18.5), controlPoint1: CGPoint(x: 1, y: 14.58), controlPoint2: CGPoint(x: 4.92, y: 18.5))
                emoji.close()
                emoji.move(to: CGPoint(x: 6.75, y: 8))
                emoji.addCurve(to: CGPoint(x: 5.5, y: 6.75), controlPoint1: CGPoint(x: 6.06, y: 8), controlPoint2: CGPoint(x: 5.5, y: 7.44))
                emoji.addCurve(to: CGPoint(x: 6.75, y: 5.5), controlPoint1: CGPoint(x: 5.5, y: 6.06), controlPoint2: CGPoint(x: 6.06, y: 5.5))
                emoji.addCurve(to: CGPoint(x: 8, y: 6.75), controlPoint1: CGPoint(x: 7.44, y: 5.5), controlPoint2: CGPoint(x: 8, y: 6.06))
                emoji.addCurve(to: CGPoint(x: 6.75, y: 8), controlPoint1: CGPoint(x: 8, y: 7.44), controlPoint2: CGPoint(x: 7.44, y: 8))
                emoji.close()
                emoji.move(to: CGPoint(x: 12.75, y: 8))
                emoji.addCurve(to: CGPoint(x: 11.5, y: 6.75), controlPoint1: CGPoint(x: 12.06, y: 8), controlPoint2: CGPoint(x: 11.5, y: 7.44))
                emoji.addCurve(to: CGPoint(x: 12.75, y: 5.5), controlPoint1: CGPoint(x: 11.5, y: 6.06), controlPoint2: CGPoint(x: 12.06, y: 5.5))
                emoji.addCurve(to: CGPoint(x: 14, y: 6.75), controlPoint1: CGPoint(x: 13.44, y: 5.5), controlPoint2: CGPoint(x: 14, y: 6.06))
                emoji.addCurve(to: CGPoint(x: 12.75, y: 8), controlPoint1: CGPoint(x: 14, y: 7.44), controlPoint2: CGPoint(x: 13.44, y: 8))
                emoji.close()
                emoji.move(to: CGPoint(x: 2.89, y: 11.16))
                emoji.addCurve(to: CGPoint(x: 3.85, y: 10.23), controlPoint1: CGPoint(x: 2.64, y: 10.38), controlPoint2: CGPoint(x: 3.07, y: 9.98))
                emoji.addCurve(to: CGPoint(x: 9.75, y: 11.21), controlPoint1: CGPoint(x: 3.85, y: 10.23), controlPoint2: CGPoint(x: 6.09, y: 11.21))
                emoji.addCurve(to: CGPoint(x: 15.65, y: 10.23), controlPoint1: CGPoint(x: 13.41, y: 11.21), controlPoint2: CGPoint(x: 15.65, y: 10.23))
                emoji.addCurve(to: CGPoint(x: 16.61, y: 11.18), controlPoint1: CGPoint(x: 16.43, y: 9.97), controlPoint2: CGPoint(x: 16.88, y: 10.4))
                emoji.addCurve(to: CGPoint(x: 9.75, y: 16.58), controlPoint1: CGPoint(x: 16.61, y: 11.18), controlPoint2: CGPoint(x: 15.6, y: 16.58))
                emoji.addCurve(to: CGPoint(x: 2.89, y: 11.16), controlPoint1: CGPoint(x: 3.9, y: 16.58), controlPoint2: CGPoint(x: 2.89, y: 11.16))
                emoji.close()
                emoji.move(to: CGPoint(x: 9.75, y: 12.19))
                emoji.addCurve(to: CGPoint(x: 4.85, y: 11.47), controlPoint1: CGPoint(x: 7.07, y: 12.19), controlPoint2: CGPoint(x: 4.85, y: 11.47))
                emoji.addCurve(to: CGPoint(x: 4.56, y: 11.96), controlPoint1: CGPoint(x: 4.33, y: 11.33), controlPoint2: CGPoint(x: 4.18, y: 11.57))
                emoji.addCurve(to: CGPoint(x: 9.75, y: 13.65), controlPoint1: CGPoint(x: 4.56, y: 11.96), controlPoint2: CGPoint(x: 5.36, y: 13.65))
                emoji.addCurve(to: CGPoint(x: 14.95, y: 11.94), controlPoint1: CGPoint(x: 14.14, y: 13.65), controlPoint2: CGPoint(x: 14.95, y: 11.94))
                emoji.addCurve(to: CGPoint(x: 14.64, y: 11.48), controlPoint1: CGPoint(x: 15.31, y: 11.54), controlPoint2: CGPoint(x: 15.17, y: 11.34))
                emoji.addCurve(to: CGPoint(x: 9.75, y: 12.19), controlPoint1: CGPoint(x: 14.64, y: 11.48), controlPoint2: CGPoint(x: 12.43, y: 12.19))
                emoji.close()
                context.saveGState()
                context.translateBy(x: 21, y: 6)
                emoji.usesEvenOddFillRule = true
                UIColor.black.setFill()
                emoji.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawKeyboards_ComplexButtonActiveLandscape(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 667, height: 40), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 667, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 667, y: resizedFrame.height / 40)
        
        /// Buttons
        do {
            context.saveGState()
            context.translateBy(x: 73, y: 4)
            
            /// Symbols
            do {
                context.saveGState()
                context.translateBy(x: 69, y: 0)
                
                /// Background
                let background = UIBezierPath()
                background.move(to: CGPoint(x: 5, y: 0))
                background.addLine(to: CGPoint(x: 57, y: 0))
                background.addCurve(to: CGPoint(x: 62, y: 5), controlPoint1: CGPoint(x: 59.76, y: 0), controlPoint2: CGPoint(x: 62, y: 2.24))
                background.addLine(to: CGPoint(x: 62, y: 27))
                background.addCurve(to: CGPoint(x: 57, y: 32), controlPoint1: CGPoint(x: 62, y: 29.76), controlPoint2: CGPoint(x: 59.76, y: 32))
                background.addLine(to: CGPoint(x: 5, y: 32))
                background.addCurve(to: CGPoint(x: 0, y: 27), controlPoint1: CGPoint(x: 2.24, y: 32), controlPoint2: CGPoint(x: 0, y: 29.76))
                background.addLine(to: CGPoint(x: 0, y: 5))
                background.addCurve(to: CGPoint(x: 5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.24), controlPoint2: CGPoint(x: 2.24, y: 0))
                background.close()
                context.saveGState()
                background.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(background.cgPath)
                context.addRect(background.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -63, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 63, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                background.fill()
                context.restoreGState()
                background.usesEvenOddFillRule = true
                UIColor(hue: 0.593, saturation: 0.095, brightness: 0.741, alpha: 0.5).setFill()
                background.fill()
                context.saveGState()
                context.setBlendMode(.softLight)
                context.beginTransparencyLayer(in: background.bounds, auxiliaryInfo: nil)
                do {
                    UIColor(white: 0, alpha: 0.5).setFill()
                    background.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.saveGState()
                context.setBlendMode(.softLight)
                context.beginTransparencyLayer(in: background.bounds, auxiliaryInfo: nil)
                do {
                    UIColor(white: 1, alpha: 0.1).setFill()
                    background.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.restoreGState()
                
                /// 123
                let _123 = NSMutableAttributedString(string: "123")
                _123.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: _123.length))
                _123.addAttribute(.kern, value: -0.32, range: NSRange(location: 0, length: _123.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _123.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _123.length))
                }
                context.saveGState()
                _123.draw(in: CGRect(x: 18, y: 7, width: 27, height: 21))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Space
            do {
                context.saveGState()
                context.translateBy(x: 138, y: 0)
                
                /// Background
                let background2 = UIBezierPath()
                background2.move(to: CGPoint(x: 6.41, y: 0))
                background2.addLine(to: CGPoint(x: 237.59, y: 0))
                background2.addCurve(to: CGPoint(x: 241.44, y: 0.67), controlPoint1: CGPoint(x: 239.82, y: 0), controlPoint2: CGPoint(x: 240.63, y: 0.23))
                background2.addCurve(to: CGPoint(x: 243.33, y: 2.56), controlPoint1: CGPoint(x: 242.26, y: 1.1), controlPoint2: CGPoint(x: 242.9, y: 1.74))
                background2.addCurve(to: CGPoint(x: 244, y: 6.41), controlPoint1: CGPoint(x: 243.77, y: 3.37), controlPoint2: CGPoint(x: 244, y: 4.18))
                background2.addLine(to: CGPoint(x: 244, y: 25.59))
                background2.addCurve(to: CGPoint(x: 243.33, y: 29.44), controlPoint1: CGPoint(x: 244, y: 27.82), controlPoint2: CGPoint(x: 243.77, y: 28.63))
                background2.addCurve(to: CGPoint(x: 241.44, y: 31.33), controlPoint1: CGPoint(x: 242.9, y: 30.26), controlPoint2: CGPoint(x: 242.26, y: 30.9))
                background2.addCurve(to: CGPoint(x: 237.59, y: 32), controlPoint1: CGPoint(x: 240.63, y: 31.77), controlPoint2: CGPoint(x: 239.82, y: 32))
                background2.addLine(to: CGPoint(x: 6.41, y: 32))
                background2.addCurve(to: CGPoint(x: 2.56, y: 31.33), controlPoint1: CGPoint(x: 4.18, y: 32), controlPoint2: CGPoint(x: 3.37, y: 31.77))
                background2.addCurve(to: CGPoint(x: 0.67, y: 29.44), controlPoint1: CGPoint(x: 1.74, y: 30.9), controlPoint2: CGPoint(x: 1.1, y: 30.26))
                background2.addCurve(to: CGPoint(x: 0, y: 25.59), controlPoint1: CGPoint(x: 0.23, y: 28.63), controlPoint2: CGPoint(x: 0, y: 27.82))
                background2.addLine(to: CGPoint(x: 0, y: 6.41))
                background2.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
                background2.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
                background2.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
                background2.close()
                context.saveGState()
                background2.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(background2.cgPath)
                context.addRect(background2.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -245, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 245, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                background2.fill()
                context.restoreGState()
                background2.usesEvenOddFillRule = true
                UIColor.white.setFill()
                background2.fill()
                context.restoreGState()
                
                /// Space
                let space = NSMutableAttributedString(string: "space")
                space.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: space.length))
                space.addAttribute(.kern, value: -0.32, range: NSRange(location: 0, length: space.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    paragraphStyle.maximumLineHeight = 20
                    paragraphStyle.minimumLineHeight = 20
                    space.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: space.length))
                }
                context.saveGState()
                space.draw(in: CGRect(x: 100, y: 5, width: 44, height: 22))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Button
            do {
                context.saveGState()
                context.translateBy(x: 389, y: 0)
                
                /// Background
                let background3 = UIBezierPath()
                background3.move(to: CGPoint(x: 6.41, y: 0))
                background3.addLine(to: CGPoint(x: 33.59, y: 0))
                background3.addCurve(to: CGPoint(x: 37.44, y: 0.67), controlPoint1: CGPoint(x: 35.82, y: 0), controlPoint2: CGPoint(x: 36.63, y: 0.23))
                background3.addCurve(to: CGPoint(x: 39.33, y: 2.56), controlPoint1: CGPoint(x: 38.26, y: 1.1), controlPoint2: CGPoint(x: 38.9, y: 1.74))
                background3.addCurve(to: CGPoint(x: 40, y: 6.41), controlPoint1: CGPoint(x: 39.77, y: 3.37), controlPoint2: CGPoint(x: 40, y: 4.18))
                background3.addLine(to: CGPoint(x: 40, y: 25.59))
                background3.addCurve(to: CGPoint(x: 39.33, y: 29.44), controlPoint1: CGPoint(x: 40, y: 27.82), controlPoint2: CGPoint(x: 39.77, y: 28.63))
                background3.addCurve(to: CGPoint(x: 37.44, y: 31.33), controlPoint1: CGPoint(x: 38.9, y: 30.26), controlPoint2: CGPoint(x: 38.26, y: 30.9))
                background3.addCurve(to: CGPoint(x: 33.59, y: 32), controlPoint1: CGPoint(x: 36.63, y: 31.77), controlPoint2: CGPoint(x: 35.82, y: 32))
                background3.addLine(to: CGPoint(x: 6.41, y: 32))
                background3.addCurve(to: CGPoint(x: 2.56, y: 31.33), controlPoint1: CGPoint(x: 4.18, y: 32), controlPoint2: CGPoint(x: 3.37, y: 31.77))
                background3.addCurve(to: CGPoint(x: 0.67, y: 29.44), controlPoint1: CGPoint(x: 1.74, y: 30.9), controlPoint2: CGPoint(x: 1.1, y: 30.26))
                background3.addCurve(to: CGPoint(x: 0, y: 25.59), controlPoint1: CGPoint(x: 0.23, y: 28.63), controlPoint2: CGPoint(x: 0, y: 27.82))
                background3.addLine(to: CGPoint(x: 0, y: 6.41))
                background3.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
                background3.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
                background3.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
                background3.close()
                context.saveGState()
                background3.usesEvenOddFillRule = true
                UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
                background3.fill()
                background3.usesEvenOddFillRule = true
                context.saveGState()
                UIRectClip(background3.bounds)
                context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
                context.setAlpha(0.35)
                context.beginTransparencyLayer(in: background3.bounds, auxiliaryInfo: nil)
                do {
                    UIColor.black.setFill()
                    background3.fill()
                    context.setBlendMode(.destinationOut)
                    context.beginTransparencyLayer(in: background3.bounds, auxiliaryInfo: nil)
                    do {
                        context.translateBy(x: -40, y: 0)
                        do {
                            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 40, y: -1)).applying(baseTransform)
                            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                            let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                        }
                        UIColor.black.setFill()
                        background3.fill()
                    }
                    context.endTransparencyLayer()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.restoreGState()
                
                /// ↳ Label
                let label = NSMutableAttributedString(string: "Label")
                label.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 13)!, range: NSRange(location: 0, length: label.length))
                label.addAttribute(.kern, value: -0.26, range: NSRange(location: 0, length: label.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
                }
                label.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: label.length))
                context.saveGState()
                label.draw(at: CGPoint(x: 4, y: 9))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Mic
            do {
                context.saveGState()
                context.translateBy(x: 483, y: 0)
                
                /// Background
                let background4 = UIBezierPath()
                background4.move(to: CGPoint(x: 6.41, y: 0))
                background4.addLine(to: CGPoint(x: 31.59, y: 0))
                background4.addCurve(to: CGPoint(x: 35.44, y: 0.67), controlPoint1: CGPoint(x: 33.82, y: 0), controlPoint2: CGPoint(x: 34.63, y: 0.23))
                background4.addCurve(to: CGPoint(x: 37.33, y: 2.56), controlPoint1: CGPoint(x: 36.26, y: 1.1), controlPoint2: CGPoint(x: 36.9, y: 1.74))
                background4.addCurve(to: CGPoint(x: 38, y: 6.41), controlPoint1: CGPoint(x: 37.77, y: 3.37), controlPoint2: CGPoint(x: 38, y: 4.18))
                background4.addLine(to: CGPoint(x: 38, y: 25.59))
                background4.addCurve(to: CGPoint(x: 37.33, y: 29.44), controlPoint1: CGPoint(x: 38, y: 27.82), controlPoint2: CGPoint(x: 37.77, y: 28.63))
                background4.addCurve(to: CGPoint(x: 35.44, y: 31.33), controlPoint1: CGPoint(x: 36.9, y: 30.26), controlPoint2: CGPoint(x: 36.26, y: 30.9))
                background4.addCurve(to: CGPoint(x: 31.59, y: 32), controlPoint1: CGPoint(x: 34.63, y: 31.77), controlPoint2: CGPoint(x: 33.82, y: 32))
                background4.addLine(to: CGPoint(x: 6.41, y: 32))
                background4.addCurve(to: CGPoint(x: 2.56, y: 31.33), controlPoint1: CGPoint(x: 4.18, y: 32), controlPoint2: CGPoint(x: 3.37, y: 31.77))
                background4.addCurve(to: CGPoint(x: 0.67, y: 29.44), controlPoint1: CGPoint(x: 1.74, y: 30.9), controlPoint2: CGPoint(x: 1.1, y: 30.26))
                background4.addCurve(to: CGPoint(x: 0, y: 25.59), controlPoint1: CGPoint(x: 0.23, y: 28.63), controlPoint2: CGPoint(x: 0, y: 27.82))
                background4.addLine(to: CGPoint(x: 0, y: 6.41))
                background4.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
                background4.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
                background4.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
                background4.close()
                context.saveGState()
                background4.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(background4.cgPath)
                context.addRect(background4.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -39, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 39, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                background4.fill()
                context.restoreGState()
                background4.usesEvenOddFillRule = true
                UIColor(hue: 0.593, saturation: 0.095, brightness: 0.741, alpha: 0.5).setFill()
                background4.fill()
                context.saveGState()
                context.setBlendMode(.softLight)
                context.beginTransparencyLayer(in: background4.bounds, auxiliaryInfo: nil)
                do {
                    UIColor(white: 0, alpha: 0.5).setFill()
                    background4.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.saveGState()
                context.setBlendMode(.softLight)
                context.beginTransparencyLayer(in: background4.bounds, auxiliaryInfo: nil)
                do {
                    UIColor(white: 1, alpha: 0.1).setFill()
                    background4.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.restoreGState()
                
                /// Speech
                let speech = UIBezierPath()
                speech.move(to: CGPoint(x: 10, y: 19.25))
                speech.addCurve(to: CGPoint(x: 9.25, y: 20), controlPoint1: CGPoint(x: 10, y: 19.66), controlPoint2: CGPoint(x: 9.66, y: 20))
                speech.addLine(to: CGPoint(x: 2.75, y: 20))
                speech.addCurve(to: CGPoint(x: 2, y: 19.25), controlPoint1: CGPoint(x: 2.34, y: 20), controlPoint2: CGPoint(x: 2, y: 19.67))
                speech.addCurve(to: CGPoint(x: 2.75, y: 18.5), controlPoint1: CGPoint(x: 2, y: 18.84), controlPoint2: CGPoint(x: 2.34, y: 18.5))
                speech.addLine(to: CGPoint(x: 5.25, y: 18.5))
                speech.addLine(to: CGPoint(x: 5.25, y: 16.5))
                speech.addCurve(to: CGPoint(x: 0, y: 11.48), controlPoint1: CGPoint(x: 2.75, y: 16.5), controlPoint2: CGPoint(x: 0, y: 13.47))
                speech.addCurve(to: CGPoint(x: 0, y: 8.25), controlPoint1: CGPoint(x: 0, y: 9.99), controlPoint2: CGPoint(x: 0, y: 8.25))
                speech.addCurve(to: CGPoint(x: 0.75, y: 7.5), controlPoint1: CGPoint(x: 0, y: 7.84), controlPoint2: CGPoint(x: 0.33, y: 7.5))
                speech.addCurve(to: CGPoint(x: 1.5, y: 8.25), controlPoint1: CGPoint(x: 1.16, y: 7.5), controlPoint2: CGPoint(x: 1.5, y: 7.84))
                speech.addLine(to: CGPoint(x: 1.5, y: 11.48))
                speech.addCurve(to: CGPoint(x: 6, y: 14.98), controlPoint1: CGPoint(x: 1.5, y: 12.98), controlPoint2: CGPoint(x: 3.5, y: 14.98))
                speech.addCurve(to: CGPoint(x: 10.5, y: 11.48), controlPoint1: CGPoint(x: 8.5, y: 14.98), controlPoint2: CGPoint(x: 10.5, y: 12.98))
                speech.addLine(to: CGPoint(x: 10.5, y: 8.25))
                speech.addCurve(to: CGPoint(x: 11.25, y: 7.5), controlPoint1: CGPoint(x: 10.5, y: 7.83), controlPoint2: CGPoint(x: 10.83, y: 7.5))
                speech.addCurve(to: CGPoint(x: 12, y: 8.26), controlPoint1: CGPoint(x: 11.66, y: 7.5), controlPoint2: CGPoint(x: 12, y: 7.84))
                speech.addLine(to: CGPoint(x: 12, y: 11.48))
                speech.addCurve(to: CGPoint(x: 6.75, y: 16.5), controlPoint1: CGPoint(x: 12, y: 13.47), controlPoint2: CGPoint(x: 9.25, y: 16.5))
                speech.addLine(to: CGPoint(x: 6.75, y: 18.5))
                speech.addLine(to: CGPoint(x: 9.25, y: 18.5))
                speech.addCurve(to: CGPoint(x: 10, y: 19.25), controlPoint1: CGPoint(x: 9.66, y: 18.5), controlPoint2: CGPoint(x: 10, y: 18.83))
                speech.close()
                speech.move(to: CGPoint(x: 2.5, y: 3.5))
                speech.addCurve(to: CGPoint(x: 6, y: 0), controlPoint1: CGPoint(x: 2.5, y: 1.57), controlPoint2: CGPoint(x: 4.07, y: 0))
                speech.addCurve(to: CGPoint(x: 9.5, y: 3.5), controlPoint1: CGPoint(x: 7.93, y: 0), controlPoint2: CGPoint(x: 9.5, y: 1.57))
                speech.addLine(to: CGPoint(x: 9.5, y: 10.5))
                speech.addCurve(to: CGPoint(x: 6, y: 14), controlPoint1: CGPoint(x: 9.5, y: 12.43), controlPoint2: CGPoint(x: 7.93, y: 14))
                speech.addCurve(to: CGPoint(x: 2.5, y: 10.5), controlPoint1: CGPoint(x: 4.07, y: 14), controlPoint2: CGPoint(x: 2.5, y: 12.43))
                speech.addLine(to: CGPoint(x: 2.5, y: 3.5))
                speech.close()
                speech.move(to: CGPoint(x: 4, y: 3.49))
                speech.addLine(to: CGPoint(x: 4, y: 10.51))
                speech.addCurve(to: CGPoint(x: 6, y: 12.5), controlPoint1: CGPoint(x: 4, y: 11.6), controlPoint2: CGPoint(x: 4.9, y: 12.5))
                speech.addCurve(to: CGPoint(x: 8, y: 10.51), controlPoint1: CGPoint(x: 7.11, y: 12.5), controlPoint2: CGPoint(x: 8, y: 11.61))
                speech.addLine(to: CGPoint(x: 8, y: 3.49))
                speech.addCurve(to: CGPoint(x: 6, y: 1.5), controlPoint1: CGPoint(x: 8, y: 2.4), controlPoint2: CGPoint(x: 7.1, y: 1.5))
                speech.addCurve(to: CGPoint(x: 4, y: 3.49), controlPoint1: CGPoint(x: 4.89, y: 1.5), controlPoint2: CGPoint(x: 4, y: 2.39))
                speech.close()
                context.saveGState()
                context.translateBy(x: 12.96, y: 5.5)
                speech.usesEvenOddFillRule = true
                UIColor.black.setFill()
                speech.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Brush
            do {
                context.saveGState()
                context.translateBy(x: 436, y: 0)
                
                /// Background
                let background5 = UIBezierPath()
                background5.move(to: CGPoint(x: 6.41, y: 0))
                background5.addLine(to: CGPoint(x: 33.59, y: 0))
                background5.addCurve(to: CGPoint(x: 37.44, y: 0.67), controlPoint1: CGPoint(x: 35.82, y: 0), controlPoint2: CGPoint(x: 36.63, y: 0.23))
                background5.addCurve(to: CGPoint(x: 39.33, y: 2.56), controlPoint1: CGPoint(x: 38.26, y: 1.1), controlPoint2: CGPoint(x: 38.9, y: 1.74))
                background5.addCurve(to: CGPoint(x: 40, y: 6.41), controlPoint1: CGPoint(x: 39.77, y: 3.37), controlPoint2: CGPoint(x: 40, y: 4.18))
                background5.addLine(to: CGPoint(x: 40, y: 25.59))
                background5.addCurve(to: CGPoint(x: 39.33, y: 29.44), controlPoint1: CGPoint(x: 40, y: 27.82), controlPoint2: CGPoint(x: 39.77, y: 28.63))
                background5.addCurve(to: CGPoint(x: 37.44, y: 31.33), controlPoint1: CGPoint(x: 38.9, y: 30.26), controlPoint2: CGPoint(x: 38.26, y: 30.9))
                background5.addCurve(to: CGPoint(x: 33.59, y: 32), controlPoint1: CGPoint(x: 36.63, y: 31.77), controlPoint2: CGPoint(x: 35.82, y: 32))
                background5.addLine(to: CGPoint(x: 6.41, y: 32))
                background5.addCurve(to: CGPoint(x: 2.56, y: 31.33), controlPoint1: CGPoint(x: 4.18, y: 32), controlPoint2: CGPoint(x: 3.37, y: 31.77))
                background5.addCurve(to: CGPoint(x: 0.67, y: 29.44), controlPoint1: CGPoint(x: 1.74, y: 30.9), controlPoint2: CGPoint(x: 1.1, y: 30.26))
                background5.addCurve(to: CGPoint(x: 0, y: 25.59), controlPoint1: CGPoint(x: 0.23, y: 28.63), controlPoint2: CGPoint(x: 0, y: 27.82))
                background5.addLine(to: CGPoint(x: 0, y: 6.41))
                background5.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
                background5.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
                background5.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
                background5.close()
                context.saveGState()
                background5.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(background5.cgPath)
                context.addRect(background5.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -41, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 41, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                background5.fill()
                context.restoreGState()
                background5.usesEvenOddFillRule = true
                UIColor(hue: 0.593, saturation: 0.095, brightness: 0.741, alpha: 0.5).setFill()
                background5.fill()
                context.saveGState()
                context.setBlendMode(.softLight)
                context.beginTransparencyLayer(in: background5.bounds, auxiliaryInfo: nil)
                do {
                    UIColor(white: 0, alpha: 0.5).setFill()
                    background5.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.saveGState()
                context.setBlendMode(.softLight)
                context.beginTransparencyLayer(in: background5.bounds, auxiliaryInfo: nil)
                do {
                    UIColor(white: 1, alpha: 0.1).setFill()
                    background5.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.restoreGState()
                
                /// Brush
                let brush = UIBezierPath()
                brush.move(to: CGPoint(x: 3.04, y: 2.07))
                brush.addCurve(to: CGPoint(x: 11.4, y: 0.09), controlPoint1: CGPoint(x: 5.44, y: 0.67), controlPoint2: CGPoint(x: 8.35, y: -0.31))
                brush.addCurve(to: CGPoint(x: 12.52, y: 0.35), controlPoint1: CGPoint(x: 11.71, y: 0.13), controlPoint2: CGPoint(x: 12.09, y: 0.22))
                brush.addCurve(to: CGPoint(x: 14.28, y: 1.07), controlPoint1: CGPoint(x: 13.14, y: 0.51), controlPoint2: CGPoint(x: 13.73, y: 0.75))
                brush.addCurve(to: CGPoint(x: 15.3, y: 1.39), controlPoint1: CGPoint(x: 14.66, y: 1.29), controlPoint2: CGPoint(x: 15.03, y: 1.36))
                brush.addCurve(to: CGPoint(x: 17.24, y: 1.11), controlPoint1: CGPoint(x: 15.91, y: 1.47), controlPoint2: CGPoint(x: 16.63, y: 1.27))
                brush.addCurve(to: CGPoint(x: 19.07, y: 0.85), controlPoint1: CGPoint(x: 17.84, y: 0.95), controlPoint2: CGPoint(x: 18.62, y: 0.9))
                brush.addLine(to: CGPoint(x: 23.18, y: 0.64))
                brush.addCurve(to: CGPoint(x: 24, y: 1.39), controlPoint1: CGPoint(x: 23.61, y: 0.62), controlPoint2: CGPoint(x: 23.98, y: 0.96))
                brush.addCurve(to: CGPoint(x: 23.48, y: 2.18), controlPoint1: CGPoint(x: 24.02, y: 1.74), controlPoint2: CGPoint(x: 23.81, y: 2.06))
                brush.addCurve(to: CGPoint(x: 16.58, y: 2.65), controlPoint1: CGPoint(x: 23.35, y: 2.22), controlPoint2: CGPoint(x: 17.19, y: 1.75))
                brush.addCurve(to: CGPoint(x: 16.29, y: 5.33), controlPoint1: CGPoint(x: 15.96, y: 3.54), controlPoint2: CGPoint(x: 16.27, y: 4.54))
                brush.addCurve(to: CGPoint(x: 16.13, y: 7.49), controlPoint1: CGPoint(x: 16.31, y: 6.06), controlPoint2: CGPoint(x: 16.25, y: 6.77))
                brush.addCurve(to: CGPoint(x: 13.84, y: 11.07), controlPoint1: CGPoint(x: 15.74, y: 8.71), controlPoint2: CGPoint(x: 14.98, y: 9.91))
                brush.addCurve(to: CGPoint(x: 11.79, y: 13.04), controlPoint1: CGPoint(x: 12.71, y: 12.24), controlPoint2: CGPoint(x: 12.14, y: 12.81))
                brush.addCurve(to: CGPoint(x: 7.8, y: 14.92), controlPoint1: CGPoint(x: 10.43, y: 13.95), controlPoint2: CGPoint(x: 8.66, y: 14.79))
                brush.addCurve(to: CGPoint(x: 4.39, y: 14.43), controlPoint1: CGPoint(x: 6.18, y: 15.12), controlPoint2: CGPoint(x: 5.05, y: 14.95))
                brush.addCurve(to: CGPoint(x: 3.28, y: 11.95), controlPoint1: CGPoint(x: 3.4, y: 13.65), controlPoint2: CGPoint(x: 3.28, y: 13.26))
                brush.addCurve(to: CGPoint(x: 4.39, y: 9.13), controlPoint1: CGPoint(x: 3.28, y: 10.65), controlPoint2: CGPoint(x: 3.75, y: 9.94))
                brush.addLine(to: CGPoint(x: 5.18, y: 8.14))
                brush.addCurve(to: CGPoint(x: 7.34, y: 5.83), controlPoint1: CGPoint(x: 5.68, y: 7.52), controlPoint2: CGPoint(x: 6.4, y: 6.74))
                brush.addCurve(to: CGPoint(x: 11.2, y: 3.34), controlPoint1: CGPoint(x: 8.45, y: 4.75), controlPoint2: CGPoint(x: 9.76, y: 3.91))
                brush.addLine(to: CGPoint(x: 11.77, y: 3.12))
                brush.addCurve(to: CGPoint(x: 12.21, y: 2.47), controlPoint1: CGPoint(x: 12.03, y: 3.02), controlPoint2: CGPoint(x: 12.21, y: 2.76))
                brush.addCurve(to: CGPoint(x: 11.16, y: 1.75), controlPoint1: CGPoint(x: 12.21, y: 2.36), controlPoint2: CGPoint(x: 11.8, y: 1.96))
                brush.addCurve(to: CGPoint(x: 6.41, y: 1.75), controlPoint1: CGPoint(x: 9.63, y: 1.27), controlPoint2: CGPoint(x: 7.81, y: 1.45))
                brush.addCurve(to: CGPoint(x: 3.63, y: 2.65), controlPoint1: CGPoint(x: 4.42, y: 2.18), controlPoint2: CGPoint(x: 4.84, y: 2.05))
                brush.addCurve(to: CGPoint(x: 0, y: 5.26), controlPoint1: CGPoint(x: 2.83, y: 3.05), controlPoint2: CGPoint(x: 1.62, y: 3.92))
                brush.addCurve(to: CGPoint(x: 3.04, y: 2.07), controlPoint1: CGPoint(x: 0.56, y: 4.08), controlPoint2: CGPoint(x: 1.94, y: 2.77))
                brush.close()
                brush.move(to: CGPoint(x: 8.94, y: 6.72))
                brush.addCurve(to: CGPoint(x: 7.02, y: 9.13), controlPoint1: CGPoint(x: 7.64, y: 8.08), controlPoint2: CGPoint(x: 7.8, y: 7.87))
                brush.addCurve(to: CGPoint(x: 6.54, y: 11.62), controlPoint1: CGPoint(x: 6.91, y: 9.31), controlPoint2: CGPoint(x: 6.27, y: 10.54))
                brush.addCurve(to: CGPoint(x: 8.61, y: 13.04), controlPoint1: CGPoint(x: 6.85, y: 12.82), controlPoint2: CGPoint(x: 7.31, y: 13.21))
                brush.addCurve(to: CGPoint(x: 10.84, y: 11.63), controlPoint1: CGPoint(x: 9.15, y: 12.97), controlPoint2: CGPoint(x: 9.89, y: 12.5))
                brush.addCurve(to: CGPoint(x: 13.67, y: 7.02), controlPoint1: CGPoint(x: 12.2, y: 10.39), controlPoint2: CGPoint(x: 13.17, y: 8.79))
                brush.addCurve(to: CGPoint(x: 13.85, y: 6.23), controlPoint1: CGPoint(x: 13.77, y: 6.68), controlPoint2: CGPoint(x: 13.83, y: 6.41))
                brush.addCurve(to: CGPoint(x: 13.85, y: 4.43), controlPoint1: CGPoint(x: 13.91, y: 5.8), controlPoint2: CGPoint(x: 13.94, y: 5.33))
                brush.addCurve(to: CGPoint(x: 13.84, y: 4.34), controlPoint1: CGPoint(x: 13.85, y: 4.4), controlPoint2: CGPoint(x: 13.85, y: 4.37))
                brush.addCurve(to: CGPoint(x: 13.24, y: 4), controlPoint1: CGPoint(x: 13.77, y: 4.08), controlPoint2: CGPoint(x: 13.5, y: 3.93))
                brush.addCurve(to: CGPoint(x: 8.94, y: 6.72), controlPoint1: CGPoint(x: 12.59, y: 4.17), controlPoint2: CGPoint(x: 10.24, y: 5.35))
                brush.close()
                context.saveGState()
                context.translateBy(x: 8, y: 9)
                brush.usesEvenOddFillRule = true
                UIColor.black.setFill()
                brush.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Smile
            do {
                context.saveGState()
                
                /// Background
                let background6 = UIBezierPath()
                background6.move(to: CGPoint(x: 6.41, y: 0))
                background6.addLine(to: CGPoint(x: 55.59, y: 0))
                background6.addCurve(to: CGPoint(x: 59.44, y: 0.67), controlPoint1: CGPoint(x: 57.82, y: 0), controlPoint2: CGPoint(x: 58.63, y: 0.23))
                background6.addCurve(to: CGPoint(x: 61.33, y: 2.56), controlPoint1: CGPoint(x: 60.26, y: 1.1), controlPoint2: CGPoint(x: 60.9, y: 1.74))
                background6.addCurve(to: CGPoint(x: 62, y: 6.41), controlPoint1: CGPoint(x: 61.77, y: 3.37), controlPoint2: CGPoint(x: 62, y: 4.18))
                background6.addLine(to: CGPoint(x: 62, y: 25.59))
                background6.addCurve(to: CGPoint(x: 61.33, y: 29.44), controlPoint1: CGPoint(x: 62, y: 27.82), controlPoint2: CGPoint(x: 61.77, y: 28.63))
                background6.addCurve(to: CGPoint(x: 59.44, y: 31.33), controlPoint1: CGPoint(x: 60.9, y: 30.26), controlPoint2: CGPoint(x: 60.26, y: 30.9))
                background6.addCurve(to: CGPoint(x: 55.59, y: 32), controlPoint1: CGPoint(x: 58.63, y: 31.77), controlPoint2: CGPoint(x: 57.82, y: 32))
                background6.addLine(to: CGPoint(x: 6.41, y: 32))
                background6.addCurve(to: CGPoint(x: 2.56, y: 31.33), controlPoint1: CGPoint(x: 4.18, y: 32), controlPoint2: CGPoint(x: 3.37, y: 31.77))
                background6.addCurve(to: CGPoint(x: 0.67, y: 29.44), controlPoint1: CGPoint(x: 1.74, y: 30.9), controlPoint2: CGPoint(x: 1.1, y: 30.26))
                background6.addCurve(to: CGPoint(x: 0, y: 25.59), controlPoint1: CGPoint(x: 0.23, y: 28.63), controlPoint2: CGPoint(x: 0, y: 27.82))
                background6.addLine(to: CGPoint(x: 0, y: 6.41))
                background6.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
                background6.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
                background6.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
                background6.close()
                context.saveGState()
                background6.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(background6.cgPath)
                context.addRect(background6.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -63, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 63, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
                }
                UIColor.black.setFill()
                background6.fill()
                context.restoreGState()
                background6.usesEvenOddFillRule = true
                UIColor(hue: 0.593, saturation: 0.095, brightness: 0.741, alpha: 0.5).setFill()
                background6.fill()
                context.saveGState()
                context.setBlendMode(.softLight)
                context.beginTransparencyLayer(in: background6.bounds, auxiliaryInfo: nil)
                do {
                    UIColor(white: 0, alpha: 0.5).setFill()
                    background6.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.saveGState()
                context.setBlendMode(.softLight)
                context.beginTransparencyLayer(in: background6.bounds, auxiliaryInfo: nil)
                do {
                    UIColor(white: 1, alpha: 0.1).setFill()
                    background6.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.restoreGState()
                
                /// Emoji
                let emoji = UIBezierPath()
                emoji.move(to: CGPoint(x: 9.75, y: 19.5))
                emoji.addCurve(to: CGPoint(x: 0, y: 9.75), controlPoint1: CGPoint(x: 4.37, y: 19.5), controlPoint2: CGPoint(x: 0, y: 15.13))
                emoji.addCurve(to: CGPoint(x: 9.75, y: 0), controlPoint1: CGPoint(x: 0, y: 4.37), controlPoint2: CGPoint(x: 4.37, y: 0))
                emoji.addCurve(to: CGPoint(x: 19.5, y: 9.75), controlPoint1: CGPoint(x: 15.13, y: 0), controlPoint2: CGPoint(x: 19.5, y: 4.37))
                emoji.addCurve(to: CGPoint(x: 9.75, y: 19.5), controlPoint1: CGPoint(x: 19.5, y: 15.13), controlPoint2: CGPoint(x: 15.13, y: 19.5))
                emoji.close()
                emoji.move(to: CGPoint(x: 9.75, y: 18.5))
                emoji.addCurve(to: CGPoint(x: 18.5, y: 9.75), controlPoint1: CGPoint(x: 14.58, y: 18.5), controlPoint2: CGPoint(x: 18.5, y: 14.58))
                emoji.addCurve(to: CGPoint(x: 9.75, y: 1), controlPoint1: CGPoint(x: 18.5, y: 4.92), controlPoint2: CGPoint(x: 14.58, y: 1))
                emoji.addCurve(to: CGPoint(x: 1, y: 9.75), controlPoint1: CGPoint(x: 4.92, y: 1), controlPoint2: CGPoint(x: 1, y: 4.92))
                emoji.addCurve(to: CGPoint(x: 9.75, y: 18.5), controlPoint1: CGPoint(x: 1, y: 14.58), controlPoint2: CGPoint(x: 4.92, y: 18.5))
                emoji.close()
                emoji.move(to: CGPoint(x: 6.75, y: 8))
                emoji.addCurve(to: CGPoint(x: 5.5, y: 6.75), controlPoint1: CGPoint(x: 6.06, y: 8), controlPoint2: CGPoint(x: 5.5, y: 7.44))
                emoji.addCurve(to: CGPoint(x: 6.75, y: 5.5), controlPoint1: CGPoint(x: 5.5, y: 6.06), controlPoint2: CGPoint(x: 6.06, y: 5.5))
                emoji.addCurve(to: CGPoint(x: 8, y: 6.75), controlPoint1: CGPoint(x: 7.44, y: 5.5), controlPoint2: CGPoint(x: 8, y: 6.06))
                emoji.addCurve(to: CGPoint(x: 6.75, y: 8), controlPoint1: CGPoint(x: 8, y: 7.44), controlPoint2: CGPoint(x: 7.44, y: 8))
                emoji.close()
                emoji.move(to: CGPoint(x: 12.75, y: 8))
                emoji.addCurve(to: CGPoint(x: 11.5, y: 6.75), controlPoint1: CGPoint(x: 12.06, y: 8), controlPoint2: CGPoint(x: 11.5, y: 7.44))
                emoji.addCurve(to: CGPoint(x: 12.75, y: 5.5), controlPoint1: CGPoint(x: 11.5, y: 6.06), controlPoint2: CGPoint(x: 12.06, y: 5.5))
                emoji.addCurve(to: CGPoint(x: 14, y: 6.75), controlPoint1: CGPoint(x: 13.44, y: 5.5), controlPoint2: CGPoint(x: 14, y: 6.06))
                emoji.addCurve(to: CGPoint(x: 12.75, y: 8), controlPoint1: CGPoint(x: 14, y: 7.44), controlPoint2: CGPoint(x: 13.44, y: 8))
                emoji.close()
                emoji.move(to: CGPoint(x: 2.89, y: 11.16))
                emoji.addCurve(to: CGPoint(x: 3.85, y: 10.23), controlPoint1: CGPoint(x: 2.64, y: 10.38), controlPoint2: CGPoint(x: 3.07, y: 9.98))
                emoji.addCurve(to: CGPoint(x: 9.75, y: 11.21), controlPoint1: CGPoint(x: 3.85, y: 10.23), controlPoint2: CGPoint(x: 6.09, y: 11.21))
                emoji.addCurve(to: CGPoint(x: 15.65, y: 10.23), controlPoint1: CGPoint(x: 13.41, y: 11.21), controlPoint2: CGPoint(x: 15.65, y: 10.23))
                emoji.addCurve(to: CGPoint(x: 16.61, y: 11.18), controlPoint1: CGPoint(x: 16.43, y: 9.97), controlPoint2: CGPoint(x: 16.88, y: 10.4))
                emoji.addCurve(to: CGPoint(x: 9.75, y: 16.58), controlPoint1: CGPoint(x: 16.61, y: 11.18), controlPoint2: CGPoint(x: 15.6, y: 16.58))
                emoji.addCurve(to: CGPoint(x: 2.89, y: 11.16), controlPoint1: CGPoint(x: 3.9, y: 16.58), controlPoint2: CGPoint(x: 2.89, y: 11.16))
                emoji.close()
                emoji.move(to: CGPoint(x: 9.75, y: 12.19))
                emoji.addCurve(to: CGPoint(x: 4.85, y: 11.47), controlPoint1: CGPoint(x: 7.07, y: 12.19), controlPoint2: CGPoint(x: 4.85, y: 11.47))
                emoji.addCurve(to: CGPoint(x: 4.56, y: 11.96), controlPoint1: CGPoint(x: 4.33, y: 11.33), controlPoint2: CGPoint(x: 4.18, y: 11.57))
                emoji.addCurve(to: CGPoint(x: 9.75, y: 13.65), controlPoint1: CGPoint(x: 4.56, y: 11.96), controlPoint2: CGPoint(x: 5.36, y: 13.65))
                emoji.addCurve(to: CGPoint(x: 14.95, y: 11.94), controlPoint1: CGPoint(x: 14.14, y: 13.65), controlPoint2: CGPoint(x: 14.95, y: 11.94))
                emoji.addCurve(to: CGPoint(x: 14.64, y: 11.48), controlPoint1: CGPoint(x: 15.31, y: 11.54), controlPoint2: CGPoint(x: 15.17, y: 11.34))
                emoji.addCurve(to: CGPoint(x: 9.75, y: 12.19), controlPoint1: CGPoint(x: 14.64, y: 11.48), controlPoint2: CGPoint(x: 12.43, y: 12.19))
                emoji.close()
                context.saveGState()
                context.translateBy(x: 21, y: 6)
                emoji.usesEvenOddFillRule = true
                UIColor.black.setFill()
                emoji.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawIPhoneXKeyboards_ButtonDefaultLandscape(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 812, height: 40), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 812, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 812, y: resizedFrame.height / 40)
        
        /// Speech
        let speech = UIBezierPath()
        speech.move(to: CGPoint(x: 13.33, y: 23.25))
        speech.addCurve(to: CGPoint(x: 12.58, y: 24), controlPoint1: CGPoint(x: 13.33, y: 23.66), controlPoint2: CGPoint(x: 13, y: 24))
        speech.addLine(to: CGPoint(x: 3.42, y: 24))
        speech.addCurve(to: CGPoint(x: 2.67, y: 23.25), controlPoint1: CGPoint(x: 3, y: 24), controlPoint2: CGPoint(x: 2.67, y: 23.67))
        speech.addLine(to: CGPoint(x: 2.67, y: 22.95))
        speech.addCurve(to: CGPoint(x: 3.42, y: 22.2), controlPoint1: CGPoint(x: 2.67, y: 22.54), controlPoint2: CGPoint(x: 3.01, y: 22.2))
        speech.addLine(to: CGPoint(x: 7, y: 22.2))
        speech.addLine(to: CGPoint(x: 7, y: 19.8))
        speech.addCurve(to: CGPoint(x: 0, y: 13.77), controlPoint1: CGPoint(x: 3.67, y: 19.8), controlPoint2: CGPoint(x: 0, y: 16.17))
        speech.addCurve(to: CGPoint(x: 0, y: 9.75), controlPoint1: CGPoint(x: 0, y: 11.98), controlPoint2: CGPoint(x: 0, y: 9.75))
        speech.addCurve(to: CGPoint(x: 0.74, y: 9), controlPoint1: CGPoint(x: 0, y: 9.33), controlPoint2: CGPoint(x: 0.33, y: 9))
        speech.addLine(to: CGPoint(x: 1.26, y: 9))
        speech.addCurve(to: CGPoint(x: 2, y: 9.75), controlPoint1: CGPoint(x: 1.67, y: 9), controlPoint2: CGPoint(x: 2, y: 9.34))
        speech.addLine(to: CGPoint(x: 2, y: 13.77))
        speech.addCurve(to: CGPoint(x: 8, y: 17.97), controlPoint1: CGPoint(x: 2, y: 15.57), controlPoint2: CGPoint(x: 4.67, y: 17.97))
        speech.addCurve(to: CGPoint(x: 14, y: 13.77), controlPoint1: CGPoint(x: 11.33, y: 17.97), controlPoint2: CGPoint(x: 14, y: 15.57))
        speech.addLine(to: CGPoint(x: 14, y: 9.75))
        speech.addCurve(to: CGPoint(x: 14.74, y: 9), controlPoint1: CGPoint(x: 14, y: 9.33), controlPoint2: CGPoint(x: 14.33, y: 9))
        speech.addLine(to: CGPoint(x: 15.26, y: 9))
        speech.addCurve(to: CGPoint(x: 16, y: 9.75), controlPoint1: CGPoint(x: 15.67, y: 9), controlPoint2: CGPoint(x: 16, y: 9.34))
        speech.addLine(to: CGPoint(x: 16, y: 13.77))
        speech.addCurve(to: CGPoint(x: 9, y: 19.8), controlPoint1: CGPoint(x: 16, y: 16.17), controlPoint2: CGPoint(x: 12.33, y: 19.8))
        speech.addLine(to: CGPoint(x: 9, y: 22.2))
        speech.addLine(to: CGPoint(x: 12.58, y: 22.2))
        speech.addCurve(to: CGPoint(x: 13.33, y: 22.95), controlPoint1: CGPoint(x: 13, y: 22.2), controlPoint2: CGPoint(x: 13.33, y: 22.53))
        speech.addLine(to: CGPoint(x: 13.33, y: 23.25))
        speech.close()
        speech.move(to: CGPoint(x: 3.33, y: 4.66))
        speech.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 3.33, y: 2.09), controlPoint2: CGPoint(x: 5.43, y: 0))
        speech.addCurve(to: CGPoint(x: 12.67, y: 4.66), controlPoint1: CGPoint(x: 10.58, y: 0), controlPoint2: CGPoint(x: 12.67, y: 2.09))
        speech.addLine(to: CGPoint(x: 12.67, y: 12.14))
        speech.addCurve(to: CGPoint(x: 8, y: 16.8), controlPoint1: CGPoint(x: 12.67, y: 14.71), controlPoint2: CGPoint(x: 10.57, y: 16.8))
        speech.addCurve(to: CGPoint(x: 3.33, y: 12.14), controlPoint1: CGPoint(x: 5.42, y: 16.8), controlPoint2: CGPoint(x: 3.33, y: 14.71))
        speech.addLine(to: CGPoint(x: 3.33, y: 4.66))
        speech.close()
        speech.move(to: CGPoint(x: 5.33, y: 4.47))
        speech.addLine(to: CGPoint(x: 5.33, y: 12.33))
        speech.addCurve(to: CGPoint(x: 8, y: 15), controlPoint1: CGPoint(x: 5.33, y: 13.81), controlPoint2: CGPoint(x: 6.53, y: 15))
        speech.addCurve(to: CGPoint(x: 10.67, y: 12.33), controlPoint1: CGPoint(x: 9.47, y: 15), controlPoint2: CGPoint(x: 10.67, y: 13.8))
        speech.addLine(to: CGPoint(x: 10.67, y: 4.47))
        speech.addCurve(to: CGPoint(x: 8, y: 1.8), controlPoint1: CGPoint(x: 10.67, y: 2.99), controlPoint2: CGPoint(x: 9.47, y: 1.8))
        speech.addCurve(to: CGPoint(x: 5.33, y: 4.47), controlPoint1: CGPoint(x: 6.53, y: 1.8), controlPoint2: CGPoint(x: 5.33, y: 3))
        speech.close()
        context.saveGState()
        context.translateBy(x: 765, y: 7)
        speech.usesEvenOddFillRule = true
        UIColor(hue: 0.597, saturation: 0.13, brightness: 0.361, alpha: 1).setFill()
        speech.fill()
        context.restoreGState()
        
        /// Lang Glyph
        let langGlyph = UIBezierPath()
        langGlyph.move(to: CGPoint(x: 20.47, y: 21.31))
        langGlyph.addCurve(to: CGPoint(x: 18.69, y: 20.45), controlPoint1: CGPoint(x: 19.87, y: 20.99), controlPoint2: CGPoint(x: 19.27, y: 20.7))
        langGlyph.addCurve(to: CGPoint(x: 15.96, y: 23.79), controlPoint1: CGPoint(x: 18, y: 21.72), controlPoint2: CGPoint(x: 17.09, y: 22.83))
        langGlyph.addCurve(to: CGPoint(x: 20.47, y: 21.31), controlPoint1: CGPoint(x: 17.66, y: 23.32), controlPoint2: CGPoint(x: 19.2, y: 22.46))
        langGlyph.close()
        langGlyph.move(to: CGPoint(x: 21.22, y: 20.58))
        langGlyph.addCurve(to: CGPoint(x: 24.09, y: 14.5), controlPoint1: CGPoint(x: 22.74, y: 18.93), controlPoint2: CGPoint(x: 23.77, y: 16.83))
        langGlyph.addLine(to: CGPoint(x: 20.26, y: 14.5))
        langGlyph.addCurve(to: CGPoint(x: 19.13, y: 19.55), controlPoint1: CGPoint(x: 20.16, y: 16.37), controlPoint2: CGPoint(x: 19.78, y: 18.05))
        langGlyph.addCurve(to: CGPoint(x: 21.22, y: 20.58), controlPoint1: CGPoint(x: 19.81, y: 19.84), controlPoint2: CGPoint(x: 20.51, y: 20.19))
        langGlyph.close()
        langGlyph.move(to: CGPoint(x: 14, y: 18.15))
        langGlyph.addCurve(to: CGPoint(x: 18.21, y: 19.17), controlPoint1: CGPoint(x: 15.33, y: 18.26), controlPoint2: CGPoint(x: 16.73, y: 18.6))
        langGlyph.addCurve(to: CGPoint(x: 19.26, y: 14.5), controlPoint1: CGPoint(x: 18.81, y: 17.79), controlPoint2: CGPoint(x: 19.16, y: 16.24))
        langGlyph.addLine(to: CGPoint(x: 14, y: 14.5))
        langGlyph.addLine(to: CGPoint(x: 14, y: 18.15))
        langGlyph.close()
        langGlyph.move(to: CGPoint(x: 14, y: 19.15))
        langGlyph.addLine(to: CGPoint(x: 14, y: 24))
        langGlyph.addCurve(to: CGPoint(x: 17.76, y: 20.07), controlPoint1: CGPoint(x: 15.63, y: 22.95), controlPoint2: CGPoint(x: 16.88, y: 21.64))
        langGlyph.addCurve(to: CGPoint(x: 14, y: 19.15), controlPoint1: CGPoint(x: 16.44, y: 19.57), controlPoint2: CGPoint(x: 15.18, y: 19.26))
        langGlyph.close()
        langGlyph.move(to: CGPoint(x: 5.89, y: 21.71))
        langGlyph.addCurve(to: CGPoint(x: 10.49, y: 23.93), controlPoint1: CGPoint(x: 7.21, y: 22.77), controlPoint2: CGPoint(x: 8.78, y: 23.55))
        langGlyph.addCurve(to: CGPoint(x: 7.68, y: 20.6), controlPoint1: CGPoint(x: 9.33, y: 22.98), controlPoint2: CGPoint(x: 8.39, y: 21.87))
        langGlyph.addCurve(to: CGPoint(x: 5.89, y: 21.71), controlPoint1: CGPoint(x: 7.09, y: 20.92), controlPoint2: CGPoint(x: 6.49, y: 21.29))
        langGlyph.close()
        langGlyph.move(to: CGPoint(x: 5.12, y: 21.02))
        langGlyph.addCurve(to: CGPoint(x: 7.23, y: 19.71), controlPoint1: CGPoint(x: 5.83, y: 20.52), controlPoint2: CGPoint(x: 6.53, y: 20.08))
        langGlyph.addCurve(to: CGPoint(x: 6.03, y: 14.5), controlPoint1: CGPoint(x: 6.53, y: 18.18), controlPoint2: CGPoint(x: 6.13, y: 16.44))
        langGlyph.addLine(to: CGPoint(x: 1.81, y: 14.5))
        langGlyph.addCurve(to: CGPoint(x: 5.12, y: 21.02), controlPoint1: CGPoint(x: 2.16, y: 17.05), controlPoint2: CGPoint(x: 3.36, y: 19.32))
        langGlyph.close()
        langGlyph.move(to: CGPoint(x: 12.5, y: 18.12))
        langGlyph.addLine(to: CGPoint(x: 12.5, y: 14.5))
        langGlyph.addLine(to: CGPoint(x: 7.03, y: 14.5))
        langGlyph.addCurve(to: CGPoint(x: 8.12, y: 19.26), controlPoint1: CGPoint(x: 7.12, y: 16.28), controlPoint2: CGPoint(x: 7.49, y: 17.86))
        langGlyph.addCurve(to: CGPoint(x: 12.5, y: 18.12), controlPoint1: CGPoint(x: 9.62, y: 18.57), controlPoint2: CGPoint(x: 11.08, y: 18.19))
        langGlyph.close()
        langGlyph.move(to: CGPoint(x: 12.5, y: 19.12))
        langGlyph.addCurve(to: CGPoint(x: 8.58, y: 20.16), controlPoint1: CGPoint(x: 11.24, y: 19.19), controlPoint2: CGPoint(x: 9.93, y: 19.54))
        langGlyph.addCurve(to: CGPoint(x: 12.5, y: 24.13), controlPoint1: CGPoint(x: 9.49, y: 21.76), controlPoint2: CGPoint(x: 10.79, y: 23.08))
        langGlyph.addLine(to: CGPoint(x: 12.5, y: 19.12))
        langGlyph.close()
        langGlyph.move(to: CGPoint(x: 21.2, y: 5.3))
        langGlyph.addCurve(to: CGPoint(x: 15.3, y: 1.95), controlPoint1: CGPoint(x: 19.65, y: 3.63), controlPoint2: CGPoint(x: 17.61, y: 2.44))
        langGlyph.addCurve(to: CGPoint(x: 18.88, y: 6.72), controlPoint1: CGPoint(x: 16.86, y: 3.34), controlPoint2: CGPoint(x: 18.06, y: 4.93))
        langGlyph.addCurve(to: CGPoint(x: 21.2, y: 5.3), controlPoint1: CGPoint(x: 19.63, y: 6.31), controlPoint2: CGPoint(x: 20.4, y: 5.84))
        langGlyph.close()
        langGlyph.move(to: CGPoint(x: 21.85, y: 6.07))
        langGlyph.addCurve(to: CGPoint(x: 19.27, y: 7.64), controlPoint1: CGPoint(x: 20.96, y: 6.67), controlPoint2: CGPoint(x: 20.1, y: 7.2))
        langGlyph.addCurve(to: CGPoint(x: 20.28, y: 13), controlPoint1: CGPoint(x: 19.89, y: 9.28), controlPoint2: CGPoint(x: 20.23, y: 11.06))
        langGlyph.addLine(to: CGPoint(x: 24.2, y: 13))
        langGlyph.addCurve(to: CGPoint(x: 24.2, y: 12.95), controlPoint1: CGPoint(x: 24.2, y: 12.98), controlPoint2: CGPoint(x: 24.2, y: 12.97))
        langGlyph.addCurve(to: CGPoint(x: 21.85, y: 6.07), controlPoint1: CGPoint(x: 24.2, y: 10.36), controlPoint2: CGPoint(x: 23.32, y: 7.97))
        langGlyph.close()
        langGlyph.move(to: CGPoint(x: 14, y: 9.44))
        langGlyph.addLine(to: CGPoint(x: 14, y: 13))
        langGlyph.addLine(to: CGPoint(x: 19.28, y: 13))
        langGlyph.addCurve(to: CGPoint(x: 18.38, y: 8.1), controlPoint1: CGPoint(x: 19.23, y: 11.23), controlPoint2: CGPoint(x: 18.93, y: 9.59))
        langGlyph.addCurve(to: CGPoint(x: 14, y: 9.44), controlPoint1: CGPoint(x: 16.81, y: 8.84), controlPoint2: CGPoint(x: 15.36, y: 9.29))
        langGlyph.close()
        langGlyph.move(to: CGPoint(x: 14, y: 8.44))
        langGlyph.addCurve(to: CGPoint(x: 17.99, y: 7.17), controlPoint1: CGPoint(x: 15.22, y: 8.29), controlPoint2: CGPoint(x: 16.55, y: 7.87))
        langGlyph.addCurve(to: CGPoint(x: 14, y: 2.16), controlPoint1: CGPoint(x: 17.11, y: 5.26), controlPoint2: CGPoint(x: 15.78, y: 3.59))
        langGlyph.addLine(to: CGPoint(x: 14, y: 8.44))
        langGlyph.close()
        langGlyph.move(to: CGPoint(x: 4.91, y: 5.08))
        langGlyph.addCurve(to: CGPoint(x: 7.39, y: 6.74), controlPoint1: CGPoint(x: 5.76, y: 5.72), controlPoint2: CGPoint(x: 6.59, y: 6.28))
        langGlyph.addCurve(to: CGPoint(x: 11.09, y: 1.85), controlPoint1: CGPoint(x: 8.24, y: 4.9), controlPoint2: CGPoint(x: 9.47, y: 3.27))
        langGlyph.addCurve(to: CGPoint(x: 4.91, y: 5.08), controlPoint1: CGPoint(x: 8.69, y: 2.25), controlPoint2: CGPoint(x: 6.54, y: 3.41))
        langGlyph.close()
        langGlyph.move(to: CGPoint(x: 4.24, y: 5.83))
        langGlyph.addCurve(to: CGPoint(x: 1.7, y: 12.95), controlPoint1: CGPoint(x: 2.65, y: 7.77), controlPoint2: CGPoint(x: 1.7, y: 10.25))
        langGlyph.addCurve(to: CGPoint(x: 1.7, y: 13), controlPoint1: CGPoint(x: 1.7, y: 12.97), controlPoint2: CGPoint(x: 1.7, y: 12.98))
        langGlyph.addLine(to: CGPoint(x: 6.01, y: 13))
        langGlyph.addCurve(to: CGPoint(x: 7, y: 7.67), controlPoint1: CGPoint(x: 6.05, y: 11.07), controlPoint2: CGPoint(x: 6.39, y: 9.3))
        langGlyph.addCurve(to: CGPoint(x: 4.24, y: 5.83), controlPoint1: CGPoint(x: 6.11, y: 7.16), controlPoint2: CGPoint(x: 5.19, y: 6.55))
        langGlyph.close()
        langGlyph.move(to: CGPoint(x: 12.5, y: 9.49))
        langGlyph.addCurve(to: CGPoint(x: 7.89, y: 8.15), controlPoint1: CGPoint(x: 11.04, y: 9.4), controlPoint2: CGPoint(x: 9.51, y: 8.95))
        langGlyph.addCurve(to: CGPoint(x: 7.01, y: 13), controlPoint1: CGPoint(x: 7.35, y: 9.63), controlPoint2: CGPoint(x: 7.05, y: 11.25))
        langGlyph.addLine(to: CGPoint(x: 12.5, y: 13))
        langGlyph.addLine(to: CGPoint(x: 12.5, y: 9.49))
        langGlyph.close()
        langGlyph.move(to: CGPoint(x: 12.5, y: 8.48))
        langGlyph.addLine(to: CGPoint(x: 12.5, y: 1.99))
        langGlyph.addCurve(to: CGPoint(x: 8.27, y: 7.22), controlPoint1: CGPoint(x: 10.59, y: 3.47), controlPoint2: CGPoint(x: 9.18, y: 5.21))
        langGlyph.addCurve(to: CGPoint(x: 12.5, y: 8.48), controlPoint1: CGPoint(x: 9.77, y: 7.98), controlPoint2: CGPoint(x: 11.18, y: 8.4))
        langGlyph.close()
        langGlyph.move(to: CGPoint(x: 13, y: 26))
        langGlyph.addCurve(to: CGPoint(x: 0, y: 13), controlPoint1: CGPoint(x: 5.82, y: 26), controlPoint2: CGPoint(x: 0, y: 20.18))
        langGlyph.addCurve(to: CGPoint(x: 13, y: 0), controlPoint1: CGPoint(x: 0, y: 5.82), controlPoint2: CGPoint(x: 5.82, y: 0))
        langGlyph.addCurve(to: CGPoint(x: 26, y: 13), controlPoint1: CGPoint(x: 20.18, y: 0), controlPoint2: CGPoint(x: 26, y: 5.82))
        langGlyph.addCurve(to: CGPoint(x: 13, y: 26), controlPoint1: CGPoint(x: 26, y: 20.18), controlPoint2: CGPoint(x: 20.18, y: 26))
        langGlyph.close()
        context.saveGState()
        context.translateBy(x: 26, y: 6)
        langGlyph.usesEvenOddFillRule = true
        UIColor(hue: 0.597, saturation: 0.13, brightness: 0.361, alpha: 1).setFill()
        langGlyph.fill()
        context.restoreGState()
        
        /// Symbols
        do {
            context.saveGState()
            context.translateBy(x: 78, y: 5)
            
            /// Background
            let background = UIBezierPath()
            background.move(to: CGPoint(x: 5, y: 0))
            background.addLine(to: CGPoint(x: 122, y: 0))
            background.addCurve(to: CGPoint(x: 127, y: 5), controlPoint1: CGPoint(x: 124.76, y: 0), controlPoint2: CGPoint(x: 127, y: 2.24))
            background.addLine(to: CGPoint(x: 127, y: 25))
            background.addCurve(to: CGPoint(x: 122, y: 30), controlPoint1: CGPoint(x: 127, y: 27.76), controlPoint2: CGPoint(x: 124.76, y: 30))
            background.addLine(to: CGPoint(x: 5, y: 30))
            background.addCurve(to: CGPoint(x: 0, y: 25), controlPoint1: CGPoint(x: 2.24, y: 30), controlPoint2: CGPoint(x: 0, y: 27.76))
            background.addLine(to: CGPoint(x: 0, y: 5))
            background.addCurve(to: CGPoint(x: 5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.24), controlPoint2: CGPoint(x: 2.24, y: 0))
            background.close()
            context.saveGState()
            background.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background.cgPath)
            context.addRect(background.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -128, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 128, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background.fill()
            context.restoreGState()
            background.usesEvenOddFillRule = true
            UIColor(hue: 0.593, saturation: 0.095, brightness: 0.741, alpha: 0.5).setFill()
            background.fill()
            context.saveGState()
            context.setBlendMode(.softLight)
            context.beginTransparencyLayer(in: background.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 0, alpha: 0.5).setFill()
                background.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.saveGState()
            context.setBlendMode(.softLight)
            context.beginTransparencyLayer(in: background.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 1, alpha: 0.1).setFill()
                background.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            /// 123
            let _123 = NSMutableAttributedString(string: "123")
            _123.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: _123.length))
            _123.addAttribute(.kern, value: -0.32, range: NSRange(location: 0, length: _123.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                _123.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _123.length))
            }
            context.saveGState()
            _123.draw(in: CGRect(x: 50, y: 6, width: 27, height: 21))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Space
        do {
            context.saveGState()
            context.translateBy(x: 209, y: 5)
            
            /// Background
            let background2 = UIBezierPath()
            background2.move(to: CGPoint(x: 6.41, y: 0))
            background2.addLine(to: CGPoint(x: 385.59, y: 0))
            background2.addCurve(to: CGPoint(x: 389.44, y: 0.67), controlPoint1: CGPoint(x: 387.82, y: 0), controlPoint2: CGPoint(x: 388.63, y: 0.23))
            background2.addCurve(to: CGPoint(x: 391.33, y: 2.56), controlPoint1: CGPoint(x: 390.26, y: 1.1), controlPoint2: CGPoint(x: 390.9, y: 1.74))
            background2.addCurve(to: CGPoint(x: 392, y: 6.41), controlPoint1: CGPoint(x: 391.77, y: 3.37), controlPoint2: CGPoint(x: 392, y: 4.18))
            background2.addLine(to: CGPoint(x: 392, y: 23.59))
            background2.addCurve(to: CGPoint(x: 391.33, y: 27.44), controlPoint1: CGPoint(x: 392, y: 25.82), controlPoint2: CGPoint(x: 391.77, y: 26.63))
            background2.addCurve(to: CGPoint(x: 389.44, y: 29.33), controlPoint1: CGPoint(x: 390.9, y: 28.26), controlPoint2: CGPoint(x: 390.26, y: 28.9))
            background2.addCurve(to: CGPoint(x: 385.59, y: 30), controlPoint1: CGPoint(x: 388.63, y: 29.77), controlPoint2: CGPoint(x: 387.82, y: 30))
            background2.addLine(to: CGPoint(x: 6.41, y: 30))
            background2.addCurve(to: CGPoint(x: 2.56, y: 29.33), controlPoint1: CGPoint(x: 4.18, y: 30), controlPoint2: CGPoint(x: 3.37, y: 29.77))
            background2.addCurve(to: CGPoint(x: 0.67, y: 27.44), controlPoint1: CGPoint(x: 1.74, y: 28.9), controlPoint2: CGPoint(x: 1.1, y: 28.26))
            background2.addCurve(to: CGPoint(x: 0, y: 23.59), controlPoint1: CGPoint(x: 0.23, y: 26.63), controlPoint2: CGPoint(x: 0, y: 25.82))
            background2.addLine(to: CGPoint(x: 0, y: 6.41))
            background2.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
            background2.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
            background2.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
            background2.close()
            context.saveGState()
            background2.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background2.cgPath)
            context.addRect(background2.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -393, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 393, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background2.fill()
            context.restoreGState()
            background2.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background2.fill()
            context.restoreGState()
            
            /// Space
            let space = NSMutableAttributedString(string: "space")
            space.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: space.length))
            space.addAttribute(.kern, value: -0.32, range: NSRange(location: 0, length: space.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                space.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: space.length))
            }
            context.saveGState()
            space.draw(in: CGRect(x: 174, y: 5, width: 44, height: 21))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Button
        do {
            context.saveGState()
            context.translateBy(x: 606, y: 5)
            
            /// Background
            let background3 = UIBezierPath()
            background3.move(to: CGPoint(x: 6.41, y: 0))
            background3.addLine(to: CGPoint(x: 120.59, y: 0))
            background3.addCurve(to: CGPoint(x: 124.44, y: 0.67), controlPoint1: CGPoint(x: 122.82, y: 0), controlPoint2: CGPoint(x: 123.63, y: 0.23))
            background3.addCurve(to: CGPoint(x: 126.33, y: 2.56), controlPoint1: CGPoint(x: 125.26, y: 1.1), controlPoint2: CGPoint(x: 125.9, y: 1.74))
            background3.addCurve(to: CGPoint(x: 127, y: 6.41), controlPoint1: CGPoint(x: 126.77, y: 3.37), controlPoint2: CGPoint(x: 127, y: 4.18))
            background3.addLine(to: CGPoint(x: 127, y: 23.59))
            background3.addCurve(to: CGPoint(x: 126.33, y: 27.44), controlPoint1: CGPoint(x: 127, y: 25.82), controlPoint2: CGPoint(x: 126.77, y: 26.63))
            background3.addCurve(to: CGPoint(x: 124.44, y: 29.33), controlPoint1: CGPoint(x: 125.9, y: 28.26), controlPoint2: CGPoint(x: 125.26, y: 28.9))
            background3.addCurve(to: CGPoint(x: 120.59, y: 30), controlPoint1: CGPoint(x: 123.63, y: 29.77), controlPoint2: CGPoint(x: 122.82, y: 30))
            background3.addLine(to: CGPoint(x: 6.41, y: 30))
            background3.addCurve(to: CGPoint(x: 2.56, y: 29.33), controlPoint1: CGPoint(x: 4.18, y: 30), controlPoint2: CGPoint(x: 3.37, y: 29.77))
            background3.addCurve(to: CGPoint(x: 0.67, y: 27.44), controlPoint1: CGPoint(x: 1.74, y: 28.9), controlPoint2: CGPoint(x: 1.1, y: 28.26))
            background3.addCurve(to: CGPoint(x: 0, y: 23.59), controlPoint1: CGPoint(x: 0.23, y: 26.63), controlPoint2: CGPoint(x: 0, y: 25.82))
            background3.addLine(to: CGPoint(x: 0, y: 6.41))
            background3.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
            background3.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
            background3.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
            background3.close()
            context.saveGState()
            background3.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background3.cgPath)
            context.addRect(background3.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -128, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 128, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background3.fill()
            context.restoreGState()
            background3.usesEvenOddFillRule = true
            UIColor(hue: 0.593, saturation: 0.095, brightness: 0.741, alpha: 0.5).setFill()
            background3.fill()
            context.saveGState()
            context.setBlendMode(.softLight)
            context.beginTransparencyLayer(in: background3.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 0, alpha: 0.5).setFill()
                background3.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.saveGState()
            context.setBlendMode(.softLight)
            context.beginTransparencyLayer(in: background3.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 1, alpha: 0.1).setFill()
                background3.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            /// ↳ Label
            let label = NSMutableAttributedString(string: "Label")
            label.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: label.length))
            label.addAttribute(.kern, value: -0.32, range: NSRange(location: 0, length: label.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
            }
            context.saveGState()
            label.draw(at: CGPoint(x: 43, y: 5))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawIPhoneXKeyboards_SimpleButtonActiveLandscapeX(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 812, height: 40), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 812, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 812, y: resizedFrame.height / 40)
        
        /// Speech
        let speech = UIBezierPath()
        speech.move(to: CGPoint(x: 13.33, y: 23.25))
        speech.addCurve(to: CGPoint(x: 12.58, y: 24), controlPoint1: CGPoint(x: 13.33, y: 23.66), controlPoint2: CGPoint(x: 13, y: 24))
        speech.addLine(to: CGPoint(x: 3.42, y: 24))
        speech.addCurve(to: CGPoint(x: 2.67, y: 23.25), controlPoint1: CGPoint(x: 3, y: 24), controlPoint2: CGPoint(x: 2.67, y: 23.67))
        speech.addLine(to: CGPoint(x: 2.67, y: 22.95))
        speech.addCurve(to: CGPoint(x: 3.42, y: 22.2), controlPoint1: CGPoint(x: 2.67, y: 22.54), controlPoint2: CGPoint(x: 3.01, y: 22.2))
        speech.addLine(to: CGPoint(x: 7, y: 22.2))
        speech.addLine(to: CGPoint(x: 7, y: 19.8))
        speech.addCurve(to: CGPoint(x: 0, y: 13.77), controlPoint1: CGPoint(x: 3.67, y: 19.8), controlPoint2: CGPoint(x: 0, y: 16.17))
        speech.addCurve(to: CGPoint(x: 0, y: 9.75), controlPoint1: CGPoint(x: 0, y: 11.98), controlPoint2: CGPoint(x: 0, y: 9.75))
        speech.addCurve(to: CGPoint(x: 0.74, y: 9), controlPoint1: CGPoint(x: 0, y: 9.33), controlPoint2: CGPoint(x: 0.33, y: 9))
        speech.addLine(to: CGPoint(x: 1.26, y: 9))
        speech.addCurve(to: CGPoint(x: 2, y: 9.75), controlPoint1: CGPoint(x: 1.67, y: 9), controlPoint2: CGPoint(x: 2, y: 9.34))
        speech.addLine(to: CGPoint(x: 2, y: 13.77))
        speech.addCurve(to: CGPoint(x: 8, y: 17.97), controlPoint1: CGPoint(x: 2, y: 15.57), controlPoint2: CGPoint(x: 4.67, y: 17.97))
        speech.addCurve(to: CGPoint(x: 14, y: 13.77), controlPoint1: CGPoint(x: 11.33, y: 17.97), controlPoint2: CGPoint(x: 14, y: 15.57))
        speech.addLine(to: CGPoint(x: 14, y: 9.75))
        speech.addCurve(to: CGPoint(x: 14.74, y: 9), controlPoint1: CGPoint(x: 14, y: 9.33), controlPoint2: CGPoint(x: 14.33, y: 9))
        speech.addLine(to: CGPoint(x: 15.26, y: 9))
        speech.addCurve(to: CGPoint(x: 16, y: 9.75), controlPoint1: CGPoint(x: 15.67, y: 9), controlPoint2: CGPoint(x: 16, y: 9.34))
        speech.addLine(to: CGPoint(x: 16, y: 13.77))
        speech.addCurve(to: CGPoint(x: 9, y: 19.8), controlPoint1: CGPoint(x: 16, y: 16.17), controlPoint2: CGPoint(x: 12.33, y: 19.8))
        speech.addLine(to: CGPoint(x: 9, y: 22.2))
        speech.addLine(to: CGPoint(x: 12.58, y: 22.2))
        speech.addCurve(to: CGPoint(x: 13.33, y: 22.95), controlPoint1: CGPoint(x: 13, y: 22.2), controlPoint2: CGPoint(x: 13.33, y: 22.53))
        speech.addLine(to: CGPoint(x: 13.33, y: 23.25))
        speech.close()
        speech.move(to: CGPoint(x: 3.33, y: 4.66))
        speech.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 3.33, y: 2.09), controlPoint2: CGPoint(x: 5.43, y: 0))
        speech.addCurve(to: CGPoint(x: 12.67, y: 4.66), controlPoint1: CGPoint(x: 10.58, y: 0), controlPoint2: CGPoint(x: 12.67, y: 2.09))
        speech.addLine(to: CGPoint(x: 12.67, y: 12.14))
        speech.addCurve(to: CGPoint(x: 8, y: 16.8), controlPoint1: CGPoint(x: 12.67, y: 14.71), controlPoint2: CGPoint(x: 10.57, y: 16.8))
        speech.addCurve(to: CGPoint(x: 3.33, y: 12.14), controlPoint1: CGPoint(x: 5.42, y: 16.8), controlPoint2: CGPoint(x: 3.33, y: 14.71))
        speech.addLine(to: CGPoint(x: 3.33, y: 4.66))
        speech.close()
        speech.move(to: CGPoint(x: 5.33, y: 4.47))
        speech.addLine(to: CGPoint(x: 5.33, y: 12.33))
        speech.addCurve(to: CGPoint(x: 8, y: 15), controlPoint1: CGPoint(x: 5.33, y: 13.81), controlPoint2: CGPoint(x: 6.53, y: 15))
        speech.addCurve(to: CGPoint(x: 10.67, y: 12.33), controlPoint1: CGPoint(x: 9.47, y: 15), controlPoint2: CGPoint(x: 10.67, y: 13.8))
        speech.addLine(to: CGPoint(x: 10.67, y: 4.47))
        speech.addCurve(to: CGPoint(x: 8, y: 1.8), controlPoint1: CGPoint(x: 10.67, y: 2.99), controlPoint2: CGPoint(x: 9.47, y: 1.8))
        speech.addCurve(to: CGPoint(x: 5.33, y: 4.47), controlPoint1: CGPoint(x: 6.53, y: 1.8), controlPoint2: CGPoint(x: 5.33, y: 3))
        speech.close()
        context.saveGState()
        context.translateBy(x: 765, y: 7)
        speech.usesEvenOddFillRule = true
        UIColor(hue: 0.597, saturation: 0.13, brightness: 0.361, alpha: 1).setFill()
        speech.fill()
        context.restoreGState()
        
        /// Symbols
        do {
            context.saveGState()
            context.translateBy(x: 78, y: 5)
            
            /// Background
            let background = UIBezierPath()
            background.move(to: CGPoint(x: 5, y: 0))
            background.addLine(to: CGPoint(x: 122, y: 0))
            background.addCurve(to: CGPoint(x: 127, y: 5), controlPoint1: CGPoint(x: 124.76, y: 0), controlPoint2: CGPoint(x: 127, y: 2.24))
            background.addLine(to: CGPoint(x: 127, y: 25))
            background.addCurve(to: CGPoint(x: 122, y: 30), controlPoint1: CGPoint(x: 127, y: 27.76), controlPoint2: CGPoint(x: 124.76, y: 30))
            background.addLine(to: CGPoint(x: 5, y: 30))
            background.addCurve(to: CGPoint(x: 0, y: 25), controlPoint1: CGPoint(x: 2.24, y: 30), controlPoint2: CGPoint(x: 0, y: 27.76))
            background.addLine(to: CGPoint(x: 0, y: 5))
            background.addCurve(to: CGPoint(x: 5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.24), controlPoint2: CGPoint(x: 2.24, y: 0))
            background.close()
            context.saveGState()
            background.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background.cgPath)
            context.addRect(background.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -128, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 128, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background.fill()
            context.restoreGState()
            background.usesEvenOddFillRule = true
            UIColor(hue: 0.593, saturation: 0.095, brightness: 0.741, alpha: 0.5).setFill()
            background.fill()
            context.saveGState()
            context.setBlendMode(.softLight)
            context.beginTransparencyLayer(in: background.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 0, alpha: 0.5).setFill()
                background.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.saveGState()
            context.setBlendMode(.softLight)
            context.beginTransparencyLayer(in: background.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 1, alpha: 0.1).setFill()
                background.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            /// 123
            let _123 = NSMutableAttributedString(string: "123")
            _123.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: _123.length))
            _123.addAttribute(.kern, value: -0.32, range: NSRange(location: 0, length: _123.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                _123.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _123.length))
            }
            context.saveGState()
            _123.draw(in: CGRect(x: 50, y: 6, width: 27, height: 21))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Space
        do {
            context.saveGState()
            context.translateBy(x: 209, y: 5)
            
            /// Background
            let background2 = UIBezierPath()
            background2.move(to: CGPoint(x: 6.41, y: 0))
            background2.addLine(to: CGPoint(x: 385.59, y: 0))
            background2.addCurve(to: CGPoint(x: 389.44, y: 0.67), controlPoint1: CGPoint(x: 387.82, y: 0), controlPoint2: CGPoint(x: 388.63, y: 0.23))
            background2.addCurve(to: CGPoint(x: 391.33, y: 2.56), controlPoint1: CGPoint(x: 390.26, y: 1.1), controlPoint2: CGPoint(x: 390.9, y: 1.74))
            background2.addCurve(to: CGPoint(x: 392, y: 6.41), controlPoint1: CGPoint(x: 391.77, y: 3.37), controlPoint2: CGPoint(x: 392, y: 4.18))
            background2.addLine(to: CGPoint(x: 392, y: 23.59))
            background2.addCurve(to: CGPoint(x: 391.33, y: 27.44), controlPoint1: CGPoint(x: 392, y: 25.82), controlPoint2: CGPoint(x: 391.77, y: 26.63))
            background2.addCurve(to: CGPoint(x: 389.44, y: 29.33), controlPoint1: CGPoint(x: 390.9, y: 28.26), controlPoint2: CGPoint(x: 390.26, y: 28.9))
            background2.addCurve(to: CGPoint(x: 385.59, y: 30), controlPoint1: CGPoint(x: 388.63, y: 29.77), controlPoint2: CGPoint(x: 387.82, y: 30))
            background2.addLine(to: CGPoint(x: 6.41, y: 30))
            background2.addCurve(to: CGPoint(x: 2.56, y: 29.33), controlPoint1: CGPoint(x: 4.18, y: 30), controlPoint2: CGPoint(x: 3.37, y: 29.77))
            background2.addCurve(to: CGPoint(x: 0.67, y: 27.44), controlPoint1: CGPoint(x: 1.74, y: 28.9), controlPoint2: CGPoint(x: 1.1, y: 28.26))
            background2.addCurve(to: CGPoint(x: 0, y: 23.59), controlPoint1: CGPoint(x: 0.23, y: 26.63), controlPoint2: CGPoint(x: 0, y: 25.82))
            background2.addLine(to: CGPoint(x: 0, y: 6.41))
            background2.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
            background2.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
            background2.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
            background2.close()
            context.saveGState()
            background2.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background2.cgPath)
            context.addRect(background2.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -393, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 393, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background2.fill()
            context.restoreGState()
            background2.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background2.fill()
            context.restoreGState()
            
            /// Space
            let space = NSMutableAttributedString(string: "space")
            space.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: space.length))
            space.addAttribute(.kern, value: -0.32, range: NSRange(location: 0, length: space.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                space.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: space.length))
            }
            context.saveGState()
            space.draw(in: CGRect(x: 174, y: 5, width: 44, height: 21))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Button
        do {
            context.saveGState()
            context.translateBy(x: 606, y: 5)
            
            /// Background
            let background3 = UIBezierPath()
            background3.move(to: CGPoint(x: 6.41, y: 0))
            background3.addLine(to: CGPoint(x: 120.59, y: 0))
            background3.addCurve(to: CGPoint(x: 124.44, y: 0.67), controlPoint1: CGPoint(x: 122.82, y: 0), controlPoint2: CGPoint(x: 123.63, y: 0.23))
            background3.addCurve(to: CGPoint(x: 126.33, y: 2.56), controlPoint1: CGPoint(x: 125.26, y: 1.1), controlPoint2: CGPoint(x: 125.9, y: 1.74))
            background3.addCurve(to: CGPoint(x: 127, y: 6.41), controlPoint1: CGPoint(x: 126.77, y: 3.37), controlPoint2: CGPoint(x: 127, y: 4.18))
            background3.addLine(to: CGPoint(x: 127, y: 23.59))
            background3.addCurve(to: CGPoint(x: 126.33, y: 27.44), controlPoint1: CGPoint(x: 127, y: 25.82), controlPoint2: CGPoint(x: 126.77, y: 26.63))
            background3.addCurve(to: CGPoint(x: 124.44, y: 29.33), controlPoint1: CGPoint(x: 125.9, y: 28.26), controlPoint2: CGPoint(x: 125.26, y: 28.9))
            background3.addCurve(to: CGPoint(x: 120.59, y: 30), controlPoint1: CGPoint(x: 123.63, y: 29.77), controlPoint2: CGPoint(x: 122.82, y: 30))
            background3.addLine(to: CGPoint(x: 6.41, y: 30))
            background3.addCurve(to: CGPoint(x: 2.56, y: 29.33), controlPoint1: CGPoint(x: 4.18, y: 30), controlPoint2: CGPoint(x: 3.37, y: 29.77))
            background3.addCurve(to: CGPoint(x: 0.67, y: 27.44), controlPoint1: CGPoint(x: 1.74, y: 28.9), controlPoint2: CGPoint(x: 1.1, y: 28.26))
            background3.addCurve(to: CGPoint(x: 0, y: 23.59), controlPoint1: CGPoint(x: 0.23, y: 26.63), controlPoint2: CGPoint(x: 0, y: 25.82))
            background3.addLine(to: CGPoint(x: 0, y: 6.41))
            background3.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
            background3.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
            background3.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
            background3.close()
            context.saveGState()
            background3.usesEvenOddFillRule = true
            UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
            background3.fill()
            background3.usesEvenOddFillRule = true
            context.saveGState()
            UIRectClip(background3.bounds)
            context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
            context.setAlpha(0.35)
            context.beginTransparencyLayer(in: background3.bounds, auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                background3.fill()
                context.setBlendMode(.destinationOut)
                context.beginTransparencyLayer(in: background3.bounds, auxiliaryInfo: nil)
                do {
                    context.translateBy(x: -127, y: 0)
                    do {
                        let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                        let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                        let baseOffset = context.convertToDeviceSpace(CGPoint(x: 127, y: -1)).applying(baseTransform)
                        let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                        let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                        context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                    }
                    UIColor.black.setFill()
                    background3.fill()
                }
                context.endTransparencyLayer()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            /// ↳ Label
            let label = NSMutableAttributedString(string: "Label")
            label.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: label.length))
            label.addAttribute(.kern, value: -0.32, range: NSRange(location: 0, length: label.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
            }
            label.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: label.length))
            context.saveGState()
            label.draw(at: CGPoint(x: 43, y: 5))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Emoji Glyph
        let emojiGlyph = UIBezierPath()
        emojiGlyph.move(to: CGPoint(x: 13, y: 0))
        emojiGlyph.addCurve(to: CGPoint(x: 26, y: 13), controlPoint1: CGPoint(x: 20.18, y: 0), controlPoint2: CGPoint(x: 26, y: 5.82))
        emojiGlyph.addCurve(to: CGPoint(x: 13, y: 26), controlPoint1: CGPoint(x: 26, y: 20.18), controlPoint2: CGPoint(x: 20.18, y: 26))
        emojiGlyph.addCurve(to: CGPoint(x: 0, y: 13), controlPoint1: CGPoint(x: 5.82, y: 26), controlPoint2: CGPoint(x: 0, y: 20.18))
        emojiGlyph.addCurve(to: CGPoint(x: 13, y: 0), controlPoint1: CGPoint(x: 0, y: 5.82), controlPoint2: CGPoint(x: 5.82, y: 0))
        emojiGlyph.close()
        emojiGlyph.move(to: CGPoint(x: 13, y: 1.51))
        emojiGlyph.addCurve(to: CGPoint(x: 4.88, y: 4.88), controlPoint1: CGPoint(x: 9.95, y: 1.51), controlPoint2: CGPoint(x: 7.03, y: 2.72))
        emojiGlyph.addCurve(to: CGPoint(x: 1.51, y: 13), controlPoint1: CGPoint(x: 2.72, y: 7.03), controlPoint2: CGPoint(x: 1.51, y: 9.95))
        emojiGlyph.addCurve(to: CGPoint(x: 13, y: 24.49), controlPoint1: CGPoint(x: 1.51, y: 19.34), controlPoint2: CGPoint(x: 6.66, y: 24.49))
        emojiGlyph.addCurve(to: CGPoint(x: 24.48, y: 13), controlPoint1: CGPoint(x: 19.34, y: 24.49), controlPoint2: CGPoint(x: 24.48, y: 19.34))
        emojiGlyph.addCurve(to: CGPoint(x: 13, y: 1.51), controlPoint1: CGPoint(x: 24.48, y: 6.66), controlPoint2: CGPoint(x: 19.34, y: 1.52))
        emojiGlyph.close()
        emojiGlyph.move(to: CGPoint(x: 8.89, y: 7.36))
        emojiGlyph.addCurve(to: CGPoint(x: 9.96, y: 7.8), controlPoint1: CGPoint(x: 9.29, y: 7.36), controlPoint2: CGPoint(x: 9.68, y: 7.51))
        emojiGlyph.addCurve(to: CGPoint(x: 10.41, y: 8.87), controlPoint1: CGPoint(x: 10.25, y: 8.08), controlPoint2: CGPoint(x: 10.41, y: 8.46))
        emojiGlyph.addCurve(to: CGPoint(x: 8.89, y: 10.38), controlPoint1: CGPoint(x: 10.41, y: 9.7), controlPoint2: CGPoint(x: 9.73, y: 10.38))
        emojiGlyph.addCurve(to: CGPoint(x: 7.37, y: 8.87), controlPoint1: CGPoint(x: 8.05, y: 10.38), controlPoint2: CGPoint(x: 7.37, y: 9.7))
        emojiGlyph.addCurve(to: CGPoint(x: 7.81, y: 7.8), controlPoint1: CGPoint(x: 7.37, y: 8.46), controlPoint2: CGPoint(x: 7.53, y: 8.08))
        emojiGlyph.addCurve(to: CGPoint(x: 8.89, y: 7.36), controlPoint1: CGPoint(x: 8.1, y: 7.51), controlPoint2: CGPoint(x: 8.49, y: 7.36))
        emojiGlyph.close()
        emojiGlyph.move(to: CGPoint(x: 17.12, y: 7.36))
        emojiGlyph.addCurve(to: CGPoint(x: 18.2, y: 7.8), controlPoint1: CGPoint(x: 17.52, y: 7.36), controlPoint2: CGPoint(x: 17.91, y: 7.51))
        emojiGlyph.addCurve(to: CGPoint(x: 18.64, y: 8.87), controlPoint1: CGPoint(x: 18.48, y: 8.08), controlPoint2: CGPoint(x: 18.64, y: 8.46))
        emojiGlyph.addCurve(to: CGPoint(x: 17.89, y: 10.2), controlPoint1: CGPoint(x: 18.65, y: 9.41), controlPoint2: CGPoint(x: 18.36, y: 9.92))
        emojiGlyph.addCurve(to: CGPoint(x: 16.35, y: 10.2), controlPoint1: CGPoint(x: 17.41, y: 10.48), controlPoint2: CGPoint(x: 16.83, y: 10.48))
        emojiGlyph.addCurve(to: CGPoint(x: 15.6, y: 8.87), controlPoint1: CGPoint(x: 15.88, y: 9.92), controlPoint2: CGPoint(x: 15.59, y: 9.41))
        emojiGlyph.addCurve(to: CGPoint(x: 16.05, y: 7.8), controlPoint1: CGPoint(x: 15.6, y: 8.46), controlPoint2: CGPoint(x: 15.76, y: 8.08))
        emojiGlyph.addCurve(to: CGPoint(x: 17.12, y: 7.36), controlPoint1: CGPoint(x: 16.33, y: 7.51), controlPoint2: CGPoint(x: 16.72, y: 7.36))
        emojiGlyph.close()
        emojiGlyph.move(to: CGPoint(x: 21.66, y: 15.24))
        emojiGlyph.addCurve(to: CGPoint(x: 13, y: 22.1), controlPoint1: CGPoint(x: 20.97, y: 18.98), controlPoint2: CGPoint(x: 17.36, y: 22.1))
        emojiGlyph.addCurve(to: CGPoint(x: 4.35, y: 15.33), controlPoint1: CGPoint(x: 8.67, y: 22.1), controlPoint2: CGPoint(x: 5.08, y: 19.03))
        emojiGlyph.addCurve(to: CGPoint(x: 5.67, y: 14.36), controlPoint1: CGPoint(x: 4.2, y: 14.4), controlPoint2: CGPoint(x: 4.96, y: 14.19))
        emojiGlyph.addCurve(to: CGPoint(x: 13, y: 15.35), controlPoint1: CGPoint(x: 8.05, y: 15.05), controlPoint2: CGPoint(x: 10.52, y: 15.38))
        emojiGlyph.addCurve(to: CGPoint(x: 20.32, y: 14.36), controlPoint1: CGPoint(x: 15.47, y: 15.38), controlPoint2: CGPoint(x: 17.94, y: 15.05))
        emojiGlyph.addCurve(to: CGPoint(x: 21.66, y: 15.24), controlPoint1: CGPoint(x: 21.01, y: 14.19), controlPoint2: CGPoint(x: 21.75, y: 14.38))
        emojiGlyph.close()
        emojiGlyph.move(to: CGPoint(x: 19.31, y: 15.76))
        emojiGlyph.addCurve(to: CGPoint(x: 19.11, y: 15.83), controlPoint1: CGPoint(x: 19.25, y: 15.79), controlPoint2: CGPoint(x: 19.18, y: 15.8))
        emojiGlyph.addCurve(to: CGPoint(x: 19.32, y: 15.76), controlPoint1: CGPoint(x: 19.1, y: 15.83), controlPoint2: CGPoint(x: 19.33, y: 15.76))
        emojiGlyph.addCurve(to: CGPoint(x: 13.01, y: 16.58), controlPoint1: CGPoint(x: 17.27, y: 16.33), controlPoint2: CGPoint(x: 15.14, y: 16.6))
        emojiGlyph.addCurve(to: CGPoint(x: 6.63, y: 15.73), controlPoint1: CGPoint(x: 10.47, y: 16.58), controlPoint2: CGPoint(x: 8.19, y: 16.29))
        emojiGlyph.addCurve(to: CGPoint(x: 6.51, y: 17.14), controlPoint1: CGPoint(x: 5.49, y: 15.39), controlPoint2: CGPoint(x: 5.71, y: 16.73))
        emojiGlyph.addCurve(to: CGPoint(x: 13.01, y: 18.51), controlPoint1: CGPoint(x: 8.55, y: 18.07), controlPoint2: CGPoint(x: 10.77, y: 18.53))
        emojiGlyph.addCurve(to: CGPoint(x: 19.63, y: 17.09), controlPoint1: CGPoint(x: 15.68, y: 18.51), controlPoint2: CGPoint(x: 18.06, y: 17.89))
        emojiGlyph.addCurve(to: CGPoint(x: 19.31, y: 15.76), controlPoint1: CGPoint(x: 20.37, y: 16.61), controlPoint2: CGPoint(x: 20.51, y: 15.33))
        emojiGlyph.close()
        context.saveGState()
        context.translateBy(x: 26, y: 7)
        emojiGlyph.usesEvenOddFillRule = true
        UIColor(hue: 0.597, saturation: 0.13, brightness: 0.361, alpha: 1).setFill()
        emojiGlyph.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawIPhoneXKeyboards_ComplexButtonDefaultLandscapeX(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 812, height: 40), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 812, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 812, y: resizedFrame.height / 40)
        
        /// Speech
        let speech = UIBezierPath()
        speech.move(to: CGPoint(x: 13.33, y: 23.25))
        speech.addCurve(to: CGPoint(x: 12.58, y: 24), controlPoint1: CGPoint(x: 13.33, y: 23.66), controlPoint2: CGPoint(x: 13, y: 24))
        speech.addLine(to: CGPoint(x: 3.42, y: 24))
        speech.addCurve(to: CGPoint(x: 2.67, y: 23.25), controlPoint1: CGPoint(x: 3, y: 24), controlPoint2: CGPoint(x: 2.67, y: 23.67))
        speech.addLine(to: CGPoint(x: 2.67, y: 22.95))
        speech.addCurve(to: CGPoint(x: 3.42, y: 22.2), controlPoint1: CGPoint(x: 2.67, y: 22.54), controlPoint2: CGPoint(x: 3.01, y: 22.2))
        speech.addLine(to: CGPoint(x: 7, y: 22.2))
        speech.addLine(to: CGPoint(x: 7, y: 19.8))
        speech.addCurve(to: CGPoint(x: 0, y: 13.77), controlPoint1: CGPoint(x: 3.67, y: 19.8), controlPoint2: CGPoint(x: 0, y: 16.17))
        speech.addCurve(to: CGPoint(x: 0, y: 9.75), controlPoint1: CGPoint(x: 0, y: 11.98), controlPoint2: CGPoint(x: 0, y: 9.75))
        speech.addCurve(to: CGPoint(x: 0.74, y: 9), controlPoint1: CGPoint(x: 0, y: 9.33), controlPoint2: CGPoint(x: 0.33, y: 9))
        speech.addLine(to: CGPoint(x: 1.26, y: 9))
        speech.addCurve(to: CGPoint(x: 2, y: 9.75), controlPoint1: CGPoint(x: 1.67, y: 9), controlPoint2: CGPoint(x: 2, y: 9.34))
        speech.addLine(to: CGPoint(x: 2, y: 13.77))
        speech.addCurve(to: CGPoint(x: 8, y: 17.97), controlPoint1: CGPoint(x: 2, y: 15.57), controlPoint2: CGPoint(x: 4.67, y: 17.97))
        speech.addCurve(to: CGPoint(x: 14, y: 13.77), controlPoint1: CGPoint(x: 11.33, y: 17.97), controlPoint2: CGPoint(x: 14, y: 15.57))
        speech.addLine(to: CGPoint(x: 14, y: 9.75))
        speech.addCurve(to: CGPoint(x: 14.74, y: 9), controlPoint1: CGPoint(x: 14, y: 9.33), controlPoint2: CGPoint(x: 14.33, y: 9))
        speech.addLine(to: CGPoint(x: 15.26, y: 9))
        speech.addCurve(to: CGPoint(x: 16, y: 9.75), controlPoint1: CGPoint(x: 15.67, y: 9), controlPoint2: CGPoint(x: 16, y: 9.34))
        speech.addLine(to: CGPoint(x: 16, y: 13.77))
        speech.addCurve(to: CGPoint(x: 9, y: 19.8), controlPoint1: CGPoint(x: 16, y: 16.17), controlPoint2: CGPoint(x: 12.33, y: 19.8))
        speech.addLine(to: CGPoint(x: 9, y: 22.2))
        speech.addLine(to: CGPoint(x: 12.58, y: 22.2))
        speech.addCurve(to: CGPoint(x: 13.33, y: 22.95), controlPoint1: CGPoint(x: 13, y: 22.2), controlPoint2: CGPoint(x: 13.33, y: 22.53))
        speech.addLine(to: CGPoint(x: 13.33, y: 23.25))
        speech.close()
        speech.move(to: CGPoint(x: 3.33, y: 4.66))
        speech.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 3.33, y: 2.09), controlPoint2: CGPoint(x: 5.43, y: 0))
        speech.addCurve(to: CGPoint(x: 12.67, y: 4.66), controlPoint1: CGPoint(x: 10.58, y: 0), controlPoint2: CGPoint(x: 12.67, y: 2.09))
        speech.addLine(to: CGPoint(x: 12.67, y: 12.14))
        speech.addCurve(to: CGPoint(x: 8, y: 16.8), controlPoint1: CGPoint(x: 12.67, y: 14.71), controlPoint2: CGPoint(x: 10.57, y: 16.8))
        speech.addCurve(to: CGPoint(x: 3.33, y: 12.14), controlPoint1: CGPoint(x: 5.42, y: 16.8), controlPoint2: CGPoint(x: 3.33, y: 14.71))
        speech.addLine(to: CGPoint(x: 3.33, y: 4.66))
        speech.close()
        speech.move(to: CGPoint(x: 5.33, y: 4.47))
        speech.addLine(to: CGPoint(x: 5.33, y: 12.33))
        speech.addCurve(to: CGPoint(x: 8, y: 15), controlPoint1: CGPoint(x: 5.33, y: 13.81), controlPoint2: CGPoint(x: 6.53, y: 15))
        speech.addCurve(to: CGPoint(x: 10.67, y: 12.33), controlPoint1: CGPoint(x: 9.47, y: 15), controlPoint2: CGPoint(x: 10.67, y: 13.8))
        speech.addLine(to: CGPoint(x: 10.67, y: 4.47))
        speech.addCurve(to: CGPoint(x: 8, y: 1.8), controlPoint1: CGPoint(x: 10.67, y: 2.99), controlPoint2: CGPoint(x: 9.47, y: 1.8))
        speech.addCurve(to: CGPoint(x: 5.33, y: 4.47), controlPoint1: CGPoint(x: 6.53, y: 1.8), controlPoint2: CGPoint(x: 5.33, y: 3))
        speech.close()
        context.saveGState()
        context.translateBy(x: 765, y: 7)
        speech.usesEvenOddFillRule = true
        UIColor(hue: 0.597, saturation: 0.13, brightness: 0.361, alpha: 1).setFill()
        speech.fill()
        context.restoreGState()
        
        /// Lang Glyph
        let langGlyph = UIBezierPath()
        langGlyph.move(to: CGPoint(x: 20.47, y: 21.31))
        langGlyph.addCurve(to: CGPoint(x: 18.69, y: 20.45), controlPoint1: CGPoint(x: 19.87, y: 20.99), controlPoint2: CGPoint(x: 19.27, y: 20.7))
        langGlyph.addCurve(to: CGPoint(x: 15.96, y: 23.79), controlPoint1: CGPoint(x: 18, y: 21.72), controlPoint2: CGPoint(x: 17.09, y: 22.83))
        langGlyph.addCurve(to: CGPoint(x: 20.47, y: 21.31), controlPoint1: CGPoint(x: 17.66, y: 23.32), controlPoint2: CGPoint(x: 19.2, y: 22.46))
        langGlyph.close()
        langGlyph.move(to: CGPoint(x: 21.22, y: 20.58))
        langGlyph.addCurve(to: CGPoint(x: 24.09, y: 14.5), controlPoint1: CGPoint(x: 22.74, y: 18.93), controlPoint2: CGPoint(x: 23.77, y: 16.83))
        langGlyph.addLine(to: CGPoint(x: 20.26, y: 14.5))
        langGlyph.addCurve(to: CGPoint(x: 19.13, y: 19.55), controlPoint1: CGPoint(x: 20.16, y: 16.37), controlPoint2: CGPoint(x: 19.78, y: 18.05))
        langGlyph.addCurve(to: CGPoint(x: 21.22, y: 20.58), controlPoint1: CGPoint(x: 19.81, y: 19.84), controlPoint2: CGPoint(x: 20.51, y: 20.19))
        langGlyph.close()
        langGlyph.move(to: CGPoint(x: 14, y: 18.15))
        langGlyph.addCurve(to: CGPoint(x: 18.21, y: 19.17), controlPoint1: CGPoint(x: 15.33, y: 18.26), controlPoint2: CGPoint(x: 16.73, y: 18.6))
        langGlyph.addCurve(to: CGPoint(x: 19.26, y: 14.5), controlPoint1: CGPoint(x: 18.81, y: 17.79), controlPoint2: CGPoint(x: 19.16, y: 16.24))
        langGlyph.addLine(to: CGPoint(x: 14, y: 14.5))
        langGlyph.addLine(to: CGPoint(x: 14, y: 18.15))
        langGlyph.close()
        langGlyph.move(to: CGPoint(x: 14, y: 19.15))
        langGlyph.addLine(to: CGPoint(x: 14, y: 24))
        langGlyph.addCurve(to: CGPoint(x: 17.76, y: 20.07), controlPoint1: CGPoint(x: 15.63, y: 22.95), controlPoint2: CGPoint(x: 16.88, y: 21.64))
        langGlyph.addCurve(to: CGPoint(x: 14, y: 19.15), controlPoint1: CGPoint(x: 16.44, y: 19.57), controlPoint2: CGPoint(x: 15.18, y: 19.26))
        langGlyph.close()
        langGlyph.move(to: CGPoint(x: 5.89, y: 21.71))
        langGlyph.addCurve(to: CGPoint(x: 10.49, y: 23.93), controlPoint1: CGPoint(x: 7.21, y: 22.77), controlPoint2: CGPoint(x: 8.78, y: 23.55))
        langGlyph.addCurve(to: CGPoint(x: 7.68, y: 20.6), controlPoint1: CGPoint(x: 9.33, y: 22.98), controlPoint2: CGPoint(x: 8.39, y: 21.87))
        langGlyph.addCurve(to: CGPoint(x: 5.89, y: 21.71), controlPoint1: CGPoint(x: 7.09, y: 20.92), controlPoint2: CGPoint(x: 6.49, y: 21.29))
        langGlyph.close()
        langGlyph.move(to: CGPoint(x: 5.12, y: 21.02))
        langGlyph.addCurve(to: CGPoint(x: 7.23, y: 19.71), controlPoint1: CGPoint(x: 5.83, y: 20.52), controlPoint2: CGPoint(x: 6.53, y: 20.08))
        langGlyph.addCurve(to: CGPoint(x: 6.03, y: 14.5), controlPoint1: CGPoint(x: 6.53, y: 18.18), controlPoint2: CGPoint(x: 6.13, y: 16.44))
        langGlyph.addLine(to: CGPoint(x: 1.81, y: 14.5))
        langGlyph.addCurve(to: CGPoint(x: 5.12, y: 21.02), controlPoint1: CGPoint(x: 2.16, y: 17.05), controlPoint2: CGPoint(x: 3.36, y: 19.32))
        langGlyph.close()
        langGlyph.move(to: CGPoint(x: 12.5, y: 18.12))
        langGlyph.addLine(to: CGPoint(x: 12.5, y: 14.5))
        langGlyph.addLine(to: CGPoint(x: 7.03, y: 14.5))
        langGlyph.addCurve(to: CGPoint(x: 8.12, y: 19.26), controlPoint1: CGPoint(x: 7.12, y: 16.28), controlPoint2: CGPoint(x: 7.49, y: 17.86))
        langGlyph.addCurve(to: CGPoint(x: 12.5, y: 18.12), controlPoint1: CGPoint(x: 9.62, y: 18.57), controlPoint2: CGPoint(x: 11.08, y: 18.19))
        langGlyph.close()
        langGlyph.move(to: CGPoint(x: 12.5, y: 19.12))
        langGlyph.addCurve(to: CGPoint(x: 8.58, y: 20.16), controlPoint1: CGPoint(x: 11.24, y: 19.19), controlPoint2: CGPoint(x: 9.93, y: 19.54))
        langGlyph.addCurve(to: CGPoint(x: 12.5, y: 24.13), controlPoint1: CGPoint(x: 9.49, y: 21.76), controlPoint2: CGPoint(x: 10.79, y: 23.08))
        langGlyph.addLine(to: CGPoint(x: 12.5, y: 19.12))
        langGlyph.close()
        langGlyph.move(to: CGPoint(x: 21.2, y: 5.3))
        langGlyph.addCurve(to: CGPoint(x: 15.3, y: 1.95), controlPoint1: CGPoint(x: 19.65, y: 3.63), controlPoint2: CGPoint(x: 17.61, y: 2.44))
        langGlyph.addCurve(to: CGPoint(x: 18.88, y: 6.72), controlPoint1: CGPoint(x: 16.86, y: 3.34), controlPoint2: CGPoint(x: 18.06, y: 4.93))
        langGlyph.addCurve(to: CGPoint(x: 21.2, y: 5.3), controlPoint1: CGPoint(x: 19.63, y: 6.31), controlPoint2: CGPoint(x: 20.4, y: 5.84))
        langGlyph.close()
        langGlyph.move(to: CGPoint(x: 21.85, y: 6.07))
        langGlyph.addCurve(to: CGPoint(x: 19.27, y: 7.64), controlPoint1: CGPoint(x: 20.96, y: 6.67), controlPoint2: CGPoint(x: 20.1, y: 7.2))
        langGlyph.addCurve(to: CGPoint(x: 20.28, y: 13), controlPoint1: CGPoint(x: 19.89, y: 9.28), controlPoint2: CGPoint(x: 20.23, y: 11.06))
        langGlyph.addLine(to: CGPoint(x: 24.2, y: 13))
        langGlyph.addCurve(to: CGPoint(x: 24.2, y: 12.95), controlPoint1: CGPoint(x: 24.2, y: 12.98), controlPoint2: CGPoint(x: 24.2, y: 12.97))
        langGlyph.addCurve(to: CGPoint(x: 21.85, y: 6.07), controlPoint1: CGPoint(x: 24.2, y: 10.36), controlPoint2: CGPoint(x: 23.32, y: 7.97))
        langGlyph.close()
        langGlyph.move(to: CGPoint(x: 14, y: 9.44))
        langGlyph.addLine(to: CGPoint(x: 14, y: 13))
        langGlyph.addLine(to: CGPoint(x: 19.28, y: 13))
        langGlyph.addCurve(to: CGPoint(x: 18.38, y: 8.1), controlPoint1: CGPoint(x: 19.23, y: 11.23), controlPoint2: CGPoint(x: 18.93, y: 9.59))
        langGlyph.addCurve(to: CGPoint(x: 14, y: 9.44), controlPoint1: CGPoint(x: 16.81, y: 8.84), controlPoint2: CGPoint(x: 15.36, y: 9.29))
        langGlyph.close()
        langGlyph.move(to: CGPoint(x: 14, y: 8.44))
        langGlyph.addCurve(to: CGPoint(x: 17.99, y: 7.17), controlPoint1: CGPoint(x: 15.22, y: 8.29), controlPoint2: CGPoint(x: 16.55, y: 7.87))
        langGlyph.addCurve(to: CGPoint(x: 14, y: 2.16), controlPoint1: CGPoint(x: 17.11, y: 5.26), controlPoint2: CGPoint(x: 15.78, y: 3.59))
        langGlyph.addLine(to: CGPoint(x: 14, y: 8.44))
        langGlyph.close()
        langGlyph.move(to: CGPoint(x: 4.91, y: 5.08))
        langGlyph.addCurve(to: CGPoint(x: 7.39, y: 6.74), controlPoint1: CGPoint(x: 5.76, y: 5.72), controlPoint2: CGPoint(x: 6.59, y: 6.28))
        langGlyph.addCurve(to: CGPoint(x: 11.09, y: 1.85), controlPoint1: CGPoint(x: 8.24, y: 4.9), controlPoint2: CGPoint(x: 9.47, y: 3.27))
        langGlyph.addCurve(to: CGPoint(x: 4.91, y: 5.08), controlPoint1: CGPoint(x: 8.69, y: 2.25), controlPoint2: CGPoint(x: 6.54, y: 3.41))
        langGlyph.close()
        langGlyph.move(to: CGPoint(x: 4.24, y: 5.83))
        langGlyph.addCurve(to: CGPoint(x: 1.7, y: 12.95), controlPoint1: CGPoint(x: 2.65, y: 7.77), controlPoint2: CGPoint(x: 1.7, y: 10.25))
        langGlyph.addCurve(to: CGPoint(x: 1.7, y: 13), controlPoint1: CGPoint(x: 1.7, y: 12.97), controlPoint2: CGPoint(x: 1.7, y: 12.98))
        langGlyph.addLine(to: CGPoint(x: 6.01, y: 13))
        langGlyph.addCurve(to: CGPoint(x: 7, y: 7.67), controlPoint1: CGPoint(x: 6.05, y: 11.07), controlPoint2: CGPoint(x: 6.39, y: 9.3))
        langGlyph.addCurve(to: CGPoint(x: 4.24, y: 5.83), controlPoint1: CGPoint(x: 6.11, y: 7.16), controlPoint2: CGPoint(x: 5.19, y: 6.55))
        langGlyph.close()
        langGlyph.move(to: CGPoint(x: 12.5, y: 9.49))
        langGlyph.addCurve(to: CGPoint(x: 7.89, y: 8.15), controlPoint1: CGPoint(x: 11.04, y: 9.4), controlPoint2: CGPoint(x: 9.51, y: 8.95))
        langGlyph.addCurve(to: CGPoint(x: 7.01, y: 13), controlPoint1: CGPoint(x: 7.35, y: 9.63), controlPoint2: CGPoint(x: 7.05, y: 11.25))
        langGlyph.addLine(to: CGPoint(x: 12.5, y: 13))
        langGlyph.addLine(to: CGPoint(x: 12.5, y: 9.49))
        langGlyph.close()
        langGlyph.move(to: CGPoint(x: 12.5, y: 8.48))
        langGlyph.addLine(to: CGPoint(x: 12.5, y: 1.99))
        langGlyph.addCurve(to: CGPoint(x: 8.27, y: 7.22), controlPoint1: CGPoint(x: 10.59, y: 3.47), controlPoint2: CGPoint(x: 9.18, y: 5.21))
        langGlyph.addCurve(to: CGPoint(x: 12.5, y: 8.48), controlPoint1: CGPoint(x: 9.77, y: 7.98), controlPoint2: CGPoint(x: 11.18, y: 8.4))
        langGlyph.close()
        langGlyph.move(to: CGPoint(x: 13, y: 26))
        langGlyph.addCurve(to: CGPoint(x: 0, y: 13), controlPoint1: CGPoint(x: 5.82, y: 26), controlPoint2: CGPoint(x: 0, y: 20.18))
        langGlyph.addCurve(to: CGPoint(x: 13, y: 0), controlPoint1: CGPoint(x: 0, y: 5.82), controlPoint2: CGPoint(x: 5.82, y: 0))
        langGlyph.addCurve(to: CGPoint(x: 26, y: 13), controlPoint1: CGPoint(x: 20.18, y: 0), controlPoint2: CGPoint(x: 26, y: 5.82))
        langGlyph.addCurve(to: CGPoint(x: 13, y: 26), controlPoint1: CGPoint(x: 26, y: 20.18), controlPoint2: CGPoint(x: 20.18, y: 26))
        langGlyph.close()
        context.saveGState()
        context.translateBy(x: 26, y: 6)
        langGlyph.usesEvenOddFillRule = true
        UIColor(hue: 0.597, saturation: 0.13, brightness: 0.361, alpha: 1).setFill()
        langGlyph.fill()
        context.restoreGState()
        
        /// Symbols
        do {
            context.saveGState()
            context.translateBy(x: 78, y: 5)
            
            /// Background
            let background = UIBezierPath()
            background.move(to: CGPoint(x: 5, y: 0))
            background.addLine(to: CGPoint(x: 122, y: 0))
            background.addCurve(to: CGPoint(x: 127, y: 5), controlPoint1: CGPoint(x: 124.76, y: 0), controlPoint2: CGPoint(x: 127, y: 2.24))
            background.addLine(to: CGPoint(x: 127, y: 25))
            background.addCurve(to: CGPoint(x: 122, y: 30), controlPoint1: CGPoint(x: 127, y: 27.76), controlPoint2: CGPoint(x: 124.76, y: 30))
            background.addLine(to: CGPoint(x: 5, y: 30))
            background.addCurve(to: CGPoint(x: 0, y: 25), controlPoint1: CGPoint(x: 2.24, y: 30), controlPoint2: CGPoint(x: 0, y: 27.76))
            background.addLine(to: CGPoint(x: 0, y: 5))
            background.addCurve(to: CGPoint(x: 5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.24), controlPoint2: CGPoint(x: 2.24, y: 0))
            background.close()
            context.saveGState()
            background.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background.cgPath)
            context.addRect(background.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -128, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 128, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background.fill()
            context.restoreGState()
            background.usesEvenOddFillRule = true
            UIColor(hue: 0.593, saturation: 0.095, brightness: 0.741, alpha: 0.5).setFill()
            background.fill()
            context.saveGState()
            context.setBlendMode(.softLight)
            context.beginTransparencyLayer(in: background.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 0, alpha: 0.5).setFill()
                background.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.saveGState()
            context.setBlendMode(.softLight)
            context.beginTransparencyLayer(in: background.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 1, alpha: 0.1).setFill()
                background.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            /// 123
            let _123 = NSMutableAttributedString(string: "123")
            _123.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: _123.length))
            _123.addAttribute(.kern, value: -0.32, range: NSRange(location: 0, length: _123.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                _123.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _123.length))
            }
            context.saveGState()
            _123.draw(in: CGRect(x: 50, y: 6, width: 27, height: 21))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Space
        do {
            context.saveGState()
            context.translateBy(x: 209, y: 5)
            
            /// Background
            let background2 = UIBezierPath()
            background2.move(to: CGPoint(x: 6.41, y: 0))
            background2.addLine(to: CGPoint(x: 385.59, y: 0))
            background2.addCurve(to: CGPoint(x: 389.44, y: 0.67), controlPoint1: CGPoint(x: 387.82, y: 0), controlPoint2: CGPoint(x: 388.63, y: 0.23))
            background2.addCurve(to: CGPoint(x: 391.33, y: 2.56), controlPoint1: CGPoint(x: 390.26, y: 1.1), controlPoint2: CGPoint(x: 390.9, y: 1.74))
            background2.addCurve(to: CGPoint(x: 392, y: 6.41), controlPoint1: CGPoint(x: 391.77, y: 3.37), controlPoint2: CGPoint(x: 392, y: 4.18))
            background2.addLine(to: CGPoint(x: 392, y: 23.59))
            background2.addCurve(to: CGPoint(x: 391.33, y: 27.44), controlPoint1: CGPoint(x: 392, y: 25.82), controlPoint2: CGPoint(x: 391.77, y: 26.63))
            background2.addCurve(to: CGPoint(x: 389.44, y: 29.33), controlPoint1: CGPoint(x: 390.9, y: 28.26), controlPoint2: CGPoint(x: 390.26, y: 28.9))
            background2.addCurve(to: CGPoint(x: 385.59, y: 30), controlPoint1: CGPoint(x: 388.63, y: 29.77), controlPoint2: CGPoint(x: 387.82, y: 30))
            background2.addLine(to: CGPoint(x: 6.41, y: 30))
            background2.addCurve(to: CGPoint(x: 2.56, y: 29.33), controlPoint1: CGPoint(x: 4.18, y: 30), controlPoint2: CGPoint(x: 3.37, y: 29.77))
            background2.addCurve(to: CGPoint(x: 0.67, y: 27.44), controlPoint1: CGPoint(x: 1.74, y: 28.9), controlPoint2: CGPoint(x: 1.1, y: 28.26))
            background2.addCurve(to: CGPoint(x: 0, y: 23.59), controlPoint1: CGPoint(x: 0.23, y: 26.63), controlPoint2: CGPoint(x: 0, y: 25.82))
            background2.addLine(to: CGPoint(x: 0, y: 6.41))
            background2.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
            background2.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
            background2.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
            background2.close()
            context.saveGState()
            background2.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background2.cgPath)
            context.addRect(background2.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -393, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 393, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background2.fill()
            context.restoreGState()
            background2.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background2.fill()
            context.restoreGState()
            
            /// Space
            let space = NSMutableAttributedString(string: "space")
            space.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: space.length))
            space.addAttribute(.kern, value: -0.32, range: NSRange(location: 0, length: space.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                space.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: space.length))
            }
            context.saveGState()
            space.draw(in: CGRect(x: 174, y: 5, width: 44, height: 21))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Brush
        do {
            context.saveGState()
            context.translateBy(x: 672, y: 5)
            
            /// Background
            let background3 = UIBezierPath()
            background3.move(to: CGPoint(x: 6.41, y: 0))
            background3.addLine(to: CGPoint(x: 54.59, y: 0))
            background3.addCurve(to: CGPoint(x: 58.44, y: 0.67), controlPoint1: CGPoint(x: 56.82, y: 0), controlPoint2: CGPoint(x: 57.63, y: 0.23))
            background3.addCurve(to: CGPoint(x: 60.33, y: 2.56), controlPoint1: CGPoint(x: 59.26, y: 1.1), controlPoint2: CGPoint(x: 59.9, y: 1.74))
            background3.addCurve(to: CGPoint(x: 61, y: 6.41), controlPoint1: CGPoint(x: 60.77, y: 3.37), controlPoint2: CGPoint(x: 61, y: 4.18))
            background3.addLine(to: CGPoint(x: 61, y: 23.59))
            background3.addCurve(to: CGPoint(x: 60.33, y: 27.44), controlPoint1: CGPoint(x: 61, y: 25.82), controlPoint2: CGPoint(x: 60.77, y: 26.63))
            background3.addCurve(to: CGPoint(x: 58.44, y: 29.33), controlPoint1: CGPoint(x: 59.9, y: 28.26), controlPoint2: CGPoint(x: 59.26, y: 28.9))
            background3.addCurve(to: CGPoint(x: 54.59, y: 30), controlPoint1: CGPoint(x: 57.63, y: 29.77), controlPoint2: CGPoint(x: 56.82, y: 30))
            background3.addLine(to: CGPoint(x: 6.41, y: 30))
            background3.addCurve(to: CGPoint(x: 2.56, y: 29.33), controlPoint1: CGPoint(x: 4.18, y: 30), controlPoint2: CGPoint(x: 3.37, y: 29.77))
            background3.addCurve(to: CGPoint(x: 0.67, y: 27.44), controlPoint1: CGPoint(x: 1.74, y: 28.9), controlPoint2: CGPoint(x: 1.1, y: 28.26))
            background3.addCurve(to: CGPoint(x: 0, y: 23.59), controlPoint1: CGPoint(x: 0.23, y: 26.63), controlPoint2: CGPoint(x: 0, y: 25.82))
            background3.addLine(to: CGPoint(x: 0, y: 6.41))
            background3.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
            background3.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
            background3.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
            background3.close()
            context.saveGState()
            background3.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background3.cgPath)
            context.addRect(background3.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -62, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 62, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background3.fill()
            context.restoreGState()
            background3.usesEvenOddFillRule = true
            UIColor(hue: 0.593, saturation: 0.095, brightness: 0.741, alpha: 0.5).setFill()
            background3.fill()
            context.saveGState()
            context.setBlendMode(.softLight)
            context.beginTransparencyLayer(in: background3.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 0, alpha: 0.5).setFill()
                background3.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.saveGState()
            context.setBlendMode(.softLight)
            context.beginTransparencyLayer(in: background3.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 1, alpha: 0.1).setFill()
                background3.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            /// Path
            let path = UIBezierPath()
            path.move(to: CGPoint(x: 3.04, y: 2.07))
            path.addCurve(to: CGPoint(x: 11.4, y: 0.09), controlPoint1: CGPoint(x: 5.44, y: 0.67), controlPoint2: CGPoint(x: 8.35, y: -0.31))
            path.addCurve(to: CGPoint(x: 12.52, y: 0.35), controlPoint1: CGPoint(x: 11.71, y: 0.13), controlPoint2: CGPoint(x: 12.09, y: 0.22))
            path.addCurve(to: CGPoint(x: 14.28, y: 1.07), controlPoint1: CGPoint(x: 13.14, y: 0.51), controlPoint2: CGPoint(x: 13.73, y: 0.75))
            path.addCurve(to: CGPoint(x: 15.3, y: 1.39), controlPoint1: CGPoint(x: 14.66, y: 1.29), controlPoint2: CGPoint(x: 15.03, y: 1.36))
            path.addCurve(to: CGPoint(x: 17.24, y: 1.11), controlPoint1: CGPoint(x: 15.91, y: 1.47), controlPoint2: CGPoint(x: 16.63, y: 1.27))
            path.addCurve(to: CGPoint(x: 19.07, y: 0.85), controlPoint1: CGPoint(x: 17.84, y: 0.95), controlPoint2: CGPoint(x: 18.62, y: 0.9))
            path.addLine(to: CGPoint(x: 23.18, y: 0.64))
            path.addCurve(to: CGPoint(x: 24, y: 1.39), controlPoint1: CGPoint(x: 23.61, y: 0.62), controlPoint2: CGPoint(x: 23.98, y: 0.96))
            path.addCurve(to: CGPoint(x: 23.48, y: 2.18), controlPoint1: CGPoint(x: 24.02, y: 1.74), controlPoint2: CGPoint(x: 23.81, y: 2.06))
            path.addCurve(to: CGPoint(x: 16.58, y: 2.65), controlPoint1: CGPoint(x: 23.35, y: 2.22), controlPoint2: CGPoint(x: 17.19, y: 1.75))
            path.addCurve(to: CGPoint(x: 16.29, y: 5.33), controlPoint1: CGPoint(x: 15.96, y: 3.54), controlPoint2: CGPoint(x: 16.27, y: 4.54))
            path.addCurve(to: CGPoint(x: 16.13, y: 7.49), controlPoint1: CGPoint(x: 16.31, y: 6.06), controlPoint2: CGPoint(x: 16.25, y: 6.77))
            path.addCurve(to: CGPoint(x: 13.84, y: 11.07), controlPoint1: CGPoint(x: 15.74, y: 8.71), controlPoint2: CGPoint(x: 14.98, y: 9.91))
            path.addCurve(to: CGPoint(x: 11.79, y: 13.04), controlPoint1: CGPoint(x: 12.71, y: 12.24), controlPoint2: CGPoint(x: 12.14, y: 12.81))
            path.addCurve(to: CGPoint(x: 7.8, y: 14.92), controlPoint1: CGPoint(x: 10.43, y: 13.95), controlPoint2: CGPoint(x: 8.66, y: 14.79))
            path.addCurve(to: CGPoint(x: 4.39, y: 14.43), controlPoint1: CGPoint(x: 6.18, y: 15.12), controlPoint2: CGPoint(x: 5.05, y: 14.95))
            path.addCurve(to: CGPoint(x: 3.28, y: 11.95), controlPoint1: CGPoint(x: 3.4, y: 13.65), controlPoint2: CGPoint(x: 3.28, y: 13.26))
            path.addCurve(to: CGPoint(x: 4.39, y: 9.13), controlPoint1: CGPoint(x: 3.28, y: 10.65), controlPoint2: CGPoint(x: 3.75, y: 9.94))
            path.addLine(to: CGPoint(x: 5.18, y: 8.14))
            path.addCurve(to: CGPoint(x: 7.34, y: 5.83), controlPoint1: CGPoint(x: 5.68, y: 7.52), controlPoint2: CGPoint(x: 6.4, y: 6.74))
            path.addCurve(to: CGPoint(x: 11.2, y: 3.34), controlPoint1: CGPoint(x: 8.45, y: 4.75), controlPoint2: CGPoint(x: 9.76, y: 3.91))
            path.addLine(to: CGPoint(x: 11.77, y: 3.12))
            path.addCurve(to: CGPoint(x: 12.21, y: 2.47), controlPoint1: CGPoint(x: 12.03, y: 3.02), controlPoint2: CGPoint(x: 12.21, y: 2.76))
            path.addCurve(to: CGPoint(x: 11.16, y: 1.75), controlPoint1: CGPoint(x: 12.21, y: 2.36), controlPoint2: CGPoint(x: 11.8, y: 1.96))
            path.addCurve(to: CGPoint(x: 6.41, y: 1.75), controlPoint1: CGPoint(x: 9.63, y: 1.27), controlPoint2: CGPoint(x: 7.81, y: 1.45))
            path.addCurve(to: CGPoint(x: 3.63, y: 2.65), controlPoint1: CGPoint(x: 4.42, y: 2.18), controlPoint2: CGPoint(x: 4.84, y: 2.05))
            path.addCurve(to: CGPoint(x: 0, y: 5.26), controlPoint1: CGPoint(x: 2.83, y: 3.05), controlPoint2: CGPoint(x: 1.62, y: 3.92))
            path.addCurve(to: CGPoint(x: 3.04, y: 2.07), controlPoint1: CGPoint(x: 0.56, y: 4.08), controlPoint2: CGPoint(x: 1.94, y: 2.77))
            path.close()
            path.move(to: CGPoint(x: 8.94, y: 6.72))
            path.addCurve(to: CGPoint(x: 7.02, y: 9.13), controlPoint1: CGPoint(x: 7.64, y: 8.08), controlPoint2: CGPoint(x: 7.8, y: 7.87))
            path.addCurve(to: CGPoint(x: 6.54, y: 11.62), controlPoint1: CGPoint(x: 6.91, y: 9.31), controlPoint2: CGPoint(x: 6.27, y: 10.54))
            path.addCurve(to: CGPoint(x: 8.61, y: 13.04), controlPoint1: CGPoint(x: 6.85, y: 12.82), controlPoint2: CGPoint(x: 7.31, y: 13.21))
            path.addCurve(to: CGPoint(x: 10.84, y: 11.63), controlPoint1: CGPoint(x: 9.15, y: 12.97), controlPoint2: CGPoint(x: 9.89, y: 12.5))
            path.addCurve(to: CGPoint(x: 13.67, y: 7.02), controlPoint1: CGPoint(x: 12.2, y: 10.39), controlPoint2: CGPoint(x: 13.17, y: 8.79))
            path.addCurve(to: CGPoint(x: 13.85, y: 6.23), controlPoint1: CGPoint(x: 13.77, y: 6.68), controlPoint2: CGPoint(x: 13.83, y: 6.41))
            path.addCurve(to: CGPoint(x: 13.85, y: 4.43), controlPoint1: CGPoint(x: 13.91, y: 5.8), controlPoint2: CGPoint(x: 13.94, y: 5.33))
            path.addCurve(to: CGPoint(x: 13.84, y: 4.34), controlPoint1: CGPoint(x: 13.85, y: 4.4), controlPoint2: CGPoint(x: 13.85, y: 4.37))
            path.addCurve(to: CGPoint(x: 13.24, y: 4), controlPoint1: CGPoint(x: 13.77, y: 4.08), controlPoint2: CGPoint(x: 13.5, y: 3.93))
            path.addCurve(to: CGPoint(x: 8.94, y: 6.72), controlPoint1: CGPoint(x: 12.59, y: 4.17), controlPoint2: CGPoint(x: 10.24, y: 5.35))
            path.close()
            context.saveGState()
            context.translateBy(x: 18, y: 7)
            path.usesEvenOddFillRule = true
            UIColor.black.setFill()
            path.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Button
        do {
            context.saveGState()
            context.translateBy(x: 606, y: 5)
            
            /// Background
            let background4 = UIBezierPath()
            background4.move(to: CGPoint(x: 6.41, y: 0))
            background4.addLine(to: CGPoint(x: 54.59, y: 0))
            background4.addCurve(to: CGPoint(x: 58.44, y: 0.67), controlPoint1: CGPoint(x: 56.82, y: 0), controlPoint2: CGPoint(x: 57.63, y: 0.23))
            background4.addCurve(to: CGPoint(x: 60.33, y: 2.56), controlPoint1: CGPoint(x: 59.26, y: 1.1), controlPoint2: CGPoint(x: 59.9, y: 1.74))
            background4.addCurve(to: CGPoint(x: 61, y: 6.41), controlPoint1: CGPoint(x: 60.77, y: 3.37), controlPoint2: CGPoint(x: 61, y: 4.18))
            background4.addLine(to: CGPoint(x: 61, y: 23.59))
            background4.addCurve(to: CGPoint(x: 60.33, y: 27.44), controlPoint1: CGPoint(x: 61, y: 25.82), controlPoint2: CGPoint(x: 60.77, y: 26.63))
            background4.addCurve(to: CGPoint(x: 58.44, y: 29.33), controlPoint1: CGPoint(x: 59.9, y: 28.26), controlPoint2: CGPoint(x: 59.26, y: 28.9))
            background4.addCurve(to: CGPoint(x: 54.59, y: 30), controlPoint1: CGPoint(x: 57.63, y: 29.77), controlPoint2: CGPoint(x: 56.82, y: 30))
            background4.addLine(to: CGPoint(x: 6.41, y: 30))
            background4.addCurve(to: CGPoint(x: 2.56, y: 29.33), controlPoint1: CGPoint(x: 4.18, y: 30), controlPoint2: CGPoint(x: 3.37, y: 29.77))
            background4.addCurve(to: CGPoint(x: 0.67, y: 27.44), controlPoint1: CGPoint(x: 1.74, y: 28.9), controlPoint2: CGPoint(x: 1.1, y: 28.26))
            background4.addCurve(to: CGPoint(x: 0, y: 23.59), controlPoint1: CGPoint(x: 0.23, y: 26.63), controlPoint2: CGPoint(x: 0, y: 25.82))
            background4.addLine(to: CGPoint(x: 0, y: 6.41))
            background4.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
            background4.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
            background4.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
            background4.close()
            context.saveGState()
            background4.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background4.cgPath)
            context.addRect(background4.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -62, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 62, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background4.fill()
            context.restoreGState()
            background4.usesEvenOddFillRule = true
            UIColor(hue: 0.593, saturation: 0.095, brightness: 0.741, alpha: 0.5).setFill()
            background4.fill()
            context.saveGState()
            context.setBlendMode(.softLight)
            context.beginTransparencyLayer(in: background4.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 0, alpha: 0.5).setFill()
                background4.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.saveGState()
            context.setBlendMode(.softLight)
            context.beginTransparencyLayer(in: background4.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 1, alpha: 0.1).setFill()
                background4.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            /// ↳ Label
            let label = NSMutableAttributedString(string: "Label")
            label.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: label.length))
            label.addAttribute(.kern, value: -0.32, range: NSRange(location: 0, length: label.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
            }
            context.saveGState()
            label.draw(at: CGPoint(x: 12, y: 6))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawIPhoneXKeyboards_ComplexButtonActiveLandscapeX(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 812, height: 40), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 812, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 812, y: resizedFrame.height / 40)
        
        /// Speech
        let speech = UIBezierPath()
        speech.move(to: CGPoint(x: 13.33, y: 23.25))
        speech.addCurve(to: CGPoint(x: 12.58, y: 24), controlPoint1: CGPoint(x: 13.33, y: 23.66), controlPoint2: CGPoint(x: 13, y: 24))
        speech.addLine(to: CGPoint(x: 3.42, y: 24))
        speech.addCurve(to: CGPoint(x: 2.67, y: 23.25), controlPoint1: CGPoint(x: 3, y: 24), controlPoint2: CGPoint(x: 2.67, y: 23.67))
        speech.addLine(to: CGPoint(x: 2.67, y: 22.95))
        speech.addCurve(to: CGPoint(x: 3.42, y: 22.2), controlPoint1: CGPoint(x: 2.67, y: 22.54), controlPoint2: CGPoint(x: 3.01, y: 22.2))
        speech.addLine(to: CGPoint(x: 7, y: 22.2))
        speech.addLine(to: CGPoint(x: 7, y: 19.8))
        speech.addCurve(to: CGPoint(x: 0, y: 13.77), controlPoint1: CGPoint(x: 3.67, y: 19.8), controlPoint2: CGPoint(x: 0, y: 16.17))
        speech.addCurve(to: CGPoint(x: 0, y: 9.75), controlPoint1: CGPoint(x: 0, y: 11.98), controlPoint2: CGPoint(x: 0, y: 9.75))
        speech.addCurve(to: CGPoint(x: 0.74, y: 9), controlPoint1: CGPoint(x: 0, y: 9.33), controlPoint2: CGPoint(x: 0.33, y: 9))
        speech.addLine(to: CGPoint(x: 1.26, y: 9))
        speech.addCurve(to: CGPoint(x: 2, y: 9.75), controlPoint1: CGPoint(x: 1.67, y: 9), controlPoint2: CGPoint(x: 2, y: 9.34))
        speech.addLine(to: CGPoint(x: 2, y: 13.77))
        speech.addCurve(to: CGPoint(x: 8, y: 17.97), controlPoint1: CGPoint(x: 2, y: 15.57), controlPoint2: CGPoint(x: 4.67, y: 17.97))
        speech.addCurve(to: CGPoint(x: 14, y: 13.77), controlPoint1: CGPoint(x: 11.33, y: 17.97), controlPoint2: CGPoint(x: 14, y: 15.57))
        speech.addLine(to: CGPoint(x: 14, y: 9.75))
        speech.addCurve(to: CGPoint(x: 14.74, y: 9), controlPoint1: CGPoint(x: 14, y: 9.33), controlPoint2: CGPoint(x: 14.33, y: 9))
        speech.addLine(to: CGPoint(x: 15.26, y: 9))
        speech.addCurve(to: CGPoint(x: 16, y: 9.75), controlPoint1: CGPoint(x: 15.67, y: 9), controlPoint2: CGPoint(x: 16, y: 9.34))
        speech.addLine(to: CGPoint(x: 16, y: 13.77))
        speech.addCurve(to: CGPoint(x: 9, y: 19.8), controlPoint1: CGPoint(x: 16, y: 16.17), controlPoint2: CGPoint(x: 12.33, y: 19.8))
        speech.addLine(to: CGPoint(x: 9, y: 22.2))
        speech.addLine(to: CGPoint(x: 12.58, y: 22.2))
        speech.addCurve(to: CGPoint(x: 13.33, y: 22.95), controlPoint1: CGPoint(x: 13, y: 22.2), controlPoint2: CGPoint(x: 13.33, y: 22.53))
        speech.addLine(to: CGPoint(x: 13.33, y: 23.25))
        speech.close()
        speech.move(to: CGPoint(x: 3.33, y: 4.66))
        speech.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 3.33, y: 2.09), controlPoint2: CGPoint(x: 5.43, y: 0))
        speech.addCurve(to: CGPoint(x: 12.67, y: 4.66), controlPoint1: CGPoint(x: 10.58, y: 0), controlPoint2: CGPoint(x: 12.67, y: 2.09))
        speech.addLine(to: CGPoint(x: 12.67, y: 12.14))
        speech.addCurve(to: CGPoint(x: 8, y: 16.8), controlPoint1: CGPoint(x: 12.67, y: 14.71), controlPoint2: CGPoint(x: 10.57, y: 16.8))
        speech.addCurve(to: CGPoint(x: 3.33, y: 12.14), controlPoint1: CGPoint(x: 5.42, y: 16.8), controlPoint2: CGPoint(x: 3.33, y: 14.71))
        speech.addLine(to: CGPoint(x: 3.33, y: 4.66))
        speech.close()
        speech.move(to: CGPoint(x: 5.33, y: 4.47))
        speech.addLine(to: CGPoint(x: 5.33, y: 12.33))
        speech.addCurve(to: CGPoint(x: 8, y: 15), controlPoint1: CGPoint(x: 5.33, y: 13.81), controlPoint2: CGPoint(x: 6.53, y: 15))
        speech.addCurve(to: CGPoint(x: 10.67, y: 12.33), controlPoint1: CGPoint(x: 9.47, y: 15), controlPoint2: CGPoint(x: 10.67, y: 13.8))
        speech.addLine(to: CGPoint(x: 10.67, y: 4.47))
        speech.addCurve(to: CGPoint(x: 8, y: 1.8), controlPoint1: CGPoint(x: 10.67, y: 2.99), controlPoint2: CGPoint(x: 9.47, y: 1.8))
        speech.addCurve(to: CGPoint(x: 5.33, y: 4.47), controlPoint1: CGPoint(x: 6.53, y: 1.8), controlPoint2: CGPoint(x: 5.33, y: 3))
        speech.close()
        context.saveGState()
        context.translateBy(x: 765, y: 7)
        speech.usesEvenOddFillRule = true
        UIColor(hue: 0.597, saturation: 0.13, brightness: 0.361, alpha: 1).setFill()
        speech.fill()
        context.restoreGState()
        
        /// Emoji Glyph
        let emojiGlyph = UIBezierPath()
        emojiGlyph.move(to: CGPoint(x: 13, y: 0))
        emojiGlyph.addCurve(to: CGPoint(x: 26, y: 13), controlPoint1: CGPoint(x: 20.18, y: 0), controlPoint2: CGPoint(x: 26, y: 5.82))
        emojiGlyph.addCurve(to: CGPoint(x: 13, y: 26), controlPoint1: CGPoint(x: 26, y: 20.18), controlPoint2: CGPoint(x: 20.18, y: 26))
        emojiGlyph.addCurve(to: CGPoint(x: 0, y: 13), controlPoint1: CGPoint(x: 5.82, y: 26), controlPoint2: CGPoint(x: 0, y: 20.18))
        emojiGlyph.addCurve(to: CGPoint(x: 13, y: 0), controlPoint1: CGPoint(x: 0, y: 5.82), controlPoint2: CGPoint(x: 5.82, y: 0))
        emojiGlyph.close()
        emojiGlyph.move(to: CGPoint(x: 13, y: 1.51))
        emojiGlyph.addCurve(to: CGPoint(x: 4.88, y: 4.88), controlPoint1: CGPoint(x: 9.95, y: 1.51), controlPoint2: CGPoint(x: 7.03, y: 2.72))
        emojiGlyph.addCurve(to: CGPoint(x: 1.51, y: 13), controlPoint1: CGPoint(x: 2.72, y: 7.03), controlPoint2: CGPoint(x: 1.51, y: 9.95))
        emojiGlyph.addCurve(to: CGPoint(x: 13, y: 24.49), controlPoint1: CGPoint(x: 1.51, y: 19.34), controlPoint2: CGPoint(x: 6.66, y: 24.49))
        emojiGlyph.addCurve(to: CGPoint(x: 24.48, y: 13), controlPoint1: CGPoint(x: 19.34, y: 24.49), controlPoint2: CGPoint(x: 24.48, y: 19.34))
        emojiGlyph.addCurve(to: CGPoint(x: 13, y: 1.51), controlPoint1: CGPoint(x: 24.48, y: 6.66), controlPoint2: CGPoint(x: 19.34, y: 1.52))
        emojiGlyph.close()
        emojiGlyph.move(to: CGPoint(x: 8.89, y: 7.36))
        emojiGlyph.addCurve(to: CGPoint(x: 9.96, y: 7.8), controlPoint1: CGPoint(x: 9.29, y: 7.36), controlPoint2: CGPoint(x: 9.68, y: 7.51))
        emojiGlyph.addCurve(to: CGPoint(x: 10.41, y: 8.87), controlPoint1: CGPoint(x: 10.25, y: 8.08), controlPoint2: CGPoint(x: 10.41, y: 8.46))
        emojiGlyph.addCurve(to: CGPoint(x: 8.89, y: 10.38), controlPoint1: CGPoint(x: 10.41, y: 9.7), controlPoint2: CGPoint(x: 9.73, y: 10.38))
        emojiGlyph.addCurve(to: CGPoint(x: 7.37, y: 8.87), controlPoint1: CGPoint(x: 8.05, y: 10.38), controlPoint2: CGPoint(x: 7.37, y: 9.7))
        emojiGlyph.addCurve(to: CGPoint(x: 7.81, y: 7.8), controlPoint1: CGPoint(x: 7.37, y: 8.46), controlPoint2: CGPoint(x: 7.53, y: 8.08))
        emojiGlyph.addCurve(to: CGPoint(x: 8.89, y: 7.36), controlPoint1: CGPoint(x: 8.1, y: 7.51), controlPoint2: CGPoint(x: 8.49, y: 7.36))
        emojiGlyph.close()
        emojiGlyph.move(to: CGPoint(x: 17.12, y: 7.36))
        emojiGlyph.addCurve(to: CGPoint(x: 18.2, y: 7.8), controlPoint1: CGPoint(x: 17.52, y: 7.36), controlPoint2: CGPoint(x: 17.91, y: 7.51))
        emojiGlyph.addCurve(to: CGPoint(x: 18.64, y: 8.87), controlPoint1: CGPoint(x: 18.48, y: 8.08), controlPoint2: CGPoint(x: 18.64, y: 8.46))
        emojiGlyph.addCurve(to: CGPoint(x: 17.89, y: 10.2), controlPoint1: CGPoint(x: 18.65, y: 9.41), controlPoint2: CGPoint(x: 18.36, y: 9.92))
        emojiGlyph.addCurve(to: CGPoint(x: 16.35, y: 10.2), controlPoint1: CGPoint(x: 17.41, y: 10.48), controlPoint2: CGPoint(x: 16.83, y: 10.48))
        emojiGlyph.addCurve(to: CGPoint(x: 15.6, y: 8.87), controlPoint1: CGPoint(x: 15.88, y: 9.92), controlPoint2: CGPoint(x: 15.59, y: 9.41))
        emojiGlyph.addCurve(to: CGPoint(x: 16.05, y: 7.8), controlPoint1: CGPoint(x: 15.6, y: 8.46), controlPoint2: CGPoint(x: 15.76, y: 8.08))
        emojiGlyph.addCurve(to: CGPoint(x: 17.12, y: 7.36), controlPoint1: CGPoint(x: 16.33, y: 7.51), controlPoint2: CGPoint(x: 16.72, y: 7.36))
        emojiGlyph.close()
        emojiGlyph.move(to: CGPoint(x: 21.66, y: 15.24))
        emojiGlyph.addCurve(to: CGPoint(x: 13, y: 22.1), controlPoint1: CGPoint(x: 20.97, y: 18.98), controlPoint2: CGPoint(x: 17.36, y: 22.1))
        emojiGlyph.addCurve(to: CGPoint(x: 4.35, y: 15.33), controlPoint1: CGPoint(x: 8.67, y: 22.1), controlPoint2: CGPoint(x: 5.08, y: 19.03))
        emojiGlyph.addCurve(to: CGPoint(x: 5.67, y: 14.36), controlPoint1: CGPoint(x: 4.2, y: 14.4), controlPoint2: CGPoint(x: 4.96, y: 14.19))
        emojiGlyph.addCurve(to: CGPoint(x: 13, y: 15.35), controlPoint1: CGPoint(x: 8.05, y: 15.05), controlPoint2: CGPoint(x: 10.52, y: 15.38))
        emojiGlyph.addCurve(to: CGPoint(x: 20.32, y: 14.36), controlPoint1: CGPoint(x: 15.47, y: 15.38), controlPoint2: CGPoint(x: 17.94, y: 15.05))
        emojiGlyph.addCurve(to: CGPoint(x: 21.66, y: 15.24), controlPoint1: CGPoint(x: 21.01, y: 14.19), controlPoint2: CGPoint(x: 21.75, y: 14.38))
        emojiGlyph.close()
        emojiGlyph.move(to: CGPoint(x: 19.31, y: 15.76))
        emojiGlyph.addCurve(to: CGPoint(x: 19.11, y: 15.83), controlPoint1: CGPoint(x: 19.25, y: 15.79), controlPoint2: CGPoint(x: 19.18, y: 15.8))
        emojiGlyph.addCurve(to: CGPoint(x: 19.32, y: 15.76), controlPoint1: CGPoint(x: 19.1, y: 15.83), controlPoint2: CGPoint(x: 19.33, y: 15.76))
        emojiGlyph.addCurve(to: CGPoint(x: 13.01, y: 16.58), controlPoint1: CGPoint(x: 17.27, y: 16.33), controlPoint2: CGPoint(x: 15.14, y: 16.6))
        emojiGlyph.addCurve(to: CGPoint(x: 6.63, y: 15.73), controlPoint1: CGPoint(x: 10.47, y: 16.58), controlPoint2: CGPoint(x: 8.19, y: 16.29))
        emojiGlyph.addCurve(to: CGPoint(x: 6.51, y: 17.14), controlPoint1: CGPoint(x: 5.49, y: 15.39), controlPoint2: CGPoint(x: 5.71, y: 16.73))
        emojiGlyph.addCurve(to: CGPoint(x: 13.01, y: 18.51), controlPoint1: CGPoint(x: 8.55, y: 18.07), controlPoint2: CGPoint(x: 10.77, y: 18.53))
        emojiGlyph.addCurve(to: CGPoint(x: 19.63, y: 17.09), controlPoint1: CGPoint(x: 15.68, y: 18.51), controlPoint2: CGPoint(x: 18.06, y: 17.89))
        emojiGlyph.addCurve(to: CGPoint(x: 19.31, y: 15.76), controlPoint1: CGPoint(x: 20.37, y: 16.61), controlPoint2: CGPoint(x: 20.51, y: 15.33))
        emojiGlyph.close()
        context.saveGState()
        context.translateBy(x: 26, y: 7)
        emojiGlyph.usesEvenOddFillRule = true
        UIColor(hue: 0.597, saturation: 0.13, brightness: 0.361, alpha: 1).setFill()
        emojiGlyph.fill()
        context.restoreGState()
        
        /// Symbols
        do {
            context.saveGState()
            context.translateBy(x: 78, y: 5)
            
            /// Background
            let background = UIBezierPath()
            background.move(to: CGPoint(x: 5, y: 0))
            background.addLine(to: CGPoint(x: 122, y: 0))
            background.addCurve(to: CGPoint(x: 127, y: 5), controlPoint1: CGPoint(x: 124.76, y: 0), controlPoint2: CGPoint(x: 127, y: 2.24))
            background.addLine(to: CGPoint(x: 127, y: 25))
            background.addCurve(to: CGPoint(x: 122, y: 30), controlPoint1: CGPoint(x: 127, y: 27.76), controlPoint2: CGPoint(x: 124.76, y: 30))
            background.addLine(to: CGPoint(x: 5, y: 30))
            background.addCurve(to: CGPoint(x: 0, y: 25), controlPoint1: CGPoint(x: 2.24, y: 30), controlPoint2: CGPoint(x: 0, y: 27.76))
            background.addLine(to: CGPoint(x: 0, y: 5))
            background.addCurve(to: CGPoint(x: 5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.24), controlPoint2: CGPoint(x: 2.24, y: 0))
            background.close()
            context.saveGState()
            background.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background.cgPath)
            context.addRect(background.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -128, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 128, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background.fill()
            context.restoreGState()
            background.usesEvenOddFillRule = true
            UIColor(hue: 0.593, saturation: 0.095, brightness: 0.741, alpha: 0.5).setFill()
            background.fill()
            context.saveGState()
            context.setBlendMode(.softLight)
            context.beginTransparencyLayer(in: background.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 0, alpha: 0.5).setFill()
                background.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.saveGState()
            context.setBlendMode(.softLight)
            context.beginTransparencyLayer(in: background.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 1, alpha: 0.1).setFill()
                background.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            /// 123
            let _123 = NSMutableAttributedString(string: "123")
            _123.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: _123.length))
            _123.addAttribute(.kern, value: -0.32, range: NSRange(location: 0, length: _123.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                _123.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _123.length))
            }
            context.saveGState()
            _123.draw(in: CGRect(x: 50, y: 6, width: 27, height: 21))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Space
        do {
            context.saveGState()
            context.translateBy(x: 209, y: 5)
            
            /// Background
            let background2 = UIBezierPath()
            background2.move(to: CGPoint(x: 6.41, y: 0))
            background2.addLine(to: CGPoint(x: 385.59, y: 0))
            background2.addCurve(to: CGPoint(x: 389.44, y: 0.67), controlPoint1: CGPoint(x: 387.82, y: 0), controlPoint2: CGPoint(x: 388.63, y: 0.23))
            background2.addCurve(to: CGPoint(x: 391.33, y: 2.56), controlPoint1: CGPoint(x: 390.26, y: 1.1), controlPoint2: CGPoint(x: 390.9, y: 1.74))
            background2.addCurve(to: CGPoint(x: 392, y: 6.41), controlPoint1: CGPoint(x: 391.77, y: 3.37), controlPoint2: CGPoint(x: 392, y: 4.18))
            background2.addLine(to: CGPoint(x: 392, y: 23.59))
            background2.addCurve(to: CGPoint(x: 391.33, y: 27.44), controlPoint1: CGPoint(x: 392, y: 25.82), controlPoint2: CGPoint(x: 391.77, y: 26.63))
            background2.addCurve(to: CGPoint(x: 389.44, y: 29.33), controlPoint1: CGPoint(x: 390.9, y: 28.26), controlPoint2: CGPoint(x: 390.26, y: 28.9))
            background2.addCurve(to: CGPoint(x: 385.59, y: 30), controlPoint1: CGPoint(x: 388.63, y: 29.77), controlPoint2: CGPoint(x: 387.82, y: 30))
            background2.addLine(to: CGPoint(x: 6.41, y: 30))
            background2.addCurve(to: CGPoint(x: 2.56, y: 29.33), controlPoint1: CGPoint(x: 4.18, y: 30), controlPoint2: CGPoint(x: 3.37, y: 29.77))
            background2.addCurve(to: CGPoint(x: 0.67, y: 27.44), controlPoint1: CGPoint(x: 1.74, y: 28.9), controlPoint2: CGPoint(x: 1.1, y: 28.26))
            background2.addCurve(to: CGPoint(x: 0, y: 23.59), controlPoint1: CGPoint(x: 0.23, y: 26.63), controlPoint2: CGPoint(x: 0, y: 25.82))
            background2.addLine(to: CGPoint(x: 0, y: 6.41))
            background2.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
            background2.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
            background2.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
            background2.close()
            context.saveGState()
            background2.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background2.cgPath)
            context.addRect(background2.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -393, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 393, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background2.fill()
            context.restoreGState()
            background2.usesEvenOddFillRule = true
            UIColor.white.setFill()
            background2.fill()
            context.restoreGState()
            
            /// Space
            let space = NSMutableAttributedString(string: "space")
            space.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: space.length))
            space.addAttribute(.kern, value: -0.32, range: NSRange(location: 0, length: space.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                space.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: space.length))
            }
            context.saveGState()
            space.draw(in: CGRect(x: 174, y: 5, width: 44, height: 21))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Brush
        do {
            context.saveGState()
            context.translateBy(x: 672, y: 5)
            
            /// Background
            let background3 = UIBezierPath()
            background3.move(to: CGPoint(x: 6.41, y: 0))
            background3.addLine(to: CGPoint(x: 54.59, y: 0))
            background3.addCurve(to: CGPoint(x: 58.44, y: 0.67), controlPoint1: CGPoint(x: 56.82, y: 0), controlPoint2: CGPoint(x: 57.63, y: 0.23))
            background3.addCurve(to: CGPoint(x: 60.33, y: 2.56), controlPoint1: CGPoint(x: 59.26, y: 1.1), controlPoint2: CGPoint(x: 59.9, y: 1.74))
            background3.addCurve(to: CGPoint(x: 61, y: 6.41), controlPoint1: CGPoint(x: 60.77, y: 3.37), controlPoint2: CGPoint(x: 61, y: 4.18))
            background3.addLine(to: CGPoint(x: 61, y: 23.59))
            background3.addCurve(to: CGPoint(x: 60.33, y: 27.44), controlPoint1: CGPoint(x: 61, y: 25.82), controlPoint2: CGPoint(x: 60.77, y: 26.63))
            background3.addCurve(to: CGPoint(x: 58.44, y: 29.33), controlPoint1: CGPoint(x: 59.9, y: 28.26), controlPoint2: CGPoint(x: 59.26, y: 28.9))
            background3.addCurve(to: CGPoint(x: 54.59, y: 30), controlPoint1: CGPoint(x: 57.63, y: 29.77), controlPoint2: CGPoint(x: 56.82, y: 30))
            background3.addLine(to: CGPoint(x: 6.41, y: 30))
            background3.addCurve(to: CGPoint(x: 2.56, y: 29.33), controlPoint1: CGPoint(x: 4.18, y: 30), controlPoint2: CGPoint(x: 3.37, y: 29.77))
            background3.addCurve(to: CGPoint(x: 0.67, y: 27.44), controlPoint1: CGPoint(x: 1.74, y: 28.9), controlPoint2: CGPoint(x: 1.1, y: 28.26))
            background3.addCurve(to: CGPoint(x: 0, y: 23.59), controlPoint1: CGPoint(x: 0.23, y: 26.63), controlPoint2: CGPoint(x: 0, y: 25.82))
            background3.addLine(to: CGPoint(x: 0, y: 6.41))
            background3.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
            background3.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
            background3.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
            background3.close()
            context.saveGState()
            background3.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(background3.cgPath)
            context.addRect(background3.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -62, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 62, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.35).cgColor)
            }
            UIColor.black.setFill()
            background3.fill()
            context.restoreGState()
            background3.usesEvenOddFillRule = true
            UIColor(hue: 0.593, saturation: 0.095, brightness: 0.741, alpha: 0.5).setFill()
            background3.fill()
            context.saveGState()
            context.setBlendMode(.softLight)
            context.beginTransparencyLayer(in: background3.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 0, alpha: 0.5).setFill()
                background3.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.saveGState()
            context.setBlendMode(.softLight)
            context.beginTransparencyLayer(in: background3.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 1, alpha: 0.1).setFill()
                background3.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            /// Path
            let path = UIBezierPath()
            path.move(to: CGPoint(x: 3.04, y: 2.07))
            path.addCurve(to: CGPoint(x: 11.4, y: 0.09), controlPoint1: CGPoint(x: 5.44, y: 0.67), controlPoint2: CGPoint(x: 8.35, y: -0.31))
            path.addCurve(to: CGPoint(x: 12.52, y: 0.35), controlPoint1: CGPoint(x: 11.71, y: 0.13), controlPoint2: CGPoint(x: 12.09, y: 0.22))
            path.addCurve(to: CGPoint(x: 14.28, y: 1.07), controlPoint1: CGPoint(x: 13.14, y: 0.51), controlPoint2: CGPoint(x: 13.73, y: 0.75))
            path.addCurve(to: CGPoint(x: 15.3, y: 1.39), controlPoint1: CGPoint(x: 14.66, y: 1.29), controlPoint2: CGPoint(x: 15.03, y: 1.36))
            path.addCurve(to: CGPoint(x: 17.24, y: 1.11), controlPoint1: CGPoint(x: 15.91, y: 1.47), controlPoint2: CGPoint(x: 16.63, y: 1.27))
            path.addCurve(to: CGPoint(x: 19.07, y: 0.85), controlPoint1: CGPoint(x: 17.84, y: 0.95), controlPoint2: CGPoint(x: 18.62, y: 0.9))
            path.addLine(to: CGPoint(x: 23.18, y: 0.64))
            path.addCurve(to: CGPoint(x: 24, y: 1.39), controlPoint1: CGPoint(x: 23.61, y: 0.62), controlPoint2: CGPoint(x: 23.98, y: 0.96))
            path.addCurve(to: CGPoint(x: 23.48, y: 2.18), controlPoint1: CGPoint(x: 24.02, y: 1.74), controlPoint2: CGPoint(x: 23.81, y: 2.06))
            path.addCurve(to: CGPoint(x: 16.58, y: 2.65), controlPoint1: CGPoint(x: 23.35, y: 2.22), controlPoint2: CGPoint(x: 17.19, y: 1.75))
            path.addCurve(to: CGPoint(x: 16.29, y: 5.33), controlPoint1: CGPoint(x: 15.96, y: 3.54), controlPoint2: CGPoint(x: 16.27, y: 4.54))
            path.addCurve(to: CGPoint(x: 16.13, y: 7.49), controlPoint1: CGPoint(x: 16.31, y: 6.06), controlPoint2: CGPoint(x: 16.25, y: 6.77))
            path.addCurve(to: CGPoint(x: 13.84, y: 11.07), controlPoint1: CGPoint(x: 15.74, y: 8.71), controlPoint2: CGPoint(x: 14.98, y: 9.91))
            path.addCurve(to: CGPoint(x: 11.79, y: 13.04), controlPoint1: CGPoint(x: 12.71, y: 12.24), controlPoint2: CGPoint(x: 12.14, y: 12.81))
            path.addCurve(to: CGPoint(x: 7.8, y: 14.92), controlPoint1: CGPoint(x: 10.43, y: 13.95), controlPoint2: CGPoint(x: 8.66, y: 14.79))
            path.addCurve(to: CGPoint(x: 4.39, y: 14.43), controlPoint1: CGPoint(x: 6.18, y: 15.12), controlPoint2: CGPoint(x: 5.05, y: 14.95))
            path.addCurve(to: CGPoint(x: 3.28, y: 11.95), controlPoint1: CGPoint(x: 3.4, y: 13.65), controlPoint2: CGPoint(x: 3.28, y: 13.26))
            path.addCurve(to: CGPoint(x: 4.39, y: 9.13), controlPoint1: CGPoint(x: 3.28, y: 10.65), controlPoint2: CGPoint(x: 3.75, y: 9.94))
            path.addLine(to: CGPoint(x: 5.18, y: 8.14))
            path.addCurve(to: CGPoint(x: 7.34, y: 5.83), controlPoint1: CGPoint(x: 5.68, y: 7.52), controlPoint2: CGPoint(x: 6.4, y: 6.74))
            path.addCurve(to: CGPoint(x: 11.2, y: 3.34), controlPoint1: CGPoint(x: 8.45, y: 4.75), controlPoint2: CGPoint(x: 9.76, y: 3.91))
            path.addLine(to: CGPoint(x: 11.77, y: 3.12))
            path.addCurve(to: CGPoint(x: 12.21, y: 2.47), controlPoint1: CGPoint(x: 12.03, y: 3.02), controlPoint2: CGPoint(x: 12.21, y: 2.76))
            path.addCurve(to: CGPoint(x: 11.16, y: 1.75), controlPoint1: CGPoint(x: 12.21, y: 2.36), controlPoint2: CGPoint(x: 11.8, y: 1.96))
            path.addCurve(to: CGPoint(x: 6.41, y: 1.75), controlPoint1: CGPoint(x: 9.63, y: 1.27), controlPoint2: CGPoint(x: 7.81, y: 1.45))
            path.addCurve(to: CGPoint(x: 3.63, y: 2.65), controlPoint1: CGPoint(x: 4.42, y: 2.18), controlPoint2: CGPoint(x: 4.84, y: 2.05))
            path.addCurve(to: CGPoint(x: 0, y: 5.26), controlPoint1: CGPoint(x: 2.83, y: 3.05), controlPoint2: CGPoint(x: 1.62, y: 3.92))
            path.addCurve(to: CGPoint(x: 3.04, y: 2.07), controlPoint1: CGPoint(x: 0.56, y: 4.08), controlPoint2: CGPoint(x: 1.94, y: 2.77))
            path.close()
            path.move(to: CGPoint(x: 8.94, y: 6.72))
            path.addCurve(to: CGPoint(x: 7.02, y: 9.13), controlPoint1: CGPoint(x: 7.64, y: 8.08), controlPoint2: CGPoint(x: 7.8, y: 7.87))
            path.addCurve(to: CGPoint(x: 6.54, y: 11.62), controlPoint1: CGPoint(x: 6.91, y: 9.31), controlPoint2: CGPoint(x: 6.27, y: 10.54))
            path.addCurve(to: CGPoint(x: 8.61, y: 13.04), controlPoint1: CGPoint(x: 6.85, y: 12.82), controlPoint2: CGPoint(x: 7.31, y: 13.21))
            path.addCurve(to: CGPoint(x: 10.84, y: 11.63), controlPoint1: CGPoint(x: 9.15, y: 12.97), controlPoint2: CGPoint(x: 9.89, y: 12.5))
            path.addCurve(to: CGPoint(x: 13.67, y: 7.02), controlPoint1: CGPoint(x: 12.2, y: 10.39), controlPoint2: CGPoint(x: 13.17, y: 8.79))
            path.addCurve(to: CGPoint(x: 13.85, y: 6.23), controlPoint1: CGPoint(x: 13.77, y: 6.68), controlPoint2: CGPoint(x: 13.83, y: 6.41))
            path.addCurve(to: CGPoint(x: 13.85, y: 4.43), controlPoint1: CGPoint(x: 13.91, y: 5.8), controlPoint2: CGPoint(x: 13.94, y: 5.33))
            path.addCurve(to: CGPoint(x: 13.84, y: 4.34), controlPoint1: CGPoint(x: 13.85, y: 4.4), controlPoint2: CGPoint(x: 13.85, y: 4.37))
            path.addCurve(to: CGPoint(x: 13.24, y: 4), controlPoint1: CGPoint(x: 13.77, y: 4.08), controlPoint2: CGPoint(x: 13.5, y: 3.93))
            path.addCurve(to: CGPoint(x: 8.94, y: 6.72), controlPoint1: CGPoint(x: 12.59, y: 4.17), controlPoint2: CGPoint(x: 10.24, y: 5.35))
            path.close()
            context.saveGState()
            context.translateBy(x: 18, y: 7)
            path.usesEvenOddFillRule = true
            UIColor.black.setFill()
            path.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Button
        do {
            context.saveGState()
            context.translateBy(x: 606, y: 5)
            
            /// Background
            let background4 = UIBezierPath()
            background4.move(to: CGPoint(x: 6.41, y: 0))
            background4.addLine(to: CGPoint(x: 54.59, y: 0))
            background4.addCurve(to: CGPoint(x: 58.44, y: 0.67), controlPoint1: CGPoint(x: 56.82, y: 0), controlPoint2: CGPoint(x: 57.63, y: 0.23))
            background4.addCurve(to: CGPoint(x: 60.33, y: 2.56), controlPoint1: CGPoint(x: 59.26, y: 1.1), controlPoint2: CGPoint(x: 59.9, y: 1.74))
            background4.addCurve(to: CGPoint(x: 61, y: 6.41), controlPoint1: CGPoint(x: 60.77, y: 3.37), controlPoint2: CGPoint(x: 61, y: 4.18))
            background4.addLine(to: CGPoint(x: 61, y: 23.59))
            background4.addCurve(to: CGPoint(x: 60.33, y: 27.44), controlPoint1: CGPoint(x: 61, y: 25.82), controlPoint2: CGPoint(x: 60.77, y: 26.63))
            background4.addCurve(to: CGPoint(x: 58.44, y: 29.33), controlPoint1: CGPoint(x: 59.9, y: 28.26), controlPoint2: CGPoint(x: 59.26, y: 28.9))
            background4.addCurve(to: CGPoint(x: 54.59, y: 30), controlPoint1: CGPoint(x: 57.63, y: 29.77), controlPoint2: CGPoint(x: 56.82, y: 30))
            background4.addLine(to: CGPoint(x: 6.41, y: 30))
            background4.addCurve(to: CGPoint(x: 2.56, y: 29.33), controlPoint1: CGPoint(x: 4.18, y: 30), controlPoint2: CGPoint(x: 3.37, y: 29.77))
            background4.addCurve(to: CGPoint(x: 0.67, y: 27.44), controlPoint1: CGPoint(x: 1.74, y: 28.9), controlPoint2: CGPoint(x: 1.1, y: 28.26))
            background4.addCurve(to: CGPoint(x: 0, y: 23.59), controlPoint1: CGPoint(x: 0.23, y: 26.63), controlPoint2: CGPoint(x: 0, y: 25.82))
            background4.addLine(to: CGPoint(x: 0, y: 6.41))
            background4.addCurve(to: CGPoint(x: 0.67, y: 2.56), controlPoint1: CGPoint(x: 0, y: 4.18), controlPoint2: CGPoint(x: 0.23, y: 3.37))
            background4.addCurve(to: CGPoint(x: 2.56, y: 0.67), controlPoint1: CGPoint(x: 1.1, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.1))
            background4.addCurve(to: CGPoint(x: 6.41, y: 0), controlPoint1: CGPoint(x: 3.37, y: 0.23), controlPoint2: CGPoint(x: 4.18, y: 0))
            background4.close()
            context.saveGState()
            background4.usesEvenOddFillRule = true
            UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
            background4.fill()
            background4.usesEvenOddFillRule = true
            context.saveGState()
            UIRectClip(background4.bounds)
            context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
            context.setAlpha(0.35)
            context.beginTransparencyLayer(in: background4.bounds, auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                background4.fill()
                context.setBlendMode(.destinationOut)
                context.beginTransparencyLayer(in: background4.bounds, auxiliaryInfo: nil)
                do {
                    context.translateBy(x: -61, y: 0)
                    do {
                        let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                        let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                        let baseOffset = context.convertToDeviceSpace(CGPoint(x: 61, y: -1)).applying(baseTransform)
                        let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                        let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                        context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                    }
                    UIColor.black.setFill()
                    background4.fill()
                }
                context.endTransparencyLayer()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            /// ↳ Label
            let label = NSMutableAttributedString(string: "Label")
            label.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: label.length))
            label.addAttribute(.kern, value: -0.32, range: NSRange(location: 0, length: label.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
            }
            label.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: label.length))
            context.saveGState()
            label.draw(at: CGPoint(x: 12, y: 6))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawIPhoneXBarsStatusDefault(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 377, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 377, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 377, y: resizedFrame.height / 44)
        
        /// Action
        do {
            context.saveGState()
            context.translateBy(x: 20, y: 14)
            
            /// ↳ Time
            let time = NSMutableAttributedString(string: "9:41")
            time.addAttribute(.font, value: UIFont(name: "SFProText-Semibold", size: 15)!, range: NSRange(location: 0, length: time.length))
            time.addAttribute(.kern, value: -0.17, range: NSRange(location: 0, length: time.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                time.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: time.length))
            }
            context.saveGState()
            time.draw(in: CGRect(x: 0, y: 0, width: 54, height: 20))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Container
        do {
            context.saveGState()
            context.translateBy(x: 295, y: 16)
            
            /// Battery
            do {
                context.saveGState()
                context.translateBy(x: 43, y: 0.6)
                
                /// Rectangle
                let rectangle8 = UIBezierPath()
                rectangle8.move(to: CGPoint(x: 3.59, y: 1))
                rectangle8.addCurve(to: CGPoint(x: 1.9, y: 1.26), controlPoint1: CGPoint(x: 2.6, y: 1), controlPoint2: CGPoint(x: 2.26, y: 1.07))
                rectangle8.addCurve(to: CGPoint(x: 1.26, y: 1.9), controlPoint1: CGPoint(x: 1.62, y: 1.41), controlPoint2: CGPoint(x: 1.41, y: 1.62))
                rectangle8.addCurve(to: CGPoint(x: 1, y: 3.59), controlPoint1: CGPoint(x: 1.07, y: 2.26), controlPoint2: CGPoint(x: 1, y: 2.6))
                rectangle8.addLine(to: CGPoint(x: 1, y: 7.91))
                rectangle8.addCurve(to: CGPoint(x: 1.26, y: 9.6), controlPoint1: CGPoint(x: 1, y: 8.9), controlPoint2: CGPoint(x: 1.07, y: 9.24))
                rectangle8.addCurve(to: CGPoint(x: 1.9, y: 10.24), controlPoint1: CGPoint(x: 1.41, y: 9.88), controlPoint2: CGPoint(x: 1.62, y: 10.09))
                rectangle8.addCurve(to: CGPoint(x: 3.59, y: 10.5), controlPoint1: CGPoint(x: 2.26, y: 10.43), controlPoint2: CGPoint(x: 2.6, y: 10.5))
                rectangle8.addLine(to: CGPoint(x: 18.41, y: 10.5))
                rectangle8.addCurve(to: CGPoint(x: 20.1, y: 10.24), controlPoint1: CGPoint(x: 19.4, y: 10.5), controlPoint2: CGPoint(x: 19.74, y: 10.43))
                rectangle8.addCurve(to: CGPoint(x: 20.74, y: 9.6), controlPoint1: CGPoint(x: 20.38, y: 10.09), controlPoint2: CGPoint(x: 20.59, y: 9.88))
                rectangle8.addCurve(to: CGPoint(x: 21, y: 7.91), controlPoint1: CGPoint(x: 20.93, y: 9.24), controlPoint2: CGPoint(x: 21, y: 8.9))
                rectangle8.addLine(to: CGPoint(x: 21, y: 3.59))
                rectangle8.addCurve(to: CGPoint(x: 20.74, y: 1.9), controlPoint1: CGPoint(x: 21, y: 2.6), controlPoint2: CGPoint(x: 20.93, y: 2.26))
                rectangle8.addCurve(to: CGPoint(x: 20.1, y: 1.26), controlPoint1: CGPoint(x: 20.59, y: 1.62), controlPoint2: CGPoint(x: 20.38, y: 1.41))
                rectangle8.addCurve(to: CGPoint(x: 18.41, y: 1), controlPoint1: CGPoint(x: 19.74, y: 1.07), controlPoint2: CGPoint(x: 19.4, y: 1))
                rectangle8.addLine(to: CGPoint(x: 3.59, y: 1))
                rectangle8.close()
                rectangle8.move(to: CGPoint(x: 3.59, y: 0))
                rectangle8.addLine(to: CGPoint(x: 18.41, y: 0))
                rectangle8.addCurve(to: CGPoint(x: 20.57, y: 0.37), controlPoint1: CGPoint(x: 19.66, y: 0), controlPoint2: CGPoint(x: 20.11, y: 0.13))
                rectangle8.addCurve(to: CGPoint(x: 21.63, y: 1.43), controlPoint1: CGPoint(x: 21.02, y: 0.62), controlPoint2: CGPoint(x: 21.38, y: 0.98))
                rectangle8.addCurve(to: CGPoint(x: 22, y: 3.59), controlPoint1: CGPoint(x: 21.87, y: 1.89), controlPoint2: CGPoint(x: 22, y: 2.34))
                rectangle8.addLine(to: CGPoint(x: 22, y: 7.91))
                rectangle8.addCurve(to: CGPoint(x: 21.63, y: 10.07), controlPoint1: CGPoint(x: 22, y: 9.16), controlPoint2: CGPoint(x: 21.87, y: 9.61))
                rectangle8.addCurve(to: CGPoint(x: 20.57, y: 11.13), controlPoint1: CGPoint(x: 21.38, y: 10.52), controlPoint2: CGPoint(x: 21.02, y: 10.88))
                rectangle8.addCurve(to: CGPoint(x: 18.41, y: 11.5), controlPoint1: CGPoint(x: 20.11, y: 11.37), controlPoint2: CGPoint(x: 19.66, y: 11.5))
                rectangle8.addLine(to: CGPoint(x: 3.59, y: 11.5))
                rectangle8.addCurve(to: CGPoint(x: 1.43, y: 11.13), controlPoint1: CGPoint(x: 2.34, y: 11.5), controlPoint2: CGPoint(x: 1.89, y: 11.37))
                rectangle8.addCurve(to: CGPoint(x: 0.37, y: 10.07), controlPoint1: CGPoint(x: 0.98, y: 10.88), controlPoint2: CGPoint(x: 0.62, y: 10.52))
                rectangle8.addCurve(to: CGPoint(x: 0, y: 7.91), controlPoint1: CGPoint(x: 0.13, y: 9.61), controlPoint2: CGPoint(x: 0, y: 9.16))
                rectangle8.addLine(to: CGPoint(x: 0, y: 3.59))
                rectangle8.addCurve(to: CGPoint(x: 0.37, y: 1.43), controlPoint1: CGPoint(x: 0, y: 2.34), controlPoint2: CGPoint(x: 0.13, y: 1.89))
                rectangle8.addCurve(to: CGPoint(x: 1.43, y: 0.37), controlPoint1: CGPoint(x: 0.62, y: 0.98), controlPoint2: CGPoint(x: 0.98, y: 0.62))
                rectangle8.addCurve(to: CGPoint(x: 3.59, y: 0), controlPoint1: CGPoint(x: 1.89, y: 0.13), controlPoint2: CGPoint(x: 2.34, y: 0))
                rectangle8.close()
                rectangle8.move(to: CGPoint(x: 23, y: 3.69))
                rectangle8.addCurve(to: CGPoint(x: 24.5, y: 5.69), controlPoint1: CGPoint(x: 24, y: 4.2), controlPoint2: CGPoint(x: 24.5, y: 4.87))
                rectangle8.addCurve(to: CGPoint(x: 23, y: 7.69), controlPoint1: CGPoint(x: 24.5, y: 6.51), controlPoint2: CGPoint(x: 24, y: 7.18))
                rectangle8.addLine(to: CGPoint(x: 23, y: 3.69))
                rectangle8.close()
                context.saveGState()
                context.translateBy(x: 0, y: 0.56)
                UIColor(white: 0, alpha: 0.36).setFill()
                rectangle8.fill()
                context.restoreGState()
                
                /// Rectangle
                let rectangle9 = UIBezierPath()
                rectangle9.move(to: CGPoint(x: 2.05, y: 0))
                rectangle9.addLine(to: CGPoint(x: 15.95, y: 0))
                rectangle9.addCurve(to: CGPoint(x: 17.18, y: 0.21), controlPoint1: CGPoint(x: 16.66, y: 0), controlPoint2: CGPoint(x: 16.92, y: 0.07))
                rectangle9.addCurve(to: CGPoint(x: 17.79, y: 0.82), controlPoint1: CGPoint(x: 17.44, y: 0.35), controlPoint2: CGPoint(x: 17.65, y: 0.56))
                rectangle9.addCurve(to: CGPoint(x: 18, y: 2.05), controlPoint1: CGPoint(x: 17.93, y: 1.08), controlPoint2: CGPoint(x: 18, y: 1.34))
                rectangle9.addLine(to: CGPoint(x: 18, y: 5.62))
                rectangle9.addCurve(to: CGPoint(x: 17.79, y: 6.85), controlPoint1: CGPoint(x: 18, y: 6.33), controlPoint2: CGPoint(x: 17.93, y: 6.59))
                rectangle9.addCurve(to: CGPoint(x: 17.18, y: 7.45), controlPoint1: CGPoint(x: 17.65, y: 7.11), controlPoint2: CGPoint(x: 17.44, y: 7.31))
                rectangle9.addCurve(to: CGPoint(x: 15.95, y: 7.67), controlPoint1: CGPoint(x: 16.92, y: 7.59), controlPoint2: CGPoint(x: 16.66, y: 7.67))
                rectangle9.addLine(to: CGPoint(x: 2.05, y: 7.67))
                rectangle9.addCurve(to: CGPoint(x: 0.82, y: 7.45), controlPoint1: CGPoint(x: 1.34, y: 7.67), controlPoint2: CGPoint(x: 1.08, y: 7.59))
                rectangle9.addCurve(to: CGPoint(x: 0.21, y: 6.85), controlPoint1: CGPoint(x: 0.56, y: 7.31), controlPoint2: CGPoint(x: 0.35, y: 7.11))
                rectangle9.addCurve(to: CGPoint(x: 0, y: 5.62), controlPoint1: CGPoint(x: 0.07, y: 6.59), controlPoint2: CGPoint(x: 0, y: 6.33))
                rectangle9.addLine(to: CGPoint(x: 0, y: 2.05))
                rectangle9.addCurve(to: CGPoint(x: 0.21, y: 0.82), controlPoint1: CGPoint(x: 0, y: 1.34), controlPoint2: CGPoint(x: 0.07, y: 1.08))
                rectangle9.addCurve(to: CGPoint(x: 0.82, y: 0.21), controlPoint1: CGPoint(x: 0.35, y: 0.56), controlPoint2: CGPoint(x: 0.56, y: 0.35))
                rectangle9.addCurve(to: CGPoint(x: 2.05, y: 0), controlPoint1: CGPoint(x: 1.08, y: 0.07), controlPoint2: CGPoint(x: 1.34, y: 0))
                rectangle9.close()
                context.saveGState()
                context.translateBy(x: 2, y: 2.48)
                rectangle9.usesEvenOddFillRule = true
                UIColor.black.setFill()
                rectangle9.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Combined Shape
            let combinedShape = UIBezierPath()
            combinedShape.move(to: CGPoint(x: 1.39, y: 6.7))
            combinedShape.addLine(to: CGPoint(x: 1.61, y: 6.7))
            combinedShape.addCurve(to: CGPoint(x: 2.39, y: 6.86), controlPoint1: CGPoint(x: 1.97, y: 6.7), controlPoint2: CGPoint(x: 2.19, y: 6.76))
            combinedShape.addCurve(to: CGPoint(x: 2.84, y: 7.31), controlPoint1: CGPoint(x: 2.58, y: 6.96), controlPoint2: CGPoint(x: 2.74, y: 7.12))
            combinedShape.addCurve(to: CGPoint(x: 3, y: 8.09), controlPoint1: CGPoint(x: 2.94, y: 7.51), controlPoint2: CGPoint(x: 3, y: 7.73))
            combinedShape.addLine(to: CGPoint(x: 3, y: 9.31))
            combinedShape.addCurve(to: CGPoint(x: 2.84, y: 10.09), controlPoint1: CGPoint(x: 3, y: 9.67), controlPoint2: CGPoint(x: 2.94, y: 9.89))
            combinedShape.addCurve(to: CGPoint(x: 2.39, y: 10.54), controlPoint1: CGPoint(x: 2.74, y: 10.28), controlPoint2: CGPoint(x: 2.58, y: 10.44))
            combinedShape.addCurve(to: CGPoint(x: 1.61, y: 10.7), controlPoint1: CGPoint(x: 2.19, y: 10.64), controlPoint2: CGPoint(x: 1.97, y: 10.7))
            combinedShape.addLine(to: CGPoint(x: 1.39, y: 10.7))
            combinedShape.addCurve(to: CGPoint(x: 0.61, y: 10.54), controlPoint1: CGPoint(x: 1.03, y: 10.7), controlPoint2: CGPoint(x: 0.81, y: 10.64))
            combinedShape.addCurve(to: CGPoint(x: 0.16, y: 10.09), controlPoint1: CGPoint(x: 0.42, y: 10.44), controlPoint2: CGPoint(x: 0.26, y: 10.28))
            combinedShape.addCurve(to: CGPoint(x: 0, y: 9.31), controlPoint1: CGPoint(x: 0.06, y: 9.89), controlPoint2: CGPoint(x: 0, y: 9.67))
            combinedShape.addLine(to: CGPoint(x: 0, y: 8.09))
            combinedShape.addCurve(to: CGPoint(x: 0.16, y: 7.31), controlPoint1: CGPoint(x: 0, y: 7.73), controlPoint2: CGPoint(x: 0.06, y: 7.51))
            combinedShape.addCurve(to: CGPoint(x: 0.61, y: 6.86), controlPoint1: CGPoint(x: 0.26, y: 7.12), controlPoint2: CGPoint(x: 0.42, y: 6.96))
            combinedShape.addCurve(to: CGPoint(x: 1.39, y: 6.7), controlPoint1: CGPoint(x: 0.81, y: 6.76), controlPoint2: CGPoint(x: 1.03, y: 6.7))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 6.19, y: 4.7))
            combinedShape.addLine(to: CGPoint(x: 6.41, y: 4.7))
            combinedShape.addCurve(to: CGPoint(x: 7.19, y: 4.86), controlPoint1: CGPoint(x: 6.77, y: 4.7), controlPoint2: CGPoint(x: 6.99, y: 4.76))
            combinedShape.addCurve(to: CGPoint(x: 7.64, y: 5.31), controlPoint1: CGPoint(x: 7.38, y: 4.96), controlPoint2: CGPoint(x: 7.54, y: 5.12))
            combinedShape.addCurve(to: CGPoint(x: 7.8, y: 6.09), controlPoint1: CGPoint(x: 7.74, y: 5.51), controlPoint2: CGPoint(x: 7.8, y: 5.73))
            combinedShape.addLine(to: CGPoint(x: 7.8, y: 9.31))
            combinedShape.addCurve(to: CGPoint(x: 7.64, y: 10.09), controlPoint1: CGPoint(x: 7.8, y: 9.67), controlPoint2: CGPoint(x: 7.74, y: 9.89))
            combinedShape.addCurve(to: CGPoint(x: 7.19, y: 10.54), controlPoint1: CGPoint(x: 7.54, y: 10.28), controlPoint2: CGPoint(x: 7.38, y: 10.44))
            combinedShape.addCurve(to: CGPoint(x: 6.41, y: 10.7), controlPoint1: CGPoint(x: 6.99, y: 10.64), controlPoint2: CGPoint(x: 6.77, y: 10.7))
            combinedShape.addLine(to: CGPoint(x: 6.19, y: 10.7))
            combinedShape.addCurve(to: CGPoint(x: 5.41, y: 10.54), controlPoint1: CGPoint(x: 5.83, y: 10.7), controlPoint2: CGPoint(x: 5.61, y: 10.64))
            combinedShape.addCurve(to: CGPoint(x: 4.96, y: 10.09), controlPoint1: CGPoint(x: 5.22, y: 10.44), controlPoint2: CGPoint(x: 5.06, y: 10.28))
            combinedShape.addCurve(to: CGPoint(x: 4.8, y: 9.31), controlPoint1: CGPoint(x: 4.86, y: 9.89), controlPoint2: CGPoint(x: 4.8, y: 9.67))
            combinedShape.addLine(to: CGPoint(x: 4.8, y: 6.09))
            combinedShape.addCurve(to: CGPoint(x: 4.96, y: 5.31), controlPoint1: CGPoint(x: 4.8, y: 5.73), controlPoint2: CGPoint(x: 4.86, y: 5.51))
            combinedShape.addCurve(to: CGPoint(x: 5.41, y: 4.86), controlPoint1: CGPoint(x: 5.06, y: 5.12), controlPoint2: CGPoint(x: 5.22, y: 4.96))
            combinedShape.addCurve(to: CGPoint(x: 6.19, y: 4.7), controlPoint1: CGPoint(x: 5.61, y: 4.76), controlPoint2: CGPoint(x: 5.83, y: 4.7))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 10.79, y: 2.4))
            combinedShape.addLine(to: CGPoint(x: 11.01, y: 2.4))
            combinedShape.addCurve(to: CGPoint(x: 11.79, y: 2.56), controlPoint1: CGPoint(x: 11.37, y: 2.4), controlPoint2: CGPoint(x: 11.59, y: 2.46))
            combinedShape.addCurve(to: CGPoint(x: 12.24, y: 3.01), controlPoint1: CGPoint(x: 11.98, y: 2.66), controlPoint2: CGPoint(x: 12.14, y: 2.82))
            combinedShape.addCurve(to: CGPoint(x: 12.4, y: 3.79), controlPoint1: CGPoint(x: 12.34, y: 3.21), controlPoint2: CGPoint(x: 12.4, y: 3.43))
            combinedShape.addLine(to: CGPoint(x: 12.4, y: 9.31))
            combinedShape.addCurve(to: CGPoint(x: 12.24, y: 10.09), controlPoint1: CGPoint(x: 12.4, y: 9.67), controlPoint2: CGPoint(x: 12.34, y: 9.89))
            combinedShape.addCurve(to: CGPoint(x: 11.79, y: 10.54), controlPoint1: CGPoint(x: 12.14, y: 10.28), controlPoint2: CGPoint(x: 11.98, y: 10.44))
            combinedShape.addCurve(to: CGPoint(x: 11.01, y: 10.7), controlPoint1: CGPoint(x: 11.59, y: 10.64), controlPoint2: CGPoint(x: 11.37, y: 10.7))
            combinedShape.addLine(to: CGPoint(x: 10.79, y: 10.7))
            combinedShape.addCurve(to: CGPoint(x: 10.01, y: 10.54), controlPoint1: CGPoint(x: 10.43, y: 10.7), controlPoint2: CGPoint(x: 10.21, y: 10.64))
            combinedShape.addCurve(to: CGPoint(x: 9.56, y: 10.09), controlPoint1: CGPoint(x: 9.82, y: 10.44), controlPoint2: CGPoint(x: 9.66, y: 10.28))
            combinedShape.addCurve(to: CGPoint(x: 9.4, y: 9.31), controlPoint1: CGPoint(x: 9.46, y: 9.89), controlPoint2: CGPoint(x: 9.4, y: 9.67))
            combinedShape.addLine(to: CGPoint(x: 9.4, y: 3.79))
            combinedShape.addCurve(to: CGPoint(x: 9.56, y: 3.01), controlPoint1: CGPoint(x: 9.4, y: 3.43), controlPoint2: CGPoint(x: 9.46, y: 3.21))
            combinedShape.addCurve(to: CGPoint(x: 10.01, y: 2.56), controlPoint1: CGPoint(x: 9.66, y: 2.82), controlPoint2: CGPoint(x: 9.82, y: 2.66))
            combinedShape.addCurve(to: CGPoint(x: 10.79, y: 2.4), controlPoint1: CGPoint(x: 10.21, y: 2.46), controlPoint2: CGPoint(x: 10.43, y: 2.4))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 15.49, y: 0))
            combinedShape.addLine(to: CGPoint(x: 15.71, y: 0))
            combinedShape.addCurve(to: CGPoint(x: 16.49, y: 0.16), controlPoint1: CGPoint(x: 16.07, y: 0), controlPoint2: CGPoint(x: 16.29, y: 0.06))
            combinedShape.addCurve(to: CGPoint(x: 16.94, y: 0.61), controlPoint1: CGPoint(x: 16.68, y: 0.26), controlPoint2: CGPoint(x: 16.84, y: 0.42))
            combinedShape.addCurve(to: CGPoint(x: 17.1, y: 1.39), controlPoint1: CGPoint(x: 17.04, y: 0.81), controlPoint2: CGPoint(x: 17.1, y: 1.03))
            combinedShape.addLine(to: CGPoint(x: 17.1, y: 9.31))
            combinedShape.addCurve(to: CGPoint(x: 16.94, y: 10.09), controlPoint1: CGPoint(x: 17.1, y: 9.67), controlPoint2: CGPoint(x: 17.04, y: 9.89))
            combinedShape.addCurve(to: CGPoint(x: 16.49, y: 10.54), controlPoint1: CGPoint(x: 16.84, y: 10.28), controlPoint2: CGPoint(x: 16.68, y: 10.44))
            combinedShape.addCurve(to: CGPoint(x: 15.71, y: 10.7), controlPoint1: CGPoint(x: 16.29, y: 10.64), controlPoint2: CGPoint(x: 16.07, y: 10.7))
            combinedShape.addLine(to: CGPoint(x: 15.49, y: 10.7))
            combinedShape.addCurve(to: CGPoint(x: 14.71, y: 10.54), controlPoint1: CGPoint(x: 15.13, y: 10.7), controlPoint2: CGPoint(x: 14.91, y: 10.64))
            combinedShape.addCurve(to: CGPoint(x: 14.26, y: 10.09), controlPoint1: CGPoint(x: 14.52, y: 10.44), controlPoint2: CGPoint(x: 14.36, y: 10.28))
            combinedShape.addCurve(to: CGPoint(x: 14.1, y: 9.31), controlPoint1: CGPoint(x: 14.16, y: 9.89), controlPoint2: CGPoint(x: 14.1, y: 9.67))
            combinedShape.addLine(to: CGPoint(x: 14.1, y: 1.39))
            combinedShape.addCurve(to: CGPoint(x: 14.26, y: 0.61), controlPoint1: CGPoint(x: 14.1, y: 1.03), controlPoint2: CGPoint(x: 14.16, y: 0.81))
            combinedShape.addCurve(to: CGPoint(x: 14.71, y: 0.16), controlPoint1: CGPoint(x: 14.36, y: 0.42), controlPoint2: CGPoint(x: 14.52, y: 0.26))
            combinedShape.addCurve(to: CGPoint(x: 15.49, y: 0), controlPoint1: CGPoint(x: 14.91, y: 0.06), controlPoint2: CGPoint(x: 15.13, y: 0))
            combinedShape.close()
            context.saveGState()
            context.translateBy(x: 0.5, y: 1.6)
            combinedShape.usesEvenOddFillRule = true
            UIColor.black.setFill()
            combinedShape.fill()
            context.restoreGState()
            
            /// Wi-Fi
            let wiFi = UIBezierPath()
            wiFi.move(to: CGPoint(x: 7.7, y: 2.3))
            wiFi.addCurve(to: CGPoint(x: 13.7, y: 4.69), controlPoint1: CGPoint(x: 9.93, y: 2.3), controlPoint2: CGPoint(x: 12.08, y: 3.16))
            wiFi.addCurve(to: CGPoint(x: 14.14, y: 4.69), controlPoint1: CGPoint(x: 13.83, y: 4.81), controlPoint2: CGPoint(x: 14.02, y: 4.81))
            wiFi.addLine(to: CGPoint(x: 15.31, y: 3.51))
            wiFi.addCurve(to: CGPoint(x: 15.4, y: 3.28), controlPoint1: CGPoint(x: 15.37, y: 3.45), controlPoint2: CGPoint(x: 15.4, y: 3.37))
            wiFi.addCurve(to: CGPoint(x: 15.3, y: 3.05), controlPoint1: CGPoint(x: 15.4, y: 3.2), controlPoint2: CGPoint(x: 15.36, y: 3.12))
            wiFi.addCurve(to: CGPoint(x: 0.1, y: 3.05), controlPoint1: CGPoint(x: 11.05, y: -1.02), controlPoint2: CGPoint(x: 4.35, y: -1.02))
            wiFi.addCurve(to: CGPoint(x: 0, y: 3.28), controlPoint1: CGPoint(x: 0.04, y: 3.12), controlPoint2: CGPoint(x: 0, y: 3.2))
            wiFi.addCurve(to: CGPoint(x: 0.09, y: 3.51), controlPoint1: CGPoint(x: -0, y: 3.37), controlPoint2: CGPoint(x: 0.03, y: 3.45))
            wiFi.addLine(to: CGPoint(x: 1.26, y: 4.69))
            wiFi.addCurve(to: CGPoint(x: 1.7, y: 4.69), controlPoint1: CGPoint(x: 1.38, y: 4.81), controlPoint2: CGPoint(x: 1.58, y: 4.81))
            wiFi.addCurve(to: CGPoint(x: 7.7, y: 2.3), controlPoint1: CGPoint(x: 3.32, y: 3.15), controlPoint2: CGPoint(x: 5.47, y: 2.3))
            wiFi.close()
            wiFi.move(to: CGPoint(x: 7.7, y: 6.12))
            wiFi.addCurve(to: CGPoint(x: 11.02, y: 7.4), controlPoint1: CGPoint(x: 8.93, y: 6.12), controlPoint2: CGPoint(x: 10.11, y: 6.58))
            wiFi.addCurve(to: CGPoint(x: 11.46, y: 7.4), controlPoint1: CGPoint(x: 11.15, y: 7.52), controlPoint2: CGPoint(x: 11.34, y: 7.52))
            wiFi.addLine(to: CGPoint(x: 12.62, y: 6.22))
            wiFi.addCurve(to: CGPoint(x: 12.72, y: 5.99), controlPoint1: CGPoint(x: 12.68, y: 6.16), controlPoint2: CGPoint(x: 12.72, y: 6.08))
            wiFi.addCurve(to: CGPoint(x: 12.62, y: 5.76), controlPoint1: CGPoint(x: 12.72, y: 5.9), controlPoint2: CGPoint(x: 12.68, y: 5.82))
            wiFi.addCurve(to: CGPoint(x: 2.78, y: 5.76), controlPoint1: CGPoint(x: 9.85, y: 3.18), controlPoint2: CGPoint(x: 5.56, y: 3.18))
            wiFi.addCurve(to: CGPoint(x: 2.69, y: 5.99), controlPoint1: CGPoint(x: 2.72, y: 5.82), controlPoint2: CGPoint(x: 2.69, y: 5.9))
            wiFi.addCurve(to: CGPoint(x: 2.78, y: 6.22), controlPoint1: CGPoint(x: 2.68, y: 6.08), controlPoint2: CGPoint(x: 2.72, y: 6.16))
            wiFi.addLine(to: CGPoint(x: 3.94, y: 7.4))
            wiFi.addCurve(to: CGPoint(x: 4.38, y: 7.4), controlPoint1: CGPoint(x: 4.06, y: 7.52), controlPoint2: CGPoint(x: 4.26, y: 7.52))
            wiFi.addCurve(to: CGPoint(x: 7.7, y: 6.12), controlPoint1: CGPoint(x: 5.29, y: 6.58), controlPoint2: CGPoint(x: 6.47, y: 6.12))
            wiFi.close()
            wiFi.move(to: CGPoint(x: 9.94, y: 8.93))
            wiFi.addCurve(to: CGPoint(x: 10.03, y: 8.7), controlPoint1: CGPoint(x: 10, y: 8.87), controlPoint2: CGPoint(x: 10.03, y: 8.79))
            wiFi.addCurve(to: CGPoint(x: 9.93, y: 8.47), controlPoint1: CGPoint(x: 10.03, y: 8.61), controlPoint2: CGPoint(x: 9.99, y: 8.53))
            wiFi.addCurve(to: CGPoint(x: 5.47, y: 8.47), controlPoint1: CGPoint(x: 8.64, y: 7.38), controlPoint2: CGPoint(x: 6.76, y: 7.38))
            wiFi.addCurve(to: CGPoint(x: 5.37, y: 8.7), controlPoint1: CGPoint(x: 5.41, y: 8.53), controlPoint2: CGPoint(x: 5.37, y: 8.61))
            wiFi.addCurve(to: CGPoint(x: 5.46, y: 8.93), controlPoint1: CGPoint(x: 5.37, y: 8.79), controlPoint2: CGPoint(x: 5.4, y: 8.87))
            wiFi.addLine(to: CGPoint(x: 7.48, y: 10.96))
            wiFi.addCurve(to: CGPoint(x: 7.7, y: 11.06), controlPoint1: CGPoint(x: 7.54, y: 11.02), controlPoint2: CGPoint(x: 7.62, y: 11.06))
            wiFi.addCurve(to: CGPoint(x: 7.92, y: 10.96), controlPoint1: CGPoint(x: 7.78, y: 11.06), controlPoint2: CGPoint(x: 7.86, y: 11.02))
            wiFi.addLine(to: CGPoint(x: 9.94, y: 8.93))
            wiFi.close()
            context.saveGState()
            context.translateBy(x: 22.6, y: 1.4)
            wiFi.usesEvenOddFillRule = true
            UIColor.black.setFill()
            wiFi.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawIPhoneXBarsStatusDefaultWhite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 377, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 377, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 377, y: resizedFrame.height / 44)
        
        /// Action
        do {
            context.saveGState()
            context.translateBy(x: 20, y: 14)
            
            /// ↳ Time
            let time = NSMutableAttributedString(string: "9:41")
            time.addAttribute(.font, value: UIFont(name: "SFProText-Semibold", size: 15)!, range: NSRange(location: 0, length: time.length))
            time.addAttribute(.kern, value: -0.17, range: NSRange(location: 0, length: time.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                time.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: time.length))
            }
            time.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: time.length))
            context.saveGState()
            time.draw(in: CGRect(x: 0, y: 0, width: 54, height: 20))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Container
        do {
            context.saveGState()
            context.translateBy(x: 295, y: 15)
            
            /// Battery
            do {
                context.saveGState()
                context.translateBy(x: 43, y: 0.6)
                
                /// Rectangle
                let rectangle8 = UIBezierPath()
                rectangle8.move(to: CGPoint(x: 3.59, y: 1))
                rectangle8.addCurve(to: CGPoint(x: 1.9, y: 1.26), controlPoint1: CGPoint(x: 2.6, y: 1), controlPoint2: CGPoint(x: 2.26, y: 1.07))
                rectangle8.addCurve(to: CGPoint(x: 1.26, y: 1.9), controlPoint1: CGPoint(x: 1.62, y: 1.41), controlPoint2: CGPoint(x: 1.41, y: 1.62))
                rectangle8.addCurve(to: CGPoint(x: 1, y: 3.59), controlPoint1: CGPoint(x: 1.07, y: 2.26), controlPoint2: CGPoint(x: 1, y: 2.6))
                rectangle8.addLine(to: CGPoint(x: 1, y: 7.91))
                rectangle8.addCurve(to: CGPoint(x: 1.26, y: 9.6), controlPoint1: CGPoint(x: 1, y: 8.9), controlPoint2: CGPoint(x: 1.07, y: 9.24))
                rectangle8.addCurve(to: CGPoint(x: 1.9, y: 10.24), controlPoint1: CGPoint(x: 1.41, y: 9.88), controlPoint2: CGPoint(x: 1.62, y: 10.09))
                rectangle8.addCurve(to: CGPoint(x: 3.59, y: 10.5), controlPoint1: CGPoint(x: 2.26, y: 10.43), controlPoint2: CGPoint(x: 2.6, y: 10.5))
                rectangle8.addLine(to: CGPoint(x: 18.41, y: 10.5))
                rectangle8.addCurve(to: CGPoint(x: 20.1, y: 10.24), controlPoint1: CGPoint(x: 19.4, y: 10.5), controlPoint2: CGPoint(x: 19.74, y: 10.43))
                rectangle8.addCurve(to: CGPoint(x: 20.74, y: 9.6), controlPoint1: CGPoint(x: 20.38, y: 10.09), controlPoint2: CGPoint(x: 20.59, y: 9.88))
                rectangle8.addCurve(to: CGPoint(x: 21, y: 7.91), controlPoint1: CGPoint(x: 20.93, y: 9.24), controlPoint2: CGPoint(x: 21, y: 8.9))
                rectangle8.addLine(to: CGPoint(x: 21, y: 3.59))
                rectangle8.addCurve(to: CGPoint(x: 20.74, y: 1.9), controlPoint1: CGPoint(x: 21, y: 2.6), controlPoint2: CGPoint(x: 20.93, y: 2.26))
                rectangle8.addCurve(to: CGPoint(x: 20.1, y: 1.26), controlPoint1: CGPoint(x: 20.59, y: 1.62), controlPoint2: CGPoint(x: 20.38, y: 1.41))
                rectangle8.addCurve(to: CGPoint(x: 18.41, y: 1), controlPoint1: CGPoint(x: 19.74, y: 1.07), controlPoint2: CGPoint(x: 19.4, y: 1))
                rectangle8.addLine(to: CGPoint(x: 3.59, y: 1))
                rectangle8.close()
                rectangle8.move(to: CGPoint(x: 3.59, y: 0))
                rectangle8.addLine(to: CGPoint(x: 18.41, y: 0))
                rectangle8.addCurve(to: CGPoint(x: 20.57, y: 0.37), controlPoint1: CGPoint(x: 19.66, y: 0), controlPoint2: CGPoint(x: 20.11, y: 0.13))
                rectangle8.addCurve(to: CGPoint(x: 21.63, y: 1.43), controlPoint1: CGPoint(x: 21.02, y: 0.62), controlPoint2: CGPoint(x: 21.38, y: 0.98))
                rectangle8.addCurve(to: CGPoint(x: 22, y: 3.59), controlPoint1: CGPoint(x: 21.87, y: 1.89), controlPoint2: CGPoint(x: 22, y: 2.34))
                rectangle8.addLine(to: CGPoint(x: 22, y: 7.91))
                rectangle8.addCurve(to: CGPoint(x: 21.63, y: 10.07), controlPoint1: CGPoint(x: 22, y: 9.16), controlPoint2: CGPoint(x: 21.87, y: 9.61))
                rectangle8.addCurve(to: CGPoint(x: 20.57, y: 11.13), controlPoint1: CGPoint(x: 21.38, y: 10.52), controlPoint2: CGPoint(x: 21.02, y: 10.88))
                rectangle8.addCurve(to: CGPoint(x: 18.41, y: 11.5), controlPoint1: CGPoint(x: 20.11, y: 11.37), controlPoint2: CGPoint(x: 19.66, y: 11.5))
                rectangle8.addLine(to: CGPoint(x: 3.59, y: 11.5))
                rectangle8.addCurve(to: CGPoint(x: 1.43, y: 11.13), controlPoint1: CGPoint(x: 2.34, y: 11.5), controlPoint2: CGPoint(x: 1.89, y: 11.37))
                rectangle8.addCurve(to: CGPoint(x: 0.37, y: 10.07), controlPoint1: CGPoint(x: 0.98, y: 10.88), controlPoint2: CGPoint(x: 0.62, y: 10.52))
                rectangle8.addCurve(to: CGPoint(x: 0, y: 7.91), controlPoint1: CGPoint(x: 0.13, y: 9.61), controlPoint2: CGPoint(x: 0, y: 9.16))
                rectangle8.addLine(to: CGPoint(x: 0, y: 3.59))
                rectangle8.addCurve(to: CGPoint(x: 0.37, y: 1.43), controlPoint1: CGPoint(x: 0, y: 2.34), controlPoint2: CGPoint(x: 0.13, y: 1.89))
                rectangle8.addCurve(to: CGPoint(x: 1.43, y: 0.37), controlPoint1: CGPoint(x: 0.62, y: 0.98), controlPoint2: CGPoint(x: 0.98, y: 0.62))
                rectangle8.addCurve(to: CGPoint(x: 3.59, y: 0), controlPoint1: CGPoint(x: 1.89, y: 0.13), controlPoint2: CGPoint(x: 2.34, y: 0))
                rectangle8.close()
                rectangle8.move(to: CGPoint(x: 23, y: 3.69))
                rectangle8.addCurve(to: CGPoint(x: 24.5, y: 5.69), controlPoint1: CGPoint(x: 24, y: 4.2), controlPoint2: CGPoint(x: 24.5, y: 4.87))
                rectangle8.addCurve(to: CGPoint(x: 23, y: 7.69), controlPoint1: CGPoint(x: 24.5, y: 6.51), controlPoint2: CGPoint(x: 24, y: 7.18))
                rectangle8.addLine(to: CGPoint(x: 23, y: 3.69))
                rectangle8.close()
                context.saveGState()
                context.translateBy(x: 0, y: 0.56)
                UIColor(white: 1, alpha: 0.36).setFill()
                rectangle8.fill()
                context.restoreGState()
                
                /// Rectangle
                let rectangle9 = UIBezierPath()
                rectangle9.move(to: CGPoint(x: 2.05, y: 0))
                rectangle9.addLine(to: CGPoint(x: 15.95, y: 0))
                rectangle9.addCurve(to: CGPoint(x: 17.18, y: 0.21), controlPoint1: CGPoint(x: 16.66, y: 0), controlPoint2: CGPoint(x: 16.92, y: 0.07))
                rectangle9.addCurve(to: CGPoint(x: 17.79, y: 0.82), controlPoint1: CGPoint(x: 17.44, y: 0.35), controlPoint2: CGPoint(x: 17.65, y: 0.56))
                rectangle9.addCurve(to: CGPoint(x: 18, y: 2.05), controlPoint1: CGPoint(x: 17.93, y: 1.08), controlPoint2: CGPoint(x: 18, y: 1.34))
                rectangle9.addLine(to: CGPoint(x: 18, y: 5.62))
                rectangle9.addCurve(to: CGPoint(x: 17.79, y: 6.85), controlPoint1: CGPoint(x: 18, y: 6.33), controlPoint2: CGPoint(x: 17.93, y: 6.59))
                rectangle9.addCurve(to: CGPoint(x: 17.18, y: 7.45), controlPoint1: CGPoint(x: 17.65, y: 7.11), controlPoint2: CGPoint(x: 17.44, y: 7.31))
                rectangle9.addCurve(to: CGPoint(x: 15.95, y: 7.67), controlPoint1: CGPoint(x: 16.92, y: 7.59), controlPoint2: CGPoint(x: 16.66, y: 7.67))
                rectangle9.addLine(to: CGPoint(x: 2.05, y: 7.67))
                rectangle9.addCurve(to: CGPoint(x: 0.82, y: 7.45), controlPoint1: CGPoint(x: 1.34, y: 7.67), controlPoint2: CGPoint(x: 1.08, y: 7.59))
                rectangle9.addCurve(to: CGPoint(x: 0.21, y: 6.85), controlPoint1: CGPoint(x: 0.56, y: 7.31), controlPoint2: CGPoint(x: 0.35, y: 7.11))
                rectangle9.addCurve(to: CGPoint(x: 0, y: 5.62), controlPoint1: CGPoint(x: 0.07, y: 6.59), controlPoint2: CGPoint(x: 0, y: 6.33))
                rectangle9.addLine(to: CGPoint(x: 0, y: 2.05))
                rectangle9.addCurve(to: CGPoint(x: 0.21, y: 0.82), controlPoint1: CGPoint(x: 0, y: 1.34), controlPoint2: CGPoint(x: 0.07, y: 1.08))
                rectangle9.addCurve(to: CGPoint(x: 0.82, y: 0.21), controlPoint1: CGPoint(x: 0.35, y: 0.56), controlPoint2: CGPoint(x: 0.56, y: 0.35))
                rectangle9.addCurve(to: CGPoint(x: 2.05, y: 0), controlPoint1: CGPoint(x: 1.08, y: 0.07), controlPoint2: CGPoint(x: 1.34, y: 0))
                rectangle9.close()
                context.saveGState()
                context.translateBy(x: 2, y: 2.48)
                rectangle9.usesEvenOddFillRule = true
                UIColor.white.setFill()
                rectangle9.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Combined Shape
            let combinedShape = UIBezierPath()
            combinedShape.move(to: CGPoint(x: 1.39, y: 6.7))
            combinedShape.addLine(to: CGPoint(x: 1.61, y: 6.7))
            combinedShape.addCurve(to: CGPoint(x: 2.39, y: 6.86), controlPoint1: CGPoint(x: 1.97, y: 6.7), controlPoint2: CGPoint(x: 2.19, y: 6.76))
            combinedShape.addCurve(to: CGPoint(x: 2.84, y: 7.31), controlPoint1: CGPoint(x: 2.58, y: 6.96), controlPoint2: CGPoint(x: 2.74, y: 7.12))
            combinedShape.addCurve(to: CGPoint(x: 3, y: 8.09), controlPoint1: CGPoint(x: 2.94, y: 7.51), controlPoint2: CGPoint(x: 3, y: 7.73))
            combinedShape.addLine(to: CGPoint(x: 3, y: 9.31))
            combinedShape.addCurve(to: CGPoint(x: 2.84, y: 10.09), controlPoint1: CGPoint(x: 3, y: 9.67), controlPoint2: CGPoint(x: 2.94, y: 9.89))
            combinedShape.addCurve(to: CGPoint(x: 2.39, y: 10.54), controlPoint1: CGPoint(x: 2.74, y: 10.28), controlPoint2: CGPoint(x: 2.58, y: 10.44))
            combinedShape.addCurve(to: CGPoint(x: 1.61, y: 10.7), controlPoint1: CGPoint(x: 2.19, y: 10.64), controlPoint2: CGPoint(x: 1.97, y: 10.7))
            combinedShape.addLine(to: CGPoint(x: 1.39, y: 10.7))
            combinedShape.addCurve(to: CGPoint(x: 0.61, y: 10.54), controlPoint1: CGPoint(x: 1.03, y: 10.7), controlPoint2: CGPoint(x: 0.81, y: 10.64))
            combinedShape.addCurve(to: CGPoint(x: 0.16, y: 10.09), controlPoint1: CGPoint(x: 0.42, y: 10.44), controlPoint2: CGPoint(x: 0.26, y: 10.28))
            combinedShape.addCurve(to: CGPoint(x: 0, y: 9.31), controlPoint1: CGPoint(x: 0.06, y: 9.89), controlPoint2: CGPoint(x: 0, y: 9.67))
            combinedShape.addLine(to: CGPoint(x: 0, y: 8.09))
            combinedShape.addCurve(to: CGPoint(x: 0.16, y: 7.31), controlPoint1: CGPoint(x: 0, y: 7.73), controlPoint2: CGPoint(x: 0.06, y: 7.51))
            combinedShape.addCurve(to: CGPoint(x: 0.61, y: 6.86), controlPoint1: CGPoint(x: 0.26, y: 7.12), controlPoint2: CGPoint(x: 0.42, y: 6.96))
            combinedShape.addCurve(to: CGPoint(x: 1.39, y: 6.7), controlPoint1: CGPoint(x: 0.81, y: 6.76), controlPoint2: CGPoint(x: 1.03, y: 6.7))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 6.19, y: 4.7))
            combinedShape.addLine(to: CGPoint(x: 6.41, y: 4.7))
            combinedShape.addCurve(to: CGPoint(x: 7.19, y: 4.86), controlPoint1: CGPoint(x: 6.77, y: 4.7), controlPoint2: CGPoint(x: 6.99, y: 4.76))
            combinedShape.addCurve(to: CGPoint(x: 7.64, y: 5.31), controlPoint1: CGPoint(x: 7.38, y: 4.96), controlPoint2: CGPoint(x: 7.54, y: 5.12))
            combinedShape.addCurve(to: CGPoint(x: 7.8, y: 6.09), controlPoint1: CGPoint(x: 7.74, y: 5.51), controlPoint2: CGPoint(x: 7.8, y: 5.73))
            combinedShape.addLine(to: CGPoint(x: 7.8, y: 9.31))
            combinedShape.addCurve(to: CGPoint(x: 7.64, y: 10.09), controlPoint1: CGPoint(x: 7.8, y: 9.67), controlPoint2: CGPoint(x: 7.74, y: 9.89))
            combinedShape.addCurve(to: CGPoint(x: 7.19, y: 10.54), controlPoint1: CGPoint(x: 7.54, y: 10.28), controlPoint2: CGPoint(x: 7.38, y: 10.44))
            combinedShape.addCurve(to: CGPoint(x: 6.41, y: 10.7), controlPoint1: CGPoint(x: 6.99, y: 10.64), controlPoint2: CGPoint(x: 6.77, y: 10.7))
            combinedShape.addLine(to: CGPoint(x: 6.19, y: 10.7))
            combinedShape.addCurve(to: CGPoint(x: 5.41, y: 10.54), controlPoint1: CGPoint(x: 5.83, y: 10.7), controlPoint2: CGPoint(x: 5.61, y: 10.64))
            combinedShape.addCurve(to: CGPoint(x: 4.96, y: 10.09), controlPoint1: CGPoint(x: 5.22, y: 10.44), controlPoint2: CGPoint(x: 5.06, y: 10.28))
            combinedShape.addCurve(to: CGPoint(x: 4.8, y: 9.31), controlPoint1: CGPoint(x: 4.86, y: 9.89), controlPoint2: CGPoint(x: 4.8, y: 9.67))
            combinedShape.addLine(to: CGPoint(x: 4.8, y: 6.09))
            combinedShape.addCurve(to: CGPoint(x: 4.96, y: 5.31), controlPoint1: CGPoint(x: 4.8, y: 5.73), controlPoint2: CGPoint(x: 4.86, y: 5.51))
            combinedShape.addCurve(to: CGPoint(x: 5.41, y: 4.86), controlPoint1: CGPoint(x: 5.06, y: 5.12), controlPoint2: CGPoint(x: 5.22, y: 4.96))
            combinedShape.addCurve(to: CGPoint(x: 6.19, y: 4.7), controlPoint1: CGPoint(x: 5.61, y: 4.76), controlPoint2: CGPoint(x: 5.83, y: 4.7))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 10.79, y: 2.4))
            combinedShape.addLine(to: CGPoint(x: 11.01, y: 2.4))
            combinedShape.addCurve(to: CGPoint(x: 11.79, y: 2.56), controlPoint1: CGPoint(x: 11.37, y: 2.4), controlPoint2: CGPoint(x: 11.59, y: 2.46))
            combinedShape.addCurve(to: CGPoint(x: 12.24, y: 3.01), controlPoint1: CGPoint(x: 11.98, y: 2.66), controlPoint2: CGPoint(x: 12.14, y: 2.82))
            combinedShape.addCurve(to: CGPoint(x: 12.4, y: 3.79), controlPoint1: CGPoint(x: 12.34, y: 3.21), controlPoint2: CGPoint(x: 12.4, y: 3.43))
            combinedShape.addLine(to: CGPoint(x: 12.4, y: 9.31))
            combinedShape.addCurve(to: CGPoint(x: 12.24, y: 10.09), controlPoint1: CGPoint(x: 12.4, y: 9.67), controlPoint2: CGPoint(x: 12.34, y: 9.89))
            combinedShape.addCurve(to: CGPoint(x: 11.79, y: 10.54), controlPoint1: CGPoint(x: 12.14, y: 10.28), controlPoint2: CGPoint(x: 11.98, y: 10.44))
            combinedShape.addCurve(to: CGPoint(x: 11.01, y: 10.7), controlPoint1: CGPoint(x: 11.59, y: 10.64), controlPoint2: CGPoint(x: 11.37, y: 10.7))
            combinedShape.addLine(to: CGPoint(x: 10.79, y: 10.7))
            combinedShape.addCurve(to: CGPoint(x: 10.01, y: 10.54), controlPoint1: CGPoint(x: 10.43, y: 10.7), controlPoint2: CGPoint(x: 10.21, y: 10.64))
            combinedShape.addCurve(to: CGPoint(x: 9.56, y: 10.09), controlPoint1: CGPoint(x: 9.82, y: 10.44), controlPoint2: CGPoint(x: 9.66, y: 10.28))
            combinedShape.addCurve(to: CGPoint(x: 9.4, y: 9.31), controlPoint1: CGPoint(x: 9.46, y: 9.89), controlPoint2: CGPoint(x: 9.4, y: 9.67))
            combinedShape.addLine(to: CGPoint(x: 9.4, y: 3.79))
            combinedShape.addCurve(to: CGPoint(x: 9.56, y: 3.01), controlPoint1: CGPoint(x: 9.4, y: 3.43), controlPoint2: CGPoint(x: 9.46, y: 3.21))
            combinedShape.addCurve(to: CGPoint(x: 10.01, y: 2.56), controlPoint1: CGPoint(x: 9.66, y: 2.82), controlPoint2: CGPoint(x: 9.82, y: 2.66))
            combinedShape.addCurve(to: CGPoint(x: 10.79, y: 2.4), controlPoint1: CGPoint(x: 10.21, y: 2.46), controlPoint2: CGPoint(x: 10.43, y: 2.4))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 15.49, y: 0))
            combinedShape.addLine(to: CGPoint(x: 15.71, y: 0))
            combinedShape.addCurve(to: CGPoint(x: 16.49, y: 0.16), controlPoint1: CGPoint(x: 16.07, y: 0), controlPoint2: CGPoint(x: 16.29, y: 0.06))
            combinedShape.addCurve(to: CGPoint(x: 16.94, y: 0.61), controlPoint1: CGPoint(x: 16.68, y: 0.26), controlPoint2: CGPoint(x: 16.84, y: 0.42))
            combinedShape.addCurve(to: CGPoint(x: 17.1, y: 1.39), controlPoint1: CGPoint(x: 17.04, y: 0.81), controlPoint2: CGPoint(x: 17.1, y: 1.03))
            combinedShape.addLine(to: CGPoint(x: 17.1, y: 9.31))
            combinedShape.addCurve(to: CGPoint(x: 16.94, y: 10.09), controlPoint1: CGPoint(x: 17.1, y: 9.67), controlPoint2: CGPoint(x: 17.04, y: 9.89))
            combinedShape.addCurve(to: CGPoint(x: 16.49, y: 10.54), controlPoint1: CGPoint(x: 16.84, y: 10.28), controlPoint2: CGPoint(x: 16.68, y: 10.44))
            combinedShape.addCurve(to: CGPoint(x: 15.71, y: 10.7), controlPoint1: CGPoint(x: 16.29, y: 10.64), controlPoint2: CGPoint(x: 16.07, y: 10.7))
            combinedShape.addLine(to: CGPoint(x: 15.49, y: 10.7))
            combinedShape.addCurve(to: CGPoint(x: 14.71, y: 10.54), controlPoint1: CGPoint(x: 15.13, y: 10.7), controlPoint2: CGPoint(x: 14.91, y: 10.64))
            combinedShape.addCurve(to: CGPoint(x: 14.26, y: 10.09), controlPoint1: CGPoint(x: 14.52, y: 10.44), controlPoint2: CGPoint(x: 14.36, y: 10.28))
            combinedShape.addCurve(to: CGPoint(x: 14.1, y: 9.31), controlPoint1: CGPoint(x: 14.16, y: 9.89), controlPoint2: CGPoint(x: 14.1, y: 9.67))
            combinedShape.addLine(to: CGPoint(x: 14.1, y: 1.39))
            combinedShape.addCurve(to: CGPoint(x: 14.26, y: 0.61), controlPoint1: CGPoint(x: 14.1, y: 1.03), controlPoint2: CGPoint(x: 14.16, y: 0.81))
            combinedShape.addCurve(to: CGPoint(x: 14.71, y: 0.16), controlPoint1: CGPoint(x: 14.36, y: 0.42), controlPoint2: CGPoint(x: 14.52, y: 0.26))
            combinedShape.addCurve(to: CGPoint(x: 15.49, y: 0), controlPoint1: CGPoint(x: 14.91, y: 0.06), controlPoint2: CGPoint(x: 15.13, y: 0))
            combinedShape.close()
            context.saveGState()
            context.translateBy(x: 0.5, y: 1.6)
            combinedShape.usesEvenOddFillRule = true
            UIColor.white.setFill()
            combinedShape.fill()
            context.restoreGState()
            
            /// Wi-Fi
            let wiFi = UIBezierPath()
            wiFi.move(to: CGPoint(x: 7.7, y: 2.3))
            wiFi.addCurve(to: CGPoint(x: 13.7, y: 4.69), controlPoint1: CGPoint(x: 9.93, y: 2.3), controlPoint2: CGPoint(x: 12.08, y: 3.16))
            wiFi.addCurve(to: CGPoint(x: 14.14, y: 4.69), controlPoint1: CGPoint(x: 13.83, y: 4.81), controlPoint2: CGPoint(x: 14.02, y: 4.81))
            wiFi.addLine(to: CGPoint(x: 15.31, y: 3.51))
            wiFi.addCurve(to: CGPoint(x: 15.4, y: 3.28), controlPoint1: CGPoint(x: 15.37, y: 3.45), controlPoint2: CGPoint(x: 15.4, y: 3.37))
            wiFi.addCurve(to: CGPoint(x: 15.3, y: 3.05), controlPoint1: CGPoint(x: 15.4, y: 3.2), controlPoint2: CGPoint(x: 15.36, y: 3.12))
            wiFi.addCurve(to: CGPoint(x: 0.1, y: 3.05), controlPoint1: CGPoint(x: 11.05, y: -1.02), controlPoint2: CGPoint(x: 4.35, y: -1.02))
            wiFi.addCurve(to: CGPoint(x: 0, y: 3.28), controlPoint1: CGPoint(x: 0.04, y: 3.12), controlPoint2: CGPoint(x: 0, y: 3.2))
            wiFi.addCurve(to: CGPoint(x: 0.09, y: 3.51), controlPoint1: CGPoint(x: -0, y: 3.37), controlPoint2: CGPoint(x: 0.03, y: 3.45))
            wiFi.addLine(to: CGPoint(x: 1.26, y: 4.69))
            wiFi.addCurve(to: CGPoint(x: 1.7, y: 4.69), controlPoint1: CGPoint(x: 1.38, y: 4.81), controlPoint2: CGPoint(x: 1.58, y: 4.81))
            wiFi.addCurve(to: CGPoint(x: 7.7, y: 2.3), controlPoint1: CGPoint(x: 3.32, y: 3.15), controlPoint2: CGPoint(x: 5.47, y: 2.3))
            wiFi.close()
            wiFi.move(to: CGPoint(x: 7.7, y: 6.12))
            wiFi.addCurve(to: CGPoint(x: 11.02, y: 7.4), controlPoint1: CGPoint(x: 8.93, y: 6.12), controlPoint2: CGPoint(x: 10.11, y: 6.58))
            wiFi.addCurve(to: CGPoint(x: 11.46, y: 7.4), controlPoint1: CGPoint(x: 11.15, y: 7.52), controlPoint2: CGPoint(x: 11.34, y: 7.52))
            wiFi.addLine(to: CGPoint(x: 12.62, y: 6.22))
            wiFi.addCurve(to: CGPoint(x: 12.72, y: 5.99), controlPoint1: CGPoint(x: 12.68, y: 6.16), controlPoint2: CGPoint(x: 12.72, y: 6.08))
            wiFi.addCurve(to: CGPoint(x: 12.62, y: 5.76), controlPoint1: CGPoint(x: 12.72, y: 5.9), controlPoint2: CGPoint(x: 12.68, y: 5.82))
            wiFi.addCurve(to: CGPoint(x: 2.78, y: 5.76), controlPoint1: CGPoint(x: 9.85, y: 3.18), controlPoint2: CGPoint(x: 5.56, y: 3.18))
            wiFi.addCurve(to: CGPoint(x: 2.69, y: 5.99), controlPoint1: CGPoint(x: 2.72, y: 5.82), controlPoint2: CGPoint(x: 2.69, y: 5.9))
            wiFi.addCurve(to: CGPoint(x: 2.78, y: 6.22), controlPoint1: CGPoint(x: 2.68, y: 6.08), controlPoint2: CGPoint(x: 2.72, y: 6.16))
            wiFi.addLine(to: CGPoint(x: 3.94, y: 7.4))
            wiFi.addCurve(to: CGPoint(x: 4.38, y: 7.4), controlPoint1: CGPoint(x: 4.06, y: 7.52), controlPoint2: CGPoint(x: 4.26, y: 7.52))
            wiFi.addCurve(to: CGPoint(x: 7.7, y: 6.12), controlPoint1: CGPoint(x: 5.29, y: 6.58), controlPoint2: CGPoint(x: 6.47, y: 6.12))
            wiFi.close()
            wiFi.move(to: CGPoint(x: 9.94, y: 8.93))
            wiFi.addCurve(to: CGPoint(x: 10.03, y: 8.7), controlPoint1: CGPoint(x: 10, y: 8.87), controlPoint2: CGPoint(x: 10.03, y: 8.79))
            wiFi.addCurve(to: CGPoint(x: 9.93, y: 8.47), controlPoint1: CGPoint(x: 10.03, y: 8.61), controlPoint2: CGPoint(x: 9.99, y: 8.53))
            wiFi.addCurve(to: CGPoint(x: 5.47, y: 8.47), controlPoint1: CGPoint(x: 8.64, y: 7.38), controlPoint2: CGPoint(x: 6.76, y: 7.38))
            wiFi.addCurve(to: CGPoint(x: 5.37, y: 8.7), controlPoint1: CGPoint(x: 5.41, y: 8.53), controlPoint2: CGPoint(x: 5.37, y: 8.61))
            wiFi.addCurve(to: CGPoint(x: 5.46, y: 8.93), controlPoint1: CGPoint(x: 5.37, y: 8.79), controlPoint2: CGPoint(x: 5.4, y: 8.87))
            wiFi.addLine(to: CGPoint(x: 7.48, y: 10.96))
            wiFi.addCurve(to: CGPoint(x: 7.7, y: 11.06), controlPoint1: CGPoint(x: 7.54, y: 11.02), controlPoint2: CGPoint(x: 7.62, y: 11.06))
            wiFi.addCurve(to: CGPoint(x: 7.92, y: 10.96), controlPoint1: CGPoint(x: 7.78, y: 11.06), controlPoint2: CGPoint(x: 7.86, y: 11.02))
            wiFi.addLine(to: CGPoint(x: 9.94, y: 8.93))
            wiFi.close()
            context.saveGState()
            context.translateBy(x: 22.6, y: 1.4)
            wiFi.usesEvenOddFillRule = true
            UIColor.white.setFill()
            wiFi.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawIPhoneXBarsStatusWithAction(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 377, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 377, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 377, y: resizedFrame.height / 44)
        
        /// Action
        // Warning: New symbols are not supported.
        
        /// Container
        do {
            context.saveGState()
            context.translateBy(x: 295, y: 16)
            
            /// Battery
            do {
                context.saveGState()
                context.translateBy(x: 43, y: 0.6)
                
                /// Rectangle
                let rectangle8 = UIBezierPath()
                rectangle8.move(to: CGPoint(x: 3.59, y: 1))
                rectangle8.addCurve(to: CGPoint(x: 1.9, y: 1.26), controlPoint1: CGPoint(x: 2.6, y: 1), controlPoint2: CGPoint(x: 2.26, y: 1.07))
                rectangle8.addCurve(to: CGPoint(x: 1.26, y: 1.9), controlPoint1: CGPoint(x: 1.62, y: 1.41), controlPoint2: CGPoint(x: 1.41, y: 1.62))
                rectangle8.addCurve(to: CGPoint(x: 1, y: 3.59), controlPoint1: CGPoint(x: 1.07, y: 2.26), controlPoint2: CGPoint(x: 1, y: 2.6))
                rectangle8.addLine(to: CGPoint(x: 1, y: 7.91))
                rectangle8.addCurve(to: CGPoint(x: 1.26, y: 9.6), controlPoint1: CGPoint(x: 1, y: 8.9), controlPoint2: CGPoint(x: 1.07, y: 9.24))
                rectangle8.addCurve(to: CGPoint(x: 1.9, y: 10.24), controlPoint1: CGPoint(x: 1.41, y: 9.88), controlPoint2: CGPoint(x: 1.62, y: 10.09))
                rectangle8.addCurve(to: CGPoint(x: 3.59, y: 10.5), controlPoint1: CGPoint(x: 2.26, y: 10.43), controlPoint2: CGPoint(x: 2.6, y: 10.5))
                rectangle8.addLine(to: CGPoint(x: 18.41, y: 10.5))
                rectangle8.addCurve(to: CGPoint(x: 20.1, y: 10.24), controlPoint1: CGPoint(x: 19.4, y: 10.5), controlPoint2: CGPoint(x: 19.74, y: 10.43))
                rectangle8.addCurve(to: CGPoint(x: 20.74, y: 9.6), controlPoint1: CGPoint(x: 20.38, y: 10.09), controlPoint2: CGPoint(x: 20.59, y: 9.88))
                rectangle8.addCurve(to: CGPoint(x: 21, y: 7.91), controlPoint1: CGPoint(x: 20.93, y: 9.24), controlPoint2: CGPoint(x: 21, y: 8.9))
                rectangle8.addLine(to: CGPoint(x: 21, y: 3.59))
                rectangle8.addCurve(to: CGPoint(x: 20.74, y: 1.9), controlPoint1: CGPoint(x: 21, y: 2.6), controlPoint2: CGPoint(x: 20.93, y: 2.26))
                rectangle8.addCurve(to: CGPoint(x: 20.1, y: 1.26), controlPoint1: CGPoint(x: 20.59, y: 1.62), controlPoint2: CGPoint(x: 20.38, y: 1.41))
                rectangle8.addCurve(to: CGPoint(x: 18.41, y: 1), controlPoint1: CGPoint(x: 19.74, y: 1.07), controlPoint2: CGPoint(x: 19.4, y: 1))
                rectangle8.addLine(to: CGPoint(x: 3.59, y: 1))
                rectangle8.close()
                rectangle8.move(to: CGPoint(x: 3.59, y: 0))
                rectangle8.addLine(to: CGPoint(x: 18.41, y: 0))
                rectangle8.addCurve(to: CGPoint(x: 20.57, y: 0.37), controlPoint1: CGPoint(x: 19.66, y: 0), controlPoint2: CGPoint(x: 20.11, y: 0.13))
                rectangle8.addCurve(to: CGPoint(x: 21.63, y: 1.43), controlPoint1: CGPoint(x: 21.02, y: 0.62), controlPoint2: CGPoint(x: 21.38, y: 0.98))
                rectangle8.addCurve(to: CGPoint(x: 22, y: 3.59), controlPoint1: CGPoint(x: 21.87, y: 1.89), controlPoint2: CGPoint(x: 22, y: 2.34))
                rectangle8.addLine(to: CGPoint(x: 22, y: 7.91))
                rectangle8.addCurve(to: CGPoint(x: 21.63, y: 10.07), controlPoint1: CGPoint(x: 22, y: 9.16), controlPoint2: CGPoint(x: 21.87, y: 9.61))
                rectangle8.addCurve(to: CGPoint(x: 20.57, y: 11.13), controlPoint1: CGPoint(x: 21.38, y: 10.52), controlPoint2: CGPoint(x: 21.02, y: 10.88))
                rectangle8.addCurve(to: CGPoint(x: 18.41, y: 11.5), controlPoint1: CGPoint(x: 20.11, y: 11.37), controlPoint2: CGPoint(x: 19.66, y: 11.5))
                rectangle8.addLine(to: CGPoint(x: 3.59, y: 11.5))
                rectangle8.addCurve(to: CGPoint(x: 1.43, y: 11.13), controlPoint1: CGPoint(x: 2.34, y: 11.5), controlPoint2: CGPoint(x: 1.89, y: 11.37))
                rectangle8.addCurve(to: CGPoint(x: 0.37, y: 10.07), controlPoint1: CGPoint(x: 0.98, y: 10.88), controlPoint2: CGPoint(x: 0.62, y: 10.52))
                rectangle8.addCurve(to: CGPoint(x: 0, y: 7.91), controlPoint1: CGPoint(x: 0.13, y: 9.61), controlPoint2: CGPoint(x: 0, y: 9.16))
                rectangle8.addLine(to: CGPoint(x: 0, y: 3.59))
                rectangle8.addCurve(to: CGPoint(x: 0.37, y: 1.43), controlPoint1: CGPoint(x: 0, y: 2.34), controlPoint2: CGPoint(x: 0.13, y: 1.89))
                rectangle8.addCurve(to: CGPoint(x: 1.43, y: 0.37), controlPoint1: CGPoint(x: 0.62, y: 0.98), controlPoint2: CGPoint(x: 0.98, y: 0.62))
                rectangle8.addCurve(to: CGPoint(x: 3.59, y: 0), controlPoint1: CGPoint(x: 1.89, y: 0.13), controlPoint2: CGPoint(x: 2.34, y: 0))
                rectangle8.close()
                rectangle8.move(to: CGPoint(x: 23, y: 3.69))
                rectangle8.addCurve(to: CGPoint(x: 24.5, y: 5.69), controlPoint1: CGPoint(x: 24, y: 4.2), controlPoint2: CGPoint(x: 24.5, y: 4.87))
                rectangle8.addCurve(to: CGPoint(x: 23, y: 7.69), controlPoint1: CGPoint(x: 24.5, y: 6.51), controlPoint2: CGPoint(x: 24, y: 7.18))
                rectangle8.addLine(to: CGPoint(x: 23, y: 3.69))
                rectangle8.close()
                context.saveGState()
                context.translateBy(x: 0, y: 0.56)
                UIColor(white: 0, alpha: 0.36).setFill()
                rectangle8.fill()
                context.restoreGState()
                
                /// Rectangle
                let rectangle9 = UIBezierPath()
                rectangle9.move(to: CGPoint(x: 2.05, y: 0))
                rectangle9.addLine(to: CGPoint(x: 15.95, y: 0))
                rectangle9.addCurve(to: CGPoint(x: 17.18, y: 0.21), controlPoint1: CGPoint(x: 16.66, y: 0), controlPoint2: CGPoint(x: 16.92, y: 0.07))
                rectangle9.addCurve(to: CGPoint(x: 17.79, y: 0.82), controlPoint1: CGPoint(x: 17.44, y: 0.35), controlPoint2: CGPoint(x: 17.65, y: 0.56))
                rectangle9.addCurve(to: CGPoint(x: 18, y: 2.05), controlPoint1: CGPoint(x: 17.93, y: 1.08), controlPoint2: CGPoint(x: 18, y: 1.34))
                rectangle9.addLine(to: CGPoint(x: 18, y: 5.62))
                rectangle9.addCurve(to: CGPoint(x: 17.79, y: 6.85), controlPoint1: CGPoint(x: 18, y: 6.33), controlPoint2: CGPoint(x: 17.93, y: 6.59))
                rectangle9.addCurve(to: CGPoint(x: 17.18, y: 7.45), controlPoint1: CGPoint(x: 17.65, y: 7.11), controlPoint2: CGPoint(x: 17.44, y: 7.31))
                rectangle9.addCurve(to: CGPoint(x: 15.95, y: 7.67), controlPoint1: CGPoint(x: 16.92, y: 7.59), controlPoint2: CGPoint(x: 16.66, y: 7.67))
                rectangle9.addLine(to: CGPoint(x: 2.05, y: 7.67))
                rectangle9.addCurve(to: CGPoint(x: 0.82, y: 7.45), controlPoint1: CGPoint(x: 1.34, y: 7.67), controlPoint2: CGPoint(x: 1.08, y: 7.59))
                rectangle9.addCurve(to: CGPoint(x: 0.21, y: 6.85), controlPoint1: CGPoint(x: 0.56, y: 7.31), controlPoint2: CGPoint(x: 0.35, y: 7.11))
                rectangle9.addCurve(to: CGPoint(x: 0, y: 5.62), controlPoint1: CGPoint(x: 0.07, y: 6.59), controlPoint2: CGPoint(x: 0, y: 6.33))
                rectangle9.addLine(to: CGPoint(x: 0, y: 2.05))
                rectangle9.addCurve(to: CGPoint(x: 0.21, y: 0.82), controlPoint1: CGPoint(x: 0, y: 1.34), controlPoint2: CGPoint(x: 0.07, y: 1.08))
                rectangle9.addCurve(to: CGPoint(x: 0.82, y: 0.21), controlPoint1: CGPoint(x: 0.35, y: 0.56), controlPoint2: CGPoint(x: 0.56, y: 0.35))
                rectangle9.addCurve(to: CGPoint(x: 2.05, y: 0), controlPoint1: CGPoint(x: 1.08, y: 0.07), controlPoint2: CGPoint(x: 1.34, y: 0))
                rectangle9.close()
                context.saveGState()
                context.translateBy(x: 2, y: 2.48)
                rectangle9.usesEvenOddFillRule = true
                UIColor.black.setFill()
                rectangle9.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Combined Shape
            let combinedShape = UIBezierPath()
            combinedShape.move(to: CGPoint(x: 1.39, y: 6.7))
            combinedShape.addLine(to: CGPoint(x: 1.61, y: 6.7))
            combinedShape.addCurve(to: CGPoint(x: 2.39, y: 6.86), controlPoint1: CGPoint(x: 1.97, y: 6.7), controlPoint2: CGPoint(x: 2.19, y: 6.76))
            combinedShape.addCurve(to: CGPoint(x: 2.84, y: 7.31), controlPoint1: CGPoint(x: 2.58, y: 6.96), controlPoint2: CGPoint(x: 2.74, y: 7.12))
            combinedShape.addCurve(to: CGPoint(x: 3, y: 8.09), controlPoint1: CGPoint(x: 2.94, y: 7.51), controlPoint2: CGPoint(x: 3, y: 7.73))
            combinedShape.addLine(to: CGPoint(x: 3, y: 9.31))
            combinedShape.addCurve(to: CGPoint(x: 2.84, y: 10.09), controlPoint1: CGPoint(x: 3, y: 9.67), controlPoint2: CGPoint(x: 2.94, y: 9.89))
            combinedShape.addCurve(to: CGPoint(x: 2.39, y: 10.54), controlPoint1: CGPoint(x: 2.74, y: 10.28), controlPoint2: CGPoint(x: 2.58, y: 10.44))
            combinedShape.addCurve(to: CGPoint(x: 1.61, y: 10.7), controlPoint1: CGPoint(x: 2.19, y: 10.64), controlPoint2: CGPoint(x: 1.97, y: 10.7))
            combinedShape.addLine(to: CGPoint(x: 1.39, y: 10.7))
            combinedShape.addCurve(to: CGPoint(x: 0.61, y: 10.54), controlPoint1: CGPoint(x: 1.03, y: 10.7), controlPoint2: CGPoint(x: 0.81, y: 10.64))
            combinedShape.addCurve(to: CGPoint(x: 0.16, y: 10.09), controlPoint1: CGPoint(x: 0.42, y: 10.44), controlPoint2: CGPoint(x: 0.26, y: 10.28))
            combinedShape.addCurve(to: CGPoint(x: 0, y: 9.31), controlPoint1: CGPoint(x: 0.06, y: 9.89), controlPoint2: CGPoint(x: 0, y: 9.67))
            combinedShape.addLine(to: CGPoint(x: 0, y: 8.09))
            combinedShape.addCurve(to: CGPoint(x: 0.16, y: 7.31), controlPoint1: CGPoint(x: 0, y: 7.73), controlPoint2: CGPoint(x: 0.06, y: 7.51))
            combinedShape.addCurve(to: CGPoint(x: 0.61, y: 6.86), controlPoint1: CGPoint(x: 0.26, y: 7.12), controlPoint2: CGPoint(x: 0.42, y: 6.96))
            combinedShape.addCurve(to: CGPoint(x: 1.39, y: 6.7), controlPoint1: CGPoint(x: 0.81, y: 6.76), controlPoint2: CGPoint(x: 1.03, y: 6.7))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 6.19, y: 4.7))
            combinedShape.addLine(to: CGPoint(x: 6.41, y: 4.7))
            combinedShape.addCurve(to: CGPoint(x: 7.19, y: 4.86), controlPoint1: CGPoint(x: 6.77, y: 4.7), controlPoint2: CGPoint(x: 6.99, y: 4.76))
            combinedShape.addCurve(to: CGPoint(x: 7.64, y: 5.31), controlPoint1: CGPoint(x: 7.38, y: 4.96), controlPoint2: CGPoint(x: 7.54, y: 5.12))
            combinedShape.addCurve(to: CGPoint(x: 7.8, y: 6.09), controlPoint1: CGPoint(x: 7.74, y: 5.51), controlPoint2: CGPoint(x: 7.8, y: 5.73))
            combinedShape.addLine(to: CGPoint(x: 7.8, y: 9.31))
            combinedShape.addCurve(to: CGPoint(x: 7.64, y: 10.09), controlPoint1: CGPoint(x: 7.8, y: 9.67), controlPoint2: CGPoint(x: 7.74, y: 9.89))
            combinedShape.addCurve(to: CGPoint(x: 7.19, y: 10.54), controlPoint1: CGPoint(x: 7.54, y: 10.28), controlPoint2: CGPoint(x: 7.38, y: 10.44))
            combinedShape.addCurve(to: CGPoint(x: 6.41, y: 10.7), controlPoint1: CGPoint(x: 6.99, y: 10.64), controlPoint2: CGPoint(x: 6.77, y: 10.7))
            combinedShape.addLine(to: CGPoint(x: 6.19, y: 10.7))
            combinedShape.addCurve(to: CGPoint(x: 5.41, y: 10.54), controlPoint1: CGPoint(x: 5.83, y: 10.7), controlPoint2: CGPoint(x: 5.61, y: 10.64))
            combinedShape.addCurve(to: CGPoint(x: 4.96, y: 10.09), controlPoint1: CGPoint(x: 5.22, y: 10.44), controlPoint2: CGPoint(x: 5.06, y: 10.28))
            combinedShape.addCurve(to: CGPoint(x: 4.8, y: 9.31), controlPoint1: CGPoint(x: 4.86, y: 9.89), controlPoint2: CGPoint(x: 4.8, y: 9.67))
            combinedShape.addLine(to: CGPoint(x: 4.8, y: 6.09))
            combinedShape.addCurve(to: CGPoint(x: 4.96, y: 5.31), controlPoint1: CGPoint(x: 4.8, y: 5.73), controlPoint2: CGPoint(x: 4.86, y: 5.51))
            combinedShape.addCurve(to: CGPoint(x: 5.41, y: 4.86), controlPoint1: CGPoint(x: 5.06, y: 5.12), controlPoint2: CGPoint(x: 5.22, y: 4.96))
            combinedShape.addCurve(to: CGPoint(x: 6.19, y: 4.7), controlPoint1: CGPoint(x: 5.61, y: 4.76), controlPoint2: CGPoint(x: 5.83, y: 4.7))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 10.79, y: 2.4))
            combinedShape.addLine(to: CGPoint(x: 11.01, y: 2.4))
            combinedShape.addCurve(to: CGPoint(x: 11.79, y: 2.56), controlPoint1: CGPoint(x: 11.37, y: 2.4), controlPoint2: CGPoint(x: 11.59, y: 2.46))
            combinedShape.addCurve(to: CGPoint(x: 12.24, y: 3.01), controlPoint1: CGPoint(x: 11.98, y: 2.66), controlPoint2: CGPoint(x: 12.14, y: 2.82))
            combinedShape.addCurve(to: CGPoint(x: 12.4, y: 3.79), controlPoint1: CGPoint(x: 12.34, y: 3.21), controlPoint2: CGPoint(x: 12.4, y: 3.43))
            combinedShape.addLine(to: CGPoint(x: 12.4, y: 9.31))
            combinedShape.addCurve(to: CGPoint(x: 12.24, y: 10.09), controlPoint1: CGPoint(x: 12.4, y: 9.67), controlPoint2: CGPoint(x: 12.34, y: 9.89))
            combinedShape.addCurve(to: CGPoint(x: 11.79, y: 10.54), controlPoint1: CGPoint(x: 12.14, y: 10.28), controlPoint2: CGPoint(x: 11.98, y: 10.44))
            combinedShape.addCurve(to: CGPoint(x: 11.01, y: 10.7), controlPoint1: CGPoint(x: 11.59, y: 10.64), controlPoint2: CGPoint(x: 11.37, y: 10.7))
            combinedShape.addLine(to: CGPoint(x: 10.79, y: 10.7))
            combinedShape.addCurve(to: CGPoint(x: 10.01, y: 10.54), controlPoint1: CGPoint(x: 10.43, y: 10.7), controlPoint2: CGPoint(x: 10.21, y: 10.64))
            combinedShape.addCurve(to: CGPoint(x: 9.56, y: 10.09), controlPoint1: CGPoint(x: 9.82, y: 10.44), controlPoint2: CGPoint(x: 9.66, y: 10.28))
            combinedShape.addCurve(to: CGPoint(x: 9.4, y: 9.31), controlPoint1: CGPoint(x: 9.46, y: 9.89), controlPoint2: CGPoint(x: 9.4, y: 9.67))
            combinedShape.addLine(to: CGPoint(x: 9.4, y: 3.79))
            combinedShape.addCurve(to: CGPoint(x: 9.56, y: 3.01), controlPoint1: CGPoint(x: 9.4, y: 3.43), controlPoint2: CGPoint(x: 9.46, y: 3.21))
            combinedShape.addCurve(to: CGPoint(x: 10.01, y: 2.56), controlPoint1: CGPoint(x: 9.66, y: 2.82), controlPoint2: CGPoint(x: 9.82, y: 2.66))
            combinedShape.addCurve(to: CGPoint(x: 10.79, y: 2.4), controlPoint1: CGPoint(x: 10.21, y: 2.46), controlPoint2: CGPoint(x: 10.43, y: 2.4))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 15.49, y: 0))
            combinedShape.addLine(to: CGPoint(x: 15.71, y: 0))
            combinedShape.addCurve(to: CGPoint(x: 16.49, y: 0.16), controlPoint1: CGPoint(x: 16.07, y: 0), controlPoint2: CGPoint(x: 16.29, y: 0.06))
            combinedShape.addCurve(to: CGPoint(x: 16.94, y: 0.61), controlPoint1: CGPoint(x: 16.68, y: 0.26), controlPoint2: CGPoint(x: 16.84, y: 0.42))
            combinedShape.addCurve(to: CGPoint(x: 17.1, y: 1.39), controlPoint1: CGPoint(x: 17.04, y: 0.81), controlPoint2: CGPoint(x: 17.1, y: 1.03))
            combinedShape.addLine(to: CGPoint(x: 17.1, y: 9.31))
            combinedShape.addCurve(to: CGPoint(x: 16.94, y: 10.09), controlPoint1: CGPoint(x: 17.1, y: 9.67), controlPoint2: CGPoint(x: 17.04, y: 9.89))
            combinedShape.addCurve(to: CGPoint(x: 16.49, y: 10.54), controlPoint1: CGPoint(x: 16.84, y: 10.28), controlPoint2: CGPoint(x: 16.68, y: 10.44))
            combinedShape.addCurve(to: CGPoint(x: 15.71, y: 10.7), controlPoint1: CGPoint(x: 16.29, y: 10.64), controlPoint2: CGPoint(x: 16.07, y: 10.7))
            combinedShape.addLine(to: CGPoint(x: 15.49, y: 10.7))
            combinedShape.addCurve(to: CGPoint(x: 14.71, y: 10.54), controlPoint1: CGPoint(x: 15.13, y: 10.7), controlPoint2: CGPoint(x: 14.91, y: 10.64))
            combinedShape.addCurve(to: CGPoint(x: 14.26, y: 10.09), controlPoint1: CGPoint(x: 14.52, y: 10.44), controlPoint2: CGPoint(x: 14.36, y: 10.28))
            combinedShape.addCurve(to: CGPoint(x: 14.1, y: 9.31), controlPoint1: CGPoint(x: 14.16, y: 9.89), controlPoint2: CGPoint(x: 14.1, y: 9.67))
            combinedShape.addLine(to: CGPoint(x: 14.1, y: 1.39))
            combinedShape.addCurve(to: CGPoint(x: 14.26, y: 0.61), controlPoint1: CGPoint(x: 14.1, y: 1.03), controlPoint2: CGPoint(x: 14.16, y: 0.81))
            combinedShape.addCurve(to: CGPoint(x: 14.71, y: 0.16), controlPoint1: CGPoint(x: 14.36, y: 0.42), controlPoint2: CGPoint(x: 14.52, y: 0.26))
            combinedShape.addCurve(to: CGPoint(x: 15.49, y: 0), controlPoint1: CGPoint(x: 14.91, y: 0.06), controlPoint2: CGPoint(x: 15.13, y: 0))
            combinedShape.close()
            context.saveGState()
            context.translateBy(x: 0.5, y: 1.6)
            combinedShape.usesEvenOddFillRule = true
            UIColor.black.setFill()
            combinedShape.fill()
            context.restoreGState()
            
            /// Wi-Fi
            let wiFi = UIBezierPath()
            wiFi.move(to: CGPoint(x: 7.7, y: 2.3))
            wiFi.addCurve(to: CGPoint(x: 13.7, y: 4.69), controlPoint1: CGPoint(x: 9.93, y: 2.3), controlPoint2: CGPoint(x: 12.08, y: 3.16))
            wiFi.addCurve(to: CGPoint(x: 14.14, y: 4.69), controlPoint1: CGPoint(x: 13.83, y: 4.81), controlPoint2: CGPoint(x: 14.02, y: 4.81))
            wiFi.addLine(to: CGPoint(x: 15.31, y: 3.51))
            wiFi.addCurve(to: CGPoint(x: 15.4, y: 3.28), controlPoint1: CGPoint(x: 15.37, y: 3.45), controlPoint2: CGPoint(x: 15.4, y: 3.37))
            wiFi.addCurve(to: CGPoint(x: 15.3, y: 3.05), controlPoint1: CGPoint(x: 15.4, y: 3.2), controlPoint2: CGPoint(x: 15.36, y: 3.12))
            wiFi.addCurve(to: CGPoint(x: 0.1, y: 3.05), controlPoint1: CGPoint(x: 11.05, y: -1.02), controlPoint2: CGPoint(x: 4.35, y: -1.02))
            wiFi.addCurve(to: CGPoint(x: 0, y: 3.28), controlPoint1: CGPoint(x: 0.04, y: 3.12), controlPoint2: CGPoint(x: 0, y: 3.2))
            wiFi.addCurve(to: CGPoint(x: 0.09, y: 3.51), controlPoint1: CGPoint(x: -0, y: 3.37), controlPoint2: CGPoint(x: 0.03, y: 3.45))
            wiFi.addLine(to: CGPoint(x: 1.26, y: 4.69))
            wiFi.addCurve(to: CGPoint(x: 1.7, y: 4.69), controlPoint1: CGPoint(x: 1.38, y: 4.81), controlPoint2: CGPoint(x: 1.58, y: 4.81))
            wiFi.addCurve(to: CGPoint(x: 7.7, y: 2.3), controlPoint1: CGPoint(x: 3.32, y: 3.15), controlPoint2: CGPoint(x: 5.47, y: 2.3))
            wiFi.close()
            wiFi.move(to: CGPoint(x: 7.7, y: 6.12))
            wiFi.addCurve(to: CGPoint(x: 11.02, y: 7.4), controlPoint1: CGPoint(x: 8.93, y: 6.12), controlPoint2: CGPoint(x: 10.11, y: 6.58))
            wiFi.addCurve(to: CGPoint(x: 11.46, y: 7.4), controlPoint1: CGPoint(x: 11.15, y: 7.52), controlPoint2: CGPoint(x: 11.34, y: 7.52))
            wiFi.addLine(to: CGPoint(x: 12.62, y: 6.22))
            wiFi.addCurve(to: CGPoint(x: 12.72, y: 5.99), controlPoint1: CGPoint(x: 12.68, y: 6.16), controlPoint2: CGPoint(x: 12.72, y: 6.08))
            wiFi.addCurve(to: CGPoint(x: 12.62, y: 5.76), controlPoint1: CGPoint(x: 12.72, y: 5.9), controlPoint2: CGPoint(x: 12.68, y: 5.82))
            wiFi.addCurve(to: CGPoint(x: 2.78, y: 5.76), controlPoint1: CGPoint(x: 9.85, y: 3.18), controlPoint2: CGPoint(x: 5.56, y: 3.18))
            wiFi.addCurve(to: CGPoint(x: 2.69, y: 5.99), controlPoint1: CGPoint(x: 2.72, y: 5.82), controlPoint2: CGPoint(x: 2.69, y: 5.9))
            wiFi.addCurve(to: CGPoint(x: 2.78, y: 6.22), controlPoint1: CGPoint(x: 2.68, y: 6.08), controlPoint2: CGPoint(x: 2.72, y: 6.16))
            wiFi.addLine(to: CGPoint(x: 3.94, y: 7.4))
            wiFi.addCurve(to: CGPoint(x: 4.38, y: 7.4), controlPoint1: CGPoint(x: 4.06, y: 7.52), controlPoint2: CGPoint(x: 4.26, y: 7.52))
            wiFi.addCurve(to: CGPoint(x: 7.7, y: 6.12), controlPoint1: CGPoint(x: 5.29, y: 6.58), controlPoint2: CGPoint(x: 6.47, y: 6.12))
            wiFi.close()
            wiFi.move(to: CGPoint(x: 9.94, y: 8.93))
            wiFi.addCurve(to: CGPoint(x: 10.03, y: 8.7), controlPoint1: CGPoint(x: 10, y: 8.87), controlPoint2: CGPoint(x: 10.03, y: 8.79))
            wiFi.addCurve(to: CGPoint(x: 9.93, y: 8.47), controlPoint1: CGPoint(x: 10.03, y: 8.61), controlPoint2: CGPoint(x: 9.99, y: 8.53))
            wiFi.addCurve(to: CGPoint(x: 5.47, y: 8.47), controlPoint1: CGPoint(x: 8.64, y: 7.38), controlPoint2: CGPoint(x: 6.76, y: 7.38))
            wiFi.addCurve(to: CGPoint(x: 5.37, y: 8.7), controlPoint1: CGPoint(x: 5.41, y: 8.53), controlPoint2: CGPoint(x: 5.37, y: 8.61))
            wiFi.addCurve(to: CGPoint(x: 5.46, y: 8.93), controlPoint1: CGPoint(x: 5.37, y: 8.79), controlPoint2: CGPoint(x: 5.4, y: 8.87))
            wiFi.addLine(to: CGPoint(x: 7.48, y: 10.96))
            wiFi.addCurve(to: CGPoint(x: 7.7, y: 11.06), controlPoint1: CGPoint(x: 7.54, y: 11.02), controlPoint2: CGPoint(x: 7.62, y: 11.06))
            wiFi.addCurve(to: CGPoint(x: 7.92, y: 10.96), controlPoint1: CGPoint(x: 7.78, y: 11.06), controlPoint2: CGPoint(x: 7.86, y: 11.02))
            wiFi.addLine(to: CGPoint(x: 9.94, y: 8.93))
            wiFi.close()
            context.saveGState()
            context.translateBy(x: 22.6, y: 1.4)
            wiFi.usesEvenOddFillRule = true
            UIColor.black.setFill()
            wiFi.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawIPhoneXBarsStatusWithActionWhite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 377, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 377, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 377, y: resizedFrame.height / 44)
        
        /// Action
        // Warning: New symbols are not supported.
        
        /// Container
        do {
            context.saveGState()
            context.translateBy(x: 295, y: 15)
            
            /// Battery
            do {
                context.saveGState()
                context.translateBy(x: 43, y: 0.6)
                
                /// Rectangle
                let rectangle8 = UIBezierPath()
                rectangle8.move(to: CGPoint(x: 3.59, y: 1))
                rectangle8.addCurve(to: CGPoint(x: 1.9, y: 1.26), controlPoint1: CGPoint(x: 2.6, y: 1), controlPoint2: CGPoint(x: 2.26, y: 1.07))
                rectangle8.addCurve(to: CGPoint(x: 1.26, y: 1.9), controlPoint1: CGPoint(x: 1.62, y: 1.41), controlPoint2: CGPoint(x: 1.41, y: 1.62))
                rectangle8.addCurve(to: CGPoint(x: 1, y: 3.59), controlPoint1: CGPoint(x: 1.07, y: 2.26), controlPoint2: CGPoint(x: 1, y: 2.6))
                rectangle8.addLine(to: CGPoint(x: 1, y: 7.91))
                rectangle8.addCurve(to: CGPoint(x: 1.26, y: 9.6), controlPoint1: CGPoint(x: 1, y: 8.9), controlPoint2: CGPoint(x: 1.07, y: 9.24))
                rectangle8.addCurve(to: CGPoint(x: 1.9, y: 10.24), controlPoint1: CGPoint(x: 1.41, y: 9.88), controlPoint2: CGPoint(x: 1.62, y: 10.09))
                rectangle8.addCurve(to: CGPoint(x: 3.59, y: 10.5), controlPoint1: CGPoint(x: 2.26, y: 10.43), controlPoint2: CGPoint(x: 2.6, y: 10.5))
                rectangle8.addLine(to: CGPoint(x: 18.41, y: 10.5))
                rectangle8.addCurve(to: CGPoint(x: 20.1, y: 10.24), controlPoint1: CGPoint(x: 19.4, y: 10.5), controlPoint2: CGPoint(x: 19.74, y: 10.43))
                rectangle8.addCurve(to: CGPoint(x: 20.74, y: 9.6), controlPoint1: CGPoint(x: 20.38, y: 10.09), controlPoint2: CGPoint(x: 20.59, y: 9.88))
                rectangle8.addCurve(to: CGPoint(x: 21, y: 7.91), controlPoint1: CGPoint(x: 20.93, y: 9.24), controlPoint2: CGPoint(x: 21, y: 8.9))
                rectangle8.addLine(to: CGPoint(x: 21, y: 3.59))
                rectangle8.addCurve(to: CGPoint(x: 20.74, y: 1.9), controlPoint1: CGPoint(x: 21, y: 2.6), controlPoint2: CGPoint(x: 20.93, y: 2.26))
                rectangle8.addCurve(to: CGPoint(x: 20.1, y: 1.26), controlPoint1: CGPoint(x: 20.59, y: 1.62), controlPoint2: CGPoint(x: 20.38, y: 1.41))
                rectangle8.addCurve(to: CGPoint(x: 18.41, y: 1), controlPoint1: CGPoint(x: 19.74, y: 1.07), controlPoint2: CGPoint(x: 19.4, y: 1))
                rectangle8.addLine(to: CGPoint(x: 3.59, y: 1))
                rectangle8.close()
                rectangle8.move(to: CGPoint(x: 3.59, y: 0))
                rectangle8.addLine(to: CGPoint(x: 18.41, y: 0))
                rectangle8.addCurve(to: CGPoint(x: 20.57, y: 0.37), controlPoint1: CGPoint(x: 19.66, y: 0), controlPoint2: CGPoint(x: 20.11, y: 0.13))
                rectangle8.addCurve(to: CGPoint(x: 21.63, y: 1.43), controlPoint1: CGPoint(x: 21.02, y: 0.62), controlPoint2: CGPoint(x: 21.38, y: 0.98))
                rectangle8.addCurve(to: CGPoint(x: 22, y: 3.59), controlPoint1: CGPoint(x: 21.87, y: 1.89), controlPoint2: CGPoint(x: 22, y: 2.34))
                rectangle8.addLine(to: CGPoint(x: 22, y: 7.91))
                rectangle8.addCurve(to: CGPoint(x: 21.63, y: 10.07), controlPoint1: CGPoint(x: 22, y: 9.16), controlPoint2: CGPoint(x: 21.87, y: 9.61))
                rectangle8.addCurve(to: CGPoint(x: 20.57, y: 11.13), controlPoint1: CGPoint(x: 21.38, y: 10.52), controlPoint2: CGPoint(x: 21.02, y: 10.88))
                rectangle8.addCurve(to: CGPoint(x: 18.41, y: 11.5), controlPoint1: CGPoint(x: 20.11, y: 11.37), controlPoint2: CGPoint(x: 19.66, y: 11.5))
                rectangle8.addLine(to: CGPoint(x: 3.59, y: 11.5))
                rectangle8.addCurve(to: CGPoint(x: 1.43, y: 11.13), controlPoint1: CGPoint(x: 2.34, y: 11.5), controlPoint2: CGPoint(x: 1.89, y: 11.37))
                rectangle8.addCurve(to: CGPoint(x: 0.37, y: 10.07), controlPoint1: CGPoint(x: 0.98, y: 10.88), controlPoint2: CGPoint(x: 0.62, y: 10.52))
                rectangle8.addCurve(to: CGPoint(x: 0, y: 7.91), controlPoint1: CGPoint(x: 0.13, y: 9.61), controlPoint2: CGPoint(x: 0, y: 9.16))
                rectangle8.addLine(to: CGPoint(x: 0, y: 3.59))
                rectangle8.addCurve(to: CGPoint(x: 0.37, y: 1.43), controlPoint1: CGPoint(x: 0, y: 2.34), controlPoint2: CGPoint(x: 0.13, y: 1.89))
                rectangle8.addCurve(to: CGPoint(x: 1.43, y: 0.37), controlPoint1: CGPoint(x: 0.62, y: 0.98), controlPoint2: CGPoint(x: 0.98, y: 0.62))
                rectangle8.addCurve(to: CGPoint(x: 3.59, y: 0), controlPoint1: CGPoint(x: 1.89, y: 0.13), controlPoint2: CGPoint(x: 2.34, y: 0))
                rectangle8.close()
                rectangle8.move(to: CGPoint(x: 23, y: 3.69))
                rectangle8.addCurve(to: CGPoint(x: 24.5, y: 5.69), controlPoint1: CGPoint(x: 24, y: 4.2), controlPoint2: CGPoint(x: 24.5, y: 4.87))
                rectangle8.addCurve(to: CGPoint(x: 23, y: 7.69), controlPoint1: CGPoint(x: 24.5, y: 6.51), controlPoint2: CGPoint(x: 24, y: 7.18))
                rectangle8.addLine(to: CGPoint(x: 23, y: 3.69))
                rectangle8.close()
                context.saveGState()
                context.translateBy(x: 0, y: 0.56)
                UIColor(white: 1, alpha: 0.36).setFill()
                rectangle8.fill()
                context.restoreGState()
                
                /// Rectangle
                let rectangle9 = UIBezierPath()
                rectangle9.move(to: CGPoint(x: 2.05, y: 0))
                rectangle9.addLine(to: CGPoint(x: 15.95, y: 0))
                rectangle9.addCurve(to: CGPoint(x: 17.18, y: 0.21), controlPoint1: CGPoint(x: 16.66, y: 0), controlPoint2: CGPoint(x: 16.92, y: 0.07))
                rectangle9.addCurve(to: CGPoint(x: 17.79, y: 0.82), controlPoint1: CGPoint(x: 17.44, y: 0.35), controlPoint2: CGPoint(x: 17.65, y: 0.56))
                rectangle9.addCurve(to: CGPoint(x: 18, y: 2.05), controlPoint1: CGPoint(x: 17.93, y: 1.08), controlPoint2: CGPoint(x: 18, y: 1.34))
                rectangle9.addLine(to: CGPoint(x: 18, y: 5.62))
                rectangle9.addCurve(to: CGPoint(x: 17.79, y: 6.85), controlPoint1: CGPoint(x: 18, y: 6.33), controlPoint2: CGPoint(x: 17.93, y: 6.59))
                rectangle9.addCurve(to: CGPoint(x: 17.18, y: 7.45), controlPoint1: CGPoint(x: 17.65, y: 7.11), controlPoint2: CGPoint(x: 17.44, y: 7.31))
                rectangle9.addCurve(to: CGPoint(x: 15.95, y: 7.67), controlPoint1: CGPoint(x: 16.92, y: 7.59), controlPoint2: CGPoint(x: 16.66, y: 7.67))
                rectangle9.addLine(to: CGPoint(x: 2.05, y: 7.67))
                rectangle9.addCurve(to: CGPoint(x: 0.82, y: 7.45), controlPoint1: CGPoint(x: 1.34, y: 7.67), controlPoint2: CGPoint(x: 1.08, y: 7.59))
                rectangle9.addCurve(to: CGPoint(x: 0.21, y: 6.85), controlPoint1: CGPoint(x: 0.56, y: 7.31), controlPoint2: CGPoint(x: 0.35, y: 7.11))
                rectangle9.addCurve(to: CGPoint(x: 0, y: 5.62), controlPoint1: CGPoint(x: 0.07, y: 6.59), controlPoint2: CGPoint(x: 0, y: 6.33))
                rectangle9.addLine(to: CGPoint(x: 0, y: 2.05))
                rectangle9.addCurve(to: CGPoint(x: 0.21, y: 0.82), controlPoint1: CGPoint(x: 0, y: 1.34), controlPoint2: CGPoint(x: 0.07, y: 1.08))
                rectangle9.addCurve(to: CGPoint(x: 0.82, y: 0.21), controlPoint1: CGPoint(x: 0.35, y: 0.56), controlPoint2: CGPoint(x: 0.56, y: 0.35))
                rectangle9.addCurve(to: CGPoint(x: 2.05, y: 0), controlPoint1: CGPoint(x: 1.08, y: 0.07), controlPoint2: CGPoint(x: 1.34, y: 0))
                rectangle9.close()
                context.saveGState()
                context.translateBy(x: 2, y: 2.48)
                rectangle9.usesEvenOddFillRule = true
                UIColor.white.setFill()
                rectangle9.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Combined Shape
            let combinedShape = UIBezierPath()
            combinedShape.move(to: CGPoint(x: 1.39, y: 6.7))
            combinedShape.addLine(to: CGPoint(x: 1.61, y: 6.7))
            combinedShape.addCurve(to: CGPoint(x: 2.39, y: 6.86), controlPoint1: CGPoint(x: 1.97, y: 6.7), controlPoint2: CGPoint(x: 2.19, y: 6.76))
            combinedShape.addCurve(to: CGPoint(x: 2.84, y: 7.31), controlPoint1: CGPoint(x: 2.58, y: 6.96), controlPoint2: CGPoint(x: 2.74, y: 7.12))
            combinedShape.addCurve(to: CGPoint(x: 3, y: 8.09), controlPoint1: CGPoint(x: 2.94, y: 7.51), controlPoint2: CGPoint(x: 3, y: 7.73))
            combinedShape.addLine(to: CGPoint(x: 3, y: 9.31))
            combinedShape.addCurve(to: CGPoint(x: 2.84, y: 10.09), controlPoint1: CGPoint(x: 3, y: 9.67), controlPoint2: CGPoint(x: 2.94, y: 9.89))
            combinedShape.addCurve(to: CGPoint(x: 2.39, y: 10.54), controlPoint1: CGPoint(x: 2.74, y: 10.28), controlPoint2: CGPoint(x: 2.58, y: 10.44))
            combinedShape.addCurve(to: CGPoint(x: 1.61, y: 10.7), controlPoint1: CGPoint(x: 2.19, y: 10.64), controlPoint2: CGPoint(x: 1.97, y: 10.7))
            combinedShape.addLine(to: CGPoint(x: 1.39, y: 10.7))
            combinedShape.addCurve(to: CGPoint(x: 0.61, y: 10.54), controlPoint1: CGPoint(x: 1.03, y: 10.7), controlPoint2: CGPoint(x: 0.81, y: 10.64))
            combinedShape.addCurve(to: CGPoint(x: 0.16, y: 10.09), controlPoint1: CGPoint(x: 0.42, y: 10.44), controlPoint2: CGPoint(x: 0.26, y: 10.28))
            combinedShape.addCurve(to: CGPoint(x: 0, y: 9.31), controlPoint1: CGPoint(x: 0.06, y: 9.89), controlPoint2: CGPoint(x: 0, y: 9.67))
            combinedShape.addLine(to: CGPoint(x: 0, y: 8.09))
            combinedShape.addCurve(to: CGPoint(x: 0.16, y: 7.31), controlPoint1: CGPoint(x: 0, y: 7.73), controlPoint2: CGPoint(x: 0.06, y: 7.51))
            combinedShape.addCurve(to: CGPoint(x: 0.61, y: 6.86), controlPoint1: CGPoint(x: 0.26, y: 7.12), controlPoint2: CGPoint(x: 0.42, y: 6.96))
            combinedShape.addCurve(to: CGPoint(x: 1.39, y: 6.7), controlPoint1: CGPoint(x: 0.81, y: 6.76), controlPoint2: CGPoint(x: 1.03, y: 6.7))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 6.19, y: 4.7))
            combinedShape.addLine(to: CGPoint(x: 6.41, y: 4.7))
            combinedShape.addCurve(to: CGPoint(x: 7.19, y: 4.86), controlPoint1: CGPoint(x: 6.77, y: 4.7), controlPoint2: CGPoint(x: 6.99, y: 4.76))
            combinedShape.addCurve(to: CGPoint(x: 7.64, y: 5.31), controlPoint1: CGPoint(x: 7.38, y: 4.96), controlPoint2: CGPoint(x: 7.54, y: 5.12))
            combinedShape.addCurve(to: CGPoint(x: 7.8, y: 6.09), controlPoint1: CGPoint(x: 7.74, y: 5.51), controlPoint2: CGPoint(x: 7.8, y: 5.73))
            combinedShape.addLine(to: CGPoint(x: 7.8, y: 9.31))
            combinedShape.addCurve(to: CGPoint(x: 7.64, y: 10.09), controlPoint1: CGPoint(x: 7.8, y: 9.67), controlPoint2: CGPoint(x: 7.74, y: 9.89))
            combinedShape.addCurve(to: CGPoint(x: 7.19, y: 10.54), controlPoint1: CGPoint(x: 7.54, y: 10.28), controlPoint2: CGPoint(x: 7.38, y: 10.44))
            combinedShape.addCurve(to: CGPoint(x: 6.41, y: 10.7), controlPoint1: CGPoint(x: 6.99, y: 10.64), controlPoint2: CGPoint(x: 6.77, y: 10.7))
            combinedShape.addLine(to: CGPoint(x: 6.19, y: 10.7))
            combinedShape.addCurve(to: CGPoint(x: 5.41, y: 10.54), controlPoint1: CGPoint(x: 5.83, y: 10.7), controlPoint2: CGPoint(x: 5.61, y: 10.64))
            combinedShape.addCurve(to: CGPoint(x: 4.96, y: 10.09), controlPoint1: CGPoint(x: 5.22, y: 10.44), controlPoint2: CGPoint(x: 5.06, y: 10.28))
            combinedShape.addCurve(to: CGPoint(x: 4.8, y: 9.31), controlPoint1: CGPoint(x: 4.86, y: 9.89), controlPoint2: CGPoint(x: 4.8, y: 9.67))
            combinedShape.addLine(to: CGPoint(x: 4.8, y: 6.09))
            combinedShape.addCurve(to: CGPoint(x: 4.96, y: 5.31), controlPoint1: CGPoint(x: 4.8, y: 5.73), controlPoint2: CGPoint(x: 4.86, y: 5.51))
            combinedShape.addCurve(to: CGPoint(x: 5.41, y: 4.86), controlPoint1: CGPoint(x: 5.06, y: 5.12), controlPoint2: CGPoint(x: 5.22, y: 4.96))
            combinedShape.addCurve(to: CGPoint(x: 6.19, y: 4.7), controlPoint1: CGPoint(x: 5.61, y: 4.76), controlPoint2: CGPoint(x: 5.83, y: 4.7))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 10.79, y: 2.4))
            combinedShape.addLine(to: CGPoint(x: 11.01, y: 2.4))
            combinedShape.addCurve(to: CGPoint(x: 11.79, y: 2.56), controlPoint1: CGPoint(x: 11.37, y: 2.4), controlPoint2: CGPoint(x: 11.59, y: 2.46))
            combinedShape.addCurve(to: CGPoint(x: 12.24, y: 3.01), controlPoint1: CGPoint(x: 11.98, y: 2.66), controlPoint2: CGPoint(x: 12.14, y: 2.82))
            combinedShape.addCurve(to: CGPoint(x: 12.4, y: 3.79), controlPoint1: CGPoint(x: 12.34, y: 3.21), controlPoint2: CGPoint(x: 12.4, y: 3.43))
            combinedShape.addLine(to: CGPoint(x: 12.4, y: 9.31))
            combinedShape.addCurve(to: CGPoint(x: 12.24, y: 10.09), controlPoint1: CGPoint(x: 12.4, y: 9.67), controlPoint2: CGPoint(x: 12.34, y: 9.89))
            combinedShape.addCurve(to: CGPoint(x: 11.79, y: 10.54), controlPoint1: CGPoint(x: 12.14, y: 10.28), controlPoint2: CGPoint(x: 11.98, y: 10.44))
            combinedShape.addCurve(to: CGPoint(x: 11.01, y: 10.7), controlPoint1: CGPoint(x: 11.59, y: 10.64), controlPoint2: CGPoint(x: 11.37, y: 10.7))
            combinedShape.addLine(to: CGPoint(x: 10.79, y: 10.7))
            combinedShape.addCurve(to: CGPoint(x: 10.01, y: 10.54), controlPoint1: CGPoint(x: 10.43, y: 10.7), controlPoint2: CGPoint(x: 10.21, y: 10.64))
            combinedShape.addCurve(to: CGPoint(x: 9.56, y: 10.09), controlPoint1: CGPoint(x: 9.82, y: 10.44), controlPoint2: CGPoint(x: 9.66, y: 10.28))
            combinedShape.addCurve(to: CGPoint(x: 9.4, y: 9.31), controlPoint1: CGPoint(x: 9.46, y: 9.89), controlPoint2: CGPoint(x: 9.4, y: 9.67))
            combinedShape.addLine(to: CGPoint(x: 9.4, y: 3.79))
            combinedShape.addCurve(to: CGPoint(x: 9.56, y: 3.01), controlPoint1: CGPoint(x: 9.4, y: 3.43), controlPoint2: CGPoint(x: 9.46, y: 3.21))
            combinedShape.addCurve(to: CGPoint(x: 10.01, y: 2.56), controlPoint1: CGPoint(x: 9.66, y: 2.82), controlPoint2: CGPoint(x: 9.82, y: 2.66))
            combinedShape.addCurve(to: CGPoint(x: 10.79, y: 2.4), controlPoint1: CGPoint(x: 10.21, y: 2.46), controlPoint2: CGPoint(x: 10.43, y: 2.4))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 15.49, y: 0))
            combinedShape.addLine(to: CGPoint(x: 15.71, y: 0))
            combinedShape.addCurve(to: CGPoint(x: 16.49, y: 0.16), controlPoint1: CGPoint(x: 16.07, y: 0), controlPoint2: CGPoint(x: 16.29, y: 0.06))
            combinedShape.addCurve(to: CGPoint(x: 16.94, y: 0.61), controlPoint1: CGPoint(x: 16.68, y: 0.26), controlPoint2: CGPoint(x: 16.84, y: 0.42))
            combinedShape.addCurve(to: CGPoint(x: 17.1, y: 1.39), controlPoint1: CGPoint(x: 17.04, y: 0.81), controlPoint2: CGPoint(x: 17.1, y: 1.03))
            combinedShape.addLine(to: CGPoint(x: 17.1, y: 9.31))
            combinedShape.addCurve(to: CGPoint(x: 16.94, y: 10.09), controlPoint1: CGPoint(x: 17.1, y: 9.67), controlPoint2: CGPoint(x: 17.04, y: 9.89))
            combinedShape.addCurve(to: CGPoint(x: 16.49, y: 10.54), controlPoint1: CGPoint(x: 16.84, y: 10.28), controlPoint2: CGPoint(x: 16.68, y: 10.44))
            combinedShape.addCurve(to: CGPoint(x: 15.71, y: 10.7), controlPoint1: CGPoint(x: 16.29, y: 10.64), controlPoint2: CGPoint(x: 16.07, y: 10.7))
            combinedShape.addLine(to: CGPoint(x: 15.49, y: 10.7))
            combinedShape.addCurve(to: CGPoint(x: 14.71, y: 10.54), controlPoint1: CGPoint(x: 15.13, y: 10.7), controlPoint2: CGPoint(x: 14.91, y: 10.64))
            combinedShape.addCurve(to: CGPoint(x: 14.26, y: 10.09), controlPoint1: CGPoint(x: 14.52, y: 10.44), controlPoint2: CGPoint(x: 14.36, y: 10.28))
            combinedShape.addCurve(to: CGPoint(x: 14.1, y: 9.31), controlPoint1: CGPoint(x: 14.16, y: 9.89), controlPoint2: CGPoint(x: 14.1, y: 9.67))
            combinedShape.addLine(to: CGPoint(x: 14.1, y: 1.39))
            combinedShape.addCurve(to: CGPoint(x: 14.26, y: 0.61), controlPoint1: CGPoint(x: 14.1, y: 1.03), controlPoint2: CGPoint(x: 14.16, y: 0.81))
            combinedShape.addCurve(to: CGPoint(x: 14.71, y: 0.16), controlPoint1: CGPoint(x: 14.36, y: 0.42), controlPoint2: CGPoint(x: 14.52, y: 0.26))
            combinedShape.addCurve(to: CGPoint(x: 15.49, y: 0), controlPoint1: CGPoint(x: 14.91, y: 0.06), controlPoint2: CGPoint(x: 15.13, y: 0))
            combinedShape.close()
            context.saveGState()
            context.translateBy(x: 0.5, y: 1.6)
            combinedShape.usesEvenOddFillRule = true
            UIColor.white.setFill()
            combinedShape.fill()
            context.restoreGState()
            
            /// Wi-Fi
            let wiFi = UIBezierPath()
            wiFi.move(to: CGPoint(x: 7.7, y: 2.3))
            wiFi.addCurve(to: CGPoint(x: 13.7, y: 4.69), controlPoint1: CGPoint(x: 9.93, y: 2.3), controlPoint2: CGPoint(x: 12.08, y: 3.16))
            wiFi.addCurve(to: CGPoint(x: 14.14, y: 4.69), controlPoint1: CGPoint(x: 13.83, y: 4.81), controlPoint2: CGPoint(x: 14.02, y: 4.81))
            wiFi.addLine(to: CGPoint(x: 15.31, y: 3.51))
            wiFi.addCurve(to: CGPoint(x: 15.4, y: 3.28), controlPoint1: CGPoint(x: 15.37, y: 3.45), controlPoint2: CGPoint(x: 15.4, y: 3.37))
            wiFi.addCurve(to: CGPoint(x: 15.3, y: 3.05), controlPoint1: CGPoint(x: 15.4, y: 3.2), controlPoint2: CGPoint(x: 15.36, y: 3.12))
            wiFi.addCurve(to: CGPoint(x: 0.1, y: 3.05), controlPoint1: CGPoint(x: 11.05, y: -1.02), controlPoint2: CGPoint(x: 4.35, y: -1.02))
            wiFi.addCurve(to: CGPoint(x: 0, y: 3.28), controlPoint1: CGPoint(x: 0.04, y: 3.12), controlPoint2: CGPoint(x: 0, y: 3.2))
            wiFi.addCurve(to: CGPoint(x: 0.09, y: 3.51), controlPoint1: CGPoint(x: -0, y: 3.37), controlPoint2: CGPoint(x: 0.03, y: 3.45))
            wiFi.addLine(to: CGPoint(x: 1.26, y: 4.69))
            wiFi.addCurve(to: CGPoint(x: 1.7, y: 4.69), controlPoint1: CGPoint(x: 1.38, y: 4.81), controlPoint2: CGPoint(x: 1.58, y: 4.81))
            wiFi.addCurve(to: CGPoint(x: 7.7, y: 2.3), controlPoint1: CGPoint(x: 3.32, y: 3.15), controlPoint2: CGPoint(x: 5.47, y: 2.3))
            wiFi.close()
            wiFi.move(to: CGPoint(x: 7.7, y: 6.12))
            wiFi.addCurve(to: CGPoint(x: 11.02, y: 7.4), controlPoint1: CGPoint(x: 8.93, y: 6.12), controlPoint2: CGPoint(x: 10.11, y: 6.58))
            wiFi.addCurve(to: CGPoint(x: 11.46, y: 7.4), controlPoint1: CGPoint(x: 11.15, y: 7.52), controlPoint2: CGPoint(x: 11.34, y: 7.52))
            wiFi.addLine(to: CGPoint(x: 12.62, y: 6.22))
            wiFi.addCurve(to: CGPoint(x: 12.72, y: 5.99), controlPoint1: CGPoint(x: 12.68, y: 6.16), controlPoint2: CGPoint(x: 12.72, y: 6.08))
            wiFi.addCurve(to: CGPoint(x: 12.62, y: 5.76), controlPoint1: CGPoint(x: 12.72, y: 5.9), controlPoint2: CGPoint(x: 12.68, y: 5.82))
            wiFi.addCurve(to: CGPoint(x: 2.78, y: 5.76), controlPoint1: CGPoint(x: 9.85, y: 3.18), controlPoint2: CGPoint(x: 5.56, y: 3.18))
            wiFi.addCurve(to: CGPoint(x: 2.69, y: 5.99), controlPoint1: CGPoint(x: 2.72, y: 5.82), controlPoint2: CGPoint(x: 2.69, y: 5.9))
            wiFi.addCurve(to: CGPoint(x: 2.78, y: 6.22), controlPoint1: CGPoint(x: 2.68, y: 6.08), controlPoint2: CGPoint(x: 2.72, y: 6.16))
            wiFi.addLine(to: CGPoint(x: 3.94, y: 7.4))
            wiFi.addCurve(to: CGPoint(x: 4.38, y: 7.4), controlPoint1: CGPoint(x: 4.06, y: 7.52), controlPoint2: CGPoint(x: 4.26, y: 7.52))
            wiFi.addCurve(to: CGPoint(x: 7.7, y: 6.12), controlPoint1: CGPoint(x: 5.29, y: 6.58), controlPoint2: CGPoint(x: 6.47, y: 6.12))
            wiFi.close()
            wiFi.move(to: CGPoint(x: 9.94, y: 8.93))
            wiFi.addCurve(to: CGPoint(x: 10.03, y: 8.7), controlPoint1: CGPoint(x: 10, y: 8.87), controlPoint2: CGPoint(x: 10.03, y: 8.79))
            wiFi.addCurve(to: CGPoint(x: 9.93, y: 8.47), controlPoint1: CGPoint(x: 10.03, y: 8.61), controlPoint2: CGPoint(x: 9.99, y: 8.53))
            wiFi.addCurve(to: CGPoint(x: 5.47, y: 8.47), controlPoint1: CGPoint(x: 8.64, y: 7.38), controlPoint2: CGPoint(x: 6.76, y: 7.38))
            wiFi.addCurve(to: CGPoint(x: 5.37, y: 8.7), controlPoint1: CGPoint(x: 5.41, y: 8.53), controlPoint2: CGPoint(x: 5.37, y: 8.61))
            wiFi.addCurve(to: CGPoint(x: 5.46, y: 8.93), controlPoint1: CGPoint(x: 5.37, y: 8.79), controlPoint2: CGPoint(x: 5.4, y: 8.87))
            wiFi.addLine(to: CGPoint(x: 7.48, y: 10.96))
            wiFi.addCurve(to: CGPoint(x: 7.7, y: 11.06), controlPoint1: CGPoint(x: 7.54, y: 11.02), controlPoint2: CGPoint(x: 7.62, y: 11.06))
            wiFi.addCurve(to: CGPoint(x: 7.92, y: 10.96), controlPoint1: CGPoint(x: 7.78, y: 11.06), controlPoint2: CGPoint(x: 7.86, y: 11.02))
            wiFi.addLine(to: CGPoint(x: 9.94, y: 8.93))
            wiFi.close()
            context.saveGState()
            context.translateBy(x: 22.6, y: 1.4)
            wiFi.usesEvenOddFillRule = true
            UIColor.white.setFill()
            wiFi.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsStatusDefault(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 20)
        
        /// Right
        do {
            context.saveGState()
            context.translateBy(x: 193, y: 0)
            
            /// Battery
            do {
                context.saveGState()
                context.translateBy(x: 150, y: 4)
                
                /// Stroke
                let stroke = UIBezierPath()
                stroke.move(to: CGPoint(x: 21.5, y: 0))
                stroke.addCurve(to: CGPoint(x: 24, y: 2.5), controlPoint1: CGPoint(x: 23.02, y: 0), controlPoint2: CGPoint(x: 24, y: 0.98))
                stroke.addLine(to: CGPoint(x: 24, y: 9))
                stroke.addCurve(to: CGPoint(x: 21.5, y: 11.5), controlPoint1: CGPoint(x: 24, y: 10.52), controlPoint2: CGPoint(x: 23.02, y: 11.5))
                stroke.addLine(to: CGPoint(x: 2.5, y: 11.5))
                stroke.addCurve(to: CGPoint(x: 0, y: 9), controlPoint1: CGPoint(x: 0.98, y: 11.5), controlPoint2: CGPoint(x: 0, y: 10.52))
                stroke.addLine(to: CGPoint(x: 0, y: 2.5))
                stroke.addCurve(to: CGPoint(x: 2.5, y: 0), controlPoint1: CGPoint(x: 0, y: 0.98), controlPoint2: CGPoint(x: 0.98, y: 0))
                stroke.addLine(to: CGPoint(x: 21.5, y: 0))
                stroke.close()
                stroke.move(to: CGPoint(x: 21.4, y: 1))
                stroke.addLine(to: CGPoint(x: 2.6, y: 1))
                stroke.addCurve(to: CGPoint(x: 1, y: 2.6), controlPoint1: CGPoint(x: 1.63, y: 1), controlPoint2: CGPoint(x: 1, y: 1.63))
                stroke.addLine(to: CGPoint(x: 1, y: 8.9))
                stroke.addCurve(to: CGPoint(x: 2.6, y: 10.5), controlPoint1: CGPoint(x: 1, y: 9.87), controlPoint2: CGPoint(x: 1.63, y: 10.5))
                stroke.addLine(to: CGPoint(x: 21.4, y: 10.5))
                stroke.addCurve(to: CGPoint(x: 23, y: 8.9), controlPoint1: CGPoint(x: 22.37, y: 10.5), controlPoint2: CGPoint(x: 23, y: 9.87))
                stroke.addLine(to: CGPoint(x: 23, y: 2.6))
                stroke.addCurve(to: CGPoint(x: 21.4, y: 1), controlPoint1: CGPoint(x: 23, y: 1.63), controlPoint2: CGPoint(x: 22.37, y: 1))
                stroke.close()
                stroke.move(to: CGPoint(x: 25, y: 3.75))
                stroke.addCurve(to: CGPoint(x: 26.5, y: 5.75), controlPoint1: CGPoint(x: 26, y: 3.92), controlPoint2: CGPoint(x: 26.5, y: 4.58))
                stroke.addCurve(to: CGPoint(x: 25, y: 7.75), controlPoint1: CGPoint(x: 26.5, y: 6.92), controlPoint2: CGPoint(x: 26, y: 7.58))
                stroke.addLine(to: CGPoint(x: 25, y: 3.75))
                stroke.close()
                context.saveGState()
                context.setAlpha(0.4)
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    context.translateBy(x: 0, y: 0.5)
                    stroke.usesEvenOddFillRule = true
                    UIColor.black.setFill()
                    stroke.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                
                /// Path
                let path = UIBezierPath()
                path.move(to: CGPoint(x: 19, y: 0))
                path.addCurve(to: CGPoint(x: 20, y: 1), controlPoint1: CGPoint(x: 19.61, y: 0), controlPoint2: CGPoint(x: 20, y: 0.39))
                path.addLine(to: CGPoint(x: 20, y: 6.5))
                path.addCurve(to: CGPoint(x: 19, y: 7.5), controlPoint1: CGPoint(x: 20, y: 7.11), controlPoint2: CGPoint(x: 19.61, y: 7.5))
                path.addLine(to: CGPoint(x: 1, y: 7.5))
                path.addCurve(to: CGPoint(x: 0, y: 6.5), controlPoint1: CGPoint(x: 0.39, y: 7.5), controlPoint2: CGPoint(x: 0, y: 7.11))
                path.addLine(to: CGPoint(x: 0, y: 1))
                path.addCurve(to: CGPoint(x: 1, y: 0), controlPoint1: CGPoint(x: 0, y: 0.39), controlPoint2: CGPoint(x: 0.39, y: 0))
                path.addLine(to: CGPoint(x: 19, y: 0))
                path.close()
                context.saveGState()
                context.translateBy(x: 2, y: 2.5)
                path.usesEvenOddFillRule = true
                UIColor.black.setFill()
                path.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        /// Center
        do {
            context.saveGState()
            context.translateBy(x: 97, y: 0)
            
            /// ↳ Time
            let time = NSMutableAttributedString(string: "9:41 AM")
            time.addAttribute(.font, value: UIFont(name: "SFProText-Semibold", size: 12)!, range: NSRange(location: 0, length: time.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                time.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: time.length))
            }
            context.saveGState()
            time.draw(in: CGRect(x: 67.01, y: 3, width: 49, height: 16))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Container
        do {
            context.saveGState()
            context.translateBy(x: 5, y: 3)
            
            /// Signal
            let signal = UIBezierPath()
            signal.move(to: CGPoint(x: 2.06, y: 5.5))
            signal.addCurve(to: CGPoint(x: 3.09, y: 6.5), controlPoint1: CGPoint(x: 2.69, y: 5.5), controlPoint2: CGPoint(x: 3.09, y: 5.89))
            signal.addLine(to: CGPoint(x: 3.09, y: 9))
            signal.addCurve(to: CGPoint(x: 2.06, y: 10), controlPoint1: CGPoint(x: 3.09, y: 9.61), controlPoint2: CGPoint(x: 2.69, y: 10))
            signal.addLine(to: CGPoint(x: 1.03, y: 10))
            signal.addCurve(to: CGPoint(x: 0, y: 9), controlPoint1: CGPoint(x: 0.41, y: 10), controlPoint2: CGPoint(x: 0, y: 9.61))
            signal.addLine(to: CGPoint(x: 0, y: 6.5))
            signal.addCurve(to: CGPoint(x: 1.03, y: 5.5), controlPoint1: CGPoint(x: 0, y: 5.89), controlPoint2: CGPoint(x: 0.41, y: 5.5))
            signal.addLine(to: CGPoint(x: 2.06, y: 5.5))
            signal.close()
            signal.move(to: CGPoint(x: 15.97, y: 0))
            signal.addCurve(to: CGPoint(x: 17, y: 1), controlPoint1: CGPoint(x: 16.59, y: 0), controlPoint2: CGPoint(x: 17, y: 0.39))
            signal.addLine(to: CGPoint(x: 17, y: 9))
            signal.addCurve(to: CGPoint(x: 15.97, y: 10), controlPoint1: CGPoint(x: 17, y: 9.61), controlPoint2: CGPoint(x: 16.59, y: 10))
            signal.addLine(to: CGPoint(x: 14.94, y: 10))
            signal.addCurve(to: CGPoint(x: 13.91, y: 9), controlPoint1: CGPoint(x: 14.31, y: 10), controlPoint2: CGPoint(x: 13.91, y: 9.61))
            signal.addLine(to: CGPoint(x: 13.91, y: 1))
            signal.addCurve(to: CGPoint(x: 14.94, y: 0), controlPoint1: CGPoint(x: 13.91, y: 0.39), controlPoint2: CGPoint(x: 14.31, y: 0))
            signal.addLine(to: CGPoint(x: 15.97, y: 0))
            signal.close()
            signal.move(to: CGPoint(x: 11.33, y: 2))
            signal.addCurve(to: CGPoint(x: 12.36, y: 3), controlPoint1: CGPoint(x: 11.96, y: 2), controlPoint2: CGPoint(x: 12.36, y: 2.39))
            signal.addLine(to: CGPoint(x: 12.36, y: 9))
            signal.addCurve(to: CGPoint(x: 11.33, y: 10), controlPoint1: CGPoint(x: 12.36, y: 9.61), controlPoint2: CGPoint(x: 11.96, y: 10))
            signal.addLine(to: CGPoint(x: 10.3, y: 10))
            signal.addCurve(to: CGPoint(x: 9.27, y: 9), controlPoint1: CGPoint(x: 9.68, y: 10), controlPoint2: CGPoint(x: 9.27, y: 9.61))
            signal.addLine(to: CGPoint(x: 9.27, y: 3))
            signal.addCurve(to: CGPoint(x: 10.3, y: 2), controlPoint1: CGPoint(x: 9.27, y: 2.39), controlPoint2: CGPoint(x: 9.68, y: 2))
            signal.addLine(to: CGPoint(x: 11.33, y: 2))
            signal.close()
            signal.move(to: CGPoint(x: 6.7, y: 4))
            signal.addCurve(to: CGPoint(x: 7.73, y: 5), controlPoint1: CGPoint(x: 7.32, y: 4), controlPoint2: CGPoint(x: 7.73, y: 4.39))
            signal.addLine(to: CGPoint(x: 7.73, y: 9))
            signal.addCurve(to: CGPoint(x: 6.7, y: 10), controlPoint1: CGPoint(x: 7.73, y: 9.61), controlPoint2: CGPoint(x: 7.32, y: 10))
            signal.addLine(to: CGPoint(x: 5.67, y: 10))
            signal.addCurve(to: CGPoint(x: 4.64, y: 9), controlPoint1: CGPoint(x: 5.04, y: 10), controlPoint2: CGPoint(x: 4.64, y: 9.61))
            signal.addLine(to: CGPoint(x: 4.64, y: 5))
            signal.addCurve(to: CGPoint(x: 5.67, y: 4), controlPoint1: CGPoint(x: 4.64, y: 4.39), controlPoint2: CGPoint(x: 5.04, y: 4))
            signal.addLine(to: CGPoint(x: 6.7, y: 4))
            signal.close()
            context.saveGState()
            context.translateBy(x: 0, y: 2)
            signal.usesEvenOddFillRule = true
            UIColor.black.setFill()
            signal.fill()
            context.restoreGState()
            
            /// Wi-Fi
            let wiFi = UIBezierPath()
            wiFi.move(to: CGPoint(x: 7.64, y: 2.28))
            wiFi.addCurve(to: CGPoint(x: 13.59, y: 4.66), controlPoint1: CGPoint(x: 9.85, y: 2.28), controlPoint2: CGPoint(x: 11.98, y: 3.13))
            wiFi.addCurve(to: CGPoint(x: 14.02, y: 4.65), controlPoint1: CGPoint(x: 13.71, y: 4.77), controlPoint2: CGPoint(x: 13.9, y: 4.77))
            wiFi.addLine(to: CGPoint(x: 15.18, y: 3.49))
            wiFi.addCurve(to: CGPoint(x: 15.27, y: 3.26), controlPoint1: CGPoint(x: 15.24, y: 3.42), controlPoint2: CGPoint(x: 15.27, y: 3.34))
            wiFi.addCurve(to: CGPoint(x: 15.18, y: 3.03), controlPoint1: CGPoint(x: 15.27, y: 3.17), controlPoint2: CGPoint(x: 15.24, y: 3.09))
            wiFi.addCurve(to: CGPoint(x: 0.1, y: 3.03), controlPoint1: CGPoint(x: 10.96, y: -1.01), controlPoint2: CGPoint(x: 4.31, y: -1.01))
            wiFi.addCurve(to: CGPoint(x: 0, y: 3.26), controlPoint1: CGPoint(x: 0.04, y: 3.09), controlPoint2: CGPoint(x: 0, y: 3.17))
            wiFi.addCurve(to: CGPoint(x: 0.09, y: 3.49), controlPoint1: CGPoint(x: -0, y: 3.34), controlPoint2: CGPoint(x: 0.03, y: 3.42))
            wiFi.addLine(to: CGPoint(x: 1.25, y: 4.65))
            wiFi.addCurve(to: CGPoint(x: 1.68, y: 4.66), controlPoint1: CGPoint(x: 1.37, y: 4.77), controlPoint2: CGPoint(x: 1.56, y: 4.77))
            wiFi.addCurve(to: CGPoint(x: 7.64, y: 2.28), controlPoint1: CGPoint(x: 3.29, y: 3.13), controlPoint2: CGPoint(x: 5.42, y: 2.28))
            wiFi.close()
            wiFi.move(to: CGPoint(x: 7.64, y: 6.07))
            wiFi.addCurve(to: CGPoint(x: 10.93, y: 7.34), controlPoint1: CGPoint(x: 8.85, y: 6.07), controlPoint2: CGPoint(x: 10.03, y: 6.53))
            wiFi.addCurve(to: CGPoint(x: 11.36, y: 7.34), controlPoint1: CGPoint(x: 11.05, y: 7.46), controlPoint2: CGPoint(x: 11.24, y: 7.46))
            wiFi.addLine(to: CGPoint(x: 12.52, y: 6.17))
            wiFi.addCurve(to: CGPoint(x: 12.61, y: 5.94), controlPoint1: CGPoint(x: 12.58, y: 6.11), controlPoint2: CGPoint(x: 12.61, y: 6.03))
            wiFi.addCurve(to: CGPoint(x: 12.51, y: 5.71), controlPoint1: CGPoint(x: 12.61, y: 5.85), controlPoint2: CGPoint(x: 12.58, y: 5.77))
            wiFi.addCurve(to: CGPoint(x: 2.76, y: 5.71), controlPoint1: CGPoint(x: 9.77, y: 3.15), controlPoint2: CGPoint(x: 5.51, y: 3.15))
            wiFi.addCurve(to: CGPoint(x: 2.66, y: 5.94), controlPoint1: CGPoint(x: 2.7, y: 5.77), controlPoint2: CGPoint(x: 2.66, y: 5.85))
            wiFi.addCurve(to: CGPoint(x: 2.76, y: 6.17), controlPoint1: CGPoint(x: 2.66, y: 6.03), controlPoint2: CGPoint(x: 2.7, y: 6.11))
            wiFi.addLine(to: CGPoint(x: 3.91, y: 7.34))
            wiFi.addCurve(to: CGPoint(x: 4.34, y: 7.34), controlPoint1: CGPoint(x: 4.03, y: 7.46), controlPoint2: CGPoint(x: 4.22, y: 7.46))
            wiFi.addCurve(to: CGPoint(x: 7.64, y: 6.07), controlPoint1: CGPoint(x: 5.25, y: 6.53), controlPoint2: CGPoint(x: 6.42, y: 6.07))
            wiFi.close()
            wiFi.move(to: CGPoint(x: 9.86, y: 8.86))
            wiFi.addCurve(to: CGPoint(x: 9.95, y: 8.63), controlPoint1: CGPoint(x: 9.92, y: 8.8), controlPoint2: CGPoint(x: 9.95, y: 8.71))
            wiFi.addCurve(to: CGPoint(x: 9.85, y: 8.4), controlPoint1: CGPoint(x: 9.95, y: 8.54), controlPoint2: CGPoint(x: 9.91, y: 8.46))
            wiFi.addCurve(to: CGPoint(x: 5.43, y: 8.4), controlPoint1: CGPoint(x: 8.57, y: 7.32), controlPoint2: CGPoint(x: 6.7, y: 7.32))
            wiFi.addCurve(to: CGPoint(x: 5.32, y: 8.63), controlPoint1: CGPoint(x: 5.36, y: 8.46), controlPoint2: CGPoint(x: 5.33, y: 8.54))
            wiFi.addCurve(to: CGPoint(x: 5.42, y: 8.86), controlPoint1: CGPoint(x: 5.32, y: 8.71), controlPoint2: CGPoint(x: 5.36, y: 8.8))
            wiFi.addLine(to: CGPoint(x: 7.41, y: 10.87))
            wiFi.addCurve(to: CGPoint(x: 7.64, y: 10.97), controlPoint1: CGPoint(x: 7.47, y: 10.93), controlPoint2: CGPoint(x: 7.55, y: 10.97))
            wiFi.addCurve(to: CGPoint(x: 7.86, y: 10.87), controlPoint1: CGPoint(x: 7.72, y: 10.97), controlPoint2: CGPoint(x: 7.8, y: 10.93))
            wiFi.addLine(to: CGPoint(x: 9.86, y: 8.86))
            wiFi.close()
            context.saveGState()
            context.translateBy(x: 67, y: 1)
            wiFi.usesEvenOddFillRule = true
            UIColor.black.setFill()
            wiFi.fill()
            context.restoreGState()
            
            /// Carrier
            let carrier = NSMutableAttributedString(string: "Carrier")
            carrier.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 12)!, range: NSRange(location: 0, length: carrier.length))
            carrier.addAttribute(.kern, value: -0.02, range: NSRange(location: 0, length: carrier.length))
            context.saveGState()
            carrier.draw(at: CGPoint(x: 21, y: 0))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsStatusBackToApp(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 20)
        
        /// Right
        do {
            context.saveGState()
            context.translateBy(x: 193, y: 0)
            
            /// Battery
            do {
                context.saveGState()
                context.translateBy(x: 150, y: 4)
                
                /// Stroke
                let stroke = UIBezierPath()
                stroke.move(to: CGPoint(x: 21.5, y: 0))
                stroke.addCurve(to: CGPoint(x: 24, y: 2.5), controlPoint1: CGPoint(x: 23.02, y: 0), controlPoint2: CGPoint(x: 24, y: 0.98))
                stroke.addLine(to: CGPoint(x: 24, y: 9))
                stroke.addCurve(to: CGPoint(x: 21.5, y: 11.5), controlPoint1: CGPoint(x: 24, y: 10.52), controlPoint2: CGPoint(x: 23.02, y: 11.5))
                stroke.addLine(to: CGPoint(x: 2.5, y: 11.5))
                stroke.addCurve(to: CGPoint(x: 0, y: 9), controlPoint1: CGPoint(x: 0.98, y: 11.5), controlPoint2: CGPoint(x: 0, y: 10.52))
                stroke.addLine(to: CGPoint(x: 0, y: 2.5))
                stroke.addCurve(to: CGPoint(x: 2.5, y: 0), controlPoint1: CGPoint(x: 0, y: 0.98), controlPoint2: CGPoint(x: 0.98, y: 0))
                stroke.addLine(to: CGPoint(x: 21.5, y: 0))
                stroke.close()
                stroke.move(to: CGPoint(x: 21.4, y: 1))
                stroke.addLine(to: CGPoint(x: 2.6, y: 1))
                stroke.addCurve(to: CGPoint(x: 1, y: 2.6), controlPoint1: CGPoint(x: 1.63, y: 1), controlPoint2: CGPoint(x: 1, y: 1.63))
                stroke.addLine(to: CGPoint(x: 1, y: 8.9))
                stroke.addCurve(to: CGPoint(x: 2.6, y: 10.5), controlPoint1: CGPoint(x: 1, y: 9.87), controlPoint2: CGPoint(x: 1.63, y: 10.5))
                stroke.addLine(to: CGPoint(x: 21.4, y: 10.5))
                stroke.addCurve(to: CGPoint(x: 23, y: 8.9), controlPoint1: CGPoint(x: 22.37, y: 10.5), controlPoint2: CGPoint(x: 23, y: 9.87))
                stroke.addLine(to: CGPoint(x: 23, y: 2.6))
                stroke.addCurve(to: CGPoint(x: 21.4, y: 1), controlPoint1: CGPoint(x: 23, y: 1.63), controlPoint2: CGPoint(x: 22.37, y: 1))
                stroke.close()
                stroke.move(to: CGPoint(x: 25, y: 3.75))
                stroke.addCurve(to: CGPoint(x: 26.5, y: 5.75), controlPoint1: CGPoint(x: 26, y: 3.92), controlPoint2: CGPoint(x: 26.5, y: 4.58))
                stroke.addCurve(to: CGPoint(x: 25, y: 7.75), controlPoint1: CGPoint(x: 26.5, y: 6.92), controlPoint2: CGPoint(x: 26, y: 7.58))
                stroke.addLine(to: CGPoint(x: 25, y: 3.75))
                stroke.close()
                context.saveGState()
                context.setAlpha(0.4)
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    context.translateBy(x: 0, y: 0.5)
                    stroke.usesEvenOddFillRule = true
                    UIColor.black.setFill()
                    stroke.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                
                /// Path
                let path = UIBezierPath()
                path.move(to: CGPoint(x: 19, y: 0))
                path.addCurve(to: CGPoint(x: 20, y: 1), controlPoint1: CGPoint(x: 19.61, y: 0), controlPoint2: CGPoint(x: 20, y: 0.39))
                path.addLine(to: CGPoint(x: 20, y: 6.5))
                path.addCurve(to: CGPoint(x: 19, y: 7.5), controlPoint1: CGPoint(x: 20, y: 7.11), controlPoint2: CGPoint(x: 19.61, y: 7.5))
                path.addLine(to: CGPoint(x: 1, y: 7.5))
                path.addCurve(to: CGPoint(x: 0, y: 6.5), controlPoint1: CGPoint(x: 0.39, y: 7.5), controlPoint2: CGPoint(x: 0, y: 7.11))
                path.addLine(to: CGPoint(x: 0, y: 1))
                path.addCurve(to: CGPoint(x: 1, y: 0), controlPoint1: CGPoint(x: 0, y: 0.39), controlPoint2: CGPoint(x: 0.39, y: 0))
                path.addLine(to: CGPoint(x: 19, y: 0))
                path.close()
                context.saveGState()
                context.translateBy(x: 2, y: 2.5)
                path.usesEvenOddFillRule = true
                UIColor.black.setFill()
                path.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        /// Center
        do {
            context.saveGState()
            context.translateBy(x: 97, y: 0)
            
            /// ↳ Time
            let time = NSMutableAttributedString(string: "9:41 AM")
            time.addAttribute(.font, value: UIFont(name: "SFProText-Semibold", size: 12)!, range: NSRange(location: 0, length: time.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                time.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: time.length))
            }
            context.saveGState()
            time.draw(in: CGRect(x: 67.01, y: 3, width: 49, height: 16))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Container
        do {
            context.saveGState()
            context.translateBy(x: 4, y: 3)
            
            /// Back
            let back = UIBezierPath()
            back.move(to: CGPoint(x: 12, y: 8.52))
            back.addLine(to: CGPoint(x: 12, y: 8.92))
            back.addCurve(to: CGPoint(x: 11.99, y: 9.26), controlPoint1: CGPoint(x: 12, y: 9.04), controlPoint2: CGPoint(x: 12, y: 9.15))
            back.addCurve(to: CGPoint(x: 11.93, y: 9.99), controlPoint1: CGPoint(x: 11.99, y: 9.5), controlPoint2: CGPoint(x: 11.97, y: 9.75))
            back.addCurve(to: CGPoint(x: 11.7, y: 10.68), controlPoint1: CGPoint(x: 11.89, y: 10.23), controlPoint2: CGPoint(x: 11.81, y: 10.46))
            back.addCurve(to: CGPoint(x: 10.68, y: 11.7), controlPoint1: CGPoint(x: 11.47, y: 11.12), controlPoint2: CGPoint(x: 11.12, y: 11.48))
            back.addCurve(to: CGPoint(x: 9.99, y: 11.93), controlPoint1: CGPoint(x: 10.46, y: 11.81), controlPoint2: CGPoint(x: 10.23, y: 11.89))
            back.addCurve(to: CGPoint(x: 9.26, y: 12), controlPoint1: CGPoint(x: 9.74, y: 11.97), controlPoint2: CGPoint(x: 9.5, y: 11.99))
            back.addCurve(to: CGPoint(x: 8.92, y: 12), controlPoint1: CGPoint(x: 9.14, y: 12), controlPoint2: CGPoint(x: 9.03, y: 12))
            back.addLine(to: CGPoint(x: 8.52, y: 12))
            back.addLine(to: CGPoint(x: 3.47, y: 12))
            back.addLine(to: CGPoint(x: 3.07, y: 12))
            back.addCurve(to: CGPoint(x: 2.74, y: 12), controlPoint1: CGPoint(x: 2.96, y: 12), controlPoint2: CGPoint(x: 2.85, y: 12))
            back.addCurve(to: CGPoint(x: 2.01, y: 11.93), controlPoint1: CGPoint(x: 2.49, y: 11.99), controlPoint2: CGPoint(x: 2.25, y: 11.97))
            back.addCurve(to: CGPoint(x: 1.31, y: 11.7), controlPoint1: CGPoint(x: 1.77, y: 11.89), controlPoint2: CGPoint(x: 1.53, y: 11.81))
            back.addCurve(to: CGPoint(x: 0.29, y: 10.68), controlPoint1: CGPoint(x: 0.87, y: 11.48), controlPoint2: CGPoint(x: 0.52, y: 11.12))
            back.addCurve(to: CGPoint(x: 0.07, y: 9.99), controlPoint1: CGPoint(x: 0.18, y: 10.46), controlPoint2: CGPoint(x: 0.11, y: 10.23))
            back.addCurve(to: CGPoint(x: 0, y: 9.26), controlPoint1: CGPoint(x: 0.03, y: 9.75), controlPoint2: CGPoint(x: 0, y: 9.5))
            back.addCurve(to: CGPoint(x: 0, y: 8.92), controlPoint1: CGPoint(x: 0, y: 9.15), controlPoint2: CGPoint(x: 0, y: 9.03))
            back.addLine(to: CGPoint(x: 0, y: 8.52))
            back.addLine(to: CGPoint(x: 0, y: 3.47))
            back.addLine(to: CGPoint(x: 0, y: 3.07))
            back.addCurve(to: CGPoint(x: 0, y: 2.74), controlPoint1: CGPoint(x: 0, y: 2.96), controlPoint2: CGPoint(x: 0, y: 2.85))
            back.addCurve(to: CGPoint(x: 0.07, y: 2.01), controlPoint1: CGPoint(x: 0.01, y: 2.49), controlPoint2: CGPoint(x: 0.03, y: 2.25))
            back.addCurve(to: CGPoint(x: 0.3, y: 1.32), controlPoint1: CGPoint(x: 0.11, y: 1.77), controlPoint2: CGPoint(x: 0.19, y: 1.54))
            back.addCurve(to: CGPoint(x: 1.32, y: 0.3), controlPoint1: CGPoint(x: 0.52, y: 0.88), controlPoint2: CGPoint(x: 0.88, y: 0.52))
            back.addCurve(to: CGPoint(x: 2.01, y: 0.07), controlPoint1: CGPoint(x: 1.54, y: 0.19), controlPoint2: CGPoint(x: 1.77, y: 0.11))
            back.addCurve(to: CGPoint(x: 2.74, y: 0.01), controlPoint1: CGPoint(x: 2.25, y: 0.03), controlPoint2: CGPoint(x: 2.5, y: 0.01))
            back.addCurve(to: CGPoint(x: 3.08, y: 0), controlPoint1: CGPoint(x: 2.85, y: 0), controlPoint2: CGPoint(x: 2.97, y: 0))
            back.addLine(to: CGPoint(x: 3.48, y: 0))
            back.addLine(to: CGPoint(x: 8.52, y: 0))
            back.addLine(to: CGPoint(x: 8.92, y: 0))
            back.addCurve(to: CGPoint(x: 9.26, y: 0), controlPoint1: CGPoint(x: 9.04, y: 0), controlPoint2: CGPoint(x: 9.15, y: 0))
            back.addCurve(to: CGPoint(x: 9.99, y: 0.07), controlPoint1: CGPoint(x: 9.5, y: 0.01), controlPoint2: CGPoint(x: 9.75, y: 0.03))
            back.addCurve(to: CGPoint(x: 10.68, y: 0.3), controlPoint1: CGPoint(x: 10.23, y: 0.11), controlPoint2: CGPoint(x: 10.46, y: 0.19))
            back.addCurve(to: CGPoint(x: 11.7, y: 1.32), controlPoint1: CGPoint(x: 11.12, y: 0.52), controlPoint2: CGPoint(x: 11.48, y: 0.88))
            back.addCurve(to: CGPoint(x: 11.93, y: 2.01), controlPoint1: CGPoint(x: 11.81, y: 1.54), controlPoint2: CGPoint(x: 11.89, y: 1.77))
            back.addCurve(to: CGPoint(x: 12, y: 2.74), controlPoint1: CGPoint(x: 11.97, y: 2.25), controlPoint2: CGPoint(x: 11.99, y: 2.5))
            back.addCurve(to: CGPoint(x: 12, y: 3.08), controlPoint1: CGPoint(x: 12, y: 2.85), controlPoint2: CGPoint(x: 12, y: 2.96))
            back.addLine(to: CGPoint(x: 12, y: 3.48))
            back.addLine(to: CGPoint(x: 12, y: 8.53))
            back.addLine(to: CGPoint(x: 12, y: 8.52))
            back.close()
            back.move(to: CGPoint(x: 6.88, y: 2.11))
            back.addLine(to: CGPoint(x: 3, y: 6))
            back.addLine(to: CGPoint(x: 6.86, y: 9.86))
            back.addLine(to: CGPoint(x: 7.88, y: 8.89))
            back.addLine(to: CGPoint(x: 5, y: 6))
            back.addLine(to: CGPoint(x: 7.92, y: 3.07))
            back.addLine(to: CGPoint(x: 6.88, y: 2.11))
            back.close()
            context.saveGState()
            context.translateBy(x: 0, y: 1)
            back.usesEvenOddFillRule = true
            UIColor.black.setFill()
            back.fill()
            context.restoreGState()
            
            /// App Name
            let appName = NSMutableAttributedString(string: "App Name")
            appName.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 12)!, range: NSRange(location: 0, length: appName.length))
            context.saveGState()
            appName.draw(at: CGPoint(x: 16, y: 0))
            context.restoreGState()
            
            /// Signal
            let signal = UIBezierPath()
            signal.move(to: CGPoint(x: 2.06, y: 5.5))
            signal.addCurve(to: CGPoint(x: 3.09, y: 6.5), controlPoint1: CGPoint(x: 2.69, y: 5.5), controlPoint2: CGPoint(x: 3.09, y: 5.89))
            signal.addLine(to: CGPoint(x: 3.09, y: 9))
            signal.addCurve(to: CGPoint(x: 2.06, y: 10), controlPoint1: CGPoint(x: 3.09, y: 9.61), controlPoint2: CGPoint(x: 2.69, y: 10))
            signal.addLine(to: CGPoint(x: 1.03, y: 10))
            signal.addCurve(to: CGPoint(x: 0, y: 9), controlPoint1: CGPoint(x: 0.41, y: 10), controlPoint2: CGPoint(x: 0, y: 9.61))
            signal.addLine(to: CGPoint(x: 0, y: 6.5))
            signal.addCurve(to: CGPoint(x: 1.03, y: 5.5), controlPoint1: CGPoint(x: 0, y: 5.89), controlPoint2: CGPoint(x: 0.41, y: 5.5))
            signal.addLine(to: CGPoint(x: 2.06, y: 5.5))
            signal.close()
            signal.move(to: CGPoint(x: 15.97, y: 0))
            signal.addCurve(to: CGPoint(x: 17, y: 1), controlPoint1: CGPoint(x: 16.59, y: 0), controlPoint2: CGPoint(x: 17, y: 0.39))
            signal.addLine(to: CGPoint(x: 17, y: 9))
            signal.addCurve(to: CGPoint(x: 15.97, y: 10), controlPoint1: CGPoint(x: 17, y: 9.61), controlPoint2: CGPoint(x: 16.59, y: 10))
            signal.addLine(to: CGPoint(x: 14.94, y: 10))
            signal.addCurve(to: CGPoint(x: 13.91, y: 9), controlPoint1: CGPoint(x: 14.31, y: 10), controlPoint2: CGPoint(x: 13.91, y: 9.61))
            signal.addLine(to: CGPoint(x: 13.91, y: 1))
            signal.addCurve(to: CGPoint(x: 14.94, y: 0), controlPoint1: CGPoint(x: 13.91, y: 0.39), controlPoint2: CGPoint(x: 14.31, y: 0))
            signal.addLine(to: CGPoint(x: 15.97, y: 0))
            signal.close()
            signal.move(to: CGPoint(x: 11.33, y: 2))
            signal.addCurve(to: CGPoint(x: 12.36, y: 3), controlPoint1: CGPoint(x: 11.96, y: 2), controlPoint2: CGPoint(x: 12.36, y: 2.39))
            signal.addLine(to: CGPoint(x: 12.36, y: 9))
            signal.addCurve(to: CGPoint(x: 11.33, y: 10), controlPoint1: CGPoint(x: 12.36, y: 9.61), controlPoint2: CGPoint(x: 11.96, y: 10))
            signal.addLine(to: CGPoint(x: 10.3, y: 10))
            signal.addCurve(to: CGPoint(x: 9.27, y: 9), controlPoint1: CGPoint(x: 9.68, y: 10), controlPoint2: CGPoint(x: 9.27, y: 9.61))
            signal.addLine(to: CGPoint(x: 9.27, y: 3))
            signal.addCurve(to: CGPoint(x: 10.3, y: 2), controlPoint1: CGPoint(x: 9.27, y: 2.39), controlPoint2: CGPoint(x: 9.68, y: 2))
            signal.addLine(to: CGPoint(x: 11.33, y: 2))
            signal.close()
            signal.move(to: CGPoint(x: 6.7, y: 4))
            signal.addCurve(to: CGPoint(x: 7.73, y: 5), controlPoint1: CGPoint(x: 7.32, y: 4), controlPoint2: CGPoint(x: 7.73, y: 4.39))
            signal.addLine(to: CGPoint(x: 7.73, y: 9))
            signal.addCurve(to: CGPoint(x: 6.7, y: 10), controlPoint1: CGPoint(x: 7.73, y: 9.61), controlPoint2: CGPoint(x: 7.32, y: 10))
            signal.addLine(to: CGPoint(x: 5.67, y: 10))
            signal.addCurve(to: CGPoint(x: 4.64, y: 9), controlPoint1: CGPoint(x: 5.04, y: 10), controlPoint2: CGPoint(x: 4.64, y: 9.61))
            signal.addLine(to: CGPoint(x: 4.64, y: 5))
            signal.addCurve(to: CGPoint(x: 5.67, y: 4), controlPoint1: CGPoint(x: 4.64, y: 4.39), controlPoint2: CGPoint(x: 5.04, y: 4))
            signal.addLine(to: CGPoint(x: 6.7, y: 4))
            signal.close()
            context.saveGState()
            context.translateBy(x: 81, y: 2)
            signal.usesEvenOddFillRule = true
            UIColor.black.setFill()
            signal.fill()
            context.restoreGState()
            
            /// Wi-Fi
            let wiFi = UIBezierPath()
            wiFi.move(to: CGPoint(x: 7.64, y: 2.28))
            wiFi.addCurve(to: CGPoint(x: 13.59, y: 4.66), controlPoint1: CGPoint(x: 9.85, y: 2.28), controlPoint2: CGPoint(x: 11.98, y: 3.13))
            wiFi.addCurve(to: CGPoint(x: 14.02, y: 4.65), controlPoint1: CGPoint(x: 13.71, y: 4.77), controlPoint2: CGPoint(x: 13.9, y: 4.77))
            wiFi.addLine(to: CGPoint(x: 15.18, y: 3.49))
            wiFi.addCurve(to: CGPoint(x: 15.27, y: 3.26), controlPoint1: CGPoint(x: 15.24, y: 3.42), controlPoint2: CGPoint(x: 15.27, y: 3.34))
            wiFi.addCurve(to: CGPoint(x: 15.18, y: 3.03), controlPoint1: CGPoint(x: 15.27, y: 3.17), controlPoint2: CGPoint(x: 15.24, y: 3.09))
            wiFi.addCurve(to: CGPoint(x: 0.1, y: 3.03), controlPoint1: CGPoint(x: 10.96, y: -1.01), controlPoint2: CGPoint(x: 4.31, y: -1.01))
            wiFi.addCurve(to: CGPoint(x: 0, y: 3.26), controlPoint1: CGPoint(x: 0.04, y: 3.09), controlPoint2: CGPoint(x: 0, y: 3.17))
            wiFi.addCurve(to: CGPoint(x: 0.09, y: 3.49), controlPoint1: CGPoint(x: -0, y: 3.34), controlPoint2: CGPoint(x: 0.03, y: 3.42))
            wiFi.addLine(to: CGPoint(x: 1.25, y: 4.65))
            wiFi.addCurve(to: CGPoint(x: 1.68, y: 4.66), controlPoint1: CGPoint(x: 1.37, y: 4.77), controlPoint2: CGPoint(x: 1.56, y: 4.77))
            wiFi.addCurve(to: CGPoint(x: 7.64, y: 2.28), controlPoint1: CGPoint(x: 3.29, y: 3.13), controlPoint2: CGPoint(x: 5.42, y: 2.28))
            wiFi.close()
            wiFi.move(to: CGPoint(x: 7.64, y: 6.07))
            wiFi.addCurve(to: CGPoint(x: 10.93, y: 7.34), controlPoint1: CGPoint(x: 8.85, y: 6.07), controlPoint2: CGPoint(x: 10.03, y: 6.53))
            wiFi.addCurve(to: CGPoint(x: 11.36, y: 7.34), controlPoint1: CGPoint(x: 11.05, y: 7.46), controlPoint2: CGPoint(x: 11.24, y: 7.46))
            wiFi.addLine(to: CGPoint(x: 12.52, y: 6.17))
            wiFi.addCurve(to: CGPoint(x: 12.61, y: 5.94), controlPoint1: CGPoint(x: 12.58, y: 6.11), controlPoint2: CGPoint(x: 12.61, y: 6.03))
            wiFi.addCurve(to: CGPoint(x: 12.51, y: 5.71), controlPoint1: CGPoint(x: 12.61, y: 5.85), controlPoint2: CGPoint(x: 12.58, y: 5.77))
            wiFi.addCurve(to: CGPoint(x: 2.76, y: 5.71), controlPoint1: CGPoint(x: 9.77, y: 3.15), controlPoint2: CGPoint(x: 5.51, y: 3.15))
            wiFi.addCurve(to: CGPoint(x: 2.66, y: 5.94), controlPoint1: CGPoint(x: 2.7, y: 5.77), controlPoint2: CGPoint(x: 2.66, y: 5.85))
            wiFi.addCurve(to: CGPoint(x: 2.76, y: 6.17), controlPoint1: CGPoint(x: 2.66, y: 6.03), controlPoint2: CGPoint(x: 2.7, y: 6.11))
            wiFi.addLine(to: CGPoint(x: 3.91, y: 7.34))
            wiFi.addCurve(to: CGPoint(x: 4.34, y: 7.34), controlPoint1: CGPoint(x: 4.03, y: 7.46), controlPoint2: CGPoint(x: 4.22, y: 7.46))
            wiFi.addCurve(to: CGPoint(x: 7.64, y: 6.07), controlPoint1: CGPoint(x: 5.25, y: 6.53), controlPoint2: CGPoint(x: 6.42, y: 6.07))
            wiFi.close()
            wiFi.move(to: CGPoint(x: 9.86, y: 8.86))
            wiFi.addCurve(to: CGPoint(x: 9.95, y: 8.63), controlPoint1: CGPoint(x: 9.92, y: 8.8), controlPoint2: CGPoint(x: 9.95, y: 8.71))
            wiFi.addCurve(to: CGPoint(x: 9.85, y: 8.4), controlPoint1: CGPoint(x: 9.95, y: 8.54), controlPoint2: CGPoint(x: 9.91, y: 8.46))
            wiFi.addCurve(to: CGPoint(x: 5.43, y: 8.4), controlPoint1: CGPoint(x: 8.57, y: 7.32), controlPoint2: CGPoint(x: 6.7, y: 7.32))
            wiFi.addCurve(to: CGPoint(x: 5.32, y: 8.63), controlPoint1: CGPoint(x: 5.36, y: 8.46), controlPoint2: CGPoint(x: 5.33, y: 8.54))
            wiFi.addCurve(to: CGPoint(x: 5.42, y: 8.86), controlPoint1: CGPoint(x: 5.32, y: 8.71), controlPoint2: CGPoint(x: 5.36, y: 8.8))
            wiFi.addLine(to: CGPoint(x: 7.41, y: 10.87))
            wiFi.addCurve(to: CGPoint(x: 7.64, y: 10.97), controlPoint1: CGPoint(x: 7.47, y: 10.93), controlPoint2: CGPoint(x: 7.55, y: 10.97))
            wiFi.addCurve(to: CGPoint(x: 7.86, y: 10.87), controlPoint1: CGPoint(x: 7.72, y: 10.97), controlPoint2: CGPoint(x: 7.8, y: 10.93))
            wiFi.addLine(to: CGPoint(x: 9.86, y: 8.86))
            wiFi.close()
            context.saveGState()
            context.translateBy(x: 104, y: 1)
            wiFi.usesEvenOddFillRule = true
            UIColor.black.setFill()
            wiFi.fill()
            context.restoreGState()
            
            /// Wi-Fi (Outline Mask)
            context.saveGState()
            wiFi.apply(CGAffineTransform(translationX: 104, y: 1))
            wiFi.addClip()
            
            // Empty.
            
            context.restoreGState()
            // End Wi-Fi (Outline Mask)
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsStatusDefaultWhite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 20)
        
        /// Right
        do {
            context.saveGState()
            context.translateBy(x: 193, y: 0)
            
            /// Battery
            do {
                context.saveGState()
                context.translateBy(x: 150, y: 4)
                
                /// Stroke
                let stroke = UIBezierPath()
                stroke.move(to: CGPoint(x: 21.5, y: 0))
                stroke.addCurve(to: CGPoint(x: 24, y: 2.5), controlPoint1: CGPoint(x: 23.02, y: 0), controlPoint2: CGPoint(x: 24, y: 0.98))
                stroke.addLine(to: CGPoint(x: 24, y: 9))
                stroke.addCurve(to: CGPoint(x: 21.5, y: 11.5), controlPoint1: CGPoint(x: 24, y: 10.52), controlPoint2: CGPoint(x: 23.02, y: 11.5))
                stroke.addLine(to: CGPoint(x: 2.5, y: 11.5))
                stroke.addCurve(to: CGPoint(x: 0, y: 9), controlPoint1: CGPoint(x: 0.98, y: 11.5), controlPoint2: CGPoint(x: 0, y: 10.52))
                stroke.addLine(to: CGPoint(x: 0, y: 2.5))
                stroke.addCurve(to: CGPoint(x: 2.5, y: 0), controlPoint1: CGPoint(x: 0, y: 0.98), controlPoint2: CGPoint(x: 0.98, y: 0))
                stroke.addLine(to: CGPoint(x: 21.5, y: 0))
                stroke.close()
                stroke.move(to: CGPoint(x: 21.4, y: 1))
                stroke.addLine(to: CGPoint(x: 2.6, y: 1))
                stroke.addCurve(to: CGPoint(x: 1, y: 2.6), controlPoint1: CGPoint(x: 1.63, y: 1), controlPoint2: CGPoint(x: 1, y: 1.63))
                stroke.addLine(to: CGPoint(x: 1, y: 8.9))
                stroke.addCurve(to: CGPoint(x: 2.6, y: 10.5), controlPoint1: CGPoint(x: 1, y: 9.87), controlPoint2: CGPoint(x: 1.63, y: 10.5))
                stroke.addLine(to: CGPoint(x: 21.4, y: 10.5))
                stroke.addCurve(to: CGPoint(x: 23, y: 8.9), controlPoint1: CGPoint(x: 22.37, y: 10.5), controlPoint2: CGPoint(x: 23, y: 9.87))
                stroke.addLine(to: CGPoint(x: 23, y: 2.6))
                stroke.addCurve(to: CGPoint(x: 21.4, y: 1), controlPoint1: CGPoint(x: 23, y: 1.63), controlPoint2: CGPoint(x: 22.37, y: 1))
                stroke.close()
                stroke.move(to: CGPoint(x: 25, y: 3.75))
                stroke.addCurve(to: CGPoint(x: 26.5, y: 5.75), controlPoint1: CGPoint(x: 26, y: 3.92), controlPoint2: CGPoint(x: 26.5, y: 4.58))
                stroke.addCurve(to: CGPoint(x: 25, y: 7.75), controlPoint1: CGPoint(x: 26.5, y: 6.92), controlPoint2: CGPoint(x: 26, y: 7.58))
                stroke.addLine(to: CGPoint(x: 25, y: 3.75))
                stroke.close()
                context.saveGState()
                context.setAlpha(0.4)
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    context.translateBy(x: 0, y: 0.5)
                    stroke.usesEvenOddFillRule = true
                    UIColor.white.setFill()
                    stroke.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                
                /// Path
                let path = UIBezierPath()
                path.move(to: CGPoint(x: 19, y: 0))
                path.addCurve(to: CGPoint(x: 20, y: 1), controlPoint1: CGPoint(x: 19.61, y: 0), controlPoint2: CGPoint(x: 20, y: 0.39))
                path.addLine(to: CGPoint(x: 20, y: 6.5))
                path.addCurve(to: CGPoint(x: 19, y: 7.5), controlPoint1: CGPoint(x: 20, y: 7.11), controlPoint2: CGPoint(x: 19.61, y: 7.5))
                path.addLine(to: CGPoint(x: 1, y: 7.5))
                path.addCurve(to: CGPoint(x: 0, y: 6.5), controlPoint1: CGPoint(x: 0.39, y: 7.5), controlPoint2: CGPoint(x: 0, y: 7.11))
                path.addLine(to: CGPoint(x: 0, y: 1))
                path.addCurve(to: CGPoint(x: 1, y: 0), controlPoint1: CGPoint(x: 0, y: 0.39), controlPoint2: CGPoint(x: 0.39, y: 0))
                path.addLine(to: CGPoint(x: 19, y: 0))
                path.close()
                context.saveGState()
                context.translateBy(x: 2, y: 2.5)
                path.usesEvenOddFillRule = true
                UIColor.white.setFill()
                path.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        /// Center
        do {
            context.saveGState()
            context.translateBy(x: 97, y: 0)
            
            /// ↳ Time
            let time = NSMutableAttributedString(string: "9:41 AM")
            time.addAttribute(.font, value: UIFont(name: "SFProText-Semibold", size: 12)!, range: NSRange(location: 0, length: time.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                time.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: time.length))
            }
            time.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: time.length))
            context.saveGState()
            time.draw(in: CGRect(x: 67.01, y: 3, width: 49, height: 16))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Container
        do {
            context.saveGState()
            context.translateBy(x: 5, y: 3)
            
            /// Signal
            let signal = UIBezierPath()
            signal.move(to: CGPoint(x: 2.06, y: 5.5))
            signal.addCurve(to: CGPoint(x: 3.09, y: 6.5), controlPoint1: CGPoint(x: 2.69, y: 5.5), controlPoint2: CGPoint(x: 3.09, y: 5.89))
            signal.addLine(to: CGPoint(x: 3.09, y: 9))
            signal.addCurve(to: CGPoint(x: 2.06, y: 10), controlPoint1: CGPoint(x: 3.09, y: 9.61), controlPoint2: CGPoint(x: 2.69, y: 10))
            signal.addLine(to: CGPoint(x: 1.03, y: 10))
            signal.addCurve(to: CGPoint(x: 0, y: 9), controlPoint1: CGPoint(x: 0.41, y: 10), controlPoint2: CGPoint(x: 0, y: 9.61))
            signal.addLine(to: CGPoint(x: 0, y: 6.5))
            signal.addCurve(to: CGPoint(x: 1.03, y: 5.5), controlPoint1: CGPoint(x: 0, y: 5.89), controlPoint2: CGPoint(x: 0.41, y: 5.5))
            signal.addLine(to: CGPoint(x: 2.06, y: 5.5))
            signal.close()
            signal.move(to: CGPoint(x: 15.97, y: 0))
            signal.addCurve(to: CGPoint(x: 17, y: 1), controlPoint1: CGPoint(x: 16.59, y: 0), controlPoint2: CGPoint(x: 17, y: 0.39))
            signal.addLine(to: CGPoint(x: 17, y: 9))
            signal.addCurve(to: CGPoint(x: 15.97, y: 10), controlPoint1: CGPoint(x: 17, y: 9.61), controlPoint2: CGPoint(x: 16.59, y: 10))
            signal.addLine(to: CGPoint(x: 14.94, y: 10))
            signal.addCurve(to: CGPoint(x: 13.91, y: 9), controlPoint1: CGPoint(x: 14.31, y: 10), controlPoint2: CGPoint(x: 13.91, y: 9.61))
            signal.addLine(to: CGPoint(x: 13.91, y: 1))
            signal.addCurve(to: CGPoint(x: 14.94, y: 0), controlPoint1: CGPoint(x: 13.91, y: 0.39), controlPoint2: CGPoint(x: 14.31, y: 0))
            signal.addLine(to: CGPoint(x: 15.97, y: 0))
            signal.close()
            signal.move(to: CGPoint(x: 11.33, y: 2))
            signal.addCurve(to: CGPoint(x: 12.36, y: 3), controlPoint1: CGPoint(x: 11.96, y: 2), controlPoint2: CGPoint(x: 12.36, y: 2.39))
            signal.addLine(to: CGPoint(x: 12.36, y: 9))
            signal.addCurve(to: CGPoint(x: 11.33, y: 10), controlPoint1: CGPoint(x: 12.36, y: 9.61), controlPoint2: CGPoint(x: 11.96, y: 10))
            signal.addLine(to: CGPoint(x: 10.3, y: 10))
            signal.addCurve(to: CGPoint(x: 9.27, y: 9), controlPoint1: CGPoint(x: 9.68, y: 10), controlPoint2: CGPoint(x: 9.27, y: 9.61))
            signal.addLine(to: CGPoint(x: 9.27, y: 3))
            signal.addCurve(to: CGPoint(x: 10.3, y: 2), controlPoint1: CGPoint(x: 9.27, y: 2.39), controlPoint2: CGPoint(x: 9.68, y: 2))
            signal.addLine(to: CGPoint(x: 11.33, y: 2))
            signal.close()
            signal.move(to: CGPoint(x: 6.7, y: 4))
            signal.addCurve(to: CGPoint(x: 7.73, y: 5), controlPoint1: CGPoint(x: 7.32, y: 4), controlPoint2: CGPoint(x: 7.73, y: 4.39))
            signal.addLine(to: CGPoint(x: 7.73, y: 9))
            signal.addCurve(to: CGPoint(x: 6.7, y: 10), controlPoint1: CGPoint(x: 7.73, y: 9.61), controlPoint2: CGPoint(x: 7.32, y: 10))
            signal.addLine(to: CGPoint(x: 5.67, y: 10))
            signal.addCurve(to: CGPoint(x: 4.64, y: 9), controlPoint1: CGPoint(x: 5.04, y: 10), controlPoint2: CGPoint(x: 4.64, y: 9.61))
            signal.addLine(to: CGPoint(x: 4.64, y: 5))
            signal.addCurve(to: CGPoint(x: 5.67, y: 4), controlPoint1: CGPoint(x: 4.64, y: 4.39), controlPoint2: CGPoint(x: 5.04, y: 4))
            signal.addLine(to: CGPoint(x: 6.7, y: 4))
            signal.close()
            context.saveGState()
            context.translateBy(x: 0, y: 2)
            signal.usesEvenOddFillRule = true
            UIColor.white.setFill()
            signal.fill()
            context.restoreGState()
            
            /// Wi-Fi
            let wiFi = UIBezierPath()
            wiFi.move(to: CGPoint(x: 7.64, y: 2.28))
            wiFi.addCurve(to: CGPoint(x: 13.59, y: 4.66), controlPoint1: CGPoint(x: 9.85, y: 2.28), controlPoint2: CGPoint(x: 11.98, y: 3.13))
            wiFi.addCurve(to: CGPoint(x: 14.02, y: 4.65), controlPoint1: CGPoint(x: 13.71, y: 4.77), controlPoint2: CGPoint(x: 13.9, y: 4.77))
            wiFi.addLine(to: CGPoint(x: 15.18, y: 3.49))
            wiFi.addCurve(to: CGPoint(x: 15.27, y: 3.26), controlPoint1: CGPoint(x: 15.24, y: 3.42), controlPoint2: CGPoint(x: 15.27, y: 3.34))
            wiFi.addCurve(to: CGPoint(x: 15.18, y: 3.03), controlPoint1: CGPoint(x: 15.27, y: 3.17), controlPoint2: CGPoint(x: 15.24, y: 3.09))
            wiFi.addCurve(to: CGPoint(x: 0.1, y: 3.03), controlPoint1: CGPoint(x: 10.96, y: -1.01), controlPoint2: CGPoint(x: 4.31, y: -1.01))
            wiFi.addCurve(to: CGPoint(x: 0, y: 3.26), controlPoint1: CGPoint(x: 0.04, y: 3.09), controlPoint2: CGPoint(x: 0, y: 3.17))
            wiFi.addCurve(to: CGPoint(x: 0.09, y: 3.49), controlPoint1: CGPoint(x: -0, y: 3.34), controlPoint2: CGPoint(x: 0.03, y: 3.42))
            wiFi.addLine(to: CGPoint(x: 1.25, y: 4.65))
            wiFi.addCurve(to: CGPoint(x: 1.68, y: 4.66), controlPoint1: CGPoint(x: 1.37, y: 4.77), controlPoint2: CGPoint(x: 1.56, y: 4.77))
            wiFi.addCurve(to: CGPoint(x: 7.64, y: 2.28), controlPoint1: CGPoint(x: 3.29, y: 3.13), controlPoint2: CGPoint(x: 5.42, y: 2.28))
            wiFi.close()
            wiFi.move(to: CGPoint(x: 7.64, y: 6.07))
            wiFi.addCurve(to: CGPoint(x: 10.93, y: 7.34), controlPoint1: CGPoint(x: 8.85, y: 6.07), controlPoint2: CGPoint(x: 10.03, y: 6.53))
            wiFi.addCurve(to: CGPoint(x: 11.36, y: 7.34), controlPoint1: CGPoint(x: 11.05, y: 7.46), controlPoint2: CGPoint(x: 11.24, y: 7.46))
            wiFi.addLine(to: CGPoint(x: 12.52, y: 6.17))
            wiFi.addCurve(to: CGPoint(x: 12.61, y: 5.94), controlPoint1: CGPoint(x: 12.58, y: 6.11), controlPoint2: CGPoint(x: 12.61, y: 6.03))
            wiFi.addCurve(to: CGPoint(x: 12.51, y: 5.71), controlPoint1: CGPoint(x: 12.61, y: 5.85), controlPoint2: CGPoint(x: 12.58, y: 5.77))
            wiFi.addCurve(to: CGPoint(x: 2.76, y: 5.71), controlPoint1: CGPoint(x: 9.77, y: 3.15), controlPoint2: CGPoint(x: 5.51, y: 3.15))
            wiFi.addCurve(to: CGPoint(x: 2.66, y: 5.94), controlPoint1: CGPoint(x: 2.7, y: 5.77), controlPoint2: CGPoint(x: 2.66, y: 5.85))
            wiFi.addCurve(to: CGPoint(x: 2.76, y: 6.17), controlPoint1: CGPoint(x: 2.66, y: 6.03), controlPoint2: CGPoint(x: 2.7, y: 6.11))
            wiFi.addLine(to: CGPoint(x: 3.91, y: 7.34))
            wiFi.addCurve(to: CGPoint(x: 4.34, y: 7.34), controlPoint1: CGPoint(x: 4.03, y: 7.46), controlPoint2: CGPoint(x: 4.22, y: 7.46))
            wiFi.addCurve(to: CGPoint(x: 7.64, y: 6.07), controlPoint1: CGPoint(x: 5.25, y: 6.53), controlPoint2: CGPoint(x: 6.42, y: 6.07))
            wiFi.close()
            wiFi.move(to: CGPoint(x: 9.86, y: 8.86))
            wiFi.addCurve(to: CGPoint(x: 9.95, y: 8.63), controlPoint1: CGPoint(x: 9.92, y: 8.8), controlPoint2: CGPoint(x: 9.95, y: 8.71))
            wiFi.addCurve(to: CGPoint(x: 9.85, y: 8.4), controlPoint1: CGPoint(x: 9.95, y: 8.54), controlPoint2: CGPoint(x: 9.91, y: 8.46))
            wiFi.addCurve(to: CGPoint(x: 5.43, y: 8.4), controlPoint1: CGPoint(x: 8.57, y: 7.32), controlPoint2: CGPoint(x: 6.7, y: 7.32))
            wiFi.addCurve(to: CGPoint(x: 5.32, y: 8.63), controlPoint1: CGPoint(x: 5.36, y: 8.46), controlPoint2: CGPoint(x: 5.33, y: 8.54))
            wiFi.addCurve(to: CGPoint(x: 5.42, y: 8.86), controlPoint1: CGPoint(x: 5.32, y: 8.71), controlPoint2: CGPoint(x: 5.36, y: 8.8))
            wiFi.addLine(to: CGPoint(x: 7.41, y: 10.87))
            wiFi.addCurve(to: CGPoint(x: 7.64, y: 10.97), controlPoint1: CGPoint(x: 7.47, y: 10.93), controlPoint2: CGPoint(x: 7.55, y: 10.97))
            wiFi.addCurve(to: CGPoint(x: 7.86, y: 10.87), controlPoint1: CGPoint(x: 7.72, y: 10.97), controlPoint2: CGPoint(x: 7.8, y: 10.93))
            wiFi.addLine(to: CGPoint(x: 9.86, y: 8.86))
            wiFi.close()
            context.saveGState()
            context.translateBy(x: 67, y: 1)
            wiFi.usesEvenOddFillRule = true
            UIColor.white.setFill()
            wiFi.fill()
            context.restoreGState()
            
            /// Carrier
            let carrier = NSMutableAttributedString(string: "Carrier")
            carrier.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 12)!, range: NSRange(location: 0, length: carrier.length))
            carrier.addAttribute(.kern, value: -0.02, range: NSRange(location: 0, length: carrier.length))
            carrier.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: carrier.length))
            context.saveGState()
            carrier.draw(at: CGPoint(x: 21, y: 0))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsStatusBackToAppWhite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 20)
        
        /// Right
        do {
            context.saveGState()
            context.translateBy(x: 193, y: 0)
            
            /// Battery
            do {
                context.saveGState()
                context.translateBy(x: 150, y: 4)
                
                /// Stroke
                let stroke = UIBezierPath()
                stroke.move(to: CGPoint(x: 21.5, y: 0))
                stroke.addCurve(to: CGPoint(x: 24, y: 2.5), controlPoint1: CGPoint(x: 23.02, y: 0), controlPoint2: CGPoint(x: 24, y: 0.98))
                stroke.addLine(to: CGPoint(x: 24, y: 9))
                stroke.addCurve(to: CGPoint(x: 21.5, y: 11.5), controlPoint1: CGPoint(x: 24, y: 10.52), controlPoint2: CGPoint(x: 23.02, y: 11.5))
                stroke.addLine(to: CGPoint(x: 2.5, y: 11.5))
                stroke.addCurve(to: CGPoint(x: 0, y: 9), controlPoint1: CGPoint(x: 0.98, y: 11.5), controlPoint2: CGPoint(x: 0, y: 10.52))
                stroke.addLine(to: CGPoint(x: 0, y: 2.5))
                stroke.addCurve(to: CGPoint(x: 2.5, y: 0), controlPoint1: CGPoint(x: 0, y: 0.98), controlPoint2: CGPoint(x: 0.98, y: 0))
                stroke.addLine(to: CGPoint(x: 21.5, y: 0))
                stroke.close()
                stroke.move(to: CGPoint(x: 21.4, y: 1))
                stroke.addLine(to: CGPoint(x: 2.6, y: 1))
                stroke.addCurve(to: CGPoint(x: 1, y: 2.6), controlPoint1: CGPoint(x: 1.63, y: 1), controlPoint2: CGPoint(x: 1, y: 1.63))
                stroke.addLine(to: CGPoint(x: 1, y: 8.9))
                stroke.addCurve(to: CGPoint(x: 2.6, y: 10.5), controlPoint1: CGPoint(x: 1, y: 9.87), controlPoint2: CGPoint(x: 1.63, y: 10.5))
                stroke.addLine(to: CGPoint(x: 21.4, y: 10.5))
                stroke.addCurve(to: CGPoint(x: 23, y: 8.9), controlPoint1: CGPoint(x: 22.37, y: 10.5), controlPoint2: CGPoint(x: 23, y: 9.87))
                stroke.addLine(to: CGPoint(x: 23, y: 2.6))
                stroke.addCurve(to: CGPoint(x: 21.4, y: 1), controlPoint1: CGPoint(x: 23, y: 1.63), controlPoint2: CGPoint(x: 22.37, y: 1))
                stroke.close()
                stroke.move(to: CGPoint(x: 25, y: 3.75))
                stroke.addCurve(to: CGPoint(x: 26.5, y: 5.75), controlPoint1: CGPoint(x: 26, y: 3.92), controlPoint2: CGPoint(x: 26.5, y: 4.58))
                stroke.addCurve(to: CGPoint(x: 25, y: 7.75), controlPoint1: CGPoint(x: 26.5, y: 6.92), controlPoint2: CGPoint(x: 26, y: 7.58))
                stroke.addLine(to: CGPoint(x: 25, y: 3.75))
                stroke.close()
                context.saveGState()
                context.setAlpha(0.4)
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    context.translateBy(x: 0, y: 0.5)
                    stroke.usesEvenOddFillRule = true
                    UIColor.white.setFill()
                    stroke.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                
                /// Path
                let path = UIBezierPath()
                path.move(to: CGPoint(x: 19, y: 0))
                path.addCurve(to: CGPoint(x: 20, y: 1), controlPoint1: CGPoint(x: 19.61, y: 0), controlPoint2: CGPoint(x: 20, y: 0.39))
                path.addLine(to: CGPoint(x: 20, y: 6.5))
                path.addCurve(to: CGPoint(x: 19, y: 7.5), controlPoint1: CGPoint(x: 20, y: 7.11), controlPoint2: CGPoint(x: 19.61, y: 7.5))
                path.addLine(to: CGPoint(x: 1, y: 7.5))
                path.addCurve(to: CGPoint(x: 0, y: 6.5), controlPoint1: CGPoint(x: 0.39, y: 7.5), controlPoint2: CGPoint(x: 0, y: 7.11))
                path.addLine(to: CGPoint(x: 0, y: 1))
                path.addCurve(to: CGPoint(x: 1, y: 0), controlPoint1: CGPoint(x: 0, y: 0.39), controlPoint2: CGPoint(x: 0.39, y: 0))
                path.addLine(to: CGPoint(x: 19, y: 0))
                path.close()
                context.saveGState()
                context.translateBy(x: 2, y: 2.5)
                path.usesEvenOddFillRule = true
                UIColor.white.setFill()
                path.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        /// Center
        do {
            context.saveGState()
            context.translateBy(x: 97, y: 0)
            
            /// ↳ Time
            let time = NSMutableAttributedString(string: "9:41 AM")
            time.addAttribute(.font, value: UIFont(name: "SFProText-Semibold", size: 12)!, range: NSRange(location: 0, length: time.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                time.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: time.length))
            }
            time.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: time.length))
            context.saveGState()
            time.draw(in: CGRect(x: 67.01, y: 3, width: 49, height: 16))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Container
        do {
            context.saveGState()
            context.translateBy(x: 4, y: 3)
            
            /// Back
            let back = UIBezierPath()
            back.move(to: CGPoint(x: 12, y: 8.52))
            back.addLine(to: CGPoint(x: 12, y: 8.92))
            back.addCurve(to: CGPoint(x: 11.99, y: 9.26), controlPoint1: CGPoint(x: 12, y: 9.04), controlPoint2: CGPoint(x: 12, y: 9.15))
            back.addCurve(to: CGPoint(x: 11.93, y: 9.99), controlPoint1: CGPoint(x: 11.99, y: 9.5), controlPoint2: CGPoint(x: 11.97, y: 9.75))
            back.addCurve(to: CGPoint(x: 11.7, y: 10.68), controlPoint1: CGPoint(x: 11.89, y: 10.23), controlPoint2: CGPoint(x: 11.81, y: 10.46))
            back.addCurve(to: CGPoint(x: 10.68, y: 11.7), controlPoint1: CGPoint(x: 11.47, y: 11.12), controlPoint2: CGPoint(x: 11.12, y: 11.48))
            back.addCurve(to: CGPoint(x: 9.99, y: 11.93), controlPoint1: CGPoint(x: 10.46, y: 11.81), controlPoint2: CGPoint(x: 10.23, y: 11.89))
            back.addCurve(to: CGPoint(x: 9.26, y: 12), controlPoint1: CGPoint(x: 9.74, y: 11.97), controlPoint2: CGPoint(x: 9.5, y: 11.99))
            back.addCurve(to: CGPoint(x: 8.92, y: 12), controlPoint1: CGPoint(x: 9.14, y: 12), controlPoint2: CGPoint(x: 9.03, y: 12))
            back.addLine(to: CGPoint(x: 8.52, y: 12))
            back.addLine(to: CGPoint(x: 3.47, y: 12))
            back.addLine(to: CGPoint(x: 3.07, y: 12))
            back.addCurve(to: CGPoint(x: 2.74, y: 12), controlPoint1: CGPoint(x: 2.96, y: 12), controlPoint2: CGPoint(x: 2.85, y: 12))
            back.addCurve(to: CGPoint(x: 2.01, y: 11.93), controlPoint1: CGPoint(x: 2.49, y: 11.99), controlPoint2: CGPoint(x: 2.25, y: 11.97))
            back.addCurve(to: CGPoint(x: 1.31, y: 11.7), controlPoint1: CGPoint(x: 1.77, y: 11.89), controlPoint2: CGPoint(x: 1.53, y: 11.81))
            back.addCurve(to: CGPoint(x: 0.29, y: 10.68), controlPoint1: CGPoint(x: 0.87, y: 11.48), controlPoint2: CGPoint(x: 0.52, y: 11.12))
            back.addCurve(to: CGPoint(x: 0.07, y: 9.99), controlPoint1: CGPoint(x: 0.18, y: 10.46), controlPoint2: CGPoint(x: 0.11, y: 10.23))
            back.addCurve(to: CGPoint(x: 0, y: 9.26), controlPoint1: CGPoint(x: 0.03, y: 9.75), controlPoint2: CGPoint(x: 0, y: 9.5))
            back.addCurve(to: CGPoint(x: 0, y: 8.92), controlPoint1: CGPoint(x: 0, y: 9.15), controlPoint2: CGPoint(x: 0, y: 9.03))
            back.addLine(to: CGPoint(x: 0, y: 8.52))
            back.addLine(to: CGPoint(x: 0, y: 3.47))
            back.addLine(to: CGPoint(x: 0, y: 3.07))
            back.addCurve(to: CGPoint(x: 0, y: 2.74), controlPoint1: CGPoint(x: 0, y: 2.96), controlPoint2: CGPoint(x: 0, y: 2.85))
            back.addCurve(to: CGPoint(x: 0.07, y: 2.01), controlPoint1: CGPoint(x: 0.01, y: 2.49), controlPoint2: CGPoint(x: 0.03, y: 2.25))
            back.addCurve(to: CGPoint(x: 0.3, y: 1.32), controlPoint1: CGPoint(x: 0.11, y: 1.77), controlPoint2: CGPoint(x: 0.19, y: 1.54))
            back.addCurve(to: CGPoint(x: 1.32, y: 0.3), controlPoint1: CGPoint(x: 0.52, y: 0.88), controlPoint2: CGPoint(x: 0.88, y: 0.52))
            back.addCurve(to: CGPoint(x: 2.01, y: 0.07), controlPoint1: CGPoint(x: 1.54, y: 0.19), controlPoint2: CGPoint(x: 1.77, y: 0.11))
            back.addCurve(to: CGPoint(x: 2.74, y: 0.01), controlPoint1: CGPoint(x: 2.25, y: 0.03), controlPoint2: CGPoint(x: 2.5, y: 0.01))
            back.addCurve(to: CGPoint(x: 3.08, y: 0), controlPoint1: CGPoint(x: 2.85, y: 0), controlPoint2: CGPoint(x: 2.97, y: 0))
            back.addLine(to: CGPoint(x: 3.48, y: 0))
            back.addLine(to: CGPoint(x: 8.52, y: 0))
            back.addLine(to: CGPoint(x: 8.92, y: 0))
            back.addCurve(to: CGPoint(x: 9.26, y: 0), controlPoint1: CGPoint(x: 9.04, y: 0), controlPoint2: CGPoint(x: 9.15, y: 0))
            back.addCurve(to: CGPoint(x: 9.99, y: 0.07), controlPoint1: CGPoint(x: 9.5, y: 0.01), controlPoint2: CGPoint(x: 9.75, y: 0.03))
            back.addCurve(to: CGPoint(x: 10.68, y: 0.3), controlPoint1: CGPoint(x: 10.23, y: 0.11), controlPoint2: CGPoint(x: 10.46, y: 0.19))
            back.addCurve(to: CGPoint(x: 11.7, y: 1.32), controlPoint1: CGPoint(x: 11.12, y: 0.52), controlPoint2: CGPoint(x: 11.48, y: 0.88))
            back.addCurve(to: CGPoint(x: 11.93, y: 2.01), controlPoint1: CGPoint(x: 11.81, y: 1.54), controlPoint2: CGPoint(x: 11.89, y: 1.77))
            back.addCurve(to: CGPoint(x: 12, y: 2.74), controlPoint1: CGPoint(x: 11.97, y: 2.25), controlPoint2: CGPoint(x: 11.99, y: 2.5))
            back.addCurve(to: CGPoint(x: 12, y: 3.08), controlPoint1: CGPoint(x: 12, y: 2.85), controlPoint2: CGPoint(x: 12, y: 2.96))
            back.addLine(to: CGPoint(x: 12, y: 3.48))
            back.addLine(to: CGPoint(x: 12, y: 8.53))
            back.addLine(to: CGPoint(x: 12, y: 8.52))
            back.close()
            back.move(to: CGPoint(x: 6.88, y: 2.11))
            back.addLine(to: CGPoint(x: 3, y: 6))
            back.addLine(to: CGPoint(x: 6.86, y: 9.86))
            back.addLine(to: CGPoint(x: 7.88, y: 8.89))
            back.addLine(to: CGPoint(x: 5, y: 6))
            back.addLine(to: CGPoint(x: 7.92, y: 3.07))
            back.addLine(to: CGPoint(x: 6.88, y: 2.11))
            back.close()
            context.saveGState()
            context.translateBy(x: 0, y: 1)
            back.usesEvenOddFillRule = true
            UIColor.white.setFill()
            back.fill()
            context.restoreGState()
            
            /// App Name
            let appName = NSMutableAttributedString(string: "App Name")
            appName.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 12)!, range: NSRange(location: 0, length: appName.length))
            appName.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: appName.length))
            context.saveGState()
            appName.draw(at: CGPoint(x: 16, y: 0))
            context.restoreGState()
            
            /// Signal
            let signal = UIBezierPath()
            signal.move(to: CGPoint(x: 2.06, y: 5.5))
            signal.addCurve(to: CGPoint(x: 3.09, y: 6.5), controlPoint1: CGPoint(x: 2.69, y: 5.5), controlPoint2: CGPoint(x: 3.09, y: 5.89))
            signal.addLine(to: CGPoint(x: 3.09, y: 9))
            signal.addCurve(to: CGPoint(x: 2.06, y: 10), controlPoint1: CGPoint(x: 3.09, y: 9.61), controlPoint2: CGPoint(x: 2.69, y: 10))
            signal.addLine(to: CGPoint(x: 1.03, y: 10))
            signal.addCurve(to: CGPoint(x: 0, y: 9), controlPoint1: CGPoint(x: 0.41, y: 10), controlPoint2: CGPoint(x: 0, y: 9.61))
            signal.addLine(to: CGPoint(x: 0, y: 6.5))
            signal.addCurve(to: CGPoint(x: 1.03, y: 5.5), controlPoint1: CGPoint(x: 0, y: 5.89), controlPoint2: CGPoint(x: 0.41, y: 5.5))
            signal.addLine(to: CGPoint(x: 2.06, y: 5.5))
            signal.close()
            signal.move(to: CGPoint(x: 15.97, y: 0))
            signal.addCurve(to: CGPoint(x: 17, y: 1), controlPoint1: CGPoint(x: 16.59, y: 0), controlPoint2: CGPoint(x: 17, y: 0.39))
            signal.addLine(to: CGPoint(x: 17, y: 9))
            signal.addCurve(to: CGPoint(x: 15.97, y: 10), controlPoint1: CGPoint(x: 17, y: 9.61), controlPoint2: CGPoint(x: 16.59, y: 10))
            signal.addLine(to: CGPoint(x: 14.94, y: 10))
            signal.addCurve(to: CGPoint(x: 13.91, y: 9), controlPoint1: CGPoint(x: 14.31, y: 10), controlPoint2: CGPoint(x: 13.91, y: 9.61))
            signal.addLine(to: CGPoint(x: 13.91, y: 1))
            signal.addCurve(to: CGPoint(x: 14.94, y: 0), controlPoint1: CGPoint(x: 13.91, y: 0.39), controlPoint2: CGPoint(x: 14.31, y: 0))
            signal.addLine(to: CGPoint(x: 15.97, y: 0))
            signal.close()
            signal.move(to: CGPoint(x: 11.33, y: 2))
            signal.addCurve(to: CGPoint(x: 12.36, y: 3), controlPoint1: CGPoint(x: 11.96, y: 2), controlPoint2: CGPoint(x: 12.36, y: 2.39))
            signal.addLine(to: CGPoint(x: 12.36, y: 9))
            signal.addCurve(to: CGPoint(x: 11.33, y: 10), controlPoint1: CGPoint(x: 12.36, y: 9.61), controlPoint2: CGPoint(x: 11.96, y: 10))
            signal.addLine(to: CGPoint(x: 10.3, y: 10))
            signal.addCurve(to: CGPoint(x: 9.27, y: 9), controlPoint1: CGPoint(x: 9.68, y: 10), controlPoint2: CGPoint(x: 9.27, y: 9.61))
            signal.addLine(to: CGPoint(x: 9.27, y: 3))
            signal.addCurve(to: CGPoint(x: 10.3, y: 2), controlPoint1: CGPoint(x: 9.27, y: 2.39), controlPoint2: CGPoint(x: 9.68, y: 2))
            signal.addLine(to: CGPoint(x: 11.33, y: 2))
            signal.close()
            signal.move(to: CGPoint(x: 6.7, y: 4))
            signal.addCurve(to: CGPoint(x: 7.73, y: 5), controlPoint1: CGPoint(x: 7.32, y: 4), controlPoint2: CGPoint(x: 7.73, y: 4.39))
            signal.addLine(to: CGPoint(x: 7.73, y: 9))
            signal.addCurve(to: CGPoint(x: 6.7, y: 10), controlPoint1: CGPoint(x: 7.73, y: 9.61), controlPoint2: CGPoint(x: 7.32, y: 10))
            signal.addLine(to: CGPoint(x: 5.67, y: 10))
            signal.addCurve(to: CGPoint(x: 4.64, y: 9), controlPoint1: CGPoint(x: 5.04, y: 10), controlPoint2: CGPoint(x: 4.64, y: 9.61))
            signal.addLine(to: CGPoint(x: 4.64, y: 5))
            signal.addCurve(to: CGPoint(x: 5.67, y: 4), controlPoint1: CGPoint(x: 4.64, y: 4.39), controlPoint2: CGPoint(x: 5.04, y: 4))
            signal.addLine(to: CGPoint(x: 6.7, y: 4))
            signal.close()
            context.saveGState()
            context.translateBy(x: 81, y: 2)
            signal.usesEvenOddFillRule = true
            UIColor.white.setFill()
            signal.fill()
            context.restoreGState()
            
            /// Wi-Fi
            let wiFi = UIBezierPath()
            wiFi.move(to: CGPoint(x: 7.64, y: 2.28))
            wiFi.addCurve(to: CGPoint(x: 13.59, y: 4.66), controlPoint1: CGPoint(x: 9.85, y: 2.28), controlPoint2: CGPoint(x: 11.98, y: 3.13))
            wiFi.addCurve(to: CGPoint(x: 14.02, y: 4.65), controlPoint1: CGPoint(x: 13.71, y: 4.77), controlPoint2: CGPoint(x: 13.9, y: 4.77))
            wiFi.addLine(to: CGPoint(x: 15.18, y: 3.49))
            wiFi.addCurve(to: CGPoint(x: 15.27, y: 3.26), controlPoint1: CGPoint(x: 15.24, y: 3.42), controlPoint2: CGPoint(x: 15.27, y: 3.34))
            wiFi.addCurve(to: CGPoint(x: 15.18, y: 3.03), controlPoint1: CGPoint(x: 15.27, y: 3.17), controlPoint2: CGPoint(x: 15.24, y: 3.09))
            wiFi.addCurve(to: CGPoint(x: 0.1, y: 3.03), controlPoint1: CGPoint(x: 10.96, y: -1.01), controlPoint2: CGPoint(x: 4.31, y: -1.01))
            wiFi.addCurve(to: CGPoint(x: 0, y: 3.26), controlPoint1: CGPoint(x: 0.04, y: 3.09), controlPoint2: CGPoint(x: 0, y: 3.17))
            wiFi.addCurve(to: CGPoint(x: 0.09, y: 3.49), controlPoint1: CGPoint(x: -0, y: 3.34), controlPoint2: CGPoint(x: 0.03, y: 3.42))
            wiFi.addLine(to: CGPoint(x: 1.25, y: 4.65))
            wiFi.addCurve(to: CGPoint(x: 1.68, y: 4.66), controlPoint1: CGPoint(x: 1.37, y: 4.77), controlPoint2: CGPoint(x: 1.56, y: 4.77))
            wiFi.addCurve(to: CGPoint(x: 7.64, y: 2.28), controlPoint1: CGPoint(x: 3.29, y: 3.13), controlPoint2: CGPoint(x: 5.42, y: 2.28))
            wiFi.close()
            wiFi.move(to: CGPoint(x: 7.64, y: 6.07))
            wiFi.addCurve(to: CGPoint(x: 10.93, y: 7.34), controlPoint1: CGPoint(x: 8.85, y: 6.07), controlPoint2: CGPoint(x: 10.03, y: 6.53))
            wiFi.addCurve(to: CGPoint(x: 11.36, y: 7.34), controlPoint1: CGPoint(x: 11.05, y: 7.46), controlPoint2: CGPoint(x: 11.24, y: 7.46))
            wiFi.addLine(to: CGPoint(x: 12.52, y: 6.17))
            wiFi.addCurve(to: CGPoint(x: 12.61, y: 5.94), controlPoint1: CGPoint(x: 12.58, y: 6.11), controlPoint2: CGPoint(x: 12.61, y: 6.03))
            wiFi.addCurve(to: CGPoint(x: 12.51, y: 5.71), controlPoint1: CGPoint(x: 12.61, y: 5.85), controlPoint2: CGPoint(x: 12.58, y: 5.77))
            wiFi.addCurve(to: CGPoint(x: 2.76, y: 5.71), controlPoint1: CGPoint(x: 9.77, y: 3.15), controlPoint2: CGPoint(x: 5.51, y: 3.15))
            wiFi.addCurve(to: CGPoint(x: 2.66, y: 5.94), controlPoint1: CGPoint(x: 2.7, y: 5.77), controlPoint2: CGPoint(x: 2.66, y: 5.85))
            wiFi.addCurve(to: CGPoint(x: 2.76, y: 6.17), controlPoint1: CGPoint(x: 2.66, y: 6.03), controlPoint2: CGPoint(x: 2.7, y: 6.11))
            wiFi.addLine(to: CGPoint(x: 3.91, y: 7.34))
            wiFi.addCurve(to: CGPoint(x: 4.34, y: 7.34), controlPoint1: CGPoint(x: 4.03, y: 7.46), controlPoint2: CGPoint(x: 4.22, y: 7.46))
            wiFi.addCurve(to: CGPoint(x: 7.64, y: 6.07), controlPoint1: CGPoint(x: 5.25, y: 6.53), controlPoint2: CGPoint(x: 6.42, y: 6.07))
            wiFi.close()
            wiFi.move(to: CGPoint(x: 9.86, y: 8.86))
            wiFi.addCurve(to: CGPoint(x: 9.95, y: 8.63), controlPoint1: CGPoint(x: 9.92, y: 8.8), controlPoint2: CGPoint(x: 9.95, y: 8.71))
            wiFi.addCurve(to: CGPoint(x: 9.85, y: 8.4), controlPoint1: CGPoint(x: 9.95, y: 8.54), controlPoint2: CGPoint(x: 9.91, y: 8.46))
            wiFi.addCurve(to: CGPoint(x: 5.43, y: 8.4), controlPoint1: CGPoint(x: 8.57, y: 7.32), controlPoint2: CGPoint(x: 6.7, y: 7.32))
            wiFi.addCurve(to: CGPoint(x: 5.32, y: 8.63), controlPoint1: CGPoint(x: 5.36, y: 8.46), controlPoint2: CGPoint(x: 5.33, y: 8.54))
            wiFi.addCurve(to: CGPoint(x: 5.42, y: 8.86), controlPoint1: CGPoint(x: 5.32, y: 8.71), controlPoint2: CGPoint(x: 5.36, y: 8.8))
            wiFi.addLine(to: CGPoint(x: 7.41, y: 10.87))
            wiFi.addCurve(to: CGPoint(x: 7.64, y: 10.97), controlPoint1: CGPoint(x: 7.47, y: 10.93), controlPoint2: CGPoint(x: 7.55, y: 10.97))
            wiFi.addCurve(to: CGPoint(x: 7.86, y: 10.87), controlPoint1: CGPoint(x: 7.72, y: 10.97), controlPoint2: CGPoint(x: 7.8, y: 10.93))
            wiFi.addLine(to: CGPoint(x: 9.86, y: 8.86))
            wiFi.close()
            context.saveGState()
            context.translateBy(x: 104, y: 1)
            wiFi.usesEvenOddFillRule = true
            UIColor.white.setFill()
            wiFi.fill()
            context.restoreGState()
            
            /// Wi-Fi (Outline Mask)
            context.saveGState()
            wiFi.apply(CGAffineTransform(translationX: 104, y: 1))
            wiFi.addClip()
            
            // Empty.
            
            context.restoreGState()
            // End Wi-Fi (Outline Mask)
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsStatusAction(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 40), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 40)
        
        /// Background
        do {
            context.saveGState()
            
            /// • Fill
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        /// ↳ Notification
        let notification = NSMutableAttributedString(string: "Notification")
        notification.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 12)!, range: NSRange(location: 0, length: notification.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            notification.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: notification.length))
        }
        notification.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: notification.length))
        context.saveGState()
        notification.draw(in: CGRect(x: 154.82, y: 22, width: 66.35, height: 16))
        context.restoreGState()
        
        /// Right
        do {
            context.saveGState()
            context.translateBy(x: 193.97, y: 0)
            
            /// Battery
            do {
                context.saveGState()
                context.translateBy(x: 149.03, y: 4)
                
                /// Stroke
                let stroke = UIBezierPath()
                stroke.move(to: CGPoint(x: 21.5, y: 0))
                stroke.addCurve(to: CGPoint(x: 24, y: 2.5), controlPoint1: CGPoint(x: 23.02, y: 0), controlPoint2: CGPoint(x: 24, y: 0.98))
                stroke.addLine(to: CGPoint(x: 24, y: 9))
                stroke.addCurve(to: CGPoint(x: 21.5, y: 11.5), controlPoint1: CGPoint(x: 24, y: 10.52), controlPoint2: CGPoint(x: 23.02, y: 11.5))
                stroke.addLine(to: CGPoint(x: 2.5, y: 11.5))
                stroke.addCurve(to: CGPoint(x: 0, y: 9), controlPoint1: CGPoint(x: 0.98, y: 11.5), controlPoint2: CGPoint(x: 0, y: 10.52))
                stroke.addLine(to: CGPoint(x: 0, y: 2.5))
                stroke.addCurve(to: CGPoint(x: 2.5, y: 0), controlPoint1: CGPoint(x: 0, y: 0.98), controlPoint2: CGPoint(x: 0.98, y: 0))
                stroke.addLine(to: CGPoint(x: 21.5, y: 0))
                stroke.close()
                stroke.move(to: CGPoint(x: 21.4, y: 1))
                stroke.addLine(to: CGPoint(x: 2.6, y: 1))
                stroke.addCurve(to: CGPoint(x: 1, y: 2.6), controlPoint1: CGPoint(x: 1.63, y: 1), controlPoint2: CGPoint(x: 1, y: 1.63))
                stroke.addLine(to: CGPoint(x: 1, y: 8.9))
                stroke.addCurve(to: CGPoint(x: 2.6, y: 10.5), controlPoint1: CGPoint(x: 1, y: 9.87), controlPoint2: CGPoint(x: 1.63, y: 10.5))
                stroke.addLine(to: CGPoint(x: 21.4, y: 10.5))
                stroke.addCurve(to: CGPoint(x: 23, y: 8.9), controlPoint1: CGPoint(x: 22.37, y: 10.5), controlPoint2: CGPoint(x: 23, y: 9.87))
                stroke.addLine(to: CGPoint(x: 23, y: 2.6))
                stroke.addCurve(to: CGPoint(x: 21.4, y: 1), controlPoint1: CGPoint(x: 23, y: 1.63), controlPoint2: CGPoint(x: 22.37, y: 1))
                stroke.close()
                stroke.move(to: CGPoint(x: 25, y: 3.75))
                stroke.addCurve(to: CGPoint(x: 26.5, y: 5.75), controlPoint1: CGPoint(x: 26, y: 3.92), controlPoint2: CGPoint(x: 26.5, y: 4.58))
                stroke.addCurve(to: CGPoint(x: 25, y: 7.75), controlPoint1: CGPoint(x: 26.5, y: 6.92), controlPoint2: CGPoint(x: 26, y: 7.58))
                stroke.addLine(to: CGPoint(x: 25, y: 3.75))
                stroke.close()
                context.saveGState()
                context.setAlpha(0.4)
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    context.translateBy(x: 0, y: 0.5)
                    stroke.usesEvenOddFillRule = true
                    UIColor.white.setFill()
                    stroke.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                
                /// Path
                let path = UIBezierPath()
                path.move(to: CGPoint(x: 19, y: 0))
                path.addCurve(to: CGPoint(x: 20, y: 1), controlPoint1: CGPoint(x: 19.61, y: 0), controlPoint2: CGPoint(x: 20, y: 0.39))
                path.addLine(to: CGPoint(x: 20, y: 6.5))
                path.addCurve(to: CGPoint(x: 19, y: 7.5), controlPoint1: CGPoint(x: 20, y: 7.11), controlPoint2: CGPoint(x: 19.61, y: 7.5))
                path.addLine(to: CGPoint(x: 1, y: 7.5))
                path.addCurve(to: CGPoint(x: 0, y: 6.5), controlPoint1: CGPoint(x: 0.39, y: 7.5), controlPoint2: CGPoint(x: 0, y: 7.11))
                path.addLine(to: CGPoint(x: 0, y: 1))
                path.addCurve(to: CGPoint(x: 1, y: 0), controlPoint1: CGPoint(x: 0, y: 0.39), controlPoint2: CGPoint(x: 0.39, y: 0))
                path.addLine(to: CGPoint(x: 19, y: 0))
                path.close()
                context.saveGState()
                context.translateBy(x: 2, y: 2.5)
                path.usesEvenOddFillRule = true
                UIColor.white.setFill()
                path.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        /// Center
        do {
            context.saveGState()
            context.translateBy(x: 97, y: 0)
            
            /// ↳ Time
            let time = NSMutableAttributedString(string: "9:41 AM")
            time.addAttribute(.font, value: UIFont(name: "SFProText-Semibold", size: 12)!, range: NSRange(location: 0, length: time.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                time.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: time.length))
            }
            time.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: time.length))
            context.saveGState()
            time.draw(in: CGRect(x: 67.01, y: 3, width: 49, height: 16))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Container
        do {
            context.saveGState()
            context.translateBy(x: 5, y: 3)
            
            /// Signal
            let signal = UIBezierPath()
            signal.move(to: CGPoint(x: 2.06, y: 5.5))
            signal.addCurve(to: CGPoint(x: 3.09, y: 6.5), controlPoint1: CGPoint(x: 2.69, y: 5.5), controlPoint2: CGPoint(x: 3.09, y: 5.89))
            signal.addLine(to: CGPoint(x: 3.09, y: 9))
            signal.addCurve(to: CGPoint(x: 2.06, y: 10), controlPoint1: CGPoint(x: 3.09, y: 9.61), controlPoint2: CGPoint(x: 2.69, y: 10))
            signal.addLine(to: CGPoint(x: 1.03, y: 10))
            signal.addCurve(to: CGPoint(x: 0, y: 9), controlPoint1: CGPoint(x: 0.41, y: 10), controlPoint2: CGPoint(x: 0, y: 9.61))
            signal.addLine(to: CGPoint(x: 0, y: 6.5))
            signal.addCurve(to: CGPoint(x: 1.03, y: 5.5), controlPoint1: CGPoint(x: 0, y: 5.89), controlPoint2: CGPoint(x: 0.41, y: 5.5))
            signal.addLine(to: CGPoint(x: 2.06, y: 5.5))
            signal.close()
            signal.move(to: CGPoint(x: 15.97, y: 0))
            signal.addCurve(to: CGPoint(x: 17, y: 1), controlPoint1: CGPoint(x: 16.59, y: 0), controlPoint2: CGPoint(x: 17, y: 0.39))
            signal.addLine(to: CGPoint(x: 17, y: 9))
            signal.addCurve(to: CGPoint(x: 15.97, y: 10), controlPoint1: CGPoint(x: 17, y: 9.61), controlPoint2: CGPoint(x: 16.59, y: 10))
            signal.addLine(to: CGPoint(x: 14.94, y: 10))
            signal.addCurve(to: CGPoint(x: 13.91, y: 9), controlPoint1: CGPoint(x: 14.31, y: 10), controlPoint2: CGPoint(x: 13.91, y: 9.61))
            signal.addLine(to: CGPoint(x: 13.91, y: 1))
            signal.addCurve(to: CGPoint(x: 14.94, y: 0), controlPoint1: CGPoint(x: 13.91, y: 0.39), controlPoint2: CGPoint(x: 14.31, y: 0))
            signal.addLine(to: CGPoint(x: 15.97, y: 0))
            signal.close()
            signal.move(to: CGPoint(x: 11.33, y: 2))
            signal.addCurve(to: CGPoint(x: 12.36, y: 3), controlPoint1: CGPoint(x: 11.96, y: 2), controlPoint2: CGPoint(x: 12.36, y: 2.39))
            signal.addLine(to: CGPoint(x: 12.36, y: 9))
            signal.addCurve(to: CGPoint(x: 11.33, y: 10), controlPoint1: CGPoint(x: 12.36, y: 9.61), controlPoint2: CGPoint(x: 11.96, y: 10))
            signal.addLine(to: CGPoint(x: 10.3, y: 10))
            signal.addCurve(to: CGPoint(x: 9.27, y: 9), controlPoint1: CGPoint(x: 9.68, y: 10), controlPoint2: CGPoint(x: 9.27, y: 9.61))
            signal.addLine(to: CGPoint(x: 9.27, y: 3))
            signal.addCurve(to: CGPoint(x: 10.3, y: 2), controlPoint1: CGPoint(x: 9.27, y: 2.39), controlPoint2: CGPoint(x: 9.68, y: 2))
            signal.addLine(to: CGPoint(x: 11.33, y: 2))
            signal.close()
            signal.move(to: CGPoint(x: 6.7, y: 4))
            signal.addCurve(to: CGPoint(x: 7.73, y: 5), controlPoint1: CGPoint(x: 7.32, y: 4), controlPoint2: CGPoint(x: 7.73, y: 4.39))
            signal.addLine(to: CGPoint(x: 7.73, y: 9))
            signal.addCurve(to: CGPoint(x: 6.7, y: 10), controlPoint1: CGPoint(x: 7.73, y: 9.61), controlPoint2: CGPoint(x: 7.32, y: 10))
            signal.addLine(to: CGPoint(x: 5.67, y: 10))
            signal.addCurve(to: CGPoint(x: 4.64, y: 9), controlPoint1: CGPoint(x: 5.04, y: 10), controlPoint2: CGPoint(x: 4.64, y: 9.61))
            signal.addLine(to: CGPoint(x: 4.64, y: 5))
            signal.addCurve(to: CGPoint(x: 5.67, y: 4), controlPoint1: CGPoint(x: 4.64, y: 4.39), controlPoint2: CGPoint(x: 5.04, y: 4))
            signal.addLine(to: CGPoint(x: 6.7, y: 4))
            signal.close()
            context.saveGState()
            context.translateBy(x: 0, y: 2)
            signal.usesEvenOddFillRule = true
            UIColor.white.setFill()
            signal.fill()
            context.restoreGState()
            
            /// Wi-Fi
            let wiFi = UIBezierPath()
            wiFi.move(to: CGPoint(x: 7.64, y: 2.28))
            wiFi.addCurve(to: CGPoint(x: 13.59, y: 4.66), controlPoint1: CGPoint(x: 9.85, y: 2.28), controlPoint2: CGPoint(x: 11.98, y: 3.13))
            wiFi.addCurve(to: CGPoint(x: 14.02, y: 4.65), controlPoint1: CGPoint(x: 13.71, y: 4.77), controlPoint2: CGPoint(x: 13.9, y: 4.77))
            wiFi.addLine(to: CGPoint(x: 15.18, y: 3.49))
            wiFi.addCurve(to: CGPoint(x: 15.27, y: 3.26), controlPoint1: CGPoint(x: 15.24, y: 3.42), controlPoint2: CGPoint(x: 15.27, y: 3.34))
            wiFi.addCurve(to: CGPoint(x: 15.18, y: 3.03), controlPoint1: CGPoint(x: 15.27, y: 3.17), controlPoint2: CGPoint(x: 15.24, y: 3.09))
            wiFi.addCurve(to: CGPoint(x: 0.1, y: 3.03), controlPoint1: CGPoint(x: 10.96, y: -1.01), controlPoint2: CGPoint(x: 4.31, y: -1.01))
            wiFi.addCurve(to: CGPoint(x: 0, y: 3.26), controlPoint1: CGPoint(x: 0.04, y: 3.09), controlPoint2: CGPoint(x: 0, y: 3.17))
            wiFi.addCurve(to: CGPoint(x: 0.09, y: 3.49), controlPoint1: CGPoint(x: -0, y: 3.34), controlPoint2: CGPoint(x: 0.03, y: 3.42))
            wiFi.addLine(to: CGPoint(x: 1.25, y: 4.65))
            wiFi.addCurve(to: CGPoint(x: 1.68, y: 4.66), controlPoint1: CGPoint(x: 1.37, y: 4.77), controlPoint2: CGPoint(x: 1.56, y: 4.77))
            wiFi.addCurve(to: CGPoint(x: 7.64, y: 2.28), controlPoint1: CGPoint(x: 3.29, y: 3.13), controlPoint2: CGPoint(x: 5.42, y: 2.28))
            wiFi.close()
            wiFi.move(to: CGPoint(x: 7.64, y: 6.07))
            wiFi.addCurve(to: CGPoint(x: 10.93, y: 7.34), controlPoint1: CGPoint(x: 8.85, y: 6.07), controlPoint2: CGPoint(x: 10.03, y: 6.53))
            wiFi.addCurve(to: CGPoint(x: 11.36, y: 7.34), controlPoint1: CGPoint(x: 11.05, y: 7.46), controlPoint2: CGPoint(x: 11.24, y: 7.46))
            wiFi.addLine(to: CGPoint(x: 12.52, y: 6.17))
            wiFi.addCurve(to: CGPoint(x: 12.61, y: 5.94), controlPoint1: CGPoint(x: 12.58, y: 6.11), controlPoint2: CGPoint(x: 12.61, y: 6.03))
            wiFi.addCurve(to: CGPoint(x: 12.51, y: 5.71), controlPoint1: CGPoint(x: 12.61, y: 5.85), controlPoint2: CGPoint(x: 12.58, y: 5.77))
            wiFi.addCurve(to: CGPoint(x: 2.76, y: 5.71), controlPoint1: CGPoint(x: 9.77, y: 3.15), controlPoint2: CGPoint(x: 5.51, y: 3.15))
            wiFi.addCurve(to: CGPoint(x: 2.66, y: 5.94), controlPoint1: CGPoint(x: 2.7, y: 5.77), controlPoint2: CGPoint(x: 2.66, y: 5.85))
            wiFi.addCurve(to: CGPoint(x: 2.76, y: 6.17), controlPoint1: CGPoint(x: 2.66, y: 6.03), controlPoint2: CGPoint(x: 2.7, y: 6.11))
            wiFi.addLine(to: CGPoint(x: 3.91, y: 7.34))
            wiFi.addCurve(to: CGPoint(x: 4.34, y: 7.34), controlPoint1: CGPoint(x: 4.03, y: 7.46), controlPoint2: CGPoint(x: 4.22, y: 7.46))
            wiFi.addCurve(to: CGPoint(x: 7.64, y: 6.07), controlPoint1: CGPoint(x: 5.25, y: 6.53), controlPoint2: CGPoint(x: 6.42, y: 6.07))
            wiFi.close()
            wiFi.move(to: CGPoint(x: 9.86, y: 8.86))
            wiFi.addCurve(to: CGPoint(x: 9.95, y: 8.63), controlPoint1: CGPoint(x: 9.92, y: 8.8), controlPoint2: CGPoint(x: 9.95, y: 8.71))
            wiFi.addCurve(to: CGPoint(x: 9.85, y: 8.4), controlPoint1: CGPoint(x: 9.95, y: 8.54), controlPoint2: CGPoint(x: 9.91, y: 8.46))
            wiFi.addCurve(to: CGPoint(x: 5.43, y: 8.4), controlPoint1: CGPoint(x: 8.57, y: 7.32), controlPoint2: CGPoint(x: 6.7, y: 7.32))
            wiFi.addCurve(to: CGPoint(x: 5.32, y: 8.63), controlPoint1: CGPoint(x: 5.36, y: 8.46), controlPoint2: CGPoint(x: 5.33, y: 8.54))
            wiFi.addCurve(to: CGPoint(x: 5.42, y: 8.86), controlPoint1: CGPoint(x: 5.32, y: 8.71), controlPoint2: CGPoint(x: 5.36, y: 8.8))
            wiFi.addLine(to: CGPoint(x: 7.41, y: 10.87))
            wiFi.addCurve(to: CGPoint(x: 7.64, y: 10.97), controlPoint1: CGPoint(x: 7.47, y: 10.93), controlPoint2: CGPoint(x: 7.55, y: 10.97))
            wiFi.addCurve(to: CGPoint(x: 7.86, y: 10.87), controlPoint1: CGPoint(x: 7.72, y: 10.97), controlPoint2: CGPoint(x: 7.8, y: 10.93))
            wiFi.addLine(to: CGPoint(x: 9.86, y: 8.86))
            wiFi.close()
            context.saveGState()
            context.translateBy(x: 67, y: 1)
            wiFi.usesEvenOddFillRule = true
            UIColor.white.setFill()
            wiFi.fill()
            context.restoreGState()
            
            /// Carrier
            let carrier = NSMutableAttributedString(string: "Carrier")
            carrier.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 12)!, range: NSRange(location: 0, length: carrier.length))
            carrier.addAttribute(.kern, value: -0.02, range: NSRange(location: 0, length: carrier.length))
            carrier.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: carrier.length))
            context.saveGState()
            carrier.draw(at: CGPoint(x: 21, y: 0))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawIPhoneX_StatusBarTime(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 180, height: 22), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 180, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 180, y: resizedFrame.height / 22)
        
        /// ↳ Time
        let time = NSMutableAttributedString(string: "9:41")
        time.addAttribute(.font, value: UIFont(name: "SFProText-Semibold", size: 14)!, range: NSRange(location: 0, length: time.length))
        time.addAttribute(.kern, value: -0.15, range: NSRange(location: 0, length: time.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            time.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: time.length))
        }
        context.saveGState()
        time.draw(in: CGRect(x: 20, y: 4, width: 54, height: 18))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawIPhoneX_StatusBarTimeWhite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 180, height: 22), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 180, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 180, y: resizedFrame.height / 22)
        
        /// ↳ Time
        let time = NSMutableAttributedString(string: "9:41")
        time.addAttribute(.font, value: UIFont(name: "SFProText-Semibold", size: 14)!, range: NSRange(location: 0, length: time.length))
        time.addAttribute(.kern, value: -0.15, range: NSRange(location: 0, length: time.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            time.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: time.length))
        }
        time.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: time.length))
        context.saveGState()
        time.draw(in: CGRect(x: 20, y: 4, width: 54, height: 18))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawIPhoneX_StatusBarActionGreen(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 180, height: 22), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 180, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 180, y: resizedFrame.height / 22)
        
        /// Mask
        let mask = UIBezierPath()
        mask.move(to: CGPoint(x: 10.5, y: 0))
        mask.addLine(to: CGPoint(x: 43.5, y: 0))
        mask.addCurve(to: CGPoint(x: 54, y: 10.5), controlPoint1: CGPoint(x: 49.3, y: 0), controlPoint2: CGPoint(x: 54, y: 4.7))
        mask.addLine(to: CGPoint(x: 54, y: 10.5))
        mask.addCurve(to: CGPoint(x: 43.5, y: 21), controlPoint1: CGPoint(x: 54, y: 16.3), controlPoint2: CGPoint(x: 49.3, y: 21))
        mask.addLine(to: CGPoint(x: 10.5, y: 21))
        mask.addCurve(to: CGPoint(x: 0, y: 10.5), controlPoint1: CGPoint(x: 4.7, y: 21), controlPoint2: CGPoint(x: 0, y: 16.3))
        mask.addLine(to: CGPoint(x: 0, y: 10.5))
        mask.addCurve(to: CGPoint(x: 10.5, y: 0), controlPoint1: CGPoint(x: 0, y: 4.7), controlPoint2: CGPoint(x: 4.7, y: 0))
        mask.close()
        context.saveGState()
        context.translateBy(x: 20, y: 1)
        UIColor(hue: 0.362, saturation: 0.65, brightness: 0.851, alpha: 1).setFill()
        mask.fill()
        context.restoreGState()
        
        /// Mask (Outline Mask)
        context.saveGState()
        mask.apply(CGAffineTransform(translationX: 20, y: 1))
        mask.addClip()
        
        /// Task Color
        do {
            context.saveGState()
            context.translateBy(x: 20, y: 1)
            
            /// Rectangle
            let rectangle8 = UIBezierPath()
            rectangle8.move(to: CGPoint.zero)
            rectangle8.addLine(to: CGPoint(x: 54, y: 0))
            rectangle8.addLine(to: CGPoint(x: 54, y: 21))
            rectangle8.addLine(to: CGPoint(x: 0, y: 21))
            rectangle8.addLine(to: CGPoint.zero)
            rectangle8.close()
            context.saveGState()
            rectangle8.usesEvenOddFillRule = true
            UIColor(hue: 0.362, saturation: 0.65, brightness: 0.851, alpha: 1).setFill()
            rectangle8.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// ↳ Time
        let time = NSMutableAttributedString(string: "9:41")
        time.addAttribute(.font, value: UIFont(name: "SFProText-Semibold", size: 15)!, range: NSRange(location: 0, length: time.length))
        time.addAttribute(.kern, value: -0.15, range: NSRange(location: 0, length: 3))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            time.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: time.length))
        }
        time.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: time.length))
        context.saveGState()
        time.draw(in: CGRect(x: 20, y: 3, width: 54, height: 20))
        context.restoreGState()
        
        context.restoreGState()
        // End Mask (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawIPhoneX_StatusBarActionRed(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 180, height: 22), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 180, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 180, y: resizedFrame.height / 22)
        
        /// Mask
        let mask = UIBezierPath()
        mask.move(to: CGPoint(x: 10.5, y: 0))
        mask.addLine(to: CGPoint(x: 43.5, y: 0))
        mask.addCurve(to: CGPoint(x: 54, y: 10.5), controlPoint1: CGPoint(x: 49.3, y: 0), controlPoint2: CGPoint(x: 54, y: 4.7))
        mask.addLine(to: CGPoint(x: 54, y: 10.5))
        mask.addCurve(to: CGPoint(x: 43.5, y: 21), controlPoint1: CGPoint(x: 54, y: 16.3), controlPoint2: CGPoint(x: 49.3, y: 21))
        mask.addLine(to: CGPoint(x: 10.5, y: 21))
        mask.addCurve(to: CGPoint(x: 0, y: 10.5), controlPoint1: CGPoint(x: 4.7, y: 21), controlPoint2: CGPoint(x: 0, y: 16.3))
        mask.addLine(to: CGPoint(x: 0, y: 10.5))
        mask.addCurve(to: CGPoint(x: 10.5, y: 0), controlPoint1: CGPoint(x: 0, y: 4.7), controlPoint2: CGPoint(x: 4.7, y: 0))
        mask.close()
        context.saveGState()
        context.translateBy(x: 20, y: 1)
        UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
        mask.fill()
        context.restoreGState()
        
        /// Mask (Outline Mask)
        context.saveGState()
        mask.apply(CGAffineTransform(translationX: 20, y: 1))
        mask.addClip()
        
        /// Task Color
        do {
            context.saveGState()
            context.translateBy(x: 20, y: 1)
            
            /// Rectangle
            let rectangle8 = UIBezierPath()
            rectangle8.move(to: CGPoint.zero)
            rectangle8.addLine(to: CGPoint(x: 54, y: 0))
            rectangle8.addLine(to: CGPoint(x: 54, y: 21))
            rectangle8.addLine(to: CGPoint(x: 0, y: 21))
            rectangle8.addLine(to: CGPoint.zero)
            rectangle8.close()
            context.saveGState()
            rectangle8.usesEvenOddFillRule = true
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            rectangle8.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// ↳ Time
        let time = NSMutableAttributedString(string: "9:41")
        time.addAttribute(.font, value: UIFont(name: "SFProText-Semibold", size: 15)!, range: NSRange(location: 0, length: time.length))
        time.addAttribute(.kern, value: -0.15, range: NSRange(location: 0, length: 3))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            time.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: time.length))
        }
        time.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: time.length))
        context.saveGState()
        time.draw(in: CGRect(x: 20, y: 2, width: 54, height: 20))
        context.restoreGState()
        
        context.restoreGState()
        // End Mask (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawIPhoneX_StatusBarActionBlue(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 180, height: 22), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 180, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 180, y: resizedFrame.height / 22)
        
        /// Mask
        let mask = UIBezierPath()
        mask.move(to: CGPoint(x: 10.5, y: 0))
        mask.addLine(to: CGPoint(x: 43.5, y: 0))
        mask.addCurve(to: CGPoint(x: 54, y: 10.5), controlPoint1: CGPoint(x: 49.3, y: 0), controlPoint2: CGPoint(x: 54, y: 4.7))
        mask.addLine(to: CGPoint(x: 54, y: 10.5))
        mask.addCurve(to: CGPoint(x: 43.5, y: 21), controlPoint1: CGPoint(x: 54, y: 16.3), controlPoint2: CGPoint(x: 49.3, y: 21))
        mask.addLine(to: CGPoint(x: 10.5, y: 21))
        mask.addCurve(to: CGPoint(x: 0, y: 10.5), controlPoint1: CGPoint(x: 4.7, y: 21), controlPoint2: CGPoint(x: 0, y: 16.3))
        mask.addLine(to: CGPoint(x: 0, y: 10.5))
        mask.addCurve(to: CGPoint(x: 10.5, y: 0), controlPoint1: CGPoint(x: 0, y: 4.7), controlPoint2: CGPoint(x: 4.7, y: 0))
        mask.close()
        context.saveGState()
        context.translateBy(x: 20, y: 1)
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        mask.fill()
        context.restoreGState()
        
        /// Mask (Outline Mask)
        context.saveGState()
        mask.apply(CGAffineTransform(translationX: 20, y: 1))
        mask.addClip()
        
        /// Task Color
        do {
            context.saveGState()
            context.translateBy(x: 20, y: 1)
            
            /// Rectangle
            let rectangle8 = UIBezierPath()
            rectangle8.move(to: CGPoint.zero)
            rectangle8.addLine(to: CGPoint(x: 54, y: 0))
            rectangle8.addLine(to: CGPoint(x: 54, y: 21))
            rectangle8.addLine(to: CGPoint(x: 0, y: 21))
            rectangle8.addLine(to: CGPoint.zero)
            rectangle8.close()
            context.saveGState()
            rectangle8.usesEvenOddFillRule = true
            UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
            rectangle8.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// ↳ Time
        let time = NSMutableAttributedString(string: "9:41")
        time.addAttribute(.font, value: UIFont(name: "SFProText-Semibold", size: 14)!, range: NSRange(location: 0, length: time.length))
        time.addAttribute(.kern, value: -0.15, range: NSRange(location: 0, length: time.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            time.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: time.length))
        }
        time.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: time.length))
        context.saveGState()
        time.draw(in: CGRect(x: 20, y: 4, width: 54, height: 18))
        context.restoreGState()
        
        context.restoreGState()
        // End Mask (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawBarsNavigationLarge(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 116), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 116), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 116)
        
        /// Background
        // Warning: New symbols are not supported.
        
        /// Right
        // Warning: New symbols are not supported.
        
        /// ↳ Title
        let title = NSMutableAttributedString(string: "Title")
        title.addAttribute(.font, value: UIFont(name: "SFProDisplay-Bold", size: 34)!, range: NSRange(location: 0, length: title.length))
        title.addAttribute(.kern, value: 0.41, range: NSRange(location: 0, length: title.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 41
            paragraphStyle.minimumLineHeight = 41
            title.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
        }
        context.saveGState()
        title.draw(at: CGPoint(x: 16, y: 65))
        context.restoreGState()
        
        /// Top Right
        // Warning: New symbols are not supported.
        
        /// Top Center
        // Warning: New symbols are not supported.
        
        /// Top Left
        // Warning: New symbols are not supported.
        
        /// Status Bar
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsNavigationDefault(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 64), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 64), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 64)
        
        /// Background
        // Warning: New symbols are not supported.
        
        /// Right
        // Warning: New symbols are not supported.
        
        /// Center
        // Warning: New symbols are not supported.
        
        /// Left
        // Warning: New symbols are not supported.
        
        /// Status Bar
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawIPhoneXBarsNavigationDefault(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 88), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 88), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 88)
        
        /// Background
        // Warning: New symbols are not supported.
        
        /// Right
        // Warning: New symbols are not supported.
        
        /// Center
        // Warning: New symbols are not supported.
        
        /// Left
        // Warning: New symbols are not supported.
        
        /// Status Bar
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawIPhoneXBarsNavigationLarge(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 140), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 140), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 140)
        
        /// Background
        // Warning: New symbols are not supported.
        
        /// Right
        // Warning: New symbols are not supported.
        
        /// ↳ Title
        let title = NSMutableAttributedString(string: "Title")
        title.addAttribute(.font, value: UIFont(name: "SFProDisplay-Bold", size: 34)!, range: NSRange(location: 0, length: title.length))
        title.addAttribute(.kern, value: 0.41, range: NSRange(location: 0, length: title.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 41
            paragraphStyle.minimumLineHeight = 41
            title.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
        }
        context.saveGState()
        title.draw(at: CGPoint(x: 16, y: 89))
        context.restoreGState()
        
        /// Top Right
        // Warning: New symbols are not supported.
        
        /// Top Center
        // Warning: New symbols are not supported.
        
        /// Top Left
        // Warning: New symbols are not supported.
        
        /// Status Bar
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsNavigation_LGlyph(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 100)
        
        /// Glyph
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsNavigation_LBack(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 100)
        
        /// Button
        do {
            context.saveGState()
            context.translateBy(x: 8, y: 39)
            
            /// Arrow
            let arrow = UIBezierPath()
            arrow.move(to: CGPoint(x: 9.54, y: 20.08))
            arrow.addLine(to: CGPoint(x: 0.29, y: 10.95))
            arrow.addCurve(to: CGPoint(x: 0.29, y: 9.55), controlPoint1: CGPoint(x: -0.1, y: 10.56), controlPoint2: CGPoint(x: -0.1, y: 9.94))
            arrow.addLine(to: CGPoint(x: 9.54, y: 0.42))
            arrow.addCurve(to: CGPoint(x: 11.58, y: 0.42), controlPoint1: CGPoint(x: 10.1, y: -0.14), controlPoint2: CGPoint(x: 11.01, y: -0.14))
            arrow.addCurve(to: CGPoint(x: 11.58, y: 2.43), controlPoint1: CGPoint(x: 12.14, y: 0.97), controlPoint2: CGPoint(x: 12.14, y: 1.88))
            arrow.addLine(to: CGPoint(x: 3.67, y: 10.25))
            arrow.addLine(to: CGPoint(x: 11.58, y: 18.07))
            arrow.addCurve(to: CGPoint(x: 11.58, y: 20.08), controlPoint1: CGPoint(x: 12.14, y: 18.62), controlPoint2: CGPoint(x: 12.14, y: 19.53))
            arrow.addCurve(to: CGPoint(x: 9.54, y: 20.08), controlPoint1: CGPoint(x: 11.01, y: 20.64), controlPoint2: CGPoint(x: 10.1, y: 20.64))
            context.saveGState()
            context.translateBy(x: 0.5, y: 0.5)
            arrow.usesEvenOddFillRule = true
            UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
            arrow.fill()
            context.restoreGState()
            
            /// ↳ Label
            let label = NSMutableAttributedString(string: "Back")
            label.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: label.length))
            label.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: label.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
            }
            label.addAttribute(.foregroundColor, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
            context.saveGState()
            label.draw(at: CGPoint(x: 18, y: 0))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsNavigation_LLabel2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 100)
        
        /// ↳ Label
        let label = NSMutableAttributedString(string: "Label")
        label.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        label.addAttribute(.foregroundColor, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
        context.saveGState()
        label.draw(at: CGPoint(x: 16, y: 39))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBarsNavigation_LLabelPrimary(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 100)
        
        /// ↳ Label
        let label = NSMutableAttributedString(string: "Label")
        label.addAttribute(.font, value: UIFont(name: "SFProText-Semibold", size: 17)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        label.addAttribute(.foregroundColor, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
        context.saveGState()
        label.draw(at: CGPoint(x: 16, y: 39))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBarsNavigation_LLabel(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 100)
        
        /// ↳ Label
        let label = NSMutableAttributedString(string: "Label")
        label.addAttribute(.font, value: UIFont(name: "SFProText-Semibold", size: 13)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(.kern, value: -0.08, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 18
            paragraphStyle.minimumLineHeight = 18
            label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        context.saveGState()
        context.setAlpha(0.4)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            label.draw(at: CGPoint(x: 16, y: 79))
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBarsNavigation_LBackWhite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 100)
        
        /// Button
        do {
            context.saveGState()
            context.translateBy(x: 8, y: 39)
            
            /// Arrow
            let arrow = UIBezierPath()
            arrow.move(to: CGPoint(x: 9.54, y: 20.08))
            arrow.addLine(to: CGPoint(x: 0.29, y: 10.95))
            arrow.addCurve(to: CGPoint(x: 0.29, y: 9.55), controlPoint1: CGPoint(x: -0.1, y: 10.56), controlPoint2: CGPoint(x: -0.1, y: 9.94))
            arrow.addLine(to: CGPoint(x: 9.54, y: 0.42))
            arrow.addCurve(to: CGPoint(x: 11.58, y: 0.42), controlPoint1: CGPoint(x: 10.1, y: -0.14), controlPoint2: CGPoint(x: 11.01, y: -0.14))
            arrow.addCurve(to: CGPoint(x: 11.58, y: 2.43), controlPoint1: CGPoint(x: 12.14, y: 0.97), controlPoint2: CGPoint(x: 12.14, y: 1.88))
            arrow.addLine(to: CGPoint(x: 3.67, y: 10.25))
            arrow.addLine(to: CGPoint(x: 11.58, y: 18.07))
            arrow.addCurve(to: CGPoint(x: 11.58, y: 20.08), controlPoint1: CGPoint(x: 12.14, y: 18.62), controlPoint2: CGPoint(x: 12.14, y: 19.53))
            arrow.addCurve(to: CGPoint(x: 9.54, y: 20.08), controlPoint1: CGPoint(x: 11.01, y: 20.64), controlPoint2: CGPoint(x: 10.1, y: 20.64))
            context.saveGState()
            context.translateBy(x: 0.5, y: 0.5)
            arrow.usesEvenOddFillRule = true
            UIColor.white.setFill()
            arrow.fill()
            context.restoreGState()
            
            /// ↳ Label
            let label = NSMutableAttributedString(string: "Back")
            label.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: label.length))
            label.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: label.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
            }
            label.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: label.length))
            context.saveGState()
            label.draw(at: CGPoint(x: 18, y: 0))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsNavigation_LLabelWhite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 100)
        
        /// ↳ Label
        let label = NSMutableAttributedString(string: "Label")
        label.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        label.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: label.length))
        context.saveGState()
        label.draw(at: CGPoint(x: 16, y: 39))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBarsNavigation_LLabelPrimaryWhite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 100)
        
        /// ↳ Label
        let label = NSMutableAttributedString(string: "Label")
        label.addAttribute(.font, value: UIFont(name: "SFProText-Semibold", size: 17)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        label.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: label.length))
        context.saveGState()
        label.draw(at: CGPoint(x: 16, y: 39))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBarsNavigation_CHeadline(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 302, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 302, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 302, y: resizedFrame.height / 100)
        
        /// ↳ Title
        let title = NSMutableAttributedString(string: "Title")
        title.addAttribute(.font, value: UIFont(name: "SFProText-Semibold", size: 17)!, range: NSRange(location: 0, length: title.length))
        title.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: title.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            title.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
        }
        context.saveGState()
        title.draw(in: CGRect(x: 16, y: 39, width: 270, height: 25))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBarsNavigation_CHeadlineSubtitle(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 302, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 302, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 302, y: resizedFrame.height / 100)
        
        /// Container
        do {
            context.saveGState()
            context.translateBy(x: 16, y: 28)
            
            /// Muted
            context.saveGState()
            context.setAlpha(0.4)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 0, y: 18)
                
                /// ↳ Title
                let title = NSMutableAttributedString(string: "Subtitle")
                title.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 13)!, range: NSRange(location: 0, length: title.length))
                title.addAttribute(.kern, value: -0.08, range: NSRange(location: 0, length: title.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    paragraphStyle.maximumLineHeight = 18
                    paragraphStyle.minimumLineHeight = 18
                    title.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
                }
                context.saveGState()
                title.draw(in: CGRect(x: 0, y: 0, width: 270, height: 20))
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// ↳ Title
            let title2 = NSMutableAttributedString(string: "Title")
            title2.addAttribute(.font, value: UIFont(name: "SFProText-Semibold", size: 15)!, range: NSRange(location: 0, length: title2.length))
            title2.addAttribute(.kern, value: -0.24, range: NSRange(location: 0, length: title2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 20
                paragraphStyle.minimumLineHeight = 20
                title2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: title2.length))
            }
            context.saveGState()
            title2.draw(in: CGRect(x: 0, y: 0, width: 270, height: 22))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsNavigation_CSegmented(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 302, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 302, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 302, y: resizedFrame.height / 100)
        
        /// Quantity
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsNavigation_CHeadlineWhite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 302, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 302, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 302, y: resizedFrame.height / 100)
        
        /// ↳ Title
        let title = NSMutableAttributedString(string: "Title")
        title.addAttribute(.font, value: UIFont(name: "SFProText-Semibold", size: 17)!, range: NSRange(location: 0, length: title.length))
        title.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: title.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            title.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
        }
        title.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: title.length))
        context.saveGState()
        title.draw(in: CGRect(x: 16, y: 39, width: 270, height: 25))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBarsNavigation_RGlyph(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 304, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 304, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 304, y: resizedFrame.height / 100)
        
        /// Glyph
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsNavigation_RGlyphX2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 304, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 304, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 304, y: resizedFrame.height / 100)
        
        /// Container
        do {
            context.saveGState()
            context.translateBy(x: 220, y: 36)
            
            /// Glyph 2
            // Warning: New symbols are not supported.
            
            /// Glyph 1
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsNavigation_RAction(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 304, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 304, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 304, y: resizedFrame.height / 100)
        
        /// Action
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsNavigation_RNext(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 304, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 304, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 304, y: resizedFrame.height / 100)
        
        /// Button
        do {
            context.saveGState()
            context.translateBy(x: 242, y: 39)
            
            /// Arrow
            let arrow = UIBezierPath()
            arrow.move(to: CGPoint(x: 9.54, y: 20.08))
            arrow.addLine(to: CGPoint(x: 0.29, y: 10.95))
            arrow.addCurve(to: CGPoint(x: 0.29, y: 9.55), controlPoint1: CGPoint(x: -0.1, y: 10.56), controlPoint2: CGPoint(x: -0.1, y: 9.94))
            arrow.addLine(to: CGPoint(x: 9.54, y: 0.42))
            arrow.addCurve(to: CGPoint(x: 11.58, y: 0.42), controlPoint1: CGPoint(x: 10.1, y: -0.14), controlPoint2: CGPoint(x: 11.01, y: -0.14))
            arrow.addCurve(to: CGPoint(x: 11.58, y: 2.43), controlPoint1: CGPoint(x: 12.14, y: 0.97), controlPoint2: CGPoint(x: 12.14, y: 1.88))
            arrow.addLine(to: CGPoint(x: 3.67, y: 10.25))
            arrow.addLine(to: CGPoint(x: 11.58, y: 18.07))
            arrow.addCurve(to: CGPoint(x: 11.58, y: 20.08), controlPoint1: CGPoint(x: 12.14, y: 18.62), controlPoint2: CGPoint(x: 12.14, y: 19.53))
            arrow.addCurve(to: CGPoint(x: 9.54, y: 20.08), controlPoint1: CGPoint(x: 11.01, y: 20.64), controlPoint2: CGPoint(x: 10.1, y: 20.64))
            context.saveGState()
            context.translateBy(x: 47.88, y: 10.75)
            context.scaleBy(x: -1, y: 1)
            context.translateBy(x: -6, y: -10.25)
            arrow.usesEvenOddFillRule = true
            UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
            arrow.fill()
            context.restoreGState()
            
            /// ↳ Label
            let label = NSMutableAttributedString(string: "Next")
            label.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: label.length))
            label.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: label.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
            }
            label.addAttribute(.foregroundColor, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
            context.saveGState()
            label.draw(at: CGPoint.zero)
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsNavigation_RLabel(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 304, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 304, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 304, y: resizedFrame.height / 100)
        
        /// ↳ Label
        let label = NSMutableAttributedString(string: "Label")
        label.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .right
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        label.addAttribute(.foregroundColor, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
        context.saveGState()
        label.draw(at: CGPoint(x: 246, y: 39))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBarsNavigation_RLabelPrimary(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 304, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 304, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 304, y: resizedFrame.height / 100)
        
        /// ↳ Label
        let label = NSMutableAttributedString(string: "Label")
        label.addAttribute(.font, value: UIFont(name: "SFProText-Semibold", size: 17)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .right
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        label.addAttribute(.foregroundColor, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
        context.saveGState()
        label.draw(at: CGPoint(x: 244, y: 39))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBarsNavigation_RLabelPrimaryInactive(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 304, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 304, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 304, y: resizedFrame.height / 100)
        
        /// Muted
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 244, y: 39)
            
            /// ↳ Label
            let label = NSMutableAttributedString(string: "Label")
            label.addAttribute(.font, value: UIFont(name: "SFProText-Semibold", size: 17)!, range: NSRange(location: 0, length: label.length))
            label.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: label.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
            }
            context.saveGState()
            label.draw(at: CGPoint.zero)
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBarsNavigation_RBitmap(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 304, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 304, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 304, y: resizedFrame.height / 100)
        
        /// Bitmap
        let bitmap = UIBezierPath()
        bitmap.move(to: CGPoint(x: 17, y: 34))
        bitmap.addCurve(to: CGPoint(x: 34, y: 17), controlPoint1: CGPoint(x: 26.39, y: 34), controlPoint2: CGPoint(x: 34, y: 26.39))
        bitmap.addCurve(to: CGPoint(x: 17, y: 0), controlPoint1: CGPoint(x: 34, y: 7.61), controlPoint2: CGPoint(x: 26.39, y: 0))
        bitmap.addCurve(to: CGPoint(x: 0, y: 17), controlPoint1: CGPoint(x: 7.61, y: 0), controlPoint2: CGPoint(x: 0, y: 7.61))
        bitmap.addCurve(to: CGPoint(x: 17, y: 34), controlPoint1: CGPoint(x: 0, y: 26.39), controlPoint2: CGPoint(x: 7.61, y: 34))
        bitmap.close()
        context.saveGState()
        context.translateBy(x: 254, y: 30)
        bitmap.usesEvenOddFillRule = true
        context.saveGState()
        // Warning: Image fill is not supported.
        context.restoreGState()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBarsNavigation_RLabelPrimaryWhite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 304, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 304, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 304, y: resizedFrame.height / 100)
        
        /// ↳ Label
        let label = NSMutableAttributedString(string: "Label")
        label.addAttribute(.font, value: UIFont(name: "SFProText-Semibold", size: 17)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .right
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        label.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: label.length))
        context.saveGState()
        label.draw(at: CGPoint(x: 244, y: 39))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBarsNavigation_RNextWhite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 304, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 304, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 304, y: resizedFrame.height / 100)
        
        /// Button
        do {
            context.saveGState()
            context.translateBy(x: 242, y: 39)
            
            /// Arrow
            let arrow = UIBezierPath()
            arrow.move(to: CGPoint(x: 9.54, y: 20.08))
            arrow.addLine(to: CGPoint(x: 0.29, y: 10.95))
            arrow.addCurve(to: CGPoint(x: 0.29, y: 9.55), controlPoint1: CGPoint(x: -0.1, y: 10.56), controlPoint2: CGPoint(x: -0.1, y: 9.94))
            arrow.addLine(to: CGPoint(x: 9.54, y: 0.42))
            arrow.addCurve(to: CGPoint(x: 11.58, y: 0.42), controlPoint1: CGPoint(x: 10.1, y: -0.14), controlPoint2: CGPoint(x: 11.01, y: -0.14))
            arrow.addCurve(to: CGPoint(x: 11.58, y: 2.43), controlPoint1: CGPoint(x: 12.14, y: 0.97), controlPoint2: CGPoint(x: 12.14, y: 1.88))
            arrow.addLine(to: CGPoint(x: 3.67, y: 10.25))
            arrow.addLine(to: CGPoint(x: 11.58, y: 18.07))
            arrow.addCurve(to: CGPoint(x: 11.58, y: 20.08), controlPoint1: CGPoint(x: 12.14, y: 18.62), controlPoint2: CGPoint(x: 12.14, y: 19.53))
            arrow.addCurve(to: CGPoint(x: 9.54, y: 20.08), controlPoint1: CGPoint(x: 11.01, y: 20.64), controlPoint2: CGPoint(x: 10.1, y: 20.64))
            context.saveGState()
            context.translateBy(x: 47.88, y: 10.75)
            context.scaleBy(x: -1, y: 1)
            context.translateBy(x: -6, y: -10.25)
            arrow.usesEvenOddFillRule = true
            UIColor.white.setFill()
            arrow.fill()
            context.restoreGState()
            
            /// ↳ Label
            let label = NSMutableAttributedString(string: "Next")
            label.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: label.length))
            label.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: label.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
            }
            label.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: label.length))
            context.saveGState()
            label.draw(at: CGPoint.zero)
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsNavigation_RLabelWhite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 304, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 304, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 304, y: resizedFrame.height / 100)
        
        /// ↳ Label
        let label = NSMutableAttributedString(string: "Label")
        label.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .right
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        label.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: label.length))
        context.saveGState()
        label.draw(at: CGPoint(x: 246, y: 39))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBarsNavigation_RBottomGlyph(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 306, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 306, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 306, y: resizedFrame.height / 100)
        
        /// Glyph
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsNavigation_RBottomAction(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 306, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 306, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 306, y: resizedFrame.height / 100)
        
        /// Action
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsNavigation_RBottomLabel(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 306, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 306, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 306, y: resizedFrame.height / 100)
        
        /// ↳ Label
        let label = NSMutableAttributedString(string: "Label")
        label.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .right
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        label.addAttribute(.foregroundColor, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
        context.saveGState()
        label.draw(at: CGPoint(x: 248, y: 73))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBarsNavigation_RBottomBitmap(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 306, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 306, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 306, y: resizedFrame.height / 100)
        
        /// Bitmap
        let bitmap = UIBezierPath()
        bitmap.move(to: CGPoint(x: 19, y: 38))
        bitmap.addCurve(to: CGPoint(x: 38, y: 19), controlPoint1: CGPoint(x: 29.49, y: 38), controlPoint2: CGPoint(x: 38, y: 29.49))
        bitmap.addCurve(to: CGPoint(x: 19, y: 0), controlPoint1: CGPoint(x: 38, y: 8.51), controlPoint2: CGPoint(x: 29.49, y: 0))
        bitmap.addCurve(to: CGPoint(x: 0, y: 19), controlPoint1: CGPoint(x: 8.51, y: 0), controlPoint2: CGPoint(x: 0, y: 8.51))
        bitmap.addCurve(to: CGPoint(x: 19, y: 38), controlPoint1: CGPoint(x: 0, y: 29.49), controlPoint2: CGPoint(x: 8.51, y: 38))
        bitmap.close()
        context.saveGState()
        context.translateBy(x: 252, y: 31)
        bitmap.usesEvenOddFillRule = true
        context.saveGState()
        // Warning: Image fill is not supported.
        context.restoreGState()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBarsNavigation_RBottomButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 306, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 306, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 306, y: resizedFrame.height / 100)
        
        /// Button
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsTabsDefault(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 49), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 49), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 49)
        
        /// Background
        // Warning: New symbols are not supported.
        
        /// Quantity
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawIPhoneXBarsTabs(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 83), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 83), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 83)
        
        /// Background
        // Warning: New symbols are not supported.
        
        /// Quantity
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsTabs_2Items(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 320, height: 49), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 320, height: 49), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 320, y: resizedFrame.height / 49)
        
        /// 2 Items
        do {
            context.saveGState()
            
            /// Tab Two
            // Warning: New symbols are not supported.
            
            /// Tab One
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsTabs_3Items(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 320, height: 49), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 320, height: 49), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 320, y: resizedFrame.height / 49)
        
        /// 3 Items
        do {
            context.saveGState()
            
            /// Tab Three
            // Warning: New symbols are not supported.
            
            /// Tab Two
            // Warning: New symbols are not supported.
            
            /// Tab One
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsTabs_5Items(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 320, height: 49), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 320, height: 49), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 320, y: resizedFrame.height / 49)
        
        /// 5 Items
        do {
            context.saveGState()
            
            /// Tab Five
            // Warning: New symbols are not supported.
            
            /// Tab Four
            // Warning: New symbols are not supported.
            
            /// Tab Three
            // Warning: New symbols are not supported.
            
            /// Tab Two
            // Warning: New symbols are not supported.
            
            /// Tab One
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsTabs_Active(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 140, height: 49), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 140, height: 49), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 140, y: resizedFrame.height / 49)
        
        /// Container
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 5)
            
            /// ↳ Label
            let label = NSMutableAttributedString(string: "Label")
            label.addAttribute(.font, value: UIFont(name: "SFProText-Medium", size: 10)!, range: NSRange(location: 0, length: label.length))
            label.addAttribute(.kern, value: 0.16, range: NSRange(location: 0, length: label.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
            }
            label.addAttribute(.foregroundColor, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
            context.saveGState()
            label.draw(in: CGRect(x: 0, y: 30, width: 140, height: 14))
            context.restoreGState()
            
            /// Glyph
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsTabs_Inactive(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 140, height: 49), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 140, height: 49), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 140, y: resizedFrame.height / 49)
        
        /// Container
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 5)
            
            /// Label
            context.saveGState()
            context.setAlpha(0.52)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 0, y: 30)
                
                /// ↳ Label
                let label = NSMutableAttributedString(string: "Label")
                label.addAttribute(.font, value: UIFont(name: "SFProText-Medium", size: 10)!, range: NSRange(location: 0, length: label.length))
                label.addAttribute(.kern, value: 0.16, range: NSRange(location: 0, length: label.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
                }
                context.saveGState()
                label.draw(in: CGRect(x: 0, y: 0, width: 140, height: 14))
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Glyph
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsSearchForNavigationBar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 48), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 48), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 48)
        
        /// Background
        // Warning: New symbols are not supported.
        
        /// Search
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsSearchDefault(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 56), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 56), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 56)
        
        /// Background
        // Warning: New symbols are not supported.
        
        /// Search
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsSearch_Placeholder(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 280, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 280, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 280, y: resizedFrame.height / 100)
        
        /// Search Field
        let searchField = UIBezierPath()
        searchField.move(to: CGPoint(x: 12.82, y: 0))
        searchField.addLine(to: CGPoint(x: 235.18, y: 0))
        searchField.addCurve(to: CGPoint(x: 242.88, y: 1.34), controlPoint1: CGPoint(x: 239.64, y: 0), controlPoint2: CGPoint(x: 241.25, y: 0.46))
        searchField.addCurve(to: CGPoint(x: 246.66, y: 5.12), controlPoint1: CGPoint(x: 244.51, y: 2.21), controlPoint2: CGPoint(x: 245.79, y: 3.49))
        searchField.addCurve(to: CGPoint(x: 248, y: 12.82), controlPoint1: CGPoint(x: 247.54, y: 6.75), controlPoint2: CGPoint(x: 248, y: 8.36))
        searchField.addLine(to: CGPoint(x: 248, y: 23.18))
        searchField.addCurve(to: CGPoint(x: 246.66, y: 30.88), controlPoint1: CGPoint(x: 248, y: 27.64), controlPoint2: CGPoint(x: 247.54, y: 29.25))
        searchField.addCurve(to: CGPoint(x: 242.88, y: 34.66), controlPoint1: CGPoint(x: 245.79, y: 32.51), controlPoint2: CGPoint(x: 244.51, y: 33.79))
        searchField.addCurve(to: CGPoint(x: 235.18, y: 36), controlPoint1: CGPoint(x: 241.25, y: 35.54), controlPoint2: CGPoint(x: 239.64, y: 36))
        searchField.addLine(to: CGPoint(x: 12.82, y: 36))
        searchField.addCurve(to: CGPoint(x: 5.12, y: 34.66), controlPoint1: CGPoint(x: 8.36, y: 36), controlPoint2: CGPoint(x: 6.75, y: 35.54))
        searchField.addCurve(to: CGPoint(x: 1.34, y: 30.88), controlPoint1: CGPoint(x: 3.49, y: 33.79), controlPoint2: CGPoint(x: 2.21, y: 32.51))
        searchField.addCurve(to: CGPoint(x: 0, y: 23.18), controlPoint1: CGPoint(x: 0.46, y: 29.25), controlPoint2: CGPoint(x: 0, y: 27.64))
        searchField.addLine(to: CGPoint(x: 0, y: 12.82))
        searchField.addCurve(to: CGPoint(x: 1.34, y: 5.12), controlPoint1: CGPoint(x: 0, y: 8.36), controlPoint2: CGPoint(x: 0.46, y: 6.75))
        searchField.addCurve(to: CGPoint(x: 5.12, y: 1.34), controlPoint1: CGPoint(x: 2.21, y: 3.49), controlPoint2: CGPoint(x: 3.49, y: 2.21))
        searchField.addCurve(to: CGPoint(x: 12.82, y: 0), controlPoint1: CGPoint(x: 6.75, y: 0.46), controlPoint2: CGPoint(x: 8.36, y: 0))
        searchField.close()
        context.saveGState()
        context.translateBy(x: 16, y: 32)
        searchField.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 0.12).setFill()
        searchField.fill()
        context.restoreGState()
        
        /// Action
        // Warning: New symbols are not supported.
        
        /// Search
        // Warning: New symbols are not supported.
        
        /// Search
        let search2 = UIBezierPath()
        search2.move(to: CGPoint(x: 13.74, y: 12.57))
        search2.addLine(to: CGPoint(x: 9.91, y: 8.74))
        search2.addCurve(to: CGPoint(x: 10.96, y: 5.51), controlPoint1: CGPoint(x: 10.6, y: 7.8), controlPoint2: CGPoint(x: 10.97, y: 6.67))
        search2.addCurve(to: CGPoint(x: 5.46, y: 0), controlPoint1: CGPoint(x: 10.95, y: 2.47), controlPoint2: CGPoint(x: 8.49, y: 0.02))
        search2.addCurve(to: CGPoint(x: 1.59, y: 1.59), controlPoint1: CGPoint(x: 4.01, y: -0.01), controlPoint2: CGPoint(x: 2.62, y: 0.57))
        search2.addCurve(to: CGPoint(x: 0, y: 5.47), controlPoint1: CGPoint(x: 0.56, y: 2.62), controlPoint2: CGPoint(x: -0.01, y: 4.02))
        search2.addCurve(to: CGPoint(x: 5.5, y: 10.98), controlPoint1: CGPoint(x: 0.01, y: 8.5), controlPoint2: CGPoint(x: 2.47, y: 10.96))
        search2.addCurve(to: CGPoint(x: 8.74, y: 9.91), controlPoint1: CGPoint(x: 6.67, y: 10.98), controlPoint2: CGPoint(x: 7.8, y: 10.61))
        search2.addLine(to: CGPoint(x: 8.75, y: 9.91))
        search2.addLine(to: CGPoint(x: 12.58, y: 13.74))
        search2.addCurve(to: CGPoint(x: 13.38, y: 13.97), controlPoint1: CGPoint(x: 12.78, y: 13.96), controlPoint2: CGPoint(x: 13.09, y: 14.05))
        search2.addCurve(to: CGPoint(x: 13.97, y: 13.38), controlPoint1: CGPoint(x: 13.67, y: 13.9), controlPoint2: CGPoint(x: 13.9, y: 13.67))
        search2.addCurve(to: CGPoint(x: 13.74, y: 12.57), controlPoint1: CGPoint(x: 14.05, y: 13.09), controlPoint2: CGPoint(x: 13.96, y: 12.78))
        search2.addLine(to: CGPoint(x: 13.74, y: 12.57))
        search2.close()
        search2.move(to: CGPoint(x: 5.5, y: 9.88))
        search2.addCurve(to: CGPoint(x: 1.1, y: 5.47), controlPoint1: CGPoint(x: 3.07, y: 9.86), controlPoint2: CGPoint(x: 1.11, y: 7.9))
        search2.addCurve(to: CGPoint(x: 2.37, y: 2.37), controlPoint1: CGPoint(x: 1.09, y: 4.31), controlPoint2: CGPoint(x: 1.55, y: 3.2))
        search2.addCurve(to: CGPoint(x: 5.46, y: 1.1), controlPoint1: CGPoint(x: 3.19, y: 1.55), controlPoint2: CGPoint(x: 4.3, y: 1.09))
        search2.addCurve(to: CGPoint(x: 9.86, y: 5.5), controlPoint1: CGPoint(x: 7.89, y: 1.11), controlPoint2: CGPoint(x: 9.85, y: 3.08))
        search2.addCurve(to: CGPoint(x: 8.59, y: 8.6), controlPoint1: CGPoint(x: 9.87, y: 6.66), controlPoint2: CGPoint(x: 9.41, y: 7.78))
        search2.addCurve(to: CGPoint(x: 5.5, y: 9.88), controlPoint1: CGPoint(x: 7.77, y: 9.42), controlPoint2: CGPoint(x: 6.66, y: 9.88))
        search2.close()
        context.saveGState()
        context.translateBy(x: 26, y: 43)
        search2.usesEvenOddFillRule = true
        UIColor(white: 0, alpha: 0.36).setFill()
        search2.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBarsSearch_PlaceholderCancel(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 280, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 280, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 280, y: resizedFrame.height / 100)
        
        /// Cancel
        let cancel = NSMutableAttributedString(string: "Cancel")
        cancel.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: cancel.length))
        cancel.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: cancel.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .right
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            cancel.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: cancel.length))
        }
        cancel.addAttribute(.foregroundColor, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: cancel.length))
        context.saveGState()
        cancel.draw(at: CGPoint(x: 211, y: 39))
        context.restoreGState()
        
        /// Search Field
        let searchField = UIBezierPath()
        searchField.move(to: CGPoint(x: 12.82, y: 0))
        searchField.addLine(to: CGPoint(x: 170.18, y: 0))
        searchField.addCurve(to: CGPoint(x: 177.88, y: 1.34), controlPoint1: CGPoint(x: 174.64, y: 0), controlPoint2: CGPoint(x: 176.25, y: 0.46))
        searchField.addCurve(to: CGPoint(x: 181.66, y: 5.12), controlPoint1: CGPoint(x: 179.51, y: 2.21), controlPoint2: CGPoint(x: 180.79, y: 3.49))
        searchField.addCurve(to: CGPoint(x: 183, y: 12.82), controlPoint1: CGPoint(x: 182.54, y: 6.75), controlPoint2: CGPoint(x: 183, y: 8.36))
        searchField.addLine(to: CGPoint(x: 183, y: 23.18))
        searchField.addCurve(to: CGPoint(x: 181.66, y: 30.88), controlPoint1: CGPoint(x: 183, y: 27.64), controlPoint2: CGPoint(x: 182.54, y: 29.25))
        searchField.addCurve(to: CGPoint(x: 177.88, y: 34.66), controlPoint1: CGPoint(x: 180.79, y: 32.51), controlPoint2: CGPoint(x: 179.51, y: 33.79))
        searchField.addCurve(to: CGPoint(x: 170.18, y: 36), controlPoint1: CGPoint(x: 176.25, y: 35.54), controlPoint2: CGPoint(x: 174.64, y: 36))
        searchField.addLine(to: CGPoint(x: 12.82, y: 36))
        searchField.addCurve(to: CGPoint(x: 5.12, y: 34.66), controlPoint1: CGPoint(x: 8.36, y: 36), controlPoint2: CGPoint(x: 6.75, y: 35.54))
        searchField.addCurve(to: CGPoint(x: 1.34, y: 30.88), controlPoint1: CGPoint(x: 3.49, y: 33.79), controlPoint2: CGPoint(x: 2.21, y: 32.51))
        searchField.addCurve(to: CGPoint(x: 0, y: 23.18), controlPoint1: CGPoint(x: 0.46, y: 29.25), controlPoint2: CGPoint(x: 0, y: 27.64))
        searchField.addLine(to: CGPoint(x: 0, y: 12.82))
        searchField.addCurve(to: CGPoint(x: 1.34, y: 5.12), controlPoint1: CGPoint(x: 0, y: 8.36), controlPoint2: CGPoint(x: 0.46, y: 6.75))
        searchField.addCurve(to: CGPoint(x: 5.12, y: 1.34), controlPoint1: CGPoint(x: 2.21, y: 3.49), controlPoint2: CGPoint(x: 3.49, y: 2.21))
        searchField.addCurve(to: CGPoint(x: 12.82, y: 0), controlPoint1: CGPoint(x: 6.75, y: 0.46), controlPoint2: CGPoint(x: 8.36, y: 0))
        searchField.close()
        context.saveGState()
        context.translateBy(x: 16, y: 32)
        searchField.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 0.12).setFill()
        searchField.fill()
        context.restoreGState()
        
        /// Search
        // Warning: New symbols are not supported.
        
        /// Search
        let search2 = UIBezierPath()
        search2.move(to: CGPoint(x: 13.74, y: 12.57))
        search2.addLine(to: CGPoint(x: 9.91, y: 8.74))
        search2.addCurve(to: CGPoint(x: 10.96, y: 5.51), controlPoint1: CGPoint(x: 10.6, y: 7.8), controlPoint2: CGPoint(x: 10.97, y: 6.67))
        search2.addCurve(to: CGPoint(x: 5.46, y: 0), controlPoint1: CGPoint(x: 10.95, y: 2.47), controlPoint2: CGPoint(x: 8.49, y: 0.02))
        search2.addCurve(to: CGPoint(x: 1.59, y: 1.59), controlPoint1: CGPoint(x: 4.01, y: -0.01), controlPoint2: CGPoint(x: 2.62, y: 0.57))
        search2.addCurve(to: CGPoint(x: 0, y: 5.47), controlPoint1: CGPoint(x: 0.56, y: 2.62), controlPoint2: CGPoint(x: -0.01, y: 4.02))
        search2.addCurve(to: CGPoint(x: 5.5, y: 10.98), controlPoint1: CGPoint(x: 0.01, y: 8.5), controlPoint2: CGPoint(x: 2.47, y: 10.96))
        search2.addCurve(to: CGPoint(x: 8.74, y: 9.91), controlPoint1: CGPoint(x: 6.67, y: 10.98), controlPoint2: CGPoint(x: 7.8, y: 10.61))
        search2.addLine(to: CGPoint(x: 8.75, y: 9.91))
        search2.addLine(to: CGPoint(x: 12.58, y: 13.74))
        search2.addCurve(to: CGPoint(x: 13.38, y: 13.97), controlPoint1: CGPoint(x: 12.78, y: 13.96), controlPoint2: CGPoint(x: 13.09, y: 14.05))
        search2.addCurve(to: CGPoint(x: 13.97, y: 13.38), controlPoint1: CGPoint(x: 13.67, y: 13.9), controlPoint2: CGPoint(x: 13.9, y: 13.67))
        search2.addCurve(to: CGPoint(x: 13.74, y: 12.57), controlPoint1: CGPoint(x: 14.05, y: 13.09), controlPoint2: CGPoint(x: 13.96, y: 12.78))
        search2.addLine(to: CGPoint(x: 13.74, y: 12.57))
        search2.close()
        search2.move(to: CGPoint(x: 5.5, y: 9.88))
        search2.addCurve(to: CGPoint(x: 1.1, y: 5.47), controlPoint1: CGPoint(x: 3.07, y: 9.86), controlPoint2: CGPoint(x: 1.11, y: 7.9))
        search2.addCurve(to: CGPoint(x: 2.37, y: 2.37), controlPoint1: CGPoint(x: 1.09, y: 4.31), controlPoint2: CGPoint(x: 1.55, y: 3.2))
        search2.addCurve(to: CGPoint(x: 5.46, y: 1.1), controlPoint1: CGPoint(x: 3.19, y: 1.55), controlPoint2: CGPoint(x: 4.3, y: 1.09))
        search2.addCurve(to: CGPoint(x: 9.86, y: 5.5), controlPoint1: CGPoint(x: 7.89, y: 1.11), controlPoint2: CGPoint(x: 9.85, y: 3.08))
        search2.addCurve(to: CGPoint(x: 8.59, y: 8.6), controlPoint1: CGPoint(x: 9.87, y: 6.66), controlPoint2: CGPoint(x: 9.41, y: 7.78))
        search2.addCurve(to: CGPoint(x: 5.5, y: 9.88), controlPoint1: CGPoint(x: 7.77, y: 9.42), controlPoint2: CGPoint(x: 6.66, y: 9.88))
        search2.close()
        context.saveGState()
        context.translateBy(x: 26, y: 43)
        search2.usesEvenOddFillRule = true
        UIColor(white: 0, alpha: 0.36).setFill()
        search2.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBarsSearch_PlaceholderActive(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 280, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 280, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 280, y: resizedFrame.height / 100)
        
        /// Container
        do {
            context.saveGState()
            context.translateBy(x: 16, y: 32)
            
            /// Cancel
            let cancel = NSMutableAttributedString(string: "Cancel")
            cancel.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: cancel.length))
            cancel.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: cancel.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                cancel.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: cancel.length))
            }
            cancel.addAttribute(.foregroundColor, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: cancel.length))
            context.saveGState()
            cancel.draw(at: CGPoint(x: 195, y: 7))
            context.restoreGState()
            
            /// Search Field
            let searchField = UIBezierPath()
            searchField.move(to: CGPoint(x: 12.82, y: 0))
            searchField.addLine(to: CGPoint(x: 170.18, y: 0))
            searchField.addCurve(to: CGPoint(x: 177.88, y: 1.34), controlPoint1: CGPoint(x: 174.64, y: 0), controlPoint2: CGPoint(x: 176.25, y: 0.46))
            searchField.addCurve(to: CGPoint(x: 181.66, y: 5.12), controlPoint1: CGPoint(x: 179.51, y: 2.21), controlPoint2: CGPoint(x: 180.79, y: 3.49))
            searchField.addCurve(to: CGPoint(x: 183, y: 12.82), controlPoint1: CGPoint(x: 182.54, y: 6.75), controlPoint2: CGPoint(x: 183, y: 8.36))
            searchField.addLine(to: CGPoint(x: 183, y: 23.18))
            searchField.addCurve(to: CGPoint(x: 181.66, y: 30.88), controlPoint1: CGPoint(x: 183, y: 27.64), controlPoint2: CGPoint(x: 182.54, y: 29.25))
            searchField.addCurve(to: CGPoint(x: 177.88, y: 34.66), controlPoint1: CGPoint(x: 180.79, y: 32.51), controlPoint2: CGPoint(x: 179.51, y: 33.79))
            searchField.addCurve(to: CGPoint(x: 170.18, y: 36), controlPoint1: CGPoint(x: 176.25, y: 35.54), controlPoint2: CGPoint(x: 174.64, y: 36))
            searchField.addLine(to: CGPoint(x: 12.82, y: 36))
            searchField.addCurve(to: CGPoint(x: 5.12, y: 34.66), controlPoint1: CGPoint(x: 8.36, y: 36), controlPoint2: CGPoint(x: 6.75, y: 35.54))
            searchField.addCurve(to: CGPoint(x: 1.34, y: 30.88), controlPoint1: CGPoint(x: 3.49, y: 33.79), controlPoint2: CGPoint(x: 2.21, y: 32.51))
            searchField.addCurve(to: CGPoint(x: 0, y: 23.18), controlPoint1: CGPoint(x: 0.46, y: 29.25), controlPoint2: CGPoint(x: 0, y: 27.64))
            searchField.addLine(to: CGPoint(x: 0, y: 12.82))
            searchField.addCurve(to: CGPoint(x: 1.34, y: 5.12), controlPoint1: CGPoint(x: 0, y: 8.36), controlPoint2: CGPoint(x: 0.46, y: 6.75))
            searchField.addCurve(to: CGPoint(x: 5.12, y: 1.34), controlPoint1: CGPoint(x: 2.21, y: 3.49), controlPoint2: CGPoint(x: 3.49, y: 2.21))
            searchField.addCurve(to: CGPoint(x: 12.82, y: 0), controlPoint1: CGPoint(x: 6.75, y: 0.46), controlPoint2: CGPoint(x: 8.36, y: 0))
            searchField.close()
            context.saveGState()
            searchField.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 0.12).setFill()
            searchField.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Search
        // Warning: New symbols are not supported.
        
        /// Search
        let search2 = UIBezierPath()
        search2.move(to: CGPoint(x: 13.74, y: 12.57))
        search2.addLine(to: CGPoint(x: 9.91, y: 8.74))
        search2.addCurve(to: CGPoint(x: 10.96, y: 5.51), controlPoint1: CGPoint(x: 10.6, y: 7.8), controlPoint2: CGPoint(x: 10.97, y: 6.67))
        search2.addCurve(to: CGPoint(x: 5.46, y: 0), controlPoint1: CGPoint(x: 10.95, y: 2.47), controlPoint2: CGPoint(x: 8.49, y: 0.02))
        search2.addCurve(to: CGPoint(x: 1.59, y: 1.59), controlPoint1: CGPoint(x: 4.01, y: -0.01), controlPoint2: CGPoint(x: 2.62, y: 0.57))
        search2.addCurve(to: CGPoint(x: 0, y: 5.47), controlPoint1: CGPoint(x: 0.56, y: 2.62), controlPoint2: CGPoint(x: -0.01, y: 4.02))
        search2.addCurve(to: CGPoint(x: 5.5, y: 10.98), controlPoint1: CGPoint(x: 0.01, y: 8.5), controlPoint2: CGPoint(x: 2.47, y: 10.96))
        search2.addCurve(to: CGPoint(x: 8.74, y: 9.91), controlPoint1: CGPoint(x: 6.67, y: 10.98), controlPoint2: CGPoint(x: 7.8, y: 10.61))
        search2.addLine(to: CGPoint(x: 8.75, y: 9.91))
        search2.addLine(to: CGPoint(x: 12.58, y: 13.74))
        search2.addCurve(to: CGPoint(x: 13.38, y: 13.97), controlPoint1: CGPoint(x: 12.78, y: 13.96), controlPoint2: CGPoint(x: 13.09, y: 14.05))
        search2.addCurve(to: CGPoint(x: 13.97, y: 13.38), controlPoint1: CGPoint(x: 13.67, y: 13.9), controlPoint2: CGPoint(x: 13.9, y: 13.67))
        search2.addCurve(to: CGPoint(x: 13.74, y: 12.57), controlPoint1: CGPoint(x: 14.05, y: 13.09), controlPoint2: CGPoint(x: 13.96, y: 12.78))
        search2.addLine(to: CGPoint(x: 13.74, y: 12.57))
        search2.close()
        search2.move(to: CGPoint(x: 5.5, y: 9.88))
        search2.addCurve(to: CGPoint(x: 1.1, y: 5.47), controlPoint1: CGPoint(x: 3.07, y: 9.86), controlPoint2: CGPoint(x: 1.11, y: 7.9))
        search2.addCurve(to: CGPoint(x: 2.37, y: 2.37), controlPoint1: CGPoint(x: 1.09, y: 4.31), controlPoint2: CGPoint(x: 1.55, y: 3.2))
        search2.addCurve(to: CGPoint(x: 5.46, y: 1.1), controlPoint1: CGPoint(x: 3.19, y: 1.55), controlPoint2: CGPoint(x: 4.3, y: 1.09))
        search2.addCurve(to: CGPoint(x: 9.86, y: 5.5), controlPoint1: CGPoint(x: 7.89, y: 1.11), controlPoint2: CGPoint(x: 9.85, y: 3.08))
        search2.addCurve(to: CGPoint(x: 8.59, y: 8.6), controlPoint1: CGPoint(x: 9.87, y: 6.66), controlPoint2: CGPoint(x: 9.41, y: 7.78))
        search2.addCurve(to: CGPoint(x: 5.5, y: 9.88), controlPoint1: CGPoint(x: 7.77, y: 9.42), controlPoint2: CGPoint(x: 6.66, y: 9.88))
        search2.close()
        context.saveGState()
        context.translateBy(x: 26, y: 43)
        search2.usesEvenOddFillRule = true
        UIColor(white: 0, alpha: 0.36).setFill()
        search2.fill()
        context.restoreGState()
        
        /// Action
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsSearch_PlaceholderWhite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 280, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 280, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 280, y: resizedFrame.height / 100)
        
        /// Search Field
        let searchField = UIBezierPath()
        searchField.move(to: CGPoint(x: 12.82, y: 0))
        searchField.addLine(to: CGPoint(x: 235.18, y: 0))
        searchField.addCurve(to: CGPoint(x: 242.88, y: 1.34), controlPoint1: CGPoint(x: 239.64, y: 0), controlPoint2: CGPoint(x: 241.25, y: 0.46))
        searchField.addCurve(to: CGPoint(x: 246.66, y: 5.12), controlPoint1: CGPoint(x: 244.51, y: 2.21), controlPoint2: CGPoint(x: 245.79, y: 3.49))
        searchField.addCurve(to: CGPoint(x: 248, y: 12.82), controlPoint1: CGPoint(x: 247.54, y: 6.75), controlPoint2: CGPoint(x: 248, y: 8.36))
        searchField.addLine(to: CGPoint(x: 248, y: 23.18))
        searchField.addCurve(to: CGPoint(x: 246.66, y: 30.88), controlPoint1: CGPoint(x: 248, y: 27.64), controlPoint2: CGPoint(x: 247.54, y: 29.25))
        searchField.addCurve(to: CGPoint(x: 242.88, y: 34.66), controlPoint1: CGPoint(x: 245.79, y: 32.51), controlPoint2: CGPoint(x: 244.51, y: 33.79))
        searchField.addCurve(to: CGPoint(x: 235.18, y: 36), controlPoint1: CGPoint(x: 241.25, y: 35.54), controlPoint2: CGPoint(x: 239.64, y: 36))
        searchField.addLine(to: CGPoint(x: 12.82, y: 36))
        searchField.addCurve(to: CGPoint(x: 5.12, y: 34.66), controlPoint1: CGPoint(x: 8.36, y: 36), controlPoint2: CGPoint(x: 6.75, y: 35.54))
        searchField.addCurve(to: CGPoint(x: 1.34, y: 30.88), controlPoint1: CGPoint(x: 3.49, y: 33.79), controlPoint2: CGPoint(x: 2.21, y: 32.51))
        searchField.addCurve(to: CGPoint(x: 0, y: 23.18), controlPoint1: CGPoint(x: 0.46, y: 29.25), controlPoint2: CGPoint(x: 0, y: 27.64))
        searchField.addLine(to: CGPoint(x: 0, y: 12.82))
        searchField.addCurve(to: CGPoint(x: 1.34, y: 5.12), controlPoint1: CGPoint(x: 0, y: 8.36), controlPoint2: CGPoint(x: 0.46, y: 6.75))
        searchField.addCurve(to: CGPoint(x: 5.12, y: 1.34), controlPoint1: CGPoint(x: 2.21, y: 3.49), controlPoint2: CGPoint(x: 3.49, y: 2.21))
        searchField.addCurve(to: CGPoint(x: 12.82, y: 0), controlPoint1: CGPoint(x: 6.75, y: 0.46), controlPoint2: CGPoint(x: 8.36, y: 0))
        searchField.close()
        context.saveGState()
        context.translateBy(x: 16, y: 32)
        searchField.usesEvenOddFillRule = true
        UIColor.white.setFill()
        searchField.fill()
        context.restoreGState()
        
        /// Action
        // Warning: New symbols are not supported.
        
        /// Search
        // Warning: New symbols are not supported.
        
        /// Search
        let search2 = UIBezierPath()
        search2.move(to: CGPoint(x: 13.74, y: 12.57))
        search2.addLine(to: CGPoint(x: 9.91, y: 8.74))
        search2.addCurve(to: CGPoint(x: 10.96, y: 5.51), controlPoint1: CGPoint(x: 10.6, y: 7.8), controlPoint2: CGPoint(x: 10.97, y: 6.67))
        search2.addCurve(to: CGPoint(x: 5.46, y: 0), controlPoint1: CGPoint(x: 10.95, y: 2.47), controlPoint2: CGPoint(x: 8.49, y: 0.02))
        search2.addCurve(to: CGPoint(x: 1.59, y: 1.59), controlPoint1: CGPoint(x: 4.01, y: -0.01), controlPoint2: CGPoint(x: 2.62, y: 0.57))
        search2.addCurve(to: CGPoint(x: 0, y: 5.47), controlPoint1: CGPoint(x: 0.56, y: 2.62), controlPoint2: CGPoint(x: -0.01, y: 4.02))
        search2.addCurve(to: CGPoint(x: 5.5, y: 10.98), controlPoint1: CGPoint(x: 0.01, y: 8.5), controlPoint2: CGPoint(x: 2.47, y: 10.96))
        search2.addCurve(to: CGPoint(x: 8.74, y: 9.91), controlPoint1: CGPoint(x: 6.67, y: 10.98), controlPoint2: CGPoint(x: 7.8, y: 10.61))
        search2.addLine(to: CGPoint(x: 8.75, y: 9.91))
        search2.addLine(to: CGPoint(x: 12.58, y: 13.74))
        search2.addCurve(to: CGPoint(x: 13.38, y: 13.97), controlPoint1: CGPoint(x: 12.78, y: 13.96), controlPoint2: CGPoint(x: 13.09, y: 14.05))
        search2.addCurve(to: CGPoint(x: 13.97, y: 13.38), controlPoint1: CGPoint(x: 13.67, y: 13.9), controlPoint2: CGPoint(x: 13.9, y: 13.67))
        search2.addCurve(to: CGPoint(x: 13.74, y: 12.57), controlPoint1: CGPoint(x: 14.05, y: 13.09), controlPoint2: CGPoint(x: 13.96, y: 12.78))
        search2.addLine(to: CGPoint(x: 13.74, y: 12.57))
        search2.close()
        search2.move(to: CGPoint(x: 5.5, y: 9.88))
        search2.addCurve(to: CGPoint(x: 1.1, y: 5.47), controlPoint1: CGPoint(x: 3.07, y: 9.86), controlPoint2: CGPoint(x: 1.11, y: 7.9))
        search2.addCurve(to: CGPoint(x: 2.37, y: 2.37), controlPoint1: CGPoint(x: 1.09, y: 4.31), controlPoint2: CGPoint(x: 1.55, y: 3.2))
        search2.addCurve(to: CGPoint(x: 5.46, y: 1.1), controlPoint1: CGPoint(x: 3.19, y: 1.55), controlPoint2: CGPoint(x: 4.3, y: 1.09))
        search2.addCurve(to: CGPoint(x: 9.86, y: 5.5), controlPoint1: CGPoint(x: 7.89, y: 1.11), controlPoint2: CGPoint(x: 9.85, y: 3.08))
        search2.addCurve(to: CGPoint(x: 8.59, y: 8.6), controlPoint1: CGPoint(x: 9.87, y: 6.66), controlPoint2: CGPoint(x: 9.41, y: 7.78))
        search2.addCurve(to: CGPoint(x: 5.5, y: 9.88), controlPoint1: CGPoint(x: 7.77, y: 9.42), controlPoint2: CGPoint(x: 6.66, y: 9.88))
        search2.close()
        context.saveGState()
        context.translateBy(x: 26, y: 43)
        search2.usesEvenOddFillRule = true
        UIColor(white: 0, alpha: 0.36).setFill()
        search2.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBarsSearch_PlaceholderCancelWhite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 280, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 280, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 280, y: resizedFrame.height / 100)
        
        /// Cancel
        let cancel = NSMutableAttributedString(string: "Cancel")
        cancel.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: cancel.length))
        cancel.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: cancel.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .right
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            cancel.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: cancel.length))
        }
        cancel.addAttribute(.foregroundColor, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: cancel.length))
        context.saveGState()
        cancel.draw(at: CGPoint(x: 211, y: 39))
        context.restoreGState()
        
        /// Search Field
        let searchField = UIBezierPath()
        searchField.move(to: CGPoint(x: 12.82, y: 0))
        searchField.addLine(to: CGPoint(x: 170.18, y: 0))
        searchField.addCurve(to: CGPoint(x: 177.88, y: 1.34), controlPoint1: CGPoint(x: 174.64, y: 0), controlPoint2: CGPoint(x: 176.25, y: 0.46))
        searchField.addCurve(to: CGPoint(x: 181.66, y: 5.12), controlPoint1: CGPoint(x: 179.51, y: 2.21), controlPoint2: CGPoint(x: 180.79, y: 3.49))
        searchField.addCurve(to: CGPoint(x: 183, y: 12.82), controlPoint1: CGPoint(x: 182.54, y: 6.75), controlPoint2: CGPoint(x: 183, y: 8.36))
        searchField.addLine(to: CGPoint(x: 183, y: 23.18))
        searchField.addCurve(to: CGPoint(x: 181.66, y: 30.88), controlPoint1: CGPoint(x: 183, y: 27.64), controlPoint2: CGPoint(x: 182.54, y: 29.25))
        searchField.addCurve(to: CGPoint(x: 177.88, y: 34.66), controlPoint1: CGPoint(x: 180.79, y: 32.51), controlPoint2: CGPoint(x: 179.51, y: 33.79))
        searchField.addCurve(to: CGPoint(x: 170.18, y: 36), controlPoint1: CGPoint(x: 176.25, y: 35.54), controlPoint2: CGPoint(x: 174.64, y: 36))
        searchField.addLine(to: CGPoint(x: 12.82, y: 36))
        searchField.addCurve(to: CGPoint(x: 5.12, y: 34.66), controlPoint1: CGPoint(x: 8.36, y: 36), controlPoint2: CGPoint(x: 6.75, y: 35.54))
        searchField.addCurve(to: CGPoint(x: 1.34, y: 30.88), controlPoint1: CGPoint(x: 3.49, y: 33.79), controlPoint2: CGPoint(x: 2.21, y: 32.51))
        searchField.addCurve(to: CGPoint(x: 0, y: 23.18), controlPoint1: CGPoint(x: 0.46, y: 29.25), controlPoint2: CGPoint(x: 0, y: 27.64))
        searchField.addLine(to: CGPoint(x: 0, y: 12.82))
        searchField.addCurve(to: CGPoint(x: 1.34, y: 5.12), controlPoint1: CGPoint(x: 0, y: 8.36), controlPoint2: CGPoint(x: 0.46, y: 6.75))
        searchField.addCurve(to: CGPoint(x: 5.12, y: 1.34), controlPoint1: CGPoint(x: 2.21, y: 3.49), controlPoint2: CGPoint(x: 3.49, y: 2.21))
        searchField.addCurve(to: CGPoint(x: 12.82, y: 0), controlPoint1: CGPoint(x: 6.75, y: 0.46), controlPoint2: CGPoint(x: 8.36, y: 0))
        searchField.close()
        context.saveGState()
        context.translateBy(x: 16, y: 32)
        searchField.usesEvenOddFillRule = true
        UIColor.white.setFill()
        searchField.fill()
        context.restoreGState()
        
        /// Search
        // Warning: New symbols are not supported.
        
        /// Search
        let search2 = UIBezierPath()
        search2.move(to: CGPoint(x: 13.74, y: 12.57))
        search2.addLine(to: CGPoint(x: 9.91, y: 8.74))
        search2.addCurve(to: CGPoint(x: 10.96, y: 5.51), controlPoint1: CGPoint(x: 10.6, y: 7.8), controlPoint2: CGPoint(x: 10.97, y: 6.67))
        search2.addCurve(to: CGPoint(x: 5.46, y: 0), controlPoint1: CGPoint(x: 10.95, y: 2.47), controlPoint2: CGPoint(x: 8.49, y: 0.02))
        search2.addCurve(to: CGPoint(x: 1.59, y: 1.59), controlPoint1: CGPoint(x: 4.01, y: -0.01), controlPoint2: CGPoint(x: 2.62, y: 0.57))
        search2.addCurve(to: CGPoint(x: 0, y: 5.47), controlPoint1: CGPoint(x: 0.56, y: 2.62), controlPoint2: CGPoint(x: -0.01, y: 4.02))
        search2.addCurve(to: CGPoint(x: 5.5, y: 10.98), controlPoint1: CGPoint(x: 0.01, y: 8.5), controlPoint2: CGPoint(x: 2.47, y: 10.96))
        search2.addCurve(to: CGPoint(x: 8.74, y: 9.91), controlPoint1: CGPoint(x: 6.67, y: 10.98), controlPoint2: CGPoint(x: 7.8, y: 10.61))
        search2.addLine(to: CGPoint(x: 8.75, y: 9.91))
        search2.addLine(to: CGPoint(x: 12.58, y: 13.74))
        search2.addCurve(to: CGPoint(x: 13.38, y: 13.97), controlPoint1: CGPoint(x: 12.78, y: 13.96), controlPoint2: CGPoint(x: 13.09, y: 14.05))
        search2.addCurve(to: CGPoint(x: 13.97, y: 13.38), controlPoint1: CGPoint(x: 13.67, y: 13.9), controlPoint2: CGPoint(x: 13.9, y: 13.67))
        search2.addCurve(to: CGPoint(x: 13.74, y: 12.57), controlPoint1: CGPoint(x: 14.05, y: 13.09), controlPoint2: CGPoint(x: 13.96, y: 12.78))
        search2.addLine(to: CGPoint(x: 13.74, y: 12.57))
        search2.close()
        search2.move(to: CGPoint(x: 5.5, y: 9.88))
        search2.addCurve(to: CGPoint(x: 1.1, y: 5.47), controlPoint1: CGPoint(x: 3.07, y: 9.86), controlPoint2: CGPoint(x: 1.11, y: 7.9))
        search2.addCurve(to: CGPoint(x: 2.37, y: 2.37), controlPoint1: CGPoint(x: 1.09, y: 4.31), controlPoint2: CGPoint(x: 1.55, y: 3.2))
        search2.addCurve(to: CGPoint(x: 5.46, y: 1.1), controlPoint1: CGPoint(x: 3.19, y: 1.55), controlPoint2: CGPoint(x: 4.3, y: 1.09))
        search2.addCurve(to: CGPoint(x: 9.86, y: 5.5), controlPoint1: CGPoint(x: 7.89, y: 1.11), controlPoint2: CGPoint(x: 9.85, y: 3.08))
        search2.addCurve(to: CGPoint(x: 8.59, y: 8.6), controlPoint1: CGPoint(x: 9.87, y: 6.66), controlPoint2: CGPoint(x: 9.41, y: 7.78))
        search2.addCurve(to: CGPoint(x: 5.5, y: 9.88), controlPoint1: CGPoint(x: 7.77, y: 9.42), controlPoint2: CGPoint(x: 6.66, y: 9.88))
        search2.close()
        context.saveGState()
        context.translateBy(x: 26, y: 43)
        search2.usesEvenOddFillRule = true
        UIColor(white: 0, alpha: 0.36).setFill()
        search2.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBarsSearch_PlaceholderActiveWhite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 280, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 280, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 280, y: resizedFrame.height / 100)
        
        /// Container
        do {
            context.saveGState()
            context.translateBy(x: 16, y: 32)
            
            /// Cancel
            let cancel = NSMutableAttributedString(string: "Cancel")
            cancel.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: cancel.length))
            cancel.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: cancel.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                cancel.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: cancel.length))
            }
            cancel.addAttribute(.foregroundColor, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: cancel.length))
            context.saveGState()
            cancel.draw(at: CGPoint(x: 195, y: 7))
            context.restoreGState()
            
            /// Search Field
            let searchField = UIBezierPath()
            searchField.move(to: CGPoint(x: 12.82, y: 0))
            searchField.addLine(to: CGPoint(x: 170.18, y: 0))
            searchField.addCurve(to: CGPoint(x: 177.88, y: 1.34), controlPoint1: CGPoint(x: 174.64, y: 0), controlPoint2: CGPoint(x: 176.25, y: 0.46))
            searchField.addCurve(to: CGPoint(x: 181.66, y: 5.12), controlPoint1: CGPoint(x: 179.51, y: 2.21), controlPoint2: CGPoint(x: 180.79, y: 3.49))
            searchField.addCurve(to: CGPoint(x: 183, y: 12.82), controlPoint1: CGPoint(x: 182.54, y: 6.75), controlPoint2: CGPoint(x: 183, y: 8.36))
            searchField.addLine(to: CGPoint(x: 183, y: 23.18))
            searchField.addCurve(to: CGPoint(x: 181.66, y: 30.88), controlPoint1: CGPoint(x: 183, y: 27.64), controlPoint2: CGPoint(x: 182.54, y: 29.25))
            searchField.addCurve(to: CGPoint(x: 177.88, y: 34.66), controlPoint1: CGPoint(x: 180.79, y: 32.51), controlPoint2: CGPoint(x: 179.51, y: 33.79))
            searchField.addCurve(to: CGPoint(x: 170.18, y: 36), controlPoint1: CGPoint(x: 176.25, y: 35.54), controlPoint2: CGPoint(x: 174.64, y: 36))
            searchField.addLine(to: CGPoint(x: 12.82, y: 36))
            searchField.addCurve(to: CGPoint(x: 5.12, y: 34.66), controlPoint1: CGPoint(x: 8.36, y: 36), controlPoint2: CGPoint(x: 6.75, y: 35.54))
            searchField.addCurve(to: CGPoint(x: 1.34, y: 30.88), controlPoint1: CGPoint(x: 3.49, y: 33.79), controlPoint2: CGPoint(x: 2.21, y: 32.51))
            searchField.addCurve(to: CGPoint(x: 0, y: 23.18), controlPoint1: CGPoint(x: 0.46, y: 29.25), controlPoint2: CGPoint(x: 0, y: 27.64))
            searchField.addLine(to: CGPoint(x: 0, y: 12.82))
            searchField.addCurve(to: CGPoint(x: 1.34, y: 5.12), controlPoint1: CGPoint(x: 0, y: 8.36), controlPoint2: CGPoint(x: 0.46, y: 6.75))
            searchField.addCurve(to: CGPoint(x: 5.12, y: 1.34), controlPoint1: CGPoint(x: 2.21, y: 3.49), controlPoint2: CGPoint(x: 3.49, y: 2.21))
            searchField.addCurve(to: CGPoint(x: 12.82, y: 0), controlPoint1: CGPoint(x: 6.75, y: 0.46), controlPoint2: CGPoint(x: 8.36, y: 0))
            searchField.close()
            context.saveGState()
            searchField.usesEvenOddFillRule = true
            UIColor.white.setFill()
            searchField.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Search
        // Warning: New symbols are not supported.
        
        /// Search
        let search2 = UIBezierPath()
        search2.move(to: CGPoint(x: 13.74, y: 12.57))
        search2.addLine(to: CGPoint(x: 9.91, y: 8.74))
        search2.addCurve(to: CGPoint(x: 10.96, y: 5.51), controlPoint1: CGPoint(x: 10.6, y: 7.8), controlPoint2: CGPoint(x: 10.97, y: 6.67))
        search2.addCurve(to: CGPoint(x: 5.46, y: 0), controlPoint1: CGPoint(x: 10.95, y: 2.47), controlPoint2: CGPoint(x: 8.49, y: 0.02))
        search2.addCurve(to: CGPoint(x: 1.59, y: 1.59), controlPoint1: CGPoint(x: 4.01, y: -0.01), controlPoint2: CGPoint(x: 2.62, y: 0.57))
        search2.addCurve(to: CGPoint(x: 0, y: 5.47), controlPoint1: CGPoint(x: 0.56, y: 2.62), controlPoint2: CGPoint(x: -0.01, y: 4.02))
        search2.addCurve(to: CGPoint(x: 5.5, y: 10.98), controlPoint1: CGPoint(x: 0.01, y: 8.5), controlPoint2: CGPoint(x: 2.47, y: 10.96))
        search2.addCurve(to: CGPoint(x: 8.74, y: 9.91), controlPoint1: CGPoint(x: 6.67, y: 10.98), controlPoint2: CGPoint(x: 7.8, y: 10.61))
        search2.addLine(to: CGPoint(x: 8.75, y: 9.91))
        search2.addLine(to: CGPoint(x: 12.58, y: 13.74))
        search2.addCurve(to: CGPoint(x: 13.38, y: 13.97), controlPoint1: CGPoint(x: 12.78, y: 13.96), controlPoint2: CGPoint(x: 13.09, y: 14.05))
        search2.addCurve(to: CGPoint(x: 13.97, y: 13.38), controlPoint1: CGPoint(x: 13.67, y: 13.9), controlPoint2: CGPoint(x: 13.9, y: 13.67))
        search2.addCurve(to: CGPoint(x: 13.74, y: 12.57), controlPoint1: CGPoint(x: 14.05, y: 13.09), controlPoint2: CGPoint(x: 13.96, y: 12.78))
        search2.addLine(to: CGPoint(x: 13.74, y: 12.57))
        search2.close()
        search2.move(to: CGPoint(x: 5.5, y: 9.88))
        search2.addCurve(to: CGPoint(x: 1.1, y: 5.47), controlPoint1: CGPoint(x: 3.07, y: 9.86), controlPoint2: CGPoint(x: 1.11, y: 7.9))
        search2.addCurve(to: CGPoint(x: 2.37, y: 2.37), controlPoint1: CGPoint(x: 1.09, y: 4.31), controlPoint2: CGPoint(x: 1.55, y: 3.2))
        search2.addCurve(to: CGPoint(x: 5.46, y: 1.1), controlPoint1: CGPoint(x: 3.19, y: 1.55), controlPoint2: CGPoint(x: 4.3, y: 1.09))
        search2.addCurve(to: CGPoint(x: 9.86, y: 5.5), controlPoint1: CGPoint(x: 7.89, y: 1.11), controlPoint2: CGPoint(x: 9.85, y: 3.08))
        search2.addCurve(to: CGPoint(x: 8.59, y: 8.6), controlPoint1: CGPoint(x: 9.87, y: 6.66), controlPoint2: CGPoint(x: 9.41, y: 7.78))
        search2.addCurve(to: CGPoint(x: 5.5, y: 9.88), controlPoint1: CGPoint(x: 7.77, y: 9.42), controlPoint2: CGPoint(x: 6.66, y: 9.88))
        search2.close()
        context.saveGState()
        context.translateBy(x: 26, y: 43)
        search2.usesEvenOddFillRule = true
        UIColor(white: 0, alpha: 0.36).setFill()
        search2.fill()
        context.restoreGState()
        
        /// Action
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsToolbarDefault(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background
        // Warning: New symbols are not supported.
        
        /// Top Separator
        // Warning: New symbols are not supported.
        
        /// Right
        // Warning: New symbols are not supported.
        
        /// Center
        // Warning: New symbols are not supported.
        
        /// Left
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawIPhoneXBarsToolbar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 78), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 78), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 78)
        
        /// Background
        // Warning: New symbols are not supported.
        
        /// Top Separator
        // Warning: New symbols are not supported.
        
        /// Right
        // Warning: New symbols are not supported.
        
        /// Center
        // Warning: New symbols are not supported.
        
        /// Left
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsToolbar_LGlyph(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 260, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 260, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 260, y: resizedFrame.height / 100)
        
        /// Glyph
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsToolbar_LGlyphX2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 260, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 260, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 260, y: resizedFrame.height / 100)
        
        /// Container
        do {
            context.saveGState()
            context.translateBy(x: 16, y: 36)
            
            /// Glyph 2
            // Warning: New symbols are not supported.
            
            /// Glyph 1
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsToolbar_LLabel(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 260, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 260, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 260, y: resizedFrame.height / 100)
        
        /// ↳ Label
        let label = NSMutableAttributedString(string: "Label")
        label.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        label.addAttribute(.foregroundColor, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
        context.saveGState()
        label.draw(at: CGPoint(x: 16, y: 39))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBarsToolbar_LLabelPrimary(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 260, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 260, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 260, y: resizedFrame.height / 100)
        
        /// ↳ Label
        let label = NSMutableAttributedString(string: "Label")
        label.addAttribute(.font, value: UIFont(name: "SFProText-Semibold", size: 17)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        label.addAttribute(.foregroundColor, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
        context.saveGState()
        label.draw(at: CGPoint(x: 16, y: 39))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBarsToolbar_CGlyph(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 262, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 262, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 262, y: resizedFrame.height / 100)
        
        /// Glyph
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsToolbar_CTitleLink(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 262, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 262, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 262, y: resizedFrame.height / 100)
        
        /// Container
        do {
            context.saveGState()
            context.translateBy(x: 117, y: 32)
            
            /// Link
            let link = NSMutableAttributedString(string: "Link")
            link.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 13)!, range: NSRange(location: 0, length: link.length))
            link.addAttribute(.kern, value: -0.08, range: NSRange(location: 0, length: link.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 18
                paragraphStyle.minimumLineHeight = 18
                link.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: link.length))
            }
            link.addAttribute(.foregroundColor, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: link.length))
            context.saveGState()
            link.draw(at: CGPoint(x: 1.5, y: 18))
            context.restoreGState()
            
            /// Muted
            context.saveGState()
            context.setAlpha(0.6)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                
                /// ↳ Title
                let title = NSMutableAttributedString(string: "Title")
                title.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 13)!, range: NSRange(location: 0, length: title.length))
                title.addAttribute(.kern, value: -0.08, range: NSRange(location: 0, length: title.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    paragraphStyle.maximumLineHeight = 18
                    paragraphStyle.minimumLineHeight = 18
                    title.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
                }
                context.saveGState()
                title.draw(at: CGPoint(x: 0.5, y: 0))
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsToolbar_CLabel(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 262, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 262, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 262, y: resizedFrame.height / 100)
        
        /// ↳ Label
        let label = NSMutableAttributedString(string: "Label")
        label.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        label.addAttribute(.foregroundColor, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
        context.saveGState()
        label.draw(at: CGPoint(x: 110, y: 39))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBarsToolbar_CLabelPrimary(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 262, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 262, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 262, y: resizedFrame.height / 100)
        
        /// ↳ Label
        let label = NSMutableAttributedString(string: "Label")
        label.addAttribute(.font, value: UIFont(name: "SFProText-Semibold", size: 17)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        label.addAttribute(.foregroundColor, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
        context.saveGState()
        label.draw(at: CGPoint(x: 109, y: 39))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBarsToolbar_RGlyph(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 264, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 264, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 264, y: resizedFrame.height / 100)
        
        /// Glyph
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsToolbar_RGlyphX2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 264, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 264, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 264, y: resizedFrame.height / 100)
        
        /// Container
        do {
            context.saveGState()
            context.translateBy(x: 180, y: 36)
            
            /// Glyph 2
            // Warning: New symbols are not supported.
            
            /// Glyph 1
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsToolbar_RLabel(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 264, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 264, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 264, y: resizedFrame.height / 100)
        
        /// ↳ Label
        let label = NSMutableAttributedString(string: "Label")
        label.addAttribute(.font, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .right
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        label.addAttribute(.foregroundColor, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
        context.saveGState()
        label.draw(at: CGPoint(x: 206, y: 39))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBarsToolbar_RLabelPrimary(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 264, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 264, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 264, y: resizedFrame.height / 100)
        
        /// ↳ Label
        let label = NSMutableAttributedString(string: "Label")
        label.addAttribute(.font, value: UIFont(name: "SFProText-Semibold", size: 17)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .right
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        label.addAttribute(.foregroundColor, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
        context.saveGState()
        label.draw(at: CGPoint(x: 204, y: 39))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_AssetsSeparator_Empty(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 1), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 1), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 1)
        
        // Empty.
        
        context.restoreGState()
    }
    
    class func draw_GlyphsTabBar_Empty(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        // Empty.
        
        context.restoreGState()
    }
    
    class func draw_GlyphsNavToolbar_Empty(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)
        
        // Empty.
        
        context.restoreGState()
    }
    
    class func draw_GlyphsQuickAction_Empty(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)
        
        // Empty.
        
        context.restoreGState()
    }
    
    class func draw_GlyphsSmall_Empty(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        // Empty.
        
        context.restoreGState()
    }
    
    class func draw_GlyphsXSmall_Empty(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)
        
        // Empty.
        
        context.restoreGState()
    }
    
    class func drawControlsInput_R_Empty(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 80), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 80), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 80)
        
        // Empty.
        
        context.restoreGState()
    }
    
    class func drawBarsNavigation_L_Empty(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 100)
        
        // Empty.
        
        context.restoreGState()
    }
    
    class func drawBarsNavigation_C_Empty(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 302, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 302, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 302, y: resizedFrame.height / 100)
        
        // Empty.
        
        context.restoreGState()
    }
    
    class func drawBarsNavigation_R_Empty(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 304, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 304, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 304, y: resizedFrame.height / 100)
        
        // Empty.
        
        context.restoreGState()
    }
    
    class func drawBarsNavigation_RBottom_Empty(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 306, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 306, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 306, y: resizedFrame.height / 100)
        
        // Empty.
        
        context.restoreGState()
    }
    
    class func drawBarsToolbar_L_Empty(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 260, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 260, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 260, y: resizedFrame.height / 100)
        
        // Empty.
        
        context.restoreGState()
    }
    
    class func drawBarsToolbar_C_Empty(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 262, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 262, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 262, y: resizedFrame.height / 100)
        
        // Empty.
        
        context.restoreGState()
    }
    
    class func drawBarsToolbar_R_Empty(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 264, height: 100), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 264, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 264, y: resizedFrame.height / 100)
        
        // Empty.
        
        context.restoreGState()
    }
    
    
    //MARK: - Canvas Images
    
    /// UI Kit
    
    class func imageOfGlyphsTabBar() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 558), false, 0)
        StyleKit.drawGlyphsTabBar()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    /// Symbols
    
    class func imageOf_GlyphsTabBarHeart2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarHeart2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarFavorite2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarFavorite2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarHome2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarHome2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarContacts2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarContacts2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarMessages2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarMessages2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarCompose2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarCompose2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarDelete2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarDelete2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarActivity2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarActivity2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarSettings2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarSettings2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarProfile2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarProfile2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarBag2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarBag2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarBookmarks2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarBookmarks2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarDiscover2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarDiscover2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarCloud2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarCloud2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarToday2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarToday2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarLibrary2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarLibrary2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarPhotos2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarPhotos2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarFiles2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarFiles2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarCamera2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarCamera2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarTickets2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarTickets2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarHotel2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarHotel2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarFlame2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarFlame2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarFlame() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarFlame()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarHotel() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarHotel()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarTickets() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarTickets()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarAddFriend2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarAddFriend2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarWallet2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarWallet2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarCalendar2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarCalendar2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarTasks2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarTasks2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarTrend2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarTrend2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarSearch2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarSearch2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarCalls2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarCalls2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarPlan2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarPlan2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarPay2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarPay2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarExchange2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarExchange2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarCollection2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarCollection2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarBook2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarBook2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarRecents2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarRecents2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarMap2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarMap2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarAlbums2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarAlbums2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarMusic2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarMusic2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarNavigation2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarNavigation2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarMore2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarMore2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarMail2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarMail2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarAddNumber2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarAddNumber2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarSample() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarSample()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarHeart() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarHeart()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarFavorite() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarFavorite()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarHome() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarHome()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarContacts() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarContacts()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarMessages() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarMessages()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarCompose() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarCompose()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarDelete() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarDelete()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarActivity() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarActivity()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarSettings() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarSettings()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarProfile() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarProfile()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarBag() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarBag()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarBookmarks() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarBookmarks()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarDiscover() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarDiscover()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarCloud() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarCloud()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarToday() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarToday()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarLibrary() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarLibrary()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarPhotos() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarPhotos()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarFiles() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarFiles()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarCamera() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarCamera()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarAddFriend() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarAddFriend()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarWallet() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarWallet()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarCalendar() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarCalendar()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarTasks() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarTasks()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarTrend() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarTrend()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarSearch() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarSearch()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarCalls() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarCalls()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarPlan() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarPlan()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarPay() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarPay()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarExchange() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarExchange()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarCollection() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarCollection()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarBook() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarBook()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarRecents() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarRecents()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarMap() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarMap()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarAlbums() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarAlbums()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarMusic() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarMusic()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarNavigation() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarNavigation()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarMore() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarMore()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarMail() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarMail()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBarAddNumber() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBarAddNumber()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsNavToolbarSample() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
        StyleKit.draw_GlyphsNavToolbarSample()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsNavToolbarAdd() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
        StyleKit.draw_GlyphsNavToolbarAdd()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsNavToolbarClose() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
        StyleKit.draw_GlyphsNavToolbarClose()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsNavToolbarRemove() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
        StyleKit.draw_GlyphsNavToolbarRemove()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsNavToolbarArrowUp() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
        StyleKit.draw_GlyphsNavToolbarArrowUp()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsNavToolbarArrowDown() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
        StyleKit.draw_GlyphsNavToolbarArrowDown()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsNavToolbarList() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
        StyleKit.draw_GlyphsNavToolbarList()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsNavToolbarMore() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
        StyleKit.draw_GlyphsNavToolbarMore()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsNavToolbarDone() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
        StyleKit.draw_GlyphsNavToolbarDone()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsNavToolbarLike() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
        StyleKit.draw_GlyphsNavToolbarLike()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsNavToolbarDelete() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
        StyleKit.draw_GlyphsNavToolbarDelete()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsNavToolbarSearch() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
        StyleKit.draw_GlyphsNavToolbarSearch()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsNavToolbarDownload() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
        StyleKit.draw_GlyphsNavToolbarDownload()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsNavToolbarFont() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
        StyleKit.draw_GlyphsNavToolbarFont()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsNavToolbarEdit() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
        StyleKit.draw_GlyphsNavToolbarEdit()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsNavToolbarShare() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
        StyleKit.draw_GlyphsNavToolbarShare()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsNavToolbarPhoto() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
        StyleKit.draw_GlyphsNavToolbarPhoto()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsNavToolbarBag() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
        StyleKit.draw_GlyphsNavToolbarBag()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsNavToolbarFavorite() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
        StyleKit.draw_GlyphsNavToolbarFavorite()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsNavToolbarSettings() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
        StyleKit.draw_GlyphsNavToolbarSettings()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsNavToolbarProfile() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
        StyleKit.draw_GlyphsNavToolbarProfile()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsNavToolbarRecents() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
        StyleKit.draw_GlyphsNavToolbarRecents()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsNavToolbarQuestion() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
        StyleKit.draw_GlyphsNavToolbarQuestion()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsNavToolbarInfo() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
        StyleKit.draw_GlyphsNavToolbarInfo()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsNavToolbarRefresh() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
        StyleKit.draw_GlyphsNavToolbarRefresh()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsNavToolbarBookmark() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
        StyleKit.draw_GlyphsNavToolbarBookmark()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsNavToolbarBook() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
        StyleKit.draw_GlyphsNavToolbarBook()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsNavToolbarChat() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
        StyleKit.draw_GlyphsNavToolbarChat()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsNavToolbarLocate() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
        StyleKit.draw_GlyphsNavToolbarLocate()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsNavToolbarReply() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
        StyleKit.draw_GlyphsNavToolbarReply()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsNavToolbarCalendar() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
        StyleKit.draw_GlyphsNavToolbarCalendar()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsNavToolbarTasks() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
        StyleKit.draw_GlyphsNavToolbarTasks()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsNavToolbarChange() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
        StyleKit.draw_GlyphsNavToolbarChange()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsNavToolbarPodcast() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
        StyleKit.draw_GlyphsNavToolbarPodcast()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsQuickActionSample() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
        StyleKit.draw_GlyphsQuickActionSample()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsQuickActionAdd2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
        StyleKit.draw_GlyphsQuickActionAdd2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsQuickActionClose() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
        StyleKit.draw_GlyphsQuickActionClose()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsQuickActionTask() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
        StyleKit.draw_GlyphsQuickActionTask()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsQuickActionBook() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
        StyleKit.draw_GlyphsQuickActionBook()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsQuickActionShare() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
        StyleKit.draw_GlyphsQuickActionShare()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsQuickActionDownload2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
        StyleKit.draw_GlyphsQuickActionDownload2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsQuickActionAdd() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
        StyleKit.draw_GlyphsQuickActionAdd()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsQuickActionDownload() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
        StyleKit.draw_GlyphsQuickActionDownload()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsQuickActionCamera() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
        StyleKit.draw_GlyphsQuickActionCamera()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsQuickActionCalendar() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
        StyleKit.draw_GlyphsQuickActionCalendar()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsQuickActionTasks() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
        StyleKit.draw_GlyphsQuickActionTasks()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsQuickActionSearch() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
        StyleKit.draw_GlyphsQuickActionSearch()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsQuickActionMuted() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
        StyleKit.draw_GlyphsQuickActionMuted()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsQuickActionMail() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
        StyleKit.draw_GlyphsQuickActionMail()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsQuickActionEdit() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
        StyleKit.draw_GlyphsQuickActionEdit()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsQuickActionDelete() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
        StyleKit.draw_GlyphsQuickActionDelete()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsQuickActionBag() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
        StyleKit.draw_GlyphsQuickActionBag()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsQuickActionFavorite() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
        StyleKit.draw_GlyphsQuickActionFavorite()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsQuickActionBluetooth() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
        StyleKit.draw_GlyphsQuickActionBluetooth()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsQuickActionMobile() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
        StyleKit.draw_GlyphsQuickActionMobile()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsQuickActionVolume() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
        StyleKit.draw_GlyphsQuickActionVolume()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsQuickActionVolumeMute() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
        StyleKit.draw_GlyphsQuickActionVolumeMute()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsQuickActionWifi() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
        StyleKit.draw_GlyphsQuickActionWifi()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsQuickActionSettings() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
        StyleKit.draw_GlyphsQuickActionSettings()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsQuickActionProfile() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
        StyleKit.draw_GlyphsQuickActionProfile()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsQuickActionRecents() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
        StyleKit.draw_GlyphsQuickActionRecents()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsQuickActionInfo() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
        StyleKit.draw_GlyphsQuickActionInfo()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsQuickActionOk() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
        StyleKit.draw_GlyphsQuickActionOk()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsQuickActionReply() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
        StyleKit.draw_GlyphsQuickActionReply()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsQuickActionInfoCopy() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
        StyleKit.draw_GlyphsQuickActionInfoCopy()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallSample() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallSample()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsQuickActionRocket() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
        StyleKit.draw_GlyphsQuickActionRocket()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsQuickActionDrop() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
        StyleKit.draw_GlyphsQuickActionDrop()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsQuickActionRefresh() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
        StyleKit.draw_GlyphsQuickActionRefresh()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsQuickActionStyle() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
        StyleKit.draw_GlyphsQuickActionStyle()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallPlay() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallPlay()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsQuickActionFilter() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
        StyleKit.draw_GlyphsQuickActionFilter()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallPause() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallPause()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallQuestion() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallQuestion()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallDone() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallDone()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallPlus() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallPlus()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallGoogle() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallGoogle()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallFacebook() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallFacebook()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallStack() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallStack()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallRocket() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallRocket()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallMusic() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallMusic()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallPrivacy() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallPrivacy()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallLike() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallLike()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallMessages() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallMessages()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallVideo() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallVideo()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallKey() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallKey()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallCall() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallCall()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallFavorite() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallFavorite()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallProfile() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallProfile()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallCompass() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallCompass()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallRecents() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallRecents()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallInfo() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallInfo()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallRefresh() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallRefresh()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallOpen() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallOpen()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallEmail() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallEmail()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallPhoto() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallPhoto()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallReply() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallReply()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallSettings() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallSettings()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallVolume() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallVolume()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallVolumeMute() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallVolumeMute()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallArrowUp() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallArrowUp()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallArrowDown() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallArrowDown()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallArrowLeft() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallArrowLeft()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallArrowRight() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallArrowRight()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallSticker() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallSticker()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallApple() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallApple()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallCalendar() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallCalendar()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallEdit() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallEdit()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallEye() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallEye()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallChair() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallChair()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallPerson() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallPerson()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallAttention() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallAttention()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallAddContact() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallAddContact()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallPodcast() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallPodcast()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallMap() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallMap()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallBookmark() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallBookmark()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallFollow() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallFollow()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallNavigation() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallNavigation()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmallFilter() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmallFilter()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallSample() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallSample()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallWorldWeb() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallWorldWeb()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallTimeStroked() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallTimeStroked()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallPerson() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallPerson()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallPlay() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallPlay()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallPause() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallPause()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallPlus() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallPlus()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallClose() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallClose()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallTask() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallTask()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallCamera() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallCamera()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallMessage() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallMessage()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallBlock() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallBlock()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallQuestion() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallQuestion()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallTime() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallTime()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallAdd() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallAdd()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallInfo() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallInfo()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallSettings() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallSettings()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallFavorite() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallFavorite()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallDelete() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallDelete()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallBag() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallBag()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallBookmark() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallBookmark()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallLike() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallLike()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallReply() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallReply()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallVolume() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallVolume()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallVolumeMute() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallVolumeMute()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallArrowLeft() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallArrowLeft()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallArrowRight() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallArrowRight()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallArrowDown() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallArrowDown()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallArrowUp() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallArrowUp()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallCalendar() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallCalendar()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallEdit() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallEdit()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallDone() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallDone()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallCall() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallCall()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallNavigation() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallNavigation()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallAlert() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallAlert()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallMap() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallMap()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallRecievd() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallRecievd()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallLink() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallLink()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallWind() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallWind()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallCurrency() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallCurrency()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallDrip() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallDrip()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallThermometer() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallThermometer()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallFinish() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallFinish()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallComment() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallComment()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmallEye() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmallEye()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsCountersSmall() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 22), false, 0)
        StyleKit.draw_AssetsCountersSmall()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsCountersNormal() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 25, height: 22), false, 0)
        StyleKit.draw_AssetsCountersNormal()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsActionsSearchClear() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 22), false, 0)
        StyleKit.draw_AssetsActionsSearchClear()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsActionsSearchDictation() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 22), false, 0)
        StyleKit.draw_AssetsActionsSearchDictation()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsActions_Empty() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 30), false, 0)
        StyleKit.draw_AssetsActions_Empty()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsActionsRemove() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 30), false, 0)
        StyleKit.draw_AssetsActionsRemove()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsActionsAdd() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 30), false, 0)
        StyleKit.draw_AssetsActionsAdd()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsActionsInfoAccent() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 30), false, 0)
        StyleKit.draw_AssetsActionsInfoAccent()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsActionsPlus2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 30), false, 0)
        StyleKit.draw_AssetsActionsPlus2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsActionsError() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 30), false, 0)
        StyleKit.draw_AssetsActionsError()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsActionsMoreGray() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 30), false, 0)
        StyleKit.draw_AssetsActionsMoreGray()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsActionsMoreIconGray() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 30), false, 0)
        StyleKit.draw_AssetsActionsMoreIconGray()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsActionsCloseButtonWhite() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 30), false, 0)
        StyleKit.draw_AssetsActionsCloseButtonWhite()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsActionsCloseButton() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 30), false, 0)
        StyleKit.draw_AssetsActionsCloseButton()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsActionsSend() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 30), false, 0)
        StyleKit.draw_AssetsActionsSend()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsActionsPlus() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 30), false, 0)
        StyleKit.draw_AssetsActionsPlus()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsActionsBackspace() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 35, height: 30), false, 0)
        StyleKit.draw_AssetsActionsBackspace()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsActionsBackAccent() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 30), false, 0)
        StyleKit.draw_AssetsActionsBackAccent()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsActionsBackWhite() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 30), false, 0)
        StyleKit.draw_AssetsActionsBackWhite()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsActionsDictation() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 30), false, 0)
        StyleKit.draw_AssetsActionsDictation()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsActionsMoreAccent() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 30), false, 0)
        StyleKit.draw_AssetsActionsMoreAccent()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsDisclosureFw2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 32, height: 32), false, 0)
        StyleKit.draw_AssetsDisclosureFw2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsDisclosureBw2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 32, height: 32), false, 0)
        StyleKit.draw_AssetsDisclosureBw2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsDisclosureDown2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 32, height: 32), false, 0)
        StyleKit.draw_AssetsDisclosureDown2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsDisclosureUp2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 32, height: 32), false, 0)
        StyleKit.draw_AssetsDisclosureUp2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsDisclosureFw() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 32, height: 32), false, 0)
        StyleKit.draw_AssetsDisclosureFw()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsDisclosureBw() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 32, height: 32), false, 0)
        StyleKit.draw_AssetsDisclosureBw()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsDisclosureDown() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 32, height: 32), false, 0)
        StyleKit.draw_AssetsDisclosureDown()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsDisclosureUp() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 32, height: 32), false, 0)
        StyleKit.draw_AssetsDisclosureUp()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsCheckboxesEmpty() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 30), false, 0)
        StyleKit.draw_AssetsCheckboxesEmpty()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsCheckboxesRadioOk() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 30), false, 0)
        StyleKit.draw_AssetsCheckboxesRadioOk()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsCheckboxes_EmptyWhite() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 30), false, 0)
        StyleKit.draw_AssetsCheckboxes_EmptyWhite()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsCheckboxesRadioOkWhite() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 30), false, 0)
        StyleKit.draw_AssetsCheckboxesRadioOkWhite()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsCheckboxesOk() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 30), false, 0)
        StyleKit.draw_AssetsCheckboxesOk()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsCheckboxesOkInactive() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 30), false, 0)
        StyleKit.draw_AssetsCheckboxesOkInactive()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsCheckboxesOkWhite() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 30), false, 0)
        StyleKit.draw_AssetsCheckboxesOkWhite()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsMiscOnlineMarker() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 22), false, 0)
        StyleKit.draw_AssetsMiscOnlineMarker()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsMiscCheck() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 22), false, 0)
        StyleKit.draw_AssetsMiscCheck()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsMiscLike() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 22), false, 0)
        StyleKit.draw_AssetsMiscLike()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsMiscAdd() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 22), false, 0)
        StyleKit.draw_AssetsMiscAdd()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsMiscFriend() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 22), false, 0)
        StyleKit.draw_AssetsMiscFriend()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsMiscFlag() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 22, height: 22), false, 0)
        StyleKit.draw_AssetsMiscFlag()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsMiscTypeIndicator() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 6, height: 26), false, 0)
        StyleKit.draw_AssetsMiscTypeIndicator()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsMiscPopoverArrowType2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 38, height: 17), false, 0)
        StyleKit.draw_AssetsMiscPopoverArrowType2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsMiscPopoverArrowType1() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 38, height: 17), false, 0)
        StyleKit.draw_AssetsMiscPopoverArrowType1()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsMiscFaceID() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 40), false, 0)
        StyleKit.draw_AssetsMiscFaceID()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIPhoneX_ScreenShape() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        StyleKit.drawIPhoneX_ScreenShape()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButtonLargeAccent() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 50), false, 0)
        StyleKit.drawControlsButtonLargeAccent()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButtonLargeGrey() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 50), false, 0)
        StyleKit.drawControlsButtonLargeGrey()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButtonLargeWhite() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 50), false, 0)
        StyleKit.drawControlsButtonLargeWhite()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButtonLinkX2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        StyleKit.drawControlsButtonLinkX2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButtonLink() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        StyleKit.drawControlsButtonLink()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButtonRoundedSmall() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 38, height: 38), false, 0)
        StyleKit.drawControlsButtonRoundedSmall()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButtonRoundedAccent() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 37, height: 37), false, 0)
        StyleKit.drawControlsButtonRoundedAccent()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButtonRounded() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 37, height: 37), false, 0)
        StyleKit.drawControlsButtonRounded()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButtonSmallGrey() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 140, height: 28), false, 0)
        StyleKit.drawControlsButtonSmallGrey()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButtonSmallWhite() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 140, height: 28), false, 0)
        StyleKit.drawControlsButtonSmallWhite()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButtonSmallAccent() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 140, height: 28), false, 0)
        StyleKit.drawControlsButtonSmallAccent()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButton_LabelError() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 90), false, 0)
        StyleKit.drawControlsButton_LabelError()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButton_Label() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 90), false, 0)
        StyleKit.drawControlsButton_Label()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButton_LabelDisclosure() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 90), false, 0)
        StyleKit.drawControlsButton_LabelDisclosure()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButton_GlyphLabelError() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 90), false, 0)
        StyleKit.drawControlsButton_GlyphLabelError()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButton_GlyphLabel() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 90), false, 0)
        StyleKit.drawControlsButton_GlyphLabel()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButton_LabelMedium() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 90), false, 0)
        StyleKit.drawControlsButton_LabelMedium()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButton_GlyphLabelMedium() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 90), false, 0)
        StyleKit.drawControlsButton_GlyphLabelMedium()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButton_GlyphLabel11() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 90), false, 0)
        StyleKit.drawControlsButton_GlyphLabel11()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButton_LabelWhite() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 90), false, 0)
        StyleKit.drawControlsButton_LabelWhite()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButton_LabelDisclosureWhite() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 90), false, 0)
        StyleKit.drawControlsButton_LabelDisclosureWhite()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButton_GlyphLabelWhite() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 90), false, 0)
        StyleKit.drawControlsButton_GlyphLabelWhite()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButton_XSmallLabel() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 28), false, 0)
        StyleKit.drawControlsButton_XSmallLabel()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButton_XSmallGlyphAdd() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 28), false, 0)
        StyleKit.drawControlsButton_XSmallGlyphAdd()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButton_XSmallGlyph() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 28), false, 0)
        StyleKit.drawControlsButton_XSmallGlyph()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButton_XSmallLabelWhite() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 28), false, 0)
        StyleKit.drawControlsButton_XSmallLabelWhite()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButton_XSmallGlyphAddWhite() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 28), false, 0)
        StyleKit.drawControlsButton_XSmallGlyphAddWhite()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButton_XSmallGlyphWhite() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 28), false, 0)
        StyleKit.drawControlsButton_XSmallGlyphWhite()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsSegmentedControlDefault() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        StyleKit.drawControlsSegmentedControlDefault()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsSegmentedControlAsNavigationBar() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 52), false, 0)
        StyleKit.drawControlsSegmentedControlAsNavigationBar()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsSegmentedControl_2Items() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 320, height: 38), false, 0)
        StyleKit.drawControlsSegmentedControl_2Items()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsSegmentedControl_3Items() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 320, height: 38), false, 0)
        StyleKit.drawControlsSegmentedControl_3Items()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsSegmentedControl_4Items() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 320, height: 38), false, 0)
        StyleKit.drawControlsSegmentedControl_4Items()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsSegmentedControl_5Items() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 320, height: 38), false, 0)
        StyleKit.drawControlsSegmentedControl_5Items()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsSegmentedControl_Active() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 320, height: 90), false, 0)
        StyleKit.drawControlsSegmentedControl_Active()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsSegmentedControl_Inactive() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 320, height: 90), false, 0)
        StyleKit.drawControlsSegmentedControl_Inactive()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsProgress_LineComplete() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 4), false, 0)
        StyleKit.drawControlsProgress_LineComplete()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsProgressSpiner() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        StyleKit.drawControlsProgressSpiner()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsProgressLine() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        StyleKit.drawControlsProgressLine()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsProgress_Line25() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 300, height: 90), false, 0)
        StyleKit.drawControlsProgress_Line25()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsProgress_Line50() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 300, height: 90), false, 0)
        StyleKit.drawControlsProgress_Line50()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsProgress_Line75() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 300, height: 90), false, 0)
        StyleKit.drawControlsProgress_Line75()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsProgress_SpinerBig() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 302, height: 90), false, 0)
        StyleKit.drawControlsProgress_SpinerBig()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsProgress_SpinerSmall() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 302, height: 90), false, 0)
        StyleKit.drawControlsProgress_SpinerSmall()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsSliderProgress() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        StyleKit.drawControlsSliderProgress()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsSliderSteps() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        StyleKit.drawControlsSliderSteps()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsSlider_Line25() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 280, height: 90), false, 0)
        StyleKit.drawControlsSlider_Line25()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsSlider_Line50() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 280, height: 90), false, 0)
        StyleKit.drawControlsSlider_Line50()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsSlider_Line75() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 280, height: 90), false, 0)
        StyleKit.drawControlsSlider_Line75()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsSlider_Step1() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 282, height: 90), false, 0)
        StyleKit.drawControlsSlider_Step1()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsSlider_Step2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 282, height: 90), false, 0)
        StyleKit.drawControlsSlider_Step2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsSlider_Step3() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 282, height: 90), false, 0)
        StyleKit.drawControlsSlider_Step3()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsSlider_Step4() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 282, height: 90), false, 0)
        StyleKit.drawControlsSlider_Step4()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsPageControl2Items() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        StyleKit.drawControlsPageControl2Items()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsPageControl3Items() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        StyleKit.drawControlsPageControl3Items()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsPageControl4Items() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        StyleKit.drawControlsPageControl4Items()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsPageControl5Items() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        StyleKit.drawControlsPageControl5Items()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsPageControl_ActiveAccent() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 260, height: 80), false, 0)
        StyleKit.drawControlsPageControl_ActiveAccent()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsPageControl_Inactive() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 260, height: 80), false, 0)
        StyleKit.drawControlsPageControl_Inactive()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsPageControl_ActiveGrey() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 260, height: 80), false, 0)
        StyleKit.drawControlsPageControl_ActiveGrey()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsCalendarDefault() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 285), false, 0)
        StyleKit.drawControlsCalendarDefault()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsCalendarForNavigationBar() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 74), false, 0)
        StyleKit.drawControlsCalendarForNavigationBar()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsStepper() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 249, height: 44), false, 0)
        StyleKit.drawControlsStepper()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsSwitchOn() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 250, height: 44), false, 0)
        StyleKit.drawControlsSwitchOn()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsSwitchOff() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 250, height: 44), false, 0)
        StyleKit.drawControlsSwitchOff()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsEditMenu2Items() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 55), false, 0)
        StyleKit.drawControlsEditMenu2Items()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsEditMenu3Items() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 55), false, 0)
        StyleKit.drawControlsEditMenu3Items()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsEditMenu4Items() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 55), false, 0)
        StyleKit.drawControlsEditMenu4Items()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsEditMenu_Label() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 302, height: 45), false, 0)
        StyleKit.drawControlsEditMenu_Label()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsEditMenu_BottomLeft() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 304, height: 55), false, 0)
        StyleKit.drawControlsEditMenu_BottomLeft()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsEditMenu_BottomCenter() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 304, height: 55), false, 0)
        StyleKit.drawControlsEditMenu_BottomCenter()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsEditMenu_BottomRight() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 304, height: 55), false, 0)
        StyleKit.drawControlsEditMenu_BottomRight()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsInputOverlay() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 50), false, 0)
        StyleKit.drawControlsInputOverlay()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsInputTextField() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        StyleKit.drawControlsInputTextField()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsInput_LPlaceholder() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 180, height: 80), false, 0)
        StyleKit.drawControlsInput_LPlaceholder()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsInput_LTyping() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 180, height: 80), false, 0)
        StyleKit.drawControlsInput_LTyping()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsInput_LDefault() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 180, height: 80), false, 0)
        StyleKit.drawControlsInput_LDefault()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsInput_RShowPass() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 100, height: 80), false, 0)
        StyleKit.drawControlsInput_RShowPass()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsInput_RHidePass() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 100, height: 80), false, 0)
        StyleKit.drawControlsInput_RHidePass()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsInput_TextFieldLPlaceholder() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 178, height: 44), false, 0)
        StyleKit.drawControlsInput_TextFieldLPlaceholder()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsInput_TextFieldLDefault() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 178, height: 44), false, 0)
        StyleKit.drawControlsInput_TextFieldLDefault()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsInput_TextFieldLTyping() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 178, height: 44), false, 0)
        StyleKit.drawControlsInput_TextFieldLTyping()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsInputMessage() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 52), false, 0)
        StyleKit.drawControlsInputMessage()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsInput_MessageLInput1() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 365, height: 52), false, 0)
        StyleKit.drawControlsInput_MessageLInput1()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsInput_MessageLInput4() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 365, height: 52), false, 0)
        StyleKit.drawControlsInput_MessageLInput4()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsInput_MessageLInput3() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 365, height: 52), false, 0)
        StyleKit.drawControlsInput_MessageLInput3()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsInput_MessageLInput2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 365, height: 52), false, 0)
        StyleKit.drawControlsInput_MessageLInput2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsDatePicker() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 177), false, 0)
        StyleKit.drawControlsDatePicker()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIPhoneXKeyboardsPickersDayTime() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 250), false, 0)
        StyleKit.drawIPhoneXKeyboardsPickersDayTime()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIPhoneXKeyboardsPickersDateMonthYear() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 250), false, 0)
        StyleKit.drawIPhoneXKeyboardsPickersDateMonthYear()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIPhoneXKeyboardsPickersTime() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 250), false, 0)
        StyleKit.drawIPhoneXKeyboardsPickersTime()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfKeyboardsPickersDayTime() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 216), false, 0)
        StyleKit.drawKeyboardsPickersDayTime()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfKeyboardsPickersDateMonthYear() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 216), false, 0)
        StyleKit.drawKeyboardsPickersDateMonthYear()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfKeyboardsPickersTime() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 216), false, 0)
        StyleKit.drawKeyboardsPickersTime()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfMaps_Position() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 94, height: 94), false, 0)
        StyleKit.drawMaps_Position()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfMaps_Pin() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 94, height: 94), false, 0)
        StyleKit.drawMaps_Pin()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfMaps_Photos() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 94, height: 94), false, 0)
        StyleKit.drawMaps_Photos()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfMapsStreet() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 112, height: 112), false, 0)
        StyleKit.drawMapsStreet()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfImagesBitmapSquared() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 110, height: 110), false, 0)
        StyleKit.drawImagesBitmapSquared()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfMapsCity() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 111, height: 112), false, 0)
        StyleKit.drawMapsCity()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfImagesBitmapRoundedR6() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 110, height: 110), false, 0)
        StyleKit.drawImagesBitmapRoundedR6()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfImagesBitmapRoundedR10() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 110, height: 110), false, 0)
        StyleKit.drawImagesBitmapRoundedR10()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfImagesBitmapCircle() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 110, height: 110), false, 0)
        StyleKit.drawImagesBitmapCircle()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfImagesBitmapAppIcon() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 110, height: 110), false, 0)
        StyleKit.drawImagesBitmapAppIcon()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfImagesBitmapMedia() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 110, height: 110), false, 0)
        StyleKit.drawImagesBitmapMedia()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfImages__Empty() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 110, height: 70), false, 0)
        StyleKit.drawImages__Empty()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfImages_TimeOverlay() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 110, height: 70), false, 0)
        StyleKit.drawImages_TimeOverlay()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfImages_Time() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 110, height: 70), false, 0)
        StyleKit.drawImages_Time()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfImages_VolumeIndicator() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 110, height: 70), false, 0)
        StyleKit.drawImages_VolumeIndicator()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfImages_PlayButtton() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 110, height: 70), false, 0)
        StyleKit.drawImages_PlayButtton()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfKeyboardsDefault() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 216), false, 0)
        StyleKit.drawKeyboardsDefault()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfKeyboardsNumpad() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 216), false, 0)
        StyleKit.drawKeyboardsNumpad()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfKeyboardsEmoji() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 258), false, 0)
        StyleKit.drawKeyboardsEmoji()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfKeyboardsDefaultLandscape() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 667, height: 162), false, 0)
        StyleKit.drawKeyboardsDefaultLandscape()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIPhoneXKeyboardsDefault() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 291), false, 0)
        StyleKit.drawIPhoneXKeyboardsDefault()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIPhoneXKeyboardsNumpad() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 291), false, 0)
        StyleKit.drawIPhoneXKeyboardsNumpad()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIPhoneXKeyboardsEmoji() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 333), false, 0)
        StyleKit.drawIPhoneXKeyboardsEmoji()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIPhoneXKeyboardsDefaultLandscape() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 812, height: 172), false, 0)
        StyleKit.drawIPhoneXKeyboardsDefaultLandscape()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfKeyboards_SimpleButtonDefault() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 374, height: 52), false, 0)
        StyleKit.drawKeyboards_SimpleButtonDefault()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfKeyboards_SimpleButtonActive() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 374, height: 52), false, 0)
        StyleKit.drawKeyboards_SimpleButtonActive()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfKeyboards_ComplexButtonDefault() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 374, height: 52), false, 0)
        StyleKit.drawKeyboards_ComplexButtonDefault()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfKeyboards_ComplexButtonActive() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 374, height: 52), false, 0)
        StyleKit.drawKeyboards_ComplexButtonActive()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfKeyboards_SimpleButtonDefaultLandscape() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 667, height: 40), false, 0)
        StyleKit.drawKeyboards_SimpleButtonDefaultLandscape()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfKeyboards_SimpleButtonActiveLandscape() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 667, height: 40), false, 0)
        StyleKit.drawKeyboards_SimpleButtonActiveLandscape()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfKeyboards_ComplexButtonDefaultLandscape() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 667, height: 40), false, 0)
        StyleKit.drawKeyboards_ComplexButtonDefaultLandscape()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfKeyboards_ComplexButtonActiveLandscape() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 667, height: 40), false, 0)
        StyleKit.drawKeyboards_ComplexButtonActiveLandscape()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIPhoneXKeyboards_ButtonDefaultLandscape() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 812, height: 40), false, 0)
        StyleKit.drawIPhoneXKeyboards_ButtonDefaultLandscape()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIPhoneXKeyboards_SimpleButtonActiveLandscapeX() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 812, height: 40), false, 0)
        StyleKit.drawIPhoneXKeyboards_SimpleButtonActiveLandscapeX()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIPhoneXKeyboards_ComplexButtonDefaultLandscapeX() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 812, height: 40), false, 0)
        StyleKit.drawIPhoneXKeyboards_ComplexButtonDefaultLandscapeX()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIPhoneXKeyboards_ComplexButtonActiveLandscapeX() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 812, height: 40), false, 0)
        StyleKit.drawIPhoneXKeyboards_ComplexButtonActiveLandscapeX()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIPhoneXBarsStatusDefault() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 377, height: 44), false, 0)
        StyleKit.drawIPhoneXBarsStatusDefault()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIPhoneXBarsStatusDefaultWhite() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 377, height: 44), false, 0)
        StyleKit.drawIPhoneXBarsStatusDefaultWhite()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIPhoneXBarsStatusWithAction() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 377, height: 44), false, 0)
        StyleKit.drawIPhoneXBarsStatusWithAction()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIPhoneXBarsStatusWithActionWhite() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 377, height: 44), false, 0)
        StyleKit.drawIPhoneXBarsStatusWithActionWhite()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsStatusDefault() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 20), false, 0)
        StyleKit.drawBarsStatusDefault()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsStatusBackToApp() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 20), false, 0)
        StyleKit.drawBarsStatusBackToApp()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsStatusDefaultWhite() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 20), false, 0)
        StyleKit.drawBarsStatusDefaultWhite()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsStatusBackToAppWhite() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 20), false, 0)
        StyleKit.drawBarsStatusBackToAppWhite()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsStatusAction() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 40), false, 0)
        StyleKit.drawBarsStatusAction()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIPhoneX_StatusBarTime() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 180, height: 22), false, 0)
        StyleKit.drawIPhoneX_StatusBarTime()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIPhoneX_StatusBarTimeWhite() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 180, height: 22), false, 0)
        StyleKit.drawIPhoneX_StatusBarTimeWhite()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIPhoneX_StatusBarActionGreen() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 180, height: 22), false, 0)
        StyleKit.drawIPhoneX_StatusBarActionGreen()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIPhoneX_StatusBarActionRed() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 180, height: 22), false, 0)
        StyleKit.drawIPhoneX_StatusBarActionRed()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIPhoneX_StatusBarActionBlue() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 180, height: 22), false, 0)
        StyleKit.drawIPhoneX_StatusBarActionBlue()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigationLarge() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 116), false, 0)
        StyleKit.drawBarsNavigationLarge()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigationDefault() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 64), false, 0)
        StyleKit.drawBarsNavigationDefault()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIPhoneXBarsNavigationDefault() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 88), false, 0)
        StyleKit.drawIPhoneXBarsNavigationDefault()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIPhoneXBarsNavigationLarge() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 140), false, 0)
        StyleKit.drawIPhoneXBarsNavigationLarge()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigation_LGlyph() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 300, height: 100), false, 0)
        StyleKit.drawBarsNavigation_LGlyph()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigation_LBack() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 300, height: 100), false, 0)
        StyleKit.drawBarsNavigation_LBack()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigation_LLabel2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 300, height: 100), false, 0)
        StyleKit.drawBarsNavigation_LLabel2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigation_LLabelPrimary() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 300, height: 100), false, 0)
        StyleKit.drawBarsNavigation_LLabelPrimary()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigation_LLabel() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 300, height: 100), false, 0)
        StyleKit.drawBarsNavigation_LLabel()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigation_LBackWhite() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 300, height: 100), false, 0)
        StyleKit.drawBarsNavigation_LBackWhite()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigation_LLabelWhite() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 300, height: 100), false, 0)
        StyleKit.drawBarsNavigation_LLabelWhite()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigation_LLabelPrimaryWhite() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 300, height: 100), false, 0)
        StyleKit.drawBarsNavigation_LLabelPrimaryWhite()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigation_CHeadline() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 302, height: 100), false, 0)
        StyleKit.drawBarsNavigation_CHeadline()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigation_CHeadlineSubtitle() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 302, height: 100), false, 0)
        StyleKit.drawBarsNavigation_CHeadlineSubtitle()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigation_CSegmented() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 302, height: 100), false, 0)
        StyleKit.drawBarsNavigation_CSegmented()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigation_CHeadlineWhite() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 302, height: 100), false, 0)
        StyleKit.drawBarsNavigation_CHeadlineWhite()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigation_RGlyph() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 304, height: 100), false, 0)
        StyleKit.drawBarsNavigation_RGlyph()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigation_RGlyphX2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 304, height: 100), false, 0)
        StyleKit.drawBarsNavigation_RGlyphX2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigation_RAction() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 304, height: 100), false, 0)
        StyleKit.drawBarsNavigation_RAction()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigation_RNext() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 304, height: 100), false, 0)
        StyleKit.drawBarsNavigation_RNext()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigation_RLabel() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 304, height: 100), false, 0)
        StyleKit.drawBarsNavigation_RLabel()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigation_RLabelPrimary() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 304, height: 100), false, 0)
        StyleKit.drawBarsNavigation_RLabelPrimary()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigation_RLabelPrimaryInactive() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 304, height: 100), false, 0)
        StyleKit.drawBarsNavigation_RLabelPrimaryInactive()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigation_RBitmap() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 304, height: 100), false, 0)
        StyleKit.drawBarsNavigation_RBitmap()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigation_RLabelPrimaryWhite() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 304, height: 100), false, 0)
        StyleKit.drawBarsNavigation_RLabelPrimaryWhite()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigation_RNextWhite() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 304, height: 100), false, 0)
        StyleKit.drawBarsNavigation_RNextWhite()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigation_RLabelWhite() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 304, height: 100), false, 0)
        StyleKit.drawBarsNavigation_RLabelWhite()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigation_RBottomGlyph() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 306, height: 100), false, 0)
        StyleKit.drawBarsNavigation_RBottomGlyph()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigation_RBottomAction() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 306, height: 100), false, 0)
        StyleKit.drawBarsNavigation_RBottomAction()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigation_RBottomLabel() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 306, height: 100), false, 0)
        StyleKit.drawBarsNavigation_RBottomLabel()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigation_RBottomBitmap() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 306, height: 100), false, 0)
        StyleKit.drawBarsNavigation_RBottomBitmap()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigation_RBottomButton() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 306, height: 100), false, 0)
        StyleKit.drawBarsNavigation_RBottomButton()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsTabsDefault() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 49), false, 0)
        StyleKit.drawBarsTabsDefault()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIPhoneXBarsTabs() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 83), false, 0)
        StyleKit.drawIPhoneXBarsTabs()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsTabs_2Items() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 320, height: 49), false, 0)
        StyleKit.drawBarsTabs_2Items()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsTabs_3Items() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 320, height: 49), false, 0)
        StyleKit.drawBarsTabs_3Items()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsTabs_5Items() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 320, height: 49), false, 0)
        StyleKit.drawBarsTabs_5Items()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsTabs_Active() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 140, height: 49), false, 0)
        StyleKit.drawBarsTabs_Active()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsTabs_Inactive() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 140, height: 49), false, 0)
        StyleKit.drawBarsTabs_Inactive()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsSearchForNavigationBar() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 48), false, 0)
        StyleKit.drawBarsSearchForNavigationBar()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsSearchDefault() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 56), false, 0)
        StyleKit.drawBarsSearchDefault()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsSearch_Placeholder() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 280, height: 100), false, 0)
        StyleKit.drawBarsSearch_Placeholder()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsSearch_PlaceholderCancel() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 280, height: 100), false, 0)
        StyleKit.drawBarsSearch_PlaceholderCancel()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsSearch_PlaceholderActive() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 280, height: 100), false, 0)
        StyleKit.drawBarsSearch_PlaceholderActive()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsSearch_PlaceholderWhite() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 280, height: 100), false, 0)
        StyleKit.drawBarsSearch_PlaceholderWhite()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsSearch_PlaceholderCancelWhite() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 280, height: 100), false, 0)
        StyleKit.drawBarsSearch_PlaceholderCancelWhite()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsSearch_PlaceholderActiveWhite() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 280, height: 100), false, 0)
        StyleKit.drawBarsSearch_PlaceholderActiveWhite()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsToolbarDefault() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        StyleKit.drawBarsToolbarDefault()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIPhoneXBarsToolbar() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 78), false, 0)
        StyleKit.drawIPhoneXBarsToolbar()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsToolbar_LGlyph() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 260, height: 100), false, 0)
        StyleKit.drawBarsToolbar_LGlyph()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsToolbar_LGlyphX2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 260, height: 100), false, 0)
        StyleKit.drawBarsToolbar_LGlyphX2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsToolbar_LLabel() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 260, height: 100), false, 0)
        StyleKit.drawBarsToolbar_LLabel()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsToolbar_LLabelPrimary() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 260, height: 100), false, 0)
        StyleKit.drawBarsToolbar_LLabelPrimary()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsToolbar_CGlyph() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 262, height: 100), false, 0)
        StyleKit.drawBarsToolbar_CGlyph()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsToolbar_CTitleLink() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 262, height: 100), false, 0)
        StyleKit.drawBarsToolbar_CTitleLink()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsToolbar_CLabel() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 262, height: 100), false, 0)
        StyleKit.drawBarsToolbar_CLabel()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsToolbar_CLabelPrimary() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 262, height: 100), false, 0)
        StyleKit.drawBarsToolbar_CLabelPrimary()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsToolbar_RGlyph() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 264, height: 100), false, 0)
        StyleKit.drawBarsToolbar_RGlyph()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsToolbar_RGlyphX2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 264, height: 100), false, 0)
        StyleKit.drawBarsToolbar_RGlyphX2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsToolbar_RLabel() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 264, height: 100), false, 0)
        StyleKit.drawBarsToolbar_RLabel()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsToolbar_RLabelPrimary() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 264, height: 100), false, 0)
        StyleKit.drawBarsToolbar_RLabelPrimary()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_AssetsSeparator_Empty() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 1), false, 0)
        StyleKit.draw_AssetsSeparator_Empty()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsTabBar_Empty() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        StyleKit.draw_GlyphsTabBar_Empty()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsNavToolbar_Empty() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
        StyleKit.draw_GlyphsNavToolbar_Empty()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsQuickAction_Empty() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
        StyleKit.draw_GlyphsQuickAction_Empty()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsSmall_Empty() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.draw_GlyphsSmall_Empty()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_GlyphsXSmall_Empty() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        StyleKit.draw_GlyphsXSmall_Empty()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsInput_R_Empty() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 100, height: 80), false, 0)
        StyleKit.drawControlsInput_R_Empty()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigation_L_Empty() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 300, height: 100), false, 0)
        StyleKit.drawBarsNavigation_L_Empty()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigation_C_Empty() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 302, height: 100), false, 0)
        StyleKit.drawBarsNavigation_C_Empty()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigation_R_Empty() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 304, height: 100), false, 0)
        StyleKit.drawBarsNavigation_R_Empty()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigation_RBottom_Empty() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 306, height: 100), false, 0)
        StyleKit.drawBarsNavigation_RBottom_Empty()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsToolbar_L_Empty() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 260, height: 100), false, 0)
        StyleKit.drawBarsToolbar_L_Empty()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsToolbar_C_Empty() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 262, height: 100), false, 0)
        StyleKit.drawBarsToolbar_C_Empty()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsToolbar_R_Empty() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 264, height: 100), false, 0)
        StyleKit.drawBarsToolbar_R_Empty()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
